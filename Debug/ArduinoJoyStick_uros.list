
ArduinoJoyStick_uros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000196dc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000134c  080198c0  080198c0  0001a8c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ac0c  0801ac0c  0001c400  2**0
                  CONTENTS
  4 .ARM          00000008  0801ac0c  0801ac0c  0001bc0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ac14  0801ac14  0001c400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801ac14  0801ac14  0001bc14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ac20  0801ac20  0001bc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000400  20000000  0801ac24  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000af3c  20000400  0801b024  0001c400  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000b33c  0801b024  0001d33c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c400  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027754  00000000  00000000  0001c430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000525b  00000000  00000000  00043b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f20  00000000  00000000  00048de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017f4  00000000  00000000  0004ad00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ed04  00000000  00000000  0004c4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025cc2  00000000  00000000  0007b1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001296dd  00000000  00000000  000a0eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001ca597  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009268  00000000  00000000  001ca610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001d3878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000400 	.word	0x20000400
 80001fc:	00000000 	.word	0x00000000
 8000200:	080198a4 	.word	0x080198a4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000404 	.word	0x20000404
 800021c:	080198a4 	.word	0x080198a4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_d2f>:
 8000668:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800066c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000670:	bf24      	itt	cs
 8000672:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000676:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800067a:	d90d      	bls.n	8000698 <__aeabi_d2f+0x30>
 800067c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000680:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000684:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000688:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800068c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000690:	bf08      	it	eq
 8000692:	f020 0001 	biceq.w	r0, r0, #1
 8000696:	4770      	bx	lr
 8000698:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800069c:	d121      	bne.n	80006e2 <__aeabi_d2f+0x7a>
 800069e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80006a2:	bfbc      	itt	lt
 80006a4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80006a8:	4770      	bxlt	lr
 80006aa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80006b2:	f1c2 0218 	rsb	r2, r2, #24
 80006b6:	f1c2 0c20 	rsb	ip, r2, #32
 80006ba:	fa10 f30c 	lsls.w	r3, r0, ip
 80006be:	fa20 f002 	lsr.w	r0, r0, r2
 80006c2:	bf18      	it	ne
 80006c4:	f040 0001 	orrne.w	r0, r0, #1
 80006c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80006d0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80006d4:	ea40 000c 	orr.w	r0, r0, ip
 80006d8:	fa23 f302 	lsr.w	r3, r3, r2
 80006dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006e0:	e7cc      	b.n	800067c <__aeabi_d2f+0x14>
 80006e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006e6:	d107      	bne.n	80006f8 <__aeabi_d2f+0x90>
 80006e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006ec:	bf1e      	ittt	ne
 80006ee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80006f2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80006f6:	4770      	bxne	lr
 80006f8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80006fc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000700:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop

08000708 <__aeabi_ldivmod>:
 8000708:	b97b      	cbnz	r3, 800072a <__aeabi_ldivmod+0x22>
 800070a:	b972      	cbnz	r2, 800072a <__aeabi_ldivmod+0x22>
 800070c:	2900      	cmp	r1, #0
 800070e:	bfbe      	ittt	lt
 8000710:	2000      	movlt	r0, #0
 8000712:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000716:	e006      	blt.n	8000726 <__aeabi_ldivmod+0x1e>
 8000718:	bf08      	it	eq
 800071a:	2800      	cmpeq	r0, #0
 800071c:	bf1c      	itt	ne
 800071e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000722:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000726:	f000 b9b5 	b.w	8000a94 <__aeabi_idiv0>
 800072a:	f1ad 0c08 	sub.w	ip, sp, #8
 800072e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000732:	2900      	cmp	r1, #0
 8000734:	db09      	blt.n	800074a <__aeabi_ldivmod+0x42>
 8000736:	2b00      	cmp	r3, #0
 8000738:	db1a      	blt.n	8000770 <__aeabi_ldivmod+0x68>
 800073a:	f000 f84d 	bl	80007d8 <__udivmoddi4>
 800073e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000742:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000746:	b004      	add	sp, #16
 8000748:	4770      	bx	lr
 800074a:	4240      	negs	r0, r0
 800074c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000750:	2b00      	cmp	r3, #0
 8000752:	db1b      	blt.n	800078c <__aeabi_ldivmod+0x84>
 8000754:	f000 f840 	bl	80007d8 <__udivmoddi4>
 8000758:	f8dd e004 	ldr.w	lr, [sp, #4]
 800075c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000760:	b004      	add	sp, #16
 8000762:	4240      	negs	r0, r0
 8000764:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000768:	4252      	negs	r2, r2
 800076a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800076e:	4770      	bx	lr
 8000770:	4252      	negs	r2, r2
 8000772:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000776:	f000 f82f 	bl	80007d8 <__udivmoddi4>
 800077a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800077e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000782:	b004      	add	sp, #16
 8000784:	4240      	negs	r0, r0
 8000786:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078a:	4770      	bx	lr
 800078c:	4252      	negs	r2, r2
 800078e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000792:	f000 f821 	bl	80007d8 <__udivmoddi4>
 8000796:	f8dd e004 	ldr.w	lr, [sp, #4]
 800079a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800079e:	b004      	add	sp, #16
 80007a0:	4252      	negs	r2, r2
 80007a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007a6:	4770      	bx	lr

080007a8 <__aeabi_uldivmod>:
 80007a8:	b953      	cbnz	r3, 80007c0 <__aeabi_uldivmod+0x18>
 80007aa:	b94a      	cbnz	r2, 80007c0 <__aeabi_uldivmod+0x18>
 80007ac:	2900      	cmp	r1, #0
 80007ae:	bf08      	it	eq
 80007b0:	2800      	cmpeq	r0, #0
 80007b2:	bf1c      	itt	ne
 80007b4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80007b8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80007bc:	f000 b96a 	b.w	8000a94 <__aeabi_idiv0>
 80007c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007c8:	f000 f806 	bl	80007d8 <__udivmoddi4>
 80007cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007d4:	b004      	add	sp, #16
 80007d6:	4770      	bx	lr

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08c      	sub	sp, #48	@ 0x30
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2220      	movs	r2, #32
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f017 ffed 	bl	8018a90 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ab6:	4b39      	ldr	r3, [pc, #228]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000ab8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000abc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000abe:	4b37      	ldr	r3, [pc, #220]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000ac0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000ac4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ac6:	4b35      	ldr	r3, [pc, #212]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000acc:	4b33      	ldr	r3, [pc, #204]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000ad2:	4b32      	ldr	r3, [pc, #200]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ad8:	4b30      	ldr	r3, [pc, #192]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ade:	4b2f      	ldr	r3, [pc, #188]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000aea:	4b2c      	ldr	r3, [pc, #176]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000af0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000af2:	2202      	movs	r2, #2
 8000af4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000af6:	4b29      	ldr	r3, [pc, #164]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000afe:	4b27      	ldr	r3, [pc, #156]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b04:	4b25      	ldr	r3, [pc, #148]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b0a:	4b24      	ldr	r3, [pc, #144]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b12:	4b22      	ldr	r3, [pc, #136]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000b18:	4b20      	ldr	r3, [pc, #128]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b20:	481e      	ldr	r0, [pc, #120]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b22:	f001 feb3 	bl	800288c <HAL_ADC_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000b2c:	f000 ff84 	bl	8001a38 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4818      	ldr	r0, [pc, #96]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b3c:	f003 fa6e 	bl	800401c <HAL_ADCEx_MultiModeConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000b46:	f000 ff77 	bl	8001a38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <MX_ADC1_Init+0x108>)
 8000b4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b4e:	2306      	movs	r3, #6
 8000b50:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000b52:	2307      	movs	r3, #7
 8000b54:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b56:	237f      	movs	r3, #127	@ 0x7f
 8000b58:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	4619      	mov	r1, r3
 8000b66:	480d      	ldr	r0, [pc, #52]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b68:	f002 fba8 	bl	80032bc <HAL_ADC_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000b72:	f000 ff61 	bl	8001a38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba4 <MX_ADC1_Init+0x10c>)
 8000b78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b7a:	230c      	movs	r3, #12
 8000b7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	4806      	ldr	r0, [pc, #24]	@ (8000b9c <MX_ADC1_Init+0x104>)
 8000b84:	f002 fb9a 	bl	80032bc <HAL_ADC_ConfigChannel>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000b8e:	f000 ff53 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	3730      	adds	r7, #48	@ 0x30
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2000041c 	.word	0x2000041c
 8000ba0:	04300002 	.word	0x04300002
 8000ba4:	08600004 	.word	0x08600004

08000ba8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b09e      	sub	sp, #120	@ 0x78
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc0:	f107 0310 	add.w	r3, r7, #16
 8000bc4:	2254      	movs	r2, #84	@ 0x54
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f017 ff61 	bl	8018a90 <memset>
  if(adcHandle->Instance==ADC1)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bd6:	d167      	bne.n	8000ca8 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000bd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bdc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000bde:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000be2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	4618      	mov	r0, r3
 8000bea:	f004 ff27 	bl	8005a3c <HAL_RCCEx_PeriphCLKConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000bf4:	f000 ff20 	bl	8001a38 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb0 <HAL_ADC_MspInit+0x108>)
 8000bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfc:	4a2c      	ldr	r2, [pc, #176]	@ (8000cb0 <HAL_ADC_MspInit+0x108>)
 8000bfe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c04:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb0 <HAL_ADC_MspInit+0x108>)
 8000c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	4b27      	ldr	r3, [pc, #156]	@ (8000cb0 <HAL_ADC_MspInit+0x108>)
 8000c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c14:	4a26      	ldr	r2, [pc, #152]	@ (8000cb0 <HAL_ADC_MspInit+0x108>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c1c:	4b24      	ldr	r3, [pc, #144]	@ (8000cb0 <HAL_ADC_MspInit+0x108>)
 8000c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3e:	f003 ff13 	bl	8004a68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8000c42:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c44:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb8 <HAL_ADC_MspInit+0x110>)
 8000c46:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000c48:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c4a:	2205      	movs	r2, #5
 8000c4c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c4e:	4b19      	ldr	r3, [pc, #100]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c54:	4b17      	ldr	r3, [pc, #92]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c5c:	2280      	movs	r2, #128	@ 0x80
 8000c5e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c60:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c66:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c68:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c6e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c70:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c72:	2220      	movs	r2, #32
 8000c74:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c7c:	480d      	ldr	r0, [pc, #52]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c7e:	f003 fbb5 	bl	80043ec <HAL_DMA_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000c88:	f000 fed6 	bl	8001a38 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a09      	ldr	r2, [pc, #36]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c90:	655a      	str	r2, [r3, #84]	@ 0x54
 8000c92:	4a08      	ldr	r2, [pc, #32]	@ (8000cb4 <HAL_ADC_MspInit+0x10c>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2105      	movs	r1, #5
 8000c9c:	2012      	movs	r0, #18
 8000c9e:	f003 fb7d 	bl	800439c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000ca2:	2012      	movs	r0, #18
 8000ca4:	f003 fb94 	bl	80043d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ca8:	bf00      	nop
 8000caa:	3778      	adds	r7, #120	@ 0x78
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	20000488 	.word	0x20000488
 8000cb8:	40020030 	.word	0x40020030

08000cbc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cc0:	4a04      	ldr	r2, [pc, #16]	@ (8000cd4 <MX_FREERTOS_Init+0x18>)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4804      	ldr	r0, [pc, #16]	@ (8000cd8 <MX_FREERTOS_Init+0x1c>)
 8000cc6:	f007 fac5 	bl	8008254 <osThreadNew>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	4a03      	ldr	r2, [pc, #12]	@ (8000cdc <MX_FREERTOS_Init+0x20>)
 8000cce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	08019950 	.word	0x08019950
 8000cd8:	08001491 	.word	0x08001491
 8000cdc:	200004e8 	.word	0x200004e8

08000ce0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	@ 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000cec:	f008 fb86 	bl	80093fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000cf0:	4b5a      	ldr	r3, [pc, #360]	@ (8000e5c <pvPortMallocMicroROS+0x17c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d101      	bne.n	8000cfc <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000cf8:	f000 f986 	bl	8001008 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000cfc:	4b58      	ldr	r3, [pc, #352]	@ (8000e60 <pvPortMallocMicroROS+0x180>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4013      	ands	r3, r2
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f040 8090 	bne.w	8000e2a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d01e      	beq.n	8000d4e <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000d10:	2208      	movs	r2, #8
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d015      	beq.n	8000d4e <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f023 0307 	bic.w	r3, r3, #7
 8000d28:	3308      	adds	r3, #8
 8000d2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d00b      	beq.n	8000d4e <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d3a:	f383 8811 	msr	BASEPRI, r3
 8000d3e:	f3bf 8f6f 	isb	sy
 8000d42:	f3bf 8f4f 	dsb	sy
 8000d46:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	e7fd      	b.n	8000d4a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d06a      	beq.n	8000e2a <pvPortMallocMicroROS+0x14a>
 8000d54:	4b43      	ldr	r3, [pc, #268]	@ (8000e64 <pvPortMallocMicroROS+0x184>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d865      	bhi.n	8000e2a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000d5e:	4b42      	ldr	r3, [pc, #264]	@ (8000e68 <pvPortMallocMicroROS+0x188>)
 8000d60:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000d62:	4b41      	ldr	r3, [pc, #260]	@ (8000e68 <pvPortMallocMicroROS+0x188>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d68:	e004      	b.n	8000d74 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d6c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d903      	bls.n	8000d86 <pvPortMallocMicroROS+0xa6>
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1f1      	bne.n	8000d6a <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000d86:	4b35      	ldr	r3, [pc, #212]	@ (8000e5c <pvPortMallocMicroROS+0x17c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d04c      	beq.n	8000e2a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000d90:	6a3b      	ldr	r3, [r7, #32]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2208      	movs	r2, #8
 8000d96:	4413      	add	r3, r2
 8000d98:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	6a3b      	ldr	r3, [r7, #32]
 8000da0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	1ad2      	subs	r2, r2, r3
 8000daa:	2308      	movs	r3, #8
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d920      	bls.n	8000df4 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000db2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4413      	add	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	f003 0307 	and.w	r3, r3, #7
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d00b      	beq.n	8000ddc <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000dc8:	f383 8811 	msr	BASEPRI, r3
 8000dcc:	f3bf 8f6f 	isb	sy
 8000dd0:	f3bf 8f4f 	dsb	sy
 8000dd4:	613b      	str	r3, [r7, #16]
}
 8000dd6:	bf00      	nop
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dde:	685a      	ldr	r2, [r3, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	1ad2      	subs	r2, r2, r3
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000dee:	69b8      	ldr	r0, [r7, #24]
 8000df0:	f000 f96c 	bl	80010cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e64 <pvPortMallocMicroROS+0x184>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	4a19      	ldr	r2, [pc, #100]	@ (8000e64 <pvPortMallocMicroROS+0x184>)
 8000e00:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000e02:	4b18      	ldr	r3, [pc, #96]	@ (8000e64 <pvPortMallocMicroROS+0x184>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4b19      	ldr	r3, [pc, #100]	@ (8000e6c <pvPortMallocMicroROS+0x18c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d203      	bcs.n	8000e16 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000e0e:	4b15      	ldr	r3, [pc, #84]	@ (8000e64 <pvPortMallocMicroROS+0x184>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a16      	ldr	r2, [pc, #88]	@ (8000e6c <pvPortMallocMicroROS+0x18c>)
 8000e14:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <pvPortMallocMicroROS+0x180>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e22:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000e2a:	f008 faf5 	bl	8009418 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d00b      	beq.n	8000e50 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e3c:	f383 8811 	msr	BASEPRI, r3
 8000e40:	f3bf 8f6f 	isb	sy
 8000e44:	f3bf 8f4f 	dsb	sy
 8000e48:	60fb      	str	r3, [r7, #12]
}
 8000e4a:	bf00      	nop
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000e50:	69fb      	ldr	r3, [r7, #28]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3728      	adds	r7, #40	@ 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20004030 	.word	0x20004030
 8000e60:	2000403c 	.word	0x2000403c
 8000e64:	20004034 	.word	0x20004034
 8000e68:	20004028 	.word	0x20004028
 8000e6c:	20004038 	.word	0x20004038

08000e70 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d04a      	beq.n	8000f18 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000e82:	2308      	movs	r3, #8
 8000e84:	425b      	negs	r3, r3
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	4413      	add	r3, r2
 8000e8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	4b22      	ldr	r3, [pc, #136]	@ (8000f20 <vPortFreeMicroROS+0xb0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d10b      	bne.n	8000eb6 <vPortFreeMicroROS+0x46>
	__asm volatile
 8000e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ea2:	f383 8811 	msr	BASEPRI, r3
 8000ea6:	f3bf 8f6f 	isb	sy
 8000eaa:	f3bf 8f4f 	dsb	sy
 8000eae:	60fb      	str	r3, [r7, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	e7fd      	b.n	8000eb2 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d00b      	beq.n	8000ed6 <vPortFreeMicroROS+0x66>
	__asm volatile
 8000ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ec2:	f383 8811 	msr	BASEPRI, r3
 8000ec6:	f3bf 8f6f 	isb	sy
 8000eca:	f3bf 8f4f 	dsb	sy
 8000ece:	60bb      	str	r3, [r7, #8]
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	e7fd      	b.n	8000ed2 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <vPortFreeMicroROS+0xb0>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d019      	beq.n	8000f18 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d115      	bne.n	8000f18 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <vPortFreeMicroROS+0xb0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000efc:	f008 fa7e 	bl	80093fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <vPortFreeMicroROS+0xb4>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a06      	ldr	r2, [pc, #24]	@ (8000f24 <vPortFreeMicroROS+0xb4>)
 8000f0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000f0e:	6938      	ldr	r0, [r7, #16]
 8000f10:	f000 f8dc 	bl	80010cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000f14:	f008 fa80 	bl	8009418 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000f18:	bf00      	nop
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2000403c 	.word	0x2000403c
 8000f24:	20004034 	.word	0x20004034

08000f28 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000f34:	2308      	movs	r3, #8
 8000f36:	425b      	negs	r3, r3
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <getBlockSize+0x38>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60fb      	str	r3, [r7, #12]

	return count;
 8000f50:	68fb      	ldr	r3, [r7, #12]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	371c      	adds	r7, #28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	2000403c 	.word	0x2000403c

08000f64 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000f6e:	f008 fa45 	bl	80093fc <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000f72:	6838      	ldr	r0, [r7, #0]
 8000f74:	f7ff feb4 	bl	8000ce0 <pvPortMallocMicroROS>
 8000f78:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d017      	beq.n	8000fb0 <pvPortReallocMicroROS+0x4c>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d014      	beq.n	8000fb0 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffce 	bl	8000f28 <getBlockSize>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2208      	movs	r2, #8
 8000f90:	1a9b      	subs	r3, r3, r2
 8000f92:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d201      	bcs.n	8000fa0 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	68b8      	ldr	r0, [r7, #8]
 8000fa6:	f017 fe3c 	bl	8018c22 <memcpy>

		vPortFreeMicroROS(pv);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ff60 	bl	8000e70 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000fb0:	f008 fa32 	bl	8009418 <xTaskResumeAll>

	return newmem;
 8000fb4:	68bb      	ldr	r3, [r7, #8]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b086      	sub	sp, #24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000fc8:	f008 fa18 	bl	80093fc <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	fb02 f303 	mul.w	r3, r2, r3
 8000fd4:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	f7ff fe82 	bl	8000ce0 <pvPortMallocMicroROS>
 8000fdc:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000fe2:	e004      	b.n	8000fee <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	613a      	str	r2, [r7, #16]
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	1e5a      	subs	r2, r3, #1
 8000ff2:	617a      	str	r2, [r7, #20]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1f5      	bne.n	8000fe4 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000ff8:	f008 fa0e 	bl	8009418 <xTaskResumeAll>
  	return mem;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800100e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001012:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001014:	4b27      	ldr	r3, [pc, #156]	@ (80010b4 <prvHeapInit+0xac>)
 8001016:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00c      	beq.n	800103c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3307      	adds	r3, #7
 8001026:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f023 0307 	bic.w	r3, r3, #7
 800102e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001030:	68ba      	ldr	r2, [r7, #8]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	4a1f      	ldr	r2, [pc, #124]	@ (80010b4 <prvHeapInit+0xac>)
 8001038:	4413      	add	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001040:	4a1d      	ldr	r2, [pc, #116]	@ (80010b8 <prvHeapInit+0xb0>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001046:	4b1c      	ldr	r3, [pc, #112]	@ (80010b8 <prvHeapInit+0xb0>)
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	4413      	add	r3, r2
 8001052:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001054:	2208      	movs	r2, #8
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	1a9b      	subs	r3, r3, r2
 800105a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f023 0307 	bic.w	r3, r3, #7
 8001062:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4a15      	ldr	r2, [pc, #84]	@ (80010bc <prvHeapInit+0xb4>)
 8001068:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800106a:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <prvHeapInit+0xb4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2200      	movs	r2, #0
 8001070:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001072:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <prvHeapInit+0xb4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	1ad2      	subs	r2, r2, r3
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001088:	4b0c      	ldr	r3, [pc, #48]	@ (80010bc <prvHeapInit+0xb4>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	4a0a      	ldr	r2, [pc, #40]	@ (80010c0 <prvHeapInit+0xb8>)
 8001096:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	4a09      	ldr	r2, [pc, #36]	@ (80010c4 <prvHeapInit+0xbc>)
 800109e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80010a0:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <prvHeapInit+0xc0>)
 80010a2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80010a6:	601a      	str	r2, [r3, #0]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	20003428 	.word	0x20003428
 80010b8:	20004028 	.word	0x20004028
 80010bc:	20004030 	.word	0x20004030
 80010c0:	20004038 	.word	0x20004038
 80010c4:	20004034 	.word	0x20004034
 80010c8:	2000403c 	.word	0x2000403c

080010cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80010d4:	4b28      	ldr	r3, [pc, #160]	@ (8001178 <prvInsertBlockIntoFreeList+0xac>)
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	e002      	b.n	80010e0 <prvInsertBlockIntoFreeList+0x14>
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d8f7      	bhi.n	80010da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	4413      	add	r3, r2
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d108      	bne.n	800110e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	441a      	add	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	441a      	add	r2, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d118      	bne.n	8001154 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4b15      	ldr	r3, [pc, #84]	@ (800117c <prvInsertBlockIntoFreeList+0xb0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d00d      	beq.n	800114a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	441a      	add	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	e008      	b.n	800115c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800114a:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <prvInsertBlockIntoFreeList+0xb0>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	e003      	b.n	800115c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	429a      	cmp	r2, r3
 8001162:	d002      	beq.n	800116a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20004028 	.word	0x20004028
 800117c:	20004030 	.word	0x20004030

08001180 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001186:	4b1a      	ldr	r3, [pc, #104]	@ (80011f0 <MX_DMA_Init+0x70>)
 8001188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800118a:	4a19      	ldr	r2, [pc, #100]	@ (80011f0 <MX_DMA_Init+0x70>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	6493      	str	r3, [r2, #72]	@ 0x48
 8001192:	4b17      	ldr	r3, [pc, #92]	@ (80011f0 <MX_DMA_Init+0x70>)
 8001194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800119e:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <MX_DMA_Init+0x70>)
 80011a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011a2:	4a13      	ldr	r2, [pc, #76]	@ (80011f0 <MX_DMA_Init+0x70>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6493      	str	r3, [r2, #72]	@ 0x48
 80011aa:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <MX_DMA_Init+0x70>)
 80011ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2105      	movs	r1, #5
 80011ba:	200b      	movs	r0, #11
 80011bc:	f003 f8ee 	bl	800439c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011c0:	200b      	movs	r0, #11
 80011c2:	f003 f905 	bl	80043d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2105      	movs	r1, #5
 80011ca:	200c      	movs	r0, #12
 80011cc:	f003 f8e6 	bl	800439c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80011d0:	200c      	movs	r0, #12
 80011d2:	f003 f8fd 	bl	80043d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2105      	movs	r1, #5
 80011da:	200d      	movs	r0, #13
 80011dc:	f003 f8de 	bl	800439c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80011e0:	200d      	movs	r0, #13
 80011e2:	f003 f8f5 	bl	80043d0 <HAL_NVIC_EnableIRQ>

}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40021000 	.word	0x40021000

080011f4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001202:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001204:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001208:	4904      	ldr	r1, [pc, #16]	@ (800121c <cubemx_transport_open+0x28>)
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f005 fa80 	bl	8006710 <HAL_UART_Receive_DMA>
    return true;
 8001210:	2301      	movs	r3, #1
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20004040 	.word	0x20004040

08001220 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800122e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f005 fab9 	bl	80067a8 <HAL_UART_DMAStop>
    return true;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001254:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800125c:	2b20      	cmp	r3, #32
 800125e:	d11b      	bne.n	8001298 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	b29b      	uxth	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	68b9      	ldr	r1, [r7, #8]
 8001268:	6978      	ldr	r0, [r7, #20]
 800126a:	f005 f9d1 	bl	8006610 <HAL_UART_Transmit_DMA>
 800126e:	4603      	mov	r3, r0
 8001270:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001272:	e002      	b.n	800127a <cubemx_transport_write+0x3a>
            osDelay(1);
 8001274:	2001      	movs	r0, #1
 8001276:	f007 f87f 	bl	8008378 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800127a:	7cfb      	ldrb	r3, [r7, #19]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d104      	bne.n	800128a <cubemx_transport_write+0x4a>
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001286:	2b20      	cmp	r3, #32
 8001288:	d1f4      	bne.n	8001274 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 800128a:	7cfb      	ldrb	r3, [r7, #19]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <cubemx_transport_write+0x54>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	e002      	b.n	800129a <cubemx_transport_write+0x5a>
 8001294:	2300      	movs	r3, #0
 8001296:	e000      	b.n	800129a <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8001298:	2300      	movs	r3, #0
    }
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
 80012b0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80012b8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012be:	b672      	cpsid	i
}
 80012c0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80012d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001340 <cubemx_transport_read+0x9c>)
 80012d2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80012d4:	b662      	cpsie	i
}
 80012d6:	bf00      	nop
        __enable_irq();
        ms_used++;
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	3301      	adds	r3, #1
 80012dc:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80012de:	2001      	movs	r0, #1
 80012e0:	f007 f84a 	bl	8008378 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80012e4:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <cubemx_transport_read+0xa0>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <cubemx_transport_read+0x9c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d103      	bne.n	80012f8 <cubemx_transport_read+0x54>
 80012f0:	69fa      	ldr	r2, [r7, #28]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	dbe2      	blt.n	80012be <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80012fc:	e011      	b.n	8001322 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 80012fe:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <cubemx_transport_read+0xa0>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	68b9      	ldr	r1, [r7, #8]
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	440b      	add	r3, r1
 8001308:	490f      	ldr	r1, [pc, #60]	@ (8001348 <cubemx_transport_read+0xa4>)
 800130a:	5c8a      	ldrb	r2, [r1, r2]
 800130c:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 800130e:	4b0d      	ldr	r3, [pc, #52]	@ (8001344 <cubemx_transport_read+0xa0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001318:	4a0a      	ldr	r2, [pc, #40]	@ (8001344 <cubemx_transport_read+0xa0>)
 800131a:	6013      	str	r3, [r2, #0]
        wrote++;
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	3301      	adds	r3, #1
 8001320:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001322:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <cubemx_transport_read+0xa0>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <cubemx_transport_read+0x9c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	429a      	cmp	r2, r3
 800132c:	d003      	beq.n	8001336 <cubemx_transport_read+0x92>
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	429a      	cmp	r2, r3
 8001334:	d3e3      	bcc.n	80012fe <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8001336:	69bb      	ldr	r3, [r7, #24]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20004844 	.word	0x20004844
 8001344:	20004840 	.word	0x20004840
 8001348:	20004040 	.word	0x20004040

0800134c <MX_GPIO_Init>:
        * EXTI
     PB8-BOOT0   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	4b3e      	ldr	r3, [pc, #248]	@ (800145c <MX_GPIO_Init+0x110>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	4a3d      	ldr	r2, [pc, #244]	@ (800145c <MX_GPIO_Init+0x110>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136e:	4b3b      	ldr	r3, [pc, #236]	@ (800145c <MX_GPIO_Init+0x110>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b38      	ldr	r3, [pc, #224]	@ (800145c <MX_GPIO_Init+0x110>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	4a37      	ldr	r2, [pc, #220]	@ (800145c <MX_GPIO_Init+0x110>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001386:	4b35      	ldr	r3, [pc, #212]	@ (800145c <MX_GPIO_Init+0x110>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	4b32      	ldr	r3, [pc, #200]	@ (800145c <MX_GPIO_Init+0x110>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001396:	4a31      	ldr	r2, [pc, #196]	@ (800145c <MX_GPIO_Init+0x110>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800139e:	4b2f      	ldr	r3, [pc, #188]	@ (800145c <MX_GPIO_Init+0x110>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2120      	movs	r1, #32
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b2:	f003 fcf3 	bl	8004d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	4619      	mov	r1, r3
 80013cc:	4824      	ldr	r0, [pc, #144]	@ (8001460 <MX_GPIO_Init+0x114>)
 80013ce:	f003 fb4b 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013d2:	2320      	movs	r3, #32
 80013d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	4619      	mov	r1, r3
 80013e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ec:	f003 fb3c 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013f0:	2330      	movs	r3, #48	@ 0x30
 80013f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	4619      	mov	r1, r3
 8001402:	4817      	ldr	r0, [pc, #92]	@ (8001460 <MX_GPIO_Init+0x114>)
 8001404:	f003 fb30 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001408:	2320      	movs	r3, #32
 800140a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140c:	2300      	movs	r3, #0
 800140e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001410:	2301      	movs	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	4619      	mov	r1, r3
 800141a:	4812      	ldr	r0, [pc, #72]	@ (8001464 <MX_GPIO_Init+0x118>)
 800141c:	f003 fb24 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001420:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001424:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001426:	2312      	movs	r3, #18
 8001428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001432:	2304      	movs	r3, #4
 8001434:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	4619      	mov	r1, r3
 800143c:	4809      	ldr	r0, [pc, #36]	@ (8001464 <MX_GPIO_Init+0x118>)
 800143e:	f003 fb13 	bl	8004a68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2105      	movs	r1, #5
 8001446:	2028      	movs	r0, #40	@ 0x28
 8001448:	f002 ffa8 	bl	800439c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800144c:	2028      	movs	r0, #40	@ 0x28
 800144e:	f002 ffbf 	bl	80043d0 <HAL_NVIC_EnableIRQ>

}
 8001452:	bf00      	nop
 8001454:	3720      	adds	r7, #32
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000
 8001460:	48000800 	.word	0x48000800
 8001464:	48000400 	.word	0x48000400

08001468 <timer_callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END Header_StartDefaultTask */

/* Start Out of Start DefaultTask */
void timer_callback(rcl_timer_t *timer, int64_t last_call_time) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d005      	beq.n	8001486 <timer_callback+0x1e>
		/* Code here*/
		ReadADC_AVERAGE();//	rclc_executor_add_client(&executor, &savepath_client, &savepath_response, SavePath_client_callback);
 800147a:	f000 f93d 	bl	80016f8 <ReadADC_AVERAGE>

		SentCMDVEL();
 800147e:	f000 f987 	bl	8001790 <SentCMDVEL>
		CheckButtonK();
 8001482:	f000 fa8f 	bl	80019a4 <CheckButtonK>
	}
}
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <StartDefaultTask>:

void StartDefaultTask(void *argument) {
 8001490:	b5b0      	push	{r4, r5, r7, lr}
 8001492:	b0b2      	sub	sp, #200	@ 0xc8
 8001494:	af02      	add	r7, sp, #8
 8001496:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
	/* USER CODE BEGIN 5 */

	// micro-ROS configuration
	rmw_uros_set_custom_transport(true, (void*) &hlpuart1, cubemx_transport_open, cubemx_transport_close, cubemx_transport_write, cubemx_transport_read);
 800149a:	4b47      	ldr	r3, [pc, #284]	@ (80015b8 <StartDefaultTask+0x128>)
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	4b47      	ldr	r3, [pc, #284]	@ (80015bc <StartDefaultTask+0x12c>)
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	4b47      	ldr	r3, [pc, #284]	@ (80015c0 <StartDefaultTask+0x130>)
 80014a4:	4a47      	ldr	r2, [pc, #284]	@ (80015c4 <StartDefaultTask+0x134>)
 80014a6:	4948      	ldr	r1, [pc, #288]	@ (80015c8 <StartDefaultTask+0x138>)
 80014a8:	2001      	movs	r0, #1
 80014aa:	f00d f989 	bl	800e7c0 <rmw_uros_set_custom_transport>

	rcl_allocator_t freeRTOS_allocator =
			rcutils_get_zero_initialized_allocator();
 80014ae:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014b2:	4618      	mov	r0, r3
 80014b4:	f00c fc20 	bl	800dcf8 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80014b8:	4b44      	ldr	r3, [pc, #272]	@ (80015cc <StartDefaultTask+0x13c>)
 80014ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	freeRTOS_allocator.deallocate = microros_deallocate;
 80014be:	4b44      	ldr	r3, [pc, #272]	@ (80015d0 <StartDefaultTask+0x140>)
 80014c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	freeRTOS_allocator.reallocate = microros_reallocate;
 80014c4:	4b43      	ldr	r3, [pc, #268]	@ (80015d4 <StartDefaultTask+0x144>)
 80014c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 80014ca:	4b43      	ldr	r3, [pc, #268]	@ (80015d8 <StartDefaultTask+0x148>)
 80014cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80014d0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014d4:	4618      	mov	r0, r3
 80014d6:	f00c fc1d 	bl	800dd14 <rcutils_set_default_allocator>
 80014da:	4603      	mov	r3, r0
 80014dc:	f083 0301 	eor.w	r3, r3, #1
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <StartDefaultTask+0x5e>
		printf("Error on default allocators (line %d)\n", __LINE__);
 80014e6:	21b2      	movs	r1, #178	@ 0xb2
 80014e8:	483c      	ldr	r0, [pc, #240]	@ (80015dc <StartDefaultTask+0x14c>)
 80014ea:	f017 f951 	bl	8018790 <iprintf>
	}

	// micro-ROS app
	allocator = rcl_get_default_allocator();
 80014ee:	4c3c      	ldr	r4, [pc, #240]	@ (80015e0 <StartDefaultTask+0x150>)
 80014f0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80014f4:	4618      	mov	r0, r3
 80014f6:	f00c fc2b 	bl	800dd50 <rcutils_get_default_allocator>
 80014fa:	4625      	mov	r5, r4
 80014fc:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8001500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001504:	6823      	ldr	r3, [r4, #0]
 8001506:	602b      	str	r3, [r5, #0]

	//create init_options
	init_options = rcl_get_zero_initialized_init_options();
 8001508:	f00b f868 	bl	800c5dc <rcl_get_zero_initialized_init_options>
 800150c:	4603      	mov	r3, r0
 800150e:	4a35      	ldr	r2, [pc, #212]	@ (80015e4 <StartDefaultTask+0x154>)
 8001510:	6013      	str	r3, [r2, #0]
	RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 8001512:	4b33      	ldr	r3, [pc, #204]	@ (80015e0 <StartDefaultTask+0x150>)
 8001514:	466c      	mov	r4, sp
 8001516:	f103 020c 	add.w	r2, r3, #12
 800151a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800151e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001522:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001524:	482f      	ldr	r0, [pc, #188]	@ (80015e4 <StartDefaultTask+0x154>)
 8001526:	f00b f85b 	bl	800c5e0 <rcl_init_options_init>
	RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 26)); //Set Domain ID
 800152a:	211a      	movs	r1, #26
 800152c:	482d      	ldr	r0, [pc, #180]	@ (80015e4 <StartDefaultTask+0x154>)
 800152e:	f00b f953 	bl	800c7d8 <rcl_init_options_set_domain_id>

	rclc_support_init_with_options(
 8001532:	4b2b      	ldr	r3, [pc, #172]	@ (80015e0 <StartDefaultTask+0x150>)
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	4b2b      	ldr	r3, [pc, #172]	@ (80015e4 <StartDefaultTask+0x154>)
 8001538:	2200      	movs	r2, #0
 800153a:	2100      	movs	r1, #0
 800153c:	482a      	ldr	r0, [pc, #168]	@ (80015e8 <StartDefaultTask+0x158>)
 800153e:	f00c faff 	bl	800db40 <rclc_support_init_with_options>
			&init_options,
			&allocator
	);

	// create node
	rclc_node_init_default(
 8001542:	4b29      	ldr	r3, [pc, #164]	@ (80015e8 <StartDefaultTask+0x158>)
 8001544:	4a29      	ldr	r2, [pc, #164]	@ (80015ec <StartDefaultTask+0x15c>)
 8001546:	492a      	ldr	r1, [pc, #168]	@ (80015f0 <StartDefaultTask+0x160>)
 8001548:	482a      	ldr	r0, [pc, #168]	@ (80015f4 <StartDefaultTask+0x164>)
 800154a:	f00c fb2d 	bl	800dba8 <rclc_node_init_default>
			"",
			&support
	); //Node name

	// create cmd_vel publisher
	rclc_publisher_init_default(
 800154e:	f009 fbe3 	bl	800ad18 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001552:	4602      	mov	r2, r0
 8001554:	4b28      	ldr	r3, [pc, #160]	@ (80015f8 <StartDefaultTask+0x168>)
 8001556:	4927      	ldr	r1, [pc, #156]	@ (80015f4 <StartDefaultTask+0x164>)
 8001558:	4828      	ldr	r0, [pc, #160]	@ (80015fc <StartDefaultTask+0x16c>)
 800155a:	f00c fb61 	bl	800dc20 <rclc_publisher_init_default>
			ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
			"/cmd_vel"
	);

	// create save_path client
	rclc_client_init_default(
 800155e:	f00e fe0b 	bl	8010178 <rosidl_typesupport_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath>
 8001562:	4602      	mov	r2, r0
 8001564:	4b26      	ldr	r3, [pc, #152]	@ (8001600 <StartDefaultTask+0x170>)
 8001566:	4923      	ldr	r1, [pc, #140]	@ (80015f4 <StartDefaultTask+0x164>)
 8001568:	4826      	ldr	r0, [pc, #152]	@ (8001604 <StartDefaultTask+0x174>)
 800156a:	f00b fc99 	bl	800cea0 <rclc_client_init_default>
//			type_support, //Wait to change
//			"/Mode"
//	);

	// create Timer
	rclc_timer_init_default(
 800156e:	4b26      	ldr	r3, [pc, #152]	@ (8001608 <StartDefaultTask+0x178>)
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	4a26      	ldr	r2, [pc, #152]	@ (800160c <StartDefaultTask+0x17c>)
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	491b      	ldr	r1, [pc, #108]	@ (80015e8 <StartDefaultTask+0x158>)
 800157a:	4825      	ldr	r0, [pc, #148]	@ (8001610 <StartDefaultTask+0x180>)
 800157c:	f00c fb84 	bl	800dc88 <rclc_timer_init_default>
			RCL_MS_TO_NS(10),
			timer_callback
	);

	// create executer
	executor = rclc_executor_get_zero_initialized_executor();
 8001580:	4c24      	ldr	r4, [pc, #144]	@ (8001614 <StartDefaultTask+0x184>)
 8001582:	463b      	mov	r3, r7
 8001584:	4618      	mov	r0, r3
 8001586:	f00c f807 	bl	800d598 <rclc_executor_get_zero_initialized_executor>
 800158a:	4620      	mov	r0, r4
 800158c:	463b      	mov	r3, r7
 800158e:	2288      	movs	r2, #136	@ 0x88
 8001590:	4619      	mov	r1, r3
 8001592:	f017 fb46 	bl	8018c22 <memcpy>
	rclc_executor_init(&executor, &support.context, 1, &allocator);
 8001596:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <StartDefaultTask+0x150>)
 8001598:	2201      	movs	r2, #1
 800159a:	4913      	ldr	r1, [pc, #76]	@ (80015e8 <StartDefaultTask+0x158>)
 800159c:	481d      	ldr	r0, [pc, #116]	@ (8001614 <StartDefaultTask+0x184>)
 800159e:	f00c f807 	bl	800d5b0 <rclc_executor_init>
	rclc_executor_add_timer(&executor, &timer);
 80015a2:	491b      	ldr	r1, [pc, #108]	@ (8001610 <StartDefaultTask+0x180>)
 80015a4:	481b      	ldr	r0, [pc, #108]	@ (8001614 <StartDefaultTask+0x184>)
 80015a6:	f00c f873 	bl	800d690 <rclc_executor_add_timer>
//	rclc_executor_add_client(&executor, &savepath_client, &savepath_response, SavePath_client_callback);
	rclc_executor_spin(&executor); //ต้องเรียกก่อนถึงจะเริ่มทำงาน
 80015aa:	481a      	ldr	r0, [pc, #104]	@ (8001614 <StartDefaultTask+0x184>)
 80015ac:	f00c fa86 	bl	800dabc <rclc_executor_spin>

	for (;;) {
		osDelay(10);
 80015b0:	200a      	movs	r0, #10
 80015b2:	f006 fee1 	bl	8008378 <osDelay>
 80015b6:	e7fb      	b.n	80015b0 <StartDefaultTask+0x120>
 80015b8:	080012a5 	.word	0x080012a5
 80015bc:	08001241 	.word	0x08001241
 80015c0:	08001221 	.word	0x08001221
 80015c4:	080011f5 	.word	0x080011f5
 80015c8:	20004b64 	.word	0x20004b64
 80015cc:	08001a45 	.word	0x08001a45
 80015d0:	08001a89 	.word	0x08001a89
 80015d4:	08001ac1 	.word	0x08001ac1
 80015d8:	08001b2d 	.word	0x08001b2d
 80015dc:	080198cc 	.word	0x080198cc
 80015e0:	20004880 	.word	0x20004880
 80015e4:	20004848 	.word	0x20004848
 80015e8:	2000484c 	.word	0x2000484c
 80015ec:	080198f4 	.word	0x080198f4
 80015f0:	080198f8 	.word	0x080198f8
 80015f4:	20004894 	.word	0x20004894
 80015f8:	08019904 	.word	0x08019904
 80015fc:	2000492c 	.word	0x2000492c
 8001600:	08019910 	.word	0x08019910
 8001604:	20004928 	.word	0x20004928
 8001608:	08001469 	.word	0x08001469
 800160c:	00989680 	.word	0x00989680
 8001610:	20004964 	.word	0x20004964
 8001614:	200048a0 	.word	0x200048a0

08001618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161c:	f000 fe77 	bl	800230e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001620:	f000 f81e 	bl	8001660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001624:	f7ff fe92 	bl	800134c <MX_GPIO_Init>
  MX_DMA_Init();
 8001628:	f7ff fdaa 	bl	8001180 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800162c:	f000 fd3e 	bl	80020ac <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001630:	f7ff fa32 	bl	8000a98 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //    	rcl_send_request(&savepath_client, &savepath_request, &sequence_number);

  /* Start Analog Read */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001634:	217f      	movs	r1, #127	@ 0x7f
 8001636:	4808      	ldr	r0, [pc, #32]	@ (8001658 <main+0x40>)
 8001638:	f002 fc5c 	bl	8003ef4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 200);
 800163c:	22c8      	movs	r2, #200	@ 0xc8
 800163e:	4907      	ldr	r1, [pc, #28]	@ (800165c <main+0x44>)
 8001640:	4805      	ldr	r0, [pc, #20]	@ (8001658 <main+0x40>)
 8001642:	f001 fadf 	bl	8002c04 <HAL_ADC_Start_DMA>
  /* End Analog Read */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001646:	f006 fdbb 	bl	80081c0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800164a:	f7ff fb37 	bl	8000cbc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800164e:	f006 fddb 	bl	8008208 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001652:	bf00      	nop
 8001654:	e7fd      	b.n	8001652 <main+0x3a>
 8001656:	bf00      	nop
 8001658:	2000041c 	.word	0x2000041c
 800165c:	20004968 	.word	0x20004968

08001660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b094      	sub	sp, #80	@ 0x50
 8001664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001666:	f107 0318 	add.w	r3, r7, #24
 800166a:	2238      	movs	r2, #56	@ 0x38
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f017 fa0e 	bl	8018a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001682:	2000      	movs	r0, #0
 8001684:	f003 fbc6 	bl	8004e14 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001688:	2302      	movs	r3, #2
 800168a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800168c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001690:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001692:	2340      	movs	r3, #64	@ 0x40
 8001694:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001696:	2302      	movs	r3, #2
 8001698:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800169a:	2302      	movs	r3, #2
 800169c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800169e:	2304      	movs	r3, #4
 80016a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80016a2:	2355      	movs	r3, #85	@ 0x55
 80016a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016a6:	2302      	movs	r3, #2
 80016a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016aa:	2302      	movs	r3, #2
 80016ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016ae:	2302      	movs	r3, #2
 80016b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b2:	f107 0318 	add.w	r3, r7, #24
 80016b6:	4618      	mov	r0, r3
 80016b8:	f003 fc60 	bl	8004f7c <HAL_RCC_OscConfig>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80016c2:	f000 f9b9 	bl	8001a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c6:	230f      	movs	r3, #15
 80016c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ca:	2303      	movs	r3, #3
 80016cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	2104      	movs	r1, #4
 80016de:	4618      	mov	r0, r3
 80016e0:	f003 ff5e 	bl	80055a0 <HAL_RCC_ClockConfig>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80016ea:	f000 f9a5 	bl	8001a38 <Error_Handler>
  }
}
 80016ee:	bf00      	nop
 80016f0:	3750      	adds	r7, #80	@ 0x50
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <ReadADC_AVERAGE>:

/* USER CODE BEGIN 4 */

void ReadADC_AVERAGE() {
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
	uint32_t temp_1 = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
	uint32_t temp_2 = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 200; i++) {
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	e020      	b.n	800174e <ReadADC_AVERAGE+0x56>
		if (i % 2 == 0) {
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d108      	bne.n	8001728 <ReadADC_AVERAGE+0x30>
			temp_1 += ADC_RawRead[i];
 8001716:	4a1a      	ldr	r2, [pc, #104]	@ (8001780 <ReadADC_AVERAGE+0x88>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800171e:	461a      	mov	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	e00f      	b.n	8001748 <ReadADC_AVERAGE+0x50>
		} else if (i % 2 == 1) {
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	bfb8      	it	lt
 8001732:	425b      	neglt	r3, r3
 8001734:	2b01      	cmp	r3, #1
 8001736:	d107      	bne.n	8001748 <ReadADC_AVERAGE+0x50>
			temp_2 += ADC_RawRead[i];
 8001738:	4a11      	ldr	r2, [pc, #68]	@ (8001780 <ReadADC_AVERAGE+0x88>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001740:	461a      	mov	r2, r3
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	4413      	add	r3, r2
 8001746:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 200; i++) {
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3301      	adds	r3, #1
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2bc7      	cmp	r3, #199	@ 0xc7
 8001752:	dddb      	ble.n	800170c <ReadADC_AVERAGE+0x14>
		}
	}
	x_axis = (temp_1 / 100);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4a0b      	ldr	r2, [pc, #44]	@ (8001784 <ReadADC_AVERAGE+0x8c>)
 8001758:	fba2 2303 	umull	r2, r3, r2, r3
 800175c:	095b      	lsrs	r3, r3, #5
 800175e:	b29a      	uxth	r2, r3
 8001760:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <ReadADC_AVERAGE+0x90>)
 8001762:	801a      	strh	r2, [r3, #0]
	y_axis = (temp_2 / 100);
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	4a07      	ldr	r2, [pc, #28]	@ (8001784 <ReadADC_AVERAGE+0x8c>)
 8001768:	fba2 2303 	umull	r2, r3, r2, r3
 800176c:	095b      	lsrs	r3, r3, #5
 800176e:	b29a      	uxth	r2, r3
 8001770:	4b06      	ldr	r3, [pc, #24]	@ (800178c <ReadADC_AVERAGE+0x94>)
 8001772:	801a      	strh	r2, [r3, #0]
}
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	20004968 	.word	0x20004968
 8001784:	51eb851f 	.word	0x51eb851f
 8001788:	20004af8 	.word	0x20004af8
 800178c:	20004afa 	.word	0x20004afa

08001790 <SentCMDVEL>:


void SentCMDVEL(){
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
	/* Call Velocity */
	float linearX_velocity = (y_axis - 2048) / 2048.0f;  // Normalize -1.0 to 1.0
 8001796:	4b74      	ldr	r3, [pc, #464]	@ (8001968 <SentCMDVEL+0x1d8>)
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800179e:	ee07 3a90 	vmov	s15, r3
 80017a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017a6:	eddf 6a71 	vldr	s13, [pc, #452]	@ 800196c <SentCMDVEL+0x1dc>
 80017aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ae:	edc7 7a01 	vstr	s15, [r7, #4]
	float linearY_velocity = (x_axis - 2048) / 2048.0f; // Normalize -1.0 to 1.0
 80017b2:	4b6f      	ldr	r3, [pc, #444]	@ (8001970 <SentCMDVEL+0x1e0>)
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80017ba:	ee07 3a90 	vmov	s15, r3
 80017be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017c2:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 800196c <SentCMDVEL+0x1dc>
 80017c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ca:	edc7 7a00 	vstr	s15, [r7]

	/* Check DEADZONE*/
	if (fabs(linearX_velocity) < 0.025f) {
 80017ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80017d2:	eef0 7ae7 	vabs.f32	s15, s15
 80017d6:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8001974 <SentCMDVEL+0x1e4>
 80017da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e2:	d502      	bpl.n	80017ea <SentCMDVEL+0x5a>
		linearX_velocity = 0.0f;
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
	}

	if (fabs(linearY_velocity) < 0.015f) {
 80017ea:	edd7 7a00 	vldr	s15, [r7]
 80017ee:	eef0 7ae7 	vabs.f32	s15, s15
 80017f2:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8001978 <SentCMDVEL+0x1e8>
 80017f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fe:	d502      	bpl.n	8001806 <SentCMDVEL+0x76>
		linearY_velocity = 0.0f;
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	603b      	str	r3, [r7, #0]
	}

	/* Z button */
	aButtonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8001806:	2120      	movs	r1, #32
 8001808:	485c      	ldr	r0, [pc, #368]	@ (800197c <SentCMDVEL+0x1ec>)
 800180a:	f003 faaf 	bl	8004d6c <HAL_GPIO_ReadPin>
 800180e:	4603      	mov	r3, r0
 8001810:	461a      	mov	r2, r3
 8001812:	4b5b      	ldr	r3, [pc, #364]	@ (8001980 <SentCMDVEL+0x1f0>)
 8001814:	701a      	strb	r2, [r3, #0]
	cButtonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4);
 8001816:	2110      	movs	r1, #16
 8001818:	4858      	ldr	r0, [pc, #352]	@ (800197c <SentCMDVEL+0x1ec>)
 800181a:	f003 faa7 	bl	8004d6c <HAL_GPIO_ReadPin>
 800181e:	4603      	mov	r3, r0
 8001820:	461a      	mov	r2, r3
 8001822:	4b58      	ldr	r3, [pc, #352]	@ (8001984 <SentCMDVEL+0x1f4>)
 8001824:	701a      	strb	r2, [r3, #0]

	/* readbutton state */
	if (aButtonState == GPIO_PIN_RESET && aPrevButton == GPIO_PIN_SET) {
 8001826:	4b56      	ldr	r3, [pc, #344]	@ (8001980 <SentCMDVEL+0x1f0>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d12f      	bne.n	800188e <SentCMDVEL+0xfe>
 800182e:	4b56      	ldr	r3, [pc, #344]	@ (8001988 <SentCMDVEL+0x1f8>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d12b      	bne.n	800188e <SentCMDVEL+0xfe>
		linearZ_velocity += 0.1;
 8001836:	4b55      	ldr	r3, [pc, #340]	@ (800198c <SentCMDVEL+0x1fc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe febc 	bl	80005b8 <__aeabi_f2d>
 8001840:	a347      	add	r3, pc, #284	@ (adr r3, 8001960 <SentCMDVEL+0x1d0>)
 8001842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001846:	f7fe fd59 	bl	80002fc <__adddf3>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4610      	mov	r0, r2
 8001850:	4619      	mov	r1, r3
 8001852:	f7fe ff09 	bl	8000668 <__aeabi_d2f>
 8001856:	4603      	mov	r3, r0
 8001858:	4a4c      	ldr	r2, [pc, #304]	@ (800198c <SentCMDVEL+0x1fc>)
 800185a:	6013      	str	r3, [r2, #0]

		HAL_Delay(10);
 800185c:	200a      	movs	r0, #10
 800185e:	f000 fd8d 	bl	800237c <HAL_Delay>

		/* update button state */
		aPrevButton = aButtonState;
 8001862:	4b47      	ldr	r3, [pc, #284]	@ (8001980 <SentCMDVEL+0x1f0>)
 8001864:	781a      	ldrb	r2, [r3, #0]
 8001866:	4b48      	ldr	r3, [pc, #288]	@ (8001988 <SentCMDVEL+0x1f8>)
 8001868:	701a      	strb	r2, [r3, #0]
		cPrevButton = cButtonState;
 800186a:	4b46      	ldr	r3, [pc, #280]	@ (8001984 <SentCMDVEL+0x1f4>)
 800186c:	781a      	ldrb	r2, [r3, #0]
 800186e:	4b48      	ldr	r3, [pc, #288]	@ (8001990 <SentCMDVEL+0x200>)
 8001870:	701a      	strb	r2, [r3, #0]
	    if (linearZ_velocity > 1.0f) linearZ_velocity = 1.0;
 8001872:	4b46      	ldr	r3, [pc, #280]	@ (800198c <SentCMDVEL+0x1fc>)
 8001874:	edd3 7a00 	vldr	s15, [r3]
 8001878:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800187c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001884:	dd03      	ble.n	800188e <SentCMDVEL+0xfe>
 8001886:	4b41      	ldr	r3, [pc, #260]	@ (800198c <SentCMDVEL+0x1fc>)
 8001888:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800188c:	601a      	str	r2, [r3, #0]
	}
	if (cButtonState == GPIO_PIN_RESET && cPrevButton == GPIO_PIN_SET) {
 800188e:	4b3d      	ldr	r3, [pc, #244]	@ (8001984 <SentCMDVEL+0x1f4>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d123      	bne.n	80018de <SentCMDVEL+0x14e>
 8001896:	4b3e      	ldr	r3, [pc, #248]	@ (8001990 <SentCMDVEL+0x200>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d11f      	bne.n	80018de <SentCMDVEL+0x14e>
		linearZ_velocity -= 0.1;
 800189e:	4b3b      	ldr	r3, [pc, #236]	@ (800198c <SentCMDVEL+0x1fc>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fe88 	bl	80005b8 <__aeabi_f2d>
 80018a8:	a32d      	add	r3, pc, #180	@ (adr r3, 8001960 <SentCMDVEL+0x1d0>)
 80018aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ae:	f7fe fd23 	bl	80002f8 <__aeabi_dsub>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f7fe fed5 	bl	8000668 <__aeabi_d2f>
 80018be:	4603      	mov	r3, r0
 80018c0:	4a32      	ldr	r2, [pc, #200]	@ (800198c <SentCMDVEL+0x1fc>)
 80018c2:	6013      	str	r3, [r2, #0]
	    if (linearZ_velocity < -1.0f) linearZ_velocity = -1.0;
 80018c4:	4b31      	ldr	r3, [pc, #196]	@ (800198c <SentCMDVEL+0x1fc>)
 80018c6:	edd3 7a00 	vldr	s15, [r3]
 80018ca:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80018ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d6:	d502      	bpl.n	80018de <SentCMDVEL+0x14e>
 80018d8:	4b2c      	ldr	r3, [pc, #176]	@ (800198c <SentCMDVEL+0x1fc>)
 80018da:	4a2e      	ldr	r2, [pc, #184]	@ (8001994 <SentCMDVEL+0x204>)
 80018dc:	601a      	str	r2, [r3, #0]
	}

	if (fabs(linearZ_velocity) < 0.001f) {
 80018de:	4b2b      	ldr	r3, [pc, #172]	@ (800198c <SentCMDVEL+0x1fc>)
 80018e0:	edd3 7a00 	vldr	s15, [r3]
 80018e4:	eef0 7ae7 	vabs.f32	s15, s15
 80018e8:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001998 <SentCMDVEL+0x208>
 80018ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f4:	d503      	bpl.n	80018fe <SentCMDVEL+0x16e>
		linearZ_velocity = 0.0f;
 80018f6:	4b25      	ldr	r3, [pc, #148]	@ (800198c <SentCMDVEL+0x1fc>)
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
	}

	HAL_Delay(10);
 80018fe:	200a      	movs	r0, #10
 8001900:	f000 fd3c 	bl	800237c <HAL_Delay>

	/* update button state */
	aPrevButton = aButtonState;
 8001904:	4b1e      	ldr	r3, [pc, #120]	@ (8001980 <SentCMDVEL+0x1f0>)
 8001906:	781a      	ldrb	r2, [r3, #0]
 8001908:	4b1f      	ldr	r3, [pc, #124]	@ (8001988 <SentCMDVEL+0x1f8>)
 800190a:	701a      	strb	r2, [r3, #0]
	cPrevButton = cButtonState;
 800190c:	4b1d      	ldr	r3, [pc, #116]	@ (8001984 <SentCMDVEL+0x1f4>)
 800190e:	781a      	ldrb	r2, [r3, #0]
 8001910:	4b1f      	ldr	r3, [pc, #124]	@ (8001990 <SentCMDVEL+0x200>)
 8001912:	701a      	strb	r2, [r3, #0]

	twist_msg.linear.x = linearX_velocity;
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7fe fe4f 	bl	80005b8 <__aeabi_f2d>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	491f      	ldr	r1, [pc, #124]	@ (800199c <SentCMDVEL+0x20c>)
 8001920:	e9c1 2300 	strd	r2, r3, [r1]
	twist_msg.linear.y = linearY_velocity;
 8001924:	6838      	ldr	r0, [r7, #0]
 8001926:	f7fe fe47 	bl	80005b8 <__aeabi_f2d>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	491b      	ldr	r1, [pc, #108]	@ (800199c <SentCMDVEL+0x20c>)
 8001930:	e9c1 2302 	strd	r2, r3, [r1, #8]
	twist_msg.linear.z = linearZ_velocity;
 8001934:	4b15      	ldr	r3, [pc, #84]	@ (800198c <SentCMDVEL+0x1fc>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fe3d 	bl	80005b8 <__aeabi_f2d>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4916      	ldr	r1, [pc, #88]	@ (800199c <SentCMDVEL+0x20c>)
 8001944:	e9c1 2304 	strd	r2, r3, [r1, #16]

	RCSOFTCHECK(rcl_publish(&cmdvel_publisher, &twist_msg, NULL));
 8001948:	2200      	movs	r2, #0
 800194a:	4914      	ldr	r1, [pc, #80]	@ (800199c <SentCMDVEL+0x20c>)
 800194c:	4814      	ldr	r0, [pc, #80]	@ (80019a0 <SentCMDVEL+0x210>)
 800194e:	f00b fa61 	bl	800ce14 <rcl_publish>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	f3af 8000 	nop.w
 8001960:	9999999a 	.word	0x9999999a
 8001964:	3fb99999 	.word	0x3fb99999
 8001968:	20004afa 	.word	0x20004afa
 800196c:	45000000 	.word	0x45000000
 8001970:	20004af8 	.word	0x20004af8
 8001974:	3ccccccd 	.word	0x3ccccccd
 8001978:	3c75c28f 	.word	0x3c75c28f
 800197c:	48000800 	.word	0x48000800
 8001980:	20004b00 	.word	0x20004b00
 8001984:	20004b01 	.word	0x20004b01
 8001988:	20004b03 	.word	0x20004b03
 800198c:	20004afc 	.word	0x20004afc
 8001990:	20004b04 	.word	0x20004b04
 8001994:	bf800000 	.word	0xbf800000
 8001998:	3a83126f 	.word	0x3a83126f
 800199c:	20004930 	.word	0x20004930
 80019a0:	2000492c 	.word	0x2000492c

080019a4 <CheckButtonK>:

void CheckButtonK() {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
    kButtonState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80019aa:	2120      	movs	r1, #32
 80019ac:	4814      	ldr	r0, [pc, #80]	@ (8001a00 <CheckButtonK+0x5c>)
 80019ae:	f003 f9dd 	bl	8004d6c <HAL_GPIO_ReadPin>
 80019b2:	4603      	mov	r3, r0
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <CheckButtonK+0x60>)
 80019b8:	701a      	strb	r2, [r3, #0]

    if (kButtonState == GPIO_PIN_RESET && kPrevButton == GPIO_PIN_SET) {
 80019ba:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <CheckButtonK+0x60>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d112      	bne.n	80019e8 <CheckButtonK+0x44>
 80019c2:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <CheckButtonK+0x64>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d10e      	bne.n	80019e8 <CheckButtonK+0x44>

    	rrr_robot_interfaces__srv__RRRTargetPath_Request__init(&savepath_request);
 80019ca:	4810      	ldr	r0, [pc, #64]	@ (8001a0c <CheckButtonK+0x68>)
 80019cc:	f00e fbb8 	bl	8010140 <rrr_robot_interfaces__srv__RRRTargetPath_Request__init>

    	savepath_request.save_path = true;
 80019d0:	4b0e      	ldr	r3, [pc, #56]	@ (8001a0c <CheckButtonK+0x68>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	701a      	strb	r2, [r3, #0]
    	savepath_request.call_path = false;
 80019d6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a0c <CheckButtonK+0x68>)
 80019d8:	2200      	movs	r2, #0
 80019da:	705a      	strb	r2, [r3, #1]

    	int64_t sequence_number;
    	RCSOFTCHECK(rcl_send_request(&savepath_client, &savepath_request, &sequence_number));
 80019dc:	463b      	mov	r3, r7
 80019de:	461a      	mov	r2, r3
 80019e0:	490a      	ldr	r1, [pc, #40]	@ (8001a0c <CheckButtonK+0x68>)
 80019e2:	480b      	ldr	r0, [pc, #44]	@ (8001a10 <CheckButtonK+0x6c>)
 80019e4:	f00a fd72 	bl	800c4cc <rcl_send_request>

    }
    HAL_Delay(10);
 80019e8:	200a      	movs	r0, #10
 80019ea:	f000 fcc7 	bl	800237c <HAL_Delay>

    kPrevButton = kButtonState;
 80019ee:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <CheckButtonK+0x60>)
 80019f0:	781a      	ldrb	r2, [r3, #0]
 80019f2:	4b05      	ldr	r3, [pc, #20]	@ (8001a08 <CheckButtonK+0x64>)
 80019f4:	701a      	strb	r2, [r3, #0]
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	48000400 	.word	0x48000400
 8001a04:	20004b02 	.word	0x20004b02
 8001a08:	20004b05 	.word	0x20004b05
 8001a0c:	20004960 	.word	0x20004960
 8001a10:	20004928 	.word	0x20004928

08001a14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a04      	ldr	r2, [pc, #16]	@ (8001a34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d101      	bne.n	8001a2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a26:	f000 fc8b 	bl	8002340 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40012c00 	.word	0x40012c00

08001a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3c:	b672      	cpsid	i
}
 8001a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <Error_Handler+0x8>

08001a44 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <microros_allocate+0x3c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4413      	add	r3, r2
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <microros_allocate+0x3c>)
 8001a5c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001a5e:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <microros_allocate+0x40>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4413      	add	r3, r2
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <microros_allocate+0x40>)
 8001a6c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff f936 	bl	8000ce0 <pvPortMallocMicroROS>
 8001a74:	4603      	mov	r3, r0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20004b08 	.word	0x20004b08
 8001a84:	20004b0c 	.word	0x20004b0c

08001a88 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00c      	beq.n	8001ab2 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff fa45 	bl	8000f28 <getBlockSize>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	4a06      	ldr	r2, [pc, #24]	@ (8001abc <microros_deallocate+0x34>)
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b04      	ldr	r3, [pc, #16]	@ (8001abc <microros_deallocate+0x34>)
 8001aaa:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff f9df 	bl	8000e70 <vPortFreeMicroROS>
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20004b0c 	.word	0x20004b0c

08001ac0 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001acc:	4b15      	ldr	r3, [pc, #84]	@ (8001b24 <microros_reallocate+0x64>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <microros_reallocate+0x64>)
 8001ada:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001adc:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <microros_reallocate+0x68>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <microros_reallocate+0x68>)
 8001aea:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d104      	bne.n	8001afc <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001af2:	68b8      	ldr	r0, [r7, #8]
 8001af4:	f7ff f8f4 	bl	8000ce0 <pvPortMallocMicroROS>
 8001af8:	4603      	mov	r3, r0
 8001afa:	e00e      	b.n	8001b1a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f7ff fa13 	bl	8000f28 <getBlockSize>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4a08      	ldr	r2, [pc, #32]	@ (8001b28 <microros_reallocate+0x68>)
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <microros_reallocate+0x68>)
 8001b0e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f7ff fa26 	bl	8000f64 <pvPortReallocMicroROS>
 8001b18:	4603      	mov	r3, r0
  }
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20004b08 	.word	0x20004b08
 8001b28:	20004b0c 	.word	0x20004b0c

08001b2c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	fb02 f303 	mul.w	r3, r2, r3
 8001b40:	4a0c      	ldr	r2, [pc, #48]	@ (8001b74 <microros_zero_allocate+0x48>)
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	4413      	add	r3, r2
 8001b46:	461a      	mov	r2, r3
 8001b48:	4b0a      	ldr	r3, [pc, #40]	@ (8001b74 <microros_zero_allocate+0x48>)
 8001b4a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	fb02 f303 	mul.w	r3, r2, r3
 8001b54:	4a08      	ldr	r2, [pc, #32]	@ (8001b78 <microros_zero_allocate+0x4c>)
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	4413      	add	r3, r2
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <microros_zero_allocate+0x4c>)
 8001b5e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f7ff fa2b 	bl	8000fbe <pvPortCallocMicroROS>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20004b08 	.word	0x20004b08
 8001b78:	20004b0c 	.word	0x20004b0c
 8001b7c:	00000000 	.word	0x00000000

08001b80 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001b80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001b92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b96:	a320      	add	r3, pc, #128	@ (adr r3, 8001c18 <UTILS_NanosecondsToTimespec+0x98>)
 8001b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9c:	f7fe fdb4 	bl	8000708 <__aeabi_ldivmod>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001baa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bae:	a31a      	add	r3, pc, #104	@ (adr r3, 8001c18 <UTILS_NanosecondsToTimespec+0x98>)
 8001bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb4:	f7fe fda8 	bl	8000708 <__aeabi_ldivmod>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	da20      	bge.n	8001c06 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	4a11      	ldr	r2, [pc, #68]	@ (8001c10 <UTILS_NanosecondsToTimespec+0x90>)
 8001bca:	fb82 1203 	smull	r1, r2, r2, r3
 8001bce:	1712      	asrs	r2, r2, #28
 8001bd0:	17db      	asrs	r3, r3, #31
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bde:	6979      	ldr	r1, [r7, #20]
 8001be0:	17c8      	asrs	r0, r1, #31
 8001be2:	460c      	mov	r4, r1
 8001be4:	4605      	mov	r5, r0
 8001be6:	ebb2 0804 	subs.w	r8, r2, r4
 8001bea:	eb63 0905 	sbc.w	r9, r3, r5
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	4906      	ldr	r1, [pc, #24]	@ (8001c14 <UTILS_NanosecondsToTimespec+0x94>)
 8001bfc:	fb01 f303 	mul.w	r3, r1, r3
 8001c00:	441a      	add	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	609a      	str	r2, [r3, #8]
    }
}
 8001c06:	bf00      	nop
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c10:	44b82fa1 	.word	0x44b82fa1
 8001c14:	3b9aca00 	.word	0x3b9aca00
 8001c18:	3b9aca00 	.word	0x3b9aca00
 8001c1c:	00000000 	.word	0x00000000

08001c20 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c24:	b08e      	sub	sp, #56	@ 0x38
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6278      	str	r0, [r7, #36]	@ 0x24
 8001c2a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001c2c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001c30:	2300      	movs	r3, #0
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001c42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c46:	4618      	mov	r0, r3
 8001c48:	f007 fe62 	bl	8009910 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c4e:	17da      	asrs	r2, r3, #31
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	61fa      	str	r2, [r7, #28]
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	69b9      	ldr	r1, [r7, #24]
 8001c5e:	000b      	movs	r3, r1
 8001c60:	2200      	movs	r2, #0
 8001c62:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c68:	2200      	movs	r2, #0
 8001c6a:	461c      	mov	r4, r3
 8001c6c:	4615      	mov	r5, r2
 8001c6e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c72:	1911      	adds	r1, r2, r4
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	416b      	adcs	r3, r5
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001c7e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001c82:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	f04f 0400 	mov.w	r4, #0
 8001c8e:	f04f 0500 	mov.w	r5, #0
 8001c92:	015d      	lsls	r5, r3, #5
 8001c94:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001c98:	0154      	lsls	r4, r2, #5
 8001c9a:	4622      	mov	r2, r4
 8001c9c:	462b      	mov	r3, r5
 8001c9e:	ebb2 0800 	subs.w	r8, r2, r0
 8001ca2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001cb2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001cb6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001cba:	4690      	mov	r8, r2
 8001cbc:	4699      	mov	r9, r3
 8001cbe:	eb18 0a00 	adds.w	sl, r8, r0
 8001cc2:	eb49 0b01 	adc.w	fp, r9, r1
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cd2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cd6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cda:	ebb2 040a 	subs.w	r4, r2, sl
 8001cde:	603c      	str	r4, [r7, #0]
 8001ce0:	eb63 030b 	sbc.w	r3, r3, fp
 8001ce4:	607b      	str	r3, [r7, #4]
 8001ce6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cea:	4623      	mov	r3, r4
 8001cec:	181b      	adds	r3, r3, r0
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	462b      	mov	r3, r5
 8001cf2:	eb41 0303 	adc.w	r3, r1, r3
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	6a3a      	ldr	r2, [r7, #32]
 8001cfa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cfe:	f7ff ff3f 	bl	8001b80 <UTILS_NanosecondsToTimespec>

    return 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	3738      	adds	r7, #56	@ 0x38
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d16:	4b12      	ldr	r3, [pc, #72]	@ (8001d60 <HAL_MspInit+0x50>)
 8001d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d1a:	4a11      	ldr	r2, [pc, #68]	@ (8001d60 <HAL_MspInit+0x50>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d22:	4b0f      	ldr	r3, [pc, #60]	@ (8001d60 <HAL_MspInit+0x50>)
 8001d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d60 <HAL_MspInit+0x50>)
 8001d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d32:	4a0b      	ldr	r2, [pc, #44]	@ (8001d60 <HAL_MspInit+0x50>)
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d3a:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <HAL_MspInit+0x50>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	210f      	movs	r1, #15
 8001d4a:	f06f 0001 	mvn.w	r0, #1
 8001d4e:	f002 fb25 	bl	800439c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d52:	f003 f903 	bl	8004f5c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40021000 	.word	0x40021000

08001d64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08c      	sub	sp, #48	@ 0x30
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d74:	4b2c      	ldr	r3, [pc, #176]	@ (8001e28 <HAL_InitTick+0xc4>)
 8001d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d78:	4a2b      	ldr	r2, [pc, #172]	@ (8001e28 <HAL_InitTick+0xc4>)
 8001d7a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d7e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d80:	4b29      	ldr	r3, [pc, #164]	@ (8001e28 <HAL_InitTick+0xc4>)
 8001d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d8c:	f107 020c 	add.w	r2, r7, #12
 8001d90:	f107 0310 	add.w	r3, r7, #16
 8001d94:	4611      	mov	r1, r2
 8001d96:	4618      	mov	r0, r3
 8001d98:	f003 fdd8 	bl	800594c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d9c:	f003 fdc0 	bl	8005920 <HAL_RCC_GetPCLK2Freq>
 8001da0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001da4:	4a21      	ldr	r2, [pc, #132]	@ (8001e2c <HAL_InitTick+0xc8>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	0c9b      	lsrs	r3, r3, #18
 8001dac:	3b01      	subs	r3, #1
 8001dae:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001db0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e30 <HAL_InitTick+0xcc>)
 8001db2:	4a20      	ldr	r2, [pc, #128]	@ (8001e34 <HAL_InitTick+0xd0>)
 8001db4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001db6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e30 <HAL_InitTick+0xcc>)
 8001db8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001dbc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001dbe:	4a1c      	ldr	r2, [pc, #112]	@ (8001e30 <HAL_InitTick+0xcc>)
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e30 <HAL_InitTick+0xcc>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dca:	4b19      	ldr	r3, [pc, #100]	@ (8001e30 <HAL_InitTick+0xcc>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001dd0:	4817      	ldr	r0, [pc, #92]	@ (8001e30 <HAL_InitTick+0xcc>)
 8001dd2:	f004 f881 	bl	8005ed8 <HAL_TIM_Base_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001ddc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d11b      	bne.n	8001e1c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001de4:	4812      	ldr	r0, [pc, #72]	@ (8001e30 <HAL_InitTick+0xcc>)
 8001de6:	f004 f8d9 	bl	8005f9c <HAL_TIM_Base_Start_IT>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001df0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d111      	bne.n	8001e1c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001df8:	2019      	movs	r0, #25
 8001dfa:	f002 fae9 	bl	80043d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b0f      	cmp	r3, #15
 8001e02:	d808      	bhi.n	8001e16 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001e04:	2200      	movs	r2, #0
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	2019      	movs	r0, #25
 8001e0a:	f002 fac7 	bl	800439c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e38 <HAL_InitTick+0xd4>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	e002      	b.n	8001e1c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001e1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3730      	adds	r7, #48	@ 0x30
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	431bde83 	.word	0x431bde83
 8001e30:	20004b10 	.word	0x20004b10
 8001e34:	40012c00 	.word	0x40012c00
 8001e38:	20000008 	.word	0x20000008

08001e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <NMI_Handler+0x4>

08001e44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <HardFault_Handler+0x4>

08001e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <MemManage_Handler+0x4>

08001e54 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <BusFault_Handler+0x4>

08001e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e60:	bf00      	nop
 8001e62:	e7fd      	b.n	8001e60 <UsageFault_Handler+0x4>

08001e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001e78:	4802      	ldr	r0, [pc, #8]	@ (8001e84 <DMA1_Channel1_IRQHandler+0x10>)
 8001e7a:	f002 fc9a 	bl	80047b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20004bf8 	.word	0x20004bf8

08001e88 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001e8c:	4802      	ldr	r0, [pc, #8]	@ (8001e98 <DMA1_Channel2_IRQHandler+0x10>)
 8001e8e:	f002 fc90 	bl	80047b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20004c58 	.word	0x20004c58

08001e9c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ea0:	4802      	ldr	r0, [pc, #8]	@ (8001eac <DMA1_Channel3_IRQHandler+0x10>)
 8001ea2:	f002 fc86 	bl	80047b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000488 	.word	0x20000488

08001eb0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001eb4:	4802      	ldr	r0, [pc, #8]	@ (8001ec0 <ADC1_2_IRQHandler+0x10>)
 8001eb6:	f000 ff79 	bl	8002dac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	2000041c 	.word	0x2000041c

08001ec4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ec8:	4802      	ldr	r0, [pc, #8]	@ (8001ed4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001eca:	f004 f8df 	bl	800608c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20004b10 	.word	0x20004b10

08001ed8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001edc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ee0:	f002 ff74 	bl	8004dcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001eec:	4802      	ldr	r0, [pc, #8]	@ (8001ef8 <LPUART1_IRQHandler+0x10>)
 8001eee:	f004 fcf1 	bl	80068d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20004b64 	.word	0x20004b64

08001efc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return 1;
 8001f00:	2301      	movs	r3, #1
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <_kill>:

int _kill(int pid, int sig)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f16:	f016 fe4f 	bl	8018bb8 <__errno>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2216      	movs	r2, #22
 8001f1e:	601a      	str	r2, [r3, #0]
  return -1;
 8001f20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <_exit>:

void _exit (int status)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ffe7 	bl	8001f0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f3e:	bf00      	nop
 8001f40:	e7fd      	b.n	8001f3e <_exit+0x12>

08001f42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	e00a      	b.n	8001f6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f54:	f3af 8000 	nop.w
 8001f58:	4601      	mov	r1, r0
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	60ba      	str	r2, [r7, #8]
 8001f60:	b2ca      	uxtb	r2, r1
 8001f62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	3301      	adds	r3, #1
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	dbf0      	blt.n	8001f54 <_read+0x12>
  }

  return len;
 8001f72:	687b      	ldr	r3, [r7, #4]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	e009      	b.n	8001fa2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	1c5a      	adds	r2, r3, #1
 8001f92:	60ba      	str	r2, [r7, #8]
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	dbf1      	blt.n	8001f8e <_write+0x12>
  }
  return len;
 8001faa:	687b      	ldr	r3, [r7, #4]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <_close>:

int _close(int file)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fdc:	605a      	str	r2, [r3, #4]
  return 0;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <_isatty>:

int _isatty(int file)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ff4:	2301      	movs	r3, #1
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002002:	b480      	push	{r7}
 8002004:	b085      	sub	sp, #20
 8002006:	af00      	add	r7, sp, #0
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002024:	4a14      	ldr	r2, [pc, #80]	@ (8002078 <_sbrk+0x5c>)
 8002026:	4b15      	ldr	r3, [pc, #84]	@ (800207c <_sbrk+0x60>)
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002030:	4b13      	ldr	r3, [pc, #76]	@ (8002080 <_sbrk+0x64>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d102      	bne.n	800203e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002038:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <_sbrk+0x64>)
 800203a:	4a12      	ldr	r2, [pc, #72]	@ (8002084 <_sbrk+0x68>)
 800203c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800203e:	4b10      	ldr	r3, [pc, #64]	@ (8002080 <_sbrk+0x64>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	429a      	cmp	r2, r3
 800204a:	d207      	bcs.n	800205c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800204c:	f016 fdb4 	bl	8018bb8 <__errno>
 8002050:	4603      	mov	r3, r0
 8002052:	220c      	movs	r2, #12
 8002054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800205a:	e009      	b.n	8002070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800205c:	4b08      	ldr	r3, [pc, #32]	@ (8002080 <_sbrk+0x64>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002062:	4b07      	ldr	r3, [pc, #28]	@ (8002080 <_sbrk+0x64>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	4a05      	ldr	r2, [pc, #20]	@ (8002080 <_sbrk+0x64>)
 800206c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800206e:	68fb      	ldr	r3, [r7, #12]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20020000 	.word	0x20020000
 800207c:	00000400 	.word	0x00000400
 8002080:	20004b60 	.word	0x20004b60
 8002084:	2000b340 	.word	0x2000b340

08002088 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800208c:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <SystemInit+0x20>)
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002092:	4a05      	ldr	r2, [pc, #20]	@ (80020a8 <SystemInit+0x20>)
 8002094:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002098:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80020b0:	4b21      	ldr	r3, [pc, #132]	@ (8002138 <MX_LPUART1_UART_Init+0x8c>)
 80020b2:	4a22      	ldr	r2, [pc, #136]	@ (800213c <MX_LPUART1_UART_Init+0x90>)
 80020b4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80020b6:	4b20      	ldr	r3, [pc, #128]	@ (8002138 <MX_LPUART1_UART_Init+0x8c>)
 80020b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020bc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020be:	4b1e      	ldr	r3, [pc, #120]	@ (8002138 <MX_LPUART1_UART_Init+0x8c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80020c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002138 <MX_LPUART1_UART_Init+0x8c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80020ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002138 <MX_LPUART1_UART_Init+0x8c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80020d0:	4b19      	ldr	r3, [pc, #100]	@ (8002138 <MX_LPUART1_UART_Init+0x8c>)
 80020d2:	220c      	movs	r2, #12
 80020d4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020d6:	4b18      	ldr	r3, [pc, #96]	@ (8002138 <MX_LPUART1_UART_Init+0x8c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020dc:	4b16      	ldr	r3, [pc, #88]	@ (8002138 <MX_LPUART1_UART_Init+0x8c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020e2:	4b15      	ldr	r3, [pc, #84]	@ (8002138 <MX_LPUART1_UART_Init+0x8c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020e8:	4b13      	ldr	r3, [pc, #76]	@ (8002138 <MX_LPUART1_UART_Init+0x8c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80020ee:	4812      	ldr	r0, [pc, #72]	@ (8002138 <MX_LPUART1_UART_Init+0x8c>)
 80020f0:	f004 fa3e 	bl	8006570 <HAL_UART_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80020fa:	f7ff fc9d 	bl	8001a38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020fe:	2100      	movs	r1, #0
 8002100:	480d      	ldr	r0, [pc, #52]	@ (8002138 <MX_LPUART1_UART_Init+0x8c>)
 8002102:	f005 ff4e 	bl	8007fa2 <HAL_UARTEx_SetTxFifoThreshold>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800210c:	f7ff fc94 	bl	8001a38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002110:	2100      	movs	r1, #0
 8002112:	4809      	ldr	r0, [pc, #36]	@ (8002138 <MX_LPUART1_UART_Init+0x8c>)
 8002114:	f005 ff83 	bl	800801e <HAL_UARTEx_SetRxFifoThreshold>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800211e:	f7ff fc8b 	bl	8001a38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002122:	4805      	ldr	r0, [pc, #20]	@ (8002138 <MX_LPUART1_UART_Init+0x8c>)
 8002124:	f005 ff04 	bl	8007f30 <HAL_UARTEx_DisableFifoMode>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800212e:	f7ff fc83 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20004b64 	.word	0x20004b64
 800213c:	40008000 	.word	0x40008000

08002140 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b09e      	sub	sp, #120	@ 0x78
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002158:	f107 0310 	add.w	r3, r7, #16
 800215c:	2254      	movs	r2, #84	@ 0x54
 800215e:	2100      	movs	r1, #0
 8002160:	4618      	mov	r0, r3
 8002162:	f016 fc95 	bl	8018a90 <memset>
  if(uartHandle->Instance==LPUART1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a4e      	ldr	r2, [pc, #312]	@ (80022a4 <HAL_UART_MspInit+0x164>)
 800216c:	4293      	cmp	r3, r2
 800216e:	f040 8094 	bne.w	800229a <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002172:	2320      	movs	r3, #32
 8002174:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002176:	2300      	movs	r3, #0
 8002178:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800217a:	f107 0310 	add.w	r3, r7, #16
 800217e:	4618      	mov	r0, r3
 8002180:	f003 fc5c 	bl	8005a3c <HAL_RCCEx_PeriphCLKConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800218a:	f7ff fc55 	bl	8001a38 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800218e:	4b46      	ldr	r3, [pc, #280]	@ (80022a8 <HAL_UART_MspInit+0x168>)
 8002190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002192:	4a45      	ldr	r2, [pc, #276]	@ (80022a8 <HAL_UART_MspInit+0x168>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800219a:	4b43      	ldr	r3, [pc, #268]	@ (80022a8 <HAL_UART_MspInit+0x168>)
 800219c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a6:	4b40      	ldr	r3, [pc, #256]	@ (80022a8 <HAL_UART_MspInit+0x168>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021aa:	4a3f      	ldr	r2, [pc, #252]	@ (80022a8 <HAL_UART_MspInit+0x168>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021b2:	4b3d      	ldr	r3, [pc, #244]	@ (80022a8 <HAL_UART_MspInit+0x168>)
 80021b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80021be:	230c      	movs	r3, #12
 80021c0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	2300      	movs	r3, #0
 80021cc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80021ce:	230c      	movs	r3, #12
 80021d0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80021d6:	4619      	mov	r1, r3
 80021d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021dc:	f002 fc44 	bl	8004a68 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 80021e0:	4b32      	ldr	r3, [pc, #200]	@ (80022ac <HAL_UART_MspInit+0x16c>)
 80021e2:	4a33      	ldr	r2, [pc, #204]	@ (80022b0 <HAL_UART_MspInit+0x170>)
 80021e4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80021e6:	4b31      	ldr	r3, [pc, #196]	@ (80022ac <HAL_UART_MspInit+0x16c>)
 80021e8:	2222      	movs	r2, #34	@ 0x22
 80021ea:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021ec:	4b2f      	ldr	r3, [pc, #188]	@ (80022ac <HAL_UART_MspInit+0x16c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021f2:	4b2e      	ldr	r3, [pc, #184]	@ (80022ac <HAL_UART_MspInit+0x16c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021f8:	4b2c      	ldr	r3, [pc, #176]	@ (80022ac <HAL_UART_MspInit+0x16c>)
 80021fa:	2280      	movs	r2, #128	@ 0x80
 80021fc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021fe:	4b2b      	ldr	r3, [pc, #172]	@ (80022ac <HAL_UART_MspInit+0x16c>)
 8002200:	2200      	movs	r2, #0
 8002202:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002204:	4b29      	ldr	r3, [pc, #164]	@ (80022ac <HAL_UART_MspInit+0x16c>)
 8002206:	2200      	movs	r2, #0
 8002208:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800220a:	4b28      	ldr	r3, [pc, #160]	@ (80022ac <HAL_UART_MspInit+0x16c>)
 800220c:	2220      	movs	r2, #32
 800220e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002210:	4b26      	ldr	r3, [pc, #152]	@ (80022ac <HAL_UART_MspInit+0x16c>)
 8002212:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002216:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002218:	4824      	ldr	r0, [pc, #144]	@ (80022ac <HAL_UART_MspInit+0x16c>)
 800221a:	f002 f8e7 	bl	80043ec <HAL_DMA_Init>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8002224:	f7ff fc08 	bl	8001a38 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a20      	ldr	r2, [pc, #128]	@ (80022ac <HAL_UART_MspInit+0x16c>)
 800222c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002230:	4a1e      	ldr	r2, [pc, #120]	@ (80022ac <HAL_UART_MspInit+0x16c>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8002236:	4b1f      	ldr	r3, [pc, #124]	@ (80022b4 <HAL_UART_MspInit+0x174>)
 8002238:	4a1f      	ldr	r2, [pc, #124]	@ (80022b8 <HAL_UART_MspInit+0x178>)
 800223a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800223c:	4b1d      	ldr	r3, [pc, #116]	@ (80022b4 <HAL_UART_MspInit+0x174>)
 800223e:	2223      	movs	r2, #35	@ 0x23
 8002240:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002242:	4b1c      	ldr	r3, [pc, #112]	@ (80022b4 <HAL_UART_MspInit+0x174>)
 8002244:	2210      	movs	r2, #16
 8002246:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002248:	4b1a      	ldr	r3, [pc, #104]	@ (80022b4 <HAL_UART_MspInit+0x174>)
 800224a:	2200      	movs	r2, #0
 800224c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800224e:	4b19      	ldr	r3, [pc, #100]	@ (80022b4 <HAL_UART_MspInit+0x174>)
 8002250:	2280      	movs	r2, #128	@ 0x80
 8002252:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002254:	4b17      	ldr	r3, [pc, #92]	@ (80022b4 <HAL_UART_MspInit+0x174>)
 8002256:	2200      	movs	r2, #0
 8002258:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800225a:	4b16      	ldr	r3, [pc, #88]	@ (80022b4 <HAL_UART_MspInit+0x174>)
 800225c:	2200      	movs	r2, #0
 800225e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002260:	4b14      	ldr	r3, [pc, #80]	@ (80022b4 <HAL_UART_MspInit+0x174>)
 8002262:	2200      	movs	r2, #0
 8002264:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002266:	4b13      	ldr	r3, [pc, #76]	@ (80022b4 <HAL_UART_MspInit+0x174>)
 8002268:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800226c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800226e:	4811      	ldr	r0, [pc, #68]	@ (80022b4 <HAL_UART_MspInit+0x174>)
 8002270:	f002 f8bc 	bl	80043ec <HAL_DMA_Init>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 800227a:	f7ff fbdd 	bl	8001a38 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a0c      	ldr	r2, [pc, #48]	@ (80022b4 <HAL_UART_MspInit+0x174>)
 8002282:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002284:	4a0b      	ldr	r2, [pc, #44]	@ (80022b4 <HAL_UART_MspInit+0x174>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2105      	movs	r1, #5
 800228e:	205b      	movs	r0, #91	@ 0x5b
 8002290:	f002 f884 	bl	800439c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002294:	205b      	movs	r0, #91	@ 0x5b
 8002296:	f002 f89b 	bl	80043d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800229a:	bf00      	nop
 800229c:	3778      	adds	r7, #120	@ 0x78
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40008000 	.word	0x40008000
 80022a8:	40021000 	.word	0x40021000
 80022ac:	20004bf8 	.word	0x20004bf8
 80022b0:	40020008 	.word	0x40020008
 80022b4:	20004c58 	.word	0x20004c58
 80022b8:	4002001c 	.word	0x4002001c

080022bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022bc:	480d      	ldr	r0, [pc, #52]	@ (80022f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022c0:	f7ff fee2 	bl	8002088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022c4:	480c      	ldr	r0, [pc, #48]	@ (80022f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80022c6:	490d      	ldr	r1, [pc, #52]	@ (80022fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80022c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002300 <LoopForever+0xe>)
  movs r3, #0
 80022ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80022cc:	e002      	b.n	80022d4 <LoopCopyDataInit>

080022ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022d2:	3304      	adds	r3, #4

080022d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022d8:	d3f9      	bcc.n	80022ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022da:	4a0a      	ldr	r2, [pc, #40]	@ (8002304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022dc:	4c0a      	ldr	r4, [pc, #40]	@ (8002308 <LoopForever+0x16>)
  movs r3, #0
 80022de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022e0:	e001      	b.n	80022e6 <LoopFillZerobss>

080022e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022e4:	3204      	adds	r2, #4

080022e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022e8:	d3fb      	bcc.n	80022e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022ea:	f016 fc6b 	bl	8018bc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022ee:	f7ff f993 	bl	8001618 <main>

080022f2 <LoopForever>:

LoopForever:
    b LoopForever
 80022f2:	e7fe      	b.n	80022f2 <LoopForever>
  ldr   r0, =_estack
 80022f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022fc:	20000400 	.word	0x20000400
  ldr r2, =_sidata
 8002300:	0801ac24 	.word	0x0801ac24
  ldr r2, =_sbss
 8002304:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 8002308:	2000b33c 	.word	0x2000b33c

0800230c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800230c:	e7fe      	b.n	800230c <ADC3_IRQHandler>

0800230e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002318:	2003      	movs	r0, #3
 800231a:	f002 f834 	bl	8004386 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800231e:	200f      	movs	r0, #15
 8002320:	f7ff fd20 	bl	8001d64 <HAL_InitTick>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	71fb      	strb	r3, [r7, #7]
 800232e:	e001      	b.n	8002334 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002330:	f7ff fcee 	bl	8001d10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002334:	79fb      	ldrb	r3, [r7, #7]

}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002344:	4b05      	ldr	r3, [pc, #20]	@ (800235c <HAL_IncTick+0x1c>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4b05      	ldr	r3, [pc, #20]	@ (8002360 <HAL_IncTick+0x20>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4413      	add	r3, r2
 800234e:	4a03      	ldr	r2, [pc, #12]	@ (800235c <HAL_IncTick+0x1c>)
 8002350:	6013      	str	r3, [r2, #0]
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	20004cb8 	.word	0x20004cb8
 8002360:	2000000c 	.word	0x2000000c

08002364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return uwTick;
 8002368:	4b03      	ldr	r3, [pc, #12]	@ (8002378 <HAL_GetTick+0x14>)
 800236a:	681b      	ldr	r3, [r3, #0]
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	20004cb8 	.word	0x20004cb8

0800237c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002384:	f7ff ffee 	bl	8002364 <HAL_GetTick>
 8002388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002394:	d004      	beq.n	80023a0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002396:	4b09      	ldr	r3, [pc, #36]	@ (80023bc <HAL_Delay+0x40>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	4413      	add	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023a0:	bf00      	nop
 80023a2:	f7ff ffdf 	bl	8002364 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d8f7      	bhi.n	80023a2 <HAL_Delay+0x26>
  {
  }
}
 80023b2:	bf00      	nop
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	2000000c 	.word	0x2000000c

080023c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	609a      	str	r2, [r3, #8]
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	609a      	str	r2, [r3, #8]
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	3360      	adds	r3, #96	@ 0x60
 800243a:	461a      	mov	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4b08      	ldr	r3, [pc, #32]	@ (800246c <LL_ADC_SetOffset+0x44>)
 800244a:	4013      	ands	r3, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	4313      	orrs	r3, r2
 8002458:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002460:	bf00      	nop
 8002462:	371c      	adds	r7, #28
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	03fff000 	.word	0x03fff000

08002470 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3360      	adds	r3, #96	@ 0x60
 800247e:	461a      	mov	r2, r3
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002490:	4618      	mov	r0, r3
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	3360      	adds	r3, #96	@ 0x60
 80024ac:	461a      	mov	r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	431a      	orrs	r2, r3
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80024c6:	bf00      	nop
 80024c8:	371c      	adds	r7, #28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b087      	sub	sp, #28
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	3360      	adds	r3, #96	@ 0x60
 80024e2:	461a      	mov	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	431a      	orrs	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80024fc:	bf00      	nop
 80024fe:	371c      	adds	r7, #28
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002508:	b480      	push	{r7}
 800250a:	b087      	sub	sp, #28
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	3360      	adds	r3, #96	@ 0x60
 8002518:	461a      	mov	r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	431a      	orrs	r2, r3
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002532:	bf00      	nop
 8002534:	371c      	adds	r7, #28
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	615a      	str	r2, [r3, #20]
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800258a:	b480      	push	{r7}
 800258c:	b087      	sub	sp, #28
 800258e:	af00      	add	r7, sp, #0
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3330      	adds	r3, #48	@ 0x30
 800259a:	461a      	mov	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	0a1b      	lsrs	r3, r3, #8
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	4413      	add	r3, r2
 80025a8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	211f      	movs	r1, #31
 80025b6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ba:	43db      	mvns	r3, r3
 80025bc:	401a      	ands	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	0e9b      	lsrs	r3, r3, #26
 80025c2:	f003 011f 	and.w	r1, r3, #31
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f003 031f 	and.w	r3, r3, #31
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	431a      	orrs	r2, r3
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025d6:	bf00      	nop
 80025d8:	371c      	adds	r7, #28
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ee:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	3314      	adds	r3, #20
 8002618:	461a      	mov	r2, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	0e5b      	lsrs	r3, r3, #25
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	4413      	add	r3, r2
 8002626:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	0d1b      	lsrs	r3, r3, #20
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	2107      	movs	r1, #7
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	401a      	ands	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	0d1b      	lsrs	r3, r3, #20
 8002642:	f003 031f 	and.w	r3, r3, #31
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	fa01 f303 	lsl.w	r3, r1, r3
 800264c:	431a      	orrs	r2, r3
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002652:	bf00      	nop
 8002654:	371c      	adds	r7, #28
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002678:	43db      	mvns	r3, r3
 800267a:	401a      	ands	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f003 0318 	and.w	r3, r3, #24
 8002682:	4908      	ldr	r1, [pc, #32]	@ (80026a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002684:	40d9      	lsrs	r1, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	400b      	ands	r3, r1
 800268a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800268e:	431a      	orrs	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002696:	bf00      	nop
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	0007ffff 	.word	0x0007ffff

080026a8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 031f 	and.w	r3, r3, #31
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80026f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6093      	str	r3, [r2, #8]
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002714:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002718:	d101      	bne.n	800271e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800273c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002740:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002764:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002768:	d101      	bne.n	800276e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800278c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002790:	f043 0201 	orr.w	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80027b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027b8:	f043 0202 	orr.w	r2, r3, #2
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <LL_ADC_IsEnabled+0x18>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <LL_ADC_IsEnabled+0x1a>
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b02      	cmp	r3, #2
 8002804:	d101      	bne.n	800280a <LL_ADC_IsDisableOngoing+0x18>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <LL_ADC_IsDisableOngoing+0x1a>
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002828:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800282c:	f043 0204 	orr.w	r2, r3, #4
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b04      	cmp	r3, #4
 8002852:	d101      	bne.n	8002858 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b08      	cmp	r3, #8
 8002878:	d101      	bne.n	800287e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800288c:	b590      	push	{r4, r7, lr}
 800288e:	b089      	sub	sp, #36	@ 0x24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002898:	2300      	movs	r3, #0
 800289a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e1a9      	b.n	8002bfa <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d109      	bne.n	80028c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7fe f977 	bl	8000ba8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff19 	bl	8002704 <LL_ADC_IsDeepPowerDownEnabled>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d004      	beq.n	80028e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff feff 	bl	80026e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff ff34 	bl	8002754 <LL_ADC_IsInternalRegulatorEnabled>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d115      	bne.n	800291e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff ff18 	bl	800272c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028fc:	4b9c      	ldr	r3, [pc, #624]	@ (8002b70 <HAL_ADC_Init+0x2e4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	099b      	lsrs	r3, r3, #6
 8002902:	4a9c      	ldr	r2, [pc, #624]	@ (8002b74 <HAL_ADC_Init+0x2e8>)
 8002904:	fba2 2303 	umull	r2, r3, r2, r3
 8002908:	099b      	lsrs	r3, r3, #6
 800290a:	3301      	adds	r3, #1
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002910:	e002      	b.n	8002918 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	3b01      	subs	r3, #1
 8002916:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f9      	bne.n	8002912 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ff16 	bl	8002754 <LL_ADC_IsInternalRegulatorEnabled>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10d      	bne.n	800294a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002932:	f043 0210 	orr.w	r2, r3, #16
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800293e:	f043 0201 	orr.w	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff ff76 	bl	8002840 <LL_ADC_REG_IsConversionOngoing>
 8002954:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	2b00      	cmp	r3, #0
 8002960:	f040 8142 	bne.w	8002be8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	2b00      	cmp	r3, #0
 8002968:	f040 813e 	bne.w	8002be8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002970:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002974:	f043 0202 	orr.w	r2, r3, #2
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff23 	bl	80027cc <LL_ADC_IsEnabled>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d141      	bne.n	8002a10 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002994:	d004      	beq.n	80029a0 <HAL_ADC_Init+0x114>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a77      	ldr	r2, [pc, #476]	@ (8002b78 <HAL_ADC_Init+0x2ec>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d10f      	bne.n	80029c0 <HAL_ADC_Init+0x134>
 80029a0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80029a4:	f7ff ff12 	bl	80027cc <LL_ADC_IsEnabled>
 80029a8:	4604      	mov	r4, r0
 80029aa:	4873      	ldr	r0, [pc, #460]	@ (8002b78 <HAL_ADC_Init+0x2ec>)
 80029ac:	f7ff ff0e 	bl	80027cc <LL_ADC_IsEnabled>
 80029b0:	4603      	mov	r3, r0
 80029b2:	4323      	orrs	r3, r4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	bf0c      	ite	eq
 80029b8:	2301      	moveq	r3, #1
 80029ba:	2300      	movne	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	e012      	b.n	80029e6 <HAL_ADC_Init+0x15a>
 80029c0:	486e      	ldr	r0, [pc, #440]	@ (8002b7c <HAL_ADC_Init+0x2f0>)
 80029c2:	f7ff ff03 	bl	80027cc <LL_ADC_IsEnabled>
 80029c6:	4604      	mov	r4, r0
 80029c8:	486d      	ldr	r0, [pc, #436]	@ (8002b80 <HAL_ADC_Init+0x2f4>)
 80029ca:	f7ff feff 	bl	80027cc <LL_ADC_IsEnabled>
 80029ce:	4603      	mov	r3, r0
 80029d0:	431c      	orrs	r4, r3
 80029d2:	486c      	ldr	r0, [pc, #432]	@ (8002b84 <HAL_ADC_Init+0x2f8>)
 80029d4:	f7ff fefa 	bl	80027cc <LL_ADC_IsEnabled>
 80029d8:	4603      	mov	r3, r0
 80029da:	4323      	orrs	r3, r4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	bf0c      	ite	eq
 80029e0:	2301      	moveq	r3, #1
 80029e2:	2300      	movne	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d012      	beq.n	8002a10 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029f2:	d004      	beq.n	80029fe <HAL_ADC_Init+0x172>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a5f      	ldr	r2, [pc, #380]	@ (8002b78 <HAL_ADC_Init+0x2ec>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d101      	bne.n	8002a02 <HAL_ADC_Init+0x176>
 80029fe:	4a62      	ldr	r2, [pc, #392]	@ (8002b88 <HAL_ADC_Init+0x2fc>)
 8002a00:	e000      	b.n	8002a04 <HAL_ADC_Init+0x178>
 8002a02:	4a62      	ldr	r2, [pc, #392]	@ (8002b8c <HAL_ADC_Init+0x300>)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	f7ff fcd8 	bl	80023c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	7f5b      	ldrb	r3, [r3, #29]
 8002a14:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a1a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002a20:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002a26:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a2e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d106      	bne.n	8002a4c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a42:	3b01      	subs	r3, #1
 8002a44:	045b      	lsls	r3, r3, #17
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d009      	beq.n	8002a68 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a58:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a60:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	4b48      	ldr	r3, [pc, #288]	@ (8002b90 <HAL_ADC_Init+0x304>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6812      	ldr	r2, [r2, #0]
 8002a76:	69b9      	ldr	r1, [r7, #24]
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fee5 	bl	8002866 <LL_ADC_INJ_IsConversionOngoing>
 8002a9c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d17f      	bne.n	8002ba4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d17c      	bne.n	8002ba4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002aae:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ab6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ac6:	f023 0302 	bic.w	r3, r3, #2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6812      	ldr	r2, [r2, #0]
 8002ace:	69b9      	ldr	r1, [r7, #24]
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d017      	beq.n	8002b0c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691a      	ldr	r2, [r3, #16]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002aea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002af4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002af8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6911      	ldr	r1, [r2, #16]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	430b      	orrs	r3, r1
 8002b06:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002b0a:	e013      	b.n	8002b34 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691a      	ldr	r2, [r3, #16]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002b1a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002b2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b30:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d12a      	bne.n	8002b94 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002b48:	f023 0304 	bic.w	r3, r3, #4
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b54:	4311      	orrs	r1, r2
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002b5a:	4311      	orrs	r1, r2
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b60:	430a      	orrs	r2, r1
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f042 0201 	orr.w	r2, r2, #1
 8002b6c:	611a      	str	r2, [r3, #16]
 8002b6e:	e019      	b.n	8002ba4 <HAL_ADC_Init+0x318>
 8002b70:	20000004 	.word	0x20000004
 8002b74:	053e2d63 	.word	0x053e2d63
 8002b78:	50000100 	.word	0x50000100
 8002b7c:	50000400 	.word	0x50000400
 8002b80:	50000500 	.word	0x50000500
 8002b84:	50000600 	.word	0x50000600
 8002b88:	50000300 	.word	0x50000300
 8002b8c:	50000700 	.word	0x50000700
 8002b90:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691a      	ldr	r2, [r3, #16]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0201 	bic.w	r2, r2, #1
 8002ba2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d10c      	bne.n	8002bc6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb2:	f023 010f 	bic.w	r1, r3, #15
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	1e5a      	subs	r2, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bc4:	e007      	b.n	8002bd6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 020f 	bic.w	r2, r2, #15
 8002bd4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bda:	f023 0303 	bic.w	r3, r3, #3
 8002bde:	f043 0201 	orr.w	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002be6:	e007      	b.n	8002bf8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bec:	f043 0210 	orr.w	r2, r3, #16
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bf8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3724      	adds	r7, #36	@ 0x24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd90      	pop	{r4, r7, pc}
 8002c02:	bf00      	nop

08002c04 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c18:	d004      	beq.n	8002c24 <HAL_ADC_Start_DMA+0x20>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a5a      	ldr	r2, [pc, #360]	@ (8002d88 <HAL_ADC_Start_DMA+0x184>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d101      	bne.n	8002c28 <HAL_ADC_Start_DMA+0x24>
 8002c24:	4b59      	ldr	r3, [pc, #356]	@ (8002d8c <HAL_ADC_Start_DMA+0x188>)
 8002c26:	e000      	b.n	8002c2a <HAL_ADC_Start_DMA+0x26>
 8002c28:	4b59      	ldr	r3, [pc, #356]	@ (8002d90 <HAL_ADC_Start_DMA+0x18c>)
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff fd3c 	bl	80026a8 <LL_ADC_GetMultimode>
 8002c30:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fe02 	bl	8002840 <LL_ADC_REG_IsConversionOngoing>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f040 809b 	bne.w	8002d7a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_ADC_Start_DMA+0x4e>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e096      	b.n	8002d80 <HAL_ADC_Start_DMA+0x17c>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a4d      	ldr	r2, [pc, #308]	@ (8002d94 <HAL_ADC_Start_DMA+0x190>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d008      	beq.n	8002c76 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d005      	beq.n	8002c76 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	2b05      	cmp	r3, #5
 8002c6e:	d002      	beq.n	8002c76 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	2b09      	cmp	r3, #9
 8002c74:	d17a      	bne.n	8002d6c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 ff60 	bl	8003b3c <ADC_Enable>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002c80:	7dfb      	ldrb	r3, [r7, #23]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d16d      	bne.n	8002d62 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c8e:	f023 0301 	bic.w	r3, r3, #1
 8002c92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a3a      	ldr	r2, [pc, #232]	@ (8002d88 <HAL_ADC_Start_DMA+0x184>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d009      	beq.n	8002cb8 <HAL_ADC_Start_DMA+0xb4>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a3b      	ldr	r2, [pc, #236]	@ (8002d98 <HAL_ADC_Start_DMA+0x194>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d002      	beq.n	8002cb4 <HAL_ADC_Start_DMA+0xb0>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	e003      	b.n	8002cbc <HAL_ADC_Start_DMA+0xb8>
 8002cb4:	4b39      	ldr	r3, [pc, #228]	@ (8002d9c <HAL_ADC_Start_DMA+0x198>)
 8002cb6:	e001      	b.n	8002cbc <HAL_ADC_Start_DMA+0xb8>
 8002cb8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d002      	beq.n	8002cca <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d105      	bne.n	8002cd6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cce:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d006      	beq.n	8002cf0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ce6:	f023 0206 	bic.w	r2, r3, #6
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	661a      	str	r2, [r3, #96]	@ 0x60
 8002cee:	e002      	b.n	8002cf6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cfa:	4a29      	ldr	r2, [pc, #164]	@ (8002da0 <HAL_ADC_Start_DMA+0x19c>)
 8002cfc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d02:	4a28      	ldr	r2, [pc, #160]	@ (8002da4 <HAL_ADC_Start_DMA+0x1a0>)
 8002d04:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d0a:	4a27      	ldr	r2, [pc, #156]	@ (8002da8 <HAL_ADC_Start_DMA+0x1a4>)
 8002d0c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	221c      	movs	r2, #28
 8002d14:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0210 	orr.w	r2, r2, #16
 8002d2c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 0201 	orr.w	r2, r2, #1
 8002d3c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	3340      	adds	r3, #64	@ 0x40
 8002d48:	4619      	mov	r1, r3
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f001 fbf5 	bl	800453c <HAL_DMA_Start_IT>
 8002d52:	4603      	mov	r3, r0
 8002d54:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fd5c 	bl	8002818 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002d60:	e00d      	b.n	8002d7e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002d6a:	e008      	b.n	8002d7e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002d78:	e001      	b.n	8002d7e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	50000100 	.word	0x50000100
 8002d8c:	50000300 	.word	0x50000300
 8002d90:	50000700 	.word	0x50000700
 8002d94:	50000600 	.word	0x50000600
 8002d98:	50000500 	.word	0x50000500
 8002d9c:	50000400 	.word	0x50000400
 8002da0:	08003d27 	.word	0x08003d27
 8002da4:	08003dff 	.word	0x08003dff
 8002da8:	08003e1b 	.word	0x08003e1b

08002dac <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08a      	sub	sp, #40	@ 0x28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002db4:	2300      	movs	r3, #0
 8002db6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dd0:	d004      	beq.n	8002ddc <HAL_ADC_IRQHandler+0x30>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a8e      	ldr	r2, [pc, #568]	@ (8003010 <HAL_ADC_IRQHandler+0x264>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d101      	bne.n	8002de0 <HAL_ADC_IRQHandler+0x34>
 8002ddc:	4b8d      	ldr	r3, [pc, #564]	@ (8003014 <HAL_ADC_IRQHandler+0x268>)
 8002dde:	e000      	b.n	8002de2 <HAL_ADC_IRQHandler+0x36>
 8002de0:	4b8d      	ldr	r3, [pc, #564]	@ (8003018 <HAL_ADC_IRQHandler+0x26c>)
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fc60 	bl	80026a8 <LL_ADC_GetMultimode>
 8002de8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d017      	beq.n	8002e24 <HAL_ADC_IRQHandler+0x78>
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d012      	beq.n	8002e24 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d105      	bne.n	8002e16 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f001 f8f6 	bl	8004008 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2202      	movs	r2, #2
 8002e22:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d004      	beq.n	8002e38 <HAL_ADC_IRQHandler+0x8c>
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10b      	bne.n	8002e50 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 8094 	beq.w	8002f6c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 808e 	beq.w	8002f6c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e54:	f003 0310 	and.w	r3, r3, #16
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d105      	bne.n	8002e68 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e60:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fb79 	bl	8002564 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d072      	beq.n	8002f5e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a64      	ldr	r2, [pc, #400]	@ (8003010 <HAL_ADC_IRQHandler+0x264>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d009      	beq.n	8002e96 <HAL_ADC_IRQHandler+0xea>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a65      	ldr	r2, [pc, #404]	@ (800301c <HAL_ADC_IRQHandler+0x270>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d002      	beq.n	8002e92 <HAL_ADC_IRQHandler+0xe6>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	e003      	b.n	8002e9a <HAL_ADC_IRQHandler+0xee>
 8002e92:	4b63      	ldr	r3, [pc, #396]	@ (8003020 <HAL_ADC_IRQHandler+0x274>)
 8002e94:	e001      	b.n	8002e9a <HAL_ADC_IRQHandler+0xee>
 8002e96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d008      	beq.n	8002eb4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2b05      	cmp	r3, #5
 8002eac:	d002      	beq.n	8002eb4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2b09      	cmp	r3, #9
 8002eb2:	d104      	bne.n	8002ebe <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	623b      	str	r3, [r7, #32]
 8002ebc:	e014      	b.n	8002ee8 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a53      	ldr	r2, [pc, #332]	@ (8003010 <HAL_ADC_IRQHandler+0x264>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d009      	beq.n	8002edc <HAL_ADC_IRQHandler+0x130>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a53      	ldr	r2, [pc, #332]	@ (800301c <HAL_ADC_IRQHandler+0x270>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d002      	beq.n	8002ed8 <HAL_ADC_IRQHandler+0x12c>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	e003      	b.n	8002ee0 <HAL_ADC_IRQHandler+0x134>
 8002ed8:	4b51      	ldr	r3, [pc, #324]	@ (8003020 <HAL_ADC_IRQHandler+0x274>)
 8002eda:	e001      	b.n	8002ee0 <HAL_ADC_IRQHandler+0x134>
 8002edc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002ee0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d135      	bne.n	8002f5e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d12e      	bne.n	8002f5e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fc9b 	bl	8002840 <LL_ADC_REG_IsConversionOngoing>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d11a      	bne.n	8002f46 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 020c 	bic.w	r2, r2, #12
 8002f1e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d112      	bne.n	8002f5e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3c:	f043 0201 	orr.w	r2, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f44:	e00b      	b.n	8002f5e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f4a:	f043 0210 	orr.w	r2, r3, #16
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f56:	f043 0201 	orr.w	r2, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f984 	bl	800326c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	220c      	movs	r2, #12
 8002f6a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f003 0320 	and.w	r3, r3, #32
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d004      	beq.n	8002f80 <HAL_ADC_IRQHandler+0x1d4>
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	f003 0320 	and.w	r3, r3, #32
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10b      	bne.n	8002f98 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 80b3 	beq.w	80030f2 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 80ad 	beq.w	80030f2 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9c:	f003 0310 	and.w	r3, r3, #16
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d105      	bne.n	8002fb0 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff fb14 	bl	80025e2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002fba:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff facf 	bl	8002564 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fc6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a10      	ldr	r2, [pc, #64]	@ (8003010 <HAL_ADC_IRQHandler+0x264>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d009      	beq.n	8002fe6 <HAL_ADC_IRQHandler+0x23a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a11      	ldr	r2, [pc, #68]	@ (800301c <HAL_ADC_IRQHandler+0x270>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d002      	beq.n	8002fe2 <HAL_ADC_IRQHandler+0x236>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	e003      	b.n	8002fea <HAL_ADC_IRQHandler+0x23e>
 8002fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8003020 <HAL_ADC_IRQHandler+0x274>)
 8002fe4:	e001      	b.n	8002fea <HAL_ADC_IRQHandler+0x23e>
 8002fe6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6812      	ldr	r2, [r2, #0]
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d008      	beq.n	8003004 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	2b06      	cmp	r3, #6
 8002ffc:	d002      	beq.n	8003004 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2b07      	cmp	r3, #7
 8003002:	d10f      	bne.n	8003024 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	623b      	str	r3, [r7, #32]
 800300c:	e01f      	b.n	800304e <HAL_ADC_IRQHandler+0x2a2>
 800300e:	bf00      	nop
 8003010:	50000100 	.word	0x50000100
 8003014:	50000300 	.word	0x50000300
 8003018:	50000700 	.word	0x50000700
 800301c:	50000500 	.word	0x50000500
 8003020:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a8b      	ldr	r2, [pc, #556]	@ (8003258 <HAL_ADC_IRQHandler+0x4ac>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d009      	beq.n	8003042 <HAL_ADC_IRQHandler+0x296>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a8a      	ldr	r2, [pc, #552]	@ (800325c <HAL_ADC_IRQHandler+0x4b0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d002      	beq.n	800303e <HAL_ADC_IRQHandler+0x292>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	e003      	b.n	8003046 <HAL_ADC_IRQHandler+0x29a>
 800303e:	4b88      	ldr	r3, [pc, #544]	@ (8003260 <HAL_ADC_IRQHandler+0x4b4>)
 8003040:	e001      	b.n	8003046 <HAL_ADC_IRQHandler+0x29a>
 8003042:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003046:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d047      	beq.n	80030e4 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d007      	beq.n	800306e <HAL_ADC_IRQHandler+0x2c2>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d03f      	beq.n	80030e4 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800306a:	2b00      	cmp	r3, #0
 800306c:	d13a      	bne.n	80030e4 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003078:	2b40      	cmp	r3, #64	@ 0x40
 800307a:	d133      	bne.n	80030e4 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d12e      	bne.n	80030e4 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff fbeb 	bl	8002866 <LL_ADC_INJ_IsConversionOngoing>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d11a      	bne.n	80030cc <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80030a4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d112      	bne.n	80030e4 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c2:	f043 0201 	orr.w	r2, r3, #1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030ca:	e00b      	b.n	80030e4 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d0:	f043 0210 	orr.w	r2, r3, #16
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030dc:	f043 0201 	orr.w	r2, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 ff67 	bl	8003fb8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2260      	movs	r2, #96	@ 0x60
 80030f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d011      	beq.n	8003120 <HAL_ADC_IRQHandler+0x374>
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00c      	beq.n	8003120 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f8be 	bl	8003294 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2280      	movs	r2, #128	@ 0x80
 800311e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d012      	beq.n	8003150 <HAL_ADC_IRQHandler+0x3a4>
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00d      	beq.n	8003150 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003138:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 ff4d 	bl	8003fe0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800314e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003156:	2b00      	cmp	r3, #0
 8003158:	d012      	beq.n	8003180 <HAL_ADC_IRQHandler+0x3d4>
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00d      	beq.n	8003180 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003168:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 ff3f 	bl	8003ff4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f003 0310 	and.w	r3, r3, #16
 8003186:	2b00      	cmp	r3, #0
 8003188:	d043      	beq.n	8003212 <HAL_ADC_IRQHandler+0x466>
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	f003 0310 	and.w	r3, r3, #16
 8003190:	2b00      	cmp	r3, #0
 8003192:	d03e      	beq.n	8003212 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003198:	2b00      	cmp	r3, #0
 800319a:	d102      	bne.n	80031a2 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 800319c:	2301      	movs	r3, #1
 800319e:	627b      	str	r3, [r7, #36]	@ 0x24
 80031a0:	e021      	b.n	80031e6 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d015      	beq.n	80031d4 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031b0:	d004      	beq.n	80031bc <HAL_ADC_IRQHandler+0x410>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a28      	ldr	r2, [pc, #160]	@ (8003258 <HAL_ADC_IRQHandler+0x4ac>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d101      	bne.n	80031c0 <HAL_ADC_IRQHandler+0x414>
 80031bc:	4b29      	ldr	r3, [pc, #164]	@ (8003264 <HAL_ADC_IRQHandler+0x4b8>)
 80031be:	e000      	b.n	80031c2 <HAL_ADC_IRQHandler+0x416>
 80031c0:	4b29      	ldr	r3, [pc, #164]	@ (8003268 <HAL_ADC_IRQHandler+0x4bc>)
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fa7e 	bl	80026c4 <LL_ADC_GetMultiDMATransfer>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00b      	beq.n	80031e6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80031ce:	2301      	movs	r3, #1
 80031d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80031d2:	e008      	b.n	80031e6 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80031e2:	2301      	movs	r3, #1
 80031e4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80031e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d10e      	bne.n	800320a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031fc:	f043 0202 	orr.w	r2, r3, #2
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f84f 	bl	80032a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2210      	movs	r2, #16
 8003210:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003218:	2b00      	cmp	r3, #0
 800321a:	d018      	beq.n	800324e <HAL_ADC_IRQHandler+0x4a2>
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003222:	2b00      	cmp	r3, #0
 8003224:	d013      	beq.n	800324e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800322a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003236:	f043 0208 	orr.w	r2, r3, #8
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003246:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 febf 	bl	8003fcc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800324e:	bf00      	nop
 8003250:	3728      	adds	r7, #40	@ 0x28
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	50000100 	.word	0x50000100
 800325c:	50000500 	.word	0x50000500
 8003260:	50000400 	.word	0x50000400
 8003264:	50000300 	.word	0x50000300
 8003268:	50000700 	.word	0x50000700

0800326c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b0b6      	sub	sp, #216	@ 0xd8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d102      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x24>
 80032da:	2302      	movs	r3, #2
 80032dc:	f000 bc13 	b.w	8003b06 <HAL_ADC_ConfigChannel+0x84a>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff faa7 	bl	8002840 <LL_ADC_REG_IsConversionOngoing>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f040 83f3 	bne.w	8003ae0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	6859      	ldr	r1, [r3, #4]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	f7ff f93f 	bl	800258a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fa95 	bl	8002840 <LL_ADC_REG_IsConversionOngoing>
 8003316:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff faa1 	bl	8002866 <LL_ADC_INJ_IsConversionOngoing>
 8003324:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003328:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800332c:	2b00      	cmp	r3, #0
 800332e:	f040 81d9 	bne.w	80036e4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003332:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003336:	2b00      	cmp	r3, #0
 8003338:	f040 81d4 	bne.w	80036e4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003344:	d10f      	bne.n	8003366 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2200      	movs	r2, #0
 8003350:	4619      	mov	r1, r3
 8003352:	f7ff f959 	bl	8002608 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff f8ed 	bl	800253e <LL_ADC_SetSamplingTimeCommonConfig>
 8003364:	e00e      	b.n	8003384 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	6819      	ldr	r1, [r3, #0]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	461a      	mov	r2, r3
 8003374:	f7ff f948 	bl	8002608 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2100      	movs	r1, #0
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff f8dd 	bl	800253e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	695a      	ldr	r2, [r3, #20]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	08db      	lsrs	r3, r3, #3
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d022      	beq.n	80033ec <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	6919      	ldr	r1, [r3, #16]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80033b6:	f7ff f837 	bl	8002428 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6919      	ldr	r1, [r3, #16]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f7ff f883 	bl	80024d2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d102      	bne.n	80033e2 <HAL_ADC_ConfigChannel+0x126>
 80033dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033e0:	e000      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x128>
 80033e2:	2300      	movs	r3, #0
 80033e4:	461a      	mov	r2, r3
 80033e6:	f7ff f88f 	bl	8002508 <LL_ADC_SetOffsetSaturation>
 80033ea:	e17b      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2100      	movs	r1, #0
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff f83c 	bl	8002470 <LL_ADC_GetOffsetChannel>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10a      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x15c>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2100      	movs	r1, #0
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff f831 	bl	8002470 <LL_ADC_GetOffsetChannel>
 800340e:	4603      	mov	r3, r0
 8003410:	0e9b      	lsrs	r3, r3, #26
 8003412:	f003 021f 	and.w	r2, r3, #31
 8003416:	e01e      	b.n	8003456 <HAL_ADC_ConfigChannel+0x19a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2100      	movs	r1, #0
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff f826 	bl	8002470 <LL_ADC_GetOffsetChannel>
 8003424:	4603      	mov	r3, r0
 8003426:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800342e:	fa93 f3a3 	rbit	r3, r3
 8003432:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003436:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800343a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800343e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003446:	2320      	movs	r3, #32
 8003448:	e004      	b.n	8003454 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800344a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800344e:	fab3 f383 	clz	r3, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800345e:	2b00      	cmp	r3, #0
 8003460:	d105      	bne.n	800346e <HAL_ADC_ConfigChannel+0x1b2>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	0e9b      	lsrs	r3, r3, #26
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	e018      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x1e4>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003482:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003486:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800348a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003492:	2320      	movs	r3, #32
 8003494:	e004      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003496:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800349a:	fab3 f383 	clz	r3, r3
 800349e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d106      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2200      	movs	r2, #0
 80034aa:	2100      	movs	r1, #0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fe fff5 	bl	800249c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2101      	movs	r1, #1
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fe ffd9 	bl	8002470 <LL_ADC_GetOffsetChannel>
 80034be:	4603      	mov	r3, r0
 80034c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10a      	bne.n	80034de <HAL_ADC_ConfigChannel+0x222>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2101      	movs	r1, #1
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe ffce 	bl	8002470 <LL_ADC_GetOffsetChannel>
 80034d4:	4603      	mov	r3, r0
 80034d6:	0e9b      	lsrs	r3, r3, #26
 80034d8:	f003 021f 	and.w	r2, r3, #31
 80034dc:	e01e      	b.n	800351c <HAL_ADC_ConfigChannel+0x260>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2101      	movs	r1, #1
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fe ffc3 	bl	8002470 <LL_ADC_GetOffsetChannel>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80034f4:	fa93 f3a3 	rbit	r3, r3
 80034f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80034fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003500:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003504:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800350c:	2320      	movs	r3, #32
 800350e:	e004      	b.n	800351a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003510:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003514:	fab3 f383 	clz	r3, r3
 8003518:	b2db      	uxtb	r3, r3
 800351a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003524:	2b00      	cmp	r3, #0
 8003526:	d105      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x278>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	0e9b      	lsrs	r3, r3, #26
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	e018      	b.n	8003566 <HAL_ADC_ConfigChannel+0x2aa>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003540:	fa93 f3a3 	rbit	r3, r3
 8003544:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003548:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800354c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003550:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003558:	2320      	movs	r3, #32
 800355a:	e004      	b.n	8003566 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800355c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003560:	fab3 f383 	clz	r3, r3
 8003564:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003566:	429a      	cmp	r2, r3
 8003568:	d106      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2200      	movs	r2, #0
 8003570:	2101      	movs	r1, #1
 8003572:	4618      	mov	r0, r3
 8003574:	f7fe ff92 	bl	800249c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2102      	movs	r1, #2
 800357e:	4618      	mov	r0, r3
 8003580:	f7fe ff76 	bl	8002470 <LL_ADC_GetOffsetChannel>
 8003584:	4603      	mov	r3, r0
 8003586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10a      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x2e8>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2102      	movs	r1, #2
 8003594:	4618      	mov	r0, r3
 8003596:	f7fe ff6b 	bl	8002470 <LL_ADC_GetOffsetChannel>
 800359a:	4603      	mov	r3, r0
 800359c:	0e9b      	lsrs	r3, r3, #26
 800359e:	f003 021f 	and.w	r2, r3, #31
 80035a2:	e01e      	b.n	80035e2 <HAL_ADC_ConfigChannel+0x326>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2102      	movs	r1, #2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fe ff60 	bl	8002470 <LL_ADC_GetOffsetChannel>
 80035b0:	4603      	mov	r3, r0
 80035b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035ba:	fa93 f3a3 	rbit	r3, r3
 80035be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80035c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80035ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80035d2:	2320      	movs	r3, #32
 80035d4:	e004      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80035d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80035da:	fab3 f383 	clz	r3, r3
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d105      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x33e>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	0e9b      	lsrs	r3, r3, #26
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	e016      	b.n	8003628 <HAL_ADC_ConfigChannel+0x36c>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003602:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003606:	fa93 f3a3 	rbit	r3, r3
 800360a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800360c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800360e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003612:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800361a:	2320      	movs	r3, #32
 800361c:	e004      	b.n	8003628 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800361e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003622:	fab3 f383 	clz	r3, r3
 8003626:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003628:	429a      	cmp	r2, r3
 800362a:	d106      	bne.n	800363a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2200      	movs	r2, #0
 8003632:	2102      	movs	r1, #2
 8003634:	4618      	mov	r0, r3
 8003636:	f7fe ff31 	bl	800249c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2103      	movs	r1, #3
 8003640:	4618      	mov	r0, r3
 8003642:	f7fe ff15 	bl	8002470 <LL_ADC_GetOffsetChannel>
 8003646:	4603      	mov	r3, r0
 8003648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10a      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x3aa>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2103      	movs	r1, #3
 8003656:	4618      	mov	r0, r3
 8003658:	f7fe ff0a 	bl	8002470 <LL_ADC_GetOffsetChannel>
 800365c:	4603      	mov	r3, r0
 800365e:	0e9b      	lsrs	r3, r3, #26
 8003660:	f003 021f 	and.w	r2, r3, #31
 8003664:	e017      	b.n	8003696 <HAL_ADC_ConfigChannel+0x3da>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2103      	movs	r1, #3
 800366c:	4618      	mov	r0, r3
 800366e:	f7fe feff 	bl	8002470 <LL_ADC_GetOffsetChannel>
 8003672:	4603      	mov	r3, r0
 8003674:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003676:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003678:	fa93 f3a3 	rbit	r3, r3
 800367c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800367e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003680:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003682:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003688:	2320      	movs	r3, #32
 800368a:	e003      	b.n	8003694 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800368c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800368e:	fab3 f383 	clz	r3, r3
 8003692:	b2db      	uxtb	r3, r3
 8003694:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d105      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x3f2>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	0e9b      	lsrs	r3, r3, #26
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	e011      	b.n	80036d2 <HAL_ADC_ConfigChannel+0x416>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036b6:	fa93 f3a3 	rbit	r3, r3
 80036ba:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80036bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036be:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80036c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80036c6:	2320      	movs	r3, #32
 80036c8:	e003      	b.n	80036d2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80036ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036cc:	fab3 f383 	clz	r3, r3
 80036d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d106      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2200      	movs	r2, #0
 80036dc:	2103      	movs	r1, #3
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fe fedc 	bl	800249c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff f86f 	bl	80027cc <LL_ADC_IsEnabled>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f040 813d 	bne.w	8003970 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6818      	ldr	r0, [r3, #0]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	6819      	ldr	r1, [r3, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	461a      	mov	r2, r3
 8003704:	f7fe ffac 	bl	8002660 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	4aa2      	ldr	r2, [pc, #648]	@ (8003998 <HAL_ADC_ConfigChannel+0x6dc>)
 800370e:	4293      	cmp	r3, r2
 8003710:	f040 812e 	bne.w	8003970 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10b      	bne.n	800373c <HAL_ADC_ConfigChannel+0x480>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	0e9b      	lsrs	r3, r3, #26
 800372a:	3301      	adds	r3, #1
 800372c:	f003 031f 	and.w	r3, r3, #31
 8003730:	2b09      	cmp	r3, #9
 8003732:	bf94      	ite	ls
 8003734:	2301      	movls	r3, #1
 8003736:	2300      	movhi	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	e019      	b.n	8003770 <HAL_ADC_ConfigChannel+0x4b4>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003744:	fa93 f3a3 	rbit	r3, r3
 8003748:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800374a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800374c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800374e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003754:	2320      	movs	r3, #32
 8003756:	e003      	b.n	8003760 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003758:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800375a:	fab3 f383 	clz	r3, r3
 800375e:	b2db      	uxtb	r3, r3
 8003760:	3301      	adds	r3, #1
 8003762:	f003 031f 	and.w	r3, r3, #31
 8003766:	2b09      	cmp	r3, #9
 8003768:	bf94      	ite	ls
 800376a:	2301      	movls	r3, #1
 800376c:	2300      	movhi	r3, #0
 800376e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003770:	2b00      	cmp	r3, #0
 8003772:	d079      	beq.n	8003868 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377c:	2b00      	cmp	r3, #0
 800377e:	d107      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x4d4>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	0e9b      	lsrs	r3, r3, #26
 8003786:	3301      	adds	r3, #1
 8003788:	069b      	lsls	r3, r3, #26
 800378a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800378e:	e015      	b.n	80037bc <HAL_ADC_ConfigChannel+0x500>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003796:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003798:	fa93 f3a3 	rbit	r3, r3
 800379c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800379e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037a0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80037a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80037a8:	2320      	movs	r3, #32
 80037aa:	e003      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80037ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ae:	fab3 f383 	clz	r3, r3
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	3301      	adds	r3, #1
 80037b6:	069b      	lsls	r3, r3, #26
 80037b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d109      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x520>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	0e9b      	lsrs	r3, r3, #26
 80037ce:	3301      	adds	r3, #1
 80037d0:	f003 031f 	and.w	r3, r3, #31
 80037d4:	2101      	movs	r1, #1
 80037d6:	fa01 f303 	lsl.w	r3, r1, r3
 80037da:	e017      	b.n	800380c <HAL_ADC_ConfigChannel+0x550>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037e4:	fa93 f3a3 	rbit	r3, r3
 80037e8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80037ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80037ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80037f4:	2320      	movs	r3, #32
 80037f6:	e003      	b.n	8003800 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80037f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037fa:	fab3 f383 	clz	r3, r3
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	3301      	adds	r3, #1
 8003802:	f003 031f 	and.w	r3, r3, #31
 8003806:	2101      	movs	r1, #1
 8003808:	fa01 f303 	lsl.w	r3, r1, r3
 800380c:	ea42 0103 	orr.w	r1, r2, r3
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10a      	bne.n	8003832 <HAL_ADC_ConfigChannel+0x576>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	0e9b      	lsrs	r3, r3, #26
 8003822:	3301      	adds	r3, #1
 8003824:	f003 021f 	and.w	r2, r3, #31
 8003828:	4613      	mov	r3, r2
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	4413      	add	r3, r2
 800382e:	051b      	lsls	r3, r3, #20
 8003830:	e018      	b.n	8003864 <HAL_ADC_ConfigChannel+0x5a8>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003842:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800384a:	2320      	movs	r3, #32
 800384c:	e003      	b.n	8003856 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800384e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003850:	fab3 f383 	clz	r3, r3
 8003854:	b2db      	uxtb	r3, r3
 8003856:	3301      	adds	r3, #1
 8003858:	f003 021f 	and.w	r2, r3, #31
 800385c:	4613      	mov	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003864:	430b      	orrs	r3, r1
 8003866:	e07e      	b.n	8003966 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003870:	2b00      	cmp	r3, #0
 8003872:	d107      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x5c8>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	0e9b      	lsrs	r3, r3, #26
 800387a:	3301      	adds	r3, #1
 800387c:	069b      	lsls	r3, r3, #26
 800387e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003882:	e015      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x5f4>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800388c:	fa93 f3a3 	rbit	r3, r3
 8003890:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003894:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800389c:	2320      	movs	r3, #32
 800389e:	e003      	b.n	80038a8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80038a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a2:	fab3 f383 	clz	r3, r3
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	3301      	adds	r3, #1
 80038aa:	069b      	lsls	r3, r3, #26
 80038ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d109      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x614>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	0e9b      	lsrs	r3, r3, #26
 80038c2:	3301      	adds	r3, #1
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	2101      	movs	r1, #1
 80038ca:	fa01 f303 	lsl.w	r3, r1, r3
 80038ce:	e017      	b.n	8003900 <HAL_ADC_ConfigChannel+0x644>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	fa93 f3a3 	rbit	r3, r3
 80038dc:	61fb      	str	r3, [r7, #28]
  return result;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80038e8:	2320      	movs	r3, #32
 80038ea:	e003      	b.n	80038f4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80038ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ee:	fab3 f383 	clz	r3, r3
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	3301      	adds	r3, #1
 80038f6:	f003 031f 	and.w	r3, r3, #31
 80038fa:	2101      	movs	r1, #1
 80038fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003900:	ea42 0103 	orr.w	r1, r2, r3
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10d      	bne.n	800392c <HAL_ADC_ConfigChannel+0x670>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	0e9b      	lsrs	r3, r3, #26
 8003916:	3301      	adds	r3, #1
 8003918:	f003 021f 	and.w	r2, r3, #31
 800391c:	4613      	mov	r3, r2
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	4413      	add	r3, r2
 8003922:	3b1e      	subs	r3, #30
 8003924:	051b      	lsls	r3, r3, #20
 8003926:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800392a:	e01b      	b.n	8003964 <HAL_ADC_ConfigChannel+0x6a8>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	fa93 f3a3 	rbit	r3, r3
 8003938:	613b      	str	r3, [r7, #16]
  return result;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003944:	2320      	movs	r3, #32
 8003946:	e003      	b.n	8003950 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	fab3 f383 	clz	r3, r3
 800394e:	b2db      	uxtb	r3, r3
 8003950:	3301      	adds	r3, #1
 8003952:	f003 021f 	and.w	r2, r3, #31
 8003956:	4613      	mov	r3, r2
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	4413      	add	r3, r2
 800395c:	3b1e      	subs	r3, #30
 800395e:	051b      	lsls	r3, r3, #20
 8003960:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003964:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800396a:	4619      	mov	r1, r3
 800396c:	f7fe fe4c 	bl	8002608 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4b09      	ldr	r3, [pc, #36]	@ (800399c <HAL_ADC_ConfigChannel+0x6e0>)
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 80be 	beq.w	8003afa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003986:	d004      	beq.n	8003992 <HAL_ADC_ConfigChannel+0x6d6>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a04      	ldr	r2, [pc, #16]	@ (80039a0 <HAL_ADC_ConfigChannel+0x6e4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d10a      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x6ec>
 8003992:	4b04      	ldr	r3, [pc, #16]	@ (80039a4 <HAL_ADC_ConfigChannel+0x6e8>)
 8003994:	e009      	b.n	80039aa <HAL_ADC_ConfigChannel+0x6ee>
 8003996:	bf00      	nop
 8003998:	407f0000 	.word	0x407f0000
 800399c:	80080000 	.word	0x80080000
 80039a0:	50000100 	.word	0x50000100
 80039a4:	50000300 	.word	0x50000300
 80039a8:	4b59      	ldr	r3, [pc, #356]	@ (8003b10 <HAL_ADC_ConfigChannel+0x854>)
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe fd2e 	bl	800240c <LL_ADC_GetCommonPathInternalCh>
 80039b0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a56      	ldr	r2, [pc, #344]	@ (8003b14 <HAL_ADC_ConfigChannel+0x858>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d004      	beq.n	80039c8 <HAL_ADC_ConfigChannel+0x70c>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a55      	ldr	r2, [pc, #340]	@ (8003b18 <HAL_ADC_ConfigChannel+0x85c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d13a      	bne.n	8003a3e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d134      	bne.n	8003a3e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039dc:	d005      	beq.n	80039ea <HAL_ADC_ConfigChannel+0x72e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a4e      	ldr	r2, [pc, #312]	@ (8003b1c <HAL_ADC_ConfigChannel+0x860>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	f040 8085 	bne.w	8003af4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039f2:	d004      	beq.n	80039fe <HAL_ADC_ConfigChannel+0x742>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a49      	ldr	r2, [pc, #292]	@ (8003b20 <HAL_ADC_ConfigChannel+0x864>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d101      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x746>
 80039fe:	4a49      	ldr	r2, [pc, #292]	@ (8003b24 <HAL_ADC_ConfigChannel+0x868>)
 8003a00:	e000      	b.n	8003a04 <HAL_ADC_ConfigChannel+0x748>
 8003a02:	4a43      	ldr	r2, [pc, #268]	@ (8003b10 <HAL_ADC_ConfigChannel+0x854>)
 8003a04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a08:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4610      	mov	r0, r2
 8003a10:	f7fe fce9 	bl	80023e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a14:	4b44      	ldr	r3, [pc, #272]	@ (8003b28 <HAL_ADC_ConfigChannel+0x86c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	099b      	lsrs	r3, r3, #6
 8003a1a:	4a44      	ldr	r2, [pc, #272]	@ (8003b2c <HAL_ADC_ConfigChannel+0x870>)
 8003a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a20:	099b      	lsrs	r3, r3, #6
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	4613      	mov	r3, r2
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	4413      	add	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a2e:	e002      	b.n	8003a36 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1f9      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a3c:	e05a      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a3b      	ldr	r2, [pc, #236]	@ (8003b30 <HAL_ADC_ConfigChannel+0x874>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d125      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d11f      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a31      	ldr	r2, [pc, #196]	@ (8003b20 <HAL_ADC_ConfigChannel+0x864>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d104      	bne.n	8003a68 <HAL_ADC_ConfigChannel+0x7ac>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a34      	ldr	r2, [pc, #208]	@ (8003b34 <HAL_ADC_ConfigChannel+0x878>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d047      	beq.n	8003af8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a70:	d004      	beq.n	8003a7c <HAL_ADC_ConfigChannel+0x7c0>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a2a      	ldr	r2, [pc, #168]	@ (8003b20 <HAL_ADC_ConfigChannel+0x864>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d101      	bne.n	8003a80 <HAL_ADC_ConfigChannel+0x7c4>
 8003a7c:	4a29      	ldr	r2, [pc, #164]	@ (8003b24 <HAL_ADC_ConfigChannel+0x868>)
 8003a7e:	e000      	b.n	8003a82 <HAL_ADC_ConfigChannel+0x7c6>
 8003a80:	4a23      	ldr	r2, [pc, #140]	@ (8003b10 <HAL_ADC_ConfigChannel+0x854>)
 8003a82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	f7fe fcaa 	bl	80023e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a92:	e031      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a27      	ldr	r2, [pc, #156]	@ (8003b38 <HAL_ADC_ConfigChannel+0x87c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d12d      	bne.n	8003afa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d127      	bne.n	8003afa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1c      	ldr	r2, [pc, #112]	@ (8003b20 <HAL_ADC_ConfigChannel+0x864>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d022      	beq.n	8003afa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003abc:	d004      	beq.n	8003ac8 <HAL_ADC_ConfigChannel+0x80c>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a17      	ldr	r2, [pc, #92]	@ (8003b20 <HAL_ADC_ConfigChannel+0x864>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d101      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x810>
 8003ac8:	4a16      	ldr	r2, [pc, #88]	@ (8003b24 <HAL_ADC_ConfigChannel+0x868>)
 8003aca:	e000      	b.n	8003ace <HAL_ADC_ConfigChannel+0x812>
 8003acc:	4a10      	ldr	r2, [pc, #64]	@ (8003b10 <HAL_ADC_ConfigChannel+0x854>)
 8003ace:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ad2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4610      	mov	r0, r2
 8003ada:	f7fe fc84 	bl	80023e6 <LL_ADC_SetCommonPathInternalCh>
 8003ade:	e00c      	b.n	8003afa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae4:	f043 0220 	orr.w	r2, r3, #32
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003af2:	e002      	b.n	8003afa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003af4:	bf00      	nop
 8003af6:	e000      	b.n	8003afa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003af8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b02:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	37d8      	adds	r7, #216	@ 0xd8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	50000700 	.word	0x50000700
 8003b14:	c3210000 	.word	0xc3210000
 8003b18:	90c00010 	.word	0x90c00010
 8003b1c:	50000600 	.word	0x50000600
 8003b20:	50000100 	.word	0x50000100
 8003b24:	50000300 	.word	0x50000300
 8003b28:	20000004 	.word	0x20000004
 8003b2c:	053e2d63 	.word	0x053e2d63
 8003b30:	c7520000 	.word	0xc7520000
 8003b34:	50000500 	.word	0x50000500
 8003b38:	cb840000 	.word	0xcb840000

08003b3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fe fe3d 	bl	80027cc <LL_ADC_IsEnabled>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d176      	bne.n	8003c46 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	4b3c      	ldr	r3, [pc, #240]	@ (8003c50 <ADC_Enable+0x114>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00d      	beq.n	8003b82 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b6a:	f043 0210 	orr.w	r2, r3, #16
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b76:	f043 0201 	orr.w	r2, r3, #1
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e062      	b.n	8003c48 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fe fdf8 	bl	800277c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b94:	d004      	beq.n	8003ba0 <ADC_Enable+0x64>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a2e      	ldr	r2, [pc, #184]	@ (8003c54 <ADC_Enable+0x118>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d101      	bne.n	8003ba4 <ADC_Enable+0x68>
 8003ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8003c58 <ADC_Enable+0x11c>)
 8003ba2:	e000      	b.n	8003ba6 <ADC_Enable+0x6a>
 8003ba4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c5c <ADC_Enable+0x120>)
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fe fc30 	bl	800240c <LL_ADC_GetCommonPathInternalCh>
 8003bac:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003bae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d013      	beq.n	8003bde <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8003c60 <ADC_Enable+0x124>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	099b      	lsrs	r3, r3, #6
 8003bbc:	4a29      	ldr	r2, [pc, #164]	@ (8003c64 <ADC_Enable+0x128>)
 8003bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc2:	099b      	lsrs	r3, r3, #6
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	4413      	add	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003bd0:	e002      	b.n	8003bd8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f9      	bne.n	8003bd2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003bde:	f7fe fbc1 	bl	8002364 <HAL_GetTick>
 8003be2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003be4:	e028      	b.n	8003c38 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fe fdee 	bl	80027cc <LL_ADC_IsEnabled>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d104      	bne.n	8003c00 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe fdbe 	bl	800277c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c00:	f7fe fbb0 	bl	8002364 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d914      	bls.n	8003c38 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d00d      	beq.n	8003c38 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c20:	f043 0210 	orr.w	r2, r3, #16
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c2c:	f043 0201 	orr.w	r2, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e007      	b.n	8003c48 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d1cf      	bne.n	8003be6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	8000003f 	.word	0x8000003f
 8003c54:	50000100 	.word	0x50000100
 8003c58:	50000300 	.word	0x50000300
 8003c5c:	50000700 	.word	0x50000700
 8003c60:	20000004 	.word	0x20000004
 8003c64:	053e2d63 	.word	0x053e2d63

08003c68 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fe fdbc 	bl	80027f2 <LL_ADC_IsDisableOngoing>
 8003c7a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fe fda3 	bl	80027cc <LL_ADC_IsEnabled>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d047      	beq.n	8003d1c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d144      	bne.n	8003d1c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 030d 	and.w	r3, r3, #13
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d10c      	bne.n	8003cba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fe fd7d 	bl	80027a4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2203      	movs	r2, #3
 8003cb0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003cb2:	f7fe fb57 	bl	8002364 <HAL_GetTick>
 8003cb6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cb8:	e029      	b.n	8003d0e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cbe:	f043 0210 	orr.w	r2, r3, #16
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cca:	f043 0201 	orr.w	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e023      	b.n	8003d1e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003cd6:	f7fe fb45 	bl	8002364 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d914      	bls.n	8003d0e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00d      	beq.n	8003d0e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf6:	f043 0210 	orr.w	r2, r3, #16
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d02:	f043 0201 	orr.w	r2, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e007      	b.n	8003d1e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1dc      	bne.n	8003cd6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d14b      	bne.n	8003dd8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d44:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d021      	beq.n	8003d9e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fe fc00 	bl	8002564 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d032      	beq.n	8003dd0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d12b      	bne.n	8003dd0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d11f      	bne.n	8003dd0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d94:	f043 0201 	orr.w	r2, r3, #1
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d9c:	e018      	b.n	8003dd0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d111      	bne.n	8003dd0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d105      	bne.n	8003dd0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc8:	f043 0201 	orr.w	r2, r3, #1
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f7ff fa4b 	bl	800326c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003dd6:	e00e      	b.n	8003df6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f7ff fa5f 	bl	80032a8 <HAL_ADC_ErrorCallback>
}
 8003dea:	e004      	b.n	8003df6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	4798      	blx	r3
}
 8003df6:	bf00      	nop
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f7ff fa37 	bl	8003280 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e12:	bf00      	nop
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e38:	f043 0204 	orr.w	r2, r3, #4
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f7ff fa31 	bl	80032a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e46:	bf00      	nop
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <LL_ADC_IsEnabled>:
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d101      	bne.n	8003e66 <LL_ADC_IsEnabled+0x18>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <LL_ADC_IsEnabled+0x1a>
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <LL_ADC_StartCalibration>:
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003e86:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	609a      	str	r2, [r3, #8]
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <LL_ADC_IsCalibrationOnGoing>:
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003eba:	d101      	bne.n	8003ec0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <LL_ADC_REG_IsConversionOngoing>:
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d101      	bne.n	8003ee6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_ADCEx_Calibration_Start+0x1c>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e04d      	b.n	8003fac <HAL_ADCEx_Calibration_Start+0xb8>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7ff fea5 	bl	8003c68 <ADC_Disable>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d136      	bne.n	8003f96 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f2c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003f30:	f023 0302 	bic.w	r3, r3, #2
 8003f34:	f043 0202 	orr.w	r2, r3, #2
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6839      	ldr	r1, [r7, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff ff96 	bl	8003e74 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f48:	e014      	b.n	8003f74 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	4a18      	ldr	r2, [pc, #96]	@ (8003fb4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d90d      	bls.n	8003f74 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f5c:	f023 0312 	bic.w	r3, r3, #18
 8003f60:	f043 0210 	orr.w	r2, r3, #16
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e01b      	b.n	8003fac <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff ff94 	bl	8003ea6 <LL_ADC_IsCalibrationOnGoing>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e2      	bne.n	8003f4a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f88:	f023 0303 	bic.w	r3, r3, #3
 8003f8c:	f043 0201 	orr.w	r2, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f94:	e005      	b.n	8003fa2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f9a:	f043 0210 	orr.w	r2, r3, #16
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	0004de01 	.word	0x0004de01

08003fb8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800401c:	b590      	push	{r4, r7, lr}
 800401e:	b0a1      	sub	sp, #132	@ 0x84
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004036:	2302      	movs	r3, #2
 8004038:	e0e7      	b.n	800420a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004042:	2300      	movs	r3, #0
 8004044:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004046:	2300      	movs	r3, #0
 8004048:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004052:	d102      	bne.n	800405a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004054:	4b6f      	ldr	r3, [pc, #444]	@ (8004214 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004056:	60bb      	str	r3, [r7, #8]
 8004058:	e009      	b.n	800406e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a6e      	ldr	r2, [pc, #440]	@ (8004218 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d102      	bne.n	800406a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004064:	4b6d      	ldr	r3, [pc, #436]	@ (800421c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004066:	60bb      	str	r3, [r7, #8]
 8004068:	e001      	b.n	800406e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800406a:	2300      	movs	r3, #0
 800406c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10b      	bne.n	800408c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004078:	f043 0220 	orr.w	r2, r3, #32
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e0be      	b.n	800420a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff ff1d 	bl	8003ece <LL_ADC_REG_IsConversionOngoing>
 8004094:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff ff17 	bl	8003ece <LL_ADC_REG_IsConversionOngoing>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f040 80a0 	bne.w	80041e8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80040a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f040 809c 	bne.w	80041e8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040b8:	d004      	beq.n	80040c4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a55      	ldr	r2, [pc, #340]	@ (8004214 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d101      	bne.n	80040c8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80040c4:	4b56      	ldr	r3, [pc, #344]	@ (8004220 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80040c6:	e000      	b.n	80040ca <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80040c8:	4b56      	ldr	r3, [pc, #344]	@ (8004224 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80040ca:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d04b      	beq.n	800416c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80040d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	6859      	ldr	r1, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80040e6:	035b      	lsls	r3, r3, #13
 80040e8:	430b      	orrs	r3, r1
 80040ea:	431a      	orrs	r2, r3
 80040ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040f8:	d004      	beq.n	8004104 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a45      	ldr	r2, [pc, #276]	@ (8004214 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d10f      	bne.n	8004124 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004104:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004108:	f7ff fea1 	bl	8003e4e <LL_ADC_IsEnabled>
 800410c:	4604      	mov	r4, r0
 800410e:	4841      	ldr	r0, [pc, #260]	@ (8004214 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004110:	f7ff fe9d 	bl	8003e4e <LL_ADC_IsEnabled>
 8004114:	4603      	mov	r3, r0
 8004116:	4323      	orrs	r3, r4
 8004118:	2b00      	cmp	r3, #0
 800411a:	bf0c      	ite	eq
 800411c:	2301      	moveq	r3, #1
 800411e:	2300      	movne	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	e012      	b.n	800414a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004124:	483c      	ldr	r0, [pc, #240]	@ (8004218 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004126:	f7ff fe92 	bl	8003e4e <LL_ADC_IsEnabled>
 800412a:	4604      	mov	r4, r0
 800412c:	483b      	ldr	r0, [pc, #236]	@ (800421c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800412e:	f7ff fe8e 	bl	8003e4e <LL_ADC_IsEnabled>
 8004132:	4603      	mov	r3, r0
 8004134:	431c      	orrs	r4, r3
 8004136:	483c      	ldr	r0, [pc, #240]	@ (8004228 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004138:	f7ff fe89 	bl	8003e4e <LL_ADC_IsEnabled>
 800413c:	4603      	mov	r3, r0
 800413e:	4323      	orrs	r3, r4
 8004140:	2b00      	cmp	r3, #0
 8004142:	bf0c      	ite	eq
 8004144:	2301      	moveq	r3, #1
 8004146:	2300      	movne	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d056      	beq.n	80041fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800414e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004156:	f023 030f 	bic.w	r3, r3, #15
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	6811      	ldr	r1, [r2, #0]
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	6892      	ldr	r2, [r2, #8]
 8004162:	430a      	orrs	r2, r1
 8004164:	431a      	orrs	r2, r3
 8004166:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004168:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800416a:	e047      	b.n	80041fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800416c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004174:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004176:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004180:	d004      	beq.n	800418c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a23      	ldr	r2, [pc, #140]	@ (8004214 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d10f      	bne.n	80041ac <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800418c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004190:	f7ff fe5d 	bl	8003e4e <LL_ADC_IsEnabled>
 8004194:	4604      	mov	r4, r0
 8004196:	481f      	ldr	r0, [pc, #124]	@ (8004214 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004198:	f7ff fe59 	bl	8003e4e <LL_ADC_IsEnabled>
 800419c:	4603      	mov	r3, r0
 800419e:	4323      	orrs	r3, r4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	bf0c      	ite	eq
 80041a4:	2301      	moveq	r3, #1
 80041a6:	2300      	movne	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	e012      	b.n	80041d2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80041ac:	481a      	ldr	r0, [pc, #104]	@ (8004218 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80041ae:	f7ff fe4e 	bl	8003e4e <LL_ADC_IsEnabled>
 80041b2:	4604      	mov	r4, r0
 80041b4:	4819      	ldr	r0, [pc, #100]	@ (800421c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80041b6:	f7ff fe4a 	bl	8003e4e <LL_ADC_IsEnabled>
 80041ba:	4603      	mov	r3, r0
 80041bc:	431c      	orrs	r4, r3
 80041be:	481a      	ldr	r0, [pc, #104]	@ (8004228 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80041c0:	f7ff fe45 	bl	8003e4e <LL_ADC_IsEnabled>
 80041c4:	4603      	mov	r3, r0
 80041c6:	4323      	orrs	r3, r4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	bf0c      	ite	eq
 80041cc:	2301      	moveq	r3, #1
 80041ce:	2300      	movne	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d012      	beq.n	80041fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80041d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80041de:	f023 030f 	bic.w	r3, r3, #15
 80041e2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80041e4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80041e6:	e009      	b.n	80041fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ec:	f043 0220 	orr.w	r2, r3, #32
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80041fa:	e000      	b.n	80041fe <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80041fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004206:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800420a:	4618      	mov	r0, r3
 800420c:	3784      	adds	r7, #132	@ 0x84
 800420e:	46bd      	mov	sp, r7
 8004210:	bd90      	pop	{r4, r7, pc}
 8004212:	bf00      	nop
 8004214:	50000100 	.word	0x50000100
 8004218:	50000400 	.word	0x50000400
 800421c:	50000500 	.word	0x50000500
 8004220:	50000300 	.word	0x50000300
 8004224:	50000700 	.word	0x50000700
 8004228:	50000600 	.word	0x50000600

0800422c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800423c:	4b0c      	ldr	r3, [pc, #48]	@ (8004270 <__NVIC_SetPriorityGrouping+0x44>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004248:	4013      	ands	r3, r2
 800424a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004254:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800425c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800425e:	4a04      	ldr	r2, [pc, #16]	@ (8004270 <__NVIC_SetPriorityGrouping+0x44>)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	60d3      	str	r3, [r2, #12]
}
 8004264:	bf00      	nop
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	e000ed00 	.word	0xe000ed00

08004274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004278:	4b04      	ldr	r3, [pc, #16]	@ (800428c <__NVIC_GetPriorityGrouping+0x18>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	0a1b      	lsrs	r3, r3, #8
 800427e:	f003 0307 	and.w	r3, r3, #7
}
 8004282:	4618      	mov	r0, r3
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	e000ed00 	.word	0xe000ed00

08004290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800429a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	db0b      	blt.n	80042ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	f003 021f 	and.w	r2, r3, #31
 80042a8:	4907      	ldr	r1, [pc, #28]	@ (80042c8 <__NVIC_EnableIRQ+0x38>)
 80042aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	2001      	movs	r0, #1
 80042b2:	fa00 f202 	lsl.w	r2, r0, r2
 80042b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	e000e100 	.word	0xe000e100

080042cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	6039      	str	r1, [r7, #0]
 80042d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	db0a      	blt.n	80042f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	490c      	ldr	r1, [pc, #48]	@ (8004318 <__NVIC_SetPriority+0x4c>)
 80042e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ea:	0112      	lsls	r2, r2, #4
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	440b      	add	r3, r1
 80042f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042f4:	e00a      	b.n	800430c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	4908      	ldr	r1, [pc, #32]	@ (800431c <__NVIC_SetPriority+0x50>)
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	3b04      	subs	r3, #4
 8004304:	0112      	lsls	r2, r2, #4
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	440b      	add	r3, r1
 800430a:	761a      	strb	r2, [r3, #24]
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	e000e100 	.word	0xe000e100
 800431c:	e000ed00 	.word	0xe000ed00

08004320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004320:	b480      	push	{r7}
 8004322:	b089      	sub	sp, #36	@ 0x24
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f1c3 0307 	rsb	r3, r3, #7
 800433a:	2b04      	cmp	r3, #4
 800433c:	bf28      	it	cs
 800433e:	2304      	movcs	r3, #4
 8004340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	3304      	adds	r3, #4
 8004346:	2b06      	cmp	r3, #6
 8004348:	d902      	bls.n	8004350 <NVIC_EncodePriority+0x30>
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	3b03      	subs	r3, #3
 800434e:	e000      	b.n	8004352 <NVIC_EncodePriority+0x32>
 8004350:	2300      	movs	r3, #0
 8004352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004354:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43da      	mvns	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	401a      	ands	r2, r3
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004368:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	fa01 f303 	lsl.w	r3, r1, r3
 8004372:	43d9      	mvns	r1, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004378:	4313      	orrs	r3, r2
         );
}
 800437a:	4618      	mov	r0, r3
 800437c:	3724      	adds	r7, #36	@ 0x24
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b082      	sub	sp, #8
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff ff4c 	bl	800422c <__NVIC_SetPriorityGrouping>
}
 8004394:	bf00      	nop
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	4603      	mov	r3, r0
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043aa:	f7ff ff63 	bl	8004274 <__NVIC_GetPriorityGrouping>
 80043ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	68b9      	ldr	r1, [r7, #8]
 80043b4:	6978      	ldr	r0, [r7, #20]
 80043b6:	f7ff ffb3 	bl	8004320 <NVIC_EncodePriority>
 80043ba:	4602      	mov	r2, r0
 80043bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043c0:	4611      	mov	r1, r2
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7ff ff82 	bl	80042cc <__NVIC_SetPriority>
}
 80043c8:	bf00      	nop
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff ff56 	bl	8004290 <__NVIC_EnableIRQ>
}
 80043e4:	bf00      	nop
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e08d      	b.n	800451a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	461a      	mov	r2, r3
 8004404:	4b47      	ldr	r3, [pc, #284]	@ (8004524 <HAL_DMA_Init+0x138>)
 8004406:	429a      	cmp	r2, r3
 8004408:	d80f      	bhi.n	800442a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	4b45      	ldr	r3, [pc, #276]	@ (8004528 <HAL_DMA_Init+0x13c>)
 8004412:	4413      	add	r3, r2
 8004414:	4a45      	ldr	r2, [pc, #276]	@ (800452c <HAL_DMA_Init+0x140>)
 8004416:	fba2 2303 	umull	r2, r3, r2, r3
 800441a:	091b      	lsrs	r3, r3, #4
 800441c:	009a      	lsls	r2, r3, #2
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a42      	ldr	r2, [pc, #264]	@ (8004530 <HAL_DMA_Init+0x144>)
 8004426:	641a      	str	r2, [r3, #64]	@ 0x40
 8004428:	e00e      	b.n	8004448 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	4b40      	ldr	r3, [pc, #256]	@ (8004534 <HAL_DMA_Init+0x148>)
 8004432:	4413      	add	r3, r2
 8004434:	4a3d      	ldr	r2, [pc, #244]	@ (800452c <HAL_DMA_Init+0x140>)
 8004436:	fba2 2303 	umull	r2, r3, r2, r3
 800443a:	091b      	lsrs	r3, r3, #4
 800443c:	009a      	lsls	r2, r3, #2
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a3c      	ldr	r2, [pc, #240]	@ (8004538 <HAL_DMA_Init+0x14c>)
 8004446:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800445e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004462:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800446c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004478:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004484:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fa82 	bl	80049a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044a8:	d102      	bne.n	80044b0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80044c4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d010      	beq.n	80044f0 <HAL_DMA_Init+0x104>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d80c      	bhi.n	80044f0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 faa2 	bl	8004a20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80044ec:	605a      	str	r2, [r3, #4]
 80044ee:	e008      	b.n	8004502 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40020407 	.word	0x40020407
 8004528:	bffdfff8 	.word	0xbffdfff8
 800452c:	cccccccd 	.word	0xcccccccd
 8004530:	40020000 	.word	0x40020000
 8004534:	bffdfbf8 	.word	0xbffdfbf8
 8004538:	40020400 	.word	0x40020400

0800453c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
 8004548:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <HAL_DMA_Start_IT+0x20>
 8004558:	2302      	movs	r3, #2
 800455a:	e066      	b.n	800462a <HAL_DMA_Start_IT+0xee>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b01      	cmp	r3, #1
 800456e:	d155      	bne.n	800461c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0201 	bic.w	r2, r2, #1
 800458c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	68b9      	ldr	r1, [r7, #8]
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 f9c7 	bl	8004928 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d008      	beq.n	80045b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 020e 	orr.w	r2, r2, #14
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	e00f      	b.n	80045d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0204 	bic.w	r2, r2, #4
 80045c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 020a 	orr.w	r2, r2, #10
 80045d2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d007      	beq.n	80045f2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045f0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d007      	beq.n	800460a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004604:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004608:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f042 0201 	orr.w	r2, r2, #1
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	e005      	b.n	8004628 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004624:	2302      	movs	r3, #2
 8004626:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004628:	7dfb      	ldrb	r3, [r7, #23]
}
 800462a:	4618      	mov	r0, r3
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004632:	b480      	push	{r7}
 8004634:	b085      	sub	sp, #20
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d005      	beq.n	8004656 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2204      	movs	r2, #4
 800464e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	73fb      	strb	r3, [r7, #15]
 8004654:	e037      	b.n	80046c6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 020e 	bic.w	r2, r2, #14
 8004664:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004670:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004674:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0201 	bic.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468a:	f003 021f 	and.w	r2, r3, #31
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004692:	2101      	movs	r1, #1
 8004694:	fa01 f202 	lsl.w	r2, r1, r2
 8004698:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80046a2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00c      	beq.n	80046c6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046ba:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80046c4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d00d      	beq.n	8004718 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2204      	movs	r2, #4
 8004700:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	73fb      	strb	r3, [r7, #15]
 8004716:	e047      	b.n	80047a8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 020e 	bic.w	r2, r2, #14
 8004726:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0201 	bic.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004742:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004746:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474c:	f003 021f 	and.w	r2, r3, #31
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004754:	2101      	movs	r1, #1
 8004756:	fa01 f202 	lsl.w	r2, r1, r2
 800475a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004764:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00c      	beq.n	8004788 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004778:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800477c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004786:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	4798      	blx	r3
    }
  }
  return status;
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ce:	f003 031f 	and.w	r3, r3, #31
 80047d2:	2204      	movs	r2, #4
 80047d4:	409a      	lsls	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4013      	ands	r3, r2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d026      	beq.n	800482c <HAL_DMA_IRQHandler+0x7a>
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d021      	beq.n	800482c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d107      	bne.n	8004806 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0204 	bic.w	r2, r2, #4
 8004804:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800480a:	f003 021f 	and.w	r2, r3, #31
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004812:	2104      	movs	r1, #4
 8004814:	fa01 f202 	lsl.w	r2, r1, r2
 8004818:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800481e:	2b00      	cmp	r3, #0
 8004820:	d071      	beq.n	8004906 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800482a:	e06c      	b.n	8004906 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004830:	f003 031f 	and.w	r3, r3, #31
 8004834:	2202      	movs	r2, #2
 8004836:	409a      	lsls	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4013      	ands	r3, r2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d02e      	beq.n	800489e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d029      	beq.n	800489e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0320 	and.w	r3, r3, #32
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10b      	bne.n	8004870 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 020a 	bic.w	r2, r2, #10
 8004866:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004874:	f003 021f 	and.w	r2, r3, #31
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487c:	2102      	movs	r1, #2
 800487e:	fa01 f202 	lsl.w	r2, r1, r2
 8004882:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004890:	2b00      	cmp	r3, #0
 8004892:	d038      	beq.n	8004906 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800489c:	e033      	b.n	8004906 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a2:	f003 031f 	and.w	r3, r3, #31
 80048a6:	2208      	movs	r2, #8
 80048a8:	409a      	lsls	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4013      	ands	r3, r2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d02a      	beq.n	8004908 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d025      	beq.n	8004908 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 020e 	bic.w	r2, r2, #14
 80048ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d0:	f003 021f 	and.w	r2, r3, #31
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d8:	2101      	movs	r1, #1
 80048da:	fa01 f202 	lsl.w	r2, r1, r2
 80048de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d004      	beq.n	8004908 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004906:	bf00      	nop
 8004908:	bf00      	nop
}
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800491c:	4618      	mov	r0, r3
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800493e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004944:	2b00      	cmp	r3, #0
 8004946:	d004      	beq.n	8004952 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004950:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004956:	f003 021f 	and.w	r2, r3, #31
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495e:	2101      	movs	r1, #1
 8004960:	fa01 f202 	lsl.w	r2, r1, r2
 8004964:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2b10      	cmp	r3, #16
 8004974:	d108      	bne.n	8004988 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004986:	e007      	b.n	8004998 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	60da      	str	r2, [r3, #12]
}
 8004998:	bf00      	nop
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	4b16      	ldr	r3, [pc, #88]	@ (8004a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d802      	bhi.n	80049be <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80049b8:	4b15      	ldr	r3, [pc, #84]	@ (8004a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	e001      	b.n	80049c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80049be:	4b15      	ldr	r3, [pc, #84]	@ (8004a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80049c0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	3b08      	subs	r3, #8
 80049ce:	4a12      	ldr	r2, [pc, #72]	@ (8004a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80049d0:	fba2 2303 	umull	r2, r3, r2, r3
 80049d4:	091b      	lsrs	r3, r3, #4
 80049d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049dc:	089b      	lsrs	r3, r3, #2
 80049de:	009a      	lsls	r2, r3, #2
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	4413      	add	r3, r2
 80049e4:	461a      	mov	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a0b      	ldr	r2, [pc, #44]	@ (8004a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80049ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f003 031f 	and.w	r3, r3, #31
 80049f6:	2201      	movs	r2, #1
 80049f8:	409a      	lsls	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80049fe:	bf00      	nop
 8004a00:	371c      	adds	r7, #28
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	40020407 	.word	0x40020407
 8004a10:	40020800 	.word	0x40020800
 8004a14:	40020820 	.word	0x40020820
 8004a18:	cccccccd 	.word	0xcccccccd
 8004a1c:	40020880 	.word	0x40020880

08004a20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4b0b      	ldr	r3, [pc, #44]	@ (8004a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004a34:	4413      	add	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	461a      	mov	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a08      	ldr	r2, [pc, #32]	@ (8004a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004a42:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	f003 031f 	and.w	r3, r3, #31
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	409a      	lsls	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004a54:	bf00      	nop
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	1000823f 	.word	0x1000823f
 8004a64:	40020940 	.word	0x40020940

08004a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a76:	e15a      	b.n	8004d2e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	fa01 f303 	lsl.w	r3, r1, r3
 8004a84:	4013      	ands	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 814c 	beq.w	8004d28 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f003 0303 	and.w	r3, r3, #3
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d005      	beq.n	8004aa8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d130      	bne.n	8004b0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	2203      	movs	r2, #3
 8004ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4013      	ands	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ade:	2201      	movs	r2, #1
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	43db      	mvns	r3, r3
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4013      	ands	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	091b      	lsrs	r3, r3, #4
 8004af4:	f003 0201 	and.w	r2, r3, #1
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	d017      	beq.n	8004b46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	2203      	movs	r2, #3
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	43db      	mvns	r3, r3
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d123      	bne.n	8004b9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	08da      	lsrs	r2, r3, #3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	3208      	adds	r2, #8
 8004b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	220f      	movs	r2, #15
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	4013      	ands	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	691a      	ldr	r2, [r3, #16]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	08da      	lsrs	r2, r3, #3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3208      	adds	r2, #8
 8004b94:	6939      	ldr	r1, [r7, #16]
 8004b96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	2203      	movs	r2, #3
 8004ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8004baa:	43db      	mvns	r3, r3
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f003 0203 	and.w	r2, r3, #3
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 80a6 	beq.w	8004d28 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bdc:	4b5b      	ldr	r3, [pc, #364]	@ (8004d4c <HAL_GPIO_Init+0x2e4>)
 8004bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004be0:	4a5a      	ldr	r2, [pc, #360]	@ (8004d4c <HAL_GPIO_Init+0x2e4>)
 8004be2:	f043 0301 	orr.w	r3, r3, #1
 8004be6:	6613      	str	r3, [r2, #96]	@ 0x60
 8004be8:	4b58      	ldr	r3, [pc, #352]	@ (8004d4c <HAL_GPIO_Init+0x2e4>)
 8004bea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	60bb      	str	r3, [r7, #8]
 8004bf2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bf4:	4a56      	ldr	r2, [pc, #344]	@ (8004d50 <HAL_GPIO_Init+0x2e8>)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	089b      	lsrs	r3, r3, #2
 8004bfa:	3302      	adds	r3, #2
 8004bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f003 0303 	and.w	r3, r3, #3
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	220f      	movs	r2, #15
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	43db      	mvns	r3, r3
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4013      	ands	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004c1e:	d01f      	beq.n	8004c60 <HAL_GPIO_Init+0x1f8>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a4c      	ldr	r2, [pc, #304]	@ (8004d54 <HAL_GPIO_Init+0x2ec>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d019      	beq.n	8004c5c <HAL_GPIO_Init+0x1f4>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a4b      	ldr	r2, [pc, #300]	@ (8004d58 <HAL_GPIO_Init+0x2f0>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d013      	beq.n	8004c58 <HAL_GPIO_Init+0x1f0>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a4a      	ldr	r2, [pc, #296]	@ (8004d5c <HAL_GPIO_Init+0x2f4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00d      	beq.n	8004c54 <HAL_GPIO_Init+0x1ec>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a49      	ldr	r2, [pc, #292]	@ (8004d60 <HAL_GPIO_Init+0x2f8>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d007      	beq.n	8004c50 <HAL_GPIO_Init+0x1e8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a48      	ldr	r2, [pc, #288]	@ (8004d64 <HAL_GPIO_Init+0x2fc>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d101      	bne.n	8004c4c <HAL_GPIO_Init+0x1e4>
 8004c48:	2305      	movs	r3, #5
 8004c4a:	e00a      	b.n	8004c62 <HAL_GPIO_Init+0x1fa>
 8004c4c:	2306      	movs	r3, #6
 8004c4e:	e008      	b.n	8004c62 <HAL_GPIO_Init+0x1fa>
 8004c50:	2304      	movs	r3, #4
 8004c52:	e006      	b.n	8004c62 <HAL_GPIO_Init+0x1fa>
 8004c54:	2303      	movs	r3, #3
 8004c56:	e004      	b.n	8004c62 <HAL_GPIO_Init+0x1fa>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e002      	b.n	8004c62 <HAL_GPIO_Init+0x1fa>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e000      	b.n	8004c62 <HAL_GPIO_Init+0x1fa>
 8004c60:	2300      	movs	r3, #0
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	f002 0203 	and.w	r2, r2, #3
 8004c68:	0092      	lsls	r2, r2, #2
 8004c6a:	4093      	lsls	r3, r2
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c72:	4937      	ldr	r1, [pc, #220]	@ (8004d50 <HAL_GPIO_Init+0x2e8>)
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	089b      	lsrs	r3, r3, #2
 8004c78:	3302      	adds	r3, #2
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c80:	4b39      	ldr	r3, [pc, #228]	@ (8004d68 <HAL_GPIO_Init+0x300>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ca4:	4a30      	ldr	r2, [pc, #192]	@ (8004d68 <HAL_GPIO_Init+0x300>)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004caa:	4b2f      	ldr	r3, [pc, #188]	@ (8004d68 <HAL_GPIO_Init+0x300>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	43db      	mvns	r3, r3
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004cce:	4a26      	ldr	r2, [pc, #152]	@ (8004d68 <HAL_GPIO_Init+0x300>)
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004cd4:	4b24      	ldr	r3, [pc, #144]	@ (8004d68 <HAL_GPIO_Init+0x300>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8004d68 <HAL_GPIO_Init+0x300>)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8004d68 <HAL_GPIO_Init+0x300>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	43db      	mvns	r3, r3
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d22:	4a11      	ldr	r2, [pc, #68]	@ (8004d68 <HAL_GPIO_Init+0x300>)
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	fa22 f303 	lsr.w	r3, r2, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f47f ae9d 	bne.w	8004a78 <HAL_GPIO_Init+0x10>
  }
}
 8004d3e:	bf00      	nop
 8004d40:	bf00      	nop
 8004d42:	371c      	adds	r7, #28
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	40010000 	.word	0x40010000
 8004d54:	48000400 	.word	0x48000400
 8004d58:	48000800 	.word	0x48000800
 8004d5c:	48000c00 	.word	0x48000c00
 8004d60:	48001000 	.word	0x48001000
 8004d64:	48001400 	.word	0x48001400
 8004d68:	40010400 	.word	0x40010400

08004d6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	887b      	ldrh	r3, [r7, #2]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d84:	2301      	movs	r3, #1
 8004d86:	73fb      	strb	r3, [r7, #15]
 8004d88:	e001      	b.n	8004d8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	807b      	strh	r3, [r7, #2]
 8004da8:	4613      	mov	r3, r2
 8004daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004dac:	787b      	ldrb	r3, [r7, #1]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004db2:	887a      	ldrh	r2, [r7, #2]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004db8:	e002      	b.n	8004dc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004dba:	887a      	ldrh	r2, [r7, #2]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004dd6:	4b08      	ldr	r3, [pc, #32]	@ (8004df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dd8:	695a      	ldr	r2, [r3, #20]
 8004dda:	88fb      	ldrh	r3, [r7, #6]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d006      	beq.n	8004df0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004de2:	4a05      	ldr	r2, [pc, #20]	@ (8004df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004de4:	88fb      	ldrh	r3, [r7, #6]
 8004de6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004de8:	88fb      	ldrh	r3, [r7, #6]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 f806 	bl	8004dfc <HAL_GPIO_EXTI_Callback>
  }
}
 8004df0:	bf00      	nop
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	40010400 	.word	0x40010400

08004dfc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4603      	mov	r3, r0
 8004e04:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
	...

08004e14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d141      	bne.n	8004ea6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e22:	4b4b      	ldr	r3, [pc, #300]	@ (8004f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e2e:	d131      	bne.n	8004e94 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e30:	4b47      	ldr	r3, [pc, #284]	@ (8004f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e36:	4a46      	ldr	r2, [pc, #280]	@ (8004f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e40:	4b43      	ldr	r3, [pc, #268]	@ (8004f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e48:	4a41      	ldr	r2, [pc, #260]	@ (8004f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e50:	4b40      	ldr	r3, [pc, #256]	@ (8004f54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2232      	movs	r2, #50	@ 0x32
 8004e56:	fb02 f303 	mul.w	r3, r2, r3
 8004e5a:	4a3f      	ldr	r2, [pc, #252]	@ (8004f58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e60:	0c9b      	lsrs	r3, r3, #18
 8004e62:	3301      	adds	r3, #1
 8004e64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e66:	e002      	b.n	8004e6e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e6e:	4b38      	ldr	r3, [pc, #224]	@ (8004f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e7a:	d102      	bne.n	8004e82 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f2      	bne.n	8004e68 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e82:	4b33      	ldr	r3, [pc, #204]	@ (8004f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e8e:	d158      	bne.n	8004f42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e057      	b.n	8004f44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e94:	4b2e      	ldr	r3, [pc, #184]	@ (8004f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e9a:	4a2d      	ldr	r2, [pc, #180]	@ (8004f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ea0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ea4:	e04d      	b.n	8004f42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eac:	d141      	bne.n	8004f32 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004eae:	4b28      	ldr	r3, [pc, #160]	@ (8004f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004eb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eba:	d131      	bne.n	8004f20 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ebc:	4b24      	ldr	r3, [pc, #144]	@ (8004f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ec2:	4a23      	ldr	r2, [pc, #140]	@ (8004f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ec4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ec8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ecc:	4b20      	ldr	r3, [pc, #128]	@ (8004f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ed4:	4a1e      	ldr	r2, [pc, #120]	@ (8004f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004eda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004edc:	4b1d      	ldr	r3, [pc, #116]	@ (8004f54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2232      	movs	r2, #50	@ 0x32
 8004ee2:	fb02 f303 	mul.w	r3, r2, r3
 8004ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8004f58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eec:	0c9b      	lsrs	r3, r3, #18
 8004eee:	3301      	adds	r3, #1
 8004ef0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ef2:	e002      	b.n	8004efa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004efa:	4b15      	ldr	r3, [pc, #84]	@ (8004f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f06:	d102      	bne.n	8004f0e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f2      	bne.n	8004ef4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f0e:	4b10      	ldr	r3, [pc, #64]	@ (8004f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f1a:	d112      	bne.n	8004f42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e011      	b.n	8004f44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f20:	4b0b      	ldr	r3, [pc, #44]	@ (8004f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f26:	4a0a      	ldr	r2, [pc, #40]	@ (8004f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f30:	e007      	b.n	8004f42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f32:	4b07      	ldr	r3, [pc, #28]	@ (8004f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f3a:	4a05      	ldr	r2, [pc, #20]	@ (8004f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f40:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	40007000 	.word	0x40007000
 8004f54:	20000004 	.word	0x20000004
 8004f58:	431bde83 	.word	0x431bde83

08004f5c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004f60:	4b05      	ldr	r3, [pc, #20]	@ (8004f78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	4a04      	ldr	r2, [pc, #16]	@ (8004f78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f6a:	6093      	str	r3, [r2, #8]
}
 8004f6c:	bf00      	nop
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40007000 	.word	0x40007000

08004f7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e2fe      	b.n	800558c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d075      	beq.n	8005086 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f9a:	4b97      	ldr	r3, [pc, #604]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 030c 	and.w	r3, r3, #12
 8004fa2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fa4:	4b94      	ldr	r3, [pc, #592]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f003 0303 	and.w	r3, r3, #3
 8004fac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	2b0c      	cmp	r3, #12
 8004fb2:	d102      	bne.n	8004fba <HAL_RCC_OscConfig+0x3e>
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d002      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x44>
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d10b      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fc0:	4b8d      	ldr	r3, [pc, #564]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d05b      	beq.n	8005084 <HAL_RCC_OscConfig+0x108>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d157      	bne.n	8005084 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e2d9      	b.n	800558c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fe0:	d106      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x74>
 8004fe2:	4b85      	ldr	r3, [pc, #532]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a84      	ldr	r2, [pc, #528]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 8004fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	e01d      	b.n	800502c <HAL_RCC_OscConfig+0xb0>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ff8:	d10c      	bne.n	8005014 <HAL_RCC_OscConfig+0x98>
 8004ffa:	4b7f      	ldr	r3, [pc, #508]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a7e      	ldr	r2, [pc, #504]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 8005000:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	4b7c      	ldr	r3, [pc, #496]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a7b      	ldr	r2, [pc, #492]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 800500c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	e00b      	b.n	800502c <HAL_RCC_OscConfig+0xb0>
 8005014:	4b78      	ldr	r3, [pc, #480]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a77      	ldr	r2, [pc, #476]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 800501a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800501e:	6013      	str	r3, [r2, #0]
 8005020:	4b75      	ldr	r3, [pc, #468]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a74      	ldr	r2, [pc, #464]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 8005026:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800502a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d013      	beq.n	800505c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7fd f996 	bl	8002364 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800503c:	f7fd f992 	bl	8002364 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b64      	cmp	r3, #100	@ 0x64
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e29e      	b.n	800558c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800504e:	4b6a      	ldr	r3, [pc, #424]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f0      	beq.n	800503c <HAL_RCC_OscConfig+0xc0>
 800505a:	e014      	b.n	8005086 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505c:	f7fd f982 	bl	8002364 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005064:	f7fd f97e 	bl	8002364 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b64      	cmp	r3, #100	@ 0x64
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e28a      	b.n	800558c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005076:	4b60      	ldr	r3, [pc, #384]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f0      	bne.n	8005064 <HAL_RCC_OscConfig+0xe8>
 8005082:	e000      	b.n	8005086 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d075      	beq.n	800517e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005092:	4b59      	ldr	r3, [pc, #356]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 030c 	and.w	r3, r3, #12
 800509a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800509c:	4b56      	ldr	r3, [pc, #344]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f003 0303 	and.w	r3, r3, #3
 80050a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	2b0c      	cmp	r3, #12
 80050aa:	d102      	bne.n	80050b2 <HAL_RCC_OscConfig+0x136>
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d002      	beq.n	80050b8 <HAL_RCC_OscConfig+0x13c>
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d11f      	bne.n	80050f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050b8:	4b4f      	ldr	r3, [pc, #316]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d005      	beq.n	80050d0 <HAL_RCC_OscConfig+0x154>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e25d      	b.n	800558c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d0:	4b49      	ldr	r3, [pc, #292]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	061b      	lsls	r3, r3, #24
 80050de:	4946      	ldr	r1, [pc, #280]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80050e4:	4b45      	ldr	r3, [pc, #276]	@ (80051fc <HAL_RCC_OscConfig+0x280>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fc fe3b 	bl	8001d64 <HAL_InitTick>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d043      	beq.n	800517c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e249      	b.n	800558c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d023      	beq.n	8005148 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005100:	4b3d      	ldr	r3, [pc, #244]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a3c      	ldr	r2, [pc, #240]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 8005106:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800510a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510c:	f7fd f92a 	bl	8002364 <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005114:	f7fd f926 	bl	8002364 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e232      	b.n	800558c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005126:	4b34      	ldr	r3, [pc, #208]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f0      	beq.n	8005114 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005132:	4b31      	ldr	r3, [pc, #196]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	061b      	lsls	r3, r3, #24
 8005140:	492d      	ldr	r1, [pc, #180]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 8005142:	4313      	orrs	r3, r2
 8005144:	604b      	str	r3, [r1, #4]
 8005146:	e01a      	b.n	800517e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005148:	4b2b      	ldr	r3, [pc, #172]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a2a      	ldr	r2, [pc, #168]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 800514e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005154:	f7fd f906 	bl	8002364 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800515c:	f7fd f902 	bl	8002364 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e20e      	b.n	800558c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800516e:	4b22      	ldr	r3, [pc, #136]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f0      	bne.n	800515c <HAL_RCC_OscConfig+0x1e0>
 800517a:	e000      	b.n	800517e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800517c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0308 	and.w	r3, r3, #8
 8005186:	2b00      	cmp	r3, #0
 8005188:	d041      	beq.n	800520e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d01c      	beq.n	80051cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005192:	4b19      	ldr	r3, [pc, #100]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 8005194:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005198:	4a17      	ldr	r2, [pc, #92]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 800519a:	f043 0301 	orr.w	r3, r3, #1
 800519e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a2:	f7fd f8df 	bl	8002364 <HAL_GetTick>
 80051a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051a8:	e008      	b.n	80051bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051aa:	f7fd f8db 	bl	8002364 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e1e7      	b.n	800558c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051bc:	4b0e      	ldr	r3, [pc, #56]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 80051be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0ef      	beq.n	80051aa <HAL_RCC_OscConfig+0x22e>
 80051ca:	e020      	b.n	800520e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051cc:	4b0a      	ldr	r3, [pc, #40]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 80051ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051d2:	4a09      	ldr	r2, [pc, #36]	@ (80051f8 <HAL_RCC_OscConfig+0x27c>)
 80051d4:	f023 0301 	bic.w	r3, r3, #1
 80051d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051dc:	f7fd f8c2 	bl	8002364 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051e2:	e00d      	b.n	8005200 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051e4:	f7fd f8be 	bl	8002364 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d906      	bls.n	8005200 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e1ca      	b.n	800558c <HAL_RCC_OscConfig+0x610>
 80051f6:	bf00      	nop
 80051f8:	40021000 	.word	0x40021000
 80051fc:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005200:	4b8c      	ldr	r3, [pc, #560]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 8005202:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1ea      	bne.n	80051e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0304 	and.w	r3, r3, #4
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 80a6 	beq.w	8005368 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800521c:	2300      	movs	r3, #0
 800521e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005220:	4b84      	ldr	r3, [pc, #528]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 8005222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005224:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <HAL_RCC_OscConfig+0x2b4>
 800522c:	2301      	movs	r3, #1
 800522e:	e000      	b.n	8005232 <HAL_RCC_OscConfig+0x2b6>
 8005230:	2300      	movs	r3, #0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00d      	beq.n	8005252 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005236:	4b7f      	ldr	r3, [pc, #508]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 8005238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800523a:	4a7e      	ldr	r2, [pc, #504]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 800523c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005240:	6593      	str	r3, [r2, #88]	@ 0x58
 8005242:	4b7c      	ldr	r3, [pc, #496]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 8005244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800524e:	2301      	movs	r3, #1
 8005250:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005252:	4b79      	ldr	r3, [pc, #484]	@ (8005438 <HAL_RCC_OscConfig+0x4bc>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800525a:	2b00      	cmp	r3, #0
 800525c:	d118      	bne.n	8005290 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800525e:	4b76      	ldr	r3, [pc, #472]	@ (8005438 <HAL_RCC_OscConfig+0x4bc>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a75      	ldr	r2, [pc, #468]	@ (8005438 <HAL_RCC_OscConfig+0x4bc>)
 8005264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800526a:	f7fd f87b 	bl	8002364 <HAL_GetTick>
 800526e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005270:	e008      	b.n	8005284 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005272:	f7fd f877 	bl	8002364 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d901      	bls.n	8005284 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e183      	b.n	800558c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005284:	4b6c      	ldr	r3, [pc, #432]	@ (8005438 <HAL_RCC_OscConfig+0x4bc>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0f0      	beq.n	8005272 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d108      	bne.n	80052aa <HAL_RCC_OscConfig+0x32e>
 8005298:	4b66      	ldr	r3, [pc, #408]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800529e:	4a65      	ldr	r2, [pc, #404]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 80052a0:	f043 0301 	orr.w	r3, r3, #1
 80052a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052a8:	e024      	b.n	80052f4 <HAL_RCC_OscConfig+0x378>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	2b05      	cmp	r3, #5
 80052b0:	d110      	bne.n	80052d4 <HAL_RCC_OscConfig+0x358>
 80052b2:	4b60      	ldr	r3, [pc, #384]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 80052b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052b8:	4a5e      	ldr	r2, [pc, #376]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 80052ba:	f043 0304 	orr.w	r3, r3, #4
 80052be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052c2:	4b5c      	ldr	r3, [pc, #368]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 80052c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c8:	4a5a      	ldr	r2, [pc, #360]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 80052ca:	f043 0301 	orr.w	r3, r3, #1
 80052ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052d2:	e00f      	b.n	80052f4 <HAL_RCC_OscConfig+0x378>
 80052d4:	4b57      	ldr	r3, [pc, #348]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 80052d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052da:	4a56      	ldr	r2, [pc, #344]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 80052dc:	f023 0301 	bic.w	r3, r3, #1
 80052e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052e4:	4b53      	ldr	r3, [pc, #332]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 80052e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ea:	4a52      	ldr	r2, [pc, #328]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 80052ec:	f023 0304 	bic.w	r3, r3, #4
 80052f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d016      	beq.n	800532a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052fc:	f7fd f832 	bl	8002364 <HAL_GetTick>
 8005300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005302:	e00a      	b.n	800531a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005304:	f7fd f82e 	bl	8002364 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005312:	4293      	cmp	r3, r2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e138      	b.n	800558c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800531a:	4b46      	ldr	r3, [pc, #280]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 800531c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0ed      	beq.n	8005304 <HAL_RCC_OscConfig+0x388>
 8005328:	e015      	b.n	8005356 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532a:	f7fd f81b 	bl	8002364 <HAL_GetTick>
 800532e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005330:	e00a      	b.n	8005348 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005332:	f7fd f817 	bl	8002364 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005340:	4293      	cmp	r3, r2
 8005342:	d901      	bls.n	8005348 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e121      	b.n	800558c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005348:	4b3a      	ldr	r3, [pc, #232]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 800534a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1ed      	bne.n	8005332 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005356:	7ffb      	ldrb	r3, [r7, #31]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d105      	bne.n	8005368 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800535c:	4b35      	ldr	r3, [pc, #212]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 800535e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005360:	4a34      	ldr	r2, [pc, #208]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 8005362:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005366:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b00      	cmp	r3, #0
 8005372:	d03c      	beq.n	80053ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d01c      	beq.n	80053b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800537c:	4b2d      	ldr	r3, [pc, #180]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 800537e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005382:	4a2c      	ldr	r2, [pc, #176]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 8005384:	f043 0301 	orr.w	r3, r3, #1
 8005388:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800538c:	f7fc ffea 	bl	8002364 <HAL_GetTick>
 8005390:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005392:	e008      	b.n	80053a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005394:	f7fc ffe6 	bl	8002364 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e0f2      	b.n	800558c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053a6:	4b23      	ldr	r3, [pc, #140]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 80053a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0ef      	beq.n	8005394 <HAL_RCC_OscConfig+0x418>
 80053b4:	e01b      	b.n	80053ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 80053b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 80053be:	f023 0301 	bic.w	r3, r3, #1
 80053c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c6:	f7fc ffcd 	bl	8002364 <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053cc:	e008      	b.n	80053e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053ce:	f7fc ffc9 	bl	8002364 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d901      	bls.n	80053e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e0d5      	b.n	800558c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053e0:	4b14      	ldr	r3, [pc, #80]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 80053e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1ef      	bne.n	80053ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 80c9 	beq.w	800558a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f003 030c 	and.w	r3, r3, #12
 8005400:	2b0c      	cmp	r3, #12
 8005402:	f000 8083 	beq.w	800550c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d15e      	bne.n	80054cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800540e:	4b09      	ldr	r3, [pc, #36]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a08      	ldr	r2, [pc, #32]	@ (8005434 <HAL_RCC_OscConfig+0x4b8>)
 8005414:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541a:	f7fc ffa3 	bl	8002364 <HAL_GetTick>
 800541e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005420:	e00c      	b.n	800543c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005422:	f7fc ff9f 	bl	8002364 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d905      	bls.n	800543c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e0ab      	b.n	800558c <HAL_RCC_OscConfig+0x610>
 8005434:	40021000 	.word	0x40021000
 8005438:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800543c:	4b55      	ldr	r3, [pc, #340]	@ (8005594 <HAL_RCC_OscConfig+0x618>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1ec      	bne.n	8005422 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005448:	4b52      	ldr	r3, [pc, #328]	@ (8005594 <HAL_RCC_OscConfig+0x618>)
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	4b52      	ldr	r3, [pc, #328]	@ (8005598 <HAL_RCC_OscConfig+0x61c>)
 800544e:	4013      	ands	r3, r2
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	6a11      	ldr	r1, [r2, #32]
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005458:	3a01      	subs	r2, #1
 800545a:	0112      	lsls	r2, r2, #4
 800545c:	4311      	orrs	r1, r2
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005462:	0212      	lsls	r2, r2, #8
 8005464:	4311      	orrs	r1, r2
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800546a:	0852      	lsrs	r2, r2, #1
 800546c:	3a01      	subs	r2, #1
 800546e:	0552      	lsls	r2, r2, #21
 8005470:	4311      	orrs	r1, r2
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005476:	0852      	lsrs	r2, r2, #1
 8005478:	3a01      	subs	r2, #1
 800547a:	0652      	lsls	r2, r2, #25
 800547c:	4311      	orrs	r1, r2
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005482:	06d2      	lsls	r2, r2, #27
 8005484:	430a      	orrs	r2, r1
 8005486:	4943      	ldr	r1, [pc, #268]	@ (8005594 <HAL_RCC_OscConfig+0x618>)
 8005488:	4313      	orrs	r3, r2
 800548a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800548c:	4b41      	ldr	r3, [pc, #260]	@ (8005594 <HAL_RCC_OscConfig+0x618>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a40      	ldr	r2, [pc, #256]	@ (8005594 <HAL_RCC_OscConfig+0x618>)
 8005492:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005496:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005498:	4b3e      	ldr	r3, [pc, #248]	@ (8005594 <HAL_RCC_OscConfig+0x618>)
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	4a3d      	ldr	r2, [pc, #244]	@ (8005594 <HAL_RCC_OscConfig+0x618>)
 800549e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a4:	f7fc ff5e 	bl	8002364 <HAL_GetTick>
 80054a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054aa:	e008      	b.n	80054be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ac:	f7fc ff5a 	bl	8002364 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e066      	b.n	800558c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054be:	4b35      	ldr	r3, [pc, #212]	@ (8005594 <HAL_RCC_OscConfig+0x618>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0f0      	beq.n	80054ac <HAL_RCC_OscConfig+0x530>
 80054ca:	e05e      	b.n	800558a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054cc:	4b31      	ldr	r3, [pc, #196]	@ (8005594 <HAL_RCC_OscConfig+0x618>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a30      	ldr	r2, [pc, #192]	@ (8005594 <HAL_RCC_OscConfig+0x618>)
 80054d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d8:	f7fc ff44 	bl	8002364 <HAL_GetTick>
 80054dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054de:	e008      	b.n	80054f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e0:	f7fc ff40 	bl	8002364 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e04c      	b.n	800558c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054f2:	4b28      	ldr	r3, [pc, #160]	@ (8005594 <HAL_RCC_OscConfig+0x618>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1f0      	bne.n	80054e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80054fe:	4b25      	ldr	r3, [pc, #148]	@ (8005594 <HAL_RCC_OscConfig+0x618>)
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	4924      	ldr	r1, [pc, #144]	@ (8005594 <HAL_RCC_OscConfig+0x618>)
 8005504:	4b25      	ldr	r3, [pc, #148]	@ (800559c <HAL_RCC_OscConfig+0x620>)
 8005506:	4013      	ands	r3, r2
 8005508:	60cb      	str	r3, [r1, #12]
 800550a:	e03e      	b.n	800558a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e039      	b.n	800558c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005518:	4b1e      	ldr	r3, [pc, #120]	@ (8005594 <HAL_RCC_OscConfig+0x618>)
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f003 0203 	and.w	r2, r3, #3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	429a      	cmp	r2, r3
 800552a:	d12c      	bne.n	8005586 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005536:	3b01      	subs	r3, #1
 8005538:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800553a:	429a      	cmp	r2, r3
 800553c:	d123      	bne.n	8005586 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005548:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800554a:	429a      	cmp	r2, r3
 800554c:	d11b      	bne.n	8005586 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005558:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800555a:	429a      	cmp	r2, r3
 800555c:	d113      	bne.n	8005586 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005568:	085b      	lsrs	r3, r3, #1
 800556a:	3b01      	subs	r3, #1
 800556c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800556e:	429a      	cmp	r2, r3
 8005570:	d109      	bne.n	8005586 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800557c:	085b      	lsrs	r3, r3, #1
 800557e:	3b01      	subs	r3, #1
 8005580:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005582:	429a      	cmp	r2, r3
 8005584:	d001      	beq.n	800558a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e000      	b.n	800558c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3720      	adds	r7, #32
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40021000 	.word	0x40021000
 8005598:	019f800c 	.word	0x019f800c
 800559c:	feeefffc 	.word	0xfeeefffc

080055a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80055aa:	2300      	movs	r3, #0
 80055ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e11e      	b.n	80057f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055b8:	4b91      	ldr	r3, [pc, #580]	@ (8005800 <HAL_RCC_ClockConfig+0x260>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 030f 	and.w	r3, r3, #15
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d910      	bls.n	80055e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055c6:	4b8e      	ldr	r3, [pc, #568]	@ (8005800 <HAL_RCC_ClockConfig+0x260>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f023 020f 	bic.w	r2, r3, #15
 80055ce:	498c      	ldr	r1, [pc, #560]	@ (8005800 <HAL_RCC_ClockConfig+0x260>)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d6:	4b8a      	ldr	r3, [pc, #552]	@ (8005800 <HAL_RCC_ClockConfig+0x260>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 030f 	and.w	r3, r3, #15
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d001      	beq.n	80055e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e106      	b.n	80057f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d073      	beq.n	80056dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	2b03      	cmp	r3, #3
 80055fa:	d129      	bne.n	8005650 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055fc:	4b81      	ldr	r3, [pc, #516]	@ (8005804 <HAL_RCC_ClockConfig+0x264>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e0f4      	b.n	80057f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800560c:	f000 f9d0 	bl	80059b0 <RCC_GetSysClockFreqFromPLLSource>
 8005610:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	4a7c      	ldr	r2, [pc, #496]	@ (8005808 <HAL_RCC_ClockConfig+0x268>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d93f      	bls.n	800569a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800561a:	4b7a      	ldr	r3, [pc, #488]	@ (8005804 <HAL_RCC_ClockConfig+0x264>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d009      	beq.n	800563a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800562e:	2b00      	cmp	r3, #0
 8005630:	d033      	beq.n	800569a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005636:	2b00      	cmp	r3, #0
 8005638:	d12f      	bne.n	800569a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800563a:	4b72      	ldr	r3, [pc, #456]	@ (8005804 <HAL_RCC_ClockConfig+0x264>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005642:	4a70      	ldr	r2, [pc, #448]	@ (8005804 <HAL_RCC_ClockConfig+0x264>)
 8005644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005648:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800564a:	2380      	movs	r3, #128	@ 0x80
 800564c:	617b      	str	r3, [r7, #20]
 800564e:	e024      	b.n	800569a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	2b02      	cmp	r3, #2
 8005656:	d107      	bne.n	8005668 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005658:	4b6a      	ldr	r3, [pc, #424]	@ (8005804 <HAL_RCC_ClockConfig+0x264>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d109      	bne.n	8005678 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e0c6      	b.n	80057f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005668:	4b66      	ldr	r3, [pc, #408]	@ (8005804 <HAL_RCC_ClockConfig+0x264>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e0be      	b.n	80057f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005678:	f000 f8ce 	bl	8005818 <HAL_RCC_GetSysClockFreq>
 800567c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	4a61      	ldr	r2, [pc, #388]	@ (8005808 <HAL_RCC_ClockConfig+0x268>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d909      	bls.n	800569a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005686:	4b5f      	ldr	r3, [pc, #380]	@ (8005804 <HAL_RCC_ClockConfig+0x264>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800568e:	4a5d      	ldr	r2, [pc, #372]	@ (8005804 <HAL_RCC_ClockConfig+0x264>)
 8005690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005694:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005696:	2380      	movs	r3, #128	@ 0x80
 8005698:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800569a:	4b5a      	ldr	r3, [pc, #360]	@ (8005804 <HAL_RCC_ClockConfig+0x264>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f023 0203 	bic.w	r2, r3, #3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	4957      	ldr	r1, [pc, #348]	@ (8005804 <HAL_RCC_ClockConfig+0x264>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ac:	f7fc fe5a 	bl	8002364 <HAL_GetTick>
 80056b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056b2:	e00a      	b.n	80056ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056b4:	f7fc fe56 	bl	8002364 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e095      	b.n	80057f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ca:	4b4e      	ldr	r3, [pc, #312]	@ (8005804 <HAL_RCC_ClockConfig+0x264>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 020c 	and.w	r2, r3, #12
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	429a      	cmp	r2, r3
 80056da:	d1eb      	bne.n	80056b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d023      	beq.n	8005730 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d005      	beq.n	8005700 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056f4:	4b43      	ldr	r3, [pc, #268]	@ (8005804 <HAL_RCC_ClockConfig+0x264>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	4a42      	ldr	r2, [pc, #264]	@ (8005804 <HAL_RCC_ClockConfig+0x264>)
 80056fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80056fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0308 	and.w	r3, r3, #8
 8005708:	2b00      	cmp	r3, #0
 800570a:	d007      	beq.n	800571c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800570c:	4b3d      	ldr	r3, [pc, #244]	@ (8005804 <HAL_RCC_ClockConfig+0x264>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005714:	4a3b      	ldr	r2, [pc, #236]	@ (8005804 <HAL_RCC_ClockConfig+0x264>)
 8005716:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800571a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800571c:	4b39      	ldr	r3, [pc, #228]	@ (8005804 <HAL_RCC_ClockConfig+0x264>)
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	4936      	ldr	r1, [pc, #216]	@ (8005804 <HAL_RCC_ClockConfig+0x264>)
 800572a:	4313      	orrs	r3, r2
 800572c:	608b      	str	r3, [r1, #8]
 800572e:	e008      	b.n	8005742 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	2b80      	cmp	r3, #128	@ 0x80
 8005734:	d105      	bne.n	8005742 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005736:	4b33      	ldr	r3, [pc, #204]	@ (8005804 <HAL_RCC_ClockConfig+0x264>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	4a32      	ldr	r2, [pc, #200]	@ (8005804 <HAL_RCC_ClockConfig+0x264>)
 800573c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005740:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005742:	4b2f      	ldr	r3, [pc, #188]	@ (8005800 <HAL_RCC_ClockConfig+0x260>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 030f 	and.w	r3, r3, #15
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	429a      	cmp	r2, r3
 800574e:	d21d      	bcs.n	800578c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005750:	4b2b      	ldr	r3, [pc, #172]	@ (8005800 <HAL_RCC_ClockConfig+0x260>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f023 020f 	bic.w	r2, r3, #15
 8005758:	4929      	ldr	r1, [pc, #164]	@ (8005800 <HAL_RCC_ClockConfig+0x260>)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	4313      	orrs	r3, r2
 800575e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005760:	f7fc fe00 	bl	8002364 <HAL_GetTick>
 8005764:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005766:	e00a      	b.n	800577e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005768:	f7fc fdfc 	bl	8002364 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005776:	4293      	cmp	r3, r2
 8005778:	d901      	bls.n	800577e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e03b      	b.n	80057f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800577e:	4b20      	ldr	r3, [pc, #128]	@ (8005800 <HAL_RCC_ClockConfig+0x260>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 030f 	and.w	r3, r3, #15
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	429a      	cmp	r2, r3
 800578a:	d1ed      	bne.n	8005768 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b00      	cmp	r3, #0
 8005796:	d008      	beq.n	80057aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005798:	4b1a      	ldr	r3, [pc, #104]	@ (8005804 <HAL_RCC_ClockConfig+0x264>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	4917      	ldr	r1, [pc, #92]	@ (8005804 <HAL_RCC_ClockConfig+0x264>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d009      	beq.n	80057ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057b6:	4b13      	ldr	r3, [pc, #76]	@ (8005804 <HAL_RCC_ClockConfig+0x264>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	490f      	ldr	r1, [pc, #60]	@ (8005804 <HAL_RCC_ClockConfig+0x264>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057ca:	f000 f825 	bl	8005818 <HAL_RCC_GetSysClockFreq>
 80057ce:	4602      	mov	r2, r0
 80057d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005804 <HAL_RCC_ClockConfig+0x264>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	091b      	lsrs	r3, r3, #4
 80057d6:	f003 030f 	and.w	r3, r3, #15
 80057da:	490c      	ldr	r1, [pc, #48]	@ (800580c <HAL_RCC_ClockConfig+0x26c>)
 80057dc:	5ccb      	ldrb	r3, [r1, r3]
 80057de:	f003 031f 	and.w	r3, r3, #31
 80057e2:	fa22 f303 	lsr.w	r3, r2, r3
 80057e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005810 <HAL_RCC_ClockConfig+0x270>)
 80057e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80057ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005814 <HAL_RCC_ClockConfig+0x274>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fc fab8 	bl	8001d64 <HAL_InitTick>
 80057f4:	4603      	mov	r3, r0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	40022000 	.word	0x40022000
 8005804:	40021000 	.word	0x40021000
 8005808:	04c4b400 	.word	0x04c4b400
 800580c:	08019974 	.word	0x08019974
 8005810:	20000004 	.word	0x20000004
 8005814:	20000008 	.word	0x20000008

08005818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800581e:	4b2c      	ldr	r3, [pc, #176]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 030c 	and.w	r3, r3, #12
 8005826:	2b04      	cmp	r3, #4
 8005828:	d102      	bne.n	8005830 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800582a:	4b2a      	ldr	r3, [pc, #168]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800582c:	613b      	str	r3, [r7, #16]
 800582e:	e047      	b.n	80058c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005830:	4b27      	ldr	r3, [pc, #156]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f003 030c 	and.w	r3, r3, #12
 8005838:	2b08      	cmp	r3, #8
 800583a:	d102      	bne.n	8005842 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800583c:	4b26      	ldr	r3, [pc, #152]	@ (80058d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800583e:	613b      	str	r3, [r7, #16]
 8005840:	e03e      	b.n	80058c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005842:	4b23      	ldr	r3, [pc, #140]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f003 030c 	and.w	r3, r3, #12
 800584a:	2b0c      	cmp	r3, #12
 800584c:	d136      	bne.n	80058bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800584e:	4b20      	ldr	r3, [pc, #128]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005858:	4b1d      	ldr	r3, [pc, #116]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	091b      	lsrs	r3, r3, #4
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	3301      	adds	r3, #1
 8005864:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2b03      	cmp	r3, #3
 800586a:	d10c      	bne.n	8005886 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800586c:	4a1a      	ldr	r2, [pc, #104]	@ (80058d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	fbb2 f3f3 	udiv	r3, r2, r3
 8005874:	4a16      	ldr	r2, [pc, #88]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005876:	68d2      	ldr	r2, [r2, #12]
 8005878:	0a12      	lsrs	r2, r2, #8
 800587a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800587e:	fb02 f303 	mul.w	r3, r2, r3
 8005882:	617b      	str	r3, [r7, #20]
      break;
 8005884:	e00c      	b.n	80058a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005886:	4a13      	ldr	r2, [pc, #76]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	fbb2 f3f3 	udiv	r3, r2, r3
 800588e:	4a10      	ldr	r2, [pc, #64]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005890:	68d2      	ldr	r2, [r2, #12]
 8005892:	0a12      	lsrs	r2, r2, #8
 8005894:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005898:	fb02 f303 	mul.w	r3, r2, r3
 800589c:	617b      	str	r3, [r7, #20]
      break;
 800589e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058a0:	4b0b      	ldr	r3, [pc, #44]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	0e5b      	lsrs	r3, r3, #25
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	3301      	adds	r3, #1
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b8:	613b      	str	r3, [r7, #16]
 80058ba:	e001      	b.n	80058c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80058c0:	693b      	ldr	r3, [r7, #16]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	40021000 	.word	0x40021000
 80058d4:	00f42400 	.word	0x00f42400
 80058d8:	016e3600 	.word	0x016e3600

080058dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058e0:	4b03      	ldr	r3, [pc, #12]	@ (80058f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80058e2:	681b      	ldr	r3, [r3, #0]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	20000004 	.word	0x20000004

080058f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80058f8:	f7ff fff0 	bl	80058dc <HAL_RCC_GetHCLKFreq>
 80058fc:	4602      	mov	r2, r0
 80058fe:	4b06      	ldr	r3, [pc, #24]	@ (8005918 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	0a1b      	lsrs	r3, r3, #8
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	4904      	ldr	r1, [pc, #16]	@ (800591c <HAL_RCC_GetPCLK1Freq+0x28>)
 800590a:	5ccb      	ldrb	r3, [r1, r3]
 800590c:	f003 031f 	and.w	r3, r3, #31
 8005910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005914:	4618      	mov	r0, r3
 8005916:	bd80      	pop	{r7, pc}
 8005918:	40021000 	.word	0x40021000
 800591c:	08019984 	.word	0x08019984

08005920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005924:	f7ff ffda 	bl	80058dc <HAL_RCC_GetHCLKFreq>
 8005928:	4602      	mov	r2, r0
 800592a:	4b06      	ldr	r3, [pc, #24]	@ (8005944 <HAL_RCC_GetPCLK2Freq+0x24>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	0adb      	lsrs	r3, r3, #11
 8005930:	f003 0307 	and.w	r3, r3, #7
 8005934:	4904      	ldr	r1, [pc, #16]	@ (8005948 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005936:	5ccb      	ldrb	r3, [r1, r3]
 8005938:	f003 031f 	and.w	r3, r3, #31
 800593c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005940:	4618      	mov	r0, r3
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40021000 	.word	0x40021000
 8005948:	08019984 	.word	0x08019984

0800594c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	220f      	movs	r2, #15
 800595a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800595c:	4b12      	ldr	r3, [pc, #72]	@ (80059a8 <HAL_RCC_GetClockConfig+0x5c>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 0203 	and.w	r2, r3, #3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005968:	4b0f      	ldr	r3, [pc, #60]	@ (80059a8 <HAL_RCC_GetClockConfig+0x5c>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005974:	4b0c      	ldr	r3, [pc, #48]	@ (80059a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005980:	4b09      	ldr	r3, [pc, #36]	@ (80059a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	08db      	lsrs	r3, r3, #3
 8005986:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800598e:	4b07      	ldr	r3, [pc, #28]	@ (80059ac <HAL_RCC_GetClockConfig+0x60>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 020f 	and.w	r2, r3, #15
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	601a      	str	r2, [r3, #0]
}
 800599a:	bf00      	nop
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	40021000 	.word	0x40021000
 80059ac:	40022000 	.word	0x40022000

080059b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059b6:	4b1e      	ldr	r3, [pc, #120]	@ (8005a30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059c0:	4b1b      	ldr	r3, [pc, #108]	@ (8005a30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	091b      	lsrs	r3, r3, #4
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	3301      	adds	r3, #1
 80059cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	2b03      	cmp	r3, #3
 80059d2:	d10c      	bne.n	80059ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059d4:	4a17      	ldr	r2, [pc, #92]	@ (8005a34 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059dc:	4a14      	ldr	r2, [pc, #80]	@ (8005a30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059de:	68d2      	ldr	r2, [r2, #12]
 80059e0:	0a12      	lsrs	r2, r2, #8
 80059e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80059e6:	fb02 f303 	mul.w	r3, r2, r3
 80059ea:	617b      	str	r3, [r7, #20]
    break;
 80059ec:	e00c      	b.n	8005a08 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059ee:	4a12      	ldr	r2, [pc, #72]	@ (8005a38 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f6:	4a0e      	ldr	r2, [pc, #56]	@ (8005a30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059f8:	68d2      	ldr	r2, [r2, #12]
 80059fa:	0a12      	lsrs	r2, r2, #8
 80059fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a00:	fb02 f303 	mul.w	r3, r2, r3
 8005a04:	617b      	str	r3, [r7, #20]
    break;
 8005a06:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a08:	4b09      	ldr	r3, [pc, #36]	@ (8005a30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	0e5b      	lsrs	r3, r3, #25
 8005a0e:	f003 0303 	and.w	r3, r3, #3
 8005a12:	3301      	adds	r3, #1
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a20:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005a22:	687b      	ldr	r3, [r7, #4]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	371c      	adds	r7, #28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	40021000 	.word	0x40021000
 8005a34:	016e3600 	.word	0x016e3600
 8005a38:	00f42400 	.word	0x00f42400

08005a3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a44:	2300      	movs	r3, #0
 8005a46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a48:	2300      	movs	r3, #0
 8005a4a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 8098 	beq.w	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a5e:	4b43      	ldr	r3, [pc, #268]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10d      	bne.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a6a:	4b40      	ldr	r3, [pc, #256]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a6e:	4a3f      	ldr	r2, [pc, #252]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a74:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a76:	4b3d      	ldr	r3, [pc, #244]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a7e:	60bb      	str	r3, [r7, #8]
 8005a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a82:	2301      	movs	r3, #1
 8005a84:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a86:	4b3a      	ldr	r3, [pc, #232]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a39      	ldr	r2, [pc, #228]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a92:	f7fc fc67 	bl	8002364 <HAL_GetTick>
 8005a96:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a98:	e009      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a9a:	f7fc fc63 	bl	8002364 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d902      	bls.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	74fb      	strb	r3, [r7, #19]
        break;
 8005aac:	e005      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005aae:	4b30      	ldr	r3, [pc, #192]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0ef      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005aba:	7cfb      	ldrb	r3, [r7, #19]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d159      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ac6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d01e      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d019      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005adc:	4b23      	ldr	r3, [pc, #140]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ae2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ae6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ae8:	4b20      	ldr	r3, [pc, #128]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aee:	4a1f      	ldr	r2, [pc, #124]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005af4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005af8:	4b1c      	ldr	r3, [pc, #112]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005afe:	4a1b      	ldr	r2, [pc, #108]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b08:	4a18      	ldr	r2, [pc, #96]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d016      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b1a:	f7fc fc23 	bl	8002364 <HAL_GetTick>
 8005b1e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b20:	e00b      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b22:	f7fc fc1f 	bl	8002364 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d902      	bls.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	74fb      	strb	r3, [r7, #19]
            break;
 8005b38:	e006      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0ec      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005b48:	7cfb      	ldrb	r3, [r7, #19]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10b      	bne.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b4e:	4b07      	ldr	r3, [pc, #28]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b5c:	4903      	ldr	r1, [pc, #12]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005b64:	e008      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b66:	7cfb      	ldrb	r3, [r7, #19]
 8005b68:	74bb      	strb	r3, [r7, #18]
 8005b6a:	e005      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005b6c:	40021000 	.word	0x40021000
 8005b70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b74:	7cfb      	ldrb	r3, [r7, #19]
 8005b76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b78:	7c7b      	ldrb	r3, [r7, #17]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d105      	bne.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b7e:	4ba7      	ldr	r3, [pc, #668]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b82:	4aa6      	ldr	r2, [pc, #664]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b88:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00a      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b96:	4ba1      	ldr	r3, [pc, #644]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9c:	f023 0203 	bic.w	r2, r3, #3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	499d      	ldr	r1, [pc, #628]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00a      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bb8:	4b98      	ldr	r3, [pc, #608]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bbe:	f023 020c 	bic.w	r2, r3, #12
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	4995      	ldr	r1, [pc, #596]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0304 	and.w	r3, r3, #4
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00a      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005bda:	4b90      	ldr	r3, [pc, #576]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	498c      	ldr	r1, [pc, #560]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0308 	and.w	r3, r3, #8
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00a      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005bfc:	4b87      	ldr	r3, [pc, #540]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c02:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	4984      	ldr	r1, [pc, #528]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0310 	and.w	r3, r3, #16
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00a      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c1e:	4b7f      	ldr	r3, [pc, #508]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	497b      	ldr	r1, [pc, #492]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0320 	and.w	r3, r3, #32
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00a      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c40:	4b76      	ldr	r3, [pc, #472]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c46:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	4973      	ldr	r1, [pc, #460]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00a      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c62:	4b6e      	ldr	r3, [pc, #440]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c68:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	496a      	ldr	r1, [pc, #424]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00a      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c84:	4b65      	ldr	r3, [pc, #404]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c8a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	4962      	ldr	r1, [pc, #392]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00a      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ca6:	4b5d      	ldr	r3, [pc, #372]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb4:	4959      	ldr	r1, [pc, #356]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00a      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005cc8:	4b54      	ldr	r3, [pc, #336]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cce:	f023 0203 	bic.w	r2, r3, #3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd6:	4951      	ldr	r1, [pc, #324]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cea:	4b4c      	ldr	r3, [pc, #304]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf8:	4948      	ldr	r1, [pc, #288]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d015      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d0c:	4b43      	ldr	r3, [pc, #268]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d1a:	4940      	ldr	r1, [pc, #256]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d2a:	d105      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d2c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	4a3a      	ldr	r2, [pc, #232]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d36:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d015      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d44:	4b35      	ldr	r3, [pc, #212]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d4a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d52:	4932      	ldr	r1, [pc, #200]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d62:	d105      	bne.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d64:	4b2d      	ldr	r3, [pc, #180]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	4a2c      	ldr	r2, [pc, #176]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d6e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d015      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d7c:	4b27      	ldr	r3, [pc, #156]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d82:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8a:	4924      	ldr	r1, [pc, #144]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d9a:	d105      	bne.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	4a1e      	ldr	r2, [pc, #120]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005da2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005da6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d015      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005db4:	4b19      	ldr	r3, [pc, #100]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc2:	4916      	ldr	r1, [pc, #88]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dd2:	d105      	bne.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dd4:	4b11      	ldr	r3, [pc, #68]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	4a10      	ldr	r2, [pc, #64]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dde:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d019      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005dec:	4b0b      	ldr	r3, [pc, #44]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005df2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfa:	4908      	ldr	r1, [pc, #32]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e0a:	d109      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e0c:	4b03      	ldr	r3, [pc, #12]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	4a02      	ldr	r2, [pc, #8]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e16:	60d3      	str	r3, [r2, #12]
 8005e18:	e002      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005e1a:	bf00      	nop
 8005e1c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d015      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e2c:	4b29      	ldr	r3, [pc, #164]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e32:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e3a:	4926      	ldr	r1, [pc, #152]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e4a:	d105      	bne.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e4c:	4b21      	ldr	r3, [pc, #132]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	4a20      	ldr	r2, [pc, #128]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e56:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d015      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005e64:	4b1b      	ldr	r3, [pc, #108]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e6a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e72:	4918      	ldr	r1, [pc, #96]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e82:	d105      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e84:	4b13      	ldr	r3, [pc, #76]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	4a12      	ldr	r2, [pc, #72]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e8e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d015      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ea2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eaa:	490a      	ldr	r1, [pc, #40]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005eba:	d105      	bne.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ebc:	4b05      	ldr	r3, [pc, #20]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	4a04      	ldr	r2, [pc, #16]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ec2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ec6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005ec8:	7cbb      	ldrb	r3, [r7, #18]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3718      	adds	r7, #24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	40021000 	.word	0x40021000

08005ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e049      	b.n	8005f7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d106      	bne.n	8005f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f841 	bl	8005f86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	3304      	adds	r3, #4
 8005f14:	4619      	mov	r1, r3
 8005f16:	4610      	mov	r0, r2
 8005f18:	f000 fa30 	bl	800637c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
	...

08005f9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d001      	beq.n	8005fb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e054      	b.n	800605e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 0201 	orr.w	r2, r2, #1
 8005fca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a26      	ldr	r2, [pc, #152]	@ (800606c <HAL_TIM_Base_Start_IT+0xd0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d022      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x80>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fde:	d01d      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x80>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a22      	ldr	r2, [pc, #136]	@ (8006070 <HAL_TIM_Base_Start_IT+0xd4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d018      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x80>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a21      	ldr	r2, [pc, #132]	@ (8006074 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d013      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x80>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a1f      	ldr	r2, [pc, #124]	@ (8006078 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d00e      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x80>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a1e      	ldr	r2, [pc, #120]	@ (800607c <HAL_TIM_Base_Start_IT+0xe0>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d009      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x80>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a1c      	ldr	r2, [pc, #112]	@ (8006080 <HAL_TIM_Base_Start_IT+0xe4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d004      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x80>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a1b      	ldr	r2, [pc, #108]	@ (8006084 <HAL_TIM_Base_Start_IT+0xe8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d115      	bne.n	8006048 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689a      	ldr	r2, [r3, #8]
 8006022:	4b19      	ldr	r3, [pc, #100]	@ (8006088 <HAL_TIM_Base_Start_IT+0xec>)
 8006024:	4013      	ands	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2b06      	cmp	r3, #6
 800602c:	d015      	beq.n	800605a <HAL_TIM_Base_Start_IT+0xbe>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006034:	d011      	beq.n	800605a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f042 0201 	orr.w	r2, r2, #1
 8006044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006046:	e008      	b.n	800605a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f042 0201 	orr.w	r2, r2, #1
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	e000      	b.n	800605c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800605a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	40012c00 	.word	0x40012c00
 8006070:	40000400 	.word	0x40000400
 8006074:	40000800 	.word	0x40000800
 8006078:	40000c00 	.word	0x40000c00
 800607c:	40013400 	.word	0x40013400
 8006080:	40014000 	.word	0x40014000
 8006084:	40015000 	.word	0x40015000
 8006088:	00010007 	.word	0x00010007

0800608c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d020      	beq.n	80060f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d01b      	beq.n	80060f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f06f 0202 	mvn.w	r2, #2
 80060c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	f003 0303 	and.w	r3, r3, #3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f931 	bl	800633e <HAL_TIM_IC_CaptureCallback>
 80060dc:	e005      	b.n	80060ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f923 	bl	800632a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f934 	bl	8006352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	f003 0304 	and.w	r3, r3, #4
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d020      	beq.n	800613c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b00      	cmp	r3, #0
 8006102:	d01b      	beq.n	800613c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f06f 0204 	mvn.w	r2, #4
 800610c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2202      	movs	r2, #2
 8006112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f90b 	bl	800633e <HAL_TIM_IC_CaptureCallback>
 8006128:	e005      	b.n	8006136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f8fd 	bl	800632a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f90e 	bl	8006352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f003 0308 	and.w	r3, r3, #8
 8006142:	2b00      	cmp	r3, #0
 8006144:	d020      	beq.n	8006188 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f003 0308 	and.w	r3, r3, #8
 800614c:	2b00      	cmp	r3, #0
 800614e:	d01b      	beq.n	8006188 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f06f 0208 	mvn.w	r2, #8
 8006158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2204      	movs	r2, #4
 800615e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	f003 0303 	and.w	r3, r3, #3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d003      	beq.n	8006176 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f8e5 	bl	800633e <HAL_TIM_IC_CaptureCallback>
 8006174:	e005      	b.n	8006182 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f8d7 	bl	800632a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f8e8 	bl	8006352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	f003 0310 	and.w	r3, r3, #16
 800618e:	2b00      	cmp	r3, #0
 8006190:	d020      	beq.n	80061d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f003 0310 	and.w	r3, r3, #16
 8006198:	2b00      	cmp	r3, #0
 800619a:	d01b      	beq.n	80061d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f06f 0210 	mvn.w	r2, #16
 80061a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2208      	movs	r2, #8
 80061aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f8bf 	bl	800633e <HAL_TIM_IC_CaptureCallback>
 80061c0:	e005      	b.n	80061ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f8b1 	bl	800632a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f8c2 	bl	8006352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00c      	beq.n	80061f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d007      	beq.n	80061f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f06f 0201 	mvn.w	r2, #1
 80061f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7fb fc0e 	bl	8001a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d104      	bne.n	800620c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00c      	beq.n	8006226 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006212:	2b00      	cmp	r3, #0
 8006214:	d007      	beq.n	8006226 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800621e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f969 	bl	80064f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00c      	beq.n	800624a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006236:	2b00      	cmp	r3, #0
 8006238:	d007      	beq.n	800624a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f961 	bl	800650c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00c      	beq.n	800626e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800625a:	2b00      	cmp	r3, #0
 800625c:	d007      	beq.n	800626e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 f87c 	bl	8006366 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f003 0320 	and.w	r3, r3, #32
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00c      	beq.n	8006292 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f003 0320 	and.w	r3, r3, #32
 800627e:	2b00      	cmp	r3, #0
 8006280:	d007      	beq.n	8006292 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f06f 0220 	mvn.w	r2, #32
 800628a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f929 	bl	80064e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00c      	beq.n	80062b6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d007      	beq.n	80062b6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80062ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 f935 	bl	8006520 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00c      	beq.n	80062da <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d007      	beq.n	80062da <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80062d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f92d 	bl	8006534 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00c      	beq.n	80062fe <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d007      	beq.n	80062fe <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80062f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f925 	bl	8006548 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00c      	beq.n	8006322 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d007      	beq.n	8006322 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800631a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f91d 	bl	800655c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006322:	bf00      	nop
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800632a:	b480      	push	{r7}
 800632c:	b083      	sub	sp, #12
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006332:	bf00      	nop
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800633e:	b480      	push	{r7}
 8006340:	b083      	sub	sp, #12
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006346:	bf00      	nop
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006352:	b480      	push	{r7}
 8006354:	b083      	sub	sp, #12
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800636e:	bf00      	nop
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
	...

0800637c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a4c      	ldr	r2, [pc, #304]	@ (80064c0 <TIM_Base_SetConfig+0x144>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d017      	beq.n	80063c4 <TIM_Base_SetConfig+0x48>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800639a:	d013      	beq.n	80063c4 <TIM_Base_SetConfig+0x48>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a49      	ldr	r2, [pc, #292]	@ (80064c4 <TIM_Base_SetConfig+0x148>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d00f      	beq.n	80063c4 <TIM_Base_SetConfig+0x48>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a48      	ldr	r2, [pc, #288]	@ (80064c8 <TIM_Base_SetConfig+0x14c>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d00b      	beq.n	80063c4 <TIM_Base_SetConfig+0x48>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a47      	ldr	r2, [pc, #284]	@ (80064cc <TIM_Base_SetConfig+0x150>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d007      	beq.n	80063c4 <TIM_Base_SetConfig+0x48>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a46      	ldr	r2, [pc, #280]	@ (80064d0 <TIM_Base_SetConfig+0x154>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d003      	beq.n	80063c4 <TIM_Base_SetConfig+0x48>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a45      	ldr	r2, [pc, #276]	@ (80064d4 <TIM_Base_SetConfig+0x158>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d108      	bne.n	80063d6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a39      	ldr	r2, [pc, #228]	@ (80064c0 <TIM_Base_SetConfig+0x144>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d023      	beq.n	8006426 <TIM_Base_SetConfig+0xaa>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063e4:	d01f      	beq.n	8006426 <TIM_Base_SetConfig+0xaa>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a36      	ldr	r2, [pc, #216]	@ (80064c4 <TIM_Base_SetConfig+0x148>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d01b      	beq.n	8006426 <TIM_Base_SetConfig+0xaa>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a35      	ldr	r2, [pc, #212]	@ (80064c8 <TIM_Base_SetConfig+0x14c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d017      	beq.n	8006426 <TIM_Base_SetConfig+0xaa>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a34      	ldr	r2, [pc, #208]	@ (80064cc <TIM_Base_SetConfig+0x150>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d013      	beq.n	8006426 <TIM_Base_SetConfig+0xaa>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a33      	ldr	r2, [pc, #204]	@ (80064d0 <TIM_Base_SetConfig+0x154>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00f      	beq.n	8006426 <TIM_Base_SetConfig+0xaa>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a33      	ldr	r2, [pc, #204]	@ (80064d8 <TIM_Base_SetConfig+0x15c>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d00b      	beq.n	8006426 <TIM_Base_SetConfig+0xaa>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a32      	ldr	r2, [pc, #200]	@ (80064dc <TIM_Base_SetConfig+0x160>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d007      	beq.n	8006426 <TIM_Base_SetConfig+0xaa>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a31      	ldr	r2, [pc, #196]	@ (80064e0 <TIM_Base_SetConfig+0x164>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d003      	beq.n	8006426 <TIM_Base_SetConfig+0xaa>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a2c      	ldr	r2, [pc, #176]	@ (80064d4 <TIM_Base_SetConfig+0x158>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d108      	bne.n	8006438 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800642c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a18      	ldr	r2, [pc, #96]	@ (80064c0 <TIM_Base_SetConfig+0x144>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d013      	beq.n	800648c <TIM_Base_SetConfig+0x110>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a1a      	ldr	r2, [pc, #104]	@ (80064d0 <TIM_Base_SetConfig+0x154>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d00f      	beq.n	800648c <TIM_Base_SetConfig+0x110>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a1a      	ldr	r2, [pc, #104]	@ (80064d8 <TIM_Base_SetConfig+0x15c>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d00b      	beq.n	800648c <TIM_Base_SetConfig+0x110>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a19      	ldr	r2, [pc, #100]	@ (80064dc <TIM_Base_SetConfig+0x160>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d007      	beq.n	800648c <TIM_Base_SetConfig+0x110>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a18      	ldr	r2, [pc, #96]	@ (80064e0 <TIM_Base_SetConfig+0x164>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d003      	beq.n	800648c <TIM_Base_SetConfig+0x110>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a13      	ldr	r2, [pc, #76]	@ (80064d4 <TIM_Base_SetConfig+0x158>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d103      	bne.n	8006494 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	691a      	ldr	r2, [r3, #16]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d105      	bne.n	80064b2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	f023 0201 	bic.w	r2, r3, #1
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	611a      	str	r2, [r3, #16]
  }
}
 80064b2:	bf00      	nop
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	40012c00 	.word	0x40012c00
 80064c4:	40000400 	.word	0x40000400
 80064c8:	40000800 	.word	0x40000800
 80064cc:	40000c00 	.word	0x40000c00
 80064d0:	40013400 	.word	0x40013400
 80064d4:	40015000 	.word	0x40015000
 80064d8:	40014000 	.word	0x40014000
 80064dc:	40014400 	.word	0x40014400
 80064e0:	40014800 	.word	0x40014800

080064e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e042      	b.n	8006608 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006588:	2b00      	cmp	r3, #0
 800658a:	d106      	bne.n	800659a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7fb fdd3 	bl	8002140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2224      	movs	r2, #36	@ 0x24
 800659e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 0201 	bic.w	r2, r2, #1
 80065b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d002      	beq.n	80065c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f001 f806 	bl	80075cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fd07 	bl	8006fd4 <UART_SetConfig>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d101      	bne.n	80065d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e01b      	b.n	8006608 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	689a      	ldr	r2, [r3, #8]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80065ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f042 0201 	orr.w	r2, r2, #1
 80065fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f001 f885 	bl	8007710 <UART_CheckIdleState>
 8006606:	4603      	mov	r3, r0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b08a      	sub	sp, #40	@ 0x28
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	4613      	mov	r3, r2
 800661c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006624:	2b20      	cmp	r3, #32
 8006626:	d167      	bne.n	80066f8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <HAL_UART_Transmit_DMA+0x24>
 800662e:	88fb      	ldrh	r3, [r7, #6]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e060      	b.n	80066fa <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	88fa      	ldrh	r2, [r7, #6]
 8006642:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	88fa      	ldrh	r2, [r7, #6]
 800664a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2221      	movs	r2, #33	@ 0x21
 800665a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006662:	2b00      	cmp	r3, #0
 8006664:	d028      	beq.n	80066b8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800666a:	4a26      	ldr	r2, [pc, #152]	@ (8006704 <HAL_UART_Transmit_DMA+0xf4>)
 800666c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006672:	4a25      	ldr	r2, [pc, #148]	@ (8006708 <HAL_UART_Transmit_DMA+0xf8>)
 8006674:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800667a:	4a24      	ldr	r2, [pc, #144]	@ (800670c <HAL_UART_Transmit_DMA+0xfc>)
 800667c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006682:	2200      	movs	r2, #0
 8006684:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800668e:	4619      	mov	r1, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	3328      	adds	r3, #40	@ 0x28
 8006696:	461a      	mov	r2, r3
 8006698:	88fb      	ldrh	r3, [r7, #6]
 800669a:	f7fd ff4f 	bl	800453c <HAL_DMA_Start_IT>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d009      	beq.n	80066b8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2210      	movs	r2, #16
 80066a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2220      	movs	r2, #32
 80066b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e020      	b.n	80066fa <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2240      	movs	r2, #64	@ 0x40
 80066be:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3308      	adds	r3, #8
 80066c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	e853 3f00 	ldrex	r3, [r3]
 80066ce:	613b      	str	r3, [r7, #16]
   return(result);
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3308      	adds	r3, #8
 80066de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066e0:	623a      	str	r2, [r7, #32]
 80066e2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e4:	69f9      	ldr	r1, [r7, #28]
 80066e6:	6a3a      	ldr	r2, [r7, #32]
 80066e8:	e841 2300 	strex	r3, r2, [r1]
 80066ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1e5      	bne.n	80066c0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80066f4:	2300      	movs	r3, #0
 80066f6:	e000      	b.n	80066fa <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80066f8:	2302      	movs	r3, #2
  }
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3728      	adds	r7, #40	@ 0x28
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	08007bdb 	.word	0x08007bdb
 8006708:	08007c75 	.word	0x08007c75
 800670c:	08007dfb 	.word	0x08007dfb

08006710 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b08a      	sub	sp, #40	@ 0x28
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	4613      	mov	r3, r2
 800671c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006724:	2b20      	cmp	r3, #32
 8006726:	d137      	bne.n	8006798 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d002      	beq.n	8006734 <HAL_UART_Receive_DMA+0x24>
 800672e:	88fb      	ldrh	r3, [r7, #6]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e030      	b.n	800679a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a18      	ldr	r2, [pc, #96]	@ (80067a4 <HAL_UART_Receive_DMA+0x94>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d01f      	beq.n	8006788 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d018      	beq.n	8006788 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	e853 3f00 	ldrex	r3, [r3]
 8006762:	613b      	str	r3, [r7, #16]
   return(result);
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800676a:	627b      	str	r3, [r7, #36]	@ 0x24
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	461a      	mov	r2, r3
 8006772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006774:	623b      	str	r3, [r7, #32]
 8006776:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006778:	69f9      	ldr	r1, [r7, #28]
 800677a:	6a3a      	ldr	r2, [r7, #32]
 800677c:	e841 2300 	strex	r3, r2, [r1]
 8006780:	61bb      	str	r3, [r7, #24]
   return(result);
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1e6      	bne.n	8006756 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006788:	88fb      	ldrh	r3, [r7, #6]
 800678a:	461a      	mov	r2, r3
 800678c:	68b9      	ldr	r1, [r7, #8]
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f001 f8d6 	bl	8007940 <UART_Start_Receive_DMA>
 8006794:	4603      	mov	r3, r0
 8006796:	e000      	b.n	800679a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006798:	2302      	movs	r3, #2
  }
}
 800679a:	4618      	mov	r0, r3
 800679c:	3728      	adds	r7, #40	@ 0x28
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	40008000 	.word	0x40008000

080067a8 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b090      	sub	sp, #64	@ 0x40
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ca:	2b80      	cmp	r3, #128	@ 0x80
 80067cc:	d139      	bne.n	8006842 <HAL_UART_DMAStop+0x9a>
 80067ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067d0:	2b21      	cmp	r3, #33	@ 0x21
 80067d2:	d136      	bne.n	8006842 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3308      	adds	r3, #8
 80067da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	e853 3f00 	ldrex	r3, [r3]
 80067e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3308      	adds	r3, #8
 80067f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067fc:	e841 2300 	strex	r3, r2, [r1]
 8006800:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1e5      	bne.n	80067d4 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800680c:	2b00      	cmp	r3, #0
 800680e:	d015      	beq.n	800683c <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006814:	4618      	mov	r0, r3
 8006816:	f7fd ff0c 	bl	8004632 <HAL_DMA_Abort>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00d      	beq.n	800683c <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006824:	4618      	mov	r0, r3
 8006826:	f7fe f873 	bl	8004910 <HAL_DMA_GetError>
 800682a:	4603      	mov	r3, r0
 800682c:	2b20      	cmp	r3, #32
 800682e:	d105      	bne.n	800683c <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2210      	movs	r2, #16
 8006834:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e047      	b.n	80068cc <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f001 f925 	bl	8007a8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800684c:	2b40      	cmp	r3, #64	@ 0x40
 800684e:	d13c      	bne.n	80068ca <HAL_UART_DMAStop+0x122>
 8006850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006852:	2b22      	cmp	r3, #34	@ 0x22
 8006854:	d139      	bne.n	80068ca <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3308      	adds	r3, #8
 800685c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	e853 3f00 	ldrex	r3, [r3]
 8006864:	60bb      	str	r3, [r7, #8]
   return(result);
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800686c:	633b      	str	r3, [r7, #48]	@ 0x30
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3308      	adds	r3, #8
 8006874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006876:	61ba      	str	r2, [r7, #24]
 8006878:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	6979      	ldr	r1, [r7, #20]
 800687c:	69ba      	ldr	r2, [r7, #24]
 800687e:	e841 2300 	strex	r3, r2, [r1]
 8006882:	613b      	str	r3, [r7, #16]
   return(result);
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1e5      	bne.n	8006856 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006890:	2b00      	cmp	r3, #0
 8006892:	d017      	beq.n	80068c4 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800689a:	4618      	mov	r0, r3
 800689c:	f7fd fec9 	bl	8004632 <HAL_DMA_Abort>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00e      	beq.n	80068c4 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7fe f82f 	bl	8004910 <HAL_DMA_GetError>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b20      	cmp	r3, #32
 80068b6:	d105      	bne.n	80068c4 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2210      	movs	r2, #16
 80068bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e003      	b.n	80068cc <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f001 f922 	bl	8007b0e <UART_EndRxTransfer>
  }

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3740      	adds	r7, #64	@ 0x40
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b0ba      	sub	sp, #232	@ 0xe8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80068fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80068fe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006902:	4013      	ands	r3, r2
 8006904:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006908:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800690c:	2b00      	cmp	r3, #0
 800690e:	d11b      	bne.n	8006948 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006914:	f003 0320 	and.w	r3, r3, #32
 8006918:	2b00      	cmp	r3, #0
 800691a:	d015      	beq.n	8006948 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800691c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006920:	f003 0320 	and.w	r3, r3, #32
 8006924:	2b00      	cmp	r3, #0
 8006926:	d105      	bne.n	8006934 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800692c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d009      	beq.n	8006948 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 8300 	beq.w	8006f3e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	4798      	blx	r3
      }
      return;
 8006946:	e2fa      	b.n	8006f3e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006948:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 8123 	beq.w	8006b98 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006952:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006956:	4b8d      	ldr	r3, [pc, #564]	@ (8006b8c <HAL_UART_IRQHandler+0x2b8>)
 8006958:	4013      	ands	r3, r2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d106      	bne.n	800696c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800695e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006962:	4b8b      	ldr	r3, [pc, #556]	@ (8006b90 <HAL_UART_IRQHandler+0x2bc>)
 8006964:	4013      	ands	r3, r2
 8006966:	2b00      	cmp	r3, #0
 8006968:	f000 8116 	beq.w	8006b98 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800696c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b00      	cmp	r3, #0
 8006976:	d011      	beq.n	800699c <HAL_UART_IRQHandler+0xc8>
 8006978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800697c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00b      	beq.n	800699c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2201      	movs	r2, #1
 800698a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006992:	f043 0201 	orr.w	r2, r3, #1
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800699c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d011      	beq.n	80069cc <HAL_UART_IRQHandler+0xf8>
 80069a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00b      	beq.n	80069cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2202      	movs	r2, #2
 80069ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069c2:	f043 0204 	orr.w	r2, r3, #4
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d011      	beq.n	80069fc <HAL_UART_IRQHandler+0x128>
 80069d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00b      	beq.n	80069fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2204      	movs	r2, #4
 80069ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069f2:	f043 0202 	orr.w	r2, r3, #2
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80069fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a00:	f003 0308 	and.w	r3, r3, #8
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d017      	beq.n	8006a38 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a0c:	f003 0320 	and.w	r3, r3, #32
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d105      	bne.n	8006a20 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006a14:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006a18:	4b5c      	ldr	r3, [pc, #368]	@ (8006b8c <HAL_UART_IRQHandler+0x2b8>)
 8006a1a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00b      	beq.n	8006a38 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2208      	movs	r2, #8
 8006a26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a2e:	f043 0208 	orr.w	r2, r3, #8
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d012      	beq.n	8006a6a <HAL_UART_IRQHandler+0x196>
 8006a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00c      	beq.n	8006a6a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a60:	f043 0220 	orr.w	r2, r3, #32
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 8266 	beq.w	8006f42 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a7a:	f003 0320 	and.w	r3, r3, #32
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d013      	beq.n	8006aaa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a86:	f003 0320 	and.w	r3, r3, #32
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d105      	bne.n	8006a9a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d007      	beq.n	8006aaa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ab0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006abe:	2b40      	cmp	r3, #64	@ 0x40
 8006ac0:	d005      	beq.n	8006ace <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ac6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d054      	beq.n	8006b78 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f001 f81d 	bl	8007b0e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ade:	2b40      	cmp	r3, #64	@ 0x40
 8006ae0:	d146      	bne.n	8006b70 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006af0:	e853 3f00 	ldrex	r3, [r3]
 8006af4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006af8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006afc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3308      	adds	r3, #8
 8006b0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006b0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006b12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006b1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006b1e:	e841 2300 	strex	r3, r2, [r1]
 8006b22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006b26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1d9      	bne.n	8006ae2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d017      	beq.n	8006b68 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b3e:	4a15      	ldr	r2, [pc, #84]	@ (8006b94 <HAL_UART_IRQHandler+0x2c0>)
 8006b40:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7fd fdcb 	bl	80046e4 <HAL_DMA_Abort_IT>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d019      	beq.n	8006b88 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006b62:	4610      	mov	r0, r2
 8006b64:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b66:	e00f      	b.n	8006b88 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fa1d 	bl	8006fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b6e:	e00b      	b.n	8006b88 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fa19 	bl	8006fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b76:	e007      	b.n	8006b88 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fa15 	bl	8006fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006b86:	e1dc      	b.n	8006f42 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b88:	bf00      	nop
    return;
 8006b8a:	e1da      	b.n	8006f42 <HAL_UART_IRQHandler+0x66e>
 8006b8c:	10000001 	.word	0x10000001
 8006b90:	04000120 	.word	0x04000120
 8006b94:	08007e7b 	.word	0x08007e7b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	f040 8170 	bne.w	8006e82 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ba6:	f003 0310 	and.w	r3, r3, #16
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 8169 	beq.w	8006e82 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bb4:	f003 0310 	and.w	r3, r3, #16
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 8162 	beq.w	8006e82 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2210      	movs	r2, #16
 8006bc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bd0:	2b40      	cmp	r3, #64	@ 0x40
 8006bd2:	f040 80d8 	bne.w	8006d86 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006be4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f000 80af 	beq.w	8006d4c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006bf4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	f080 80a7 	bcs.w	8006d4c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0320 	and.w	r3, r3, #32
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f040 8087 	bne.w	8006d2a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006c30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	461a      	mov	r2, r3
 8006c42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c4a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c56:	e841 2300 	strex	r3, r2, [r1]
 8006c5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1da      	bne.n	8006c1c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3308      	adds	r3, #8
 8006c6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c78:	f023 0301 	bic.w	r3, r3, #1
 8006c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3308      	adds	r3, #8
 8006c86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c96:	e841 2300 	strex	r3, r2, [r1]
 8006c9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1e1      	bne.n	8006c66 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3308      	adds	r3, #8
 8006ca8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006caa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006cac:	e853 3f00 	ldrex	r3, [r3]
 8006cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006cb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3308      	adds	r3, #8
 8006cc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006cc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006cc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ccc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006cce:	e841 2300 	strex	r3, r2, [r1]
 8006cd2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006cd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1e3      	bne.n	8006ca2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006cf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cf8:	f023 0310 	bic.w	r3, r3, #16
 8006cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	461a      	mov	r2, r3
 8006d06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d12:	e841 2300 	strex	r3, r2, [r1]
 8006d16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1e4      	bne.n	8006ce8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7fd fc84 	bl	8004632 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	4619      	mov	r1, r3
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f939 	bl	8006fbc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006d4a:	e0fc      	b.n	8006f46 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d56:	429a      	cmp	r2, r3
 8006d58:	f040 80f5 	bne.w	8006f46 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0320 	and.w	r3, r3, #32
 8006d6a:	2b20      	cmp	r3, #32
 8006d6c:	f040 80eb 	bne.w	8006f46 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2202      	movs	r2, #2
 8006d74:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f91c 	bl	8006fbc <HAL_UARTEx_RxEventCallback>
      return;
 8006d84:	e0df      	b.n	8006f46 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 80d1 	beq.w	8006f4a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006da8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 80cc 	beq.w	8006f4a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dba:	e853 3f00 	ldrex	r3, [r3]
 8006dbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006dc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006dd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dd6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006dda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ddc:	e841 2300 	strex	r3, r2, [r1]
 8006de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1e4      	bne.n	8006db2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	3308      	adds	r3, #8
 8006dee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df2:	e853 3f00 	ldrex	r3, [r3]
 8006df6:	623b      	str	r3, [r7, #32]
   return(result);
 8006df8:	6a3b      	ldr	r3, [r7, #32]
 8006dfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dfe:	f023 0301 	bic.w	r3, r3, #1
 8006e02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3308      	adds	r3, #8
 8006e0c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006e10:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e18:	e841 2300 	strex	r3, r2, [r1]
 8006e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1e1      	bne.n	8006de8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2220      	movs	r2, #32
 8006e28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	e853 3f00 	ldrex	r3, [r3]
 8006e44:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f023 0310 	bic.w	r3, r3, #16
 8006e4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	461a      	mov	r2, r3
 8006e56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006e5a:	61fb      	str	r3, [r7, #28]
 8006e5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5e:	69b9      	ldr	r1, [r7, #24]
 8006e60:	69fa      	ldr	r2, [r7, #28]
 8006e62:	e841 2300 	strex	r3, r2, [r1]
 8006e66:	617b      	str	r3, [r7, #20]
   return(result);
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1e4      	bne.n	8006e38 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2202      	movs	r2, #2
 8006e72:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f89e 	bl	8006fbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e80:	e063      	b.n	8006f4a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00e      	beq.n	8006eac <HAL_UART_IRQHandler+0x5d8>
 8006e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d008      	beq.n	8006eac <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006ea2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 f825 	bl	8007ef4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006eaa:	e051      	b.n	8006f50 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d014      	beq.n	8006ee2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d105      	bne.n	8006ed0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006ec4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ec8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d008      	beq.n	8006ee2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d03a      	beq.n	8006f4e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	4798      	blx	r3
    }
    return;
 8006ee0:	e035      	b.n	8006f4e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d009      	beq.n	8006f02 <HAL_UART_IRQHandler+0x62e>
 8006eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d003      	beq.n	8006f02 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 ffcf 	bl	8007e9e <UART_EndTransmit_IT>
    return;
 8006f00:	e026      	b.n	8006f50 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d009      	beq.n	8006f22 <HAL_UART_IRQHandler+0x64e>
 8006f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f12:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d003      	beq.n	8006f22 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fffe 	bl	8007f1c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f20:	e016      	b.n	8006f50 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d010      	beq.n	8006f50 <HAL_UART_IRQHandler+0x67c>
 8006f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	da0c      	bge.n	8006f50 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 ffe6 	bl	8007f08 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f3c:	e008      	b.n	8006f50 <HAL_UART_IRQHandler+0x67c>
      return;
 8006f3e:	bf00      	nop
 8006f40:	e006      	b.n	8006f50 <HAL_UART_IRQHandler+0x67c>
    return;
 8006f42:	bf00      	nop
 8006f44:	e004      	b.n	8006f50 <HAL_UART_IRQHandler+0x67c>
      return;
 8006f46:	bf00      	nop
 8006f48:	e002      	b.n	8006f50 <HAL_UART_IRQHandler+0x67c>
      return;
 8006f4a:	bf00      	nop
 8006f4c:	e000      	b.n	8006f50 <HAL_UART_IRQHandler+0x67c>
    return;
 8006f4e:	bf00      	nop
  }
}
 8006f50:	37e8      	adds	r7, #232	@ 0xe8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop

08006f58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fd8:	b08c      	sub	sp, #48	@ 0x30
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	689a      	ldr	r2, [r3, #8]
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	431a      	orrs	r2, r3
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	69db      	ldr	r3, [r3, #28]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	4baa      	ldr	r3, [pc, #680]	@ (80072ac <UART_SetConfig+0x2d8>)
 8007004:	4013      	ands	r3, r2
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	6812      	ldr	r2, [r2, #0]
 800700a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800700c:	430b      	orrs	r3, r1
 800700e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	68da      	ldr	r2, [r3, #12]
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	430a      	orrs	r2, r1
 8007024:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a9f      	ldr	r2, [pc, #636]	@ (80072b0 <UART_SetConfig+0x2dc>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d004      	beq.n	8007040 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800703c:	4313      	orrs	r3, r2
 800703e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800704a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	6812      	ldr	r2, [r2, #0]
 8007052:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007054:	430b      	orrs	r3, r1
 8007056:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800705e:	f023 010f 	bic.w	r1, r3, #15
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	430a      	orrs	r2, r1
 800706c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a90      	ldr	r2, [pc, #576]	@ (80072b4 <UART_SetConfig+0x2e0>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d125      	bne.n	80070c4 <UART_SetConfig+0xf0>
 8007078:	4b8f      	ldr	r3, [pc, #572]	@ (80072b8 <UART_SetConfig+0x2e4>)
 800707a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800707e:	f003 0303 	and.w	r3, r3, #3
 8007082:	2b03      	cmp	r3, #3
 8007084:	d81a      	bhi.n	80070bc <UART_SetConfig+0xe8>
 8007086:	a201      	add	r2, pc, #4	@ (adr r2, 800708c <UART_SetConfig+0xb8>)
 8007088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708c:	0800709d 	.word	0x0800709d
 8007090:	080070ad 	.word	0x080070ad
 8007094:	080070a5 	.word	0x080070a5
 8007098:	080070b5 	.word	0x080070b5
 800709c:	2301      	movs	r3, #1
 800709e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070a2:	e116      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80070a4:	2302      	movs	r3, #2
 80070a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070aa:	e112      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80070ac:	2304      	movs	r3, #4
 80070ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070b2:	e10e      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80070b4:	2308      	movs	r3, #8
 80070b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ba:	e10a      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80070bc:	2310      	movs	r3, #16
 80070be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070c2:	e106      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a7c      	ldr	r2, [pc, #496]	@ (80072bc <UART_SetConfig+0x2e8>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d138      	bne.n	8007140 <UART_SetConfig+0x16c>
 80070ce:	4b7a      	ldr	r3, [pc, #488]	@ (80072b8 <UART_SetConfig+0x2e4>)
 80070d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070d4:	f003 030c 	and.w	r3, r3, #12
 80070d8:	2b0c      	cmp	r3, #12
 80070da:	d82d      	bhi.n	8007138 <UART_SetConfig+0x164>
 80070dc:	a201      	add	r2, pc, #4	@ (adr r2, 80070e4 <UART_SetConfig+0x110>)
 80070de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e2:	bf00      	nop
 80070e4:	08007119 	.word	0x08007119
 80070e8:	08007139 	.word	0x08007139
 80070ec:	08007139 	.word	0x08007139
 80070f0:	08007139 	.word	0x08007139
 80070f4:	08007129 	.word	0x08007129
 80070f8:	08007139 	.word	0x08007139
 80070fc:	08007139 	.word	0x08007139
 8007100:	08007139 	.word	0x08007139
 8007104:	08007121 	.word	0x08007121
 8007108:	08007139 	.word	0x08007139
 800710c:	08007139 	.word	0x08007139
 8007110:	08007139 	.word	0x08007139
 8007114:	08007131 	.word	0x08007131
 8007118:	2300      	movs	r3, #0
 800711a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800711e:	e0d8      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007120:	2302      	movs	r3, #2
 8007122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007126:	e0d4      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007128:	2304      	movs	r3, #4
 800712a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800712e:	e0d0      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007130:	2308      	movs	r3, #8
 8007132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007136:	e0cc      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007138:	2310      	movs	r3, #16
 800713a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800713e:	e0c8      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a5e      	ldr	r2, [pc, #376]	@ (80072c0 <UART_SetConfig+0x2ec>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d125      	bne.n	8007196 <UART_SetConfig+0x1c2>
 800714a:	4b5b      	ldr	r3, [pc, #364]	@ (80072b8 <UART_SetConfig+0x2e4>)
 800714c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007150:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007154:	2b30      	cmp	r3, #48	@ 0x30
 8007156:	d016      	beq.n	8007186 <UART_SetConfig+0x1b2>
 8007158:	2b30      	cmp	r3, #48	@ 0x30
 800715a:	d818      	bhi.n	800718e <UART_SetConfig+0x1ba>
 800715c:	2b20      	cmp	r3, #32
 800715e:	d00a      	beq.n	8007176 <UART_SetConfig+0x1a2>
 8007160:	2b20      	cmp	r3, #32
 8007162:	d814      	bhi.n	800718e <UART_SetConfig+0x1ba>
 8007164:	2b00      	cmp	r3, #0
 8007166:	d002      	beq.n	800716e <UART_SetConfig+0x19a>
 8007168:	2b10      	cmp	r3, #16
 800716a:	d008      	beq.n	800717e <UART_SetConfig+0x1aa>
 800716c:	e00f      	b.n	800718e <UART_SetConfig+0x1ba>
 800716e:	2300      	movs	r3, #0
 8007170:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007174:	e0ad      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007176:	2302      	movs	r3, #2
 8007178:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800717c:	e0a9      	b.n	80072d2 <UART_SetConfig+0x2fe>
 800717e:	2304      	movs	r3, #4
 8007180:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007184:	e0a5      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007186:	2308      	movs	r3, #8
 8007188:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800718c:	e0a1      	b.n	80072d2 <UART_SetConfig+0x2fe>
 800718e:	2310      	movs	r3, #16
 8007190:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007194:	e09d      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a4a      	ldr	r2, [pc, #296]	@ (80072c4 <UART_SetConfig+0x2f0>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d125      	bne.n	80071ec <UART_SetConfig+0x218>
 80071a0:	4b45      	ldr	r3, [pc, #276]	@ (80072b8 <UART_SetConfig+0x2e4>)
 80071a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80071aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80071ac:	d016      	beq.n	80071dc <UART_SetConfig+0x208>
 80071ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80071b0:	d818      	bhi.n	80071e4 <UART_SetConfig+0x210>
 80071b2:	2b80      	cmp	r3, #128	@ 0x80
 80071b4:	d00a      	beq.n	80071cc <UART_SetConfig+0x1f8>
 80071b6:	2b80      	cmp	r3, #128	@ 0x80
 80071b8:	d814      	bhi.n	80071e4 <UART_SetConfig+0x210>
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d002      	beq.n	80071c4 <UART_SetConfig+0x1f0>
 80071be:	2b40      	cmp	r3, #64	@ 0x40
 80071c0:	d008      	beq.n	80071d4 <UART_SetConfig+0x200>
 80071c2:	e00f      	b.n	80071e4 <UART_SetConfig+0x210>
 80071c4:	2300      	movs	r3, #0
 80071c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ca:	e082      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80071cc:	2302      	movs	r3, #2
 80071ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071d2:	e07e      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80071d4:	2304      	movs	r3, #4
 80071d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071da:	e07a      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80071dc:	2308      	movs	r3, #8
 80071de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071e2:	e076      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80071e4:	2310      	movs	r3, #16
 80071e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ea:	e072      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a35      	ldr	r2, [pc, #212]	@ (80072c8 <UART_SetConfig+0x2f4>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d12a      	bne.n	800724c <UART_SetConfig+0x278>
 80071f6:	4b30      	ldr	r3, [pc, #192]	@ (80072b8 <UART_SetConfig+0x2e4>)
 80071f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007200:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007204:	d01a      	beq.n	800723c <UART_SetConfig+0x268>
 8007206:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800720a:	d81b      	bhi.n	8007244 <UART_SetConfig+0x270>
 800720c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007210:	d00c      	beq.n	800722c <UART_SetConfig+0x258>
 8007212:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007216:	d815      	bhi.n	8007244 <UART_SetConfig+0x270>
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <UART_SetConfig+0x250>
 800721c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007220:	d008      	beq.n	8007234 <UART_SetConfig+0x260>
 8007222:	e00f      	b.n	8007244 <UART_SetConfig+0x270>
 8007224:	2300      	movs	r3, #0
 8007226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800722a:	e052      	b.n	80072d2 <UART_SetConfig+0x2fe>
 800722c:	2302      	movs	r3, #2
 800722e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007232:	e04e      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007234:	2304      	movs	r3, #4
 8007236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800723a:	e04a      	b.n	80072d2 <UART_SetConfig+0x2fe>
 800723c:	2308      	movs	r3, #8
 800723e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007242:	e046      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007244:	2310      	movs	r3, #16
 8007246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800724a:	e042      	b.n	80072d2 <UART_SetConfig+0x2fe>
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a17      	ldr	r2, [pc, #92]	@ (80072b0 <UART_SetConfig+0x2dc>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d13a      	bne.n	80072cc <UART_SetConfig+0x2f8>
 8007256:	4b18      	ldr	r3, [pc, #96]	@ (80072b8 <UART_SetConfig+0x2e4>)
 8007258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800725c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007260:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007264:	d01a      	beq.n	800729c <UART_SetConfig+0x2c8>
 8007266:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800726a:	d81b      	bhi.n	80072a4 <UART_SetConfig+0x2d0>
 800726c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007270:	d00c      	beq.n	800728c <UART_SetConfig+0x2b8>
 8007272:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007276:	d815      	bhi.n	80072a4 <UART_SetConfig+0x2d0>
 8007278:	2b00      	cmp	r3, #0
 800727a:	d003      	beq.n	8007284 <UART_SetConfig+0x2b0>
 800727c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007280:	d008      	beq.n	8007294 <UART_SetConfig+0x2c0>
 8007282:	e00f      	b.n	80072a4 <UART_SetConfig+0x2d0>
 8007284:	2300      	movs	r3, #0
 8007286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800728a:	e022      	b.n	80072d2 <UART_SetConfig+0x2fe>
 800728c:	2302      	movs	r3, #2
 800728e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007292:	e01e      	b.n	80072d2 <UART_SetConfig+0x2fe>
 8007294:	2304      	movs	r3, #4
 8007296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800729a:	e01a      	b.n	80072d2 <UART_SetConfig+0x2fe>
 800729c:	2308      	movs	r3, #8
 800729e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072a2:	e016      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80072a4:	2310      	movs	r3, #16
 80072a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072aa:	e012      	b.n	80072d2 <UART_SetConfig+0x2fe>
 80072ac:	cfff69f3 	.word	0xcfff69f3
 80072b0:	40008000 	.word	0x40008000
 80072b4:	40013800 	.word	0x40013800
 80072b8:	40021000 	.word	0x40021000
 80072bc:	40004400 	.word	0x40004400
 80072c0:	40004800 	.word	0x40004800
 80072c4:	40004c00 	.word	0x40004c00
 80072c8:	40005000 	.word	0x40005000
 80072cc:	2310      	movs	r3, #16
 80072ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4aae      	ldr	r2, [pc, #696]	@ (8007590 <UART_SetConfig+0x5bc>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	f040 8097 	bne.w	800740c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	d823      	bhi.n	800732e <UART_SetConfig+0x35a>
 80072e6:	a201      	add	r2, pc, #4	@ (adr r2, 80072ec <UART_SetConfig+0x318>)
 80072e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ec:	08007311 	.word	0x08007311
 80072f0:	0800732f 	.word	0x0800732f
 80072f4:	08007319 	.word	0x08007319
 80072f8:	0800732f 	.word	0x0800732f
 80072fc:	0800731f 	.word	0x0800731f
 8007300:	0800732f 	.word	0x0800732f
 8007304:	0800732f 	.word	0x0800732f
 8007308:	0800732f 	.word	0x0800732f
 800730c:	08007327 	.word	0x08007327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007310:	f7fe faf0 	bl	80058f4 <HAL_RCC_GetPCLK1Freq>
 8007314:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007316:	e010      	b.n	800733a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007318:	4b9e      	ldr	r3, [pc, #632]	@ (8007594 <UART_SetConfig+0x5c0>)
 800731a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800731c:	e00d      	b.n	800733a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800731e:	f7fe fa7b 	bl	8005818 <HAL_RCC_GetSysClockFreq>
 8007322:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007324:	e009      	b.n	800733a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007326:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800732a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800732c:	e005      	b.n	800733a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800732e:	2300      	movs	r3, #0
 8007330:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007338:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800733a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 8130 	beq.w	80075a2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007346:	4a94      	ldr	r2, [pc, #592]	@ (8007598 <UART_SetConfig+0x5c4>)
 8007348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800734c:	461a      	mov	r2, r3
 800734e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007350:	fbb3 f3f2 	udiv	r3, r3, r2
 8007354:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	4613      	mov	r3, r2
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	4413      	add	r3, r2
 8007360:	69ba      	ldr	r2, [r7, #24]
 8007362:	429a      	cmp	r2, r3
 8007364:	d305      	bcc.n	8007372 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800736c:	69ba      	ldr	r2, [r7, #24]
 800736e:	429a      	cmp	r2, r3
 8007370:	d903      	bls.n	800737a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007378:	e113      	b.n	80075a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737c:	2200      	movs	r2, #0
 800737e:	60bb      	str	r3, [r7, #8]
 8007380:	60fa      	str	r2, [r7, #12]
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007386:	4a84      	ldr	r2, [pc, #528]	@ (8007598 <UART_SetConfig+0x5c4>)
 8007388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800738c:	b29b      	uxth	r3, r3
 800738e:	2200      	movs	r2, #0
 8007390:	603b      	str	r3, [r7, #0]
 8007392:	607a      	str	r2, [r7, #4]
 8007394:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007398:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800739c:	f7f9 fa04 	bl	80007a8 <__aeabi_uldivmod>
 80073a0:	4602      	mov	r2, r0
 80073a2:	460b      	mov	r3, r1
 80073a4:	4610      	mov	r0, r2
 80073a6:	4619      	mov	r1, r3
 80073a8:	f04f 0200 	mov.w	r2, #0
 80073ac:	f04f 0300 	mov.w	r3, #0
 80073b0:	020b      	lsls	r3, r1, #8
 80073b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80073b6:	0202      	lsls	r2, r0, #8
 80073b8:	6979      	ldr	r1, [r7, #20]
 80073ba:	6849      	ldr	r1, [r1, #4]
 80073bc:	0849      	lsrs	r1, r1, #1
 80073be:	2000      	movs	r0, #0
 80073c0:	460c      	mov	r4, r1
 80073c2:	4605      	mov	r5, r0
 80073c4:	eb12 0804 	adds.w	r8, r2, r4
 80073c8:	eb43 0905 	adc.w	r9, r3, r5
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	469a      	mov	sl, r3
 80073d4:	4693      	mov	fp, r2
 80073d6:	4652      	mov	r2, sl
 80073d8:	465b      	mov	r3, fp
 80073da:	4640      	mov	r0, r8
 80073dc:	4649      	mov	r1, r9
 80073de:	f7f9 f9e3 	bl	80007a8 <__aeabi_uldivmod>
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	4613      	mov	r3, r2
 80073e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073f0:	d308      	bcc.n	8007404 <UART_SetConfig+0x430>
 80073f2:	6a3b      	ldr	r3, [r7, #32]
 80073f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073f8:	d204      	bcs.n	8007404 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6a3a      	ldr	r2, [r7, #32]
 8007400:	60da      	str	r2, [r3, #12]
 8007402:	e0ce      	b.n	80075a2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800740a:	e0ca      	b.n	80075a2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007414:	d166      	bne.n	80074e4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007416:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800741a:	2b08      	cmp	r3, #8
 800741c:	d827      	bhi.n	800746e <UART_SetConfig+0x49a>
 800741e:	a201      	add	r2, pc, #4	@ (adr r2, 8007424 <UART_SetConfig+0x450>)
 8007420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007424:	08007449 	.word	0x08007449
 8007428:	08007451 	.word	0x08007451
 800742c:	08007459 	.word	0x08007459
 8007430:	0800746f 	.word	0x0800746f
 8007434:	0800745f 	.word	0x0800745f
 8007438:	0800746f 	.word	0x0800746f
 800743c:	0800746f 	.word	0x0800746f
 8007440:	0800746f 	.word	0x0800746f
 8007444:	08007467 	.word	0x08007467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007448:	f7fe fa54 	bl	80058f4 <HAL_RCC_GetPCLK1Freq>
 800744c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800744e:	e014      	b.n	800747a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007450:	f7fe fa66 	bl	8005920 <HAL_RCC_GetPCLK2Freq>
 8007454:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007456:	e010      	b.n	800747a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007458:	4b4e      	ldr	r3, [pc, #312]	@ (8007594 <UART_SetConfig+0x5c0>)
 800745a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800745c:	e00d      	b.n	800747a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800745e:	f7fe f9db 	bl	8005818 <HAL_RCC_GetSysClockFreq>
 8007462:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007464:	e009      	b.n	800747a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800746a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800746c:	e005      	b.n	800747a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007478:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 8090 	beq.w	80075a2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007486:	4a44      	ldr	r2, [pc, #272]	@ (8007598 <UART_SetConfig+0x5c4>)
 8007488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800748c:	461a      	mov	r2, r3
 800748e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007490:	fbb3 f3f2 	udiv	r3, r3, r2
 8007494:	005a      	lsls	r2, r3, #1
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	085b      	lsrs	r3, r3, #1
 800749c:	441a      	add	r2, r3
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	2b0f      	cmp	r3, #15
 80074ac:	d916      	bls.n	80074dc <UART_SetConfig+0x508>
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074b4:	d212      	bcs.n	80074dc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	f023 030f 	bic.w	r3, r3, #15
 80074be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	085b      	lsrs	r3, r3, #1
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	f003 0307 	and.w	r3, r3, #7
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	8bfb      	ldrh	r3, [r7, #30]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	8bfa      	ldrh	r2, [r7, #30]
 80074d8:	60da      	str	r2, [r3, #12]
 80074da:	e062      	b.n	80075a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80074e2:	e05e      	b.n	80075a2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80074e8:	2b08      	cmp	r3, #8
 80074ea:	d828      	bhi.n	800753e <UART_SetConfig+0x56a>
 80074ec:	a201      	add	r2, pc, #4	@ (adr r2, 80074f4 <UART_SetConfig+0x520>)
 80074ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f2:	bf00      	nop
 80074f4:	08007519 	.word	0x08007519
 80074f8:	08007521 	.word	0x08007521
 80074fc:	08007529 	.word	0x08007529
 8007500:	0800753f 	.word	0x0800753f
 8007504:	0800752f 	.word	0x0800752f
 8007508:	0800753f 	.word	0x0800753f
 800750c:	0800753f 	.word	0x0800753f
 8007510:	0800753f 	.word	0x0800753f
 8007514:	08007537 	.word	0x08007537
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007518:	f7fe f9ec 	bl	80058f4 <HAL_RCC_GetPCLK1Freq>
 800751c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800751e:	e014      	b.n	800754a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007520:	f7fe f9fe 	bl	8005920 <HAL_RCC_GetPCLK2Freq>
 8007524:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007526:	e010      	b.n	800754a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007528:	4b1a      	ldr	r3, [pc, #104]	@ (8007594 <UART_SetConfig+0x5c0>)
 800752a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800752c:	e00d      	b.n	800754a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800752e:	f7fe f973 	bl	8005818 <HAL_RCC_GetSysClockFreq>
 8007532:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007534:	e009      	b.n	800754a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007536:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800753a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800753c:	e005      	b.n	800754a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800753e:	2300      	movs	r3, #0
 8007540:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007548:	bf00      	nop
    }

    if (pclk != 0U)
 800754a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754c:	2b00      	cmp	r3, #0
 800754e:	d028      	beq.n	80075a2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007554:	4a10      	ldr	r2, [pc, #64]	@ (8007598 <UART_SetConfig+0x5c4>)
 8007556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800755a:	461a      	mov	r2, r3
 800755c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	085b      	lsrs	r3, r3, #1
 8007568:	441a      	add	r2, r3
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007572:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	2b0f      	cmp	r3, #15
 8007578:	d910      	bls.n	800759c <UART_SetConfig+0x5c8>
 800757a:	6a3b      	ldr	r3, [r7, #32]
 800757c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007580:	d20c      	bcs.n	800759c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	b29a      	uxth	r2, r3
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	60da      	str	r2, [r3, #12]
 800758c:	e009      	b.n	80075a2 <UART_SetConfig+0x5ce>
 800758e:	bf00      	nop
 8007590:	40008000 	.word	0x40008000
 8007594:	00f42400 	.word	0x00f42400
 8007598:	0801998c 	.word	0x0801998c
      }
      else
      {
        ret = HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	2200      	movs	r2, #0
 80075b6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	2200      	movs	r2, #0
 80075bc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80075be:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3730      	adds	r7, #48	@ 0x30
 80075c6:	46bd      	mov	sp, r7
 80075c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080075cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d8:	f003 0308 	and.w	r3, r3, #8
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00a      	beq.n	80075f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00a      	beq.n	8007618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	430a      	orrs	r2, r1
 8007616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800761c:	f003 0302 	and.w	r3, r3, #2
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00a      	beq.n	800763a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763e:	f003 0304 	and.w	r3, r3, #4
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00a      	beq.n	800765c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	430a      	orrs	r2, r1
 800765a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007660:	f003 0310 	and.w	r3, r3, #16
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00a      	beq.n	800767e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00a      	beq.n	80076a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	430a      	orrs	r2, r1
 800769e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d01a      	beq.n	80076e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	430a      	orrs	r2, r1
 80076c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076ca:	d10a      	bne.n	80076e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	430a      	orrs	r2, r1
 80076e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00a      	beq.n	8007704 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	430a      	orrs	r2, r1
 8007702:	605a      	str	r2, [r3, #4]
  }
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b098      	sub	sp, #96	@ 0x60
 8007714:	af02      	add	r7, sp, #8
 8007716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007720:	f7fa fe20 	bl	8002364 <HAL_GetTick>
 8007724:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0308 	and.w	r3, r3, #8
 8007730:	2b08      	cmp	r3, #8
 8007732:	d12f      	bne.n	8007794 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007734:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800773c:	2200      	movs	r2, #0
 800773e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f88e 	bl	8007864 <UART_WaitOnFlagUntilTimeout>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d022      	beq.n	8007794 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007756:	e853 3f00 	ldrex	r3, [r3]
 800775a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800775c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800775e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007762:	653b      	str	r3, [r7, #80]	@ 0x50
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	461a      	mov	r2, r3
 800776a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800776c:	647b      	str	r3, [r7, #68]	@ 0x44
 800776e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007770:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007772:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007774:	e841 2300 	strex	r3, r2, [r1]
 8007778:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800777a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1e6      	bne.n	800774e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2220      	movs	r2, #32
 8007784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e063      	b.n	800785c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 0304 	and.w	r3, r3, #4
 800779e:	2b04      	cmp	r3, #4
 80077a0:	d149      	bne.n	8007836 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077aa:	2200      	movs	r2, #0
 80077ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 f857 	bl	8007864 <UART_WaitOnFlagUntilTimeout>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d03c      	beq.n	8007836 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c4:	e853 3f00 	ldrex	r3, [r3]
 80077c8:	623b      	str	r3, [r7, #32]
   return(result);
 80077ca:	6a3b      	ldr	r3, [r7, #32]
 80077cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	461a      	mov	r2, r3
 80077d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077da:	633b      	str	r3, [r7, #48]	@ 0x30
 80077dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1e6      	bne.n	80077bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	3308      	adds	r3, #8
 80077f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	e853 3f00 	ldrex	r3, [r3]
 80077fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f023 0301 	bic.w	r3, r3, #1
 8007804:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3308      	adds	r3, #8
 800780c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800780e:	61fa      	str	r2, [r7, #28]
 8007810:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007812:	69b9      	ldr	r1, [r7, #24]
 8007814:	69fa      	ldr	r2, [r7, #28]
 8007816:	e841 2300 	strex	r3, r2, [r1]
 800781a:	617b      	str	r3, [r7, #20]
   return(result);
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1e5      	bne.n	80077ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2220      	movs	r2, #32
 8007826:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e012      	b.n	800785c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2220      	movs	r2, #32
 800783a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2220      	movs	r2, #32
 8007842:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3758      	adds	r7, #88	@ 0x58
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	603b      	str	r3, [r7, #0]
 8007870:	4613      	mov	r3, r2
 8007872:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007874:	e04f      	b.n	8007916 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800787c:	d04b      	beq.n	8007916 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800787e:	f7fa fd71 	bl	8002364 <HAL_GetTick>
 8007882:	4602      	mov	r2, r0
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	69ba      	ldr	r2, [r7, #24]
 800788a:	429a      	cmp	r2, r3
 800788c:	d302      	bcc.n	8007894 <UART_WaitOnFlagUntilTimeout+0x30>
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d101      	bne.n	8007898 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007894:	2303      	movs	r3, #3
 8007896:	e04e      	b.n	8007936 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 0304 	and.w	r3, r3, #4
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d037      	beq.n	8007916 <UART_WaitOnFlagUntilTimeout+0xb2>
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2b80      	cmp	r3, #128	@ 0x80
 80078aa:	d034      	beq.n	8007916 <UART_WaitOnFlagUntilTimeout+0xb2>
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	2b40      	cmp	r3, #64	@ 0x40
 80078b0:	d031      	beq.n	8007916 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	69db      	ldr	r3, [r3, #28]
 80078b8:	f003 0308 	and.w	r3, r3, #8
 80078bc:	2b08      	cmp	r3, #8
 80078be:	d110      	bne.n	80078e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2208      	movs	r2, #8
 80078c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 f920 	bl	8007b0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2208      	movs	r2, #8
 80078d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e029      	b.n	8007936 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	69db      	ldr	r3, [r3, #28]
 80078e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078f0:	d111      	bne.n	8007916 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f000 f906 	bl	8007b0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2220      	movs	r2, #32
 8007906:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e00f      	b.n	8007936 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	69da      	ldr	r2, [r3, #28]
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	4013      	ands	r3, r2
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	429a      	cmp	r2, r3
 8007924:	bf0c      	ite	eq
 8007926:	2301      	moveq	r3, #1
 8007928:	2300      	movne	r3, #0
 800792a:	b2db      	uxtb	r3, r3
 800792c:	461a      	mov	r2, r3
 800792e:	79fb      	ldrb	r3, [r7, #7]
 8007930:	429a      	cmp	r2, r3
 8007932:	d0a0      	beq.n	8007876 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
	...

08007940 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b096      	sub	sp, #88	@ 0x58
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	4613      	mov	r3, r2
 800794c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	88fa      	ldrh	r2, [r7, #6]
 8007958:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2222      	movs	r2, #34	@ 0x22
 8007968:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007972:	2b00      	cmp	r3, #0
 8007974:	d02d      	beq.n	80079d2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800797c:	4a40      	ldr	r2, [pc, #256]	@ (8007a80 <UART_Start_Receive_DMA+0x140>)
 800797e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007986:	4a3f      	ldr	r2, [pc, #252]	@ (8007a84 <UART_Start_Receive_DMA+0x144>)
 8007988:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007990:	4a3d      	ldr	r2, [pc, #244]	@ (8007a88 <UART_Start_Receive_DMA+0x148>)
 8007992:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800799a:	2200      	movs	r2, #0
 800799c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	3324      	adds	r3, #36	@ 0x24
 80079aa:	4619      	mov	r1, r3
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079b0:	461a      	mov	r2, r3
 80079b2:	88fb      	ldrh	r3, [r7, #6]
 80079b4:	f7fc fdc2 	bl	800453c <HAL_DMA_Start_IT>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d009      	beq.n	80079d2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2210      	movs	r2, #16
 80079c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2220      	movs	r2, #32
 80079ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e051      	b.n	8007a76 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d018      	beq.n	8007a0c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079e2:	e853 3f00 	ldrex	r3, [r3]
 80079e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	461a      	mov	r2, r3
 80079f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079fa:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80079fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a00:	e841 2300 	strex	r3, r2, [r1]
 8007a04:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007a06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1e6      	bne.n	80079da <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	3308      	adds	r3, #8
 8007a12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a16:	e853 3f00 	ldrex	r3, [r3]
 8007a1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1e:	f043 0301 	orr.w	r3, r3, #1
 8007a22:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3308      	adds	r3, #8
 8007a2a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007a2c:	637a      	str	r2, [r7, #52]	@ 0x34
 8007a2e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a30:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007a32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a34:	e841 2300 	strex	r3, r2, [r1]
 8007a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1e5      	bne.n	8007a0c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3308      	adds	r3, #8
 8007a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	e853 3f00 	ldrex	r3, [r3]
 8007a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	3308      	adds	r3, #8
 8007a5e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a60:	623a      	str	r2, [r7, #32]
 8007a62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a64:	69f9      	ldr	r1, [r7, #28]
 8007a66:	6a3a      	ldr	r2, [r7, #32]
 8007a68:	e841 2300 	strex	r3, r2, [r1]
 8007a6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1e5      	bne.n	8007a40 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3758      	adds	r7, #88	@ 0x58
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	08007c91 	.word	0x08007c91
 8007a84:	08007dbd 	.word	0x08007dbd
 8007a88:	08007dfb 	.word	0x08007dfb

08007a8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b08f      	sub	sp, #60	@ 0x3c
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	e853 3f00 	ldrex	r3, [r3]
 8007aa0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007aa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ab4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ab8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007aba:	e841 2300 	strex	r3, r2, [r1]
 8007abe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1e6      	bne.n	8007a94 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	3308      	adds	r3, #8
 8007acc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	e853 3f00 	ldrex	r3, [r3]
 8007ad4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007adc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3308      	adds	r3, #8
 8007ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ae6:	61ba      	str	r2, [r7, #24]
 8007ae8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aea:	6979      	ldr	r1, [r7, #20]
 8007aec:	69ba      	ldr	r2, [r7, #24]
 8007aee:	e841 2300 	strex	r3, r2, [r1]
 8007af2:	613b      	str	r3, [r7, #16]
   return(result);
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1e5      	bne.n	8007ac6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2220      	movs	r2, #32
 8007afe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007b02:	bf00      	nop
 8007b04:	373c      	adds	r7, #60	@ 0x3c
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b095      	sub	sp, #84	@ 0x54
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b1e:	e853 3f00 	ldrex	r3, [r3]
 8007b22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	461a      	mov	r2, r3
 8007b32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b34:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b36:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b3c:	e841 2300 	strex	r3, r2, [r1]
 8007b40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1e6      	bne.n	8007b16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	3308      	adds	r3, #8
 8007b4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b50:	6a3b      	ldr	r3, [r7, #32]
 8007b52:	e853 3f00 	ldrex	r3, [r3]
 8007b56:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b5e:	f023 0301 	bic.w	r3, r3, #1
 8007b62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	3308      	adds	r3, #8
 8007b6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b74:	e841 2300 	strex	r3, r2, [r1]
 8007b78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1e3      	bne.n	8007b48 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d118      	bne.n	8007bba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	e853 3f00 	ldrex	r3, [r3]
 8007b94:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	f023 0310 	bic.w	r3, r3, #16
 8007b9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ba6:	61bb      	str	r3, [r7, #24]
 8007ba8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007baa:	6979      	ldr	r1, [r7, #20]
 8007bac:	69ba      	ldr	r2, [r7, #24]
 8007bae:	e841 2300 	strex	r3, r2, [r1]
 8007bb2:	613b      	str	r3, [r7, #16]
   return(result);
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1e6      	bne.n	8007b88 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2220      	movs	r2, #32
 8007bbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007bce:	bf00      	nop
 8007bd0:	3754      	adds	r7, #84	@ 0x54
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b090      	sub	sp, #64	@ 0x40
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0320 	and.w	r3, r3, #32
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d137      	bne.n	8007c66 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007bf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	3308      	adds	r3, #8
 8007c04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c08:	e853 3f00 	ldrex	r3, [r3]
 8007c0c:	623b      	str	r3, [r7, #32]
   return(result);
 8007c0e:	6a3b      	ldr	r3, [r7, #32]
 8007c10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3308      	adds	r3, #8
 8007c1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c26:	e841 2300 	strex	r3, r2, [r1]
 8007c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1e5      	bne.n	8007bfe <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	e853 3f00 	ldrex	r3, [r3]
 8007c3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c46:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c50:	61fb      	str	r3, [r7, #28]
 8007c52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c54:	69b9      	ldr	r1, [r7, #24]
 8007c56:	69fa      	ldr	r2, [r7, #28]
 8007c58:	e841 2300 	strex	r3, r2, [r1]
 8007c5c:	617b      	str	r3, [r7, #20]
   return(result);
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1e6      	bne.n	8007c32 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c64:	e002      	b.n	8007c6c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007c66:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007c68:	f7ff f976 	bl	8006f58 <HAL_UART_TxCpltCallback>
}
 8007c6c:	bf00      	nop
 8007c6e:	3740      	adds	r7, #64	@ 0x40
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c80:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f7ff f972 	bl	8006f6c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c88:	bf00      	nop
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b09c      	sub	sp, #112	@ 0x70
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c9c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0320 	and.w	r3, r3, #32
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d171      	bne.n	8007d90 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007cac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cbc:	e853 3f00 	ldrex	r3, [r3]
 8007cc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007cc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cd2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cd4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007cd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cda:	e841 2300 	strex	r3, r2, [r1]
 8007cde:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ce0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1e6      	bne.n	8007cb4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ce6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3308      	adds	r3, #8
 8007cec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf0:	e853 3f00 	ldrex	r3, [r3]
 8007cf4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cf8:	f023 0301 	bic.w	r3, r3, #1
 8007cfc:	667b      	str	r3, [r7, #100]	@ 0x64
 8007cfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3308      	adds	r3, #8
 8007d04:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007d06:	647a      	str	r2, [r7, #68]	@ 0x44
 8007d08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d0e:	e841 2300 	strex	r3, r2, [r1]
 8007d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1e5      	bne.n	8007ce6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	3308      	adds	r3, #8
 8007d20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d24:	e853 3f00 	ldrex	r3, [r3]
 8007d28:	623b      	str	r3, [r7, #32]
   return(result);
 8007d2a:	6a3b      	ldr	r3, [r7, #32]
 8007d2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d30:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	3308      	adds	r3, #8
 8007d38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007d3a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d42:	e841 2300 	strex	r3, r2, [r1]
 8007d46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1e5      	bne.n	8007d1a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d50:	2220      	movs	r2, #32
 8007d52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d118      	bne.n	8007d90 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f023 0310 	bic.w	r3, r3, #16
 8007d72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d7c:	61fb      	str	r3, [r7, #28]
 8007d7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d80:	69b9      	ldr	r1, [r7, #24]
 8007d82:	69fa      	ldr	r2, [r7, #28]
 8007d84:	e841 2300 	strex	r3, r2, [r1]
 8007d88:	617b      	str	r3, [r7, #20]
   return(result);
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1e6      	bne.n	8007d5e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d92:	2200      	movs	r2, #0
 8007d94:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d107      	bne.n	8007dae <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007da0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007da4:	4619      	mov	r1, r3
 8007da6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007da8:	f7ff f908 	bl	8006fbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007dac:	e002      	b.n	8007db4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007dae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007db0:	f7ff f8e6 	bl	8006f80 <HAL_UART_RxCpltCallback>
}
 8007db4:	bf00      	nop
 8007db6:	3770      	adds	r7, #112	@ 0x70
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dc8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d109      	bne.n	8007dec <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007dde:	085b      	lsrs	r3, r3, #1
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	4619      	mov	r1, r3
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f7ff f8e9 	bl	8006fbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007dea:	e002      	b.n	8007df2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f7ff f8d1 	bl	8006f94 <HAL_UART_RxHalfCpltCallback>
}
 8007df2:	bf00      	nop
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b086      	sub	sp, #24
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e06:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e0e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e22:	2b80      	cmp	r3, #128	@ 0x80
 8007e24:	d109      	bne.n	8007e3a <UART_DMAError+0x40>
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	2b21      	cmp	r3, #33	@ 0x21
 8007e2a:	d106      	bne.n	8007e3a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007e34:	6978      	ldr	r0, [r7, #20]
 8007e36:	f7ff fe29 	bl	8007a8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e44:	2b40      	cmp	r3, #64	@ 0x40
 8007e46:	d109      	bne.n	8007e5c <UART_DMAError+0x62>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2b22      	cmp	r3, #34	@ 0x22
 8007e4c:	d106      	bne.n	8007e5c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007e56:	6978      	ldr	r0, [r7, #20]
 8007e58:	f7ff fe59 	bl	8007b0e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e62:	f043 0210 	orr.w	r2, r3, #16
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e6c:	6978      	ldr	r0, [r7, #20]
 8007e6e:	f7ff f89b 	bl	8006fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e72:	bf00      	nop
 8007e74:	3718      	adds	r7, #24
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b084      	sub	sp, #16
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f7ff f889 	bl	8006fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e96:	bf00      	nop
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b088      	sub	sp, #32
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	e853 3f00 	ldrex	r3, [r3]
 8007eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007eba:	61fb      	str	r3, [r7, #28]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	61bb      	str	r3, [r7, #24]
 8007ec6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec8:	6979      	ldr	r1, [r7, #20]
 8007eca:	69ba      	ldr	r2, [r7, #24]
 8007ecc:	e841 2300 	strex	r3, r2, [r1]
 8007ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1e6      	bne.n	8007ea6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2220      	movs	r2, #32
 8007edc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f7ff f836 	bl	8006f58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eec:	bf00      	nop
 8007eee:	3720      	adds	r7, #32
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d101      	bne.n	8007f46 <HAL_UARTEx_DisableFifoMode+0x16>
 8007f42:	2302      	movs	r3, #2
 8007f44:	e027      	b.n	8007f96 <HAL_UARTEx_DisableFifoMode+0x66>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2224      	movs	r2, #36	@ 0x24
 8007f52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f022 0201 	bic.w	r2, r2, #1
 8007f6c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2220      	movs	r2, #32
 8007f88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3714      	adds	r7, #20
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr

08007fa2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b084      	sub	sp, #16
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d101      	bne.n	8007fba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	e02d      	b.n	8008016 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2224      	movs	r2, #36	@ 0x24
 8007fc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f022 0201 	bic.w	r2, r2, #1
 8007fe0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	430a      	orrs	r2, r1
 8007ff4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f850 	bl	800809c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2220      	movs	r2, #32
 8008008:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b084      	sub	sp, #16
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
 8008026:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800802e:	2b01      	cmp	r3, #1
 8008030:	d101      	bne.n	8008036 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008032:	2302      	movs	r3, #2
 8008034:	e02d      	b.n	8008092 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2224      	movs	r2, #36	@ 0x24
 8008042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f022 0201 	bic.w	r2, r2, #1
 800805c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	683a      	ldr	r2, [r7, #0]
 800806e:	430a      	orrs	r2, r1
 8008070:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f812 	bl	800809c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2220      	movs	r2, #32
 8008084:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
	...

0800809c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d108      	bne.n	80080be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80080bc:	e031      	b.n	8008122 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80080be:	2308      	movs	r3, #8
 80080c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80080c2:	2308      	movs	r3, #8
 80080c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	0e5b      	lsrs	r3, r3, #25
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	f003 0307 	and.w	r3, r3, #7
 80080d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	0f5b      	lsrs	r3, r3, #29
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	f003 0307 	and.w	r3, r3, #7
 80080e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080e6:	7bbb      	ldrb	r3, [r7, #14]
 80080e8:	7b3a      	ldrb	r2, [r7, #12]
 80080ea:	4911      	ldr	r1, [pc, #68]	@ (8008130 <UARTEx_SetNbDataToProcess+0x94>)
 80080ec:	5c8a      	ldrb	r2, [r1, r2]
 80080ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080f2:	7b3a      	ldrb	r2, [r7, #12]
 80080f4:	490f      	ldr	r1, [pc, #60]	@ (8008134 <UARTEx_SetNbDataToProcess+0x98>)
 80080f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008104:	7bfb      	ldrb	r3, [r7, #15]
 8008106:	7b7a      	ldrb	r2, [r7, #13]
 8008108:	4909      	ldr	r1, [pc, #36]	@ (8008130 <UARTEx_SetNbDataToProcess+0x94>)
 800810a:	5c8a      	ldrb	r2, [r1, r2]
 800810c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008110:	7b7a      	ldrb	r2, [r7, #13]
 8008112:	4908      	ldr	r1, [pc, #32]	@ (8008134 <UARTEx_SetNbDataToProcess+0x98>)
 8008114:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008116:	fb93 f3f2 	sdiv	r3, r3, r2
 800811a:	b29a      	uxth	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008122:	bf00      	nop
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	080199a4 	.word	0x080199a4
 8008134:	080199ac 	.word	0x080199ac

08008138 <__NVIC_SetPriority>:
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	4603      	mov	r3, r0
 8008140:	6039      	str	r1, [r7, #0]
 8008142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008148:	2b00      	cmp	r3, #0
 800814a:	db0a      	blt.n	8008162 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	b2da      	uxtb	r2, r3
 8008150:	490c      	ldr	r1, [pc, #48]	@ (8008184 <__NVIC_SetPriority+0x4c>)
 8008152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008156:	0112      	lsls	r2, r2, #4
 8008158:	b2d2      	uxtb	r2, r2
 800815a:	440b      	add	r3, r1
 800815c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008160:	e00a      	b.n	8008178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	b2da      	uxtb	r2, r3
 8008166:	4908      	ldr	r1, [pc, #32]	@ (8008188 <__NVIC_SetPriority+0x50>)
 8008168:	79fb      	ldrb	r3, [r7, #7]
 800816a:	f003 030f 	and.w	r3, r3, #15
 800816e:	3b04      	subs	r3, #4
 8008170:	0112      	lsls	r2, r2, #4
 8008172:	b2d2      	uxtb	r2, r2
 8008174:	440b      	add	r3, r1
 8008176:	761a      	strb	r2, [r3, #24]
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr
 8008184:	e000e100 	.word	0xe000e100
 8008188:	e000ed00 	.word	0xe000ed00

0800818c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800818c:	b580      	push	{r7, lr}
 800818e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008190:	4b05      	ldr	r3, [pc, #20]	@ (80081a8 <SysTick_Handler+0x1c>)
 8008192:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008194:	f001 fd40 	bl	8009c18 <xTaskGetSchedulerState>
 8008198:	4603      	mov	r3, r0
 800819a:	2b01      	cmp	r3, #1
 800819c:	d001      	beq.n	80081a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800819e:	f002 fb3b 	bl	800a818 <xPortSysTickHandler>
  }
}
 80081a2:	bf00      	nop
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	e000e010 	.word	0xe000e010

080081ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80081ac:	b580      	push	{r7, lr}
 80081ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80081b0:	2100      	movs	r1, #0
 80081b2:	f06f 0004 	mvn.w	r0, #4
 80081b6:	f7ff ffbf 	bl	8008138 <__NVIC_SetPriority>
#endif
}
 80081ba:	bf00      	nop
 80081bc:	bd80      	pop	{r7, pc}
	...

080081c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081c6:	f3ef 8305 	mrs	r3, IPSR
 80081ca:	603b      	str	r3, [r7, #0]
  return(result);
 80081cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d003      	beq.n	80081da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80081d2:	f06f 0305 	mvn.w	r3, #5
 80081d6:	607b      	str	r3, [r7, #4]
 80081d8:	e00c      	b.n	80081f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80081da:	4b0a      	ldr	r3, [pc, #40]	@ (8008204 <osKernelInitialize+0x44>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d105      	bne.n	80081ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80081e2:	4b08      	ldr	r3, [pc, #32]	@ (8008204 <osKernelInitialize+0x44>)
 80081e4:	2201      	movs	r2, #1
 80081e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80081e8:	2300      	movs	r3, #0
 80081ea:	607b      	str	r3, [r7, #4]
 80081ec:	e002      	b.n	80081f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80081ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80081f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80081f4:	687b      	ldr	r3, [r7, #4]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	370c      	adds	r7, #12
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	20004cbc 	.word	0x20004cbc

08008208 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800820e:	f3ef 8305 	mrs	r3, IPSR
 8008212:	603b      	str	r3, [r7, #0]
  return(result);
 8008214:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008216:	2b00      	cmp	r3, #0
 8008218:	d003      	beq.n	8008222 <osKernelStart+0x1a>
    stat = osErrorISR;
 800821a:	f06f 0305 	mvn.w	r3, #5
 800821e:	607b      	str	r3, [r7, #4]
 8008220:	e010      	b.n	8008244 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008222:	4b0b      	ldr	r3, [pc, #44]	@ (8008250 <osKernelStart+0x48>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2b01      	cmp	r3, #1
 8008228:	d109      	bne.n	800823e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800822a:	f7ff ffbf 	bl	80081ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800822e:	4b08      	ldr	r3, [pc, #32]	@ (8008250 <osKernelStart+0x48>)
 8008230:	2202      	movs	r2, #2
 8008232:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008234:	f001 f87a 	bl	800932c <vTaskStartScheduler>
      stat = osOK;
 8008238:	2300      	movs	r3, #0
 800823a:	607b      	str	r3, [r7, #4]
 800823c:	e002      	b.n	8008244 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800823e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008242:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008244:	687b      	ldr	r3, [r7, #4]
}
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20004cbc 	.word	0x20004cbc

08008254 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008254:	b580      	push	{r7, lr}
 8008256:	b08e      	sub	sp, #56	@ 0x38
 8008258:	af04      	add	r7, sp, #16
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008260:	2300      	movs	r3, #0
 8008262:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008264:	f3ef 8305 	mrs	r3, IPSR
 8008268:	617b      	str	r3, [r7, #20]
  return(result);
 800826a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800826c:	2b00      	cmp	r3, #0
 800826e:	d17e      	bne.n	800836e <osThreadNew+0x11a>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d07b      	beq.n	800836e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008276:	2380      	movs	r3, #128	@ 0x80
 8008278:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800827a:	2318      	movs	r3, #24
 800827c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800827e:	2300      	movs	r3, #0
 8008280:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008282:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008286:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d045      	beq.n	800831a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d002      	beq.n	800829c <osThreadNew+0x48>
        name = attr->name;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d008      	beq.n	80082c2 <osThreadNew+0x6e>
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	2b38      	cmp	r3, #56	@ 0x38
 80082b4:	d805      	bhi.n	80082c2 <osThreadNew+0x6e>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d001      	beq.n	80082c6 <osThreadNew+0x72>
        return (NULL);
 80082c2:	2300      	movs	r3, #0
 80082c4:	e054      	b.n	8008370 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d003      	beq.n	80082d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	089b      	lsrs	r3, r3, #2
 80082d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00e      	beq.n	80082fc <osThreadNew+0xa8>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	2b5b      	cmp	r3, #91	@ 0x5b
 80082e4:	d90a      	bls.n	80082fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d006      	beq.n	80082fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d002      	beq.n	80082fc <osThreadNew+0xa8>
        mem = 1;
 80082f6:	2301      	movs	r3, #1
 80082f8:	61bb      	str	r3, [r7, #24]
 80082fa:	e010      	b.n	800831e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10c      	bne.n	800831e <osThreadNew+0xca>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d108      	bne.n	800831e <osThreadNew+0xca>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d104      	bne.n	800831e <osThreadNew+0xca>
          mem = 0;
 8008314:	2300      	movs	r3, #0
 8008316:	61bb      	str	r3, [r7, #24]
 8008318:	e001      	b.n	800831e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800831a:	2300      	movs	r3, #0
 800831c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d110      	bne.n	8008346 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800832c:	9202      	str	r2, [sp, #8]
 800832e:	9301      	str	r3, [sp, #4]
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	6a3a      	ldr	r2, [r7, #32]
 8008338:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f000 fe1a 	bl	8008f74 <xTaskCreateStatic>
 8008340:	4603      	mov	r3, r0
 8008342:	613b      	str	r3, [r7, #16]
 8008344:	e013      	b.n	800836e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d110      	bne.n	800836e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800834c:	6a3b      	ldr	r3, [r7, #32]
 800834e:	b29a      	uxth	r2, r3
 8008350:	f107 0310 	add.w	r3, r7, #16
 8008354:	9301      	str	r3, [sp, #4]
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	9300      	str	r3, [sp, #0]
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f000 fe68 	bl	8009034 <xTaskCreate>
 8008364:	4603      	mov	r3, r0
 8008366:	2b01      	cmp	r3, #1
 8008368:	d001      	beq.n	800836e <osThreadNew+0x11a>
            hTask = NULL;
 800836a:	2300      	movs	r3, #0
 800836c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800836e:	693b      	ldr	r3, [r7, #16]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3728      	adds	r7, #40	@ 0x28
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008380:	f3ef 8305 	mrs	r3, IPSR
 8008384:	60bb      	str	r3, [r7, #8]
  return(result);
 8008386:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008388:	2b00      	cmp	r3, #0
 800838a:	d003      	beq.n	8008394 <osDelay+0x1c>
    stat = osErrorISR;
 800838c:	f06f 0305 	mvn.w	r3, #5
 8008390:	60fb      	str	r3, [r7, #12]
 8008392:	e007      	b.n	80083a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008394:	2300      	movs	r3, #0
 8008396:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d002      	beq.n	80083a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 ff8e 	bl	80092c0 <vTaskDelay>
    }
  }

  return (stat);
 80083a4:	68fb      	ldr	r3, [r7, #12]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
	...

080083b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	4a07      	ldr	r2, [pc, #28]	@ (80083dc <vApplicationGetIdleTaskMemory+0x2c>)
 80083c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	4a06      	ldr	r2, [pc, #24]	@ (80083e0 <vApplicationGetIdleTaskMemory+0x30>)
 80083c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2280      	movs	r2, #128	@ 0x80
 80083cc:	601a      	str	r2, [r3, #0]
}
 80083ce:	bf00      	nop
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	20004cc0 	.word	0x20004cc0
 80083e0:	20004d1c 	.word	0x20004d1c

080083e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	4a07      	ldr	r2, [pc, #28]	@ (8008410 <vApplicationGetTimerTaskMemory+0x2c>)
 80083f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	4a06      	ldr	r2, [pc, #24]	@ (8008414 <vApplicationGetTimerTaskMemory+0x30>)
 80083fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008402:	601a      	str	r2, [r3, #0]
}
 8008404:	bf00      	nop
 8008406:	3714      	adds	r7, #20
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr
 8008410:	20004f1c 	.word	0x20004f1c
 8008414:	20004f78 	.word	0x20004f78

08008418 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f103 0208 	add.w	r2, r3, #8
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008430:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f103 0208 	add.w	r2, r3, #8
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f103 0208 	add.w	r2, r3, #8
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008466:	bf00      	nop
 8008468:	370c      	adds	r7, #12
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008472:	b480      	push	{r7}
 8008474:	b085      	sub	sp, #20
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	689a      	ldr	r2, [r3, #8]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	1c5a      	adds	r2, r3, #1
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	601a      	str	r2, [r3, #0]
}
 80084ae:	bf00      	nop
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084ba:	b480      	push	{r7}
 80084bc:	b085      	sub	sp, #20
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084d0:	d103      	bne.n	80084da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	60fb      	str	r3, [r7, #12]
 80084d8:	e00c      	b.n	80084f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	3308      	adds	r3, #8
 80084de:	60fb      	str	r3, [r7, #12]
 80084e0:	e002      	b.n	80084e8 <vListInsert+0x2e>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	60fb      	str	r3, [r7, #12]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d2f6      	bcs.n	80084e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	685a      	ldr	r2, [r3, #4]
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	683a      	ldr	r2, [r7, #0]
 8008502:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	1c5a      	adds	r2, r3, #1
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	601a      	str	r2, [r3, #0]
}
 8008520:	bf00      	nop
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	6892      	ldr	r2, [r2, #8]
 8008542:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	6852      	ldr	r2, [r2, #4]
 800854c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	429a      	cmp	r2, r3
 8008556:	d103      	bne.n	8008560 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	689a      	ldr	r2, [r3, #8]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	1e5a      	subs	r2, r3, #1
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10b      	bne.n	80085ac <xQueueGenericReset+0x2c>
	__asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	60bb      	str	r3, [r7, #8]
}
 80085a6:	bf00      	nop
 80085a8:	bf00      	nop
 80085aa:	e7fd      	b.n	80085a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80085ac:	f002 f8a4 	bl	800a6f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085b8:	68f9      	ldr	r1, [r7, #12]
 80085ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80085bc:	fb01 f303 	mul.w	r3, r1, r3
 80085c0:	441a      	add	r2, r3
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085dc:	3b01      	subs	r3, #1
 80085de:	68f9      	ldr	r1, [r7, #12]
 80085e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80085e2:	fb01 f303 	mul.w	r3, r1, r3
 80085e6:	441a      	add	r2, r3
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	22ff      	movs	r2, #255	@ 0xff
 80085f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	22ff      	movs	r2, #255	@ 0xff
 80085f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d114      	bne.n	800862c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d01a      	beq.n	8008640 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	3310      	adds	r3, #16
 800860e:	4618      	mov	r0, r3
 8008610:	f001 f91a 	bl	8009848 <xTaskRemoveFromEventList>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d012      	beq.n	8008640 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800861a:	4b0d      	ldr	r3, [pc, #52]	@ (8008650 <xQueueGenericReset+0xd0>)
 800861c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008620:	601a      	str	r2, [r3, #0]
 8008622:	f3bf 8f4f 	dsb	sy
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	e009      	b.n	8008640 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	3310      	adds	r3, #16
 8008630:	4618      	mov	r0, r3
 8008632:	f7ff fef1 	bl	8008418 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	3324      	adds	r3, #36	@ 0x24
 800863a:	4618      	mov	r0, r3
 800863c:	f7ff feec 	bl	8008418 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008640:	f002 f88c 	bl	800a75c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008644:	2301      	movs	r3, #1
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	e000ed04 	.word	0xe000ed04

08008654 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008654:	b580      	push	{r7, lr}
 8008656:	b08e      	sub	sp, #56	@ 0x38
 8008658:	af02      	add	r7, sp, #8
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
 8008660:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10b      	bne.n	8008680 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800866c:	f383 8811 	msr	BASEPRI, r3
 8008670:	f3bf 8f6f 	isb	sy
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800867a:	bf00      	nop
 800867c:	bf00      	nop
 800867e:	e7fd      	b.n	800867c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10b      	bne.n	800869e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800868a:	f383 8811 	msr	BASEPRI, r3
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008698:	bf00      	nop
 800869a:	bf00      	nop
 800869c:	e7fd      	b.n	800869a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d002      	beq.n	80086aa <xQueueGenericCreateStatic+0x56>
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d001      	beq.n	80086ae <xQueueGenericCreateStatic+0x5a>
 80086aa:	2301      	movs	r3, #1
 80086ac:	e000      	b.n	80086b0 <xQueueGenericCreateStatic+0x5c>
 80086ae:	2300      	movs	r3, #0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d10b      	bne.n	80086cc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80086b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b8:	f383 8811 	msr	BASEPRI, r3
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	623b      	str	r3, [r7, #32]
}
 80086c6:	bf00      	nop
 80086c8:	bf00      	nop
 80086ca:	e7fd      	b.n	80086c8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d102      	bne.n	80086d8 <xQueueGenericCreateStatic+0x84>
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d101      	bne.n	80086dc <xQueueGenericCreateStatic+0x88>
 80086d8:	2301      	movs	r3, #1
 80086da:	e000      	b.n	80086de <xQueueGenericCreateStatic+0x8a>
 80086dc:	2300      	movs	r3, #0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10b      	bne.n	80086fa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80086e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	61fb      	str	r3, [r7, #28]
}
 80086f4:	bf00      	nop
 80086f6:	bf00      	nop
 80086f8:	e7fd      	b.n	80086f6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80086fa:	2350      	movs	r3, #80	@ 0x50
 80086fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	2b50      	cmp	r3, #80	@ 0x50
 8008702:	d00b      	beq.n	800871c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008708:	f383 8811 	msr	BASEPRI, r3
 800870c:	f3bf 8f6f 	isb	sy
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	61bb      	str	r3, [r7, #24]
}
 8008716:	bf00      	nop
 8008718:	bf00      	nop
 800871a:	e7fd      	b.n	8008718 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800871c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00d      	beq.n	8008744 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008730:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	4613      	mov	r3, r2
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	68b9      	ldr	r1, [r7, #8]
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f000 f805 	bl	800874e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008746:	4618      	mov	r0, r3
 8008748:	3730      	adds	r7, #48	@ 0x30
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b084      	sub	sp, #16
 8008752:	af00      	add	r7, sp, #0
 8008754:	60f8      	str	r0, [r7, #12]
 8008756:	60b9      	str	r1, [r7, #8]
 8008758:	607a      	str	r2, [r7, #4]
 800875a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d103      	bne.n	800876a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	69ba      	ldr	r2, [r7, #24]
 8008766:	601a      	str	r2, [r3, #0]
 8008768:	e002      	b.n	8008770 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800877c:	2101      	movs	r1, #1
 800877e:	69b8      	ldr	r0, [r7, #24]
 8008780:	f7ff fefe 	bl	8008580 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	78fa      	ldrb	r2, [r7, #3]
 8008788:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800878c:	bf00      	nop
 800878e:	3710      	adds	r7, #16
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b08e      	sub	sp, #56	@ 0x38
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
 80087a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80087a2:	2300      	movs	r3, #0
 80087a4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80087aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d10b      	bne.n	80087c8 <xQueueGenericSend+0x34>
	__asm volatile
 80087b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b4:	f383 8811 	msr	BASEPRI, r3
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80087c2:	bf00      	nop
 80087c4:	bf00      	nop
 80087c6:	e7fd      	b.n	80087c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d103      	bne.n	80087d6 <xQueueGenericSend+0x42>
 80087ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d101      	bne.n	80087da <xQueueGenericSend+0x46>
 80087d6:	2301      	movs	r3, #1
 80087d8:	e000      	b.n	80087dc <xQueueGenericSend+0x48>
 80087da:	2300      	movs	r3, #0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d10b      	bne.n	80087f8 <xQueueGenericSend+0x64>
	__asm volatile
 80087e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e4:	f383 8811 	msr	BASEPRI, r3
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80087f2:	bf00      	nop
 80087f4:	bf00      	nop
 80087f6:	e7fd      	b.n	80087f4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d103      	bne.n	8008806 <xQueueGenericSend+0x72>
 80087fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008802:	2b01      	cmp	r3, #1
 8008804:	d101      	bne.n	800880a <xQueueGenericSend+0x76>
 8008806:	2301      	movs	r3, #1
 8008808:	e000      	b.n	800880c <xQueueGenericSend+0x78>
 800880a:	2300      	movs	r3, #0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10b      	bne.n	8008828 <xQueueGenericSend+0x94>
	__asm volatile
 8008810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008814:	f383 8811 	msr	BASEPRI, r3
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	623b      	str	r3, [r7, #32]
}
 8008822:	bf00      	nop
 8008824:	bf00      	nop
 8008826:	e7fd      	b.n	8008824 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008828:	f001 f9f6 	bl	8009c18 <xTaskGetSchedulerState>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d102      	bne.n	8008838 <xQueueGenericSend+0xa4>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d101      	bne.n	800883c <xQueueGenericSend+0xa8>
 8008838:	2301      	movs	r3, #1
 800883a:	e000      	b.n	800883e <xQueueGenericSend+0xaa>
 800883c:	2300      	movs	r3, #0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10b      	bne.n	800885a <xQueueGenericSend+0xc6>
	__asm volatile
 8008842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008846:	f383 8811 	msr	BASEPRI, r3
 800884a:	f3bf 8f6f 	isb	sy
 800884e:	f3bf 8f4f 	dsb	sy
 8008852:	61fb      	str	r3, [r7, #28]
}
 8008854:	bf00      	nop
 8008856:	bf00      	nop
 8008858:	e7fd      	b.n	8008856 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800885a:	f001 ff4d 	bl	800a6f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800885e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008860:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008866:	429a      	cmp	r2, r3
 8008868:	d302      	bcc.n	8008870 <xQueueGenericSend+0xdc>
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	2b02      	cmp	r3, #2
 800886e:	d129      	bne.n	80088c4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008870:	683a      	ldr	r2, [r7, #0]
 8008872:	68b9      	ldr	r1, [r7, #8]
 8008874:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008876:	f000 fa0f 	bl	8008c98 <prvCopyDataToQueue>
 800887a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800887c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008880:	2b00      	cmp	r3, #0
 8008882:	d010      	beq.n	80088a6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008886:	3324      	adds	r3, #36	@ 0x24
 8008888:	4618      	mov	r0, r3
 800888a:	f000 ffdd 	bl	8009848 <xTaskRemoveFromEventList>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d013      	beq.n	80088bc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008894:	4b3f      	ldr	r3, [pc, #252]	@ (8008994 <xQueueGenericSend+0x200>)
 8008896:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800889a:	601a      	str	r2, [r3, #0]
 800889c:	f3bf 8f4f 	dsb	sy
 80088a0:	f3bf 8f6f 	isb	sy
 80088a4:	e00a      	b.n	80088bc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80088a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d007      	beq.n	80088bc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80088ac:	4b39      	ldr	r3, [pc, #228]	@ (8008994 <xQueueGenericSend+0x200>)
 80088ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088b2:	601a      	str	r2, [r3, #0]
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80088bc:	f001 ff4e 	bl	800a75c <vPortExitCritical>
				return pdPASS;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e063      	b.n	800898c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d103      	bne.n	80088d2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088ca:	f001 ff47 	bl	800a75c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80088ce:	2300      	movs	r3, #0
 80088d0:	e05c      	b.n	800898c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d106      	bne.n	80088e6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088d8:	f107 0314 	add.w	r3, r7, #20
 80088dc:	4618      	mov	r0, r3
 80088de:	f001 f83f 	bl	8009960 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088e2:	2301      	movs	r3, #1
 80088e4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088e6:	f001 ff39 	bl	800a75c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088ea:	f000 fd87 	bl	80093fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088ee:	f001 ff03 	bl	800a6f8 <vPortEnterCritical>
 80088f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088f8:	b25b      	sxtb	r3, r3
 80088fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088fe:	d103      	bne.n	8008908 <xQueueGenericSend+0x174>
 8008900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008902:	2200      	movs	r2, #0
 8008904:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800890a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800890e:	b25b      	sxtb	r3, r3
 8008910:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008914:	d103      	bne.n	800891e <xQueueGenericSend+0x18a>
 8008916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008918:	2200      	movs	r2, #0
 800891a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800891e:	f001 ff1d 	bl	800a75c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008922:	1d3a      	adds	r2, r7, #4
 8008924:	f107 0314 	add.w	r3, r7, #20
 8008928:	4611      	mov	r1, r2
 800892a:	4618      	mov	r0, r3
 800892c:	f001 f82e 	bl	800998c <xTaskCheckForTimeOut>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d124      	bne.n	8008980 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008936:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008938:	f000 faa6 	bl	8008e88 <prvIsQueueFull>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d018      	beq.n	8008974 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008944:	3310      	adds	r3, #16
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	4611      	mov	r1, r2
 800894a:	4618      	mov	r0, r3
 800894c:	f000 ff2a 	bl	80097a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008950:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008952:	f000 fa31 	bl	8008db8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008956:	f000 fd5f 	bl	8009418 <xTaskResumeAll>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	f47f af7c 	bne.w	800885a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008962:	4b0c      	ldr	r3, [pc, #48]	@ (8008994 <xQueueGenericSend+0x200>)
 8008964:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008968:	601a      	str	r2, [r3, #0]
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	e772      	b.n	800885a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008974:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008976:	f000 fa1f 	bl	8008db8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800897a:	f000 fd4d 	bl	8009418 <xTaskResumeAll>
 800897e:	e76c      	b.n	800885a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008980:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008982:	f000 fa19 	bl	8008db8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008986:	f000 fd47 	bl	8009418 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800898a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800898c:	4618      	mov	r0, r3
 800898e:	3738      	adds	r7, #56	@ 0x38
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	e000ed04 	.word	0xe000ed04

08008998 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b090      	sub	sp, #64	@ 0x40
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
 80089a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80089aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10b      	bne.n	80089c8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80089c2:	bf00      	nop
 80089c4:	bf00      	nop
 80089c6:	e7fd      	b.n	80089c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d103      	bne.n	80089d6 <xQueueGenericSendFromISR+0x3e>
 80089ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d101      	bne.n	80089da <xQueueGenericSendFromISR+0x42>
 80089d6:	2301      	movs	r3, #1
 80089d8:	e000      	b.n	80089dc <xQueueGenericSendFromISR+0x44>
 80089da:	2300      	movs	r3, #0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10b      	bne.n	80089f8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80089e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80089f2:	bf00      	nop
 80089f4:	bf00      	nop
 80089f6:	e7fd      	b.n	80089f4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d103      	bne.n	8008a06 <xQueueGenericSendFromISR+0x6e>
 80089fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d101      	bne.n	8008a0a <xQueueGenericSendFromISR+0x72>
 8008a06:	2301      	movs	r3, #1
 8008a08:	e000      	b.n	8008a0c <xQueueGenericSendFromISR+0x74>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10b      	bne.n	8008a28 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a14:	f383 8811 	msr	BASEPRI, r3
 8008a18:	f3bf 8f6f 	isb	sy
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	623b      	str	r3, [r7, #32]
}
 8008a22:	bf00      	nop
 8008a24:	bf00      	nop
 8008a26:	e7fd      	b.n	8008a24 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a28:	f001 ff46 	bl	800a8b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a2c:	f3ef 8211 	mrs	r2, BASEPRI
 8008a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a34:	f383 8811 	msr	BASEPRI, r3
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	61fa      	str	r2, [r7, #28]
 8008a42:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a44:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a46:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d302      	bcc.n	8008a5a <xQueueGenericSendFromISR+0xc2>
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d12f      	bne.n	8008aba <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a60:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	68b9      	ldr	r1, [r7, #8]
 8008a6e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008a70:	f000 f912 	bl	8008c98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a74:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008a78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a7c:	d112      	bne.n	8008aa4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d016      	beq.n	8008ab4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a88:	3324      	adds	r3, #36	@ 0x24
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 fedc 	bl	8009848 <xTaskRemoveFromEventList>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00e      	beq.n	8008ab4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00b      	beq.n	8008ab4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	601a      	str	r2, [r3, #0]
 8008aa2:	e007      	b.n	8008ab4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008aa4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	b25a      	sxtb	r2, r3
 8008aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008ab8:	e001      	b.n	8008abe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008aba:	2300      	movs	r3, #0
 8008abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ac0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ac8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3740      	adds	r7, #64	@ 0x40
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b08c      	sub	sp, #48	@ 0x30
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d10b      	bne.n	8008b06 <xQueueReceive+0x32>
	__asm volatile
 8008aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af2:	f383 8811 	msr	BASEPRI, r3
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	f3bf 8f4f 	dsb	sy
 8008afe:	623b      	str	r3, [r7, #32]
}
 8008b00:	bf00      	nop
 8008b02:	bf00      	nop
 8008b04:	e7fd      	b.n	8008b02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d103      	bne.n	8008b14 <xQueueReceive+0x40>
 8008b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d101      	bne.n	8008b18 <xQueueReceive+0x44>
 8008b14:	2301      	movs	r3, #1
 8008b16:	e000      	b.n	8008b1a <xQueueReceive+0x46>
 8008b18:	2300      	movs	r3, #0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d10b      	bne.n	8008b36 <xQueueReceive+0x62>
	__asm volatile
 8008b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b22:	f383 8811 	msr	BASEPRI, r3
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	f3bf 8f4f 	dsb	sy
 8008b2e:	61fb      	str	r3, [r7, #28]
}
 8008b30:	bf00      	nop
 8008b32:	bf00      	nop
 8008b34:	e7fd      	b.n	8008b32 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b36:	f001 f86f 	bl	8009c18 <xTaskGetSchedulerState>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d102      	bne.n	8008b46 <xQueueReceive+0x72>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d101      	bne.n	8008b4a <xQueueReceive+0x76>
 8008b46:	2301      	movs	r3, #1
 8008b48:	e000      	b.n	8008b4c <xQueueReceive+0x78>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10b      	bne.n	8008b68 <xQueueReceive+0x94>
	__asm volatile
 8008b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	61bb      	str	r3, [r7, #24]
}
 8008b62:	bf00      	nop
 8008b64:	bf00      	nop
 8008b66:	e7fd      	b.n	8008b64 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b68:	f001 fdc6 	bl	800a6f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b70:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d01f      	beq.n	8008bb8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b78:	68b9      	ldr	r1, [r7, #8]
 8008b7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b7c:	f000 f8f6 	bl	8008d6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b82:	1e5a      	subs	r2, r3, #1
 8008b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b86:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00f      	beq.n	8008bb0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b92:	3310      	adds	r3, #16
 8008b94:	4618      	mov	r0, r3
 8008b96:	f000 fe57 	bl	8009848 <xTaskRemoveFromEventList>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d007      	beq.n	8008bb0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ba0:	4b3c      	ldr	r3, [pc, #240]	@ (8008c94 <xQueueReceive+0x1c0>)
 8008ba2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ba6:	601a      	str	r2, [r3, #0]
 8008ba8:	f3bf 8f4f 	dsb	sy
 8008bac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008bb0:	f001 fdd4 	bl	800a75c <vPortExitCritical>
				return pdPASS;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e069      	b.n	8008c8c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d103      	bne.n	8008bc6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008bbe:	f001 fdcd 	bl	800a75c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e062      	b.n	8008c8c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d106      	bne.n	8008bda <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bcc:	f107 0310 	add.w	r3, r7, #16
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f000 fec5 	bl	8009960 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008bda:	f001 fdbf 	bl	800a75c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008bde:	f000 fc0d 	bl	80093fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008be2:	f001 fd89 	bl	800a6f8 <vPortEnterCritical>
 8008be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008bec:	b25b      	sxtb	r3, r3
 8008bee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008bf2:	d103      	bne.n	8008bfc <xQueueReceive+0x128>
 8008bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bfe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c02:	b25b      	sxtb	r3, r3
 8008c04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c08:	d103      	bne.n	8008c12 <xQueueReceive+0x13e>
 8008c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c12:	f001 fda3 	bl	800a75c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c16:	1d3a      	adds	r2, r7, #4
 8008c18:	f107 0310 	add.w	r3, r7, #16
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 feb4 	bl	800998c <xTaskCheckForTimeOut>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d123      	bne.n	8008c72 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c2c:	f000 f916 	bl	8008e5c <prvIsQueueEmpty>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d017      	beq.n	8008c66 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c38:	3324      	adds	r3, #36	@ 0x24
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f000 fdb0 	bl	80097a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c46:	f000 f8b7 	bl	8008db8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c4a:	f000 fbe5 	bl	8009418 <xTaskResumeAll>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d189      	bne.n	8008b68 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008c54:	4b0f      	ldr	r3, [pc, #60]	@ (8008c94 <xQueueReceive+0x1c0>)
 8008c56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c5a:	601a      	str	r2, [r3, #0]
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	f3bf 8f6f 	isb	sy
 8008c64:	e780      	b.n	8008b68 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c68:	f000 f8a6 	bl	8008db8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c6c:	f000 fbd4 	bl	8009418 <xTaskResumeAll>
 8008c70:	e77a      	b.n	8008b68 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c74:	f000 f8a0 	bl	8008db8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c78:	f000 fbce 	bl	8009418 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c7e:	f000 f8ed 	bl	8008e5c <prvIsQueueEmpty>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f43f af6f 	beq.w	8008b68 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c8a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3730      	adds	r7, #48	@ 0x30
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	e000ed04 	.word	0xe000ed04

08008c98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b086      	sub	sp, #24
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d10d      	bne.n	8008cd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d14d      	bne.n	8008d5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 ffc6 	bl	8009c54 <xTaskPriorityDisinherit>
 8008cc8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	609a      	str	r2, [r3, #8]
 8008cd0:	e043      	b.n	8008d5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d119      	bne.n	8008d0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6858      	ldr	r0, [r3, #4]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	68b9      	ldr	r1, [r7, #8]
 8008ce4:	f00f ff9d 	bl	8018c22 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cf0:	441a      	add	r2, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	685a      	ldr	r2, [r3, #4]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d32b      	bcc.n	8008d5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	605a      	str	r2, [r3, #4]
 8008d0a:	e026      	b.n	8008d5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	68d8      	ldr	r0, [r3, #12]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d14:	461a      	mov	r2, r3
 8008d16:	68b9      	ldr	r1, [r7, #8]
 8008d18:	f00f ff83 	bl	8018c22 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	68da      	ldr	r2, [r3, #12]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d24:	425b      	negs	r3, r3
 8008d26:	441a      	add	r2, r3
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	68da      	ldr	r2, [r3, #12]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d207      	bcs.n	8008d48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	689a      	ldr	r2, [r3, #8]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d40:	425b      	negs	r3, r3
 8008d42:	441a      	add	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d105      	bne.n	8008d5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d002      	beq.n	8008d5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	3b01      	subs	r3, #1
 8008d58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	1c5a      	adds	r2, r3, #1
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008d62:	697b      	ldr	r3, [r7, #20]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3718      	adds	r7, #24
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d018      	beq.n	8008db0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	68da      	ldr	r2, [r3, #12]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d86:	441a      	add	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	68da      	ldr	r2, [r3, #12]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d303      	bcc.n	8008da0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68d9      	ldr	r1, [r3, #12]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008da8:	461a      	mov	r2, r3
 8008daa:	6838      	ldr	r0, [r7, #0]
 8008dac:	f00f ff39 	bl	8018c22 <memcpy>
	}
}
 8008db0:	bf00      	nop
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008dc0:	f001 fc9a 	bl	800a6f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008dca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008dcc:	e011      	b.n	8008df2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d012      	beq.n	8008dfc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	3324      	adds	r3, #36	@ 0x24
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 fd34 	bl	8009848 <xTaskRemoveFromEventList>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d001      	beq.n	8008dea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008de6:	f000 fe35 	bl	8009a54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008dea:	7bfb      	ldrb	r3, [r7, #15]
 8008dec:	3b01      	subs	r3, #1
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	dce9      	bgt.n	8008dce <prvUnlockQueue+0x16>
 8008dfa:	e000      	b.n	8008dfe <prvUnlockQueue+0x46>
					break;
 8008dfc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	22ff      	movs	r2, #255	@ 0xff
 8008e02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008e06:	f001 fca9 	bl	800a75c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e0a:	f001 fc75 	bl	800a6f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e16:	e011      	b.n	8008e3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d012      	beq.n	8008e46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	3310      	adds	r3, #16
 8008e24:	4618      	mov	r0, r3
 8008e26:	f000 fd0f 	bl	8009848 <xTaskRemoveFromEventList>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d001      	beq.n	8008e34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008e30:	f000 fe10 	bl	8009a54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e34:	7bbb      	ldrb	r3, [r7, #14]
 8008e36:	3b01      	subs	r3, #1
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	dce9      	bgt.n	8008e18 <prvUnlockQueue+0x60>
 8008e44:	e000      	b.n	8008e48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	22ff      	movs	r2, #255	@ 0xff
 8008e4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008e50:	f001 fc84 	bl	800a75c <vPortExitCritical>
}
 8008e54:	bf00      	nop
 8008e56:	3710      	adds	r7, #16
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e64:	f001 fc48 	bl	800a6f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d102      	bne.n	8008e76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e70:	2301      	movs	r3, #1
 8008e72:	60fb      	str	r3, [r7, #12]
 8008e74:	e001      	b.n	8008e7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e76:	2300      	movs	r3, #0
 8008e78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e7a:	f001 fc6f 	bl	800a75c <vPortExitCritical>

	return xReturn;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3710      	adds	r7, #16
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e90:	f001 fc32 	bl	800a6f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d102      	bne.n	8008ea6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	60fb      	str	r3, [r7, #12]
 8008ea4:	e001      	b.n	8008eaa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008eaa:	f001 fc57 	bl	800a75c <vPortExitCritical>

	return xReturn;
 8008eae:	68fb      	ldr	r3, [r7, #12]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	60fb      	str	r3, [r7, #12]
 8008ec6:	e014      	b.n	8008ef2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ec8:	4a0f      	ldr	r2, [pc, #60]	@ (8008f08 <vQueueAddToRegistry+0x50>)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10b      	bne.n	8008eec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ed4:	490c      	ldr	r1, [pc, #48]	@ (8008f08 <vQueueAddToRegistry+0x50>)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	683a      	ldr	r2, [r7, #0]
 8008eda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008ede:	4a0a      	ldr	r2, [pc, #40]	@ (8008f08 <vQueueAddToRegistry+0x50>)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	00db      	lsls	r3, r3, #3
 8008ee4:	4413      	add	r3, r2
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008eea:	e006      	b.n	8008efa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	60fb      	str	r3, [r7, #12]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2b07      	cmp	r3, #7
 8008ef6:	d9e7      	bls.n	8008ec8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ef8:	bf00      	nop
 8008efa:	bf00      	nop
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	20005378 	.word	0x20005378

08008f0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b086      	sub	sp, #24
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008f1c:	f001 fbec 	bl	800a6f8 <vPortEnterCritical>
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f26:	b25b      	sxtb	r3, r3
 8008f28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f2c:	d103      	bne.n	8008f36 <vQueueWaitForMessageRestricted+0x2a>
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f3c:	b25b      	sxtb	r3, r3
 8008f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f42:	d103      	bne.n	8008f4c <vQueueWaitForMessageRestricted+0x40>
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f4c:	f001 fc06 	bl	800a75c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d106      	bne.n	8008f66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	3324      	adds	r3, #36	@ 0x24
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	68b9      	ldr	r1, [r7, #8]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f000 fc45 	bl	80097f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008f66:	6978      	ldr	r0, [r7, #20]
 8008f68:	f7ff ff26 	bl	8008db8 <prvUnlockQueue>
	}
 8008f6c:	bf00      	nop
 8008f6e:	3718      	adds	r7, #24
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b08e      	sub	sp, #56	@ 0x38
 8008f78:	af04      	add	r7, sp, #16
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
 8008f80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10b      	bne.n	8008fa0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	623b      	str	r3, [r7, #32]
}
 8008f9a:	bf00      	nop
 8008f9c:	bf00      	nop
 8008f9e:	e7fd      	b.n	8008f9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10b      	bne.n	8008fbe <xTaskCreateStatic+0x4a>
	__asm volatile
 8008fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008faa:	f383 8811 	msr	BASEPRI, r3
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	61fb      	str	r3, [r7, #28]
}
 8008fb8:	bf00      	nop
 8008fba:	bf00      	nop
 8008fbc:	e7fd      	b.n	8008fba <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008fbe:	235c      	movs	r3, #92	@ 0x5c
 8008fc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	2b5c      	cmp	r3, #92	@ 0x5c
 8008fc6:	d00b      	beq.n	8008fe0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fcc:	f383 8811 	msr	BASEPRI, r3
 8008fd0:	f3bf 8f6f 	isb	sy
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	61bb      	str	r3, [r7, #24]
}
 8008fda:	bf00      	nop
 8008fdc:	bf00      	nop
 8008fde:	e7fd      	b.n	8008fdc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008fe0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d01e      	beq.n	8009026 <xTaskCreateStatic+0xb2>
 8008fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d01b      	beq.n	8009026 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ff6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffa:	2202      	movs	r2, #2
 8008ffc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009000:	2300      	movs	r3, #0
 8009002:	9303      	str	r3, [sp, #12]
 8009004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009006:	9302      	str	r3, [sp, #8]
 8009008:	f107 0314 	add.w	r3, r7, #20
 800900c:	9301      	str	r3, [sp, #4]
 800900e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	68b9      	ldr	r1, [r7, #8]
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f000 f850 	bl	80090be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800901e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009020:	f000 f8de 	bl	80091e0 <prvAddNewTaskToReadyList>
 8009024:	e001      	b.n	800902a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009026:	2300      	movs	r3, #0
 8009028:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800902a:	697b      	ldr	r3, [r7, #20]
	}
 800902c:	4618      	mov	r0, r3
 800902e:	3728      	adds	r7, #40	@ 0x28
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009034:	b580      	push	{r7, lr}
 8009036:	b08c      	sub	sp, #48	@ 0x30
 8009038:	af04      	add	r7, sp, #16
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	603b      	str	r3, [r7, #0]
 8009040:	4613      	mov	r3, r2
 8009042:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009044:	88fb      	ldrh	r3, [r7, #6]
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	4618      	mov	r0, r3
 800904a:	f001 fc77 	bl	800a93c <pvPortMalloc>
 800904e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00e      	beq.n	8009074 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009056:	205c      	movs	r0, #92	@ 0x5c
 8009058:	f001 fc70 	bl	800a93c <pvPortMalloc>
 800905c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d003      	beq.n	800906c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	697a      	ldr	r2, [r7, #20]
 8009068:	631a      	str	r2, [r3, #48]	@ 0x30
 800906a:	e005      	b.n	8009078 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800906c:	6978      	ldr	r0, [r7, #20]
 800906e:	f001 fd33 	bl	800aad8 <vPortFree>
 8009072:	e001      	b.n	8009078 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009074:	2300      	movs	r3, #0
 8009076:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d017      	beq.n	80090ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	2200      	movs	r2, #0
 8009082:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009086:	88fa      	ldrh	r2, [r7, #6]
 8009088:	2300      	movs	r3, #0
 800908a:	9303      	str	r3, [sp, #12]
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	9302      	str	r3, [sp, #8]
 8009090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009092:	9301      	str	r3, [sp, #4]
 8009094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009096:	9300      	str	r3, [sp, #0]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	68b9      	ldr	r1, [r7, #8]
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f000 f80e 	bl	80090be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090a2:	69f8      	ldr	r0, [r7, #28]
 80090a4:	f000 f89c 	bl	80091e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80090a8:	2301      	movs	r3, #1
 80090aa:	61bb      	str	r3, [r7, #24]
 80090ac:	e002      	b.n	80090b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80090ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80090b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80090b4:	69bb      	ldr	r3, [r7, #24]
	}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3720      	adds	r7, #32
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b088      	sub	sp, #32
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	60f8      	str	r0, [r7, #12]
 80090c6:	60b9      	str	r1, [r7, #8]
 80090c8:	607a      	str	r2, [r7, #4]
 80090ca:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80090cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ce:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	461a      	mov	r2, r3
 80090d6:	21a5      	movs	r1, #165	@ 0xa5
 80090d8:	f00f fcda 	bl	8018a90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80090dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80090e6:	3b01      	subs	r3, #1
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	4413      	add	r3, r2
 80090ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	f023 0307 	bic.w	r3, r3, #7
 80090f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	f003 0307 	and.w	r3, r3, #7
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00b      	beq.n	8009118 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009104:	f383 8811 	msr	BASEPRI, r3
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	617b      	str	r3, [r7, #20]
}
 8009112:	bf00      	nop
 8009114:	bf00      	nop
 8009116:	e7fd      	b.n	8009114 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d01f      	beq.n	800915e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800911e:	2300      	movs	r3, #0
 8009120:	61fb      	str	r3, [r7, #28]
 8009122:	e012      	b.n	800914a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	4413      	add	r3, r2
 800912a:	7819      	ldrb	r1, [r3, #0]
 800912c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	4413      	add	r3, r2
 8009132:	3334      	adds	r3, #52	@ 0x34
 8009134:	460a      	mov	r2, r1
 8009136:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	4413      	add	r3, r2
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d006      	beq.n	8009152 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	3301      	adds	r3, #1
 8009148:	61fb      	str	r3, [r7, #28]
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	2b0f      	cmp	r3, #15
 800914e:	d9e9      	bls.n	8009124 <prvInitialiseNewTask+0x66>
 8009150:	e000      	b.n	8009154 <prvInitialiseNewTask+0x96>
			{
				break;
 8009152:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009156:	2200      	movs	r2, #0
 8009158:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800915c:	e003      	b.n	8009166 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800915e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009160:	2200      	movs	r2, #0
 8009162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009168:	2b37      	cmp	r3, #55	@ 0x37
 800916a:	d901      	bls.n	8009170 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800916c:	2337      	movs	r3, #55	@ 0x37
 800916e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009172:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009174:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009178:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800917a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800917c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917e:	2200      	movs	r2, #0
 8009180:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009184:	3304      	adds	r3, #4
 8009186:	4618      	mov	r0, r3
 8009188:	f7ff f966 	bl	8008458 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800918c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918e:	3318      	adds	r3, #24
 8009190:	4618      	mov	r0, r3
 8009192:	f7ff f961 	bl	8008458 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009198:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800919a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800919c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800919e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80091a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80091a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091aa:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80091ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ae:	2200      	movs	r2, #0
 80091b0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80091b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80091ba:	683a      	ldr	r2, [r7, #0]
 80091bc:	68f9      	ldr	r1, [r7, #12]
 80091be:	69b8      	ldr	r0, [r7, #24]
 80091c0:	f001 f966 	bl	800a490 <pxPortInitialiseStack>
 80091c4:	4602      	mov	r2, r0
 80091c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80091ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d002      	beq.n	80091d6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80091d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091d6:	bf00      	nop
 80091d8:	3720      	adds	r7, #32
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
	...

080091e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80091e8:	f001 fa86 	bl	800a6f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80091ec:	4b2d      	ldr	r3, [pc, #180]	@ (80092a4 <prvAddNewTaskToReadyList+0xc4>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	3301      	adds	r3, #1
 80091f2:	4a2c      	ldr	r2, [pc, #176]	@ (80092a4 <prvAddNewTaskToReadyList+0xc4>)
 80091f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80091f6:	4b2c      	ldr	r3, [pc, #176]	@ (80092a8 <prvAddNewTaskToReadyList+0xc8>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d109      	bne.n	8009212 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80091fe:	4a2a      	ldr	r2, [pc, #168]	@ (80092a8 <prvAddNewTaskToReadyList+0xc8>)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009204:	4b27      	ldr	r3, [pc, #156]	@ (80092a4 <prvAddNewTaskToReadyList+0xc4>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d110      	bne.n	800922e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800920c:	f000 fc46 	bl	8009a9c <prvInitialiseTaskLists>
 8009210:	e00d      	b.n	800922e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009212:	4b26      	ldr	r3, [pc, #152]	@ (80092ac <prvAddNewTaskToReadyList+0xcc>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d109      	bne.n	800922e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800921a:	4b23      	ldr	r3, [pc, #140]	@ (80092a8 <prvAddNewTaskToReadyList+0xc8>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009224:	429a      	cmp	r2, r3
 8009226:	d802      	bhi.n	800922e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009228:	4a1f      	ldr	r2, [pc, #124]	@ (80092a8 <prvAddNewTaskToReadyList+0xc8>)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800922e:	4b20      	ldr	r3, [pc, #128]	@ (80092b0 <prvAddNewTaskToReadyList+0xd0>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3301      	adds	r3, #1
 8009234:	4a1e      	ldr	r2, [pc, #120]	@ (80092b0 <prvAddNewTaskToReadyList+0xd0>)
 8009236:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009238:	4b1d      	ldr	r3, [pc, #116]	@ (80092b0 <prvAddNewTaskToReadyList+0xd0>)
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009244:	4b1b      	ldr	r3, [pc, #108]	@ (80092b4 <prvAddNewTaskToReadyList+0xd4>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	429a      	cmp	r2, r3
 800924a:	d903      	bls.n	8009254 <prvAddNewTaskToReadyList+0x74>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009250:	4a18      	ldr	r2, [pc, #96]	@ (80092b4 <prvAddNewTaskToReadyList+0xd4>)
 8009252:	6013      	str	r3, [r2, #0]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009258:	4613      	mov	r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4413      	add	r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4a15      	ldr	r2, [pc, #84]	@ (80092b8 <prvAddNewTaskToReadyList+0xd8>)
 8009262:	441a      	add	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	3304      	adds	r3, #4
 8009268:	4619      	mov	r1, r3
 800926a:	4610      	mov	r0, r2
 800926c:	f7ff f901 	bl	8008472 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009270:	f001 fa74 	bl	800a75c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009274:	4b0d      	ldr	r3, [pc, #52]	@ (80092ac <prvAddNewTaskToReadyList+0xcc>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00e      	beq.n	800929a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800927c:	4b0a      	ldr	r3, [pc, #40]	@ (80092a8 <prvAddNewTaskToReadyList+0xc8>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009286:	429a      	cmp	r2, r3
 8009288:	d207      	bcs.n	800929a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800928a:	4b0c      	ldr	r3, [pc, #48]	@ (80092bc <prvAddNewTaskToReadyList+0xdc>)
 800928c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009290:	601a      	str	r2, [r3, #0]
 8009292:	f3bf 8f4f 	dsb	sy
 8009296:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800929a:	bf00      	nop
 800929c:	3708      	adds	r7, #8
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	2000588c 	.word	0x2000588c
 80092a8:	200053b8 	.word	0x200053b8
 80092ac:	20005898 	.word	0x20005898
 80092b0:	200058a8 	.word	0x200058a8
 80092b4:	20005894 	.word	0x20005894
 80092b8:	200053bc 	.word	0x200053bc
 80092bc:	e000ed04 	.word	0xe000ed04

080092c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80092c8:	2300      	movs	r3, #0
 80092ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d018      	beq.n	8009304 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80092d2:	4b14      	ldr	r3, [pc, #80]	@ (8009324 <vTaskDelay+0x64>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00b      	beq.n	80092f2 <vTaskDelay+0x32>
	__asm volatile
 80092da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092de:	f383 8811 	msr	BASEPRI, r3
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	60bb      	str	r3, [r7, #8]
}
 80092ec:	bf00      	nop
 80092ee:	bf00      	nop
 80092f0:	e7fd      	b.n	80092ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80092f2:	f000 f883 	bl	80093fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80092f6:	2100      	movs	r1, #0
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 fd1b 	bl	8009d34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80092fe:	f000 f88b 	bl	8009418 <xTaskResumeAll>
 8009302:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d107      	bne.n	800931a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800930a:	4b07      	ldr	r3, [pc, #28]	@ (8009328 <vTaskDelay+0x68>)
 800930c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009310:	601a      	str	r2, [r3, #0]
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800931a:	bf00      	nop
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	200058b4 	.word	0x200058b4
 8009328:	e000ed04 	.word	0xe000ed04

0800932c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b08a      	sub	sp, #40	@ 0x28
 8009330:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009332:	2300      	movs	r3, #0
 8009334:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009336:	2300      	movs	r3, #0
 8009338:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800933a:	463a      	mov	r2, r7
 800933c:	1d39      	adds	r1, r7, #4
 800933e:	f107 0308 	add.w	r3, r7, #8
 8009342:	4618      	mov	r0, r3
 8009344:	f7ff f834 	bl	80083b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009348:	6839      	ldr	r1, [r7, #0]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	9202      	str	r2, [sp, #8]
 8009350:	9301      	str	r3, [sp, #4]
 8009352:	2300      	movs	r3, #0
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	2300      	movs	r3, #0
 8009358:	460a      	mov	r2, r1
 800935a:	4922      	ldr	r1, [pc, #136]	@ (80093e4 <vTaskStartScheduler+0xb8>)
 800935c:	4822      	ldr	r0, [pc, #136]	@ (80093e8 <vTaskStartScheduler+0xbc>)
 800935e:	f7ff fe09 	bl	8008f74 <xTaskCreateStatic>
 8009362:	4603      	mov	r3, r0
 8009364:	4a21      	ldr	r2, [pc, #132]	@ (80093ec <vTaskStartScheduler+0xc0>)
 8009366:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009368:	4b20      	ldr	r3, [pc, #128]	@ (80093ec <vTaskStartScheduler+0xc0>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d002      	beq.n	8009376 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009370:	2301      	movs	r3, #1
 8009372:	617b      	str	r3, [r7, #20]
 8009374:	e001      	b.n	800937a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009376:	2300      	movs	r3, #0
 8009378:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d102      	bne.n	8009386 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009380:	f000 fd2c 	bl	8009ddc <xTimerCreateTimerTask>
 8009384:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d116      	bne.n	80093ba <vTaskStartScheduler+0x8e>
	__asm volatile
 800938c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009390:	f383 8811 	msr	BASEPRI, r3
 8009394:	f3bf 8f6f 	isb	sy
 8009398:	f3bf 8f4f 	dsb	sy
 800939c:	613b      	str	r3, [r7, #16]
}
 800939e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80093a0:	4b13      	ldr	r3, [pc, #76]	@ (80093f0 <vTaskStartScheduler+0xc4>)
 80093a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80093a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80093a8:	4b12      	ldr	r3, [pc, #72]	@ (80093f4 <vTaskStartScheduler+0xc8>)
 80093aa:	2201      	movs	r2, #1
 80093ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80093ae:	4b12      	ldr	r3, [pc, #72]	@ (80093f8 <vTaskStartScheduler+0xcc>)
 80093b0:	2200      	movs	r2, #0
 80093b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80093b4:	f001 f8fc 	bl	800a5b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80093b8:	e00f      	b.n	80093da <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093c0:	d10b      	bne.n	80093da <vTaskStartScheduler+0xae>
	__asm volatile
 80093c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c6:	f383 8811 	msr	BASEPRI, r3
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	60fb      	str	r3, [r7, #12]
}
 80093d4:	bf00      	nop
 80093d6:	bf00      	nop
 80093d8:	e7fd      	b.n	80093d6 <vTaskStartScheduler+0xaa>
}
 80093da:	bf00      	nop
 80093dc:	3718      	adds	r7, #24
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	0801991c 	.word	0x0801991c
 80093e8:	08009a6d 	.word	0x08009a6d
 80093ec:	200058b0 	.word	0x200058b0
 80093f0:	200058ac 	.word	0x200058ac
 80093f4:	20005898 	.word	0x20005898
 80093f8:	20005890 	.word	0x20005890

080093fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80093fc:	b480      	push	{r7}
 80093fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009400:	4b04      	ldr	r3, [pc, #16]	@ (8009414 <vTaskSuspendAll+0x18>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	3301      	adds	r3, #1
 8009406:	4a03      	ldr	r2, [pc, #12]	@ (8009414 <vTaskSuspendAll+0x18>)
 8009408:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800940a:	bf00      	nop
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr
 8009414:	200058b4 	.word	0x200058b4

08009418 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800941e:	2300      	movs	r3, #0
 8009420:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009422:	2300      	movs	r3, #0
 8009424:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009426:	4b42      	ldr	r3, [pc, #264]	@ (8009530 <xTaskResumeAll+0x118>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d10b      	bne.n	8009446 <xTaskResumeAll+0x2e>
	__asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	603b      	str	r3, [r7, #0]
}
 8009440:	bf00      	nop
 8009442:	bf00      	nop
 8009444:	e7fd      	b.n	8009442 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009446:	f001 f957 	bl	800a6f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800944a:	4b39      	ldr	r3, [pc, #228]	@ (8009530 <xTaskResumeAll+0x118>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	3b01      	subs	r3, #1
 8009450:	4a37      	ldr	r2, [pc, #220]	@ (8009530 <xTaskResumeAll+0x118>)
 8009452:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009454:	4b36      	ldr	r3, [pc, #216]	@ (8009530 <xTaskResumeAll+0x118>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d162      	bne.n	8009522 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800945c:	4b35      	ldr	r3, [pc, #212]	@ (8009534 <xTaskResumeAll+0x11c>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d05e      	beq.n	8009522 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009464:	e02f      	b.n	80094c6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009466:	4b34      	ldr	r3, [pc, #208]	@ (8009538 <xTaskResumeAll+0x120>)
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	3318      	adds	r3, #24
 8009472:	4618      	mov	r0, r3
 8009474:	f7ff f85a 	bl	800852c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	3304      	adds	r3, #4
 800947c:	4618      	mov	r0, r3
 800947e:	f7ff f855 	bl	800852c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009486:	4b2d      	ldr	r3, [pc, #180]	@ (800953c <xTaskResumeAll+0x124>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	429a      	cmp	r2, r3
 800948c:	d903      	bls.n	8009496 <xTaskResumeAll+0x7e>
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009492:	4a2a      	ldr	r2, [pc, #168]	@ (800953c <xTaskResumeAll+0x124>)
 8009494:	6013      	str	r3, [r2, #0]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800949a:	4613      	mov	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	4413      	add	r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4a27      	ldr	r2, [pc, #156]	@ (8009540 <xTaskResumeAll+0x128>)
 80094a4:	441a      	add	r2, r3
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	3304      	adds	r3, #4
 80094aa:	4619      	mov	r1, r3
 80094ac:	4610      	mov	r0, r2
 80094ae:	f7fe ffe0 	bl	8008472 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094b6:	4b23      	ldr	r3, [pc, #140]	@ (8009544 <xTaskResumeAll+0x12c>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094bc:	429a      	cmp	r2, r3
 80094be:	d302      	bcc.n	80094c6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80094c0:	4b21      	ldr	r3, [pc, #132]	@ (8009548 <xTaskResumeAll+0x130>)
 80094c2:	2201      	movs	r2, #1
 80094c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094c6:	4b1c      	ldr	r3, [pc, #112]	@ (8009538 <xTaskResumeAll+0x120>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1cb      	bne.n	8009466 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d001      	beq.n	80094d8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80094d4:	f000 fb80 	bl	8009bd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80094d8:	4b1c      	ldr	r3, [pc, #112]	@ (800954c <xTaskResumeAll+0x134>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d010      	beq.n	8009506 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80094e4:	f000 f846 	bl	8009574 <xTaskIncrementTick>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d002      	beq.n	80094f4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80094ee:	4b16      	ldr	r3, [pc, #88]	@ (8009548 <xTaskResumeAll+0x130>)
 80094f0:	2201      	movs	r2, #1
 80094f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	3b01      	subs	r3, #1
 80094f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1f1      	bne.n	80094e4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009500:	4b12      	ldr	r3, [pc, #72]	@ (800954c <xTaskResumeAll+0x134>)
 8009502:	2200      	movs	r2, #0
 8009504:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009506:	4b10      	ldr	r3, [pc, #64]	@ (8009548 <xTaskResumeAll+0x130>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d009      	beq.n	8009522 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800950e:	2301      	movs	r3, #1
 8009510:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009512:	4b0f      	ldr	r3, [pc, #60]	@ (8009550 <xTaskResumeAll+0x138>)
 8009514:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009518:	601a      	str	r2, [r3, #0]
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009522:	f001 f91b 	bl	800a75c <vPortExitCritical>

	return xAlreadyYielded;
 8009526:	68bb      	ldr	r3, [r7, #8]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	200058b4 	.word	0x200058b4
 8009534:	2000588c 	.word	0x2000588c
 8009538:	2000584c 	.word	0x2000584c
 800953c:	20005894 	.word	0x20005894
 8009540:	200053bc 	.word	0x200053bc
 8009544:	200053b8 	.word	0x200053b8
 8009548:	200058a0 	.word	0x200058a0
 800954c:	2000589c 	.word	0x2000589c
 8009550:	e000ed04 	.word	0xe000ed04

08009554 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800955a:	4b05      	ldr	r3, [pc, #20]	@ (8009570 <xTaskGetTickCount+0x1c>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009560:	687b      	ldr	r3, [r7, #4]
}
 8009562:	4618      	mov	r0, r3
 8009564:	370c      	adds	r7, #12
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	20005890 	.word	0x20005890

08009574 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b086      	sub	sp, #24
 8009578:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800957a:	2300      	movs	r3, #0
 800957c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800957e:	4b4f      	ldr	r3, [pc, #316]	@ (80096bc <xTaskIncrementTick+0x148>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	f040 8090 	bne.w	80096a8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009588:	4b4d      	ldr	r3, [pc, #308]	@ (80096c0 <xTaskIncrementTick+0x14c>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	3301      	adds	r3, #1
 800958e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009590:	4a4b      	ldr	r2, [pc, #300]	@ (80096c0 <xTaskIncrementTick+0x14c>)
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d121      	bne.n	80095e0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800959c:	4b49      	ldr	r3, [pc, #292]	@ (80096c4 <xTaskIncrementTick+0x150>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00b      	beq.n	80095be <xTaskIncrementTick+0x4a>
	__asm volatile
 80095a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095aa:	f383 8811 	msr	BASEPRI, r3
 80095ae:	f3bf 8f6f 	isb	sy
 80095b2:	f3bf 8f4f 	dsb	sy
 80095b6:	603b      	str	r3, [r7, #0]
}
 80095b8:	bf00      	nop
 80095ba:	bf00      	nop
 80095bc:	e7fd      	b.n	80095ba <xTaskIncrementTick+0x46>
 80095be:	4b41      	ldr	r3, [pc, #260]	@ (80096c4 <xTaskIncrementTick+0x150>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	60fb      	str	r3, [r7, #12]
 80095c4:	4b40      	ldr	r3, [pc, #256]	@ (80096c8 <xTaskIncrementTick+0x154>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a3e      	ldr	r2, [pc, #248]	@ (80096c4 <xTaskIncrementTick+0x150>)
 80095ca:	6013      	str	r3, [r2, #0]
 80095cc:	4a3e      	ldr	r2, [pc, #248]	@ (80096c8 <xTaskIncrementTick+0x154>)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6013      	str	r3, [r2, #0]
 80095d2:	4b3e      	ldr	r3, [pc, #248]	@ (80096cc <xTaskIncrementTick+0x158>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	3301      	adds	r3, #1
 80095d8:	4a3c      	ldr	r2, [pc, #240]	@ (80096cc <xTaskIncrementTick+0x158>)
 80095da:	6013      	str	r3, [r2, #0]
 80095dc:	f000 fafc 	bl	8009bd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80095e0:	4b3b      	ldr	r3, [pc, #236]	@ (80096d0 <xTaskIncrementTick+0x15c>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	693a      	ldr	r2, [r7, #16]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d349      	bcc.n	800967e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095ea:	4b36      	ldr	r3, [pc, #216]	@ (80096c4 <xTaskIncrementTick+0x150>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d104      	bne.n	80095fe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095f4:	4b36      	ldr	r3, [pc, #216]	@ (80096d0 <xTaskIncrementTick+0x15c>)
 80095f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80095fa:	601a      	str	r2, [r3, #0]
					break;
 80095fc:	e03f      	b.n	800967e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095fe:	4b31      	ldr	r3, [pc, #196]	@ (80096c4 <xTaskIncrementTick+0x150>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800960e:	693a      	ldr	r2, [r7, #16]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	429a      	cmp	r2, r3
 8009614:	d203      	bcs.n	800961e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009616:	4a2e      	ldr	r2, [pc, #184]	@ (80096d0 <xTaskIncrementTick+0x15c>)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800961c:	e02f      	b.n	800967e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	3304      	adds	r3, #4
 8009622:	4618      	mov	r0, r3
 8009624:	f7fe ff82 	bl	800852c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800962c:	2b00      	cmp	r3, #0
 800962e:	d004      	beq.n	800963a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	3318      	adds	r3, #24
 8009634:	4618      	mov	r0, r3
 8009636:	f7fe ff79 	bl	800852c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800963e:	4b25      	ldr	r3, [pc, #148]	@ (80096d4 <xTaskIncrementTick+0x160>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	429a      	cmp	r2, r3
 8009644:	d903      	bls.n	800964e <xTaskIncrementTick+0xda>
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800964a:	4a22      	ldr	r2, [pc, #136]	@ (80096d4 <xTaskIncrementTick+0x160>)
 800964c:	6013      	str	r3, [r2, #0]
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009652:	4613      	mov	r3, r2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	4413      	add	r3, r2
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	4a1f      	ldr	r2, [pc, #124]	@ (80096d8 <xTaskIncrementTick+0x164>)
 800965c:	441a      	add	r2, r3
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	3304      	adds	r3, #4
 8009662:	4619      	mov	r1, r3
 8009664:	4610      	mov	r0, r2
 8009666:	f7fe ff04 	bl	8008472 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800966e:	4b1b      	ldr	r3, [pc, #108]	@ (80096dc <xTaskIncrementTick+0x168>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009674:	429a      	cmp	r2, r3
 8009676:	d3b8      	bcc.n	80095ea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009678:	2301      	movs	r3, #1
 800967a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800967c:	e7b5      	b.n	80095ea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800967e:	4b17      	ldr	r3, [pc, #92]	@ (80096dc <xTaskIncrementTick+0x168>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009684:	4914      	ldr	r1, [pc, #80]	@ (80096d8 <xTaskIncrementTick+0x164>)
 8009686:	4613      	mov	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	4413      	add	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	440b      	add	r3, r1
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d901      	bls.n	800969a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009696:	2301      	movs	r3, #1
 8009698:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800969a:	4b11      	ldr	r3, [pc, #68]	@ (80096e0 <xTaskIncrementTick+0x16c>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d007      	beq.n	80096b2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80096a2:	2301      	movs	r3, #1
 80096a4:	617b      	str	r3, [r7, #20]
 80096a6:	e004      	b.n	80096b2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80096a8:	4b0e      	ldr	r3, [pc, #56]	@ (80096e4 <xTaskIncrementTick+0x170>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	3301      	adds	r3, #1
 80096ae:	4a0d      	ldr	r2, [pc, #52]	@ (80096e4 <xTaskIncrementTick+0x170>)
 80096b0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80096b2:	697b      	ldr	r3, [r7, #20]
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3718      	adds	r7, #24
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	200058b4 	.word	0x200058b4
 80096c0:	20005890 	.word	0x20005890
 80096c4:	20005844 	.word	0x20005844
 80096c8:	20005848 	.word	0x20005848
 80096cc:	200058a4 	.word	0x200058a4
 80096d0:	200058ac 	.word	0x200058ac
 80096d4:	20005894 	.word	0x20005894
 80096d8:	200053bc 	.word	0x200053bc
 80096dc:	200053b8 	.word	0x200053b8
 80096e0:	200058a0 	.word	0x200058a0
 80096e4:	2000589c 	.word	0x2000589c

080096e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80096ee:	4b28      	ldr	r3, [pc, #160]	@ (8009790 <vTaskSwitchContext+0xa8>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d003      	beq.n	80096fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80096f6:	4b27      	ldr	r3, [pc, #156]	@ (8009794 <vTaskSwitchContext+0xac>)
 80096f8:	2201      	movs	r2, #1
 80096fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80096fc:	e042      	b.n	8009784 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80096fe:	4b25      	ldr	r3, [pc, #148]	@ (8009794 <vTaskSwitchContext+0xac>)
 8009700:	2200      	movs	r2, #0
 8009702:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009704:	4b24      	ldr	r3, [pc, #144]	@ (8009798 <vTaskSwitchContext+0xb0>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	60fb      	str	r3, [r7, #12]
 800970a:	e011      	b.n	8009730 <vTaskSwitchContext+0x48>
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d10b      	bne.n	800972a <vTaskSwitchContext+0x42>
	__asm volatile
 8009712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	607b      	str	r3, [r7, #4]
}
 8009724:	bf00      	nop
 8009726:	bf00      	nop
 8009728:	e7fd      	b.n	8009726 <vTaskSwitchContext+0x3e>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	3b01      	subs	r3, #1
 800972e:	60fb      	str	r3, [r7, #12]
 8009730:	491a      	ldr	r1, [pc, #104]	@ (800979c <vTaskSwitchContext+0xb4>)
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	4613      	mov	r3, r2
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	4413      	add	r3, r2
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	440b      	add	r3, r1
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d0e3      	beq.n	800970c <vTaskSwitchContext+0x24>
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	4613      	mov	r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4a13      	ldr	r2, [pc, #76]	@ (800979c <vTaskSwitchContext+0xb4>)
 8009750:	4413      	add	r3, r2
 8009752:	60bb      	str	r3, [r7, #8]
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	685a      	ldr	r2, [r3, #4]
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	605a      	str	r2, [r3, #4]
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	685a      	ldr	r2, [r3, #4]
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	3308      	adds	r3, #8
 8009766:	429a      	cmp	r2, r3
 8009768:	d104      	bne.n	8009774 <vTaskSwitchContext+0x8c>
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	685a      	ldr	r2, [r3, #4]
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	605a      	str	r2, [r3, #4]
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	4a09      	ldr	r2, [pc, #36]	@ (80097a0 <vTaskSwitchContext+0xb8>)
 800977c:	6013      	str	r3, [r2, #0]
 800977e:	4a06      	ldr	r2, [pc, #24]	@ (8009798 <vTaskSwitchContext+0xb0>)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6013      	str	r3, [r2, #0]
}
 8009784:	bf00      	nop
 8009786:	3714      	adds	r7, #20
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr
 8009790:	200058b4 	.word	0x200058b4
 8009794:	200058a0 	.word	0x200058a0
 8009798:	20005894 	.word	0x20005894
 800979c:	200053bc 	.word	0x200053bc
 80097a0:	200053b8 	.word	0x200053b8

080097a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10b      	bne.n	80097cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80097b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b8:	f383 8811 	msr	BASEPRI, r3
 80097bc:	f3bf 8f6f 	isb	sy
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	60fb      	str	r3, [r7, #12]
}
 80097c6:	bf00      	nop
 80097c8:	bf00      	nop
 80097ca:	e7fd      	b.n	80097c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097cc:	4b07      	ldr	r3, [pc, #28]	@ (80097ec <vTaskPlaceOnEventList+0x48>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	3318      	adds	r3, #24
 80097d2:	4619      	mov	r1, r3
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f7fe fe70 	bl	80084ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80097da:	2101      	movs	r1, #1
 80097dc:	6838      	ldr	r0, [r7, #0]
 80097de:	f000 faa9 	bl	8009d34 <prvAddCurrentTaskToDelayedList>
}
 80097e2:	bf00      	nop
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	200053b8 	.word	0x200053b8

080097f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b086      	sub	sp, #24
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d10b      	bne.n	800981a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009806:	f383 8811 	msr	BASEPRI, r3
 800980a:	f3bf 8f6f 	isb	sy
 800980e:	f3bf 8f4f 	dsb	sy
 8009812:	617b      	str	r3, [r7, #20]
}
 8009814:	bf00      	nop
 8009816:	bf00      	nop
 8009818:	e7fd      	b.n	8009816 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800981a:	4b0a      	ldr	r3, [pc, #40]	@ (8009844 <vTaskPlaceOnEventListRestricted+0x54>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	3318      	adds	r3, #24
 8009820:	4619      	mov	r1, r3
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	f7fe fe25 	bl	8008472 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d002      	beq.n	8009834 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800982e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009832:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009834:	6879      	ldr	r1, [r7, #4]
 8009836:	68b8      	ldr	r0, [r7, #8]
 8009838:	f000 fa7c 	bl	8009d34 <prvAddCurrentTaskToDelayedList>
	}
 800983c:	bf00      	nop
 800983e:	3718      	adds	r7, #24
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	200053b8 	.word	0x200053b8

08009848 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b086      	sub	sp, #24
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d10b      	bne.n	8009876 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800985e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009862:	f383 8811 	msr	BASEPRI, r3
 8009866:	f3bf 8f6f 	isb	sy
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	60fb      	str	r3, [r7, #12]
}
 8009870:	bf00      	nop
 8009872:	bf00      	nop
 8009874:	e7fd      	b.n	8009872 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	3318      	adds	r3, #24
 800987a:	4618      	mov	r0, r3
 800987c:	f7fe fe56 	bl	800852c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009880:	4b1d      	ldr	r3, [pc, #116]	@ (80098f8 <xTaskRemoveFromEventList+0xb0>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d11d      	bne.n	80098c4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	3304      	adds	r3, #4
 800988c:	4618      	mov	r0, r3
 800988e:	f7fe fe4d 	bl	800852c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009896:	4b19      	ldr	r3, [pc, #100]	@ (80098fc <xTaskRemoveFromEventList+0xb4>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	429a      	cmp	r2, r3
 800989c:	d903      	bls.n	80098a6 <xTaskRemoveFromEventList+0x5e>
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098a2:	4a16      	ldr	r2, [pc, #88]	@ (80098fc <xTaskRemoveFromEventList+0xb4>)
 80098a4:	6013      	str	r3, [r2, #0]
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098aa:	4613      	mov	r3, r2
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4413      	add	r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4a13      	ldr	r2, [pc, #76]	@ (8009900 <xTaskRemoveFromEventList+0xb8>)
 80098b4:	441a      	add	r2, r3
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	3304      	adds	r3, #4
 80098ba:	4619      	mov	r1, r3
 80098bc:	4610      	mov	r0, r2
 80098be:	f7fe fdd8 	bl	8008472 <vListInsertEnd>
 80098c2:	e005      	b.n	80098d0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	3318      	adds	r3, #24
 80098c8:	4619      	mov	r1, r3
 80098ca:	480e      	ldr	r0, [pc, #56]	@ (8009904 <xTaskRemoveFromEventList+0xbc>)
 80098cc:	f7fe fdd1 	bl	8008472 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009908 <xTaskRemoveFromEventList+0xc0>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098da:	429a      	cmp	r2, r3
 80098dc:	d905      	bls.n	80098ea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80098de:	2301      	movs	r3, #1
 80098e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80098e2:	4b0a      	ldr	r3, [pc, #40]	@ (800990c <xTaskRemoveFromEventList+0xc4>)
 80098e4:	2201      	movs	r2, #1
 80098e6:	601a      	str	r2, [r3, #0]
 80098e8:	e001      	b.n	80098ee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80098ea:	2300      	movs	r3, #0
 80098ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80098ee:	697b      	ldr	r3, [r7, #20]
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3718      	adds	r7, #24
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	200058b4 	.word	0x200058b4
 80098fc:	20005894 	.word	0x20005894
 8009900:	200053bc 	.word	0x200053bc
 8009904:	2000584c 	.word	0x2000584c
 8009908:	200053b8 	.word	0x200053b8
 800990c:	200058a0 	.word	0x200058a0

08009910 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d10b      	bne.n	8009936 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800991e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009922:	f383 8811 	msr	BASEPRI, r3
 8009926:	f3bf 8f6f 	isb	sy
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	60fb      	str	r3, [r7, #12]
}
 8009930:	bf00      	nop
 8009932:	bf00      	nop
 8009934:	e7fd      	b.n	8009932 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8009936:	f000 fedf 	bl	800a6f8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800993a:	4b07      	ldr	r3, [pc, #28]	@ (8009958 <vTaskSetTimeOutState+0x48>)
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009942:	4b06      	ldr	r3, [pc, #24]	@ (800995c <vTaskSetTimeOutState+0x4c>)
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800994a:	f000 ff07 	bl	800a75c <vPortExitCritical>
}
 800994e:	bf00      	nop
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	200058a4 	.word	0x200058a4
 800995c:	20005890 	.word	0x20005890

08009960 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009968:	4b06      	ldr	r3, [pc, #24]	@ (8009984 <vTaskInternalSetTimeOutState+0x24>)
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009970:	4b05      	ldr	r3, [pc, #20]	@ (8009988 <vTaskInternalSetTimeOutState+0x28>)
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	605a      	str	r2, [r3, #4]
}
 8009978:	bf00      	nop
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr
 8009984:	200058a4 	.word	0x200058a4
 8009988:	20005890 	.word	0x20005890

0800998c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b088      	sub	sp, #32
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10b      	bne.n	80099b4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800999c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a0:	f383 8811 	msr	BASEPRI, r3
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	f3bf 8f4f 	dsb	sy
 80099ac:	613b      	str	r3, [r7, #16]
}
 80099ae:	bf00      	nop
 80099b0:	bf00      	nop
 80099b2:	e7fd      	b.n	80099b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d10b      	bne.n	80099d2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80099ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099be:	f383 8811 	msr	BASEPRI, r3
 80099c2:	f3bf 8f6f 	isb	sy
 80099c6:	f3bf 8f4f 	dsb	sy
 80099ca:	60fb      	str	r3, [r7, #12]
}
 80099cc:	bf00      	nop
 80099ce:	bf00      	nop
 80099d0:	e7fd      	b.n	80099ce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80099d2:	f000 fe91 	bl	800a6f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80099d6:	4b1d      	ldr	r3, [pc, #116]	@ (8009a4c <xTaskCheckForTimeOut+0xc0>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	69ba      	ldr	r2, [r7, #24]
 80099e2:	1ad3      	subs	r3, r2, r3
 80099e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099ee:	d102      	bne.n	80099f6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80099f0:	2300      	movs	r3, #0
 80099f2:	61fb      	str	r3, [r7, #28]
 80099f4:	e023      	b.n	8009a3e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	4b15      	ldr	r3, [pc, #84]	@ (8009a50 <xTaskCheckForTimeOut+0xc4>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d007      	beq.n	8009a12 <xTaskCheckForTimeOut+0x86>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	69ba      	ldr	r2, [r7, #24]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d302      	bcc.n	8009a12 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	61fb      	str	r3, [r7, #28]
 8009a10:	e015      	b.n	8009a3e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	697a      	ldr	r2, [r7, #20]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d20b      	bcs.n	8009a34 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	1ad2      	subs	r2, r2, r3
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7ff ff99 	bl	8009960 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	61fb      	str	r3, [r7, #28]
 8009a32:	e004      	b.n	8009a3e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	2200      	movs	r2, #0
 8009a38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a3e:	f000 fe8d 	bl	800a75c <vPortExitCritical>

	return xReturn;
 8009a42:	69fb      	ldr	r3, [r7, #28]
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3720      	adds	r7, #32
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	20005890 	.word	0x20005890
 8009a50:	200058a4 	.word	0x200058a4

08009a54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009a54:	b480      	push	{r7}
 8009a56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009a58:	4b03      	ldr	r3, [pc, #12]	@ (8009a68 <vTaskMissedYield+0x14>)
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	601a      	str	r2, [r3, #0]
}
 8009a5e:	bf00      	nop
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr
 8009a68:	200058a0 	.word	0x200058a0

08009a6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009a74:	f000 f852 	bl	8009b1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009a78:	4b06      	ldr	r3, [pc, #24]	@ (8009a94 <prvIdleTask+0x28>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d9f9      	bls.n	8009a74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009a80:	4b05      	ldr	r3, [pc, #20]	@ (8009a98 <prvIdleTask+0x2c>)
 8009a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a86:	601a      	str	r2, [r3, #0]
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009a90:	e7f0      	b.n	8009a74 <prvIdleTask+0x8>
 8009a92:	bf00      	nop
 8009a94:	200053bc 	.word	0x200053bc
 8009a98:	e000ed04 	.word	0xe000ed04

08009a9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	607b      	str	r3, [r7, #4]
 8009aa6:	e00c      	b.n	8009ac2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	4413      	add	r3, r2
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	4a12      	ldr	r2, [pc, #72]	@ (8009afc <prvInitialiseTaskLists+0x60>)
 8009ab4:	4413      	add	r3, r2
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7fe fcae 	bl	8008418 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	607b      	str	r3, [r7, #4]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b37      	cmp	r3, #55	@ 0x37
 8009ac6:	d9ef      	bls.n	8009aa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009ac8:	480d      	ldr	r0, [pc, #52]	@ (8009b00 <prvInitialiseTaskLists+0x64>)
 8009aca:	f7fe fca5 	bl	8008418 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009ace:	480d      	ldr	r0, [pc, #52]	@ (8009b04 <prvInitialiseTaskLists+0x68>)
 8009ad0:	f7fe fca2 	bl	8008418 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ad4:	480c      	ldr	r0, [pc, #48]	@ (8009b08 <prvInitialiseTaskLists+0x6c>)
 8009ad6:	f7fe fc9f 	bl	8008418 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009ada:	480c      	ldr	r0, [pc, #48]	@ (8009b0c <prvInitialiseTaskLists+0x70>)
 8009adc:	f7fe fc9c 	bl	8008418 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ae0:	480b      	ldr	r0, [pc, #44]	@ (8009b10 <prvInitialiseTaskLists+0x74>)
 8009ae2:	f7fe fc99 	bl	8008418 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8009b14 <prvInitialiseTaskLists+0x78>)
 8009ae8:	4a05      	ldr	r2, [pc, #20]	@ (8009b00 <prvInitialiseTaskLists+0x64>)
 8009aea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009aec:	4b0a      	ldr	r3, [pc, #40]	@ (8009b18 <prvInitialiseTaskLists+0x7c>)
 8009aee:	4a05      	ldr	r2, [pc, #20]	@ (8009b04 <prvInitialiseTaskLists+0x68>)
 8009af0:	601a      	str	r2, [r3, #0]
}
 8009af2:	bf00      	nop
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	200053bc 	.word	0x200053bc
 8009b00:	2000581c 	.word	0x2000581c
 8009b04:	20005830 	.word	0x20005830
 8009b08:	2000584c 	.word	0x2000584c
 8009b0c:	20005860 	.word	0x20005860
 8009b10:	20005878 	.word	0x20005878
 8009b14:	20005844 	.word	0x20005844
 8009b18:	20005848 	.word	0x20005848

08009b1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b22:	e019      	b.n	8009b58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009b24:	f000 fde8 	bl	800a6f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b28:	4b10      	ldr	r3, [pc, #64]	@ (8009b6c <prvCheckTasksWaitingTermination+0x50>)
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	3304      	adds	r3, #4
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7fe fcf9 	bl	800852c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009b70 <prvCheckTasksWaitingTermination+0x54>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	4a0b      	ldr	r2, [pc, #44]	@ (8009b70 <prvCheckTasksWaitingTermination+0x54>)
 8009b42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b44:	4b0b      	ldr	r3, [pc, #44]	@ (8009b74 <prvCheckTasksWaitingTermination+0x58>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8009b74 <prvCheckTasksWaitingTermination+0x58>)
 8009b4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009b4e:	f000 fe05 	bl	800a75c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f810 	bl	8009b78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b58:	4b06      	ldr	r3, [pc, #24]	@ (8009b74 <prvCheckTasksWaitingTermination+0x58>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1e1      	bne.n	8009b24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009b60:	bf00      	nop
 8009b62:	bf00      	nop
 8009b64:	3708      	adds	r7, #8
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	20005860 	.word	0x20005860
 8009b70:	2000588c 	.word	0x2000588c
 8009b74:	20005874 	.word	0x20005874

08009b78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d108      	bne.n	8009b9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f000 ffa2 	bl	800aad8 <vPortFree>
				vPortFree( pxTCB );
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 ff9f 	bl	800aad8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b9a:	e019      	b.n	8009bd0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d103      	bne.n	8009bae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 ff96 	bl	800aad8 <vPortFree>
	}
 8009bac:	e010      	b.n	8009bd0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	d00b      	beq.n	8009bd0 <prvDeleteTCB+0x58>
	__asm volatile
 8009bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bbc:	f383 8811 	msr	BASEPRI, r3
 8009bc0:	f3bf 8f6f 	isb	sy
 8009bc4:	f3bf 8f4f 	dsb	sy
 8009bc8:	60fb      	str	r3, [r7, #12]
}
 8009bca:	bf00      	nop
 8009bcc:	bf00      	nop
 8009bce:	e7fd      	b.n	8009bcc <prvDeleteTCB+0x54>
	}
 8009bd0:	bf00      	nop
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bde:	4b0c      	ldr	r3, [pc, #48]	@ (8009c10 <prvResetNextTaskUnblockTime+0x38>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d104      	bne.n	8009bf2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009be8:	4b0a      	ldr	r3, [pc, #40]	@ (8009c14 <prvResetNextTaskUnblockTime+0x3c>)
 8009bea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009bee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009bf0:	e008      	b.n	8009c04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bf2:	4b07      	ldr	r3, [pc, #28]	@ (8009c10 <prvResetNextTaskUnblockTime+0x38>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	4a04      	ldr	r2, [pc, #16]	@ (8009c14 <prvResetNextTaskUnblockTime+0x3c>)
 8009c02:	6013      	str	r3, [r2, #0]
}
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr
 8009c10:	20005844 	.word	0x20005844
 8009c14:	200058ac 	.word	0x200058ac

08009c18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8009c4c <xTaskGetSchedulerState+0x34>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d102      	bne.n	8009c2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c26:	2301      	movs	r3, #1
 8009c28:	607b      	str	r3, [r7, #4]
 8009c2a:	e008      	b.n	8009c3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c2c:	4b08      	ldr	r3, [pc, #32]	@ (8009c50 <xTaskGetSchedulerState+0x38>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d102      	bne.n	8009c3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c34:	2302      	movs	r3, #2
 8009c36:	607b      	str	r3, [r7, #4]
 8009c38:	e001      	b.n	8009c3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c3e:	687b      	ldr	r3, [r7, #4]
	}
 8009c40:	4618      	mov	r0, r3
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr
 8009c4c:	20005898 	.word	0x20005898
 8009c50:	200058b4 	.word	0x200058b4

08009c54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b086      	sub	sp, #24
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c60:	2300      	movs	r3, #0
 8009c62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d058      	beq.n	8009d1c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8009d28 <xTaskPriorityDisinherit+0xd4>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	693a      	ldr	r2, [r7, #16]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d00b      	beq.n	8009c8c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c78:	f383 8811 	msr	BASEPRI, r3
 8009c7c:	f3bf 8f6f 	isb	sy
 8009c80:	f3bf 8f4f 	dsb	sy
 8009c84:	60fb      	str	r3, [r7, #12]
}
 8009c86:	bf00      	nop
 8009c88:	bf00      	nop
 8009c8a:	e7fd      	b.n	8009c88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d10b      	bne.n	8009cac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	60bb      	str	r3, [r7, #8]
}
 8009ca6:	bf00      	nop
 8009ca8:	bf00      	nop
 8009caa:	e7fd      	b.n	8009ca8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cb0:	1e5a      	subs	r2, r3, #1
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d02c      	beq.n	8009d1c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d128      	bne.n	8009d1c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	3304      	adds	r3, #4
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fe fc2c 	bl	800852c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ce0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cec:	4b0f      	ldr	r3, [pc, #60]	@ (8009d2c <xTaskPriorityDisinherit+0xd8>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d903      	bls.n	8009cfc <xTaskPriorityDisinherit+0xa8>
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cf8:	4a0c      	ldr	r2, [pc, #48]	@ (8009d2c <xTaskPriorityDisinherit+0xd8>)
 8009cfa:	6013      	str	r3, [r2, #0]
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d00:	4613      	mov	r3, r2
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	4413      	add	r3, r2
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	4a09      	ldr	r2, [pc, #36]	@ (8009d30 <xTaskPriorityDisinherit+0xdc>)
 8009d0a:	441a      	add	r2, r3
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	3304      	adds	r3, #4
 8009d10:	4619      	mov	r1, r3
 8009d12:	4610      	mov	r0, r2
 8009d14:	f7fe fbad 	bl	8008472 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d1c:	697b      	ldr	r3, [r7, #20]
	}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3718      	adds	r7, #24
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	200053b8 	.word	0x200053b8
 8009d2c:	20005894 	.word	0x20005894
 8009d30:	200053bc 	.word	0x200053bc

08009d34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d3e:	4b21      	ldr	r3, [pc, #132]	@ (8009dc4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d44:	4b20      	ldr	r3, [pc, #128]	@ (8009dc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	3304      	adds	r3, #4
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7fe fbee 	bl	800852c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d56:	d10a      	bne.n	8009d6e <prvAddCurrentTaskToDelayedList+0x3a>
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d007      	beq.n	8009d6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8009dc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	3304      	adds	r3, #4
 8009d64:	4619      	mov	r1, r3
 8009d66:	4819      	ldr	r0, [pc, #100]	@ (8009dcc <prvAddCurrentTaskToDelayedList+0x98>)
 8009d68:	f7fe fb83 	bl	8008472 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d6c:	e026      	b.n	8009dbc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4413      	add	r3, r2
 8009d74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d76:	4b14      	ldr	r3, [pc, #80]	@ (8009dc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	68ba      	ldr	r2, [r7, #8]
 8009d7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d209      	bcs.n	8009d9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d86:	4b12      	ldr	r3, [pc, #72]	@ (8009dd0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8009dc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	3304      	adds	r3, #4
 8009d90:	4619      	mov	r1, r3
 8009d92:	4610      	mov	r0, r2
 8009d94:	f7fe fb91 	bl	80084ba <vListInsert>
}
 8009d98:	e010      	b.n	8009dbc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8009dd4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8009dc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	3304      	adds	r3, #4
 8009da4:	4619      	mov	r1, r3
 8009da6:	4610      	mov	r0, r2
 8009da8:	f7fe fb87 	bl	80084ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009dac:	4b0a      	ldr	r3, [pc, #40]	@ (8009dd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	68ba      	ldr	r2, [r7, #8]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d202      	bcs.n	8009dbc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009db6:	4a08      	ldr	r2, [pc, #32]	@ (8009dd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	6013      	str	r3, [r2, #0]
}
 8009dbc:	bf00      	nop
 8009dbe:	3710      	adds	r7, #16
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	20005890 	.word	0x20005890
 8009dc8:	200053b8 	.word	0x200053b8
 8009dcc:	20005878 	.word	0x20005878
 8009dd0:	20005848 	.word	0x20005848
 8009dd4:	20005844 	.word	0x20005844
 8009dd8:	200058ac 	.word	0x200058ac

08009ddc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b08a      	sub	sp, #40	@ 0x28
 8009de0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009de2:	2300      	movs	r3, #0
 8009de4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009de6:	f000 fb13 	bl	800a410 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009dea:	4b1d      	ldr	r3, [pc, #116]	@ (8009e60 <xTimerCreateTimerTask+0x84>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d021      	beq.n	8009e36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009df2:	2300      	movs	r3, #0
 8009df4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009df6:	2300      	movs	r3, #0
 8009df8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009dfa:	1d3a      	adds	r2, r7, #4
 8009dfc:	f107 0108 	add.w	r1, r7, #8
 8009e00:	f107 030c 	add.w	r3, r7, #12
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7fe faed 	bl	80083e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009e0a:	6879      	ldr	r1, [r7, #4]
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	9202      	str	r2, [sp, #8]
 8009e12:	9301      	str	r3, [sp, #4]
 8009e14:	2302      	movs	r3, #2
 8009e16:	9300      	str	r3, [sp, #0]
 8009e18:	2300      	movs	r3, #0
 8009e1a:	460a      	mov	r2, r1
 8009e1c:	4911      	ldr	r1, [pc, #68]	@ (8009e64 <xTimerCreateTimerTask+0x88>)
 8009e1e:	4812      	ldr	r0, [pc, #72]	@ (8009e68 <xTimerCreateTimerTask+0x8c>)
 8009e20:	f7ff f8a8 	bl	8008f74 <xTaskCreateStatic>
 8009e24:	4603      	mov	r3, r0
 8009e26:	4a11      	ldr	r2, [pc, #68]	@ (8009e6c <xTimerCreateTimerTask+0x90>)
 8009e28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009e2a:	4b10      	ldr	r3, [pc, #64]	@ (8009e6c <xTimerCreateTimerTask+0x90>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d001      	beq.n	8009e36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009e32:	2301      	movs	r3, #1
 8009e34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10b      	bne.n	8009e54 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	613b      	str	r3, [r7, #16]
}
 8009e4e:	bf00      	nop
 8009e50:	bf00      	nop
 8009e52:	e7fd      	b.n	8009e50 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009e54:	697b      	ldr	r3, [r7, #20]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3718      	adds	r7, #24
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	200058e8 	.word	0x200058e8
 8009e64:	08019924 	.word	0x08019924
 8009e68:	08009fa9 	.word	0x08009fa9
 8009e6c:	200058ec 	.word	0x200058ec

08009e70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b08a      	sub	sp, #40	@ 0x28
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607a      	str	r2, [r7, #4]
 8009e7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10b      	bne.n	8009ea0 <xTimerGenericCommand+0x30>
	__asm volatile
 8009e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e8c:	f383 8811 	msr	BASEPRI, r3
 8009e90:	f3bf 8f6f 	isb	sy
 8009e94:	f3bf 8f4f 	dsb	sy
 8009e98:	623b      	str	r3, [r7, #32]
}
 8009e9a:	bf00      	nop
 8009e9c:	bf00      	nop
 8009e9e:	e7fd      	b.n	8009e9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009ea0:	4b19      	ldr	r3, [pc, #100]	@ (8009f08 <xTimerGenericCommand+0x98>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d02a      	beq.n	8009efe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	2b05      	cmp	r3, #5
 8009eb8:	dc18      	bgt.n	8009eec <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009eba:	f7ff fead 	bl	8009c18 <xTaskGetSchedulerState>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	d109      	bne.n	8009ed8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ec4:	4b10      	ldr	r3, [pc, #64]	@ (8009f08 <xTimerGenericCommand+0x98>)
 8009ec6:	6818      	ldr	r0, [r3, #0]
 8009ec8:	f107 0110 	add.w	r1, r7, #16
 8009ecc:	2300      	movs	r3, #0
 8009ece:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ed0:	f7fe fc60 	bl	8008794 <xQueueGenericSend>
 8009ed4:	6278      	str	r0, [r7, #36]	@ 0x24
 8009ed6:	e012      	b.n	8009efe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8009f08 <xTimerGenericCommand+0x98>)
 8009eda:	6818      	ldr	r0, [r3, #0]
 8009edc:	f107 0110 	add.w	r1, r7, #16
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f7fe fc56 	bl	8008794 <xQueueGenericSend>
 8009ee8:	6278      	str	r0, [r7, #36]	@ 0x24
 8009eea:	e008      	b.n	8009efe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009eec:	4b06      	ldr	r3, [pc, #24]	@ (8009f08 <xTimerGenericCommand+0x98>)
 8009eee:	6818      	ldr	r0, [r3, #0]
 8009ef0:	f107 0110 	add.w	r1, r7, #16
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	683a      	ldr	r2, [r7, #0]
 8009ef8:	f7fe fd4e 	bl	8008998 <xQueueGenericSendFromISR>
 8009efc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3728      	adds	r7, #40	@ 0x28
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	200058e8 	.word	0x200058e8

08009f0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b088      	sub	sp, #32
 8009f10:	af02      	add	r7, sp, #8
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f16:	4b23      	ldr	r3, [pc, #140]	@ (8009fa4 <prvProcessExpiredTimer+0x98>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	3304      	adds	r3, #4
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7fe fb01 	bl	800852c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f30:	f003 0304 	and.w	r3, r3, #4
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d023      	beq.n	8009f80 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	699a      	ldr	r2, [r3, #24]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	18d1      	adds	r1, r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	683a      	ldr	r2, [r7, #0]
 8009f44:	6978      	ldr	r0, [r7, #20]
 8009f46:	f000 f8d5 	bl	800a0f4 <prvInsertTimerInActiveList>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d020      	beq.n	8009f92 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f50:	2300      	movs	r3, #0
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	2300      	movs	r3, #0
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	2100      	movs	r1, #0
 8009f5a:	6978      	ldr	r0, [r7, #20]
 8009f5c:	f7ff ff88 	bl	8009e70 <xTimerGenericCommand>
 8009f60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d114      	bne.n	8009f92 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f6c:	f383 8811 	msr	BASEPRI, r3
 8009f70:	f3bf 8f6f 	isb	sy
 8009f74:	f3bf 8f4f 	dsb	sy
 8009f78:	60fb      	str	r3, [r7, #12]
}
 8009f7a:	bf00      	nop
 8009f7c:	bf00      	nop
 8009f7e:	e7fd      	b.n	8009f7c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f86:	f023 0301 	bic.w	r3, r3, #1
 8009f8a:	b2da      	uxtb	r2, r3
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	6a1b      	ldr	r3, [r3, #32]
 8009f96:	6978      	ldr	r0, [r7, #20]
 8009f98:	4798      	blx	r3
}
 8009f9a:	bf00      	nop
 8009f9c:	3718      	adds	r7, #24
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	200058e0 	.word	0x200058e0

08009fa8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009fb0:	f107 0308 	add.w	r3, r7, #8
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f000 f859 	bl	800a06c <prvGetNextExpireTime>
 8009fba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f000 f805 	bl	8009fd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009fc6:	f000 f8d7 	bl	800a178 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009fca:	bf00      	nop
 8009fcc:	e7f0      	b.n	8009fb0 <prvTimerTask+0x8>
	...

08009fd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009fda:	f7ff fa0f 	bl	80093fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009fde:	f107 0308 	add.w	r3, r7, #8
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f000 f866 	bl	800a0b4 <prvSampleTimeNow>
 8009fe8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d130      	bne.n	800a052 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d10a      	bne.n	800a00c <prvProcessTimerOrBlockTask+0x3c>
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d806      	bhi.n	800a00c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009ffe:	f7ff fa0b 	bl	8009418 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a002:	68f9      	ldr	r1, [r7, #12]
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f7ff ff81 	bl	8009f0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a00a:	e024      	b.n	800a056 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d008      	beq.n	800a024 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a012:	4b13      	ldr	r3, [pc, #76]	@ (800a060 <prvProcessTimerOrBlockTask+0x90>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d101      	bne.n	800a020 <prvProcessTimerOrBlockTask+0x50>
 800a01c:	2301      	movs	r3, #1
 800a01e:	e000      	b.n	800a022 <prvProcessTimerOrBlockTask+0x52>
 800a020:	2300      	movs	r3, #0
 800a022:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a024:	4b0f      	ldr	r3, [pc, #60]	@ (800a064 <prvProcessTimerOrBlockTask+0x94>)
 800a026:	6818      	ldr	r0, [r3, #0]
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	1ad3      	subs	r3, r2, r3
 800a02e:	683a      	ldr	r2, [r7, #0]
 800a030:	4619      	mov	r1, r3
 800a032:	f7fe ff6b 	bl	8008f0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a036:	f7ff f9ef 	bl	8009418 <xTaskResumeAll>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d10a      	bne.n	800a056 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a040:	4b09      	ldr	r3, [pc, #36]	@ (800a068 <prvProcessTimerOrBlockTask+0x98>)
 800a042:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a046:	601a      	str	r2, [r3, #0]
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	f3bf 8f6f 	isb	sy
}
 800a050:	e001      	b.n	800a056 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a052:	f7ff f9e1 	bl	8009418 <xTaskResumeAll>
}
 800a056:	bf00      	nop
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	200058e4 	.word	0x200058e4
 800a064:	200058e8 	.word	0x200058e8
 800a068:	e000ed04 	.word	0xe000ed04

0800a06c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a074:	4b0e      	ldr	r3, [pc, #56]	@ (800a0b0 <prvGetNextExpireTime+0x44>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d101      	bne.n	800a082 <prvGetNextExpireTime+0x16>
 800a07e:	2201      	movs	r2, #1
 800a080:	e000      	b.n	800a084 <prvGetNextExpireTime+0x18>
 800a082:	2200      	movs	r2, #0
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d105      	bne.n	800a09c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a090:	4b07      	ldr	r3, [pc, #28]	@ (800a0b0 <prvGetNextExpireTime+0x44>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	60fb      	str	r3, [r7, #12]
 800a09a:	e001      	b.n	800a0a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a09c:	2300      	movs	r3, #0
 800a09e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3714      	adds	r7, #20
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr
 800a0ae:	bf00      	nop
 800a0b0:	200058e0 	.word	0x200058e0

0800a0b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a0bc:	f7ff fa4a 	bl	8009554 <xTaskGetTickCount>
 800a0c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a0c2:	4b0b      	ldr	r3, [pc, #44]	@ (800a0f0 <prvSampleTimeNow+0x3c>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68fa      	ldr	r2, [r7, #12]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d205      	bcs.n	800a0d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a0cc:	f000 f93a 	bl	800a344 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	601a      	str	r2, [r3, #0]
 800a0d6:	e002      	b.n	800a0de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a0de:	4a04      	ldr	r2, [pc, #16]	@ (800a0f0 <prvSampleTimeNow+0x3c>)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	200058f0 	.word	0x200058f0

0800a0f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b086      	sub	sp, #24
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	607a      	str	r2, [r7, #4]
 800a100:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a102:	2300      	movs	r3, #0
 800a104:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	68ba      	ldr	r2, [r7, #8]
 800a10a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	68fa      	ldr	r2, [r7, #12]
 800a110:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	429a      	cmp	r2, r3
 800a118:	d812      	bhi.n	800a140 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	1ad2      	subs	r2, r2, r3
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	699b      	ldr	r3, [r3, #24]
 800a124:	429a      	cmp	r2, r3
 800a126:	d302      	bcc.n	800a12e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a128:	2301      	movs	r3, #1
 800a12a:	617b      	str	r3, [r7, #20]
 800a12c:	e01b      	b.n	800a166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a12e:	4b10      	ldr	r3, [pc, #64]	@ (800a170 <prvInsertTimerInActiveList+0x7c>)
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	3304      	adds	r3, #4
 800a136:	4619      	mov	r1, r3
 800a138:	4610      	mov	r0, r2
 800a13a:	f7fe f9be 	bl	80084ba <vListInsert>
 800a13e:	e012      	b.n	800a166 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	429a      	cmp	r2, r3
 800a146:	d206      	bcs.n	800a156 <prvInsertTimerInActiveList+0x62>
 800a148:	68ba      	ldr	r2, [r7, #8]
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d302      	bcc.n	800a156 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a150:	2301      	movs	r3, #1
 800a152:	617b      	str	r3, [r7, #20]
 800a154:	e007      	b.n	800a166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a156:	4b07      	ldr	r3, [pc, #28]	@ (800a174 <prvInsertTimerInActiveList+0x80>)
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	3304      	adds	r3, #4
 800a15e:	4619      	mov	r1, r3
 800a160:	4610      	mov	r0, r2
 800a162:	f7fe f9aa 	bl	80084ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a166:	697b      	ldr	r3, [r7, #20]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3718      	adds	r7, #24
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	200058e4 	.word	0x200058e4
 800a174:	200058e0 	.word	0x200058e0

0800a178 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b08e      	sub	sp, #56	@ 0x38
 800a17c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a17e:	e0ce      	b.n	800a31e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	da19      	bge.n	800a1ba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a186:	1d3b      	adds	r3, r7, #4
 800a188:	3304      	adds	r3, #4
 800a18a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d10b      	bne.n	800a1aa <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a196:	f383 8811 	msr	BASEPRI, r3
 800a19a:	f3bf 8f6f 	isb	sy
 800a19e:	f3bf 8f4f 	dsb	sy
 800a1a2:	61fb      	str	r3, [r7, #28]
}
 800a1a4:	bf00      	nop
 800a1a6:	bf00      	nop
 800a1a8:	e7fd      	b.n	800a1a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a1aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1b0:	6850      	ldr	r0, [r2, #4]
 800a1b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1b4:	6892      	ldr	r2, [r2, #8]
 800a1b6:	4611      	mov	r1, r2
 800a1b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	f2c0 80ae 	blt.w	800a31e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c8:	695b      	ldr	r3, [r3, #20]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d004      	beq.n	800a1d8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d0:	3304      	adds	r3, #4
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7fe f9aa 	bl	800852c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1d8:	463b      	mov	r3, r7
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7ff ff6a 	bl	800a0b4 <prvSampleTimeNow>
 800a1e0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2b09      	cmp	r3, #9
 800a1e6:	f200 8097 	bhi.w	800a318 <prvProcessReceivedCommands+0x1a0>
 800a1ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a1f0 <prvProcessReceivedCommands+0x78>)
 800a1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f0:	0800a219 	.word	0x0800a219
 800a1f4:	0800a219 	.word	0x0800a219
 800a1f8:	0800a219 	.word	0x0800a219
 800a1fc:	0800a28f 	.word	0x0800a28f
 800a200:	0800a2a3 	.word	0x0800a2a3
 800a204:	0800a2ef 	.word	0x0800a2ef
 800a208:	0800a219 	.word	0x0800a219
 800a20c:	0800a219 	.word	0x0800a219
 800a210:	0800a28f 	.word	0x0800a28f
 800a214:	0800a2a3 	.word	0x0800a2a3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a21a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a21e:	f043 0301 	orr.w	r3, r3, #1
 800a222:	b2da      	uxtb	r2, r3
 800a224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a226:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a22a:	68ba      	ldr	r2, [r7, #8]
 800a22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a22e:	699b      	ldr	r3, [r3, #24]
 800a230:	18d1      	adds	r1, r2, r3
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a236:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a238:	f7ff ff5c 	bl	800a0f4 <prvInsertTimerInActiveList>
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d06c      	beq.n	800a31c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a244:	6a1b      	ldr	r3, [r3, #32]
 800a246:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a248:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a24c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a250:	f003 0304 	and.w	r3, r3, #4
 800a254:	2b00      	cmp	r3, #0
 800a256:	d061      	beq.n	800a31c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a258:	68ba      	ldr	r2, [r7, #8]
 800a25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a25c:	699b      	ldr	r3, [r3, #24]
 800a25e:	441a      	add	r2, r3
 800a260:	2300      	movs	r3, #0
 800a262:	9300      	str	r3, [sp, #0]
 800a264:	2300      	movs	r3, #0
 800a266:	2100      	movs	r1, #0
 800a268:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a26a:	f7ff fe01 	bl	8009e70 <xTimerGenericCommand>
 800a26e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a270:	6a3b      	ldr	r3, [r7, #32]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d152      	bne.n	800a31c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27a:	f383 8811 	msr	BASEPRI, r3
 800a27e:	f3bf 8f6f 	isb	sy
 800a282:	f3bf 8f4f 	dsb	sy
 800a286:	61bb      	str	r3, [r7, #24]
}
 800a288:	bf00      	nop
 800a28a:	bf00      	nop
 800a28c:	e7fd      	b.n	800a28a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a290:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a294:	f023 0301 	bic.w	r3, r3, #1
 800a298:	b2da      	uxtb	r2, r3
 800a29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a29c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a2a0:	e03d      	b.n	800a31e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a2a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2a8:	f043 0301 	orr.w	r3, r3, #1
 800a2ac:	b2da      	uxtb	r2, r3
 800a2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a2ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2bc:	699b      	ldr	r3, [r3, #24]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d10b      	bne.n	800a2da <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c6:	f383 8811 	msr	BASEPRI, r3
 800a2ca:	f3bf 8f6f 	isb	sy
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	617b      	str	r3, [r7, #20]
}
 800a2d4:	bf00      	nop
 800a2d6:	bf00      	nop
 800a2d8:	e7fd      	b.n	800a2d6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2dc:	699a      	ldr	r2, [r3, #24]
 800a2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e0:	18d1      	adds	r1, r2, r3
 800a2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2e8:	f7ff ff04 	bl	800a0f4 <prvInsertTimerInActiveList>
					break;
 800a2ec:	e017      	b.n	800a31e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2f4:	f003 0302 	and.w	r3, r3, #2
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d103      	bne.n	800a304 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a2fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2fe:	f000 fbeb 	bl	800aad8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a302:	e00c      	b.n	800a31e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a306:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a30a:	f023 0301 	bic.w	r3, r3, #1
 800a30e:	b2da      	uxtb	r2, r3
 800a310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a312:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a316:	e002      	b.n	800a31e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a318:	bf00      	nop
 800a31a:	e000      	b.n	800a31e <prvProcessReceivedCommands+0x1a6>
					break;
 800a31c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a31e:	4b08      	ldr	r3, [pc, #32]	@ (800a340 <prvProcessReceivedCommands+0x1c8>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	1d39      	adds	r1, r7, #4
 800a324:	2200      	movs	r2, #0
 800a326:	4618      	mov	r0, r3
 800a328:	f7fe fbd4 	bl	8008ad4 <xQueueReceive>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	f47f af26 	bne.w	800a180 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a334:	bf00      	nop
 800a336:	bf00      	nop
 800a338:	3730      	adds	r7, #48	@ 0x30
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	200058e8 	.word	0x200058e8

0800a344 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b088      	sub	sp, #32
 800a348:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a34a:	e049      	b.n	800a3e0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a34c:	4b2e      	ldr	r3, [pc, #184]	@ (800a408 <prvSwitchTimerLists+0xc4>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a356:	4b2c      	ldr	r3, [pc, #176]	@ (800a408 <prvSwitchTimerLists+0xc4>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	3304      	adds	r3, #4
 800a364:	4618      	mov	r0, r3
 800a366:	f7fe f8e1 	bl	800852c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	68f8      	ldr	r0, [r7, #12]
 800a370:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a378:	f003 0304 	and.w	r3, r3, #4
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d02f      	beq.n	800a3e0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	699b      	ldr	r3, [r3, #24]
 800a384:	693a      	ldr	r2, [r7, #16]
 800a386:	4413      	add	r3, r2
 800a388:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a38a:	68ba      	ldr	r2, [r7, #8]
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d90e      	bls.n	800a3b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	68ba      	ldr	r2, [r7, #8]
 800a396:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a39e:	4b1a      	ldr	r3, [pc, #104]	@ (800a408 <prvSwitchTimerLists+0xc4>)
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	3304      	adds	r3, #4
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	4610      	mov	r0, r2
 800a3aa:	f7fe f886 	bl	80084ba <vListInsert>
 800a3ae:	e017      	b.n	800a3e0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	9300      	str	r3, [sp, #0]
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	693a      	ldr	r2, [r7, #16]
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	f7ff fd58 	bl	8009e70 <xTimerGenericCommand>
 800a3c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10b      	bne.n	800a3e0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a3c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3cc:	f383 8811 	msr	BASEPRI, r3
 800a3d0:	f3bf 8f6f 	isb	sy
 800a3d4:	f3bf 8f4f 	dsb	sy
 800a3d8:	603b      	str	r3, [r7, #0]
}
 800a3da:	bf00      	nop
 800a3dc:	bf00      	nop
 800a3de:	e7fd      	b.n	800a3dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3e0:	4b09      	ldr	r3, [pc, #36]	@ (800a408 <prvSwitchTimerLists+0xc4>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1b0      	bne.n	800a34c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a3ea:	4b07      	ldr	r3, [pc, #28]	@ (800a408 <prvSwitchTimerLists+0xc4>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a3f0:	4b06      	ldr	r3, [pc, #24]	@ (800a40c <prvSwitchTimerLists+0xc8>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a04      	ldr	r2, [pc, #16]	@ (800a408 <prvSwitchTimerLists+0xc4>)
 800a3f6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a3f8:	4a04      	ldr	r2, [pc, #16]	@ (800a40c <prvSwitchTimerLists+0xc8>)
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	6013      	str	r3, [r2, #0]
}
 800a3fe:	bf00      	nop
 800a400:	3718      	adds	r7, #24
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	200058e0 	.word	0x200058e0
 800a40c:	200058e4 	.word	0x200058e4

0800a410 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a416:	f000 f96f 	bl	800a6f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a41a:	4b15      	ldr	r3, [pc, #84]	@ (800a470 <prvCheckForValidListAndQueue+0x60>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d120      	bne.n	800a464 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a422:	4814      	ldr	r0, [pc, #80]	@ (800a474 <prvCheckForValidListAndQueue+0x64>)
 800a424:	f7fd fff8 	bl	8008418 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a428:	4813      	ldr	r0, [pc, #76]	@ (800a478 <prvCheckForValidListAndQueue+0x68>)
 800a42a:	f7fd fff5 	bl	8008418 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a42e:	4b13      	ldr	r3, [pc, #76]	@ (800a47c <prvCheckForValidListAndQueue+0x6c>)
 800a430:	4a10      	ldr	r2, [pc, #64]	@ (800a474 <prvCheckForValidListAndQueue+0x64>)
 800a432:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a434:	4b12      	ldr	r3, [pc, #72]	@ (800a480 <prvCheckForValidListAndQueue+0x70>)
 800a436:	4a10      	ldr	r2, [pc, #64]	@ (800a478 <prvCheckForValidListAndQueue+0x68>)
 800a438:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a43a:	2300      	movs	r3, #0
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	4b11      	ldr	r3, [pc, #68]	@ (800a484 <prvCheckForValidListAndQueue+0x74>)
 800a440:	4a11      	ldr	r2, [pc, #68]	@ (800a488 <prvCheckForValidListAndQueue+0x78>)
 800a442:	2110      	movs	r1, #16
 800a444:	200a      	movs	r0, #10
 800a446:	f7fe f905 	bl	8008654 <xQueueGenericCreateStatic>
 800a44a:	4603      	mov	r3, r0
 800a44c:	4a08      	ldr	r2, [pc, #32]	@ (800a470 <prvCheckForValidListAndQueue+0x60>)
 800a44e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a450:	4b07      	ldr	r3, [pc, #28]	@ (800a470 <prvCheckForValidListAndQueue+0x60>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d005      	beq.n	800a464 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a458:	4b05      	ldr	r3, [pc, #20]	@ (800a470 <prvCheckForValidListAndQueue+0x60>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	490b      	ldr	r1, [pc, #44]	@ (800a48c <prvCheckForValidListAndQueue+0x7c>)
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fe fd2a 	bl	8008eb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a464:	f000 f97a 	bl	800a75c <vPortExitCritical>
}
 800a468:	bf00      	nop
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	200058e8 	.word	0x200058e8
 800a474:	200058b8 	.word	0x200058b8
 800a478:	200058cc 	.word	0x200058cc
 800a47c:	200058e0 	.word	0x200058e0
 800a480:	200058e4 	.word	0x200058e4
 800a484:	20005994 	.word	0x20005994
 800a488:	200058f4 	.word	0x200058f4
 800a48c:	0801992c 	.word	0x0801992c

0800a490 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	3b04      	subs	r3, #4
 800a4a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a4a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	3b04      	subs	r3, #4
 800a4ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	f023 0201 	bic.w	r2, r3, #1
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	3b04      	subs	r3, #4
 800a4be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a4c0:	4a0c      	ldr	r2, [pc, #48]	@ (800a4f4 <pxPortInitialiseStack+0x64>)
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	3b14      	subs	r3, #20
 800a4ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	3b04      	subs	r3, #4
 800a4d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f06f 0202 	mvn.w	r2, #2
 800a4de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	3b20      	subs	r3, #32
 800a4e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3714      	adds	r7, #20
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr
 800a4f4:	0800a4f9 	.word	0x0800a4f9

0800a4f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a4fe:	2300      	movs	r3, #0
 800a500:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a502:	4b13      	ldr	r3, [pc, #76]	@ (800a550 <prvTaskExitError+0x58>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a50a:	d00b      	beq.n	800a524 <prvTaskExitError+0x2c>
	__asm volatile
 800a50c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a510:	f383 8811 	msr	BASEPRI, r3
 800a514:	f3bf 8f6f 	isb	sy
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	60fb      	str	r3, [r7, #12]
}
 800a51e:	bf00      	nop
 800a520:	bf00      	nop
 800a522:	e7fd      	b.n	800a520 <prvTaskExitError+0x28>
	__asm volatile
 800a524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a528:	f383 8811 	msr	BASEPRI, r3
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	f3bf 8f4f 	dsb	sy
 800a534:	60bb      	str	r3, [r7, #8]
}
 800a536:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a538:	bf00      	nop
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d0fc      	beq.n	800a53a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a540:	bf00      	nop
 800a542:	bf00      	nop
 800a544:	3714      	adds	r7, #20
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	20000010 	.word	0x20000010
	...

0800a560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a560:	4b07      	ldr	r3, [pc, #28]	@ (800a580 <pxCurrentTCBConst2>)
 800a562:	6819      	ldr	r1, [r3, #0]
 800a564:	6808      	ldr	r0, [r1, #0]
 800a566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a56a:	f380 8809 	msr	PSP, r0
 800a56e:	f3bf 8f6f 	isb	sy
 800a572:	f04f 0000 	mov.w	r0, #0
 800a576:	f380 8811 	msr	BASEPRI, r0
 800a57a:	4770      	bx	lr
 800a57c:	f3af 8000 	nop.w

0800a580 <pxCurrentTCBConst2>:
 800a580:	200053b8 	.word	0x200053b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a584:	bf00      	nop
 800a586:	bf00      	nop

0800a588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a588:	4808      	ldr	r0, [pc, #32]	@ (800a5ac <prvPortStartFirstTask+0x24>)
 800a58a:	6800      	ldr	r0, [r0, #0]
 800a58c:	6800      	ldr	r0, [r0, #0]
 800a58e:	f380 8808 	msr	MSP, r0
 800a592:	f04f 0000 	mov.w	r0, #0
 800a596:	f380 8814 	msr	CONTROL, r0
 800a59a:	b662      	cpsie	i
 800a59c:	b661      	cpsie	f
 800a59e:	f3bf 8f4f 	dsb	sy
 800a5a2:	f3bf 8f6f 	isb	sy
 800a5a6:	df00      	svc	0
 800a5a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a5aa:	bf00      	nop
 800a5ac:	e000ed08 	.word	0xe000ed08

0800a5b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a5b6:	4b47      	ldr	r3, [pc, #284]	@ (800a6d4 <xPortStartScheduler+0x124>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a47      	ldr	r2, [pc, #284]	@ (800a6d8 <xPortStartScheduler+0x128>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d10b      	bne.n	800a5d8 <xPortStartScheduler+0x28>
	__asm volatile
 800a5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c4:	f383 8811 	msr	BASEPRI, r3
 800a5c8:	f3bf 8f6f 	isb	sy
 800a5cc:	f3bf 8f4f 	dsb	sy
 800a5d0:	613b      	str	r3, [r7, #16]
}
 800a5d2:	bf00      	nop
 800a5d4:	bf00      	nop
 800a5d6:	e7fd      	b.n	800a5d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a5d8:	4b3e      	ldr	r3, [pc, #248]	@ (800a6d4 <xPortStartScheduler+0x124>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a3f      	ldr	r2, [pc, #252]	@ (800a6dc <xPortStartScheduler+0x12c>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d10b      	bne.n	800a5fa <xPortStartScheduler+0x4a>
	__asm volatile
 800a5e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e6:	f383 8811 	msr	BASEPRI, r3
 800a5ea:	f3bf 8f6f 	isb	sy
 800a5ee:	f3bf 8f4f 	dsb	sy
 800a5f2:	60fb      	str	r3, [r7, #12]
}
 800a5f4:	bf00      	nop
 800a5f6:	bf00      	nop
 800a5f8:	e7fd      	b.n	800a5f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a5fa:	4b39      	ldr	r3, [pc, #228]	@ (800a6e0 <xPortStartScheduler+0x130>)
 800a5fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	b2db      	uxtb	r3, r3
 800a604:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	22ff      	movs	r2, #255	@ 0xff
 800a60a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	b2db      	uxtb	r3, r3
 800a612:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a614:	78fb      	ldrb	r3, [r7, #3]
 800a616:	b2db      	uxtb	r3, r3
 800a618:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a61c:	b2da      	uxtb	r2, r3
 800a61e:	4b31      	ldr	r3, [pc, #196]	@ (800a6e4 <xPortStartScheduler+0x134>)
 800a620:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a622:	4b31      	ldr	r3, [pc, #196]	@ (800a6e8 <xPortStartScheduler+0x138>)
 800a624:	2207      	movs	r2, #7
 800a626:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a628:	e009      	b.n	800a63e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a62a:	4b2f      	ldr	r3, [pc, #188]	@ (800a6e8 <xPortStartScheduler+0x138>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	3b01      	subs	r3, #1
 800a630:	4a2d      	ldr	r2, [pc, #180]	@ (800a6e8 <xPortStartScheduler+0x138>)
 800a632:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a634:	78fb      	ldrb	r3, [r7, #3]
 800a636:	b2db      	uxtb	r3, r3
 800a638:	005b      	lsls	r3, r3, #1
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a63e:	78fb      	ldrb	r3, [r7, #3]
 800a640:	b2db      	uxtb	r3, r3
 800a642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a646:	2b80      	cmp	r3, #128	@ 0x80
 800a648:	d0ef      	beq.n	800a62a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a64a:	4b27      	ldr	r3, [pc, #156]	@ (800a6e8 <xPortStartScheduler+0x138>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f1c3 0307 	rsb	r3, r3, #7
 800a652:	2b04      	cmp	r3, #4
 800a654:	d00b      	beq.n	800a66e <xPortStartScheduler+0xbe>
	__asm volatile
 800a656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a65a:	f383 8811 	msr	BASEPRI, r3
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f3bf 8f4f 	dsb	sy
 800a666:	60bb      	str	r3, [r7, #8]
}
 800a668:	bf00      	nop
 800a66a:	bf00      	nop
 800a66c:	e7fd      	b.n	800a66a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a66e:	4b1e      	ldr	r3, [pc, #120]	@ (800a6e8 <xPortStartScheduler+0x138>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	021b      	lsls	r3, r3, #8
 800a674:	4a1c      	ldr	r2, [pc, #112]	@ (800a6e8 <xPortStartScheduler+0x138>)
 800a676:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a678:	4b1b      	ldr	r3, [pc, #108]	@ (800a6e8 <xPortStartScheduler+0x138>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a680:	4a19      	ldr	r2, [pc, #100]	@ (800a6e8 <xPortStartScheduler+0x138>)
 800a682:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	b2da      	uxtb	r2, r3
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a68c:	4b17      	ldr	r3, [pc, #92]	@ (800a6ec <xPortStartScheduler+0x13c>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a16      	ldr	r2, [pc, #88]	@ (800a6ec <xPortStartScheduler+0x13c>)
 800a692:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a696:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a698:	4b14      	ldr	r3, [pc, #80]	@ (800a6ec <xPortStartScheduler+0x13c>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a13      	ldr	r2, [pc, #76]	@ (800a6ec <xPortStartScheduler+0x13c>)
 800a69e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a6a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a6a4:	f000 f8da 	bl	800a85c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a6a8:	4b11      	ldr	r3, [pc, #68]	@ (800a6f0 <xPortStartScheduler+0x140>)
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a6ae:	f000 f8f9 	bl	800a8a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a6b2:	4b10      	ldr	r3, [pc, #64]	@ (800a6f4 <xPortStartScheduler+0x144>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a0f      	ldr	r2, [pc, #60]	@ (800a6f4 <xPortStartScheduler+0x144>)
 800a6b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a6bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a6be:	f7ff ff63 	bl	800a588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a6c2:	f7ff f811 	bl	80096e8 <vTaskSwitchContext>
	prvTaskExitError();
 800a6c6:	f7ff ff17 	bl	800a4f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a6ca:	2300      	movs	r3, #0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3718      	adds	r7, #24
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	e000ed00 	.word	0xe000ed00
 800a6d8:	410fc271 	.word	0x410fc271
 800a6dc:	410fc270 	.word	0x410fc270
 800a6e0:	e000e400 	.word	0xe000e400
 800a6e4:	200059e4 	.word	0x200059e4
 800a6e8:	200059e8 	.word	0x200059e8
 800a6ec:	e000ed20 	.word	0xe000ed20
 800a6f0:	20000010 	.word	0x20000010
 800a6f4:	e000ef34 	.word	0xe000ef34

0800a6f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a702:	f383 8811 	msr	BASEPRI, r3
 800a706:	f3bf 8f6f 	isb	sy
 800a70a:	f3bf 8f4f 	dsb	sy
 800a70e:	607b      	str	r3, [r7, #4]
}
 800a710:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a712:	4b10      	ldr	r3, [pc, #64]	@ (800a754 <vPortEnterCritical+0x5c>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	3301      	adds	r3, #1
 800a718:	4a0e      	ldr	r2, [pc, #56]	@ (800a754 <vPortEnterCritical+0x5c>)
 800a71a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a71c:	4b0d      	ldr	r3, [pc, #52]	@ (800a754 <vPortEnterCritical+0x5c>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2b01      	cmp	r3, #1
 800a722:	d110      	bne.n	800a746 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a724:	4b0c      	ldr	r3, [pc, #48]	@ (800a758 <vPortEnterCritical+0x60>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00b      	beq.n	800a746 <vPortEnterCritical+0x4e>
	__asm volatile
 800a72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	603b      	str	r3, [r7, #0]
}
 800a740:	bf00      	nop
 800a742:	bf00      	nop
 800a744:	e7fd      	b.n	800a742 <vPortEnterCritical+0x4a>
	}
}
 800a746:	bf00      	nop
 800a748:	370c      	adds	r7, #12
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	20000010 	.word	0x20000010
 800a758:	e000ed04 	.word	0xe000ed04

0800a75c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a762:	4b12      	ldr	r3, [pc, #72]	@ (800a7ac <vPortExitCritical+0x50>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d10b      	bne.n	800a782 <vPortExitCritical+0x26>
	__asm volatile
 800a76a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a76e:	f383 8811 	msr	BASEPRI, r3
 800a772:	f3bf 8f6f 	isb	sy
 800a776:	f3bf 8f4f 	dsb	sy
 800a77a:	607b      	str	r3, [r7, #4]
}
 800a77c:	bf00      	nop
 800a77e:	bf00      	nop
 800a780:	e7fd      	b.n	800a77e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a782:	4b0a      	ldr	r3, [pc, #40]	@ (800a7ac <vPortExitCritical+0x50>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	3b01      	subs	r3, #1
 800a788:	4a08      	ldr	r2, [pc, #32]	@ (800a7ac <vPortExitCritical+0x50>)
 800a78a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a78c:	4b07      	ldr	r3, [pc, #28]	@ (800a7ac <vPortExitCritical+0x50>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d105      	bne.n	800a7a0 <vPortExitCritical+0x44>
 800a794:	2300      	movs	r3, #0
 800a796:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	f383 8811 	msr	BASEPRI, r3
}
 800a79e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr
 800a7ac:	20000010 	.word	0x20000010

0800a7b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a7b0:	f3ef 8009 	mrs	r0, PSP
 800a7b4:	f3bf 8f6f 	isb	sy
 800a7b8:	4b15      	ldr	r3, [pc, #84]	@ (800a810 <pxCurrentTCBConst>)
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	f01e 0f10 	tst.w	lr, #16
 800a7c0:	bf08      	it	eq
 800a7c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a7c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ca:	6010      	str	r0, [r2, #0]
 800a7cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a7d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a7d4:	f380 8811 	msr	BASEPRI, r0
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	f3bf 8f6f 	isb	sy
 800a7e0:	f7fe ff82 	bl	80096e8 <vTaskSwitchContext>
 800a7e4:	f04f 0000 	mov.w	r0, #0
 800a7e8:	f380 8811 	msr	BASEPRI, r0
 800a7ec:	bc09      	pop	{r0, r3}
 800a7ee:	6819      	ldr	r1, [r3, #0]
 800a7f0:	6808      	ldr	r0, [r1, #0]
 800a7f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f6:	f01e 0f10 	tst.w	lr, #16
 800a7fa:	bf08      	it	eq
 800a7fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a800:	f380 8809 	msr	PSP, r0
 800a804:	f3bf 8f6f 	isb	sy
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop
 800a80c:	f3af 8000 	nop.w

0800a810 <pxCurrentTCBConst>:
 800a810:	200053b8 	.word	0x200053b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a814:	bf00      	nop
 800a816:	bf00      	nop

0800a818 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
	__asm volatile
 800a81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a822:	f383 8811 	msr	BASEPRI, r3
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	f3bf 8f4f 	dsb	sy
 800a82e:	607b      	str	r3, [r7, #4]
}
 800a830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a832:	f7fe fe9f 	bl	8009574 <xTaskIncrementTick>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d003      	beq.n	800a844 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a83c:	4b06      	ldr	r3, [pc, #24]	@ (800a858 <xPortSysTickHandler+0x40>)
 800a83e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a842:	601a      	str	r2, [r3, #0]
 800a844:	2300      	movs	r3, #0
 800a846:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	f383 8811 	msr	BASEPRI, r3
}
 800a84e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a850:	bf00      	nop
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	e000ed04 	.word	0xe000ed04

0800a85c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a85c:	b480      	push	{r7}
 800a85e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a860:	4b0b      	ldr	r3, [pc, #44]	@ (800a890 <vPortSetupTimerInterrupt+0x34>)
 800a862:	2200      	movs	r2, #0
 800a864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a866:	4b0b      	ldr	r3, [pc, #44]	@ (800a894 <vPortSetupTimerInterrupt+0x38>)
 800a868:	2200      	movs	r2, #0
 800a86a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a86c:	4b0a      	ldr	r3, [pc, #40]	@ (800a898 <vPortSetupTimerInterrupt+0x3c>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a0a      	ldr	r2, [pc, #40]	@ (800a89c <vPortSetupTimerInterrupt+0x40>)
 800a872:	fba2 2303 	umull	r2, r3, r2, r3
 800a876:	099b      	lsrs	r3, r3, #6
 800a878:	4a09      	ldr	r2, [pc, #36]	@ (800a8a0 <vPortSetupTimerInterrupt+0x44>)
 800a87a:	3b01      	subs	r3, #1
 800a87c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a87e:	4b04      	ldr	r3, [pc, #16]	@ (800a890 <vPortSetupTimerInterrupt+0x34>)
 800a880:	2207      	movs	r2, #7
 800a882:	601a      	str	r2, [r3, #0]
}
 800a884:	bf00      	nop
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr
 800a88e:	bf00      	nop
 800a890:	e000e010 	.word	0xe000e010
 800a894:	e000e018 	.word	0xe000e018
 800a898:	20000004 	.word	0x20000004
 800a89c:	10624dd3 	.word	0x10624dd3
 800a8a0:	e000e014 	.word	0xe000e014

0800a8a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a8a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a8b4 <vPortEnableVFP+0x10>
 800a8a8:	6801      	ldr	r1, [r0, #0]
 800a8aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a8ae:	6001      	str	r1, [r0, #0]
 800a8b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a8b2:	bf00      	nop
 800a8b4:	e000ed88 	.word	0xe000ed88

0800a8b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a8be:	f3ef 8305 	mrs	r3, IPSR
 800a8c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2b0f      	cmp	r3, #15
 800a8c8:	d915      	bls.n	800a8f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a8ca:	4a18      	ldr	r2, [pc, #96]	@ (800a92c <vPortValidateInterruptPriority+0x74>)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	4413      	add	r3, r2
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a8d4:	4b16      	ldr	r3, [pc, #88]	@ (800a930 <vPortValidateInterruptPriority+0x78>)
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	7afa      	ldrb	r2, [r7, #11]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d20b      	bcs.n	800a8f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e2:	f383 8811 	msr	BASEPRI, r3
 800a8e6:	f3bf 8f6f 	isb	sy
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	607b      	str	r3, [r7, #4]
}
 800a8f0:	bf00      	nop
 800a8f2:	bf00      	nop
 800a8f4:	e7fd      	b.n	800a8f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a8f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a934 <vPortValidateInterruptPriority+0x7c>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a8fe:	4b0e      	ldr	r3, [pc, #56]	@ (800a938 <vPortValidateInterruptPriority+0x80>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	429a      	cmp	r2, r3
 800a904:	d90b      	bls.n	800a91e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a90a:	f383 8811 	msr	BASEPRI, r3
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	603b      	str	r3, [r7, #0]
}
 800a918:	bf00      	nop
 800a91a:	bf00      	nop
 800a91c:	e7fd      	b.n	800a91a <vPortValidateInterruptPriority+0x62>
	}
 800a91e:	bf00      	nop
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	e000e3f0 	.word	0xe000e3f0
 800a930:	200059e4 	.word	0x200059e4
 800a934:	e000ed0c 	.word	0xe000ed0c
 800a938:	200059e8 	.word	0x200059e8

0800a93c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b08a      	sub	sp, #40	@ 0x28
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a944:	2300      	movs	r3, #0
 800a946:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a948:	f7fe fd58 	bl	80093fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a94c:	4b5c      	ldr	r3, [pc, #368]	@ (800aac0 <pvPortMalloc+0x184>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d101      	bne.n	800a958 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a954:	f000 f924 	bl	800aba0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a958:	4b5a      	ldr	r3, [pc, #360]	@ (800aac4 <pvPortMalloc+0x188>)
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	4013      	ands	r3, r2
 800a960:	2b00      	cmp	r3, #0
 800a962:	f040 8095 	bne.w	800aa90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d01e      	beq.n	800a9aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a96c:	2208      	movs	r2, #8
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4413      	add	r3, r2
 800a972:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f003 0307 	and.w	r3, r3, #7
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d015      	beq.n	800a9aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f023 0307 	bic.w	r3, r3, #7
 800a984:	3308      	adds	r3, #8
 800a986:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f003 0307 	and.w	r3, r3, #7
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00b      	beq.n	800a9aa <pvPortMalloc+0x6e>
	__asm volatile
 800a992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a996:	f383 8811 	msr	BASEPRI, r3
 800a99a:	f3bf 8f6f 	isb	sy
 800a99e:	f3bf 8f4f 	dsb	sy
 800a9a2:	617b      	str	r3, [r7, #20]
}
 800a9a4:	bf00      	nop
 800a9a6:	bf00      	nop
 800a9a8:	e7fd      	b.n	800a9a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d06f      	beq.n	800aa90 <pvPortMalloc+0x154>
 800a9b0:	4b45      	ldr	r3, [pc, #276]	@ (800aac8 <pvPortMalloc+0x18c>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d86a      	bhi.n	800aa90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a9ba:	4b44      	ldr	r3, [pc, #272]	@ (800aacc <pvPortMalloc+0x190>)
 800a9bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a9be:	4b43      	ldr	r3, [pc, #268]	@ (800aacc <pvPortMalloc+0x190>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9c4:	e004      	b.n	800a9d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d903      	bls.n	800a9e2 <pvPortMalloc+0xa6>
 800a9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1f1      	bne.n	800a9c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a9e2:	4b37      	ldr	r3, [pc, #220]	@ (800aac0 <pvPortMalloc+0x184>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d051      	beq.n	800aa90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a9ec:	6a3b      	ldr	r3, [r7, #32]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2208      	movs	r2, #8
 800a9f2:	4413      	add	r3, r2
 800a9f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	6a3b      	ldr	r3, [r7, #32]
 800a9fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa00:	685a      	ldr	r2, [r3, #4]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	1ad2      	subs	r2, r2, r3
 800aa06:	2308      	movs	r3, #8
 800aa08:	005b      	lsls	r3, r3, #1
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d920      	bls.n	800aa50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aa0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	4413      	add	r3, r2
 800aa14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	f003 0307 	and.w	r3, r3, #7
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00b      	beq.n	800aa38 <pvPortMalloc+0xfc>
	__asm volatile
 800aa20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa24:	f383 8811 	msr	BASEPRI, r3
 800aa28:	f3bf 8f6f 	isb	sy
 800aa2c:	f3bf 8f4f 	dsb	sy
 800aa30:	613b      	str	r3, [r7, #16]
}
 800aa32:	bf00      	nop
 800aa34:	bf00      	nop
 800aa36:	e7fd      	b.n	800aa34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3a:	685a      	ldr	r2, [r3, #4]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	1ad2      	subs	r2, r2, r3
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa4a:	69b8      	ldr	r0, [r7, #24]
 800aa4c:	f000 f90a 	bl	800ac64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa50:	4b1d      	ldr	r3, [pc, #116]	@ (800aac8 <pvPortMalloc+0x18c>)
 800aa52:	681a      	ldr	r2, [r3, #0]
 800aa54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	1ad3      	subs	r3, r2, r3
 800aa5a:	4a1b      	ldr	r2, [pc, #108]	@ (800aac8 <pvPortMalloc+0x18c>)
 800aa5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa5e:	4b1a      	ldr	r3, [pc, #104]	@ (800aac8 <pvPortMalloc+0x18c>)
 800aa60:	681a      	ldr	r2, [r3, #0]
 800aa62:	4b1b      	ldr	r3, [pc, #108]	@ (800aad0 <pvPortMalloc+0x194>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d203      	bcs.n	800aa72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aa6a:	4b17      	ldr	r3, [pc, #92]	@ (800aac8 <pvPortMalloc+0x18c>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a18      	ldr	r2, [pc, #96]	@ (800aad0 <pvPortMalloc+0x194>)
 800aa70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aa72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa74:	685a      	ldr	r2, [r3, #4]
 800aa76:	4b13      	ldr	r3, [pc, #76]	@ (800aac4 <pvPortMalloc+0x188>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	431a      	orrs	r2, r3
 800aa7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa82:	2200      	movs	r2, #0
 800aa84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aa86:	4b13      	ldr	r3, [pc, #76]	@ (800aad4 <pvPortMalloc+0x198>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	4a11      	ldr	r2, [pc, #68]	@ (800aad4 <pvPortMalloc+0x198>)
 800aa8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa90:	f7fe fcc2 	bl	8009418 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	f003 0307 	and.w	r3, r3, #7
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00b      	beq.n	800aab6 <pvPortMalloc+0x17a>
	__asm volatile
 800aa9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaa2:	f383 8811 	msr	BASEPRI, r3
 800aaa6:	f3bf 8f6f 	isb	sy
 800aaaa:	f3bf 8f4f 	dsb	sy
 800aaae:	60fb      	str	r3, [r7, #12]
}
 800aab0:	bf00      	nop
 800aab2:	bf00      	nop
 800aab4:	e7fd      	b.n	800aab2 <pvPortMalloc+0x176>
	return pvReturn;
 800aab6:	69fb      	ldr	r3, [r7, #28]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3728      	adds	r7, #40	@ 0x28
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	200065f4 	.word	0x200065f4
 800aac4:	20006608 	.word	0x20006608
 800aac8:	200065f8 	.word	0x200065f8
 800aacc:	200065ec 	.word	0x200065ec
 800aad0:	200065fc 	.word	0x200065fc
 800aad4:	20006600 	.word	0x20006600

0800aad8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d04f      	beq.n	800ab8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aaea:	2308      	movs	r3, #8
 800aaec:	425b      	negs	r3, r3
 800aaee:	697a      	ldr	r2, [r7, #20]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	685a      	ldr	r2, [r3, #4]
 800aafc:	4b25      	ldr	r3, [pc, #148]	@ (800ab94 <vPortFree+0xbc>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4013      	ands	r3, r2
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d10b      	bne.n	800ab1e <vPortFree+0x46>
	__asm volatile
 800ab06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab0a:	f383 8811 	msr	BASEPRI, r3
 800ab0e:	f3bf 8f6f 	isb	sy
 800ab12:	f3bf 8f4f 	dsb	sy
 800ab16:	60fb      	str	r3, [r7, #12]
}
 800ab18:	bf00      	nop
 800ab1a:	bf00      	nop
 800ab1c:	e7fd      	b.n	800ab1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d00b      	beq.n	800ab3e <vPortFree+0x66>
	__asm volatile
 800ab26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab2a:	f383 8811 	msr	BASEPRI, r3
 800ab2e:	f3bf 8f6f 	isb	sy
 800ab32:	f3bf 8f4f 	dsb	sy
 800ab36:	60bb      	str	r3, [r7, #8]
}
 800ab38:	bf00      	nop
 800ab3a:	bf00      	nop
 800ab3c:	e7fd      	b.n	800ab3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	685a      	ldr	r2, [r3, #4]
 800ab42:	4b14      	ldr	r3, [pc, #80]	@ (800ab94 <vPortFree+0xbc>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4013      	ands	r3, r2
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d01e      	beq.n	800ab8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d11a      	bne.n	800ab8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	685a      	ldr	r2, [r3, #4]
 800ab58:	4b0e      	ldr	r3, [pc, #56]	@ (800ab94 <vPortFree+0xbc>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	43db      	mvns	r3, r3
 800ab5e:	401a      	ands	r2, r3
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ab64:	f7fe fc4a 	bl	80093fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	685a      	ldr	r2, [r3, #4]
 800ab6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ab98 <vPortFree+0xc0>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4413      	add	r3, r2
 800ab72:	4a09      	ldr	r2, [pc, #36]	@ (800ab98 <vPortFree+0xc0>)
 800ab74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ab76:	6938      	ldr	r0, [r7, #16]
 800ab78:	f000 f874 	bl	800ac64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ab7c:	4b07      	ldr	r3, [pc, #28]	@ (800ab9c <vPortFree+0xc4>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	3301      	adds	r3, #1
 800ab82:	4a06      	ldr	r2, [pc, #24]	@ (800ab9c <vPortFree+0xc4>)
 800ab84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ab86:	f7fe fc47 	bl	8009418 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ab8a:	bf00      	nop
 800ab8c:	3718      	adds	r7, #24
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	20006608 	.word	0x20006608
 800ab98:	200065f8 	.word	0x200065f8
 800ab9c:	20006604 	.word	0x20006604

0800aba0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aba0:	b480      	push	{r7}
 800aba2:	b085      	sub	sp, #20
 800aba4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aba6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800abaa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800abac:	4b27      	ldr	r3, [pc, #156]	@ (800ac4c <prvHeapInit+0xac>)
 800abae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f003 0307 	and.w	r3, r3, #7
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00c      	beq.n	800abd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	3307      	adds	r3, #7
 800abbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f023 0307 	bic.w	r3, r3, #7
 800abc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800abc8:	68ba      	ldr	r2, [r7, #8]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	1ad3      	subs	r3, r2, r3
 800abce:	4a1f      	ldr	r2, [pc, #124]	@ (800ac4c <prvHeapInit+0xac>)
 800abd0:	4413      	add	r3, r2
 800abd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800abd8:	4a1d      	ldr	r2, [pc, #116]	@ (800ac50 <prvHeapInit+0xb0>)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800abde:	4b1c      	ldr	r3, [pc, #112]	@ (800ac50 <prvHeapInit+0xb0>)
 800abe0:	2200      	movs	r2, #0
 800abe2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	4413      	add	r3, r2
 800abea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800abec:	2208      	movs	r2, #8
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	1a9b      	subs	r3, r3, r2
 800abf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f023 0307 	bic.w	r3, r3, #7
 800abfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	4a15      	ldr	r2, [pc, #84]	@ (800ac54 <prvHeapInit+0xb4>)
 800ac00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ac02:	4b14      	ldr	r3, [pc, #80]	@ (800ac54 <prvHeapInit+0xb4>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	2200      	movs	r2, #0
 800ac08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ac0a:	4b12      	ldr	r3, [pc, #72]	@ (800ac54 <prvHeapInit+0xb4>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	68fa      	ldr	r2, [r7, #12]
 800ac1a:	1ad2      	subs	r2, r2, r3
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ac20:	4b0c      	ldr	r3, [pc, #48]	@ (800ac54 <prvHeapInit+0xb4>)
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	4a0a      	ldr	r2, [pc, #40]	@ (800ac58 <prvHeapInit+0xb8>)
 800ac2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	4a09      	ldr	r2, [pc, #36]	@ (800ac5c <prvHeapInit+0xbc>)
 800ac36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ac38:	4b09      	ldr	r3, [pc, #36]	@ (800ac60 <prvHeapInit+0xc0>)
 800ac3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ac3e:	601a      	str	r2, [r3, #0]
}
 800ac40:	bf00      	nop
 800ac42:	3714      	adds	r7, #20
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr
 800ac4c:	200059ec 	.word	0x200059ec
 800ac50:	200065ec 	.word	0x200065ec
 800ac54:	200065f4 	.word	0x200065f4
 800ac58:	200065fc 	.word	0x200065fc
 800ac5c:	200065f8 	.word	0x200065f8
 800ac60:	20006608 	.word	0x20006608

0800ac64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac64:	b480      	push	{r7}
 800ac66:	b085      	sub	sp, #20
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac6c:	4b28      	ldr	r3, [pc, #160]	@ (800ad10 <prvInsertBlockIntoFreeList+0xac>)
 800ac6e:	60fb      	str	r3, [r7, #12]
 800ac70:	e002      	b.n	800ac78 <prvInsertBlockIntoFreeList+0x14>
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	60fb      	str	r3, [r7, #12]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d8f7      	bhi.n	800ac72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	68ba      	ldr	r2, [r7, #8]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d108      	bne.n	800aca6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	685a      	ldr	r2, [r3, #4]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	441a      	add	r2, r3
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	68ba      	ldr	r2, [r7, #8]
 800acb0:	441a      	add	r2, r3
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d118      	bne.n	800acec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	4b15      	ldr	r3, [pc, #84]	@ (800ad14 <prvInsertBlockIntoFreeList+0xb0>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d00d      	beq.n	800ace2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	685a      	ldr	r2, [r3, #4]
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	441a      	add	r2, r3
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	601a      	str	r2, [r3, #0]
 800ace0:	e008      	b.n	800acf4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ace2:	4b0c      	ldr	r3, [pc, #48]	@ (800ad14 <prvInsertBlockIntoFreeList+0xb0>)
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	601a      	str	r2, [r3, #0]
 800acea:	e003      	b.n	800acf4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d002      	beq.n	800ad02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad02:	bf00      	nop
 800ad04:	3714      	adds	r7, #20
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	200065ec 	.word	0x200065ec
 800ad14:	200065f4 	.word	0x200065f4

0800ad18 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ad18:	4b04      	ldr	r3, [pc, #16]	@ (800ad2c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	b10a      	cbz	r2, 800ad22 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800ad1e:	4803      	ldr	r0, [pc, #12]	@ (800ad2c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ad20:	4770      	bx	lr
 800ad22:	4a03      	ldr	r2, [pc, #12]	@ (800ad30 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800ad24:	4801      	ldr	r0, [pc, #4]	@ (800ad2c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ad26:	6812      	ldr	r2, [r2, #0]
 800ad28:	601a      	str	r2, [r3, #0]
 800ad2a:	4770      	bx	lr
 800ad2c:	2000001c 	.word	0x2000001c
 800ad30:	200001d0 	.word	0x200001d0

0800ad34 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ad34:	4a02      	ldr	r2, [pc, #8]	@ (800ad40 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800ad36:	4b03      	ldr	r3, [pc, #12]	@ (800ad44 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800ad38:	6812      	ldr	r2, [r2, #0]
 800ad3a:	601a      	str	r2, [r3, #0]
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop
 800ad40:	200001d0 	.word	0x200001d0
 800ad44:	2000001c 	.word	0x2000001c

0800ad48 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800ad48:	f005 bb5a 	b.w	8010400 <geometry_msgs__msg__Twist__init>

0800ad4c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800ad4c:	f005 bb7c 	b.w	8010448 <geometry_msgs__msg__Twist__fini>

0800ad50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ad50:	b510      	push	{r4, lr}
 800ad52:	f000 f819 	bl	800ad88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ad56:	4c07      	ldr	r4, [pc, #28]	@ (800ad74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800ad58:	60e0      	str	r0, [r4, #12]
 800ad5a:	f000 f815 	bl	800ad88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ad5e:	4b06      	ldr	r3, [pc, #24]	@ (800ad78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800ad60:	64a0      	str	r0, [r4, #72]	@ 0x48
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	b10a      	cbz	r2, 800ad6a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800ad66:	4804      	ldr	r0, [pc, #16]	@ (800ad78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800ad68:	bd10      	pop	{r4, pc}
 800ad6a:	4a04      	ldr	r2, [pc, #16]	@ (800ad7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800ad6c:	4802      	ldr	r0, [pc, #8]	@ (800ad78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800ad6e:	6812      	ldr	r2, [r2, #0]
 800ad70:	601a      	str	r2, [r3, #0]
 800ad72:	bd10      	pop	{r4, pc}
 800ad74:	20000028 	.word	0x20000028
 800ad78:	200000a0 	.word	0x200000a0
 800ad7c:	200001d4 	.word	0x200001d4

0800ad80 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800ad80:	f005 bb6e 	b.w	8010460 <geometry_msgs__msg__Vector3__init>

0800ad84 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800ad84:	f005 bb70 	b.w	8010468 <geometry_msgs__msg__Vector3__fini>

0800ad88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800ad88:	4b04      	ldr	r3, [pc, #16]	@ (800ad9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	b10a      	cbz	r2, 800ad92 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800ad8e:	4803      	ldr	r0, [pc, #12]	@ (800ad9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800ad90:	4770      	bx	lr
 800ad92:	4a03      	ldr	r2, [pc, #12]	@ (800ada0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800ad94:	4801      	ldr	r0, [pc, #4]	@ (800ad9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800ad96:	6812      	ldr	r2, [r2, #0]
 800ad98:	601a      	str	r2, [r3, #0]
 800ad9a:	4770      	bx	lr
 800ad9c:	20000160 	.word	0x20000160
 800ada0:	200001d4 	.word	0x200001d4

0800ada4 <get_serialized_size_geometry_msgs__msg__Twist>:
 800ada4:	b570      	push	{r4, r5, r6, lr}
 800ada6:	4604      	mov	r4, r0
 800ada8:	b148      	cbz	r0, 800adbe <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800adaa:	460d      	mov	r5, r1
 800adac:	f000 f860 	bl	800ae70 <get_serialized_size_geometry_msgs__msg__Vector3>
 800adb0:	4606      	mov	r6, r0
 800adb2:	1829      	adds	r1, r5, r0
 800adb4:	f104 0018 	add.w	r0, r4, #24
 800adb8:	f000 f85a 	bl	800ae70 <get_serialized_size_geometry_msgs__msg__Vector3>
 800adbc:	4430      	add	r0, r6
 800adbe:	bd70      	pop	{r4, r5, r6, pc}

0800adc0 <_Twist__cdr_deserialize>:
 800adc0:	b570      	push	{r4, r5, r6, lr}
 800adc2:	460c      	mov	r4, r1
 800adc4:	b189      	cbz	r1, 800adea <_Twist__cdr_deserialize+0x2a>
 800adc6:	4605      	mov	r5, r0
 800adc8:	f000 f8de 	bl	800af88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800adcc:	6843      	ldr	r3, [r0, #4]
 800adce:	4621      	mov	r1, r4
 800add0:	68db      	ldr	r3, [r3, #12]
 800add2:	4628      	mov	r0, r5
 800add4:	4798      	blx	r3
 800add6:	f000 f8d7 	bl	800af88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800adda:	6843      	ldr	r3, [r0, #4]
 800addc:	f104 0118 	add.w	r1, r4, #24
 800ade0:	4628      	mov	r0, r5
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ade8:	4718      	bx	r3
 800adea:	4608      	mov	r0, r1
 800adec:	bd70      	pop	{r4, r5, r6, pc}
 800adee:	bf00      	nop

0800adf0 <_Twist__cdr_serialize>:
 800adf0:	b510      	push	{r4, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	9101      	str	r1, [sp, #4]
 800adf6:	b190      	cbz	r0, 800ae1e <_Twist__cdr_serialize+0x2e>
 800adf8:	4604      	mov	r4, r0
 800adfa:	f000 f8c5 	bl	800af88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800adfe:	6843      	ldr	r3, [r0, #4]
 800ae00:	9901      	ldr	r1, [sp, #4]
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	4620      	mov	r0, r4
 800ae06:	4798      	blx	r3
 800ae08:	f000 f8be 	bl	800af88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ae0c:	6843      	ldr	r3, [r0, #4]
 800ae0e:	9901      	ldr	r1, [sp, #4]
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	f104 0018 	add.w	r0, r4, #24
 800ae16:	b002      	add	sp, #8
 800ae18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae1c:	4718      	bx	r3
 800ae1e:	b002      	add	sp, #8
 800ae20:	bd10      	pop	{r4, pc}
 800ae22:	bf00      	nop

0800ae24 <_Twist__get_serialized_size>:
 800ae24:	b538      	push	{r3, r4, r5, lr}
 800ae26:	4604      	mov	r4, r0
 800ae28:	b148      	cbz	r0, 800ae3e <_Twist__get_serialized_size+0x1a>
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	f000 f820 	bl	800ae70 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ae30:	4605      	mov	r5, r0
 800ae32:	4601      	mov	r1, r0
 800ae34:	f104 0018 	add.w	r0, r4, #24
 800ae38:	f000 f81a 	bl	800ae70 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ae3c:	4428      	add	r0, r5
 800ae3e:	bd38      	pop	{r3, r4, r5, pc}

0800ae40 <_Twist__max_serialized_size>:
 800ae40:	b510      	push	{r4, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	2301      	movs	r3, #1
 800ae46:	2100      	movs	r1, #0
 800ae48:	f10d 0007 	add.w	r0, sp, #7
 800ae4c:	f88d 3007 	strb.w	r3, [sp, #7]
 800ae50:	f000 f87e 	bl	800af50 <max_serialized_size_geometry_msgs__msg__Vector3>
 800ae54:	4604      	mov	r4, r0
 800ae56:	4601      	mov	r1, r0
 800ae58:	f10d 0007 	add.w	r0, sp, #7
 800ae5c:	f000 f878 	bl	800af50 <max_serialized_size_geometry_msgs__msg__Vector3>
 800ae60:	4420      	add	r0, r4
 800ae62:	b002      	add	sp, #8
 800ae64:	bd10      	pop	{r4, pc}
 800ae66:	bf00      	nop

0800ae68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ae68:	4800      	ldr	r0, [pc, #0]	@ (800ae6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800ae6a:	4770      	bx	lr
 800ae6c:	2000016c 	.word	0x2000016c

0800ae70 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800ae70:	b1b8      	cbz	r0, 800aea2 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800ae72:	b538      	push	{r3, r4, r5, lr}
 800ae74:	460d      	mov	r5, r1
 800ae76:	4628      	mov	r0, r5
 800ae78:	2108      	movs	r1, #8
 800ae7a:	f001 f9fd 	bl	800c278 <ucdr_alignment>
 800ae7e:	f105 0308 	add.w	r3, r5, #8
 800ae82:	181c      	adds	r4, r3, r0
 800ae84:	2108      	movs	r1, #8
 800ae86:	4620      	mov	r0, r4
 800ae88:	f001 f9f6 	bl	800c278 <ucdr_alignment>
 800ae8c:	3008      	adds	r0, #8
 800ae8e:	4404      	add	r4, r0
 800ae90:	2108      	movs	r1, #8
 800ae92:	4620      	mov	r0, r4
 800ae94:	f001 f9f0 	bl	800c278 <ucdr_alignment>
 800ae98:	f1c5 0508 	rsb	r5, r5, #8
 800ae9c:	4428      	add	r0, r5
 800ae9e:	4420      	add	r0, r4
 800aea0:	bd38      	pop	{r3, r4, r5, pc}
 800aea2:	4770      	bx	lr

0800aea4 <_Vector3__cdr_deserialize>:
 800aea4:	b538      	push	{r3, r4, r5, lr}
 800aea6:	460c      	mov	r4, r1
 800aea8:	b171      	cbz	r1, 800aec8 <_Vector3__cdr_deserialize+0x24>
 800aeaa:	4605      	mov	r5, r0
 800aeac:	f001 f8c6 	bl	800c03c <ucdr_deserialize_double>
 800aeb0:	f104 0108 	add.w	r1, r4, #8
 800aeb4:	4628      	mov	r0, r5
 800aeb6:	f001 f8c1 	bl	800c03c <ucdr_deserialize_double>
 800aeba:	f104 0110 	add.w	r1, r4, #16
 800aebe:	4628      	mov	r0, r5
 800aec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aec4:	f001 b8ba 	b.w	800c03c <ucdr_deserialize_double>
 800aec8:	4608      	mov	r0, r1
 800aeca:	bd38      	pop	{r3, r4, r5, pc}

0800aecc <_Vector3__cdr_serialize>:
 800aecc:	b198      	cbz	r0, 800aef6 <_Vector3__cdr_serialize+0x2a>
 800aece:	b538      	push	{r3, r4, r5, lr}
 800aed0:	ed90 0b00 	vldr	d0, [r0]
 800aed4:	460d      	mov	r5, r1
 800aed6:	4604      	mov	r4, r0
 800aed8:	4608      	mov	r0, r1
 800aeda:	f000 ffdf 	bl	800be9c <ucdr_serialize_double>
 800aede:	ed94 0b02 	vldr	d0, [r4, #8]
 800aee2:	4628      	mov	r0, r5
 800aee4:	f000 ffda 	bl	800be9c <ucdr_serialize_double>
 800aee8:	ed94 0b04 	vldr	d0, [r4, #16]
 800aeec:	4628      	mov	r0, r5
 800aeee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aef2:	f000 bfd3 	b.w	800be9c <ucdr_serialize_double>
 800aef6:	4770      	bx	lr

0800aef8 <_Vector3__get_serialized_size>:
 800aef8:	b198      	cbz	r0, 800af22 <_Vector3__get_serialized_size+0x2a>
 800aefa:	b510      	push	{r4, lr}
 800aefc:	2108      	movs	r1, #8
 800aefe:	2000      	movs	r0, #0
 800af00:	f001 f9ba 	bl	800c278 <ucdr_alignment>
 800af04:	f100 0408 	add.w	r4, r0, #8
 800af08:	2108      	movs	r1, #8
 800af0a:	4620      	mov	r0, r4
 800af0c:	f001 f9b4 	bl	800c278 <ucdr_alignment>
 800af10:	3008      	adds	r0, #8
 800af12:	4404      	add	r4, r0
 800af14:	2108      	movs	r1, #8
 800af16:	4620      	mov	r0, r4
 800af18:	f001 f9ae 	bl	800c278 <ucdr_alignment>
 800af1c:	3008      	adds	r0, #8
 800af1e:	4420      	add	r0, r4
 800af20:	bd10      	pop	{r4, pc}
 800af22:	4770      	bx	lr

0800af24 <_Vector3__max_serialized_size>:
 800af24:	b538      	push	{r3, r4, r5, lr}
 800af26:	2108      	movs	r1, #8
 800af28:	2000      	movs	r0, #0
 800af2a:	f001 f9a5 	bl	800c278 <ucdr_alignment>
 800af2e:	f100 0508 	add.w	r5, r0, #8
 800af32:	2108      	movs	r1, #8
 800af34:	4628      	mov	r0, r5
 800af36:	f001 f99f 	bl	800c278 <ucdr_alignment>
 800af3a:	f100 0408 	add.w	r4, r0, #8
 800af3e:	442c      	add	r4, r5
 800af40:	2108      	movs	r1, #8
 800af42:	4620      	mov	r0, r4
 800af44:	f001 f998 	bl	800c278 <ucdr_alignment>
 800af48:	3008      	adds	r0, #8
 800af4a:	4420      	add	r0, r4
 800af4c:	bd38      	pop	{r3, r4, r5, pc}
 800af4e:	bf00      	nop

0800af50 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800af50:	b570      	push	{r4, r5, r6, lr}
 800af52:	2301      	movs	r3, #1
 800af54:	460c      	mov	r4, r1
 800af56:	7003      	strb	r3, [r0, #0]
 800af58:	2108      	movs	r1, #8
 800af5a:	4620      	mov	r0, r4
 800af5c:	f001 f98c 	bl	800c278 <ucdr_alignment>
 800af60:	f104 0508 	add.w	r5, r4, #8
 800af64:	1946      	adds	r6, r0, r5
 800af66:	2108      	movs	r1, #8
 800af68:	4630      	mov	r0, r6
 800af6a:	f001 f985 	bl	800c278 <ucdr_alignment>
 800af6e:	f100 0508 	add.w	r5, r0, #8
 800af72:	4435      	add	r5, r6
 800af74:	2108      	movs	r1, #8
 800af76:	4628      	mov	r0, r5
 800af78:	f001 f97e 	bl	800c278 <ucdr_alignment>
 800af7c:	f1c4 0408 	rsb	r4, r4, #8
 800af80:	4420      	add	r0, r4
 800af82:	4428      	add	r0, r5
 800af84:	bd70      	pop	{r4, r5, r6, pc}
 800af86:	bf00      	nop

0800af88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800af88:	4800      	ldr	r0, [pc, #0]	@ (800af8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800af8a:	4770      	bx	lr
 800af8c:	20000194 	.word	0x20000194

0800af90 <ucdr_serialize_bool>:
 800af90:	b538      	push	{r3, r4, r5, lr}
 800af92:	460d      	mov	r5, r1
 800af94:	2101      	movs	r1, #1
 800af96:	4604      	mov	r4, r0
 800af98:	f001 f922 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800af9c:	b148      	cbz	r0, 800afb2 <ucdr_serialize_bool+0x22>
 800af9e:	68a3      	ldr	r3, [r4, #8]
 800afa0:	701d      	strb	r5, [r3, #0]
 800afa2:	68a2      	ldr	r2, [r4, #8]
 800afa4:	6923      	ldr	r3, [r4, #16]
 800afa6:	2101      	movs	r1, #1
 800afa8:	440a      	add	r2, r1
 800afaa:	440b      	add	r3, r1
 800afac:	60a2      	str	r2, [r4, #8]
 800afae:	6123      	str	r3, [r4, #16]
 800afb0:	7561      	strb	r1, [r4, #21]
 800afb2:	7da0      	ldrb	r0, [r4, #22]
 800afb4:	f080 0001 	eor.w	r0, r0, #1
 800afb8:	bd38      	pop	{r3, r4, r5, pc}
 800afba:	bf00      	nop

0800afbc <ucdr_deserialize_bool>:
 800afbc:	b538      	push	{r3, r4, r5, lr}
 800afbe:	460d      	mov	r5, r1
 800afc0:	2101      	movs	r1, #1
 800afc2:	4604      	mov	r4, r0
 800afc4:	f001 f90c 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800afc8:	b160      	cbz	r0, 800afe4 <ucdr_deserialize_bool+0x28>
 800afca:	68a2      	ldr	r2, [r4, #8]
 800afcc:	6923      	ldr	r3, [r4, #16]
 800afce:	f812 1b01 	ldrb.w	r1, [r2], #1
 800afd2:	3900      	subs	r1, #0
 800afd4:	bf18      	it	ne
 800afd6:	2101      	movne	r1, #1
 800afd8:	7029      	strb	r1, [r5, #0]
 800afda:	3301      	adds	r3, #1
 800afdc:	2101      	movs	r1, #1
 800afde:	60a2      	str	r2, [r4, #8]
 800afe0:	6123      	str	r3, [r4, #16]
 800afe2:	7561      	strb	r1, [r4, #21]
 800afe4:	7da0      	ldrb	r0, [r4, #22]
 800afe6:	f080 0001 	eor.w	r0, r0, #1
 800afea:	bd38      	pop	{r3, r4, r5, pc}

0800afec <ucdr_serialize_uint8_t>:
 800afec:	b538      	push	{r3, r4, r5, lr}
 800afee:	460d      	mov	r5, r1
 800aff0:	2101      	movs	r1, #1
 800aff2:	4604      	mov	r4, r0
 800aff4:	f001 f8f4 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800aff8:	b148      	cbz	r0, 800b00e <ucdr_serialize_uint8_t+0x22>
 800affa:	68a3      	ldr	r3, [r4, #8]
 800affc:	701d      	strb	r5, [r3, #0]
 800affe:	68a2      	ldr	r2, [r4, #8]
 800b000:	6923      	ldr	r3, [r4, #16]
 800b002:	2101      	movs	r1, #1
 800b004:	440a      	add	r2, r1
 800b006:	440b      	add	r3, r1
 800b008:	60a2      	str	r2, [r4, #8]
 800b00a:	6123      	str	r3, [r4, #16]
 800b00c:	7561      	strb	r1, [r4, #21]
 800b00e:	7da0      	ldrb	r0, [r4, #22]
 800b010:	f080 0001 	eor.w	r0, r0, #1
 800b014:	bd38      	pop	{r3, r4, r5, pc}
 800b016:	bf00      	nop

0800b018 <ucdr_deserialize_uint8_t>:
 800b018:	b538      	push	{r3, r4, r5, lr}
 800b01a:	460d      	mov	r5, r1
 800b01c:	2101      	movs	r1, #1
 800b01e:	4604      	mov	r4, r0
 800b020:	f001 f8de 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800b024:	b150      	cbz	r0, 800b03c <ucdr_deserialize_uint8_t+0x24>
 800b026:	68a3      	ldr	r3, [r4, #8]
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	702b      	strb	r3, [r5, #0]
 800b02c:	68a2      	ldr	r2, [r4, #8]
 800b02e:	6923      	ldr	r3, [r4, #16]
 800b030:	2101      	movs	r1, #1
 800b032:	440a      	add	r2, r1
 800b034:	440b      	add	r3, r1
 800b036:	60a2      	str	r2, [r4, #8]
 800b038:	6123      	str	r3, [r4, #16]
 800b03a:	7561      	strb	r1, [r4, #21]
 800b03c:	7da0      	ldrb	r0, [r4, #22]
 800b03e:	f080 0001 	eor.w	r0, r0, #1
 800b042:	bd38      	pop	{r3, r4, r5, pc}

0800b044 <ucdr_serialize_uint16_t>:
 800b044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b048:	b082      	sub	sp, #8
 800b04a:	460b      	mov	r3, r1
 800b04c:	2102      	movs	r1, #2
 800b04e:	4604      	mov	r4, r0
 800b050:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b054:	f001 f918 	bl	800c288 <ucdr_buffer_alignment>
 800b058:	4601      	mov	r1, r0
 800b05a:	4620      	mov	r0, r4
 800b05c:	7d67      	ldrb	r7, [r4, #21]
 800b05e:	f001 f957 	bl	800c310 <ucdr_advance_buffer>
 800b062:	2102      	movs	r1, #2
 800b064:	4620      	mov	r0, r4
 800b066:	f001 f8af 	bl	800c1c8 <ucdr_check_buffer_available_for>
 800b06a:	bb78      	cbnz	r0, 800b0cc <ucdr_serialize_uint16_t+0x88>
 800b06c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b070:	42ab      	cmp	r3, r5
 800b072:	d926      	bls.n	800b0c2 <ucdr_serialize_uint16_t+0x7e>
 800b074:	1b5e      	subs	r6, r3, r5
 800b076:	60a3      	str	r3, [r4, #8]
 800b078:	6923      	ldr	r3, [r4, #16]
 800b07a:	f1c6 0802 	rsb	r8, r6, #2
 800b07e:	4433      	add	r3, r6
 800b080:	6123      	str	r3, [r4, #16]
 800b082:	4641      	mov	r1, r8
 800b084:	4620      	mov	r0, r4
 800b086:	f001 f8ab 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800b08a:	2800      	cmp	r0, #0
 800b08c:	d03b      	beq.n	800b106 <ucdr_serialize_uint16_t+0xc2>
 800b08e:	7d23      	ldrb	r3, [r4, #20]
 800b090:	2b01      	cmp	r3, #1
 800b092:	d04a      	beq.n	800b12a <ucdr_serialize_uint16_t+0xe6>
 800b094:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b098:	702b      	strb	r3, [r5, #0]
 800b09a:	2e00      	cmp	r6, #0
 800b09c:	d040      	beq.n	800b120 <ucdr_serialize_uint16_t+0xdc>
 800b09e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b0a2:	706b      	strb	r3, [r5, #1]
 800b0a4:	6923      	ldr	r3, [r4, #16]
 800b0a6:	68a2      	ldr	r2, [r4, #8]
 800b0a8:	7da0      	ldrb	r0, [r4, #22]
 800b0aa:	3302      	adds	r3, #2
 800b0ac:	1b9e      	subs	r6, r3, r6
 800b0ae:	4442      	add	r2, r8
 800b0b0:	2302      	movs	r3, #2
 800b0b2:	f080 0001 	eor.w	r0, r0, #1
 800b0b6:	60a2      	str	r2, [r4, #8]
 800b0b8:	6126      	str	r6, [r4, #16]
 800b0ba:	7563      	strb	r3, [r4, #21]
 800b0bc:	b002      	add	sp, #8
 800b0be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0c2:	2102      	movs	r1, #2
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f001 f88b 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800b0ca:	b190      	cbz	r0, 800b0f2 <ucdr_serialize_uint16_t+0xae>
 800b0cc:	7d23      	ldrb	r3, [r4, #20]
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	68a3      	ldr	r3, [r4, #8]
 800b0d2:	d014      	beq.n	800b0fe <ucdr_serialize_uint16_t+0xba>
 800b0d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b0d8:	701a      	strb	r2, [r3, #0]
 800b0da:	68a3      	ldr	r3, [r4, #8]
 800b0dc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b0e0:	705a      	strb	r2, [r3, #1]
 800b0e2:	68a2      	ldr	r2, [r4, #8]
 800b0e4:	6923      	ldr	r3, [r4, #16]
 800b0e6:	3202      	adds	r2, #2
 800b0e8:	3302      	adds	r3, #2
 800b0ea:	2102      	movs	r1, #2
 800b0ec:	60a2      	str	r2, [r4, #8]
 800b0ee:	6123      	str	r3, [r4, #16]
 800b0f0:	7561      	strb	r1, [r4, #21]
 800b0f2:	7da0      	ldrb	r0, [r4, #22]
 800b0f4:	f080 0001 	eor.w	r0, r0, #1
 800b0f8:	b002      	add	sp, #8
 800b0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0fe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b102:	801a      	strh	r2, [r3, #0]
 800b104:	e7ed      	b.n	800b0e2 <ucdr_serialize_uint16_t+0x9e>
 800b106:	68a2      	ldr	r2, [r4, #8]
 800b108:	6923      	ldr	r3, [r4, #16]
 800b10a:	7da0      	ldrb	r0, [r4, #22]
 800b10c:	7567      	strb	r7, [r4, #21]
 800b10e:	1b92      	subs	r2, r2, r6
 800b110:	1b9b      	subs	r3, r3, r6
 800b112:	f080 0001 	eor.w	r0, r0, #1
 800b116:	60a2      	str	r2, [r4, #8]
 800b118:	6123      	str	r3, [r4, #16]
 800b11a:	b002      	add	sp, #8
 800b11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b120:	68a3      	ldr	r3, [r4, #8]
 800b122:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b126:	701a      	strb	r2, [r3, #0]
 800b128:	e7bc      	b.n	800b0a4 <ucdr_serialize_uint16_t+0x60>
 800b12a:	4628      	mov	r0, r5
 800b12c:	f10d 0506 	add.w	r5, sp, #6
 800b130:	4629      	mov	r1, r5
 800b132:	4632      	mov	r2, r6
 800b134:	f00d fd75 	bl	8018c22 <memcpy>
 800b138:	68a0      	ldr	r0, [r4, #8]
 800b13a:	4642      	mov	r2, r8
 800b13c:	19a9      	adds	r1, r5, r6
 800b13e:	f00d fd70 	bl	8018c22 <memcpy>
 800b142:	e7af      	b.n	800b0a4 <ucdr_serialize_uint16_t+0x60>

0800b144 <ucdr_serialize_endian_uint16_t>:
 800b144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b148:	b083      	sub	sp, #12
 800b14a:	460d      	mov	r5, r1
 800b14c:	2102      	movs	r1, #2
 800b14e:	4604      	mov	r4, r0
 800b150:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b154:	f001 f898 	bl	800c288 <ucdr_buffer_alignment>
 800b158:	4601      	mov	r1, r0
 800b15a:	4620      	mov	r0, r4
 800b15c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b160:	f001 f8d6 	bl	800c310 <ucdr_advance_buffer>
 800b164:	2102      	movs	r1, #2
 800b166:	4620      	mov	r0, r4
 800b168:	f001 f82e 	bl	800c1c8 <ucdr_check_buffer_available_for>
 800b16c:	bb70      	cbnz	r0, 800b1cc <ucdr_serialize_endian_uint16_t+0x88>
 800b16e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b172:	42be      	cmp	r6, r7
 800b174:	d925      	bls.n	800b1c2 <ucdr_serialize_endian_uint16_t+0x7e>
 800b176:	6923      	ldr	r3, [r4, #16]
 800b178:	60a6      	str	r6, [r4, #8]
 800b17a:	1bf6      	subs	r6, r6, r7
 800b17c:	4433      	add	r3, r6
 800b17e:	f1c6 0902 	rsb	r9, r6, #2
 800b182:	6123      	str	r3, [r4, #16]
 800b184:	4649      	mov	r1, r9
 800b186:	4620      	mov	r0, r4
 800b188:	f001 f82a 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	d039      	beq.n	800b204 <ucdr_serialize_endian_uint16_t+0xc0>
 800b190:	2d01      	cmp	r5, #1
 800b192:	d04a      	beq.n	800b22a <ucdr_serialize_endian_uint16_t+0xe6>
 800b194:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b198:	703b      	strb	r3, [r7, #0]
 800b19a:	2e00      	cmp	r6, #0
 800b19c:	d040      	beq.n	800b220 <ucdr_serialize_endian_uint16_t+0xdc>
 800b19e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b1a2:	707b      	strb	r3, [r7, #1]
 800b1a4:	6923      	ldr	r3, [r4, #16]
 800b1a6:	68a2      	ldr	r2, [r4, #8]
 800b1a8:	7da0      	ldrb	r0, [r4, #22]
 800b1aa:	3302      	adds	r3, #2
 800b1ac:	444a      	add	r2, r9
 800b1ae:	1b9b      	subs	r3, r3, r6
 800b1b0:	2102      	movs	r1, #2
 800b1b2:	f080 0001 	eor.w	r0, r0, #1
 800b1b6:	60a2      	str	r2, [r4, #8]
 800b1b8:	6123      	str	r3, [r4, #16]
 800b1ba:	7561      	strb	r1, [r4, #21]
 800b1bc:	b003      	add	sp, #12
 800b1be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1c2:	2102      	movs	r1, #2
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	f001 f80b 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800b1ca:	b188      	cbz	r0, 800b1f0 <ucdr_serialize_endian_uint16_t+0xac>
 800b1cc:	2d01      	cmp	r5, #1
 800b1ce:	68a3      	ldr	r3, [r4, #8]
 800b1d0:	d014      	beq.n	800b1fc <ucdr_serialize_endian_uint16_t+0xb8>
 800b1d2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b1d6:	701a      	strb	r2, [r3, #0]
 800b1d8:	68a3      	ldr	r3, [r4, #8]
 800b1da:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b1de:	705a      	strb	r2, [r3, #1]
 800b1e0:	68a2      	ldr	r2, [r4, #8]
 800b1e2:	6923      	ldr	r3, [r4, #16]
 800b1e4:	3202      	adds	r2, #2
 800b1e6:	3302      	adds	r3, #2
 800b1e8:	2102      	movs	r1, #2
 800b1ea:	60a2      	str	r2, [r4, #8]
 800b1ec:	6123      	str	r3, [r4, #16]
 800b1ee:	7561      	strb	r1, [r4, #21]
 800b1f0:	7da0      	ldrb	r0, [r4, #22]
 800b1f2:	f080 0001 	eor.w	r0, r0, #1
 800b1f6:	b003      	add	sp, #12
 800b1f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b200:	801a      	strh	r2, [r3, #0]
 800b202:	e7ed      	b.n	800b1e0 <ucdr_serialize_endian_uint16_t+0x9c>
 800b204:	68a2      	ldr	r2, [r4, #8]
 800b206:	6923      	ldr	r3, [r4, #16]
 800b208:	7da0      	ldrb	r0, [r4, #22]
 800b20a:	f884 8015 	strb.w	r8, [r4, #21]
 800b20e:	1b92      	subs	r2, r2, r6
 800b210:	1b9b      	subs	r3, r3, r6
 800b212:	f080 0001 	eor.w	r0, r0, #1
 800b216:	60a2      	str	r2, [r4, #8]
 800b218:	6123      	str	r3, [r4, #16]
 800b21a:	b003      	add	sp, #12
 800b21c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b220:	68a3      	ldr	r3, [r4, #8]
 800b222:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b226:	701a      	strb	r2, [r3, #0]
 800b228:	e7bc      	b.n	800b1a4 <ucdr_serialize_endian_uint16_t+0x60>
 800b22a:	f10d 0506 	add.w	r5, sp, #6
 800b22e:	4629      	mov	r1, r5
 800b230:	4632      	mov	r2, r6
 800b232:	4638      	mov	r0, r7
 800b234:	f00d fcf5 	bl	8018c22 <memcpy>
 800b238:	68a0      	ldr	r0, [r4, #8]
 800b23a:	464a      	mov	r2, r9
 800b23c:	19a9      	adds	r1, r5, r6
 800b23e:	f00d fcf0 	bl	8018c22 <memcpy>
 800b242:	e7af      	b.n	800b1a4 <ucdr_serialize_endian_uint16_t+0x60>

0800b244 <ucdr_deserialize_uint16_t>:
 800b244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b248:	460d      	mov	r5, r1
 800b24a:	2102      	movs	r1, #2
 800b24c:	4604      	mov	r4, r0
 800b24e:	f001 f81b 	bl	800c288 <ucdr_buffer_alignment>
 800b252:	4601      	mov	r1, r0
 800b254:	4620      	mov	r0, r4
 800b256:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b25a:	f001 f859 	bl	800c310 <ucdr_advance_buffer>
 800b25e:	2102      	movs	r1, #2
 800b260:	4620      	mov	r0, r4
 800b262:	f000 ffb1 	bl	800c1c8 <ucdr_check_buffer_available_for>
 800b266:	bb60      	cbnz	r0, 800b2c2 <ucdr_deserialize_uint16_t+0x7e>
 800b268:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b26c:	42be      	cmp	r6, r7
 800b26e:	d923      	bls.n	800b2b8 <ucdr_deserialize_uint16_t+0x74>
 800b270:	6923      	ldr	r3, [r4, #16]
 800b272:	60a6      	str	r6, [r4, #8]
 800b274:	1bf6      	subs	r6, r6, r7
 800b276:	4433      	add	r3, r6
 800b278:	f1c6 0902 	rsb	r9, r6, #2
 800b27c:	6123      	str	r3, [r4, #16]
 800b27e:	4649      	mov	r1, r9
 800b280:	4620      	mov	r0, r4
 800b282:	f000 ffad 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800b286:	2800      	cmp	r0, #0
 800b288:	d034      	beq.n	800b2f4 <ucdr_deserialize_uint16_t+0xb0>
 800b28a:	7d23      	ldrb	r3, [r4, #20]
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d042      	beq.n	800b316 <ucdr_deserialize_uint16_t+0xd2>
 800b290:	787b      	ldrb	r3, [r7, #1]
 800b292:	702b      	strb	r3, [r5, #0]
 800b294:	2e00      	cmp	r6, #0
 800b296:	d03a      	beq.n	800b30e <ucdr_deserialize_uint16_t+0xca>
 800b298:	783b      	ldrb	r3, [r7, #0]
 800b29a:	706b      	strb	r3, [r5, #1]
 800b29c:	6923      	ldr	r3, [r4, #16]
 800b29e:	68a2      	ldr	r2, [r4, #8]
 800b2a0:	7da0      	ldrb	r0, [r4, #22]
 800b2a2:	2102      	movs	r1, #2
 800b2a4:	3302      	adds	r3, #2
 800b2a6:	444a      	add	r2, r9
 800b2a8:	1b9b      	subs	r3, r3, r6
 800b2aa:	7561      	strb	r1, [r4, #21]
 800b2ac:	60a2      	str	r2, [r4, #8]
 800b2ae:	6123      	str	r3, [r4, #16]
 800b2b0:	f080 0001 	eor.w	r0, r0, #1
 800b2b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2b8:	2102      	movs	r1, #2
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	f000 ff90 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800b2c0:	b180      	cbz	r0, 800b2e4 <ucdr_deserialize_uint16_t+0xa0>
 800b2c2:	7d23      	ldrb	r3, [r4, #20]
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	68a3      	ldr	r3, [r4, #8]
 800b2c8:	d011      	beq.n	800b2ee <ucdr_deserialize_uint16_t+0xaa>
 800b2ca:	785b      	ldrb	r3, [r3, #1]
 800b2cc:	702b      	strb	r3, [r5, #0]
 800b2ce:	68a3      	ldr	r3, [r4, #8]
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	706b      	strb	r3, [r5, #1]
 800b2d4:	68a2      	ldr	r2, [r4, #8]
 800b2d6:	6923      	ldr	r3, [r4, #16]
 800b2d8:	3202      	adds	r2, #2
 800b2da:	3302      	adds	r3, #2
 800b2dc:	2102      	movs	r1, #2
 800b2de:	60a2      	str	r2, [r4, #8]
 800b2e0:	6123      	str	r3, [r4, #16]
 800b2e2:	7561      	strb	r1, [r4, #21]
 800b2e4:	7da0      	ldrb	r0, [r4, #22]
 800b2e6:	f080 0001 	eor.w	r0, r0, #1
 800b2ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2ee:	881b      	ldrh	r3, [r3, #0]
 800b2f0:	802b      	strh	r3, [r5, #0]
 800b2f2:	e7ef      	b.n	800b2d4 <ucdr_deserialize_uint16_t+0x90>
 800b2f4:	68a2      	ldr	r2, [r4, #8]
 800b2f6:	6923      	ldr	r3, [r4, #16]
 800b2f8:	7da0      	ldrb	r0, [r4, #22]
 800b2fa:	f884 8015 	strb.w	r8, [r4, #21]
 800b2fe:	1b92      	subs	r2, r2, r6
 800b300:	1b9b      	subs	r3, r3, r6
 800b302:	60a2      	str	r2, [r4, #8]
 800b304:	6123      	str	r3, [r4, #16]
 800b306:	f080 0001 	eor.w	r0, r0, #1
 800b30a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b30e:	68a3      	ldr	r3, [r4, #8]
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	706b      	strb	r3, [r5, #1]
 800b314:	e7c2      	b.n	800b29c <ucdr_deserialize_uint16_t+0x58>
 800b316:	4639      	mov	r1, r7
 800b318:	4632      	mov	r2, r6
 800b31a:	4628      	mov	r0, r5
 800b31c:	f00d fc81 	bl	8018c22 <memcpy>
 800b320:	68a1      	ldr	r1, [r4, #8]
 800b322:	464a      	mov	r2, r9
 800b324:	19a8      	adds	r0, r5, r6
 800b326:	f00d fc7c 	bl	8018c22 <memcpy>
 800b32a:	e7b7      	b.n	800b29c <ucdr_deserialize_uint16_t+0x58>

0800b32c <ucdr_deserialize_endian_uint16_t>:
 800b32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b330:	460e      	mov	r6, r1
 800b332:	2102      	movs	r1, #2
 800b334:	4604      	mov	r4, r0
 800b336:	4615      	mov	r5, r2
 800b338:	f000 ffa6 	bl	800c288 <ucdr_buffer_alignment>
 800b33c:	4601      	mov	r1, r0
 800b33e:	4620      	mov	r0, r4
 800b340:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b344:	f000 ffe4 	bl	800c310 <ucdr_advance_buffer>
 800b348:	2102      	movs	r1, #2
 800b34a:	4620      	mov	r0, r4
 800b34c:	f000 ff3c 	bl	800c1c8 <ucdr_check_buffer_available_for>
 800b350:	bb70      	cbnz	r0, 800b3b0 <ucdr_deserialize_endian_uint16_t+0x84>
 800b352:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800b356:	4547      	cmp	r7, r8
 800b358:	d925      	bls.n	800b3a6 <ucdr_deserialize_endian_uint16_t+0x7a>
 800b35a:	6923      	ldr	r3, [r4, #16]
 800b35c:	60a7      	str	r7, [r4, #8]
 800b35e:	eba7 0708 	sub.w	r7, r7, r8
 800b362:	443b      	add	r3, r7
 800b364:	f1c7 0a02 	rsb	sl, r7, #2
 800b368:	6123      	str	r3, [r4, #16]
 800b36a:	4651      	mov	r1, sl
 800b36c:	4620      	mov	r0, r4
 800b36e:	f000 ff37 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800b372:	2800      	cmp	r0, #0
 800b374:	d034      	beq.n	800b3e0 <ucdr_deserialize_endian_uint16_t+0xb4>
 800b376:	2e01      	cmp	r6, #1
 800b378:	d043      	beq.n	800b402 <ucdr_deserialize_endian_uint16_t+0xd6>
 800b37a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b37e:	702b      	strb	r3, [r5, #0]
 800b380:	2f00      	cmp	r7, #0
 800b382:	d03a      	beq.n	800b3fa <ucdr_deserialize_endian_uint16_t+0xce>
 800b384:	f898 3000 	ldrb.w	r3, [r8]
 800b388:	706b      	strb	r3, [r5, #1]
 800b38a:	6923      	ldr	r3, [r4, #16]
 800b38c:	68a2      	ldr	r2, [r4, #8]
 800b38e:	7da0      	ldrb	r0, [r4, #22]
 800b390:	2102      	movs	r1, #2
 800b392:	3302      	adds	r3, #2
 800b394:	4452      	add	r2, sl
 800b396:	1bdb      	subs	r3, r3, r7
 800b398:	7561      	strb	r1, [r4, #21]
 800b39a:	60a2      	str	r2, [r4, #8]
 800b39c:	6123      	str	r3, [r4, #16]
 800b39e:	f080 0001 	eor.w	r0, r0, #1
 800b3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3a6:	2102      	movs	r1, #2
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	f000 ff19 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800b3ae:	b178      	cbz	r0, 800b3d0 <ucdr_deserialize_endian_uint16_t+0xa4>
 800b3b0:	2e01      	cmp	r6, #1
 800b3b2:	68a3      	ldr	r3, [r4, #8]
 800b3b4:	d011      	beq.n	800b3da <ucdr_deserialize_endian_uint16_t+0xae>
 800b3b6:	785b      	ldrb	r3, [r3, #1]
 800b3b8:	702b      	strb	r3, [r5, #0]
 800b3ba:	68a3      	ldr	r3, [r4, #8]
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	706b      	strb	r3, [r5, #1]
 800b3c0:	68a2      	ldr	r2, [r4, #8]
 800b3c2:	6923      	ldr	r3, [r4, #16]
 800b3c4:	3202      	adds	r2, #2
 800b3c6:	3302      	adds	r3, #2
 800b3c8:	2102      	movs	r1, #2
 800b3ca:	60a2      	str	r2, [r4, #8]
 800b3cc:	6123      	str	r3, [r4, #16]
 800b3ce:	7561      	strb	r1, [r4, #21]
 800b3d0:	7da0      	ldrb	r0, [r4, #22]
 800b3d2:	f080 0001 	eor.w	r0, r0, #1
 800b3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3da:	881b      	ldrh	r3, [r3, #0]
 800b3dc:	802b      	strh	r3, [r5, #0]
 800b3de:	e7ef      	b.n	800b3c0 <ucdr_deserialize_endian_uint16_t+0x94>
 800b3e0:	68a2      	ldr	r2, [r4, #8]
 800b3e2:	6923      	ldr	r3, [r4, #16]
 800b3e4:	7da0      	ldrb	r0, [r4, #22]
 800b3e6:	f884 9015 	strb.w	r9, [r4, #21]
 800b3ea:	1bd2      	subs	r2, r2, r7
 800b3ec:	1bdb      	subs	r3, r3, r7
 800b3ee:	60a2      	str	r2, [r4, #8]
 800b3f0:	6123      	str	r3, [r4, #16]
 800b3f2:	f080 0001 	eor.w	r0, r0, #1
 800b3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3fa:	68a3      	ldr	r3, [r4, #8]
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	706b      	strb	r3, [r5, #1]
 800b400:	e7c3      	b.n	800b38a <ucdr_deserialize_endian_uint16_t+0x5e>
 800b402:	4641      	mov	r1, r8
 800b404:	463a      	mov	r2, r7
 800b406:	4628      	mov	r0, r5
 800b408:	f00d fc0b 	bl	8018c22 <memcpy>
 800b40c:	68a1      	ldr	r1, [r4, #8]
 800b40e:	4652      	mov	r2, sl
 800b410:	19e8      	adds	r0, r5, r7
 800b412:	f00d fc06 	bl	8018c22 <memcpy>
 800b416:	e7b8      	b.n	800b38a <ucdr_deserialize_endian_uint16_t+0x5e>

0800b418 <ucdr_serialize_uint32_t>:
 800b418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b41c:	b082      	sub	sp, #8
 800b41e:	4604      	mov	r4, r0
 800b420:	9101      	str	r1, [sp, #4]
 800b422:	2104      	movs	r1, #4
 800b424:	f000 ff30 	bl	800c288 <ucdr_buffer_alignment>
 800b428:	4601      	mov	r1, r0
 800b42a:	4620      	mov	r0, r4
 800b42c:	7d67      	ldrb	r7, [r4, #21]
 800b42e:	f000 ff6f 	bl	800c310 <ucdr_advance_buffer>
 800b432:	2104      	movs	r1, #4
 800b434:	4620      	mov	r0, r4
 800b436:	f000 fec7 	bl	800c1c8 <ucdr_check_buffer_available_for>
 800b43a:	2800      	cmp	r0, #0
 800b43c:	d139      	bne.n	800b4b2 <ucdr_serialize_uint32_t+0x9a>
 800b43e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b442:	42ab      	cmp	r3, r5
 800b444:	d930      	bls.n	800b4a8 <ucdr_serialize_uint32_t+0x90>
 800b446:	1b5e      	subs	r6, r3, r5
 800b448:	60a3      	str	r3, [r4, #8]
 800b44a:	6923      	ldr	r3, [r4, #16]
 800b44c:	f1c6 0804 	rsb	r8, r6, #4
 800b450:	4433      	add	r3, r6
 800b452:	6123      	str	r3, [r4, #16]
 800b454:	4641      	mov	r1, r8
 800b456:	4620      	mov	r0, r4
 800b458:	f000 fec2 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800b45c:	2800      	cmp	r0, #0
 800b45e:	d04c      	beq.n	800b4fa <ucdr_serialize_uint32_t+0xe2>
 800b460:	7d23      	ldrb	r3, [r4, #20]
 800b462:	2b01      	cmp	r3, #1
 800b464:	d063      	beq.n	800b52e <ucdr_serialize_uint32_t+0x116>
 800b466:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b46a:	702b      	strb	r3, [r5, #0]
 800b46c:	2e00      	cmp	r6, #0
 800b46e:	d051      	beq.n	800b514 <ucdr_serialize_uint32_t+0xfc>
 800b470:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b474:	706b      	strb	r3, [r5, #1]
 800b476:	2e01      	cmp	r6, #1
 800b478:	d050      	beq.n	800b51c <ucdr_serialize_uint32_t+0x104>
 800b47a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b47e:	70ab      	strb	r3, [r5, #2]
 800b480:	2e02      	cmp	r6, #2
 800b482:	d04f      	beq.n	800b524 <ucdr_serialize_uint32_t+0x10c>
 800b484:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b488:	70eb      	strb	r3, [r5, #3]
 800b48a:	6923      	ldr	r3, [r4, #16]
 800b48c:	68a2      	ldr	r2, [r4, #8]
 800b48e:	7da0      	ldrb	r0, [r4, #22]
 800b490:	3304      	adds	r3, #4
 800b492:	1b9e      	subs	r6, r3, r6
 800b494:	4442      	add	r2, r8
 800b496:	2304      	movs	r3, #4
 800b498:	f080 0001 	eor.w	r0, r0, #1
 800b49c:	60a2      	str	r2, [r4, #8]
 800b49e:	6126      	str	r6, [r4, #16]
 800b4a0:	7563      	strb	r3, [r4, #21]
 800b4a2:	b002      	add	sp, #8
 800b4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4a8:	2104      	movs	r1, #4
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	f000 fe98 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800b4b0:	b1d0      	cbz	r0, 800b4e8 <ucdr_serialize_uint32_t+0xd0>
 800b4b2:	7d23      	ldrb	r3, [r4, #20]
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	68a3      	ldr	r3, [r4, #8]
 800b4b8:	d01c      	beq.n	800b4f4 <ucdr_serialize_uint32_t+0xdc>
 800b4ba:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b4be:	701a      	strb	r2, [r3, #0]
 800b4c0:	68a3      	ldr	r3, [r4, #8]
 800b4c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b4c6:	705a      	strb	r2, [r3, #1]
 800b4c8:	68a3      	ldr	r3, [r4, #8]
 800b4ca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b4ce:	709a      	strb	r2, [r3, #2]
 800b4d0:	68a3      	ldr	r3, [r4, #8]
 800b4d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b4d6:	70da      	strb	r2, [r3, #3]
 800b4d8:	68a2      	ldr	r2, [r4, #8]
 800b4da:	6923      	ldr	r3, [r4, #16]
 800b4dc:	3204      	adds	r2, #4
 800b4de:	3304      	adds	r3, #4
 800b4e0:	2104      	movs	r1, #4
 800b4e2:	60a2      	str	r2, [r4, #8]
 800b4e4:	6123      	str	r3, [r4, #16]
 800b4e6:	7561      	strb	r1, [r4, #21]
 800b4e8:	7da0      	ldrb	r0, [r4, #22]
 800b4ea:	f080 0001 	eor.w	r0, r0, #1
 800b4ee:	b002      	add	sp, #8
 800b4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4f4:	9a01      	ldr	r2, [sp, #4]
 800b4f6:	601a      	str	r2, [r3, #0]
 800b4f8:	e7ee      	b.n	800b4d8 <ucdr_serialize_uint32_t+0xc0>
 800b4fa:	68a2      	ldr	r2, [r4, #8]
 800b4fc:	6923      	ldr	r3, [r4, #16]
 800b4fe:	7da0      	ldrb	r0, [r4, #22]
 800b500:	7567      	strb	r7, [r4, #21]
 800b502:	1b92      	subs	r2, r2, r6
 800b504:	1b9b      	subs	r3, r3, r6
 800b506:	f080 0001 	eor.w	r0, r0, #1
 800b50a:	60a2      	str	r2, [r4, #8]
 800b50c:	6123      	str	r3, [r4, #16]
 800b50e:	b002      	add	sp, #8
 800b510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b514:	68a3      	ldr	r3, [r4, #8]
 800b516:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b51a:	701a      	strb	r2, [r3, #0]
 800b51c:	68a3      	ldr	r3, [r4, #8]
 800b51e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b522:	701a      	strb	r2, [r3, #0]
 800b524:	68a3      	ldr	r3, [r4, #8]
 800b526:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b52a:	701a      	strb	r2, [r3, #0]
 800b52c:	e7ad      	b.n	800b48a <ucdr_serialize_uint32_t+0x72>
 800b52e:	4628      	mov	r0, r5
 800b530:	ad01      	add	r5, sp, #4
 800b532:	4629      	mov	r1, r5
 800b534:	4632      	mov	r2, r6
 800b536:	f00d fb74 	bl	8018c22 <memcpy>
 800b53a:	68a0      	ldr	r0, [r4, #8]
 800b53c:	4642      	mov	r2, r8
 800b53e:	19a9      	adds	r1, r5, r6
 800b540:	f00d fb6f 	bl	8018c22 <memcpy>
 800b544:	e7a1      	b.n	800b48a <ucdr_serialize_uint32_t+0x72>
 800b546:	bf00      	nop

0800b548 <ucdr_serialize_endian_uint32_t>:
 800b548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b54c:	b083      	sub	sp, #12
 800b54e:	460d      	mov	r5, r1
 800b550:	2104      	movs	r1, #4
 800b552:	4604      	mov	r4, r0
 800b554:	9201      	str	r2, [sp, #4]
 800b556:	f000 fe97 	bl	800c288 <ucdr_buffer_alignment>
 800b55a:	4601      	mov	r1, r0
 800b55c:	4620      	mov	r0, r4
 800b55e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b562:	f000 fed5 	bl	800c310 <ucdr_advance_buffer>
 800b566:	2104      	movs	r1, #4
 800b568:	4620      	mov	r0, r4
 800b56a:	f000 fe2d 	bl	800c1c8 <ucdr_check_buffer_available_for>
 800b56e:	2800      	cmp	r0, #0
 800b570:	d138      	bne.n	800b5e4 <ucdr_serialize_endian_uint32_t+0x9c>
 800b572:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b576:	42b7      	cmp	r7, r6
 800b578:	d92f      	bls.n	800b5da <ucdr_serialize_endian_uint32_t+0x92>
 800b57a:	6923      	ldr	r3, [r4, #16]
 800b57c:	60a7      	str	r7, [r4, #8]
 800b57e:	1bbf      	subs	r7, r7, r6
 800b580:	443b      	add	r3, r7
 800b582:	f1c7 0904 	rsb	r9, r7, #4
 800b586:	6123      	str	r3, [r4, #16]
 800b588:	4649      	mov	r1, r9
 800b58a:	4620      	mov	r0, r4
 800b58c:	f000 fe28 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800b590:	2800      	cmp	r0, #0
 800b592:	d04a      	beq.n	800b62a <ucdr_serialize_endian_uint32_t+0xe2>
 800b594:	2d01      	cmp	r5, #1
 800b596:	d063      	beq.n	800b660 <ucdr_serialize_endian_uint32_t+0x118>
 800b598:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b59c:	7033      	strb	r3, [r6, #0]
 800b59e:	2f00      	cmp	r7, #0
 800b5a0:	d051      	beq.n	800b646 <ucdr_serialize_endian_uint32_t+0xfe>
 800b5a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b5a6:	7073      	strb	r3, [r6, #1]
 800b5a8:	2f01      	cmp	r7, #1
 800b5aa:	d050      	beq.n	800b64e <ucdr_serialize_endian_uint32_t+0x106>
 800b5ac:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b5b0:	70b3      	strb	r3, [r6, #2]
 800b5b2:	2f02      	cmp	r7, #2
 800b5b4:	d04f      	beq.n	800b656 <ucdr_serialize_endian_uint32_t+0x10e>
 800b5b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b5ba:	70f3      	strb	r3, [r6, #3]
 800b5bc:	6923      	ldr	r3, [r4, #16]
 800b5be:	68a2      	ldr	r2, [r4, #8]
 800b5c0:	7da0      	ldrb	r0, [r4, #22]
 800b5c2:	3304      	adds	r3, #4
 800b5c4:	444a      	add	r2, r9
 800b5c6:	1bdb      	subs	r3, r3, r7
 800b5c8:	2104      	movs	r1, #4
 800b5ca:	f080 0001 	eor.w	r0, r0, #1
 800b5ce:	60a2      	str	r2, [r4, #8]
 800b5d0:	6123      	str	r3, [r4, #16]
 800b5d2:	7561      	strb	r1, [r4, #21]
 800b5d4:	b003      	add	sp, #12
 800b5d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5da:	2104      	movs	r1, #4
 800b5dc:	4620      	mov	r0, r4
 800b5de:	f000 fdff 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800b5e2:	b1c8      	cbz	r0, 800b618 <ucdr_serialize_endian_uint32_t+0xd0>
 800b5e4:	2d01      	cmp	r5, #1
 800b5e6:	68a3      	ldr	r3, [r4, #8]
 800b5e8:	d01c      	beq.n	800b624 <ucdr_serialize_endian_uint32_t+0xdc>
 800b5ea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b5ee:	701a      	strb	r2, [r3, #0]
 800b5f0:	68a3      	ldr	r3, [r4, #8]
 800b5f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b5f6:	705a      	strb	r2, [r3, #1]
 800b5f8:	68a3      	ldr	r3, [r4, #8]
 800b5fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b5fe:	709a      	strb	r2, [r3, #2]
 800b600:	68a3      	ldr	r3, [r4, #8]
 800b602:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b606:	70da      	strb	r2, [r3, #3]
 800b608:	68a2      	ldr	r2, [r4, #8]
 800b60a:	6923      	ldr	r3, [r4, #16]
 800b60c:	3204      	adds	r2, #4
 800b60e:	3304      	adds	r3, #4
 800b610:	2104      	movs	r1, #4
 800b612:	60a2      	str	r2, [r4, #8]
 800b614:	6123      	str	r3, [r4, #16]
 800b616:	7561      	strb	r1, [r4, #21]
 800b618:	7da0      	ldrb	r0, [r4, #22]
 800b61a:	f080 0001 	eor.w	r0, r0, #1
 800b61e:	b003      	add	sp, #12
 800b620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b624:	9a01      	ldr	r2, [sp, #4]
 800b626:	601a      	str	r2, [r3, #0]
 800b628:	e7ee      	b.n	800b608 <ucdr_serialize_endian_uint32_t+0xc0>
 800b62a:	68a2      	ldr	r2, [r4, #8]
 800b62c:	6923      	ldr	r3, [r4, #16]
 800b62e:	7da0      	ldrb	r0, [r4, #22]
 800b630:	f884 8015 	strb.w	r8, [r4, #21]
 800b634:	1bd2      	subs	r2, r2, r7
 800b636:	1bdb      	subs	r3, r3, r7
 800b638:	f080 0001 	eor.w	r0, r0, #1
 800b63c:	60a2      	str	r2, [r4, #8]
 800b63e:	6123      	str	r3, [r4, #16]
 800b640:	b003      	add	sp, #12
 800b642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b646:	68a3      	ldr	r3, [r4, #8]
 800b648:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b64c:	701a      	strb	r2, [r3, #0]
 800b64e:	68a3      	ldr	r3, [r4, #8]
 800b650:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b654:	701a      	strb	r2, [r3, #0]
 800b656:	68a3      	ldr	r3, [r4, #8]
 800b658:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b65c:	701a      	strb	r2, [r3, #0]
 800b65e:	e7ad      	b.n	800b5bc <ucdr_serialize_endian_uint32_t+0x74>
 800b660:	ad01      	add	r5, sp, #4
 800b662:	4629      	mov	r1, r5
 800b664:	463a      	mov	r2, r7
 800b666:	4630      	mov	r0, r6
 800b668:	f00d fadb 	bl	8018c22 <memcpy>
 800b66c:	68a0      	ldr	r0, [r4, #8]
 800b66e:	464a      	mov	r2, r9
 800b670:	19e9      	adds	r1, r5, r7
 800b672:	f00d fad6 	bl	8018c22 <memcpy>
 800b676:	e7a1      	b.n	800b5bc <ucdr_serialize_endian_uint32_t+0x74>

0800b678 <ucdr_deserialize_uint32_t>:
 800b678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b67c:	460d      	mov	r5, r1
 800b67e:	2104      	movs	r1, #4
 800b680:	4604      	mov	r4, r0
 800b682:	f000 fe01 	bl	800c288 <ucdr_buffer_alignment>
 800b686:	4601      	mov	r1, r0
 800b688:	4620      	mov	r0, r4
 800b68a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b68e:	f000 fe3f 	bl	800c310 <ucdr_advance_buffer>
 800b692:	2104      	movs	r1, #4
 800b694:	4620      	mov	r0, r4
 800b696:	f000 fd97 	bl	800c1c8 <ucdr_check_buffer_available_for>
 800b69a:	2800      	cmp	r0, #0
 800b69c:	d138      	bne.n	800b710 <ucdr_deserialize_uint32_t+0x98>
 800b69e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b6a2:	42b7      	cmp	r7, r6
 800b6a4:	d92f      	bls.n	800b706 <ucdr_deserialize_uint32_t+0x8e>
 800b6a6:	6923      	ldr	r3, [r4, #16]
 800b6a8:	60a7      	str	r7, [r4, #8]
 800b6aa:	1bbf      	subs	r7, r7, r6
 800b6ac:	443b      	add	r3, r7
 800b6ae:	f1c7 0904 	rsb	r9, r7, #4
 800b6b2:	6123      	str	r3, [r4, #16]
 800b6b4:	4649      	mov	r1, r9
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	f000 fd92 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	d046      	beq.n	800b74e <ucdr_deserialize_uint32_t+0xd6>
 800b6c0:	7d23      	ldrb	r3, [r4, #20]
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d05c      	beq.n	800b780 <ucdr_deserialize_uint32_t+0x108>
 800b6c6:	78f3      	ldrb	r3, [r6, #3]
 800b6c8:	702b      	strb	r3, [r5, #0]
 800b6ca:	2f00      	cmp	r7, #0
 800b6cc:	d04c      	beq.n	800b768 <ucdr_deserialize_uint32_t+0xf0>
 800b6ce:	78b3      	ldrb	r3, [r6, #2]
 800b6d0:	706b      	strb	r3, [r5, #1]
 800b6d2:	2f01      	cmp	r7, #1
 800b6d4:	f105 0302 	add.w	r3, r5, #2
 800b6d8:	d04a      	beq.n	800b770 <ucdr_deserialize_uint32_t+0xf8>
 800b6da:	7873      	ldrb	r3, [r6, #1]
 800b6dc:	70ab      	strb	r3, [r5, #2]
 800b6de:	2f02      	cmp	r7, #2
 800b6e0:	f105 0303 	add.w	r3, r5, #3
 800b6e4:	d048      	beq.n	800b778 <ucdr_deserialize_uint32_t+0x100>
 800b6e6:	7833      	ldrb	r3, [r6, #0]
 800b6e8:	70eb      	strb	r3, [r5, #3]
 800b6ea:	6923      	ldr	r3, [r4, #16]
 800b6ec:	68a2      	ldr	r2, [r4, #8]
 800b6ee:	7da0      	ldrb	r0, [r4, #22]
 800b6f0:	2104      	movs	r1, #4
 800b6f2:	3304      	adds	r3, #4
 800b6f4:	444a      	add	r2, r9
 800b6f6:	1bdb      	subs	r3, r3, r7
 800b6f8:	7561      	strb	r1, [r4, #21]
 800b6fa:	60a2      	str	r2, [r4, #8]
 800b6fc:	6123      	str	r3, [r4, #16]
 800b6fe:	f080 0001 	eor.w	r0, r0, #1
 800b702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b706:	2104      	movs	r1, #4
 800b708:	4620      	mov	r0, r4
 800b70a:	f000 fd69 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800b70e:	b1b0      	cbz	r0, 800b73e <ucdr_deserialize_uint32_t+0xc6>
 800b710:	7d23      	ldrb	r3, [r4, #20]
 800b712:	2b01      	cmp	r3, #1
 800b714:	68a3      	ldr	r3, [r4, #8]
 800b716:	d017      	beq.n	800b748 <ucdr_deserialize_uint32_t+0xd0>
 800b718:	78db      	ldrb	r3, [r3, #3]
 800b71a:	702b      	strb	r3, [r5, #0]
 800b71c:	68a3      	ldr	r3, [r4, #8]
 800b71e:	789b      	ldrb	r3, [r3, #2]
 800b720:	706b      	strb	r3, [r5, #1]
 800b722:	68a3      	ldr	r3, [r4, #8]
 800b724:	785b      	ldrb	r3, [r3, #1]
 800b726:	70ab      	strb	r3, [r5, #2]
 800b728:	68a3      	ldr	r3, [r4, #8]
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	70eb      	strb	r3, [r5, #3]
 800b72e:	68a2      	ldr	r2, [r4, #8]
 800b730:	6923      	ldr	r3, [r4, #16]
 800b732:	3204      	adds	r2, #4
 800b734:	3304      	adds	r3, #4
 800b736:	2104      	movs	r1, #4
 800b738:	60a2      	str	r2, [r4, #8]
 800b73a:	6123      	str	r3, [r4, #16]
 800b73c:	7561      	strb	r1, [r4, #21]
 800b73e:	7da0      	ldrb	r0, [r4, #22]
 800b740:	f080 0001 	eor.w	r0, r0, #1
 800b744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	602b      	str	r3, [r5, #0]
 800b74c:	e7ef      	b.n	800b72e <ucdr_deserialize_uint32_t+0xb6>
 800b74e:	68a2      	ldr	r2, [r4, #8]
 800b750:	6923      	ldr	r3, [r4, #16]
 800b752:	7da0      	ldrb	r0, [r4, #22]
 800b754:	f884 8015 	strb.w	r8, [r4, #21]
 800b758:	1bd2      	subs	r2, r2, r7
 800b75a:	1bdb      	subs	r3, r3, r7
 800b75c:	60a2      	str	r2, [r4, #8]
 800b75e:	6123      	str	r3, [r4, #16]
 800b760:	f080 0001 	eor.w	r0, r0, #1
 800b764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b768:	68a3      	ldr	r3, [r4, #8]
 800b76a:	789b      	ldrb	r3, [r3, #2]
 800b76c:	706b      	strb	r3, [r5, #1]
 800b76e:	1cab      	adds	r3, r5, #2
 800b770:	68a2      	ldr	r2, [r4, #8]
 800b772:	7852      	ldrb	r2, [r2, #1]
 800b774:	f803 2b01 	strb.w	r2, [r3], #1
 800b778:	68a2      	ldr	r2, [r4, #8]
 800b77a:	7812      	ldrb	r2, [r2, #0]
 800b77c:	701a      	strb	r2, [r3, #0]
 800b77e:	e7b4      	b.n	800b6ea <ucdr_deserialize_uint32_t+0x72>
 800b780:	4631      	mov	r1, r6
 800b782:	463a      	mov	r2, r7
 800b784:	4628      	mov	r0, r5
 800b786:	f00d fa4c 	bl	8018c22 <memcpy>
 800b78a:	68a1      	ldr	r1, [r4, #8]
 800b78c:	464a      	mov	r2, r9
 800b78e:	19e8      	adds	r0, r5, r7
 800b790:	f00d fa47 	bl	8018c22 <memcpy>
 800b794:	e7a9      	b.n	800b6ea <ucdr_deserialize_uint32_t+0x72>
 800b796:	bf00      	nop

0800b798 <ucdr_deserialize_endian_uint32_t>:
 800b798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b79c:	460e      	mov	r6, r1
 800b79e:	2104      	movs	r1, #4
 800b7a0:	4604      	mov	r4, r0
 800b7a2:	4615      	mov	r5, r2
 800b7a4:	f000 fd70 	bl	800c288 <ucdr_buffer_alignment>
 800b7a8:	4601      	mov	r1, r0
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b7b0:	f000 fdae 	bl	800c310 <ucdr_advance_buffer>
 800b7b4:	2104      	movs	r1, #4
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f000 fd06 	bl	800c1c8 <ucdr_check_buffer_available_for>
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	d13c      	bne.n	800b83a <ucdr_deserialize_endian_uint32_t+0xa2>
 800b7c0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800b7c4:	42bb      	cmp	r3, r7
 800b7c6:	d933      	bls.n	800b830 <ucdr_deserialize_endian_uint32_t+0x98>
 800b7c8:	eba3 0807 	sub.w	r8, r3, r7
 800b7cc:	60a3      	str	r3, [r4, #8]
 800b7ce:	6923      	ldr	r3, [r4, #16]
 800b7d0:	f1c8 0a04 	rsb	sl, r8, #4
 800b7d4:	4443      	add	r3, r8
 800b7d6:	6123      	str	r3, [r4, #16]
 800b7d8:	4651      	mov	r1, sl
 800b7da:	4620      	mov	r0, r4
 800b7dc:	f000 fd00 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	d048      	beq.n	800b876 <ucdr_deserialize_endian_uint32_t+0xde>
 800b7e4:	2e01      	cmp	r6, #1
 800b7e6:	d061      	beq.n	800b8ac <ucdr_deserialize_endian_uint32_t+0x114>
 800b7e8:	78fb      	ldrb	r3, [r7, #3]
 800b7ea:	702b      	strb	r3, [r5, #0]
 800b7ec:	f1b8 0f00 	cmp.w	r8, #0
 800b7f0:	d050      	beq.n	800b894 <ucdr_deserialize_endian_uint32_t+0xfc>
 800b7f2:	78bb      	ldrb	r3, [r7, #2]
 800b7f4:	706b      	strb	r3, [r5, #1]
 800b7f6:	f1b8 0f01 	cmp.w	r8, #1
 800b7fa:	f105 0302 	add.w	r3, r5, #2
 800b7fe:	d04d      	beq.n	800b89c <ucdr_deserialize_endian_uint32_t+0x104>
 800b800:	787b      	ldrb	r3, [r7, #1]
 800b802:	70ab      	strb	r3, [r5, #2]
 800b804:	f1b8 0f02 	cmp.w	r8, #2
 800b808:	f105 0303 	add.w	r3, r5, #3
 800b80c:	d04a      	beq.n	800b8a4 <ucdr_deserialize_endian_uint32_t+0x10c>
 800b80e:	783b      	ldrb	r3, [r7, #0]
 800b810:	70eb      	strb	r3, [r5, #3]
 800b812:	6923      	ldr	r3, [r4, #16]
 800b814:	68a2      	ldr	r2, [r4, #8]
 800b816:	7da0      	ldrb	r0, [r4, #22]
 800b818:	2104      	movs	r1, #4
 800b81a:	3304      	adds	r3, #4
 800b81c:	4452      	add	r2, sl
 800b81e:	eba3 0308 	sub.w	r3, r3, r8
 800b822:	7561      	strb	r1, [r4, #21]
 800b824:	60a2      	str	r2, [r4, #8]
 800b826:	6123      	str	r3, [r4, #16]
 800b828:	f080 0001 	eor.w	r0, r0, #1
 800b82c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b830:	2104      	movs	r1, #4
 800b832:	4620      	mov	r0, r4
 800b834:	f000 fcd4 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800b838:	b1a8      	cbz	r0, 800b866 <ucdr_deserialize_endian_uint32_t+0xce>
 800b83a:	2e01      	cmp	r6, #1
 800b83c:	68a3      	ldr	r3, [r4, #8]
 800b83e:	d017      	beq.n	800b870 <ucdr_deserialize_endian_uint32_t+0xd8>
 800b840:	78db      	ldrb	r3, [r3, #3]
 800b842:	702b      	strb	r3, [r5, #0]
 800b844:	68a3      	ldr	r3, [r4, #8]
 800b846:	789b      	ldrb	r3, [r3, #2]
 800b848:	706b      	strb	r3, [r5, #1]
 800b84a:	68a3      	ldr	r3, [r4, #8]
 800b84c:	785b      	ldrb	r3, [r3, #1]
 800b84e:	70ab      	strb	r3, [r5, #2]
 800b850:	68a3      	ldr	r3, [r4, #8]
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	70eb      	strb	r3, [r5, #3]
 800b856:	68a2      	ldr	r2, [r4, #8]
 800b858:	6923      	ldr	r3, [r4, #16]
 800b85a:	3204      	adds	r2, #4
 800b85c:	3304      	adds	r3, #4
 800b85e:	2104      	movs	r1, #4
 800b860:	60a2      	str	r2, [r4, #8]
 800b862:	6123      	str	r3, [r4, #16]
 800b864:	7561      	strb	r1, [r4, #21]
 800b866:	7da0      	ldrb	r0, [r4, #22]
 800b868:	f080 0001 	eor.w	r0, r0, #1
 800b86c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	602b      	str	r3, [r5, #0]
 800b874:	e7ef      	b.n	800b856 <ucdr_deserialize_endian_uint32_t+0xbe>
 800b876:	68a2      	ldr	r2, [r4, #8]
 800b878:	6923      	ldr	r3, [r4, #16]
 800b87a:	7da0      	ldrb	r0, [r4, #22]
 800b87c:	f884 9015 	strb.w	r9, [r4, #21]
 800b880:	eba2 0208 	sub.w	r2, r2, r8
 800b884:	eba3 0308 	sub.w	r3, r3, r8
 800b888:	60a2      	str	r2, [r4, #8]
 800b88a:	6123      	str	r3, [r4, #16]
 800b88c:	f080 0001 	eor.w	r0, r0, #1
 800b890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b894:	68a3      	ldr	r3, [r4, #8]
 800b896:	789b      	ldrb	r3, [r3, #2]
 800b898:	706b      	strb	r3, [r5, #1]
 800b89a:	1cab      	adds	r3, r5, #2
 800b89c:	68a2      	ldr	r2, [r4, #8]
 800b89e:	7852      	ldrb	r2, [r2, #1]
 800b8a0:	f803 2b01 	strb.w	r2, [r3], #1
 800b8a4:	68a2      	ldr	r2, [r4, #8]
 800b8a6:	7812      	ldrb	r2, [r2, #0]
 800b8a8:	701a      	strb	r2, [r3, #0]
 800b8aa:	e7b2      	b.n	800b812 <ucdr_deserialize_endian_uint32_t+0x7a>
 800b8ac:	4639      	mov	r1, r7
 800b8ae:	4642      	mov	r2, r8
 800b8b0:	4628      	mov	r0, r5
 800b8b2:	f00d f9b6 	bl	8018c22 <memcpy>
 800b8b6:	68a1      	ldr	r1, [r4, #8]
 800b8b8:	4652      	mov	r2, sl
 800b8ba:	eb05 0008 	add.w	r0, r5, r8
 800b8be:	f00d f9b0 	bl	8018c22 <memcpy>
 800b8c2:	e7a6      	b.n	800b812 <ucdr_deserialize_endian_uint32_t+0x7a>

0800b8c4 <ucdr_serialize_uint64_t>:
 800b8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8c8:	2108      	movs	r1, #8
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	e9cd 2300 	strd	r2, r3, [sp]
 800b8d2:	f000 fcd9 	bl	800c288 <ucdr_buffer_alignment>
 800b8d6:	4601      	mov	r1, r0
 800b8d8:	4620      	mov	r0, r4
 800b8da:	7d67      	ldrb	r7, [r4, #21]
 800b8dc:	f000 fd18 	bl	800c310 <ucdr_advance_buffer>
 800b8e0:	2108      	movs	r1, #8
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	f000 fc70 	bl	800c1c8 <ucdr_check_buffer_available_for>
 800b8e8:	2800      	cmp	r0, #0
 800b8ea:	d14e      	bne.n	800b98a <ucdr_serialize_uint64_t+0xc6>
 800b8ec:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b8f0:	42ab      	cmp	r3, r5
 800b8f2:	d945      	bls.n	800b980 <ucdr_serialize_uint64_t+0xbc>
 800b8f4:	1b5e      	subs	r6, r3, r5
 800b8f6:	60a3      	str	r3, [r4, #8]
 800b8f8:	6923      	ldr	r3, [r4, #16]
 800b8fa:	f1c6 0808 	rsb	r8, r6, #8
 800b8fe:	4433      	add	r3, r6
 800b900:	6123      	str	r3, [r4, #16]
 800b902:	4641      	mov	r1, r8
 800b904:	4620      	mov	r0, r4
 800b906:	f000 fc6b 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800b90a:	2800      	cmp	r0, #0
 800b90c:	d074      	beq.n	800b9f8 <ucdr_serialize_uint64_t+0x134>
 800b90e:	7d23      	ldrb	r3, [r4, #20]
 800b910:	2b01      	cmp	r3, #1
 800b912:	f000 809b 	beq.w	800ba4c <ucdr_serialize_uint64_t+0x188>
 800b916:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b91a:	702b      	strb	r3, [r5, #0]
 800b91c:	2e00      	cmp	r6, #0
 800b91e:	d078      	beq.n	800ba12 <ucdr_serialize_uint64_t+0x14e>
 800b920:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b924:	706b      	strb	r3, [r5, #1]
 800b926:	2e01      	cmp	r6, #1
 800b928:	d077      	beq.n	800ba1a <ucdr_serialize_uint64_t+0x156>
 800b92a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b92e:	70ab      	strb	r3, [r5, #2]
 800b930:	2e02      	cmp	r6, #2
 800b932:	d076      	beq.n	800ba22 <ucdr_serialize_uint64_t+0x15e>
 800b934:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b938:	70eb      	strb	r3, [r5, #3]
 800b93a:	2e03      	cmp	r6, #3
 800b93c:	d075      	beq.n	800ba2a <ucdr_serialize_uint64_t+0x166>
 800b93e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b942:	712b      	strb	r3, [r5, #4]
 800b944:	2e04      	cmp	r6, #4
 800b946:	d074      	beq.n	800ba32 <ucdr_serialize_uint64_t+0x16e>
 800b948:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b94c:	716b      	strb	r3, [r5, #5]
 800b94e:	2e05      	cmp	r6, #5
 800b950:	d073      	beq.n	800ba3a <ucdr_serialize_uint64_t+0x176>
 800b952:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b956:	71ab      	strb	r3, [r5, #6]
 800b958:	2e06      	cmp	r6, #6
 800b95a:	d072      	beq.n	800ba42 <ucdr_serialize_uint64_t+0x17e>
 800b95c:	f89d 3000 	ldrb.w	r3, [sp]
 800b960:	71eb      	strb	r3, [r5, #7]
 800b962:	6923      	ldr	r3, [r4, #16]
 800b964:	68a2      	ldr	r2, [r4, #8]
 800b966:	7da0      	ldrb	r0, [r4, #22]
 800b968:	3308      	adds	r3, #8
 800b96a:	1b9e      	subs	r6, r3, r6
 800b96c:	4442      	add	r2, r8
 800b96e:	2308      	movs	r3, #8
 800b970:	f080 0001 	eor.w	r0, r0, #1
 800b974:	60a2      	str	r2, [r4, #8]
 800b976:	6126      	str	r6, [r4, #16]
 800b978:	7563      	strb	r3, [r4, #21]
 800b97a:	b002      	add	sp, #8
 800b97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b980:	2108      	movs	r1, #8
 800b982:	4620      	mov	r0, r4
 800b984:	f000 fc2c 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800b988:	b350      	cbz	r0, 800b9e0 <ucdr_serialize_uint64_t+0x11c>
 800b98a:	7d23      	ldrb	r3, [r4, #20]
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d02d      	beq.n	800b9ec <ucdr_serialize_uint64_t+0x128>
 800b990:	68a3      	ldr	r3, [r4, #8]
 800b992:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b996:	701a      	strb	r2, [r3, #0]
 800b998:	68a3      	ldr	r3, [r4, #8]
 800b99a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b99e:	705a      	strb	r2, [r3, #1]
 800b9a0:	68a3      	ldr	r3, [r4, #8]
 800b9a2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b9a6:	709a      	strb	r2, [r3, #2]
 800b9a8:	68a3      	ldr	r3, [r4, #8]
 800b9aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b9ae:	70da      	strb	r2, [r3, #3]
 800b9b0:	68a3      	ldr	r3, [r4, #8]
 800b9b2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b9b6:	711a      	strb	r2, [r3, #4]
 800b9b8:	68a3      	ldr	r3, [r4, #8]
 800b9ba:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b9be:	715a      	strb	r2, [r3, #5]
 800b9c0:	68a3      	ldr	r3, [r4, #8]
 800b9c2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b9c6:	719a      	strb	r2, [r3, #6]
 800b9c8:	68a3      	ldr	r3, [r4, #8]
 800b9ca:	f89d 2000 	ldrb.w	r2, [sp]
 800b9ce:	71da      	strb	r2, [r3, #7]
 800b9d0:	68a2      	ldr	r2, [r4, #8]
 800b9d2:	6923      	ldr	r3, [r4, #16]
 800b9d4:	3208      	adds	r2, #8
 800b9d6:	3308      	adds	r3, #8
 800b9d8:	2108      	movs	r1, #8
 800b9da:	60a2      	str	r2, [r4, #8]
 800b9dc:	6123      	str	r3, [r4, #16]
 800b9de:	7561      	strb	r1, [r4, #21]
 800b9e0:	7da0      	ldrb	r0, [r4, #22]
 800b9e2:	f080 0001 	eor.w	r0, r0, #1
 800b9e6:	b002      	add	sp, #8
 800b9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9ec:	466b      	mov	r3, sp
 800b9ee:	cb03      	ldmia	r3!, {r0, r1}
 800b9f0:	68a3      	ldr	r3, [r4, #8]
 800b9f2:	6018      	str	r0, [r3, #0]
 800b9f4:	6059      	str	r1, [r3, #4]
 800b9f6:	e7eb      	b.n	800b9d0 <ucdr_serialize_uint64_t+0x10c>
 800b9f8:	68a2      	ldr	r2, [r4, #8]
 800b9fa:	6923      	ldr	r3, [r4, #16]
 800b9fc:	7da0      	ldrb	r0, [r4, #22]
 800b9fe:	7567      	strb	r7, [r4, #21]
 800ba00:	1b92      	subs	r2, r2, r6
 800ba02:	1b9b      	subs	r3, r3, r6
 800ba04:	f080 0001 	eor.w	r0, r0, #1
 800ba08:	60a2      	str	r2, [r4, #8]
 800ba0a:	6123      	str	r3, [r4, #16]
 800ba0c:	b002      	add	sp, #8
 800ba0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba12:	68a3      	ldr	r3, [r4, #8]
 800ba14:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba18:	701a      	strb	r2, [r3, #0]
 800ba1a:	68a3      	ldr	r3, [r4, #8]
 800ba1c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ba20:	701a      	strb	r2, [r3, #0]
 800ba22:	68a3      	ldr	r3, [r4, #8]
 800ba24:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ba28:	701a      	strb	r2, [r3, #0]
 800ba2a:	68a3      	ldr	r3, [r4, #8]
 800ba2c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ba30:	701a      	strb	r2, [r3, #0]
 800ba32:	68a3      	ldr	r3, [r4, #8]
 800ba34:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ba38:	701a      	strb	r2, [r3, #0]
 800ba3a:	68a3      	ldr	r3, [r4, #8]
 800ba3c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ba40:	701a      	strb	r2, [r3, #0]
 800ba42:	68a3      	ldr	r3, [r4, #8]
 800ba44:	f89d 2000 	ldrb.w	r2, [sp]
 800ba48:	701a      	strb	r2, [r3, #0]
 800ba4a:	e78a      	b.n	800b962 <ucdr_serialize_uint64_t+0x9e>
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	466d      	mov	r5, sp
 800ba50:	4629      	mov	r1, r5
 800ba52:	4632      	mov	r2, r6
 800ba54:	f00d f8e5 	bl	8018c22 <memcpy>
 800ba58:	68a0      	ldr	r0, [r4, #8]
 800ba5a:	4642      	mov	r2, r8
 800ba5c:	19a9      	adds	r1, r5, r6
 800ba5e:	f00d f8e0 	bl	8018c22 <memcpy>
 800ba62:	e77e      	b.n	800b962 <ucdr_serialize_uint64_t+0x9e>

0800ba64 <ucdr_serialize_int16_t>:
 800ba64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba68:	b082      	sub	sp, #8
 800ba6a:	460b      	mov	r3, r1
 800ba6c:	2102      	movs	r1, #2
 800ba6e:	4604      	mov	r4, r0
 800ba70:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ba74:	f000 fc08 	bl	800c288 <ucdr_buffer_alignment>
 800ba78:	4601      	mov	r1, r0
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	7d67      	ldrb	r7, [r4, #21]
 800ba7e:	f000 fc47 	bl	800c310 <ucdr_advance_buffer>
 800ba82:	2102      	movs	r1, #2
 800ba84:	4620      	mov	r0, r4
 800ba86:	f000 fb9f 	bl	800c1c8 <ucdr_check_buffer_available_for>
 800ba8a:	bb78      	cbnz	r0, 800baec <ucdr_serialize_int16_t+0x88>
 800ba8c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ba90:	42ab      	cmp	r3, r5
 800ba92:	d926      	bls.n	800bae2 <ucdr_serialize_int16_t+0x7e>
 800ba94:	1b5e      	subs	r6, r3, r5
 800ba96:	60a3      	str	r3, [r4, #8]
 800ba98:	6923      	ldr	r3, [r4, #16]
 800ba9a:	f1c6 0802 	rsb	r8, r6, #2
 800ba9e:	4433      	add	r3, r6
 800baa0:	6123      	str	r3, [r4, #16]
 800baa2:	4641      	mov	r1, r8
 800baa4:	4620      	mov	r0, r4
 800baa6:	f000 fb9b 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800baaa:	2800      	cmp	r0, #0
 800baac:	d03b      	beq.n	800bb26 <ucdr_serialize_int16_t+0xc2>
 800baae:	7d23      	ldrb	r3, [r4, #20]
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d04a      	beq.n	800bb4a <ucdr_serialize_int16_t+0xe6>
 800bab4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bab8:	702b      	strb	r3, [r5, #0]
 800baba:	2e00      	cmp	r6, #0
 800babc:	d040      	beq.n	800bb40 <ucdr_serialize_int16_t+0xdc>
 800babe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bac2:	706b      	strb	r3, [r5, #1]
 800bac4:	6923      	ldr	r3, [r4, #16]
 800bac6:	68a2      	ldr	r2, [r4, #8]
 800bac8:	7da0      	ldrb	r0, [r4, #22]
 800baca:	3302      	adds	r3, #2
 800bacc:	1b9e      	subs	r6, r3, r6
 800bace:	4442      	add	r2, r8
 800bad0:	2302      	movs	r3, #2
 800bad2:	f080 0001 	eor.w	r0, r0, #1
 800bad6:	60a2      	str	r2, [r4, #8]
 800bad8:	6126      	str	r6, [r4, #16]
 800bada:	7563      	strb	r3, [r4, #21]
 800badc:	b002      	add	sp, #8
 800bade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bae2:	2102      	movs	r1, #2
 800bae4:	4620      	mov	r0, r4
 800bae6:	f000 fb7b 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800baea:	b190      	cbz	r0, 800bb12 <ucdr_serialize_int16_t+0xae>
 800baec:	7d23      	ldrb	r3, [r4, #20]
 800baee:	2b01      	cmp	r3, #1
 800baf0:	68a3      	ldr	r3, [r4, #8]
 800baf2:	d014      	beq.n	800bb1e <ucdr_serialize_int16_t+0xba>
 800baf4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800baf8:	701a      	strb	r2, [r3, #0]
 800bafa:	68a3      	ldr	r3, [r4, #8]
 800bafc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bb00:	705a      	strb	r2, [r3, #1]
 800bb02:	68a2      	ldr	r2, [r4, #8]
 800bb04:	6923      	ldr	r3, [r4, #16]
 800bb06:	3202      	adds	r2, #2
 800bb08:	3302      	adds	r3, #2
 800bb0a:	2102      	movs	r1, #2
 800bb0c:	60a2      	str	r2, [r4, #8]
 800bb0e:	6123      	str	r3, [r4, #16]
 800bb10:	7561      	strb	r1, [r4, #21]
 800bb12:	7da0      	ldrb	r0, [r4, #22]
 800bb14:	f080 0001 	eor.w	r0, r0, #1
 800bb18:	b002      	add	sp, #8
 800bb1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb1e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bb22:	801a      	strh	r2, [r3, #0]
 800bb24:	e7ed      	b.n	800bb02 <ucdr_serialize_int16_t+0x9e>
 800bb26:	68a2      	ldr	r2, [r4, #8]
 800bb28:	6923      	ldr	r3, [r4, #16]
 800bb2a:	7da0      	ldrb	r0, [r4, #22]
 800bb2c:	7567      	strb	r7, [r4, #21]
 800bb2e:	1b92      	subs	r2, r2, r6
 800bb30:	1b9b      	subs	r3, r3, r6
 800bb32:	f080 0001 	eor.w	r0, r0, #1
 800bb36:	60a2      	str	r2, [r4, #8]
 800bb38:	6123      	str	r3, [r4, #16]
 800bb3a:	b002      	add	sp, #8
 800bb3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb40:	68a3      	ldr	r3, [r4, #8]
 800bb42:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bb46:	701a      	strb	r2, [r3, #0]
 800bb48:	e7bc      	b.n	800bac4 <ucdr_serialize_int16_t+0x60>
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	f10d 0506 	add.w	r5, sp, #6
 800bb50:	4629      	mov	r1, r5
 800bb52:	4632      	mov	r2, r6
 800bb54:	f00d f865 	bl	8018c22 <memcpy>
 800bb58:	68a0      	ldr	r0, [r4, #8]
 800bb5a:	4642      	mov	r2, r8
 800bb5c:	19a9      	adds	r1, r5, r6
 800bb5e:	f00d f860 	bl	8018c22 <memcpy>
 800bb62:	e7af      	b.n	800bac4 <ucdr_serialize_int16_t+0x60>

0800bb64 <ucdr_deserialize_int16_t>:
 800bb64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb68:	460d      	mov	r5, r1
 800bb6a:	2102      	movs	r1, #2
 800bb6c:	4604      	mov	r4, r0
 800bb6e:	f000 fb8b 	bl	800c288 <ucdr_buffer_alignment>
 800bb72:	4601      	mov	r1, r0
 800bb74:	4620      	mov	r0, r4
 800bb76:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bb7a:	f000 fbc9 	bl	800c310 <ucdr_advance_buffer>
 800bb7e:	2102      	movs	r1, #2
 800bb80:	4620      	mov	r0, r4
 800bb82:	f000 fb21 	bl	800c1c8 <ucdr_check_buffer_available_for>
 800bb86:	bb60      	cbnz	r0, 800bbe2 <ucdr_deserialize_int16_t+0x7e>
 800bb88:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bb8c:	42be      	cmp	r6, r7
 800bb8e:	d923      	bls.n	800bbd8 <ucdr_deserialize_int16_t+0x74>
 800bb90:	6923      	ldr	r3, [r4, #16]
 800bb92:	60a6      	str	r6, [r4, #8]
 800bb94:	1bf6      	subs	r6, r6, r7
 800bb96:	4433      	add	r3, r6
 800bb98:	f1c6 0902 	rsb	r9, r6, #2
 800bb9c:	6123      	str	r3, [r4, #16]
 800bb9e:	4649      	mov	r1, r9
 800bba0:	4620      	mov	r0, r4
 800bba2:	f000 fb1d 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800bba6:	2800      	cmp	r0, #0
 800bba8:	d034      	beq.n	800bc14 <ucdr_deserialize_int16_t+0xb0>
 800bbaa:	7d23      	ldrb	r3, [r4, #20]
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d042      	beq.n	800bc36 <ucdr_deserialize_int16_t+0xd2>
 800bbb0:	787b      	ldrb	r3, [r7, #1]
 800bbb2:	702b      	strb	r3, [r5, #0]
 800bbb4:	2e00      	cmp	r6, #0
 800bbb6:	d03a      	beq.n	800bc2e <ucdr_deserialize_int16_t+0xca>
 800bbb8:	783b      	ldrb	r3, [r7, #0]
 800bbba:	706b      	strb	r3, [r5, #1]
 800bbbc:	6923      	ldr	r3, [r4, #16]
 800bbbe:	68a2      	ldr	r2, [r4, #8]
 800bbc0:	7da0      	ldrb	r0, [r4, #22]
 800bbc2:	2102      	movs	r1, #2
 800bbc4:	3302      	adds	r3, #2
 800bbc6:	444a      	add	r2, r9
 800bbc8:	1b9b      	subs	r3, r3, r6
 800bbca:	7561      	strb	r1, [r4, #21]
 800bbcc:	60a2      	str	r2, [r4, #8]
 800bbce:	6123      	str	r3, [r4, #16]
 800bbd0:	f080 0001 	eor.w	r0, r0, #1
 800bbd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbd8:	2102      	movs	r1, #2
 800bbda:	4620      	mov	r0, r4
 800bbdc:	f000 fb00 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800bbe0:	b180      	cbz	r0, 800bc04 <ucdr_deserialize_int16_t+0xa0>
 800bbe2:	7d23      	ldrb	r3, [r4, #20]
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	68a3      	ldr	r3, [r4, #8]
 800bbe8:	d011      	beq.n	800bc0e <ucdr_deserialize_int16_t+0xaa>
 800bbea:	785b      	ldrb	r3, [r3, #1]
 800bbec:	702b      	strb	r3, [r5, #0]
 800bbee:	68a3      	ldr	r3, [r4, #8]
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	706b      	strb	r3, [r5, #1]
 800bbf4:	68a2      	ldr	r2, [r4, #8]
 800bbf6:	6923      	ldr	r3, [r4, #16]
 800bbf8:	3202      	adds	r2, #2
 800bbfa:	3302      	adds	r3, #2
 800bbfc:	2102      	movs	r1, #2
 800bbfe:	60a2      	str	r2, [r4, #8]
 800bc00:	6123      	str	r3, [r4, #16]
 800bc02:	7561      	strb	r1, [r4, #21]
 800bc04:	7da0      	ldrb	r0, [r4, #22]
 800bc06:	f080 0001 	eor.w	r0, r0, #1
 800bc0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc0e:	881b      	ldrh	r3, [r3, #0]
 800bc10:	802b      	strh	r3, [r5, #0]
 800bc12:	e7ef      	b.n	800bbf4 <ucdr_deserialize_int16_t+0x90>
 800bc14:	68a2      	ldr	r2, [r4, #8]
 800bc16:	6923      	ldr	r3, [r4, #16]
 800bc18:	7da0      	ldrb	r0, [r4, #22]
 800bc1a:	f884 8015 	strb.w	r8, [r4, #21]
 800bc1e:	1b92      	subs	r2, r2, r6
 800bc20:	1b9b      	subs	r3, r3, r6
 800bc22:	60a2      	str	r2, [r4, #8]
 800bc24:	6123      	str	r3, [r4, #16]
 800bc26:	f080 0001 	eor.w	r0, r0, #1
 800bc2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc2e:	68a3      	ldr	r3, [r4, #8]
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	706b      	strb	r3, [r5, #1]
 800bc34:	e7c2      	b.n	800bbbc <ucdr_deserialize_int16_t+0x58>
 800bc36:	4639      	mov	r1, r7
 800bc38:	4632      	mov	r2, r6
 800bc3a:	4628      	mov	r0, r5
 800bc3c:	f00c fff1 	bl	8018c22 <memcpy>
 800bc40:	68a1      	ldr	r1, [r4, #8]
 800bc42:	464a      	mov	r2, r9
 800bc44:	19a8      	adds	r0, r5, r6
 800bc46:	f00c ffec 	bl	8018c22 <memcpy>
 800bc4a:	e7b7      	b.n	800bbbc <ucdr_deserialize_int16_t+0x58>

0800bc4c <ucdr_serialize_int32_t>:
 800bc4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc50:	b082      	sub	sp, #8
 800bc52:	4604      	mov	r4, r0
 800bc54:	9101      	str	r1, [sp, #4]
 800bc56:	2104      	movs	r1, #4
 800bc58:	f000 fb16 	bl	800c288 <ucdr_buffer_alignment>
 800bc5c:	4601      	mov	r1, r0
 800bc5e:	4620      	mov	r0, r4
 800bc60:	7d67      	ldrb	r7, [r4, #21]
 800bc62:	f000 fb55 	bl	800c310 <ucdr_advance_buffer>
 800bc66:	2104      	movs	r1, #4
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f000 faad 	bl	800c1c8 <ucdr_check_buffer_available_for>
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	d139      	bne.n	800bce6 <ucdr_serialize_int32_t+0x9a>
 800bc72:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bc76:	42ab      	cmp	r3, r5
 800bc78:	d930      	bls.n	800bcdc <ucdr_serialize_int32_t+0x90>
 800bc7a:	1b5e      	subs	r6, r3, r5
 800bc7c:	60a3      	str	r3, [r4, #8]
 800bc7e:	6923      	ldr	r3, [r4, #16]
 800bc80:	f1c6 0804 	rsb	r8, r6, #4
 800bc84:	4433      	add	r3, r6
 800bc86:	6123      	str	r3, [r4, #16]
 800bc88:	4641      	mov	r1, r8
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	f000 faa8 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800bc90:	2800      	cmp	r0, #0
 800bc92:	d04c      	beq.n	800bd2e <ucdr_serialize_int32_t+0xe2>
 800bc94:	7d23      	ldrb	r3, [r4, #20]
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d063      	beq.n	800bd62 <ucdr_serialize_int32_t+0x116>
 800bc9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bc9e:	702b      	strb	r3, [r5, #0]
 800bca0:	2e00      	cmp	r6, #0
 800bca2:	d051      	beq.n	800bd48 <ucdr_serialize_int32_t+0xfc>
 800bca4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bca8:	706b      	strb	r3, [r5, #1]
 800bcaa:	2e01      	cmp	r6, #1
 800bcac:	d050      	beq.n	800bd50 <ucdr_serialize_int32_t+0x104>
 800bcae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bcb2:	70ab      	strb	r3, [r5, #2]
 800bcb4:	2e02      	cmp	r6, #2
 800bcb6:	d04f      	beq.n	800bd58 <ucdr_serialize_int32_t+0x10c>
 800bcb8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bcbc:	70eb      	strb	r3, [r5, #3]
 800bcbe:	6923      	ldr	r3, [r4, #16]
 800bcc0:	68a2      	ldr	r2, [r4, #8]
 800bcc2:	7da0      	ldrb	r0, [r4, #22]
 800bcc4:	3304      	adds	r3, #4
 800bcc6:	1b9e      	subs	r6, r3, r6
 800bcc8:	4442      	add	r2, r8
 800bcca:	2304      	movs	r3, #4
 800bccc:	f080 0001 	eor.w	r0, r0, #1
 800bcd0:	60a2      	str	r2, [r4, #8]
 800bcd2:	6126      	str	r6, [r4, #16]
 800bcd4:	7563      	strb	r3, [r4, #21]
 800bcd6:	b002      	add	sp, #8
 800bcd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcdc:	2104      	movs	r1, #4
 800bcde:	4620      	mov	r0, r4
 800bce0:	f000 fa7e 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800bce4:	b1d0      	cbz	r0, 800bd1c <ucdr_serialize_int32_t+0xd0>
 800bce6:	7d23      	ldrb	r3, [r4, #20]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	68a3      	ldr	r3, [r4, #8]
 800bcec:	d01c      	beq.n	800bd28 <ucdr_serialize_int32_t+0xdc>
 800bcee:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bcf2:	701a      	strb	r2, [r3, #0]
 800bcf4:	68a3      	ldr	r3, [r4, #8]
 800bcf6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bcfa:	705a      	strb	r2, [r3, #1]
 800bcfc:	68a3      	ldr	r3, [r4, #8]
 800bcfe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bd02:	709a      	strb	r2, [r3, #2]
 800bd04:	68a3      	ldr	r3, [r4, #8]
 800bd06:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bd0a:	70da      	strb	r2, [r3, #3]
 800bd0c:	68a2      	ldr	r2, [r4, #8]
 800bd0e:	6923      	ldr	r3, [r4, #16]
 800bd10:	3204      	adds	r2, #4
 800bd12:	3304      	adds	r3, #4
 800bd14:	2104      	movs	r1, #4
 800bd16:	60a2      	str	r2, [r4, #8]
 800bd18:	6123      	str	r3, [r4, #16]
 800bd1a:	7561      	strb	r1, [r4, #21]
 800bd1c:	7da0      	ldrb	r0, [r4, #22]
 800bd1e:	f080 0001 	eor.w	r0, r0, #1
 800bd22:	b002      	add	sp, #8
 800bd24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd28:	9a01      	ldr	r2, [sp, #4]
 800bd2a:	601a      	str	r2, [r3, #0]
 800bd2c:	e7ee      	b.n	800bd0c <ucdr_serialize_int32_t+0xc0>
 800bd2e:	68a2      	ldr	r2, [r4, #8]
 800bd30:	6923      	ldr	r3, [r4, #16]
 800bd32:	7da0      	ldrb	r0, [r4, #22]
 800bd34:	7567      	strb	r7, [r4, #21]
 800bd36:	1b92      	subs	r2, r2, r6
 800bd38:	1b9b      	subs	r3, r3, r6
 800bd3a:	f080 0001 	eor.w	r0, r0, #1
 800bd3e:	60a2      	str	r2, [r4, #8]
 800bd40:	6123      	str	r3, [r4, #16]
 800bd42:	b002      	add	sp, #8
 800bd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd48:	68a3      	ldr	r3, [r4, #8]
 800bd4a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bd4e:	701a      	strb	r2, [r3, #0]
 800bd50:	68a3      	ldr	r3, [r4, #8]
 800bd52:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bd56:	701a      	strb	r2, [r3, #0]
 800bd58:	68a3      	ldr	r3, [r4, #8]
 800bd5a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bd5e:	701a      	strb	r2, [r3, #0]
 800bd60:	e7ad      	b.n	800bcbe <ucdr_serialize_int32_t+0x72>
 800bd62:	4628      	mov	r0, r5
 800bd64:	ad01      	add	r5, sp, #4
 800bd66:	4629      	mov	r1, r5
 800bd68:	4632      	mov	r2, r6
 800bd6a:	f00c ff5a 	bl	8018c22 <memcpy>
 800bd6e:	68a0      	ldr	r0, [r4, #8]
 800bd70:	4642      	mov	r2, r8
 800bd72:	19a9      	adds	r1, r5, r6
 800bd74:	f00c ff55 	bl	8018c22 <memcpy>
 800bd78:	e7a1      	b.n	800bcbe <ucdr_serialize_int32_t+0x72>
 800bd7a:	bf00      	nop

0800bd7c <ucdr_deserialize_int32_t>:
 800bd7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd80:	460d      	mov	r5, r1
 800bd82:	2104      	movs	r1, #4
 800bd84:	4604      	mov	r4, r0
 800bd86:	f000 fa7f 	bl	800c288 <ucdr_buffer_alignment>
 800bd8a:	4601      	mov	r1, r0
 800bd8c:	4620      	mov	r0, r4
 800bd8e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bd92:	f000 fabd 	bl	800c310 <ucdr_advance_buffer>
 800bd96:	2104      	movs	r1, #4
 800bd98:	4620      	mov	r0, r4
 800bd9a:	f000 fa15 	bl	800c1c8 <ucdr_check_buffer_available_for>
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	d138      	bne.n	800be14 <ucdr_deserialize_int32_t+0x98>
 800bda2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bda6:	42b7      	cmp	r7, r6
 800bda8:	d92f      	bls.n	800be0a <ucdr_deserialize_int32_t+0x8e>
 800bdaa:	6923      	ldr	r3, [r4, #16]
 800bdac:	60a7      	str	r7, [r4, #8]
 800bdae:	1bbf      	subs	r7, r7, r6
 800bdb0:	443b      	add	r3, r7
 800bdb2:	f1c7 0904 	rsb	r9, r7, #4
 800bdb6:	6123      	str	r3, [r4, #16]
 800bdb8:	4649      	mov	r1, r9
 800bdba:	4620      	mov	r0, r4
 800bdbc:	f000 fa10 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	d046      	beq.n	800be52 <ucdr_deserialize_int32_t+0xd6>
 800bdc4:	7d23      	ldrb	r3, [r4, #20]
 800bdc6:	2b01      	cmp	r3, #1
 800bdc8:	d05c      	beq.n	800be84 <ucdr_deserialize_int32_t+0x108>
 800bdca:	78f3      	ldrb	r3, [r6, #3]
 800bdcc:	702b      	strb	r3, [r5, #0]
 800bdce:	2f00      	cmp	r7, #0
 800bdd0:	d04c      	beq.n	800be6c <ucdr_deserialize_int32_t+0xf0>
 800bdd2:	78b3      	ldrb	r3, [r6, #2]
 800bdd4:	706b      	strb	r3, [r5, #1]
 800bdd6:	2f01      	cmp	r7, #1
 800bdd8:	f105 0302 	add.w	r3, r5, #2
 800bddc:	d04a      	beq.n	800be74 <ucdr_deserialize_int32_t+0xf8>
 800bdde:	7873      	ldrb	r3, [r6, #1]
 800bde0:	70ab      	strb	r3, [r5, #2]
 800bde2:	2f02      	cmp	r7, #2
 800bde4:	f105 0303 	add.w	r3, r5, #3
 800bde8:	d048      	beq.n	800be7c <ucdr_deserialize_int32_t+0x100>
 800bdea:	7833      	ldrb	r3, [r6, #0]
 800bdec:	70eb      	strb	r3, [r5, #3]
 800bdee:	6923      	ldr	r3, [r4, #16]
 800bdf0:	68a2      	ldr	r2, [r4, #8]
 800bdf2:	7da0      	ldrb	r0, [r4, #22]
 800bdf4:	2104      	movs	r1, #4
 800bdf6:	3304      	adds	r3, #4
 800bdf8:	444a      	add	r2, r9
 800bdfa:	1bdb      	subs	r3, r3, r7
 800bdfc:	7561      	strb	r1, [r4, #21]
 800bdfe:	60a2      	str	r2, [r4, #8]
 800be00:	6123      	str	r3, [r4, #16]
 800be02:	f080 0001 	eor.w	r0, r0, #1
 800be06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be0a:	2104      	movs	r1, #4
 800be0c:	4620      	mov	r0, r4
 800be0e:	f000 f9e7 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800be12:	b1b0      	cbz	r0, 800be42 <ucdr_deserialize_int32_t+0xc6>
 800be14:	7d23      	ldrb	r3, [r4, #20]
 800be16:	2b01      	cmp	r3, #1
 800be18:	68a3      	ldr	r3, [r4, #8]
 800be1a:	d017      	beq.n	800be4c <ucdr_deserialize_int32_t+0xd0>
 800be1c:	78db      	ldrb	r3, [r3, #3]
 800be1e:	702b      	strb	r3, [r5, #0]
 800be20:	68a3      	ldr	r3, [r4, #8]
 800be22:	789b      	ldrb	r3, [r3, #2]
 800be24:	706b      	strb	r3, [r5, #1]
 800be26:	68a3      	ldr	r3, [r4, #8]
 800be28:	785b      	ldrb	r3, [r3, #1]
 800be2a:	70ab      	strb	r3, [r5, #2]
 800be2c:	68a3      	ldr	r3, [r4, #8]
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	70eb      	strb	r3, [r5, #3]
 800be32:	68a2      	ldr	r2, [r4, #8]
 800be34:	6923      	ldr	r3, [r4, #16]
 800be36:	3204      	adds	r2, #4
 800be38:	3304      	adds	r3, #4
 800be3a:	2104      	movs	r1, #4
 800be3c:	60a2      	str	r2, [r4, #8]
 800be3e:	6123      	str	r3, [r4, #16]
 800be40:	7561      	strb	r1, [r4, #21]
 800be42:	7da0      	ldrb	r0, [r4, #22]
 800be44:	f080 0001 	eor.w	r0, r0, #1
 800be48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	602b      	str	r3, [r5, #0]
 800be50:	e7ef      	b.n	800be32 <ucdr_deserialize_int32_t+0xb6>
 800be52:	68a2      	ldr	r2, [r4, #8]
 800be54:	6923      	ldr	r3, [r4, #16]
 800be56:	7da0      	ldrb	r0, [r4, #22]
 800be58:	f884 8015 	strb.w	r8, [r4, #21]
 800be5c:	1bd2      	subs	r2, r2, r7
 800be5e:	1bdb      	subs	r3, r3, r7
 800be60:	60a2      	str	r2, [r4, #8]
 800be62:	6123      	str	r3, [r4, #16]
 800be64:	f080 0001 	eor.w	r0, r0, #1
 800be68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be6c:	68a3      	ldr	r3, [r4, #8]
 800be6e:	789b      	ldrb	r3, [r3, #2]
 800be70:	706b      	strb	r3, [r5, #1]
 800be72:	1cab      	adds	r3, r5, #2
 800be74:	68a2      	ldr	r2, [r4, #8]
 800be76:	7852      	ldrb	r2, [r2, #1]
 800be78:	f803 2b01 	strb.w	r2, [r3], #1
 800be7c:	68a2      	ldr	r2, [r4, #8]
 800be7e:	7812      	ldrb	r2, [r2, #0]
 800be80:	701a      	strb	r2, [r3, #0]
 800be82:	e7b4      	b.n	800bdee <ucdr_deserialize_int32_t+0x72>
 800be84:	4631      	mov	r1, r6
 800be86:	463a      	mov	r2, r7
 800be88:	4628      	mov	r0, r5
 800be8a:	f00c feca 	bl	8018c22 <memcpy>
 800be8e:	68a1      	ldr	r1, [r4, #8]
 800be90:	464a      	mov	r2, r9
 800be92:	19e8      	adds	r0, r5, r7
 800be94:	f00c fec5 	bl	8018c22 <memcpy>
 800be98:	e7a9      	b.n	800bdee <ucdr_deserialize_int32_t+0x72>
 800be9a:	bf00      	nop

0800be9c <ucdr_serialize_double>:
 800be9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bea0:	2108      	movs	r1, #8
 800bea2:	b082      	sub	sp, #8
 800bea4:	4604      	mov	r4, r0
 800bea6:	ed8d 0b00 	vstr	d0, [sp]
 800beaa:	f000 f9ed 	bl	800c288 <ucdr_buffer_alignment>
 800beae:	4601      	mov	r1, r0
 800beb0:	4620      	mov	r0, r4
 800beb2:	7d67      	ldrb	r7, [r4, #21]
 800beb4:	f000 fa2c 	bl	800c310 <ucdr_advance_buffer>
 800beb8:	2108      	movs	r1, #8
 800beba:	4620      	mov	r0, r4
 800bebc:	f000 f984 	bl	800c1c8 <ucdr_check_buffer_available_for>
 800bec0:	2800      	cmp	r0, #0
 800bec2:	d14e      	bne.n	800bf62 <ucdr_serialize_double+0xc6>
 800bec4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bec8:	42ab      	cmp	r3, r5
 800beca:	d945      	bls.n	800bf58 <ucdr_serialize_double+0xbc>
 800becc:	1b5e      	subs	r6, r3, r5
 800bece:	60a3      	str	r3, [r4, #8]
 800bed0:	6923      	ldr	r3, [r4, #16]
 800bed2:	f1c6 0808 	rsb	r8, r6, #8
 800bed6:	4433      	add	r3, r6
 800bed8:	6123      	str	r3, [r4, #16]
 800beda:	4641      	mov	r1, r8
 800bedc:	4620      	mov	r0, r4
 800bede:	f000 f97f 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800bee2:	2800      	cmp	r0, #0
 800bee4:	d074      	beq.n	800bfd0 <ucdr_serialize_double+0x134>
 800bee6:	7d23      	ldrb	r3, [r4, #20]
 800bee8:	2b01      	cmp	r3, #1
 800beea:	f000 809b 	beq.w	800c024 <ucdr_serialize_double+0x188>
 800beee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bef2:	702b      	strb	r3, [r5, #0]
 800bef4:	2e00      	cmp	r6, #0
 800bef6:	d078      	beq.n	800bfea <ucdr_serialize_double+0x14e>
 800bef8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800befc:	706b      	strb	r3, [r5, #1]
 800befe:	2e01      	cmp	r6, #1
 800bf00:	d077      	beq.n	800bff2 <ucdr_serialize_double+0x156>
 800bf02:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bf06:	70ab      	strb	r3, [r5, #2]
 800bf08:	2e02      	cmp	r6, #2
 800bf0a:	d076      	beq.n	800bffa <ucdr_serialize_double+0x15e>
 800bf0c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bf10:	70eb      	strb	r3, [r5, #3]
 800bf12:	2e03      	cmp	r6, #3
 800bf14:	d075      	beq.n	800c002 <ucdr_serialize_double+0x166>
 800bf16:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bf1a:	712b      	strb	r3, [r5, #4]
 800bf1c:	2e04      	cmp	r6, #4
 800bf1e:	d074      	beq.n	800c00a <ucdr_serialize_double+0x16e>
 800bf20:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800bf24:	716b      	strb	r3, [r5, #5]
 800bf26:	2e05      	cmp	r6, #5
 800bf28:	d073      	beq.n	800c012 <ucdr_serialize_double+0x176>
 800bf2a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800bf2e:	71ab      	strb	r3, [r5, #6]
 800bf30:	2e06      	cmp	r6, #6
 800bf32:	d072      	beq.n	800c01a <ucdr_serialize_double+0x17e>
 800bf34:	f89d 3000 	ldrb.w	r3, [sp]
 800bf38:	71eb      	strb	r3, [r5, #7]
 800bf3a:	6923      	ldr	r3, [r4, #16]
 800bf3c:	68a2      	ldr	r2, [r4, #8]
 800bf3e:	7da0      	ldrb	r0, [r4, #22]
 800bf40:	3308      	adds	r3, #8
 800bf42:	1b9e      	subs	r6, r3, r6
 800bf44:	4442      	add	r2, r8
 800bf46:	2308      	movs	r3, #8
 800bf48:	f080 0001 	eor.w	r0, r0, #1
 800bf4c:	60a2      	str	r2, [r4, #8]
 800bf4e:	6126      	str	r6, [r4, #16]
 800bf50:	7563      	strb	r3, [r4, #21]
 800bf52:	b002      	add	sp, #8
 800bf54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf58:	2108      	movs	r1, #8
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	f000 f940 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800bf60:	b350      	cbz	r0, 800bfb8 <ucdr_serialize_double+0x11c>
 800bf62:	7d23      	ldrb	r3, [r4, #20]
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	d02d      	beq.n	800bfc4 <ucdr_serialize_double+0x128>
 800bf68:	68a3      	ldr	r3, [r4, #8]
 800bf6a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bf6e:	701a      	strb	r2, [r3, #0]
 800bf70:	68a3      	ldr	r3, [r4, #8]
 800bf72:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bf76:	705a      	strb	r2, [r3, #1]
 800bf78:	68a3      	ldr	r3, [r4, #8]
 800bf7a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bf7e:	709a      	strb	r2, [r3, #2]
 800bf80:	68a3      	ldr	r3, [r4, #8]
 800bf82:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bf86:	70da      	strb	r2, [r3, #3]
 800bf88:	68a3      	ldr	r3, [r4, #8]
 800bf8a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bf8e:	711a      	strb	r2, [r3, #4]
 800bf90:	68a3      	ldr	r3, [r4, #8]
 800bf92:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bf96:	715a      	strb	r2, [r3, #5]
 800bf98:	68a3      	ldr	r3, [r4, #8]
 800bf9a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bf9e:	719a      	strb	r2, [r3, #6]
 800bfa0:	68a3      	ldr	r3, [r4, #8]
 800bfa2:	f89d 2000 	ldrb.w	r2, [sp]
 800bfa6:	71da      	strb	r2, [r3, #7]
 800bfa8:	68a2      	ldr	r2, [r4, #8]
 800bfaa:	6923      	ldr	r3, [r4, #16]
 800bfac:	3208      	adds	r2, #8
 800bfae:	3308      	adds	r3, #8
 800bfb0:	2108      	movs	r1, #8
 800bfb2:	60a2      	str	r2, [r4, #8]
 800bfb4:	6123      	str	r3, [r4, #16]
 800bfb6:	7561      	strb	r1, [r4, #21]
 800bfb8:	7da0      	ldrb	r0, [r4, #22]
 800bfba:	f080 0001 	eor.w	r0, r0, #1
 800bfbe:	b002      	add	sp, #8
 800bfc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfc4:	466b      	mov	r3, sp
 800bfc6:	cb03      	ldmia	r3!, {r0, r1}
 800bfc8:	68a3      	ldr	r3, [r4, #8]
 800bfca:	6018      	str	r0, [r3, #0]
 800bfcc:	6059      	str	r1, [r3, #4]
 800bfce:	e7eb      	b.n	800bfa8 <ucdr_serialize_double+0x10c>
 800bfd0:	68a2      	ldr	r2, [r4, #8]
 800bfd2:	6923      	ldr	r3, [r4, #16]
 800bfd4:	7da0      	ldrb	r0, [r4, #22]
 800bfd6:	7567      	strb	r7, [r4, #21]
 800bfd8:	1b92      	subs	r2, r2, r6
 800bfda:	1b9b      	subs	r3, r3, r6
 800bfdc:	f080 0001 	eor.w	r0, r0, #1
 800bfe0:	60a2      	str	r2, [r4, #8]
 800bfe2:	6123      	str	r3, [r4, #16]
 800bfe4:	b002      	add	sp, #8
 800bfe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfea:	68a3      	ldr	r3, [r4, #8]
 800bfec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bff0:	701a      	strb	r2, [r3, #0]
 800bff2:	68a3      	ldr	r3, [r4, #8]
 800bff4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bff8:	701a      	strb	r2, [r3, #0]
 800bffa:	68a3      	ldr	r3, [r4, #8]
 800bffc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c000:	701a      	strb	r2, [r3, #0]
 800c002:	68a3      	ldr	r3, [r4, #8]
 800c004:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c008:	701a      	strb	r2, [r3, #0]
 800c00a:	68a3      	ldr	r3, [r4, #8]
 800c00c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c010:	701a      	strb	r2, [r3, #0]
 800c012:	68a3      	ldr	r3, [r4, #8]
 800c014:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c018:	701a      	strb	r2, [r3, #0]
 800c01a:	68a3      	ldr	r3, [r4, #8]
 800c01c:	f89d 2000 	ldrb.w	r2, [sp]
 800c020:	701a      	strb	r2, [r3, #0]
 800c022:	e78a      	b.n	800bf3a <ucdr_serialize_double+0x9e>
 800c024:	4628      	mov	r0, r5
 800c026:	466d      	mov	r5, sp
 800c028:	4629      	mov	r1, r5
 800c02a:	4632      	mov	r2, r6
 800c02c:	f00c fdf9 	bl	8018c22 <memcpy>
 800c030:	68a0      	ldr	r0, [r4, #8]
 800c032:	4642      	mov	r2, r8
 800c034:	19a9      	adds	r1, r5, r6
 800c036:	f00c fdf4 	bl	8018c22 <memcpy>
 800c03a:	e77e      	b.n	800bf3a <ucdr_serialize_double+0x9e>

0800c03c <ucdr_deserialize_double>:
 800c03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c040:	460d      	mov	r5, r1
 800c042:	2108      	movs	r1, #8
 800c044:	4604      	mov	r4, r0
 800c046:	f000 f91f 	bl	800c288 <ucdr_buffer_alignment>
 800c04a:	4601      	mov	r1, r0
 800c04c:	4620      	mov	r0, r4
 800c04e:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c052:	f000 f95d 	bl	800c310 <ucdr_advance_buffer>
 800c056:	2108      	movs	r1, #8
 800c058:	4620      	mov	r0, r4
 800c05a:	f000 f8b5 	bl	800c1c8 <ucdr_check_buffer_available_for>
 800c05e:	2800      	cmp	r0, #0
 800c060:	d151      	bne.n	800c106 <ucdr_deserialize_double+0xca>
 800c062:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c066:	42be      	cmp	r6, r7
 800c068:	d948      	bls.n	800c0fc <ucdr_deserialize_double+0xc0>
 800c06a:	6923      	ldr	r3, [r4, #16]
 800c06c:	60a6      	str	r6, [r4, #8]
 800c06e:	1bf6      	subs	r6, r6, r7
 800c070:	4433      	add	r3, r6
 800c072:	f1c6 0808 	rsb	r8, r6, #8
 800c076:	6123      	str	r3, [r4, #16]
 800c078:	4641      	mov	r1, r8
 800c07a:	4620      	mov	r0, r4
 800c07c:	f000 f8b0 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800c080:	2800      	cmp	r0, #0
 800c082:	d06d      	beq.n	800c160 <ucdr_deserialize_double+0x124>
 800c084:	7d23      	ldrb	r3, [r4, #20]
 800c086:	2b01      	cmp	r3, #1
 800c088:	f000 8093 	beq.w	800c1b2 <ucdr_deserialize_double+0x176>
 800c08c:	79fb      	ldrb	r3, [r7, #7]
 800c08e:	702b      	strb	r3, [r5, #0]
 800c090:	2e00      	cmp	r6, #0
 800c092:	d072      	beq.n	800c17a <ucdr_deserialize_double+0x13e>
 800c094:	79bb      	ldrb	r3, [r7, #6]
 800c096:	706b      	strb	r3, [r5, #1]
 800c098:	2e01      	cmp	r6, #1
 800c09a:	f105 0302 	add.w	r3, r5, #2
 800c09e:	d070      	beq.n	800c182 <ucdr_deserialize_double+0x146>
 800c0a0:	797b      	ldrb	r3, [r7, #5]
 800c0a2:	70ab      	strb	r3, [r5, #2]
 800c0a4:	2e02      	cmp	r6, #2
 800c0a6:	f105 0303 	add.w	r3, r5, #3
 800c0aa:	d06e      	beq.n	800c18a <ucdr_deserialize_double+0x14e>
 800c0ac:	793b      	ldrb	r3, [r7, #4]
 800c0ae:	70eb      	strb	r3, [r5, #3]
 800c0b0:	2e03      	cmp	r6, #3
 800c0b2:	f105 0304 	add.w	r3, r5, #4
 800c0b6:	d06c      	beq.n	800c192 <ucdr_deserialize_double+0x156>
 800c0b8:	78fb      	ldrb	r3, [r7, #3]
 800c0ba:	712b      	strb	r3, [r5, #4]
 800c0bc:	2e04      	cmp	r6, #4
 800c0be:	f105 0305 	add.w	r3, r5, #5
 800c0c2:	d06a      	beq.n	800c19a <ucdr_deserialize_double+0x15e>
 800c0c4:	78bb      	ldrb	r3, [r7, #2]
 800c0c6:	716b      	strb	r3, [r5, #5]
 800c0c8:	2e05      	cmp	r6, #5
 800c0ca:	f105 0306 	add.w	r3, r5, #6
 800c0ce:	d068      	beq.n	800c1a2 <ucdr_deserialize_double+0x166>
 800c0d0:	787b      	ldrb	r3, [r7, #1]
 800c0d2:	71ab      	strb	r3, [r5, #6]
 800c0d4:	2e06      	cmp	r6, #6
 800c0d6:	f105 0307 	add.w	r3, r5, #7
 800c0da:	d066      	beq.n	800c1aa <ucdr_deserialize_double+0x16e>
 800c0dc:	783b      	ldrb	r3, [r7, #0]
 800c0de:	71eb      	strb	r3, [r5, #7]
 800c0e0:	6923      	ldr	r3, [r4, #16]
 800c0e2:	68a2      	ldr	r2, [r4, #8]
 800c0e4:	7da0      	ldrb	r0, [r4, #22]
 800c0e6:	3308      	adds	r3, #8
 800c0e8:	1b9e      	subs	r6, r3, r6
 800c0ea:	2308      	movs	r3, #8
 800c0ec:	4442      	add	r2, r8
 800c0ee:	7563      	strb	r3, [r4, #21]
 800c0f0:	60a2      	str	r2, [r4, #8]
 800c0f2:	6126      	str	r6, [r4, #16]
 800c0f4:	f080 0001 	eor.w	r0, r0, #1
 800c0f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0fc:	2108      	movs	r1, #8
 800c0fe:	4620      	mov	r0, r4
 800c100:	f000 f86e 	bl	800c1e0 <ucdr_check_final_buffer_behavior>
 800c104:	b310      	cbz	r0, 800c14c <ucdr_deserialize_double+0x110>
 800c106:	7d23      	ldrb	r3, [r4, #20]
 800c108:	2b01      	cmp	r3, #1
 800c10a:	68a3      	ldr	r3, [r4, #8]
 800c10c:	d023      	beq.n	800c156 <ucdr_deserialize_double+0x11a>
 800c10e:	79db      	ldrb	r3, [r3, #7]
 800c110:	702b      	strb	r3, [r5, #0]
 800c112:	68a3      	ldr	r3, [r4, #8]
 800c114:	799b      	ldrb	r3, [r3, #6]
 800c116:	706b      	strb	r3, [r5, #1]
 800c118:	68a3      	ldr	r3, [r4, #8]
 800c11a:	795b      	ldrb	r3, [r3, #5]
 800c11c:	70ab      	strb	r3, [r5, #2]
 800c11e:	68a3      	ldr	r3, [r4, #8]
 800c120:	791b      	ldrb	r3, [r3, #4]
 800c122:	70eb      	strb	r3, [r5, #3]
 800c124:	68a3      	ldr	r3, [r4, #8]
 800c126:	78db      	ldrb	r3, [r3, #3]
 800c128:	712b      	strb	r3, [r5, #4]
 800c12a:	68a3      	ldr	r3, [r4, #8]
 800c12c:	789b      	ldrb	r3, [r3, #2]
 800c12e:	716b      	strb	r3, [r5, #5]
 800c130:	68a3      	ldr	r3, [r4, #8]
 800c132:	785b      	ldrb	r3, [r3, #1]
 800c134:	71ab      	strb	r3, [r5, #6]
 800c136:	68a3      	ldr	r3, [r4, #8]
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	71eb      	strb	r3, [r5, #7]
 800c13c:	68a2      	ldr	r2, [r4, #8]
 800c13e:	6923      	ldr	r3, [r4, #16]
 800c140:	3208      	adds	r2, #8
 800c142:	3308      	adds	r3, #8
 800c144:	2108      	movs	r1, #8
 800c146:	60a2      	str	r2, [r4, #8]
 800c148:	6123      	str	r3, [r4, #16]
 800c14a:	7561      	strb	r1, [r4, #21]
 800c14c:	7da0      	ldrb	r0, [r4, #22]
 800c14e:	f080 0001 	eor.w	r0, r0, #1
 800c152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c156:	681a      	ldr	r2, [r3, #0]
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	606b      	str	r3, [r5, #4]
 800c15c:	602a      	str	r2, [r5, #0]
 800c15e:	e7ed      	b.n	800c13c <ucdr_deserialize_double+0x100>
 800c160:	68a2      	ldr	r2, [r4, #8]
 800c162:	6923      	ldr	r3, [r4, #16]
 800c164:	7da0      	ldrb	r0, [r4, #22]
 800c166:	f884 9015 	strb.w	r9, [r4, #21]
 800c16a:	1b92      	subs	r2, r2, r6
 800c16c:	1b9b      	subs	r3, r3, r6
 800c16e:	60a2      	str	r2, [r4, #8]
 800c170:	6123      	str	r3, [r4, #16]
 800c172:	f080 0001 	eor.w	r0, r0, #1
 800c176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c17a:	68a3      	ldr	r3, [r4, #8]
 800c17c:	799b      	ldrb	r3, [r3, #6]
 800c17e:	706b      	strb	r3, [r5, #1]
 800c180:	1cab      	adds	r3, r5, #2
 800c182:	68a2      	ldr	r2, [r4, #8]
 800c184:	7952      	ldrb	r2, [r2, #5]
 800c186:	f803 2b01 	strb.w	r2, [r3], #1
 800c18a:	68a2      	ldr	r2, [r4, #8]
 800c18c:	7912      	ldrb	r2, [r2, #4]
 800c18e:	f803 2b01 	strb.w	r2, [r3], #1
 800c192:	68a2      	ldr	r2, [r4, #8]
 800c194:	78d2      	ldrb	r2, [r2, #3]
 800c196:	f803 2b01 	strb.w	r2, [r3], #1
 800c19a:	68a2      	ldr	r2, [r4, #8]
 800c19c:	7892      	ldrb	r2, [r2, #2]
 800c19e:	f803 2b01 	strb.w	r2, [r3], #1
 800c1a2:	68a2      	ldr	r2, [r4, #8]
 800c1a4:	7852      	ldrb	r2, [r2, #1]
 800c1a6:	f803 2b01 	strb.w	r2, [r3], #1
 800c1aa:	68a2      	ldr	r2, [r4, #8]
 800c1ac:	7812      	ldrb	r2, [r2, #0]
 800c1ae:	701a      	strb	r2, [r3, #0]
 800c1b0:	e796      	b.n	800c0e0 <ucdr_deserialize_double+0xa4>
 800c1b2:	4639      	mov	r1, r7
 800c1b4:	4632      	mov	r2, r6
 800c1b6:	4628      	mov	r0, r5
 800c1b8:	f00c fd33 	bl	8018c22 <memcpy>
 800c1bc:	68a1      	ldr	r1, [r4, #8]
 800c1be:	4642      	mov	r2, r8
 800c1c0:	19a8      	adds	r0, r5, r6
 800c1c2:	f00c fd2e 	bl	8018c22 <memcpy>
 800c1c6:	e78b      	b.n	800c0e0 <ucdr_deserialize_double+0xa4>

0800c1c8 <ucdr_check_buffer_available_for>:
 800c1c8:	7d83      	ldrb	r3, [r0, #22]
 800c1ca:	b93b      	cbnz	r3, 800c1dc <ucdr_check_buffer_available_for+0x14>
 800c1cc:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c1d0:	4419      	add	r1, r3
 800c1d2:	4288      	cmp	r0, r1
 800c1d4:	bf34      	ite	cc
 800c1d6:	2000      	movcc	r0, #0
 800c1d8:	2001      	movcs	r0, #1
 800c1da:	4770      	bx	lr
 800c1dc:	2000      	movs	r0, #0
 800c1de:	4770      	bx	lr

0800c1e0 <ucdr_check_final_buffer_behavior>:
 800c1e0:	7d83      	ldrb	r3, [r0, #22]
 800c1e2:	b943      	cbnz	r3, 800c1f6 <ucdr_check_final_buffer_behavior+0x16>
 800c1e4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800c1e8:	4291      	cmp	r1, r2
 800c1ea:	b510      	push	{r4, lr}
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	d205      	bcs.n	800c1fc <ucdr_check_final_buffer_behavior+0x1c>
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	bd10      	pop	{r4, pc}
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	4770      	bx	lr
 800c1fc:	6982      	ldr	r2, [r0, #24]
 800c1fe:	b13a      	cbz	r2, 800c210 <ucdr_check_final_buffer_behavior+0x30>
 800c200:	69c1      	ldr	r1, [r0, #28]
 800c202:	4790      	blx	r2
 800c204:	f080 0301 	eor.w	r3, r0, #1
 800c208:	b2db      	uxtb	r3, r3
 800c20a:	75a0      	strb	r0, [r4, #22]
 800c20c:	4618      	mov	r0, r3
 800c20e:	bd10      	pop	{r4, pc}
 800c210:	2001      	movs	r0, #1
 800c212:	75a0      	strb	r0, [r4, #22]
 800c214:	e7fa      	b.n	800c20c <ucdr_check_final_buffer_behavior+0x2c>
 800c216:	bf00      	nop

0800c218 <ucdr_set_on_full_buffer_callback>:
 800c218:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop

0800c220 <ucdr_init_buffer_origin_offset_endian>:
 800c220:	b410      	push	{r4}
 800c222:	9c01      	ldr	r4, [sp, #4]
 800c224:	6001      	str	r1, [r0, #0]
 800c226:	440a      	add	r2, r1
 800c228:	6042      	str	r2, [r0, #4]
 800c22a:	190a      	adds	r2, r1, r4
 800c22c:	441c      	add	r4, r3
 800c22e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800c232:	6082      	str	r2, [r0, #8]
 800c234:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c238:	7503      	strb	r3, [r0, #20]
 800c23a:	2200      	movs	r2, #0
 800c23c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800c240:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c244:	7542      	strb	r2, [r0, #21]
 800c246:	7582      	strb	r2, [r0, #22]
 800c248:	4770      	bx	lr
 800c24a:	bf00      	nop

0800c24c <ucdr_init_buffer_origin_offset>:
 800c24c:	b510      	push	{r4, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	9c04      	ldr	r4, [sp, #16]
 800c252:	9400      	str	r4, [sp, #0]
 800c254:	2401      	movs	r4, #1
 800c256:	9401      	str	r4, [sp, #4]
 800c258:	f7ff ffe2 	bl	800c220 <ucdr_init_buffer_origin_offset_endian>
 800c25c:	b002      	add	sp, #8
 800c25e:	bd10      	pop	{r4, pc}

0800c260 <ucdr_init_buffer_origin>:
 800c260:	b510      	push	{r4, lr}
 800c262:	b082      	sub	sp, #8
 800c264:	2400      	movs	r4, #0
 800c266:	9400      	str	r4, [sp, #0]
 800c268:	f7ff fff0 	bl	800c24c <ucdr_init_buffer_origin_offset>
 800c26c:	b002      	add	sp, #8
 800c26e:	bd10      	pop	{r4, pc}

0800c270 <ucdr_init_buffer>:
 800c270:	2300      	movs	r3, #0
 800c272:	f7ff bff5 	b.w	800c260 <ucdr_init_buffer_origin>
 800c276:	bf00      	nop

0800c278 <ucdr_alignment>:
 800c278:	fbb0 f3f1 	udiv	r3, r0, r1
 800c27c:	fb03 0011 	mls	r0, r3, r1, r0
 800c280:	1a08      	subs	r0, r1, r0
 800c282:	3901      	subs	r1, #1
 800c284:	4008      	ands	r0, r1
 800c286:	4770      	bx	lr

0800c288 <ucdr_buffer_alignment>:
 800c288:	7d43      	ldrb	r3, [r0, #21]
 800c28a:	428b      	cmp	r3, r1
 800c28c:	d208      	bcs.n	800c2a0 <ucdr_buffer_alignment+0x18>
 800c28e:	6900      	ldr	r0, [r0, #16]
 800c290:	fbb0 f3f1 	udiv	r3, r0, r1
 800c294:	fb01 0013 	mls	r0, r1, r3, r0
 800c298:	1a08      	subs	r0, r1, r0
 800c29a:	3901      	subs	r1, #1
 800c29c:	4008      	ands	r0, r1
 800c29e:	4770      	bx	lr
 800c2a0:	2000      	movs	r0, #0
 800c2a2:	4770      	bx	lr

0800c2a4 <ucdr_align_to>:
 800c2a4:	b538      	push	{r3, r4, r5, lr}
 800c2a6:	4604      	mov	r4, r0
 800c2a8:	460d      	mov	r5, r1
 800c2aa:	f7ff ffed 	bl	800c288 <ucdr_buffer_alignment>
 800c2ae:	68a3      	ldr	r3, [r4, #8]
 800c2b0:	6921      	ldr	r1, [r4, #16]
 800c2b2:	7565      	strb	r5, [r4, #21]
 800c2b4:	181a      	adds	r2, r3, r0
 800c2b6:	6863      	ldr	r3, [r4, #4]
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	4408      	add	r0, r1
 800c2bc:	bf28      	it	cs
 800c2be:	4613      	movcs	r3, r2
 800c2c0:	6120      	str	r0, [r4, #16]
 800c2c2:	60a3      	str	r3, [r4, #8]
 800c2c4:	bd38      	pop	{r3, r4, r5, pc}
 800c2c6:	bf00      	nop

0800c2c8 <ucdr_buffer_length>:
 800c2c8:	6882      	ldr	r2, [r0, #8]
 800c2ca:	6800      	ldr	r0, [r0, #0]
 800c2cc:	1a10      	subs	r0, r2, r0
 800c2ce:	4770      	bx	lr

0800c2d0 <ucdr_buffer_remaining>:
 800c2d0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c2d4:	1a10      	subs	r0, r2, r0
 800c2d6:	4770      	bx	lr

0800c2d8 <ucdr_check_final_buffer_behavior_array>:
 800c2d8:	b538      	push	{r3, r4, r5, lr}
 800c2da:	7d83      	ldrb	r3, [r0, #22]
 800c2dc:	b963      	cbnz	r3, 800c2f8 <ucdr_check_final_buffer_behavior_array+0x20>
 800c2de:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	4604      	mov	r4, r0
 800c2e6:	460d      	mov	r5, r1
 800c2e8:	d308      	bcc.n	800c2fc <ucdr_check_final_buffer_behavior_array+0x24>
 800c2ea:	b139      	cbz	r1, 800c2fc <ucdr_check_final_buffer_behavior_array+0x24>
 800c2ec:	6983      	ldr	r3, [r0, #24]
 800c2ee:	b163      	cbz	r3, 800c30a <ucdr_check_final_buffer_behavior_array+0x32>
 800c2f0:	69c1      	ldr	r1, [r0, #28]
 800c2f2:	4798      	blx	r3
 800c2f4:	75a0      	strb	r0, [r4, #22]
 800c2f6:	b108      	cbz	r0, 800c2fc <ucdr_check_final_buffer_behavior_array+0x24>
 800c2f8:	2000      	movs	r0, #0
 800c2fa:	bd38      	pop	{r3, r4, r5, pc}
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	f7ff ffe7 	bl	800c2d0 <ucdr_buffer_remaining>
 800c302:	42a8      	cmp	r0, r5
 800c304:	bf28      	it	cs
 800c306:	4628      	movcs	r0, r5
 800c308:	bd38      	pop	{r3, r4, r5, pc}
 800c30a:	2301      	movs	r3, #1
 800c30c:	7583      	strb	r3, [r0, #22]
 800c30e:	e7f3      	b.n	800c2f8 <ucdr_check_final_buffer_behavior_array+0x20>

0800c310 <ucdr_advance_buffer>:
 800c310:	b538      	push	{r3, r4, r5, lr}
 800c312:	4604      	mov	r4, r0
 800c314:	460d      	mov	r5, r1
 800c316:	f7ff ff57 	bl	800c1c8 <ucdr_check_buffer_available_for>
 800c31a:	b178      	cbz	r0, 800c33c <ucdr_advance_buffer+0x2c>
 800c31c:	6923      	ldr	r3, [r4, #16]
 800c31e:	68a2      	ldr	r2, [r4, #8]
 800c320:	442b      	add	r3, r5
 800c322:	6123      	str	r3, [r4, #16]
 800c324:	2301      	movs	r3, #1
 800c326:	442a      	add	r2, r5
 800c328:	7563      	strb	r3, [r4, #21]
 800c32a:	60a2      	str	r2, [r4, #8]
 800c32c:	bd38      	pop	{r3, r4, r5, pc}
 800c32e:	68a2      	ldr	r2, [r4, #8]
 800c330:	6923      	ldr	r3, [r4, #16]
 800c332:	4402      	add	r2, r0
 800c334:	4403      	add	r3, r0
 800c336:	1a2d      	subs	r5, r5, r0
 800c338:	60a2      	str	r2, [r4, #8]
 800c33a:	6123      	str	r3, [r4, #16]
 800c33c:	4629      	mov	r1, r5
 800c33e:	2201      	movs	r2, #1
 800c340:	4620      	mov	r0, r4
 800c342:	f7ff ffc9 	bl	800c2d8 <ucdr_check_final_buffer_behavior_array>
 800c346:	2800      	cmp	r0, #0
 800c348:	d1f1      	bne.n	800c32e <ucdr_advance_buffer+0x1e>
 800c34a:	2301      	movs	r3, #1
 800c34c:	7563      	strb	r3, [r4, #21]
 800c34e:	bd38      	pop	{r3, r4, r5, pc}

0800c350 <rcl_get_zero_initialized_client>:
 800c350:	4b01      	ldr	r3, [pc, #4]	@ (800c358 <rcl_get_zero_initialized_client+0x8>)
 800c352:	6818      	ldr	r0, [r3, #0]
 800c354:	4770      	bx	lr
 800c356:	bf00      	nop
 800c358:	08019b74 	.word	0x08019b74

0800c35c <rcl_client_init>:
 800c35c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c360:	b089      	sub	sp, #36	@ 0x24
 800c362:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800c364:	b1c5      	cbz	r5, 800c398 <rcl_client_init+0x3c>
 800c366:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800c36a:	4604      	mov	r4, r0
 800c36c:	4648      	mov	r0, r9
 800c36e:	4688      	mov	r8, r1
 800c370:	4617      	mov	r7, r2
 800c372:	461e      	mov	r6, r3
 800c374:	f001 fcfa 	bl	800dd6c <rcutils_allocator_is_valid>
 800c378:	b170      	cbz	r0, 800c398 <rcl_client_init+0x3c>
 800c37a:	b16c      	cbz	r4, 800c398 <rcl_client_init+0x3c>
 800c37c:	4640      	mov	r0, r8
 800c37e:	f000 fb83 	bl	800ca88 <rcl_node_is_valid>
 800c382:	2800      	cmp	r0, #0
 800c384:	d05e      	beq.n	800c444 <rcl_client_init+0xe8>
 800c386:	b13f      	cbz	r7, 800c398 <rcl_client_init+0x3c>
 800c388:	b136      	cbz	r6, 800c398 <rcl_client_init+0x3c>
 800c38a:	6823      	ldr	r3, [r4, #0]
 800c38c:	b14b      	cbz	r3, 800c3a2 <rcl_client_init+0x46>
 800c38e:	2664      	movs	r6, #100	@ 0x64
 800c390:	4630      	mov	r0, r6
 800c392:	b009      	add	sp, #36	@ 0x24
 800c394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c398:	260b      	movs	r6, #11
 800c39a:	4630      	mov	r0, r6
 800c39c:	b009      	add	sp, #36	@ 0x24
 800c39e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3a2:	aa07      	add	r2, sp, #28
 800c3a4:	9205      	str	r2, [sp, #20]
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	9304      	str	r3, [sp, #16]
 800c3aa:	9203      	str	r2, [sp, #12]
 800c3ac:	9307      	str	r3, [sp, #28]
 800c3ae:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800c3b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c3b6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c3ba:	4631      	mov	r1, r6
 800c3bc:	e899 000c 	ldmia.w	r9, {r2, r3}
 800c3c0:	4640      	mov	r0, r8
 800c3c2:	f000 fbb5 	bl	800cb30 <rcl_node_resolve_name>
 800c3c6:	2800      	cmp	r0, #0
 800c3c8:	d14b      	bne.n	800c462 <rcl_client_init+0x106>
 800c3ca:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800c3cc:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c3ce:	f44f 708c 	mov.w	r0, #280	@ 0x118
 800c3d2:	4798      	blx	r3
 800c3d4:	6020      	str	r0, [r4, #0]
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	d049      	beq.n	800c46e <rcl_client_init+0x112>
 800c3da:	4640      	mov	r0, r8
 800c3dc:	f000 fb76 	bl	800cacc <rcl_node_get_rmw_handle>
 800c3e0:	462b      	mov	r3, r5
 800c3e2:	9a07      	ldr	r2, [sp, #28]
 800c3e4:	6826      	ldr	r6, [r4, #0]
 800c3e6:	4639      	mov	r1, r7
 800c3e8:	f002 fa00 	bl	800e7ec <rmw_create_client>
 800c3ec:	6823      	ldr	r3, [r4, #0]
 800c3ee:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 800c3f2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800c3f6:	b360      	cbz	r0, 800c452 <rcl_client_init+0xf6>
 800c3f8:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 800c3fc:	f002 fb0c 	bl	800ea18 <rmw_client_request_publisher_get_actual_qos>
 800c400:	bb28      	cbnz	r0, 800c44e <rcl_client_init+0xf2>
 800c402:	6821      	ldr	r1, [r4, #0]
 800c404:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 800c408:	31b8      	adds	r1, #184	@ 0xb8
 800c40a:	f002 fb15 	bl	800ea38 <rmw_client_response_subscription_get_actual_qos>
 800c40e:	4606      	mov	r6, r0
 800c410:	b9e8      	cbnz	r0, 800c44e <rcl_client_init+0xf2>
 800c412:	6823      	ldr	r3, [r4, #0]
 800c414:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800c418:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
 800c41c:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 800c420:	4629      	mov	r1, r5
 800c422:	4618      	mov	r0, r3
 800c424:	2268      	movs	r2, #104	@ 0x68
 800c426:	f00c fbfc 	bl	8018c22 <memcpy>
 800c42a:	2100      	movs	r1, #0
 800c42c:	4603      	mov	r3, r0
 800c42e:	2000      	movs	r0, #0
 800c430:	e9c3 0144 	strd	r0, r1, [r3, #272]	@ 0x110
 800c434:	9807      	ldr	r0, [sp, #28]
 800c436:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800c438:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c43a:	4798      	blx	r3
 800c43c:	4630      	mov	r0, r6
 800c43e:	b009      	add	sp, #36	@ 0x24
 800c440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c444:	26c8      	movs	r6, #200	@ 0xc8
 800c446:	4630      	mov	r0, r6
 800c448:	b009      	add	sp, #36	@ 0x24
 800c44a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c44e:	6823      	ldr	r3, [r4, #0]
 800c450:	b12b      	cbz	r3, 800c45e <rcl_client_init+0x102>
 800c452:	4618      	mov	r0, r3
 800c454:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800c456:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c458:	4790      	blx	r2
 800c45a:	2300      	movs	r3, #0
 800c45c:	6023      	str	r3, [r4, #0]
 800c45e:	2601      	movs	r6, #1
 800c460:	e7e8      	b.n	800c434 <rcl_client_init+0xd8>
 800c462:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 800c466:	2b01      	cmp	r3, #1
 800c468:	d903      	bls.n	800c472 <rcl_client_init+0x116>
 800c46a:	280a      	cmp	r0, #10
 800c46c:	d1f7      	bne.n	800c45e <rcl_client_init+0x102>
 800c46e:	260a      	movs	r6, #10
 800c470:	e7e0      	b.n	800c434 <rcl_client_init+0xd8>
 800c472:	2668      	movs	r6, #104	@ 0x68
 800c474:	e7de      	b.n	800c434 <rcl_client_init+0xd8>
 800c476:	bf00      	nop

0800c478 <rcl_client_get_default_options>:
 800c478:	b530      	push	{r4, r5, lr}
 800c47a:	4d0f      	ldr	r5, [pc, #60]	@ (800c4b8 <rcl_client_get_default_options+0x40>)
 800c47c:	490f      	ldr	r1, [pc, #60]	@ (800c4bc <rcl_client_get_default_options+0x44>)
 800c47e:	b087      	sub	sp, #28
 800c480:	4604      	mov	r4, r0
 800c482:	2250      	movs	r2, #80	@ 0x50
 800c484:	4628      	mov	r0, r5
 800c486:	f00c fbcc 	bl	8018c22 <memcpy>
 800c48a:	4668      	mov	r0, sp
 800c48c:	f001 fc60 	bl	800dd50 <rcutils_get_default_allocator>
 800c490:	46ec      	mov	ip, sp
 800c492:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c496:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800c49a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c49e:	2268      	movs	r2, #104	@ 0x68
 800c4a0:	f8dc 3000 	ldr.w	r3, [ip]
 800c4a4:	f8ce 3000 	str.w	r3, [lr]
 800c4a8:	4629      	mov	r1, r5
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	f00c fbb9 	bl	8018c22 <memcpy>
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	b007      	add	sp, #28
 800c4b4:	bd30      	pop	{r4, r5, pc}
 800c4b6:	bf00      	nop
 800c4b8:	20006610 	.word	0x20006610
 800c4bc:	08019b78 	.word	0x08019b78

0800c4c0 <rcl_client_get_rmw_handle>:
 800c4c0:	b118      	cbz	r0, 800c4ca <rcl_client_get_rmw_handle+0xa>
 800c4c2:	6800      	ldr	r0, [r0, #0]
 800c4c4:	b108      	cbz	r0, 800c4ca <rcl_client_get_rmw_handle+0xa>
 800c4c6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800c4ca:	4770      	bx	lr

0800c4cc <rcl_send_request>:
 800c4cc:	b570      	push	{r4, r5, r6, lr}
 800c4ce:	b082      	sub	sp, #8
 800c4d0:	b1e8      	cbz	r0, 800c50e <rcl_send_request+0x42>
 800c4d2:	4604      	mov	r4, r0
 800c4d4:	6800      	ldr	r0, [r0, #0]
 800c4d6:	b1d0      	cbz	r0, 800c50e <rcl_send_request+0x42>
 800c4d8:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800c4dc:	b1bb      	cbz	r3, 800c50e <rcl_send_request+0x42>
 800c4de:	460e      	mov	r6, r1
 800c4e0:	b1d1      	cbz	r1, 800c518 <rcl_send_request+0x4c>
 800c4e2:	4615      	mov	r5, r2
 800c4e4:	b1c2      	cbz	r2, 800c518 <rcl_send_request+0x4c>
 800c4e6:	2105      	movs	r1, #5
 800c4e8:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800c4ec:	f001 fc4c 	bl	800dd88 <__atomic_load_8>
 800c4f0:	6823      	ldr	r3, [r4, #0]
 800c4f2:	e9c5 0100 	strd	r0, r1, [r5]
 800c4f6:	462a      	mov	r2, r5
 800c4f8:	4631      	mov	r1, r6
 800c4fa:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800c4fe:	f002 ffcd 	bl	800f49c <rmw_send_request>
 800c502:	4606      	mov	r6, r0
 800c504:	b160      	cbz	r0, 800c520 <rcl_send_request+0x54>
 800c506:	2601      	movs	r6, #1
 800c508:	4630      	mov	r0, r6
 800c50a:	b002      	add	sp, #8
 800c50c:	bd70      	pop	{r4, r5, r6, pc}
 800c50e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800c512:	4630      	mov	r0, r6
 800c514:	b002      	add	sp, #8
 800c516:	bd70      	pop	{r4, r5, r6, pc}
 800c518:	260b      	movs	r6, #11
 800c51a:	4630      	mov	r0, r6
 800c51c:	b002      	add	sp, #8
 800c51e:	bd70      	pop	{r4, r5, r6, pc}
 800c520:	6820      	ldr	r0, [r4, #0]
 800c522:	2105      	movs	r1, #5
 800c524:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c528:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800c52c:	9100      	str	r1, [sp, #0]
 800c52e:	f001 fc97 	bl	800de60 <__atomic_exchange_8>
 800c532:	4630      	mov	r0, r6
 800c534:	b002      	add	sp, #8
 800c536:	bd70      	pop	{r4, r5, r6, pc}

0800c538 <rcl_take_response>:
 800c538:	b570      	push	{r4, r5, r6, lr}
 800c53a:	468e      	mov	lr, r1
 800c53c:	460c      	mov	r4, r1
 800c53e:	4616      	mov	r6, r2
 800c540:	4605      	mov	r5, r0
 800c542:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c546:	b08c      	sub	sp, #48	@ 0x30
 800c548:	f10d 0c18 	add.w	ip, sp, #24
 800c54c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c550:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c554:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c558:	b35d      	cbz	r5, 800c5b2 <rcl_take_response+0x7a>
 800c55a:	682b      	ldr	r3, [r5, #0]
 800c55c:	b34b      	cbz	r3, 800c5b2 <rcl_take_response+0x7a>
 800c55e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800c562:	b330      	cbz	r0, 800c5b2 <rcl_take_response+0x7a>
 800c564:	b346      	cbz	r6, 800c5b8 <rcl_take_response+0x80>
 800c566:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800c5c0 <rcl_take_response+0x88>
 800c56a:	2300      	movs	r3, #0
 800c56c:	f88d 3007 	strb.w	r3, [sp, #7]
 800c570:	4632      	mov	r2, r6
 800c572:	f10d 0307 	add.w	r3, sp, #7
 800c576:	a902      	add	r1, sp, #8
 800c578:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c57c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c580:	f003 f894 	bl	800f6ac <rmw_take_response>
 800c584:	4605      	mov	r5, r0
 800c586:	b9c8      	cbnz	r0, 800c5bc <rcl_take_response+0x84>
 800c588:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c58c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800c590:	2a00      	cmp	r2, #0
 800c592:	bf08      	it	eq
 800c594:	461d      	moveq	r5, r3
 800c596:	f10d 0e18 	add.w	lr, sp, #24
 800c59a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c59e:	46a4      	mov	ip, r4
 800c5a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c5a4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c5a8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	b00c      	add	sp, #48	@ 0x30
 800c5b0:	bd70      	pop	{r4, r5, r6, pc}
 800c5b2:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 800c5b6:	e7ee      	b.n	800c596 <rcl_take_response+0x5e>
 800c5b8:	250b      	movs	r5, #11
 800c5ba:	e7ec      	b.n	800c596 <rcl_take_response+0x5e>
 800c5bc:	2501      	movs	r5, #1
 800c5be:	e7ea      	b.n	800c596 <rcl_take_response+0x5e>
	...

0800c5c8 <rcl_client_is_valid>:
 800c5c8:	b130      	cbz	r0, 800c5d8 <rcl_client_is_valid+0x10>
 800c5ca:	6800      	ldr	r0, [r0, #0]
 800c5cc:	b120      	cbz	r0, 800c5d8 <rcl_client_is_valid+0x10>
 800c5ce:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800c5d2:	3800      	subs	r0, #0
 800c5d4:	bf18      	it	ne
 800c5d6:	2001      	movne	r0, #1
 800c5d8:	4770      	bx	lr
 800c5da:	bf00      	nop

0800c5dc <rcl_get_zero_initialized_init_options>:
 800c5dc:	2000      	movs	r0, #0
 800c5de:	4770      	bx	lr

0800c5e0 <rcl_init_options_init>:
 800c5e0:	b084      	sub	sp, #16
 800c5e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5e4:	b097      	sub	sp, #92	@ 0x5c
 800c5e6:	ae1d      	add	r6, sp, #116	@ 0x74
 800c5e8:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800c5ec:	2800      	cmp	r0, #0
 800c5ee:	d058      	beq.n	800c6a2 <rcl_init_options_init+0xc2>
 800c5f0:	6803      	ldr	r3, [r0, #0]
 800c5f2:	4605      	mov	r5, r0
 800c5f4:	b133      	cbz	r3, 800c604 <rcl_init_options_init+0x24>
 800c5f6:	2464      	movs	r4, #100	@ 0x64
 800c5f8:	4620      	mov	r0, r4
 800c5fa:	b017      	add	sp, #92	@ 0x5c
 800c5fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c600:	b004      	add	sp, #16
 800c602:	4770      	bx	lr
 800c604:	4630      	mov	r0, r6
 800c606:	f001 fbb1 	bl	800dd6c <rcutils_allocator_is_valid>
 800c60a:	2800      	cmp	r0, #0
 800c60c:	d049      	beq.n	800c6a2 <rcl_init_options_init+0xc2>
 800c60e:	46b4      	mov	ip, r6
 800c610:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c614:	ac11      	add	r4, sp, #68	@ 0x44
 800c616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c618:	f8dc 3000 	ldr.w	r3, [ip]
 800c61c:	6023      	str	r3, [r4, #0]
 800c61e:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c620:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c622:	2050      	movs	r0, #80	@ 0x50
 800c624:	4798      	blx	r3
 800c626:	4604      	mov	r4, r0
 800c628:	6028      	str	r0, [r5, #0]
 800c62a:	2800      	cmp	r0, #0
 800c62c:	d03b      	beq.n	800c6a6 <rcl_init_options_init+0xc6>
 800c62e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800c632:	4686      	mov	lr, r0
 800c634:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c638:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c63c:	f8dc 3000 	ldr.w	r3, [ip]
 800c640:	f8ce 3000 	str.w	r3, [lr]
 800c644:	a802      	add	r0, sp, #8
 800c646:	f001 ff63 	bl	800e510 <rmw_get_zero_initialized_init_options>
 800c64a:	f10d 0e08 	add.w	lr, sp, #8
 800c64e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c652:	f104 0c18 	add.w	ip, r4, #24
 800c656:	682f      	ldr	r7, [r5, #0]
 800c658:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c65c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c660:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c664:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c668:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c66c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c670:	ac20      	add	r4, sp, #128	@ 0x80
 800c672:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c676:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c67a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c67e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800c682:	f107 0018 	add.w	r0, r7, #24
 800c686:	f002 f9ed 	bl	800ea64 <rmw_init_options_init>
 800c68a:	4604      	mov	r4, r0
 800c68c:	2800      	cmp	r0, #0
 800c68e:	d0b3      	beq.n	800c5f8 <rcl_init_options_init+0x18>
 800c690:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c692:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c694:	6828      	ldr	r0, [r5, #0]
 800c696:	4798      	blx	r3
 800c698:	4620      	mov	r0, r4
 800c69a:	f007 fb23 	bl	8013ce4 <rcl_convert_rmw_ret_to_rcl_ret>
 800c69e:	4604      	mov	r4, r0
 800c6a0:	e7aa      	b.n	800c5f8 <rcl_init_options_init+0x18>
 800c6a2:	240b      	movs	r4, #11
 800c6a4:	e7a8      	b.n	800c5f8 <rcl_init_options_init+0x18>
 800c6a6:	240a      	movs	r4, #10
 800c6a8:	e7a6      	b.n	800c5f8 <rcl_init_options_init+0x18>
 800c6aa:	bf00      	nop

0800c6ac <rcl_init_options_fini>:
 800c6ac:	b530      	push	{r4, r5, lr}
 800c6ae:	b087      	sub	sp, #28
 800c6b0:	b1f0      	cbz	r0, 800c6f0 <rcl_init_options_fini+0x44>
 800c6b2:	6803      	ldr	r3, [r0, #0]
 800c6b4:	4604      	mov	r4, r0
 800c6b6:	b1db      	cbz	r3, 800c6f0 <rcl_init_options_fini+0x44>
 800c6b8:	469c      	mov	ip, r3
 800c6ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c6be:	f10d 0e04 	add.w	lr, sp, #4
 800c6c2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c6c6:	f8dc 3000 	ldr.w	r3, [ip]
 800c6ca:	f8ce 3000 	str.w	r3, [lr]
 800c6ce:	a801      	add	r0, sp, #4
 800c6d0:	f001 fb4c 	bl	800dd6c <rcutils_allocator_is_valid>
 800c6d4:	b160      	cbz	r0, 800c6f0 <rcl_init_options_fini+0x44>
 800c6d6:	6820      	ldr	r0, [r4, #0]
 800c6d8:	3018      	adds	r0, #24
 800c6da:	f002 fa73 	bl	800ebc4 <rmw_init_options_fini>
 800c6de:	4605      	mov	r5, r0
 800c6e0:	b950      	cbnz	r0, 800c6f8 <rcl_init_options_fini+0x4c>
 800c6e2:	6820      	ldr	r0, [r4, #0]
 800c6e4:	9b02      	ldr	r3, [sp, #8]
 800c6e6:	9905      	ldr	r1, [sp, #20]
 800c6e8:	4798      	blx	r3
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	b007      	add	sp, #28
 800c6ee:	bd30      	pop	{r4, r5, pc}
 800c6f0:	250b      	movs	r5, #11
 800c6f2:	4628      	mov	r0, r5
 800c6f4:	b007      	add	sp, #28
 800c6f6:	bd30      	pop	{r4, r5, pc}
 800c6f8:	f007 faf4 	bl	8013ce4 <rcl_convert_rmw_ret_to_rcl_ret>
 800c6fc:	4605      	mov	r5, r0
 800c6fe:	e7f8      	b.n	800c6f2 <rcl_init_options_fini+0x46>

0800c700 <rcl_init_options_copy>:
 800c700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c704:	b094      	sub	sp, #80	@ 0x50
 800c706:	2800      	cmp	r0, #0
 800c708:	d058      	beq.n	800c7bc <rcl_init_options_copy+0xbc>
 800c70a:	4604      	mov	r4, r0
 800c70c:	6800      	ldr	r0, [r0, #0]
 800c70e:	2800      	cmp	r0, #0
 800c710:	d054      	beq.n	800c7bc <rcl_init_options_copy+0xbc>
 800c712:	460e      	mov	r6, r1
 800c714:	f001 fb2a 	bl	800dd6c <rcutils_allocator_is_valid>
 800c718:	2800      	cmp	r0, #0
 800c71a:	d04f      	beq.n	800c7bc <rcl_init_options_copy+0xbc>
 800c71c:	2e00      	cmp	r6, #0
 800c71e:	d04d      	beq.n	800c7bc <rcl_init_options_copy+0xbc>
 800c720:	6833      	ldr	r3, [r6, #0]
 800c722:	b123      	cbz	r3, 800c72e <rcl_init_options_copy+0x2e>
 800c724:	2464      	movs	r4, #100	@ 0x64
 800c726:	4620      	mov	r0, r4
 800c728:	b014      	add	sp, #80	@ 0x50
 800c72a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c72e:	6827      	ldr	r7, [r4, #0]
 800c730:	46bc      	mov	ip, r7
 800c732:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c736:	ad0f      	add	r5, sp, #60	@ 0x3c
 800c738:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c73a:	f8dc 3000 	ldr.w	r3, [ip]
 800c73e:	f8d7 8000 	ldr.w	r8, [r7]
 800c742:	602b      	str	r3, [r5, #0]
 800c744:	4619      	mov	r1, r3
 800c746:	2050      	movs	r0, #80	@ 0x50
 800c748:	47c0      	blx	r8
 800c74a:	4605      	mov	r5, r0
 800c74c:	6030      	str	r0, [r6, #0]
 800c74e:	b3d0      	cbz	r0, 800c7c6 <rcl_init_options_copy+0xc6>
 800c750:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800c754:	4686      	mov	lr, r0
 800c756:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c75a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c75e:	f8dc 3000 	ldr.w	r3, [ip]
 800c762:	f8ce 3000 	str.w	r3, [lr]
 800c766:	4668      	mov	r0, sp
 800c768:	f001 fed2 	bl	800e510 <rmw_get_zero_initialized_init_options>
 800c76c:	46ee      	mov	lr, sp
 800c76e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c772:	f105 0c18 	add.w	ip, r5, #24
 800c776:	6824      	ldr	r4, [r4, #0]
 800c778:	6835      	ldr	r5, [r6, #0]
 800c77a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c77e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c782:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c786:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c78a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c78e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c792:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c796:	f104 0018 	add.w	r0, r4, #24
 800c79a:	f105 0118 	add.w	r1, r5, #24
 800c79e:	f002 f9c9 	bl	800eb34 <rmw_init_options_copy>
 800c7a2:	4604      	mov	r4, r0
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	d0be      	beq.n	800c726 <rcl_init_options_copy+0x26>
 800c7a8:	f001 fbaa 	bl	800df00 <rcutils_get_error_string>
 800c7ac:	f001 fbc0 	bl	800df30 <rcutils_reset_error>
 800c7b0:	4630      	mov	r0, r6
 800c7b2:	f7ff ff7b 	bl	800c6ac <rcl_init_options_fini>
 800c7b6:	b140      	cbz	r0, 800c7ca <rcl_init_options_copy+0xca>
 800c7b8:	4604      	mov	r4, r0
 800c7ba:	e7b4      	b.n	800c726 <rcl_init_options_copy+0x26>
 800c7bc:	240b      	movs	r4, #11
 800c7be:	4620      	mov	r0, r4
 800c7c0:	b014      	add	sp, #80	@ 0x50
 800c7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7c6:	240a      	movs	r4, #10
 800c7c8:	e7ad      	b.n	800c726 <rcl_init_options_copy+0x26>
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	b014      	add	sp, #80	@ 0x50
 800c7ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7d2:	f007 ba87 	b.w	8013ce4 <rcl_convert_rmw_ret_to_rcl_ret>
 800c7d6:	bf00      	nop

0800c7d8 <rcl_init_options_set_domain_id>:
 800c7d8:	b120      	cbz	r0, 800c7e4 <rcl_init_options_set_domain_id+0xc>
 800c7da:	6803      	ldr	r3, [r0, #0]
 800c7dc:	b113      	cbz	r3, 800c7e4 <rcl_init_options_set_domain_id+0xc>
 800c7de:	6259      	str	r1, [r3, #36]	@ 0x24
 800c7e0:	2000      	movs	r0, #0
 800c7e2:	4770      	bx	lr
 800c7e4:	200b      	movs	r0, #11
 800c7e6:	4770      	bx	lr

0800c7e8 <rcl_get_zero_initialized_node>:
 800c7e8:	4a03      	ldr	r2, [pc, #12]	@ (800c7f8 <rcl_get_zero_initialized_node+0x10>)
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c7f0:	e883 0003 	stmia.w	r3, {r0, r1}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	4770      	bx	lr
 800c7f8:	08019be4 	.word	0x08019be4

0800c7fc <rcl_node_init>:
 800c7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c800:	b0a9      	sub	sp, #164	@ 0xa4
 800c802:	4604      	mov	r4, r0
 800c804:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800c808:	a823      	add	r0, sp, #140	@ 0x8c
 800c80a:	460e      	mov	r6, r1
 800c80c:	4615      	mov	r5, r2
 800c80e:	461f      	mov	r7, r3
 800c810:	f007 fd2c 	bl	801426c <rcl_guard_condition_get_default_options>
 800c814:	f1b8 0f00 	cmp.w	r8, #0
 800c818:	f000 80e6 	beq.w	800c9e8 <rcl_node_init+0x1ec>
 800c81c:	4640      	mov	r0, r8
 800c81e:	f001 faa5 	bl	800dd6c <rcutils_allocator_is_valid>
 800c822:	2800      	cmp	r0, #0
 800c824:	f000 80e0 	beq.w	800c9e8 <rcl_node_init+0x1ec>
 800c828:	2e00      	cmp	r6, #0
 800c82a:	f000 80dd 	beq.w	800c9e8 <rcl_node_init+0x1ec>
 800c82e:	2d00      	cmp	r5, #0
 800c830:	f000 80da 	beq.w	800c9e8 <rcl_node_init+0x1ec>
 800c834:	2c00      	cmp	r4, #0
 800c836:	f000 80d7 	beq.w	800c9e8 <rcl_node_init+0x1ec>
 800c83a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c83e:	f1b9 0f00 	cmp.w	r9, #0
 800c842:	f040 80fd 	bne.w	800ca40 <rcl_node_init+0x244>
 800c846:	2f00      	cmp	r7, #0
 800c848:	f000 80ce 	beq.w	800c9e8 <rcl_node_init+0x1ec>
 800c84c:	4638      	mov	r0, r7
 800c84e:	f007 fa67 	bl	8013d20 <rcl_context_is_valid>
 800c852:	4682      	mov	sl, r0
 800c854:	2800      	cmp	r0, #0
 800c856:	f000 80cd 	beq.w	800c9f4 <rcl_node_init+0x1f8>
 800c85a:	464a      	mov	r2, r9
 800c85c:	a922      	add	r1, sp, #136	@ 0x88
 800c85e:	4630      	mov	r0, r6
 800c860:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800c864:	f001 ff4e 	bl	800e704 <rmw_validate_node_name>
 800c868:	4681      	mov	r9, r0
 800c86a:	2800      	cmp	r0, #0
 800c86c:	f040 80be 	bne.w	800c9ec <rcl_node_init+0x1f0>
 800c870:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800c872:	2800      	cmp	r0, #0
 800c874:	f040 80f0 	bne.w	800ca58 <rcl_node_init+0x25c>
 800c878:	4628      	mov	r0, r5
 800c87a:	f7f3 fcdb 	bl	8000234 <strlen>
 800c87e:	2800      	cmp	r0, #0
 800c880:	f040 80bb 	bne.w	800c9fa <rcl_node_init+0x1fe>
 800c884:	4d7c      	ldr	r5, [pc, #496]	@ (800ca78 <rcl_node_init+0x27c>)
 800c886:	a922      	add	r1, sp, #136	@ 0x88
 800c888:	2200      	movs	r2, #0
 800c88a:	4628      	mov	r0, r5
 800c88c:	f001 ff1c 	bl	800e6c8 <rmw_validate_namespace>
 800c890:	4681      	mov	r9, r0
 800c892:	2800      	cmp	r0, #0
 800c894:	f040 80aa 	bne.w	800c9ec <rcl_node_init+0x1f0>
 800c898:	4682      	mov	sl, r0
 800c89a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800c89c:	2800      	cmp	r0, #0
 800c89e:	f040 80e0 	bne.w	800ca62 <rcl_node_init+0x266>
 800c8a2:	f8d8 3000 	ldr.w	r3, [r8]
 800c8a6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c8aa:	2078      	movs	r0, #120	@ 0x78
 800c8ac:	4798      	blx	r3
 800c8ae:	4681      	mov	r9, r0
 800c8b0:	6060      	str	r0, [r4, #4]
 800c8b2:	2800      	cmp	r0, #0
 800c8b4:	f000 80ca 	beq.w	800ca4c <rcl_node_init+0x250>
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800c8c0:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800c8c4:	a808      	add	r0, sp, #32
 800c8c6:	f000 f907 	bl	800cad8 <rcl_node_get_default_options>
 800c8ca:	a908      	add	r1, sp, #32
 800c8cc:	4648      	mov	r0, r9
 800c8ce:	2268      	movs	r2, #104	@ 0x68
 800c8d0:	f00c f9a7 	bl	8018c22 <memcpy>
 800c8d4:	6861      	ldr	r1, [r4, #4]
 800c8d6:	6027      	str	r7, [r4, #0]
 800c8d8:	4640      	mov	r0, r8
 800c8da:	f000 f90b 	bl	800caf4 <rcl_node_options_copy>
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	d158      	bne.n	800c994 <rcl_node_init+0x198>
 800c8e2:	4628      	mov	r0, r5
 800c8e4:	f7f3 fca6 	bl	8000234 <strlen>
 800c8e8:	4428      	add	r0, r5
 800c8ea:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800c8ee:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800c8f2:	2b2f      	cmp	r3, #47	@ 0x2f
 800c8f4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c8f8:	9300      	str	r3, [sp, #0]
 800c8fa:	bf0c      	ite	eq
 800c8fc:	4b5f      	ldreq	r3, [pc, #380]	@ (800ca7c <rcl_node_init+0x280>)
 800c8fe:	4b60      	ldrne	r3, [pc, #384]	@ (800ca80 <rcl_node_init+0x284>)
 800c900:	9302      	str	r3, [sp, #8]
 800c902:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c906:	9301      	str	r3, [sp, #4]
 800c908:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800c90c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c910:	f001 fb2a 	bl	800df68 <rcutils_format_string_limit>
 800c914:	6823      	ldr	r3, [r4, #0]
 800c916:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800c91a:	6818      	ldr	r0, [r3, #0]
 800c91c:	4631      	mov	r1, r6
 800c91e:	3028      	adds	r0, #40	@ 0x28
 800c920:	462a      	mov	r2, r5
 800c922:	6866      	ldr	r6, [r4, #4]
 800c924:	f002 fb7c 	bl	800f020 <rmw_create_node>
 800c928:	6863      	ldr	r3, [r4, #4]
 800c92a:	66b0      	str	r0, [r6, #104]	@ 0x68
 800c92c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800c92e:	2800      	cmp	r0, #0
 800c930:	d032      	beq.n	800c998 <rcl_node_init+0x19c>
 800c932:	f002 fc09 	bl	800f148 <rmw_node_get_graph_guard_condition>
 800c936:	4681      	mov	r9, r0
 800c938:	b360      	cbz	r0, 800c994 <rcl_node_init+0x198>
 800c93a:	f8d8 3000 	ldr.w	r3, [r8]
 800c93e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c942:	6866      	ldr	r6, [r4, #4]
 800c944:	2008      	movs	r0, #8
 800c946:	4798      	blx	r3
 800c948:	6863      	ldr	r3, [r4, #4]
 800c94a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800c94c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800c950:	f1bb 0f00 	cmp.w	fp, #0
 800c954:	d020      	beq.n	800c998 <rcl_node_init+0x19c>
 800c956:	a806      	add	r0, sp, #24
 800c958:	f007 fbac 	bl	80140b4 <rcl_get_zero_initialized_guard_condition>
 800c95c:	a806      	add	r0, sp, #24
 800c95e:	c803      	ldmia	r0, {r0, r1}
 800c960:	6863      	ldr	r3, [r4, #4]
 800c962:	46c4      	mov	ip, r8
 800c964:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800c968:	e88b 0003 	stmia.w	fp, {r0, r1}
 800c96c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c970:	ae23      	add	r6, sp, #140	@ 0x8c
 800c972:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c974:	f8dc 3000 	ldr.w	r3, [ip]
 800c978:	6033      	str	r3, [r6, #0]
 800c97a:	ab28      	add	r3, sp, #160	@ 0xa0
 800c97c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800c980:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c984:	4649      	mov	r1, r9
 800c986:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c988:	463a      	mov	r2, r7
 800c98a:	4670      	mov	r0, lr
 800c98c:	f007 fbe8 	bl	8014160 <rcl_guard_condition_init_from_rmw>
 800c990:	4681      	mov	r9, r0
 800c992:	b328      	cbz	r0, 800c9e0 <rcl_node_init+0x1e4>
 800c994:	6863      	ldr	r3, [r4, #4]
 800c996:	b1f3      	cbz	r3, 800c9d6 <rcl_node_init+0x1da>
 800c998:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800c99a:	b128      	cbz	r0, 800c9a8 <rcl_node_init+0x1ac>
 800c99c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c9a0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c9a4:	4798      	blx	r3
 800c9a6:	6863      	ldr	r3, [r4, #4]
 800c9a8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800c9aa:	b110      	cbz	r0, 800c9b2 <rcl_node_init+0x1b6>
 800c9ac:	f002 fb50 	bl	800f050 <rmw_destroy_node>
 800c9b0:	6863      	ldr	r3, [r4, #4]
 800c9b2:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800c9b4:	b148      	cbz	r0, 800c9ca <rcl_node_init+0x1ce>
 800c9b6:	f007 fc33 	bl	8014220 <rcl_guard_condition_fini>
 800c9ba:	6863      	ldr	r3, [r4, #4]
 800c9bc:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c9c0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800c9c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c9c6:	4798      	blx	r3
 800c9c8:	6863      	ldr	r3, [r4, #4]
 800c9ca:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c9d4:	4798      	blx	r3
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	e9c4 3300 	strd	r3, r3, [r4]
 800c9dc:	f04f 0901 	mov.w	r9, #1
 800c9e0:	f1ba 0f00 	cmp.w	sl, #0
 800c9e4:	d125      	bne.n	800ca32 <rcl_node_init+0x236>
 800c9e6:	e001      	b.n	800c9ec <rcl_node_init+0x1f0>
 800c9e8:	f04f 090b 	mov.w	r9, #11
 800c9ec:	4648      	mov	r0, r9
 800c9ee:	b029      	add	sp, #164	@ 0xa4
 800c9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9f4:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800c9f8:	e7f8      	b.n	800c9ec <rcl_node_init+0x1f0>
 800c9fa:	782b      	ldrb	r3, [r5, #0]
 800c9fc:	2b2f      	cmp	r3, #47	@ 0x2f
 800c9fe:	f43f af42 	beq.w	800c886 <rcl_node_init+0x8a>
 800ca02:	9503      	str	r5, [sp, #12]
 800ca04:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ca08:	9300      	str	r3, [sp, #0]
 800ca0a:	4b1e      	ldr	r3, [pc, #120]	@ (800ca84 <rcl_node_init+0x288>)
 800ca0c:	9302      	str	r3, [sp, #8]
 800ca0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ca12:	9301      	str	r3, [sp, #4]
 800ca14:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800ca18:	f001 faa6 	bl	800df68 <rcutils_format_string_limit>
 800ca1c:	4605      	mov	r5, r0
 800ca1e:	b340      	cbz	r0, 800ca72 <rcl_node_init+0x276>
 800ca20:	2200      	movs	r2, #0
 800ca22:	a922      	add	r1, sp, #136	@ 0x88
 800ca24:	9222      	str	r2, [sp, #136]	@ 0x88
 800ca26:	f001 fe4f 	bl	800e6c8 <rmw_validate_namespace>
 800ca2a:	4681      	mov	r9, r0
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	f43f af34 	beq.w	800c89a <rcl_node_init+0x9e>
 800ca32:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ca36:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	4798      	blx	r3
 800ca3e:	e7d5      	b.n	800c9ec <rcl_node_init+0x1f0>
 800ca40:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800ca44:	4648      	mov	r0, r9
 800ca46:	b029      	add	sp, #164	@ 0xa4
 800ca48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca4c:	f04f 090a 	mov.w	r9, #10
 800ca50:	f1ba 0f00 	cmp.w	sl, #0
 800ca54:	d1ed      	bne.n	800ca32 <rcl_node_init+0x236>
 800ca56:	e7c9      	b.n	800c9ec <rcl_node_init+0x1f0>
 800ca58:	f001 fea6 	bl	800e7a8 <rmw_node_name_validation_result_string>
 800ca5c:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800ca60:	e7c4      	b.n	800c9ec <rcl_node_init+0x1f0>
 800ca62:	f001 fe43 	bl	800e6ec <rmw_namespace_validation_result_string>
 800ca66:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800ca6a:	f1ba 0f00 	cmp.w	sl, #0
 800ca6e:	d1e0      	bne.n	800ca32 <rcl_node_init+0x236>
 800ca70:	e7bc      	b.n	800c9ec <rcl_node_init+0x1f0>
 800ca72:	f04f 090a 	mov.w	r9, #10
 800ca76:	e7b9      	b.n	800c9ec <rcl_node_init+0x1f0>
 800ca78:	08019bcc 	.word	0x08019bcc
 800ca7c:	08019bd4 	.word	0x08019bd4
 800ca80:	08019bdc 	.word	0x08019bdc
 800ca84:	08019bd0 	.word	0x08019bd0

0800ca88 <rcl_node_is_valid>:
 800ca88:	b130      	cbz	r0, 800ca98 <rcl_node_is_valid+0x10>
 800ca8a:	6843      	ldr	r3, [r0, #4]
 800ca8c:	b123      	cbz	r3, 800ca98 <rcl_node_is_valid+0x10>
 800ca8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca90:	b113      	cbz	r3, 800ca98 <rcl_node_is_valid+0x10>
 800ca92:	6800      	ldr	r0, [r0, #0]
 800ca94:	f007 b944 	b.w	8013d20 <rcl_context_is_valid>
 800ca98:	2000      	movs	r0, #0
 800ca9a:	4770      	bx	lr

0800ca9c <rcl_node_get_name>:
 800ca9c:	b120      	cbz	r0, 800caa8 <rcl_node_get_name+0xc>
 800ca9e:	6840      	ldr	r0, [r0, #4]
 800caa0:	b110      	cbz	r0, 800caa8 <rcl_node_get_name+0xc>
 800caa2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800caa4:	b100      	cbz	r0, 800caa8 <rcl_node_get_name+0xc>
 800caa6:	6880      	ldr	r0, [r0, #8]
 800caa8:	4770      	bx	lr
 800caaa:	bf00      	nop

0800caac <rcl_node_get_namespace>:
 800caac:	b120      	cbz	r0, 800cab8 <rcl_node_get_namespace+0xc>
 800caae:	6840      	ldr	r0, [r0, #4]
 800cab0:	b110      	cbz	r0, 800cab8 <rcl_node_get_namespace+0xc>
 800cab2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800cab4:	b100      	cbz	r0, 800cab8 <rcl_node_get_namespace+0xc>
 800cab6:	68c0      	ldr	r0, [r0, #12]
 800cab8:	4770      	bx	lr
 800caba:	bf00      	nop

0800cabc <rcl_node_get_options>:
 800cabc:	b128      	cbz	r0, 800caca <rcl_node_get_options+0xe>
 800cabe:	6840      	ldr	r0, [r0, #4]
 800cac0:	b118      	cbz	r0, 800caca <rcl_node_get_options+0xe>
 800cac2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	bf08      	it	eq
 800cac8:	2000      	moveq	r0, #0
 800caca:	4770      	bx	lr

0800cacc <rcl_node_get_rmw_handle>:
 800cacc:	b110      	cbz	r0, 800cad4 <rcl_node_get_rmw_handle+0x8>
 800cace:	6840      	ldr	r0, [r0, #4]
 800cad0:	b100      	cbz	r0, 800cad4 <rcl_node_get_rmw_handle+0x8>
 800cad2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800cad4:	4770      	bx	lr
 800cad6:	bf00      	nop

0800cad8 <rcl_node_get_default_options>:
 800cad8:	b510      	push	{r4, lr}
 800cada:	2268      	movs	r2, #104	@ 0x68
 800cadc:	4604      	mov	r4, r0
 800cade:	2100      	movs	r1, #0
 800cae0:	f00b ffd6 	bl	8018a90 <memset>
 800cae4:	4620      	mov	r0, r4
 800cae6:	f001 f933 	bl	800dd50 <rcutils_get_default_allocator>
 800caea:	2301      	movs	r3, #1
 800caec:	7523      	strb	r3, [r4, #20]
 800caee:	4620      	mov	r0, r4
 800caf0:	bd10      	pop	{r4, pc}
 800caf2:	bf00      	nop

0800caf4 <rcl_node_options_copy>:
 800caf4:	b1d0      	cbz	r0, 800cb2c <rcl_node_options_copy+0x38>
 800caf6:	b570      	push	{r4, r5, r6, lr}
 800caf8:	460c      	mov	r4, r1
 800cafa:	b1a9      	cbz	r1, 800cb28 <rcl_node_options_copy+0x34>
 800cafc:	4288      	cmp	r0, r1
 800cafe:	4684      	mov	ip, r0
 800cb00:	d012      	beq.n	800cb28 <rcl_node_options_copy+0x34>
 800cb02:	4605      	mov	r5, r0
 800cb04:	8a86      	ldrh	r6, [r0, #20]
 800cb06:	468e      	mov	lr, r1
 800cb08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb0a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cb0e:	682b      	ldr	r3, [r5, #0]
 800cb10:	f8ce 3000 	str.w	r3, [lr]
 800cb14:	f10c 0118 	add.w	r1, ip, #24
 800cb18:	2250      	movs	r2, #80	@ 0x50
 800cb1a:	82a6      	strh	r6, [r4, #20]
 800cb1c:	f104 0018 	add.w	r0, r4, #24
 800cb20:	f00c f87f 	bl	8018c22 <memcpy>
 800cb24:	2000      	movs	r0, #0
 800cb26:	bd70      	pop	{r4, r5, r6, pc}
 800cb28:	200b      	movs	r0, #11
 800cb2a:	bd70      	pop	{r4, r5, r6, pc}
 800cb2c:	200b      	movs	r0, #11
 800cb2e:	4770      	bx	lr

0800cb30 <rcl_node_resolve_name>:
 800cb30:	b082      	sub	sp, #8
 800cb32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb36:	b091      	sub	sp, #68	@ 0x44
 800cb38:	ac1a      	add	r4, sp, #104	@ 0x68
 800cb3a:	e884 000c 	stmia.w	r4, {r2, r3}
 800cb3e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800cb42:	2800      	cmp	r0, #0
 800cb44:	d03b      	beq.n	800cbbe <rcl_node_resolve_name+0x8e>
 800cb46:	460c      	mov	r4, r1
 800cb48:	4605      	mov	r5, r0
 800cb4a:	f7ff ffb7 	bl	800cabc <rcl_node_get_options>
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	d037      	beq.n	800cbc2 <rcl_node_resolve_name+0x92>
 800cb52:	4628      	mov	r0, r5
 800cb54:	f7ff ffa2 	bl	800ca9c <rcl_node_get_name>
 800cb58:	4606      	mov	r6, r0
 800cb5a:	4628      	mov	r0, r5
 800cb5c:	f7ff ffa6 	bl	800caac <rcl_node_get_namespace>
 800cb60:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800cb64:	4681      	mov	r9, r0
 800cb66:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cb6a:	ad0b      	add	r5, sp, #44	@ 0x2c
 800cb6c:	46ac      	mov	ip, r5
 800cb6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cb72:	f8de 3000 	ldr.w	r3, [lr]
 800cb76:	f8cc 3000 	str.w	r3, [ip]
 800cb7a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cb7c:	b1fb      	cbz	r3, 800cbbe <rcl_node_resolve_name+0x8e>
 800cb7e:	468a      	mov	sl, r1
 800cb80:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800cb84:	f001 fb48 	bl	800e218 <rcutils_get_zero_initialized_string_map>
 800cb88:	ab10      	add	r3, sp, #64	@ 0x40
 800cb8a:	9008      	str	r0, [sp, #32]
 800cb8c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800cb90:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800cb94:	2100      	movs	r1, #0
 800cb96:	e895 000c 	ldmia.w	r5, {r2, r3}
 800cb9a:	a808      	add	r0, sp, #32
 800cb9c:	f001 fbb4 	bl	800e308 <rcutils_string_map_init>
 800cba0:	4607      	mov	r7, r0
 800cba2:	b180      	cbz	r0, 800cbc6 <rcl_node_resolve_name+0x96>
 800cba4:	f001 f9ac 	bl	800df00 <rcutils_get_error_string>
 800cba8:	f001 f9c2 	bl	800df30 <rcutils_reset_error>
 800cbac:	2f0a      	cmp	r7, #10
 800cbae:	bf18      	it	ne
 800cbb0:	2701      	movne	r7, #1
 800cbb2:	4638      	mov	r0, r7
 800cbb4:	b011      	add	sp, #68	@ 0x44
 800cbb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbba:	b002      	add	sp, #8
 800cbbc:	4770      	bx	lr
 800cbbe:	270b      	movs	r7, #11
 800cbc0:	e7f7      	b.n	800cbb2 <rcl_node_resolve_name+0x82>
 800cbc2:	2701      	movs	r7, #1
 800cbc4:	e7f5      	b.n	800cbb2 <rcl_node_resolve_name+0x82>
 800cbc6:	9009      	str	r0, [sp, #36]	@ 0x24
 800cbc8:	9007      	str	r0, [sp, #28]
 800cbca:	a808      	add	r0, sp, #32
 800cbcc:	f007 fa6c 	bl	80140a8 <rcl_get_default_topic_name_substitutions>
 800cbd0:	4607      	mov	r7, r0
 800cbd2:	b1a8      	cbz	r0, 800cc00 <rcl_node_resolve_name+0xd0>
 800cbd4:	280a      	cmp	r0, #10
 800cbd6:	9c07      	ldr	r4, [sp, #28]
 800cbd8:	d000      	beq.n	800cbdc <rcl_node_resolve_name+0xac>
 800cbda:	2701      	movs	r7, #1
 800cbdc:	a808      	add	r0, sp, #32
 800cbde:	f001 fbd3 	bl	800e388 <rcutils_string_map_fini>
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	d13d      	bne.n	800cc62 <rcl_node_resolve_name+0x132>
 800cbe6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cbe8:	4659      	mov	r1, fp
 800cbea:	47d0      	blx	sl
 800cbec:	4659      	mov	r1, fp
 800cbee:	4620      	mov	r0, r4
 800cbf0:	47d0      	blx	sl
 800cbf2:	f1b8 0f00 	cmp.w	r8, #0
 800cbf6:	d0dc      	beq.n	800cbb2 <rcl_node_resolve_name+0x82>
 800cbf8:	2f67      	cmp	r7, #103	@ 0x67
 800cbfa:	bf08      	it	eq
 800cbfc:	2768      	moveq	r7, #104	@ 0x68
 800cbfe:	e7d8      	b.n	800cbb2 <rcl_node_resolve_name+0x82>
 800cc00:	ab09      	add	r3, sp, #36	@ 0x24
 800cc02:	9305      	str	r3, [sp, #20]
 800cc04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cc06:	46ec      	mov	ip, sp
 800cc08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cc0c:	682b      	ldr	r3, [r5, #0]
 800cc0e:	f8cc 3000 	str.w	r3, [ip]
 800cc12:	464a      	mov	r2, r9
 800cc14:	4631      	mov	r1, r6
 800cc16:	4620      	mov	r0, r4
 800cc18:	ab08      	add	r3, sp, #32
 800cc1a:	f007 f8e7 	bl	8013dec <rcl_expand_topic_name>
 800cc1e:	4607      	mov	r7, r0
 800cc20:	b9b8      	cbnz	r0, 800cc52 <rcl_node_resolve_name+0x122>
 800cc22:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800cc24:	9009      	str	r0, [sp, #36]	@ 0x24
 800cc26:	4602      	mov	r2, r0
 800cc28:	a90a      	add	r1, sp, #40	@ 0x28
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	f001 fc88 	bl	800e540 <rmw_validate_full_topic_name>
 800cc30:	b988      	cbnz	r0, 800cc56 <rcl_node_resolve_name+0x126>
 800cc32:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800cc34:	b9d5      	cbnz	r5, 800cc6c <rcl_node_resolve_name+0x13c>
 800cc36:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cc38:	a808      	add	r0, sp, #32
 800cc3a:	601c      	str	r4, [r3, #0]
 800cc3c:	f001 fba4 	bl	800e388 <rcutils_string_map_fini>
 800cc40:	4607      	mov	r7, r0
 800cc42:	b1a8      	cbz	r0, 800cc70 <rcl_node_resolve_name+0x140>
 800cc44:	f001 f95c 	bl	800df00 <rcutils_get_error_string>
 800cc48:	462c      	mov	r4, r5
 800cc4a:	f001 f971 	bl	800df30 <rcutils_reset_error>
 800cc4e:	2701      	movs	r7, #1
 800cc50:	e7c9      	b.n	800cbe6 <rcl_node_resolve_name+0xb6>
 800cc52:	9c07      	ldr	r4, [sp, #28]
 800cc54:	e7c2      	b.n	800cbdc <rcl_node_resolve_name+0xac>
 800cc56:	f001 f953 	bl	800df00 <rcutils_get_error_string>
 800cc5a:	2701      	movs	r7, #1
 800cc5c:	f001 f968 	bl	800df30 <rcutils_reset_error>
 800cc60:	e7bc      	b.n	800cbdc <rcl_node_resolve_name+0xac>
 800cc62:	f001 f94d 	bl	800df00 <rcutils_get_error_string>
 800cc66:	f001 f963 	bl	800df30 <rcutils_reset_error>
 800cc6a:	e7bc      	b.n	800cbe6 <rcl_node_resolve_name+0xb6>
 800cc6c:	2767      	movs	r7, #103	@ 0x67
 800cc6e:	e7b5      	b.n	800cbdc <rcl_node_resolve_name+0xac>
 800cc70:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc72:	4659      	mov	r1, fp
 800cc74:	47d0      	blx	sl
 800cc76:	4659      	mov	r1, fp
 800cc78:	4638      	mov	r0, r7
 800cc7a:	47d0      	blx	sl
 800cc7c:	e799      	b.n	800cbb2 <rcl_node_resolve_name+0x82>
 800cc7e:	bf00      	nop

0800cc80 <rcl_get_zero_initialized_publisher>:
 800cc80:	4b01      	ldr	r3, [pc, #4]	@ (800cc88 <rcl_get_zero_initialized_publisher+0x8>)
 800cc82:	6818      	ldr	r0, [r3, #0]
 800cc84:	4770      	bx	lr
 800cc86:	bf00      	nop
 800cc88:	08019bec 	.word	0x08019bec

0800cc8c <rcl_publisher_init>:
 800cc8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc90:	b088      	sub	sp, #32
 800cc92:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800cc94:	2d00      	cmp	r5, #0
 800cc96:	d069      	beq.n	800cd6c <rcl_publisher_init+0xe0>
 800cc98:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800cc9c:	4604      	mov	r4, r0
 800cc9e:	4648      	mov	r0, r9
 800cca0:	460e      	mov	r6, r1
 800cca2:	4690      	mov	r8, r2
 800cca4:	461f      	mov	r7, r3
 800cca6:	f001 f861 	bl	800dd6c <rcutils_allocator_is_valid>
 800ccaa:	2800      	cmp	r0, #0
 800ccac:	d05e      	beq.n	800cd6c <rcl_publisher_init+0xe0>
 800ccae:	2c00      	cmp	r4, #0
 800ccb0:	d05c      	beq.n	800cd6c <rcl_publisher_init+0xe0>
 800ccb2:	f8d4 a000 	ldr.w	sl, [r4]
 800ccb6:	f1ba 0f00 	cmp.w	sl, #0
 800ccba:	d004      	beq.n	800ccc6 <rcl_publisher_init+0x3a>
 800ccbc:	2764      	movs	r7, #100	@ 0x64
 800ccbe:	4638      	mov	r0, r7
 800ccc0:	b008      	add	sp, #32
 800ccc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccc6:	4630      	mov	r0, r6
 800ccc8:	f7ff fede 	bl	800ca88 <rcl_node_is_valid>
 800cccc:	2800      	cmp	r0, #0
 800ccce:	d052      	beq.n	800cd76 <rcl_publisher_init+0xea>
 800ccd0:	f1b8 0f00 	cmp.w	r8, #0
 800ccd4:	d04a      	beq.n	800cd6c <rcl_publisher_init+0xe0>
 800ccd6:	2f00      	cmp	r7, #0
 800ccd8:	d048      	beq.n	800cd6c <rcl_publisher_init+0xe0>
 800ccda:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800ccde:	aa07      	add	r2, sp, #28
 800cce0:	9205      	str	r2, [sp, #20]
 800cce2:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800cce6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ccea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ccee:	f8cd a01c 	str.w	sl, [sp, #28]
 800ccf2:	4639      	mov	r1, r7
 800ccf4:	e899 000c 	ldmia.w	r9, {r2, r3}
 800ccf8:	4630      	mov	r0, r6
 800ccfa:	f7ff ff19 	bl	800cb30 <rcl_node_resolve_name>
 800ccfe:	4607      	mov	r7, r0
 800cd00:	2800      	cmp	r0, #0
 800cd02:	d14f      	bne.n	800cda4 <rcl_publisher_init+0x118>
 800cd04:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800cd06:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800cd08:	20c8      	movs	r0, #200	@ 0xc8
 800cd0a:	4798      	blx	r3
 800cd0c:	6020      	str	r0, [r4, #0]
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	d04e      	beq.n	800cdb0 <rcl_publisher_init+0x124>
 800cd12:	4630      	mov	r0, r6
 800cd14:	f7ff feda 	bl	800cacc <rcl_node_get_rmw_handle>
 800cd18:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800cd1c:	9300      	str	r3, [sp, #0]
 800cd1e:	9a07      	ldr	r2, [sp, #28]
 800cd20:	6827      	ldr	r7, [r4, #0]
 800cd22:	462b      	mov	r3, r5
 800cd24:	4641      	mov	r1, r8
 800cd26:	f002 fa79 	bl	800f21c <rmw_create_publisher>
 800cd2a:	6823      	ldr	r3, [r4, #0]
 800cd2c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800cd30:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800cd34:	b370      	cbz	r0, 800cd94 <rcl_publisher_init+0x108>
 800cd36:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800cd3a:	f002 fb4d 	bl	800f3d8 <rmw_publisher_get_actual_qos>
 800cd3e:	6823      	ldr	r3, [r4, #0]
 800cd40:	4607      	mov	r7, r0
 800cd42:	b9d0      	cbnz	r0, 800cd7a <rcl_publisher_init+0xee>
 800cd44:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800cd48:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800cd4c:	4629      	mov	r1, r5
 800cd4e:	2270      	movs	r2, #112	@ 0x70
 800cd50:	4618      	mov	r0, r3
 800cd52:	f00b ff66 	bl	8018c22 <memcpy>
 800cd56:	6832      	ldr	r2, [r6, #0]
 800cd58:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800cd5c:	9807      	ldr	r0, [sp, #28]
 800cd5e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800cd60:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800cd62:	4798      	blx	r3
 800cd64:	4638      	mov	r0, r7
 800cd66:	b008      	add	sp, #32
 800cd68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd6c:	270b      	movs	r7, #11
 800cd6e:	4638      	mov	r0, r7
 800cd70:	b008      	add	sp, #32
 800cd72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd76:	27c8      	movs	r7, #200	@ 0xc8
 800cd78:	e7a1      	b.n	800ccbe <rcl_publisher_init+0x32>
 800cd7a:	b18b      	cbz	r3, 800cda0 <rcl_publisher_init+0x114>
 800cd7c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800cd80:	b142      	cbz	r2, 800cd94 <rcl_publisher_init+0x108>
 800cd82:	4630      	mov	r0, r6
 800cd84:	f7ff fea2 	bl	800cacc <rcl_node_get_rmw_handle>
 800cd88:	6823      	ldr	r3, [r4, #0]
 800cd8a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800cd8e:	f002 fb33 	bl	800f3f8 <rmw_destroy_publisher>
 800cd92:	6823      	ldr	r3, [r4, #0]
 800cd94:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800cd96:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800cd98:	4618      	mov	r0, r3
 800cd9a:	4790      	blx	r2
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	6023      	str	r3, [r4, #0]
 800cda0:	2701      	movs	r7, #1
 800cda2:	e7db      	b.n	800cd5c <rcl_publisher_init+0xd0>
 800cda4:	2867      	cmp	r0, #103	@ 0x67
 800cda6:	d0d9      	beq.n	800cd5c <rcl_publisher_init+0xd0>
 800cda8:	2869      	cmp	r0, #105	@ 0x69
 800cdaa:	d003      	beq.n	800cdb4 <rcl_publisher_init+0x128>
 800cdac:	280a      	cmp	r0, #10
 800cdae:	d1f7      	bne.n	800cda0 <rcl_publisher_init+0x114>
 800cdb0:	270a      	movs	r7, #10
 800cdb2:	e7d3      	b.n	800cd5c <rcl_publisher_init+0xd0>
 800cdb4:	2767      	movs	r7, #103	@ 0x67
 800cdb6:	e7d1      	b.n	800cd5c <rcl_publisher_init+0xd0>

0800cdb8 <rcl_publisher_get_default_options>:
 800cdb8:	b570      	push	{r4, r5, r6, lr}
 800cdba:	4d14      	ldr	r5, [pc, #80]	@ (800ce0c <rcl_publisher_get_default_options+0x54>)
 800cdbc:	4914      	ldr	r1, [pc, #80]	@ (800ce10 <rcl_publisher_get_default_options+0x58>)
 800cdbe:	b088      	sub	sp, #32
 800cdc0:	4604      	mov	r4, r0
 800cdc2:	2250      	movs	r2, #80	@ 0x50
 800cdc4:	4628      	mov	r0, r5
 800cdc6:	f00b ff2c 	bl	8018c22 <memcpy>
 800cdca:	a802      	add	r0, sp, #8
 800cdcc:	f000 ffc0 	bl	800dd50 <rcutils_get_default_allocator>
 800cdd0:	f10d 0c08 	add.w	ip, sp, #8
 800cdd4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cdd8:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800cddc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cde0:	466e      	mov	r6, sp
 800cde2:	f8dc 3000 	ldr.w	r3, [ip]
 800cde6:	f8ce 3000 	str.w	r3, [lr]
 800cdea:	4630      	mov	r0, r6
 800cdec:	f001 fba0 	bl	800e530 <rmw_get_default_publisher_options>
 800cdf0:	e896 0003 	ldmia.w	r6, {r0, r1}
 800cdf4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800cdf8:	e883 0003 	stmia.w	r3, {r0, r1}
 800cdfc:	2270      	movs	r2, #112	@ 0x70
 800cdfe:	4629      	mov	r1, r5
 800ce00:	4620      	mov	r0, r4
 800ce02:	f00b ff0e 	bl	8018c22 <memcpy>
 800ce06:	4620      	mov	r0, r4
 800ce08:	b008      	add	sp, #32
 800ce0a:	bd70      	pop	{r4, r5, r6, pc}
 800ce0c:	20006678 	.word	0x20006678
 800ce10:	08019bf0 	.word	0x08019bf0

0800ce14 <rcl_publish>:
 800ce14:	b1f8      	cbz	r0, 800ce56 <rcl_publish+0x42>
 800ce16:	6803      	ldr	r3, [r0, #0]
 800ce18:	b570      	push	{r4, r5, r6, lr}
 800ce1a:	4604      	mov	r4, r0
 800ce1c:	b1b3      	cbz	r3, 800ce4c <rcl_publish+0x38>
 800ce1e:	4616      	mov	r6, r2
 800ce20:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ce24:	b192      	cbz	r2, 800ce4c <rcl_publish+0x38>
 800ce26:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ce2a:	460d      	mov	r5, r1
 800ce2c:	f006 ff78 	bl	8013d20 <rcl_context_is_valid>
 800ce30:	b160      	cbz	r0, 800ce4c <rcl_publish+0x38>
 800ce32:	6823      	ldr	r3, [r4, #0]
 800ce34:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ce38:	b140      	cbz	r0, 800ce4c <rcl_publish+0x38>
 800ce3a:	b155      	cbz	r5, 800ce52 <rcl_publish+0x3e>
 800ce3c:	4632      	mov	r2, r6
 800ce3e:	4629      	mov	r1, r5
 800ce40:	f002 f98c 	bl	800f15c <rmw_publish>
 800ce44:	3800      	subs	r0, #0
 800ce46:	bf18      	it	ne
 800ce48:	2001      	movne	r0, #1
 800ce4a:	bd70      	pop	{r4, r5, r6, pc}
 800ce4c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ce50:	bd70      	pop	{r4, r5, r6, pc}
 800ce52:	200b      	movs	r0, #11
 800ce54:	bd70      	pop	{r4, r5, r6, pc}
 800ce56:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ce5a:	4770      	bx	lr

0800ce5c <rcl_publisher_is_valid>:
 800ce5c:	b1a0      	cbz	r0, 800ce88 <rcl_publisher_is_valid+0x2c>
 800ce5e:	6803      	ldr	r3, [r0, #0]
 800ce60:	b510      	push	{r4, lr}
 800ce62:	4604      	mov	r4, r0
 800ce64:	b173      	cbz	r3, 800ce84 <rcl_publisher_is_valid+0x28>
 800ce66:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ce6a:	b15a      	cbz	r2, 800ce84 <rcl_publisher_is_valid+0x28>
 800ce6c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ce70:	f006 ff56 	bl	8013d20 <rcl_context_is_valid>
 800ce74:	b130      	cbz	r0, 800ce84 <rcl_publisher_is_valid+0x28>
 800ce76:	6823      	ldr	r3, [r4, #0]
 800ce78:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ce7c:	3800      	subs	r0, #0
 800ce7e:	bf18      	it	ne
 800ce80:	2001      	movne	r0, #1
 800ce82:	bd10      	pop	{r4, pc}
 800ce84:	2000      	movs	r0, #0
 800ce86:	bd10      	pop	{r4, pc}
 800ce88:	2000      	movs	r0, #0
 800ce8a:	4770      	bx	lr

0800ce8c <rcl_publisher_is_valid_except_context>:
 800ce8c:	b130      	cbz	r0, 800ce9c <rcl_publisher_is_valid_except_context+0x10>
 800ce8e:	6800      	ldr	r0, [r0, #0]
 800ce90:	b120      	cbz	r0, 800ce9c <rcl_publisher_is_valid_except_context+0x10>
 800ce92:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800ce96:	3800      	subs	r0, #0
 800ce98:	bf18      	it	ne
 800ce9a:	2001      	movne	r0, #1
 800ce9c:	4770      	bx	lr
 800ce9e:	bf00      	nop

0800cea0 <rclc_client_init_default>:
 800cea0:	b368      	cbz	r0, 800cefe <rclc_client_init_default+0x5e>
 800cea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cea6:	460d      	mov	r5, r1
 800cea8:	b09e      	sub	sp, #120	@ 0x78
 800ceaa:	b321      	cbz	r1, 800cef6 <rclc_client_init_default+0x56>
 800ceac:	4616      	mov	r6, r2
 800ceae:	b312      	cbz	r2, 800cef6 <rclc_client_init_default+0x56>
 800ceb0:	461f      	mov	r7, r3
 800ceb2:	b303      	cbz	r3, 800cef6 <rclc_client_init_default+0x56>
 800ceb4:	4604      	mov	r4, r0
 800ceb6:	f7ff fa4b 	bl	800c350 <rcl_get_zero_initialized_client>
 800ceba:	f10d 0810 	add.w	r8, sp, #16
 800cebe:	6020      	str	r0, [r4, #0]
 800cec0:	4640      	mov	r0, r8
 800cec2:	f7ff fad9 	bl	800c478 <rcl_client_get_default_options>
 800cec6:	490f      	ldr	r1, [pc, #60]	@ (800cf04 <rclc_client_init_default+0x64>)
 800cec8:	2250      	movs	r2, #80	@ 0x50
 800ceca:	4640      	mov	r0, r8
 800cecc:	f00b fea9 	bl	8018c22 <memcpy>
 800ced0:	f8cd 8000 	str.w	r8, [sp]
 800ced4:	463b      	mov	r3, r7
 800ced6:	4632      	mov	r2, r6
 800ced8:	4629      	mov	r1, r5
 800ceda:	4620      	mov	r0, r4
 800cedc:	f7ff fa3e 	bl	800c35c <rcl_client_init>
 800cee0:	b910      	cbnz	r0, 800cee8 <rclc_client_init_default+0x48>
 800cee2:	b01e      	add	sp, #120	@ 0x78
 800cee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cee8:	9003      	str	r0, [sp, #12]
 800ceea:	f001 f821 	bl	800df30 <rcutils_reset_error>
 800ceee:	9803      	ldr	r0, [sp, #12]
 800cef0:	b01e      	add	sp, #120	@ 0x78
 800cef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cef6:	200b      	movs	r0, #11
 800cef8:	b01e      	add	sp, #120	@ 0x78
 800cefa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cefe:	200b      	movs	r0, #11
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	08019c40 	.word	0x08019c40

0800cf08 <_rclc_check_for_new_data>:
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	d046      	beq.n	800cf9a <_rclc_check_for_new_data+0x92>
 800cf0c:	b510      	push	{r4, lr}
 800cf0e:	7802      	ldrb	r2, [r0, #0]
 800cf10:	b084      	sub	sp, #16
 800cf12:	4603      	mov	r3, r0
 800cf14:	2a0a      	cmp	r2, #10
 800cf16:	d842      	bhi.n	800cf9e <_rclc_check_for_new_data+0x96>
 800cf18:	e8df f002 	tbb	[pc, r2]
 800cf1c:	14181212 	.word	0x14181212
 800cf20:	06060614 	.word	0x06060614
 800cf24:	2e1a      	.short	0x2e1a
 800cf26:	16          	.byte	0x16
 800cf27:	00          	.byte	0x00
 800cf28:	6a0a      	ldr	r2, [r1, #32]
 800cf2a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800cf2c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800cf30:	2000      	movs	r0, #0
 800cf32:	1a12      	subs	r2, r2, r0
 800cf34:	bf18      	it	ne
 800cf36:	2201      	movne	r2, #1
 800cf38:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800cf3c:	b004      	add	sp, #16
 800cf3e:	bd10      	pop	{r4, pc}
 800cf40:	680a      	ldr	r2, [r1, #0]
 800cf42:	e7f2      	b.n	800cf2a <_rclc_check_for_new_data+0x22>
 800cf44:	698a      	ldr	r2, [r1, #24]
 800cf46:	e7f0      	b.n	800cf2a <_rclc_check_for_new_data+0x22>
 800cf48:	688a      	ldr	r2, [r1, #8]
 800cf4a:	e7ee      	b.n	800cf2a <_rclc_check_for_new_data+0x22>
 800cf4c:	690a      	ldr	r2, [r1, #16]
 800cf4e:	e7ec      	b.n	800cf2a <_rclc_check_for_new_data+0x22>
 800cf50:	685c      	ldr	r4, [r3, #4]
 800cf52:	4608      	mov	r0, r1
 800cf54:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800cf58:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800cf5c:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800cf60:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800cf64:	9300      	str	r3, [sp, #0]
 800cf66:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800cf6a:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800cf6e:	f104 0110 	add.w	r1, r4, #16
 800cf72:	f009 f8f9 	bl	8016168 <rcl_action_client_wait_set_get_entities_ready>
 800cf76:	e7e1      	b.n	800cf3c <_rclc_check_for_new_data+0x34>
 800cf78:	685c      	ldr	r4, [r3, #4]
 800cf7a:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800cf7e:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800cf82:	e9cd 3200 	strd	r3, r2, [sp]
 800cf86:	4608      	mov	r0, r1
 800cf88:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800cf8c:	f104 0220 	add.w	r2, r4, #32
 800cf90:	f104 0110 	add.w	r1, r4, #16
 800cf94:	f009 fb00 	bl	8016598 <rcl_action_server_wait_set_get_entities_ready>
 800cf98:	e7d0      	b.n	800cf3c <_rclc_check_for_new_data+0x34>
 800cf9a:	200b      	movs	r0, #11
 800cf9c:	4770      	bx	lr
 800cf9e:	2001      	movs	r0, #1
 800cfa0:	e7cc      	b.n	800cf3c <_rclc_check_for_new_data+0x34>
 800cfa2:	bf00      	nop

0800cfa4 <_rclc_take_new_data>:
 800cfa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfa6:	b09b      	sub	sp, #108	@ 0x6c
 800cfa8:	2800      	cmp	r0, #0
 800cfaa:	f000 8088 	beq.w	800d0be <_rclc_take_new_data+0x11a>
 800cfae:	7803      	ldrb	r3, [r0, #0]
 800cfb0:	4604      	mov	r4, r0
 800cfb2:	2b0a      	cmp	r3, #10
 800cfb4:	f200 8167 	bhi.w	800d286 <_rclc_take_new_data+0x2e2>
 800cfb8:	e8df f003 	tbb	[pc, r3]
 800cfbc:	44152d2d 	.word	0x44152d2d
 800cfc0:	19191944 	.word	0x19191944
 800cfc4:	065a      	.short	0x065a
 800cfc6:	15          	.byte	0x15
 800cfc7:	00          	.byte	0x00
 800cfc8:	6840      	ldr	r0, [r0, #4]
 800cfca:	f890 3020 	ldrb.w	r3, [r0, #32]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	f040 80b2 	bne.w	800d138 <_rclc_take_new_data+0x194>
 800cfd4:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	f040 80e4 	bne.w	800d1a6 <_rclc_take_new_data+0x202>
 800cfde:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d16f      	bne.n	800d0c6 <_rclc_take_new_data+0x122>
 800cfe6:	2500      	movs	r5, #0
 800cfe8:	4628      	mov	r0, r5
 800cfea:	b01b      	add	sp, #108	@ 0x6c
 800cfec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfee:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800cff0:	6a0b      	ldr	r3, [r1, #32]
 800cff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d0f5      	beq.n	800cfe6 <_rclc_take_new_data+0x42>
 800cffa:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800cffe:	f104 0110 	add.w	r1, r4, #16
 800d002:	f007 fb8d 	bl	8014720 <rcl_take_request>
 800d006:	4605      	mov	r5, r0
 800d008:	2800      	cmp	r0, #0
 800d00a:	d0ec      	beq.n	800cfe6 <_rclc_take_new_data+0x42>
 800d00c:	f240 2359 	movw	r3, #601	@ 0x259
 800d010:	4298      	cmp	r0, r3
 800d012:	d013      	beq.n	800d03c <_rclc_take_new_data+0x98>
 800d014:	e029      	b.n	800d06a <_rclc_take_new_data+0xc6>
 800d016:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d018:	680b      	ldr	r3, [r1, #0]
 800d01a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d0e1      	beq.n	800cfe6 <_rclc_take_new_data+0x42>
 800d022:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800d026:	2300      	movs	r3, #0
 800d028:	aa0a      	add	r2, sp, #40	@ 0x28
 800d02a:	f007 fbdb 	bl	80147e4 <rcl_take>
 800d02e:	4605      	mov	r5, r0
 800d030:	2800      	cmp	r0, #0
 800d032:	d0d9      	beq.n	800cfe8 <_rclc_take_new_data+0x44>
 800d034:	f240 1391 	movw	r3, #401	@ 0x191
 800d038:	4298      	cmp	r0, r3
 800d03a:	d116      	bne.n	800d06a <_rclc_take_new_data+0xc6>
 800d03c:	2300      	movs	r3, #0
 800d03e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800d042:	e7d1      	b.n	800cfe8 <_rclc_take_new_data+0x44>
 800d044:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d046:	698b      	ldr	r3, [r1, #24]
 800d048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d0ca      	beq.n	800cfe6 <_rclc_take_new_data+0x42>
 800d050:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d054:	f104 0110 	add.w	r1, r4, #16
 800d058:	f7ff fa6e 	bl	800c538 <rcl_take_response>
 800d05c:	4605      	mov	r5, r0
 800d05e:	2800      	cmp	r0, #0
 800d060:	d0c1      	beq.n	800cfe6 <_rclc_take_new_data+0x42>
 800d062:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800d066:	4298      	cmp	r0, r3
 800d068:	d0be      	beq.n	800cfe8 <_rclc_take_new_data+0x44>
 800d06a:	f000 ff61 	bl	800df30 <rcutils_reset_error>
 800d06e:	e7bb      	b.n	800cfe8 <_rclc_take_new_data+0x44>
 800d070:	6840      	ldr	r0, [r0, #4]
 800d072:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800d076:	2b00      	cmp	r3, #0
 800d078:	d17d      	bne.n	800d176 <_rclc_take_new_data+0x1d2>
 800d07a:	69c3      	ldr	r3, [r0, #28]
 800d07c:	b11b      	cbz	r3, 800d086 <_rclc_take_new_data+0xe2>
 800d07e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d082:	2b00      	cmp	r3, #0
 800d084:	d144      	bne.n	800d110 <_rclc_take_new_data+0x16c>
 800d086:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	f040 80ac 	bne.w	800d1e8 <_rclc_take_new_data+0x244>
 800d090:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d094:	2b00      	cmp	r3, #0
 800d096:	d0a6      	beq.n	800cfe6 <_rclc_take_new_data+0x42>
 800d098:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800d09a:	a90a      	add	r1, sp, #40	@ 0x28
 800d09c:	3010      	adds	r0, #16
 800d09e:	f008 ff3b 	bl	8015f18 <rcl_action_take_result_response>
 800d0a2:	4605      	mov	r5, r0
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	d1e0      	bne.n	800d06a <_rclc_take_new_data+0xc6>
 800d0a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d0ac:	6860      	ldr	r0, [r4, #4]
 800d0ae:	f009 fb97 	bl	80167e0 <rclc_action_find_handle_by_result_request_sequence_number>
 800d0b2:	2800      	cmp	r0, #0
 800d0b4:	d098      	beq.n	800cfe8 <_rclc_take_new_data+0x44>
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800d0bc:	e794      	b.n	800cfe8 <_rclc_take_new_data+0x44>
 800d0be:	250b      	movs	r5, #11
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	b01b      	add	sp, #108	@ 0x6c
 800d0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0c6:	ae04      	add	r6, sp, #16
 800d0c8:	aa0a      	add	r2, sp, #40	@ 0x28
 800d0ca:	3010      	adds	r0, #16
 800d0cc:	4631      	mov	r1, r6
 800d0ce:	f009 f997 	bl	8016400 <rcl_action_take_cancel_request>
 800d0d2:	4605      	mov	r5, r0
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	d1c8      	bne.n	800d06a <_rclc_take_new_data+0xc6>
 800d0d8:	6860      	ldr	r0, [r4, #4]
 800d0da:	a90a      	add	r1, sp, #40	@ 0x28
 800d0dc:	f009 fb3e 	bl	801675c <rclc_action_find_goal_handle_by_uuid>
 800d0e0:	4607      	mov	r7, r0
 800d0e2:	2800      	cmp	r0, #0
 800d0e4:	f000 80bb 	beq.w	800d25e <_rclc_take_new_data+0x2ba>
 800d0e8:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800d0ec:	2101      	movs	r1, #1
 800d0ee:	f009 fabf 	bl	8016670 <rcl_action_transition_goal_state>
 800d0f2:	2803      	cmp	r0, #3
 800d0f4:	4684      	mov	ip, r0
 800d0f6:	f040 80a7 	bne.w	800d248 <_rclc_take_new_data+0x2a4>
 800d0fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d0fc:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800d100:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d102:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d106:	e884 0003 	stmia.w	r4, {r0, r1}
 800d10a:	f887 c008 	strb.w	ip, [r7, #8]
 800d10e:	e76b      	b.n	800cfe8 <_rclc_take_new_data+0x44>
 800d110:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d112:	3010      	adds	r0, #16
 800d114:	f008 ff80 	bl	8016018 <rcl_action_take_feedback>
 800d118:	4605      	mov	r5, r0
 800d11a:	2800      	cmp	r0, #0
 800d11c:	d1a5      	bne.n	800d06a <_rclc_take_new_data+0xc6>
 800d11e:	6860      	ldr	r0, [r4, #4]
 800d120:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d122:	f009 fb1b 	bl	801675c <rclc_action_find_goal_handle_by_uuid>
 800d126:	4603      	mov	r3, r0
 800d128:	2800      	cmp	r0, #0
 800d12a:	f000 80a3 	beq.w	800d274 <_rclc_take_new_data+0x2d0>
 800d12e:	2201      	movs	r2, #1
 800d130:	6860      	ldr	r0, [r4, #4]
 800d132:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800d136:	e7a6      	b.n	800d086 <_rclc_take_new_data+0xe2>
 800d138:	f009 faea 	bl	8016710 <rclc_action_take_goal_handle>
 800d13c:	4606      	mov	r6, r0
 800d13e:	6860      	ldr	r0, [r4, #4]
 800d140:	2e00      	cmp	r6, #0
 800d142:	f43f af47 	beq.w	800cfd4 <_rclc_take_new_data+0x30>
 800d146:	6070      	str	r0, [r6, #4]
 800d148:	69f2      	ldr	r2, [r6, #28]
 800d14a:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800d14e:	3010      	adds	r0, #16
 800d150:	f009 f89e 	bl	8016290 <rcl_action_take_goal_request>
 800d154:	4605      	mov	r5, r0
 800d156:	2800      	cmp	r0, #0
 800d158:	f040 808e 	bne.w	800d278 <_rclc_take_new_data+0x2d4>
 800d15c:	69f7      	ldr	r7, [r6, #28]
 800d15e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d160:	7235      	strb	r5, [r6, #8]
 800d162:	f8c6 0009 	str.w	r0, [r6, #9]
 800d166:	f8c6 100d 	str.w	r1, [r6, #13]
 800d16a:	6860      	ldr	r0, [r4, #4]
 800d16c:	f8c6 2011 	str.w	r2, [r6, #17]
 800d170:	f8c6 3015 	str.w	r3, [r6, #21]
 800d174:	e72e      	b.n	800cfd4 <_rclc_take_new_data+0x30>
 800d176:	aa04      	add	r2, sp, #16
 800d178:	a90a      	add	r1, sp, #40	@ 0x28
 800d17a:	3010      	adds	r0, #16
 800d17c:	f008 fe54 	bl	8015e28 <rcl_action_take_goal_response>
 800d180:	4605      	mov	r5, r0
 800d182:	2800      	cmp	r0, #0
 800d184:	f47f af71 	bne.w	800d06a <_rclc_take_new_data+0xc6>
 800d188:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d18c:	6860      	ldr	r0, [r4, #4]
 800d18e:	f009 fb15 	bl	80167bc <rclc_action_find_handle_by_goal_request_sequence_number>
 800d192:	b130      	cbz	r0, 800d1a2 <_rclc_take_new_data+0x1fe>
 800d194:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800d198:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800d19c:	2201      	movs	r2, #1
 800d19e:	f880 2020 	strb.w	r2, [r0, #32]
 800d1a2:	6860      	ldr	r0, [r4, #4]
 800d1a4:	e769      	b.n	800d07a <_rclc_take_new_data+0xd6>
 800d1a6:	aa04      	add	r2, sp, #16
 800d1a8:	3010      	adds	r0, #16
 800d1aa:	a90a      	add	r1, sp, #40	@ 0x28
 800d1ac:	f009 f8e8 	bl	8016380 <rcl_action_take_result_request>
 800d1b0:	4605      	mov	r5, r0
 800d1b2:	2800      	cmp	r0, #0
 800d1b4:	f47f af59 	bne.w	800d06a <_rclc_take_new_data+0xc6>
 800d1b8:	6860      	ldr	r0, [r4, #4]
 800d1ba:	a904      	add	r1, sp, #16
 800d1bc:	f009 face 	bl	801675c <rclc_action_find_goal_handle_by_uuid>
 800d1c0:	4607      	mov	r7, r0
 800d1c2:	b160      	cbz	r0, 800d1de <_rclc_take_new_data+0x23a>
 800d1c4:	ad0a      	add	r5, sp, #40	@ 0x28
 800d1c6:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800d1ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d1cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d1ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d1d2:	f04f 0c02 	mov.w	ip, #2
 800d1d6:	e886 0003 	stmia.w	r6, {r0, r1}
 800d1da:	f887 c008 	strb.w	ip, [r7, #8]
 800d1de:	6860      	ldr	r0, [r4, #4]
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800d1e6:	e6fa      	b.n	800cfde <_rclc_take_new_data+0x3a>
 800d1e8:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800d1ec:	a90a      	add	r1, sp, #40	@ 0x28
 800d1ee:	3010      	adds	r0, #16
 800d1f0:	f008 fed2 	bl	8015f98 <rcl_action_take_cancel_response>
 800d1f4:	4605      	mov	r5, r0
 800d1f6:	2800      	cmp	r0, #0
 800d1f8:	f47f af37 	bne.w	800d06a <_rclc_take_new_data+0xc6>
 800d1fc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d200:	6860      	ldr	r0, [r4, #4]
 800d202:	f009 faff 	bl	8016804 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800d206:	4606      	mov	r6, r0
 800d208:	6860      	ldr	r0, [r4, #4]
 800d20a:	2e00      	cmp	r6, #0
 800d20c:	f43f af40 	beq.w	800d090 <_rclc_take_new_data+0xec>
 800d210:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d212:	2701      	movs	r7, #1
 800d214:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800d216:	2b00      	cmp	r3, #0
 800d218:	f43f af3a 	beq.w	800d090 <_rclc_take_new_data+0xec>
 800d21c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d21e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800d222:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d226:	f009 fa99 	bl	801675c <rclc_action_find_goal_handle_by_uuid>
 800d22a:	b138      	cbz	r0, 800d23c <_rclc_take_new_data+0x298>
 800d22c:	6860      	ldr	r0, [r4, #4]
 800d22e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d230:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800d234:	3501      	adds	r5, #1
 800d236:	42ab      	cmp	r3, r5
 800d238:	d8f0      	bhi.n	800d21c <_rclc_take_new_data+0x278>
 800d23a:	e729      	b.n	800d090 <_rclc_take_new_data+0xec>
 800d23c:	6860      	ldr	r0, [r4, #4]
 800d23e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d240:	3501      	adds	r5, #1
 800d242:	42ab      	cmp	r3, r5
 800d244:	d8ea      	bhi.n	800d21c <_rclc_take_new_data+0x278>
 800d246:	e723      	b.n	800d090 <_rclc_take_new_data+0xec>
 800d248:	ab06      	add	r3, sp, #24
 800d24a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d24c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d250:	2103      	movs	r1, #3
 800d252:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d256:	6860      	ldr	r0, [r4, #4]
 800d258:	f009 fb4a 	bl	80168f0 <rclc_action_server_goal_cancel_reject>
 800d25c:	e6c4      	b.n	800cfe8 <_rclc_take_new_data+0x44>
 800d25e:	ab06      	add	r3, sp, #24
 800d260:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d262:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d266:	2102      	movs	r1, #2
 800d268:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d26c:	6860      	ldr	r0, [r4, #4]
 800d26e:	f009 fb3f 	bl	80168f0 <rclc_action_server_goal_cancel_reject>
 800d272:	e6b9      	b.n	800cfe8 <_rclc_take_new_data+0x44>
 800d274:	6860      	ldr	r0, [r4, #4]
 800d276:	e706      	b.n	800d086 <_rclc_take_new_data+0xe2>
 800d278:	6860      	ldr	r0, [r4, #4]
 800d27a:	4631      	mov	r1, r6
 800d27c:	f009 fa58 	bl	8016730 <rclc_action_remove_used_goal_handle>
 800d280:	f000 fe56 	bl	800df30 <rcutils_reset_error>
 800d284:	e6b0      	b.n	800cfe8 <_rclc_take_new_data+0x44>
 800d286:	2501      	movs	r5, #1
 800d288:	e6ae      	b.n	800cfe8 <_rclc_take_new_data+0x44>
 800d28a:	bf00      	nop

0800d28c <_rclc_execute.part.0>:
 800d28c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d28e:	7803      	ldrb	r3, [r0, #0]
 800d290:	b087      	sub	sp, #28
 800d292:	4604      	mov	r4, r0
 800d294:	2b0a      	cmp	r3, #10
 800d296:	f200 8136 	bhi.w	800d506 <_rclc_execute.part.0+0x27a>
 800d29a:	e8df f003 	tbb	[pc, r3]
 800d29e:	435e      	.short	0x435e
 800d2a0:	06a1664f 	.word	0x06a1664f
 800d2a4:	6c1e0606 	.word	0x6c1e0606
 800d2a8:	59          	.byte	0x59
 800d2a9:	00          	.byte	0x00
 800d2aa:	2b06      	cmp	r3, #6
 800d2ac:	f000 8122 	beq.w	800d4f4 <_rclc_execute.part.0+0x268>
 800d2b0:	2b07      	cmp	r3, #7
 800d2b2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d2b4:	f040 8118 	bne.w	800d4e8 <_rclc_execute.part.0+0x25c>
 800d2b8:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800d2bc:	6880      	ldr	r0, [r0, #8]
 800d2be:	4798      	blx	r3
 800d2c0:	f104 0110 	add.w	r1, r4, #16
 800d2c4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800d2c6:	6860      	ldr	r0, [r4, #4]
 800d2c8:	f007 fa6a 	bl	80147a0 <rcl_send_response>
 800d2cc:	2800      	cmp	r0, #0
 800d2ce:	d033      	beq.n	800d338 <_rclc_execute.part.0+0xac>
 800d2d0:	9005      	str	r0, [sp, #20]
 800d2d2:	f000 fe2d 	bl	800df30 <rcutils_reset_error>
 800d2d6:	9805      	ldr	r0, [sp, #20]
 800d2d8:	e02e      	b.n	800d338 <_rclc_execute.part.0+0xac>
 800d2da:	6840      	ldr	r0, [r0, #4]
 800d2dc:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	f000 8086 	beq.w	800d3f2 <_rclc_execute.part.0+0x166>
 800d2e6:	2600      	movs	r6, #0
 800d2e8:	2701      	movs	r7, #1
 800d2ea:	e004      	b.n	800d2f6 <_rclc_execute.part.0+0x6a>
 800d2ec:	f009 f9ea 	bl	80166c4 <rclc_action_send_result_request>
 800d2f0:	b998      	cbnz	r0, 800d31a <_rclc_execute.part.0+0x8e>
 800d2f2:	722f      	strb	r7, [r5, #8]
 800d2f4:	6860      	ldr	r0, [r4, #4]
 800d2f6:	f009 fa97 	bl	8016828 <rclc_action_find_first_handle_with_goal_response>
 800d2fa:	4605      	mov	r5, r0
 800d2fc:	2800      	cmp	r0, #0
 800d2fe:	d077      	beq.n	800d3f0 <_rclc_execute.part.0+0x164>
 800d300:	6863      	ldr	r3, [r4, #4]
 800d302:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d304:	699b      	ldr	r3, [r3, #24]
 800d306:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800d30a:	f885 6020 	strb.w	r6, [r5, #32]
 800d30e:	4798      	blx	r3
 800d310:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800d314:	4628      	mov	r0, r5
 800d316:	2b00      	cmp	r3, #0
 800d318:	d1e8      	bne.n	800d2ec <_rclc_execute.part.0+0x60>
 800d31a:	6860      	ldr	r0, [r4, #4]
 800d31c:	4629      	mov	r1, r5
 800d31e:	f009 fa07 	bl	8016730 <rclc_action_remove_used_goal_handle>
 800d322:	e7e7      	b.n	800d2f4 <_rclc_execute.part.0+0x68>
 800d324:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d328:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800d32c:	2d00      	cmp	r5, #0
 800d32e:	f000 80c9 	beq.w	800d4c4 <_rclc_execute.part.0+0x238>
 800d332:	6880      	ldr	r0, [r0, #8]
 800d334:	4798      	blx	r3
 800d336:	2000      	movs	r0, #0
 800d338:	b007      	add	sp, #28
 800d33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d33c:	6840      	ldr	r0, [r0, #4]
 800d33e:	f007 fd61 	bl	8014e04 <rcl_timer_call>
 800d342:	f240 3321 	movw	r3, #801	@ 0x321
 800d346:	4298      	cmp	r0, r3
 800d348:	d004      	beq.n	800d354 <_rclc_execute.part.0+0xc8>
 800d34a:	2800      	cmp	r0, #0
 800d34c:	d0f4      	beq.n	800d338 <_rclc_execute.part.0+0xac>
 800d34e:	e7bf      	b.n	800d2d0 <_rclc_execute.part.0+0x44>
 800d350:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d352:	4798      	blx	r3
 800d354:	2000      	movs	r0, #0
 800d356:	b007      	add	sp, #28
 800d358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d35a:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d35e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d360:	b925      	cbnz	r5, 800d36c <_rclc_execute.part.0+0xe0>
 800d362:	4628      	mov	r0, r5
 800d364:	4798      	blx	r3
 800d366:	4628      	mov	r0, r5
 800d368:	e7e6      	b.n	800d338 <_rclc_execute.part.0+0xac>
 800d36a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d36c:	68a0      	ldr	r0, [r4, #8]
 800d36e:	4798      	blx	r3
 800d370:	2000      	movs	r0, #0
 800d372:	b007      	add	sp, #28
 800d374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d376:	6840      	ldr	r0, [r0, #4]
 800d378:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800d37c:	bb3b      	cbnz	r3, 800d3ce <_rclc_execute.part.0+0x142>
 800d37e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d07b      	beq.n	800d47e <_rclc_execute.part.0+0x1f2>
 800d386:	f640 0634 	movw	r6, #2100	@ 0x834
 800d38a:	2701      	movs	r7, #1
 800d38c:	e007      	b.n	800d39e <_rclc_execute.part.0+0x112>
 800d38e:	4628      	mov	r0, r5
 800d390:	f009 fa62 	bl	8016858 <rclc_action_server_response_goal_request>
 800d394:	6860      	ldr	r0, [r4, #4]
 800d396:	4629      	mov	r1, r5
 800d398:	f009 f9ca 	bl	8016730 <rclc_action_remove_used_goal_handle>
 800d39c:	6860      	ldr	r0, [r4, #4]
 800d39e:	2100      	movs	r1, #0
 800d3a0:	f009 f9f4 	bl	801678c <rclc_action_find_first_handle_by_status>
 800d3a4:	4605      	mov	r5, r0
 800d3a6:	2800      	cmp	r0, #0
 800d3a8:	d066      	beq.n	800d478 <_rclc_execute.part.0+0x1ec>
 800d3aa:	6863      	ldr	r3, [r4, #4]
 800d3ac:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d3ae:	699b      	ldr	r3, [r3, #24]
 800d3b0:	4798      	blx	r3
 800d3b2:	42b0      	cmp	r0, r6
 800d3b4:	f04f 0100 	mov.w	r1, #0
 800d3b8:	d1e9      	bne.n	800d38e <_rclc_execute.part.0+0x102>
 800d3ba:	2101      	movs	r1, #1
 800d3bc:	4628      	mov	r0, r5
 800d3be:	f009 fa4b 	bl	8016858 <rclc_action_server_response_goal_request>
 800d3c2:	722f      	strb	r7, [r5, #8]
 800d3c4:	e7ea      	b.n	800d39c <_rclc_execute.part.0+0x110>
 800d3c6:	6848      	ldr	r0, [r1, #4]
 800d3c8:	f009 f9b2 	bl	8016730 <rclc_action_remove_used_goal_handle>
 800d3cc:	6860      	ldr	r0, [r4, #4]
 800d3ce:	f009 f9e9 	bl	80167a4 <rclc_action_find_first_terminated_handle>
 800d3d2:	4601      	mov	r1, r0
 800d3d4:	2800      	cmp	r0, #0
 800d3d6:	d1f6      	bne.n	800d3c6 <_rclc_execute.part.0+0x13a>
 800d3d8:	6860      	ldr	r0, [r4, #4]
 800d3da:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800d3de:	e7ce      	b.n	800d37e <_rclc_execute.part.0+0xf2>
 800d3e0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d3e2:	6880      	ldr	r0, [r0, #8]
 800d3e4:	f104 0110 	add.w	r1, r4, #16
 800d3e8:	4798      	blx	r3
 800d3ea:	2000      	movs	r0, #0
 800d3ec:	b007      	add	sp, #28
 800d3ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3f0:	6860      	ldr	r0, [r4, #4]
 800d3f2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d3f6:	b18b      	cbz	r3, 800d41c <_rclc_execute.part.0+0x190>
 800d3f8:	68c5      	ldr	r5, [r0, #12]
 800d3fa:	b32d      	cbz	r5, 800d448 <_rclc_execute.part.0+0x1bc>
 800d3fc:	2600      	movs	r6, #0
 800d3fe:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800d402:	b143      	cbz	r3, 800d416 <_rclc_execute.part.0+0x18a>
 800d404:	69c3      	ldr	r3, [r0, #28]
 800d406:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800d40a:	b123      	cbz	r3, 800d416 <_rclc_execute.part.0+0x18a>
 800d40c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d40e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d410:	4628      	mov	r0, r5
 800d412:	4798      	blx	r3
 800d414:	6860      	ldr	r0, [r4, #4]
 800d416:	682d      	ldr	r5, [r5, #0]
 800d418:	2d00      	cmp	r5, #0
 800d41a:	d1f0      	bne.n	800d3fe <_rclc_execute.part.0+0x172>
 800d41c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d420:	b193      	cbz	r3, 800d448 <_rclc_execute.part.0+0x1bc>
 800d422:	68c5      	ldr	r5, [r0, #12]
 800d424:	b185      	cbz	r5, 800d448 <_rclc_execute.part.0+0x1bc>
 800d426:	2600      	movs	r6, #0
 800d428:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800d42c:	b14b      	cbz	r3, 800d442 <_rclc_execute.part.0+0x1b6>
 800d42e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800d430:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800d434:	b12b      	cbz	r3, 800d442 <_rclc_execute.part.0+0x1b6>
 800d436:	4628      	mov	r0, r5
 800d438:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800d43c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d43e:	4798      	blx	r3
 800d440:	6860      	ldr	r0, [r4, #4]
 800d442:	682d      	ldr	r5, [r5, #0]
 800d444:	2d00      	cmp	r5, #0
 800d446:	d1ef      	bne.n	800d428 <_rclc_execute.part.0+0x19c>
 800d448:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d081      	beq.n	800d354 <_rclc_execute.part.0+0xc8>
 800d450:	2700      	movs	r7, #0
 800d452:	e00b      	b.n	800d46c <_rclc_execute.part.0+0x1e0>
 800d454:	6863      	ldr	r3, [r4, #4]
 800d456:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d458:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800d45a:	6a1e      	ldr	r6, [r3, #32]
 800d45c:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800d460:	47b0      	blx	r6
 800d462:	6860      	ldr	r0, [r4, #4]
 800d464:	4629      	mov	r1, r5
 800d466:	f009 f963 	bl	8016730 <rclc_action_remove_used_goal_handle>
 800d46a:	6860      	ldr	r0, [r4, #4]
 800d46c:	f009 f9e8 	bl	8016840 <rclc_action_find_first_handle_with_result_response>
 800d470:	4605      	mov	r5, r0
 800d472:	2800      	cmp	r0, #0
 800d474:	d1ee      	bne.n	800d454 <_rclc_execute.part.0+0x1c8>
 800d476:	e76d      	b.n	800d354 <_rclc_execute.part.0+0xc8>
 800d478:	6860      	ldr	r0, [r4, #4]
 800d47a:	f880 5020 	strb.w	r5, [r0, #32]
 800d47e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800d482:	2b00      	cmp	r3, #0
 800d484:	f43f af66 	beq.w	800d354 <_rclc_execute.part.0+0xc8>
 800d488:	68c5      	ldr	r5, [r0, #12]
 800d48a:	b1b5      	cbz	r5, 800d4ba <_rclc_execute.part.0+0x22e>
 800d48c:	2602      	movs	r6, #2
 800d48e:	e001      	b.n	800d494 <_rclc_execute.part.0+0x208>
 800d490:	682d      	ldr	r5, [r5, #0]
 800d492:	b195      	cbz	r5, 800d4ba <_rclc_execute.part.0+0x22e>
 800d494:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800d498:	2b03      	cmp	r3, #3
 800d49a:	d1f9      	bne.n	800d490 <_rclc_execute.part.0+0x204>
 800d49c:	69c3      	ldr	r3, [r0, #28]
 800d49e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	4798      	blx	r3
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800d4aa:	4628      	mov	r0, r5
 800d4ac:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800d4b0:	b163      	cbz	r3, 800d4cc <_rclc_execute.part.0+0x240>
 800d4b2:	f009 f9f1 	bl	8016898 <rclc_action_server_goal_cancel_accept>
 800d4b6:	6860      	ldr	r0, [r4, #4]
 800d4b8:	e7ea      	b.n	800d490 <_rclc_execute.part.0+0x204>
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	e739      	b.n	800d338 <_rclc_execute.part.0+0xac>
 800d4c4:	4628      	mov	r0, r5
 800d4c6:	4798      	blx	r3
 800d4c8:	4628      	mov	r0, r5
 800d4ca:	e735      	b.n	800d338 <_rclc_execute.part.0+0xac>
 800d4cc:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800d4ce:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d4d2:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800d4d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4da:	6860      	ldr	r0, [r4, #4]
 800d4dc:	2101      	movs	r1, #1
 800d4de:	f009 fa07 	bl	80168f0 <rclc_action_server_goal_cancel_reject>
 800d4e2:	722e      	strb	r6, [r5, #8]
 800d4e4:	6860      	ldr	r0, [r4, #4]
 800d4e6:	e7d3      	b.n	800d490 <_rclc_execute.part.0+0x204>
 800d4e8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d4ea:	6880      	ldr	r0, [r0, #8]
 800d4ec:	4798      	blx	r3
 800d4ee:	f104 0110 	add.w	r1, r4, #16
 800d4f2:	e6e7      	b.n	800d2c4 <_rclc_execute.part.0+0x38>
 800d4f4:	f100 0110 	add.w	r1, r0, #16
 800d4f8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d4fa:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800d4fc:	6880      	ldr	r0, [r0, #8]
 800d4fe:	9105      	str	r1, [sp, #20]
 800d500:	4798      	blx	r3
 800d502:	9905      	ldr	r1, [sp, #20]
 800d504:	e6de      	b.n	800d2c4 <_rclc_execute.part.0+0x38>
 800d506:	2001      	movs	r0, #1
 800d508:	e716      	b.n	800d338 <_rclc_execute.part.0+0xac>
 800d50a:	bf00      	nop

0800d50c <rclc_executor_trigger_any>:
 800d50c:	2800      	cmp	r0, #0
 800d50e:	d03f      	beq.n	800d590 <rclc_executor_trigger_any+0x84>
 800d510:	2900      	cmp	r1, #0
 800d512:	d03e      	beq.n	800d592 <rclc_executor_trigger_any+0x86>
 800d514:	4603      	mov	r3, r0
 800d516:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800d51a:	2200      	movs	r2, #0
 800d51c:	2800      	cmp	r0, #0
 800d51e:	d037      	beq.n	800d590 <rclc_executor_trigger_any+0x84>
 800d520:	b430      	push	{r4, r5}
 800d522:	f893 c000 	ldrb.w	ip, [r3]
 800d526:	f1bc 0f08 	cmp.w	ip, #8
 800d52a:	d11e      	bne.n	800d56a <rclc_executor_trigger_any+0x5e>
 800d52c:	685c      	ldr	r4, [r3, #4]
 800d52e:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800d530:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800d534:	d105      	bne.n	800d542 <rclc_executor_trigger_any+0x36>
 800d536:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800d53a:	b910      	cbnz	r0, 800d542 <rclc_executor_trigger_any+0x36>
 800d53c:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800d540:	b128      	cbz	r0, 800d54e <rclc_executor_trigger_any+0x42>
 800d542:	bc30      	pop	{r4, r5}
 800d544:	4770      	bx	lr
 800d546:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800d54a:	2800      	cmp	r0, #0
 800d54c:	d1f9      	bne.n	800d542 <rclc_executor_trigger_any+0x36>
 800d54e:	3201      	adds	r2, #1
 800d550:	4291      	cmp	r1, r2
 800d552:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800d556:	d018      	beq.n	800d58a <rclc_executor_trigger_any+0x7e>
 800d558:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800d55c:	2800      	cmp	r0, #0
 800d55e:	d0f0      	beq.n	800d542 <rclc_executor_trigger_any+0x36>
 800d560:	f893 c000 	ldrb.w	ip, [r3]
 800d564:	f1bc 0f08 	cmp.w	ip, #8
 800d568:	d0e0      	beq.n	800d52c <rclc_executor_trigger_any+0x20>
 800d56a:	f1bc 0f09 	cmp.w	ip, #9
 800d56e:	d1ea      	bne.n	800d546 <rclc_executor_trigger_any+0x3a>
 800d570:	685c      	ldr	r4, [r3, #4]
 800d572:	6a25      	ldr	r5, [r4, #32]
 800d574:	2d00      	cmp	r5, #0
 800d576:	d1e4      	bne.n	800d542 <rclc_executor_trigger_any+0x36>
 800d578:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800d57c:	2800      	cmp	r0, #0
 800d57e:	d1e0      	bne.n	800d542 <rclc_executor_trigger_any+0x36>
 800d580:	3201      	adds	r2, #1
 800d582:	4291      	cmp	r1, r2
 800d584:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800d588:	d1e6      	bne.n	800d558 <rclc_executor_trigger_any+0x4c>
 800d58a:	2000      	movs	r0, #0
 800d58c:	bc30      	pop	{r4, r5}
 800d58e:	4770      	bx	lr
 800d590:	4770      	bx	lr
 800d592:	4608      	mov	r0, r1
 800d594:	4770      	bx	lr
 800d596:	bf00      	nop

0800d598 <rclc_executor_get_zero_initialized_executor>:
 800d598:	b510      	push	{r4, lr}
 800d59a:	4903      	ldr	r1, [pc, #12]	@ (800d5a8 <rclc_executor_get_zero_initialized_executor+0x10>)
 800d59c:	4604      	mov	r4, r0
 800d59e:	2288      	movs	r2, #136	@ 0x88
 800d5a0:	f00b fb3f 	bl	8018c22 <memcpy>
 800d5a4:	4620      	mov	r0, r4
 800d5a6:	bd10      	pop	{r4, pc}
 800d5a8:	08019c90 	.word	0x08019c90
 800d5ac:	00000000 	.word	0x00000000

0800d5b0 <rclc_executor_init>:
 800d5b0:	2800      	cmp	r0, #0
 800d5b2:	d05f      	beq.n	800d674 <rclc_executor_init+0xc4>
 800d5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b8:	460c      	mov	r4, r1
 800d5ba:	b0b0      	sub	sp, #192	@ 0xc0
 800d5bc:	2900      	cmp	r1, #0
 800d5be:	d051      	beq.n	800d664 <rclc_executor_init+0xb4>
 800d5c0:	4605      	mov	r5, r0
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	4616      	mov	r6, r2
 800d5c6:	461f      	mov	r7, r3
 800d5c8:	f000 fbd0 	bl	800dd6c <rcutils_allocator_is_valid>
 800d5cc:	2800      	cmp	r0, #0
 800d5ce:	d049      	beq.n	800d664 <rclc_executor_init+0xb4>
 800d5d0:	2e00      	cmp	r6, #0
 800d5d2:	d047      	beq.n	800d664 <rclc_executor_init+0xb4>
 800d5d4:	492c      	ldr	r1, [pc, #176]	@ (800d688 <rclc_executor_init+0xd8>)
 800d5d6:	2288      	movs	r2, #136	@ 0x88
 800d5d8:	a80e      	add	r0, sp, #56	@ 0x38
 800d5da:	f00b fb22 	bl	8018c22 <memcpy>
 800d5de:	a90e      	add	r1, sp, #56	@ 0x38
 800d5e0:	2288      	movs	r2, #136	@ 0x88
 800d5e2:	4628      	mov	r0, r5
 800d5e4:	f00b fb1d 	bl	8018c22 <memcpy>
 800d5e8:	602c      	str	r4, [r5, #0]
 800d5ea:	4668      	mov	r0, sp
 800d5ec:	60ae      	str	r6, [r5, #8]
 800d5ee:	466c      	mov	r4, sp
 800d5f0:	f007 fe4c 	bl	801528c <rcl_get_zero_initialized_wait_set>
 800d5f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d5f6:	f105 0c14 	add.w	ip, r5, #20
 800d5fa:	f8d7 8000 	ldr.w	r8, [r7]
 800d5fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d604:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d60a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d60e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800d680 <rclc_executor_init+0xd0>
 800d612:	6823      	ldr	r3, [r4, #0]
 800d614:	f8cc 3000 	str.w	r3, [ip]
 800d618:	6939      	ldr	r1, [r7, #16]
 800d61a:	612f      	str	r7, [r5, #16]
 800d61c:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800d620:	01b0      	lsls	r0, r6, #6
 800d622:	47c0      	blx	r8
 800d624:	6068      	str	r0, [r5, #4]
 800d626:	b338      	cbz	r0, 800d678 <rclc_executor_init+0xc8>
 800d628:	2400      	movs	r4, #0
 800d62a:	e000      	b.n	800d62e <rclc_executor_init+0x7e>
 800d62c:	6868      	ldr	r0, [r5, #4]
 800d62e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800d632:	4631      	mov	r1, r6
 800d634:	3401      	adds	r4, #1
 800d636:	f000 fa6b 	bl	800db10 <rclc_executor_handle_init>
 800d63a:	42a6      	cmp	r6, r4
 800d63c:	d1f6      	bne.n	800d62c <rclc_executor_init+0x7c>
 800d63e:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800d642:	f000 fa59 	bl	800daf8 <rclc_executor_handle_counters_zero_init>
 800d646:	4a11      	ldr	r2, [pc, #68]	@ (800d68c <rclc_executor_init+0xdc>)
 800d648:	686b      	ldr	r3, [r5, #4]
 800d64a:	2000      	movs	r0, #0
 800d64c:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800d650:	b163      	cbz	r3, 800d66c <rclc_executor_init+0xbc>
 800d652:	692b      	ldr	r3, [r5, #16]
 800d654:	b153      	cbz	r3, 800d66c <rclc_executor_init+0xbc>
 800d656:	68ab      	ldr	r3, [r5, #8]
 800d658:	b143      	cbz	r3, 800d66c <rclc_executor_init+0xbc>
 800d65a:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800d65e:	b030      	add	sp, #192	@ 0xc0
 800d660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d664:	200b      	movs	r0, #11
 800d666:	b030      	add	sp, #192	@ 0xc0
 800d668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d66c:	4618      	mov	r0, r3
 800d66e:	b030      	add	sp, #192	@ 0xc0
 800d670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d674:	200b      	movs	r0, #11
 800d676:	4770      	bx	lr
 800d678:	200a      	movs	r0, #10
 800d67a:	e7f4      	b.n	800d666 <rclc_executor_init+0xb6>
 800d67c:	f3af 8000 	nop.w
 800d680:	3b9aca00 	.word	0x3b9aca00
 800d684:	00000000 	.word	0x00000000
 800d688:	08019c90 	.word	0x08019c90
 800d68c:	0800d50d 	.word	0x0800d50d

0800d690 <rclc_executor_add_timer>:
 800d690:	b300      	cbz	r0, 800d6d4 <rclc_executor_add_timer+0x44>
 800d692:	b1f9      	cbz	r1, 800d6d4 <rclc_executor_add_timer+0x44>
 800d694:	b538      	push	{r3, r4, r5, lr}
 800d696:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800d69a:	4293      	cmp	r3, r2
 800d69c:	4604      	mov	r4, r0
 800d69e:	d301      	bcc.n	800d6a4 <rclc_executor_add_timer+0x14>
 800d6a0:	2001      	movs	r0, #1
 800d6a2:	bd38      	pop	{r3, r4, r5, pc}
 800d6a4:	6840      	ldr	r0, [r0, #4]
 800d6a6:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800d6aa:	019d      	lsls	r5, r3, #6
 800d6ac:	6051      	str	r1, [r2, #4]
 800d6ae:	2102      	movs	r1, #2
 800d6b0:	5341      	strh	r1, [r0, r5]
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	2000      	movs	r0, #0
 800d6b6:	2101      	movs	r1, #1
 800d6b8:	f104 0514 	add.w	r5, r4, #20
 800d6bc:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800d6be:	8711      	strh	r1, [r2, #56]	@ 0x38
 800d6c0:	4628      	mov	r0, r5
 800d6c2:	60e3      	str	r3, [r4, #12]
 800d6c4:	f007 fdf6 	bl	80152b4 <rcl_wait_set_is_valid>
 800d6c8:	b930      	cbnz	r0, 800d6d8 <rclc_executor_add_timer+0x48>
 800d6ca:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	2000      	movs	r0, #0
 800d6d0:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800d6d2:	bd38      	pop	{r3, r4, r5, pc}
 800d6d4:	200b      	movs	r0, #11
 800d6d6:	4770      	bx	lr
 800d6d8:	4628      	mov	r0, r5
 800d6da:	f007 fdf1 	bl	80152c0 <rcl_wait_set_fini>
 800d6de:	2800      	cmp	r0, #0
 800d6e0:	d0f3      	beq.n	800d6ca <rclc_executor_add_timer+0x3a>
 800d6e2:	bd38      	pop	{r3, r4, r5, pc}

0800d6e4 <rclc_executor_prepare>:
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	d044      	beq.n	800d772 <rclc_executor_prepare+0x8e>
 800d6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6ea:	f100 0514 	add.w	r5, r0, #20
 800d6ee:	b09b      	sub	sp, #108	@ 0x6c
 800d6f0:	4604      	mov	r4, r0
 800d6f2:	4628      	mov	r0, r5
 800d6f4:	f007 fdde 	bl	80152b4 <rcl_wait_set_is_valid>
 800d6f8:	b110      	cbz	r0, 800d700 <rclc_executor_prepare+0x1c>
 800d6fa:	2000      	movs	r0, #0
 800d6fc:	b01b      	add	sp, #108	@ 0x6c
 800d6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d700:	4628      	mov	r0, r5
 800d702:	f007 fddd 	bl	80152c0 <rcl_wait_set_fini>
 800d706:	2800      	cmp	r0, #0
 800d708:	d130      	bne.n	800d76c <rclc_executor_prepare+0x88>
 800d70a:	a80c      	add	r0, sp, #48	@ 0x30
 800d70c:	f007 fdbe 	bl	801528c <rcl_get_zero_initialized_wait_set>
 800d710:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800d714:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d718:	46ae      	mov	lr, r5
 800d71a:	6927      	ldr	r7, [r4, #16]
 800d71c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d720:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d724:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d728:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d72c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d730:	f8dc 3000 	ldr.w	r3, [ip]
 800d734:	f8ce 3000 	str.w	r3, [lr]
 800d738:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d73a:	ae04      	add	r6, sp, #16
 800d73c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	6822      	ldr	r2, [r4, #0]
 800d742:	6033      	str	r3, [r6, #0]
 800d744:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d746:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800d748:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800d74c:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800d750:	e9cd 2100 	strd	r2, r1, [sp]
 800d754:	4628      	mov	r0, r5
 800d756:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800d758:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d75a:	f008 f8af 	bl	80158bc <rcl_wait_set_init>
 800d75e:	2800      	cmp	r0, #0
 800d760:	d0cc      	beq.n	800d6fc <rclc_executor_prepare+0x18>
 800d762:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d764:	f000 fbe4 	bl	800df30 <rcutils_reset_error>
 800d768:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d76a:	e7c7      	b.n	800d6fc <rclc_executor_prepare+0x18>
 800d76c:	f000 fbe0 	bl	800df30 <rcutils_reset_error>
 800d770:	e7cb      	b.n	800d70a <rclc_executor_prepare+0x26>
 800d772:	200b      	movs	r0, #11
 800d774:	4770      	bx	lr
 800d776:	bf00      	nop

0800d778 <rclc_executor_spin_some.part.0>:
 800d778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d77c:	f100 0614 	add.w	r6, r0, #20
 800d780:	b083      	sub	sp, #12
 800d782:	4691      	mov	r9, r2
 800d784:	4698      	mov	r8, r3
 800d786:	4605      	mov	r5, r0
 800d788:	f7ff ffac 	bl	800d6e4 <rclc_executor_prepare>
 800d78c:	4630      	mov	r0, r6
 800d78e:	f007 fe63 	bl	8015458 <rcl_wait_set_clear>
 800d792:	4607      	mov	r7, r0
 800d794:	2800      	cmp	r0, #0
 800d796:	f040 80ed 	bne.w	800d974 <rclc_executor_spin_some.part.0+0x1fc>
 800d79a:	68ab      	ldr	r3, [r5, #8]
 800d79c:	4604      	mov	r4, r0
 800d79e:	b303      	cbz	r3, 800d7e2 <rclc_executor_spin_some.part.0+0x6a>
 800d7a0:	6869      	ldr	r1, [r5, #4]
 800d7a2:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800d7a6:	01a2      	lsls	r2, r4, #6
 800d7a8:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800d7ac:	b1cb      	cbz	r3, 800d7e2 <rclc_executor_spin_some.part.0+0x6a>
 800d7ae:	5c8b      	ldrb	r3, [r1, r2]
 800d7b0:	2b0a      	cmp	r3, #10
 800d7b2:	f200 80d8 	bhi.w	800d966 <rclc_executor_spin_some.part.0+0x1ee>
 800d7b6:	e8df f003 	tbb	[pc, r3]
 800d7ba:	9c9c      	.short	0x9c9c
 800d7bc:	068c8ca7 	.word	0x068c8ca7
 800d7c0:	bdc90606 	.word	0xbdc90606
 800d7c4:	b2          	.byte	0xb2
 800d7c5:	00          	.byte	0x00
 800d7c6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d7ca:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d7ce:	4630      	mov	r0, r6
 800d7d0:	f008 f98a 	bl	8015ae8 <rcl_wait_set_add_service>
 800d7d4:	2800      	cmp	r0, #0
 800d7d6:	f040 8086 	bne.w	800d8e6 <rclc_executor_spin_some.part.0+0x16e>
 800d7da:	68ab      	ldr	r3, [r5, #8]
 800d7dc:	3401      	adds	r4, #1
 800d7de:	429c      	cmp	r4, r3
 800d7e0:	d3de      	bcc.n	800d7a0 <rclc_executor_spin_some.part.0+0x28>
 800d7e2:	4643      	mov	r3, r8
 800d7e4:	464a      	mov	r2, r9
 800d7e6:	4630      	mov	r0, r6
 800d7e8:	f008 f9aa 	bl	8015b40 <rcl_wait>
 800d7ec:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	f000 80c7 	beq.w	800d984 <rclc_executor_spin_some.part.0+0x20c>
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	f040 80b5 	bne.w	800d966 <rclc_executor_spin_some.part.0+0x1ee>
 800d7fc:	68ab      	ldr	r3, [r5, #8]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	f000 8159 	beq.w	800dab6 <rclc_executor_spin_some.part.0+0x33e>
 800d804:	2400      	movs	r4, #0
 800d806:	46a0      	mov	r8, r4
 800d808:	f240 1991 	movw	r9, #401	@ 0x191
 800d80c:	e00a      	b.n	800d824 <rclc_executor_spin_some.part.0+0xac>
 800d80e:	f7ff fb7b 	bl	800cf08 <_rclc_check_for_new_data>
 800d812:	4604      	mov	r4, r0
 800d814:	b110      	cbz	r0, 800d81c <rclc_executor_spin_some.part.0+0xa4>
 800d816:	4548      	cmp	r0, r9
 800d818:	f040 80b2 	bne.w	800d980 <rclc_executor_spin_some.part.0+0x208>
 800d81c:	68ab      	ldr	r3, [r5, #8]
 800d81e:	4598      	cmp	r8, r3
 800d820:	f080 8126 	bcs.w	800da70 <rclc_executor_spin_some.part.0+0x2f8>
 800d824:	686a      	ldr	r2, [r5, #4]
 800d826:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d82a:	4631      	mov	r1, r6
 800d82c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800d830:	f108 0801 	add.w	r8, r8, #1
 800d834:	f1bc 0f00 	cmp.w	ip, #0
 800d838:	d1e9      	bne.n	800d80e <rclc_executor_spin_some.part.0+0x96>
 800d83a:	4619      	mov	r1, r3
 800d83c:	4610      	mov	r0, r2
 800d83e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800d842:	4798      	blx	r3
 800d844:	2800      	cmp	r0, #0
 800d846:	f000 809b 	beq.w	800d980 <rclc_executor_spin_some.part.0+0x208>
 800d84a:	68ab      	ldr	r3, [r5, #8]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	f000 8097 	beq.w	800d980 <rclc_executor_spin_some.part.0+0x208>
 800d852:	f04f 0800 	mov.w	r8, #0
 800d856:	f240 1991 	movw	r9, #401	@ 0x191
 800d85a:	e009      	b.n	800d870 <rclc_executor_spin_some.part.0+0xf8>
 800d85c:	f7ff fba2 	bl	800cfa4 <_rclc_take_new_data>
 800d860:	4604      	mov	r4, r0
 800d862:	b110      	cbz	r0, 800d86a <rclc_executor_spin_some.part.0+0xf2>
 800d864:	4548      	cmp	r0, r9
 800d866:	f040 808b 	bne.w	800d980 <rclc_executor_spin_some.part.0+0x208>
 800d86a:	68ab      	ldr	r3, [r5, #8]
 800d86c:	4598      	cmp	r8, r3
 800d86e:	d209      	bcs.n	800d884 <rclc_executor_spin_some.part.0+0x10c>
 800d870:	6868      	ldr	r0, [r5, #4]
 800d872:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800d876:	4631      	mov	r1, r6
 800d878:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800d87c:	f108 0801 	add.w	r8, r8, #1
 800d880:	2a00      	cmp	r2, #0
 800d882:	d1eb      	bne.n	800d85c <rclc_executor_spin_some.part.0+0xe4>
 800d884:	2600      	movs	r6, #0
 800d886:	b97b      	cbnz	r3, 800d8a8 <rclc_executor_spin_some.part.0+0x130>
 800d888:	e07a      	b.n	800d980 <rclc_executor_spin_some.part.0+0x208>
 800d88a:	f812 200c 	ldrb.w	r2, [r2, ip]
 800d88e:	2a08      	cmp	r2, #8
 800d890:	f000 80fd 	beq.w	800da8e <rclc_executor_spin_some.part.0+0x316>
 800d894:	2a09      	cmp	r2, #9
 800d896:	f000 80ef 	beq.w	800da78 <rclc_executor_spin_some.part.0+0x300>
 800d89a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800d89e:	b98a      	cbnz	r2, 800d8c4 <rclc_executor_spin_some.part.0+0x14c>
 800d8a0:	3601      	adds	r6, #1
 800d8a2:	429e      	cmp	r6, r3
 800d8a4:	d262      	bcs.n	800d96c <rclc_executor_spin_some.part.0+0x1f4>
 800d8a6:	2400      	movs	r4, #0
 800d8a8:	686a      	ldr	r2, [r5, #4]
 800d8aa:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d8ae:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800d8b2:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800d8b6:	2900      	cmp	r1, #0
 800d8b8:	d062      	beq.n	800d980 <rclc_executor_spin_some.part.0+0x208>
 800d8ba:	7841      	ldrb	r1, [r0, #1]
 800d8bc:	2900      	cmp	r1, #0
 800d8be:	d0e4      	beq.n	800d88a <rclc_executor_spin_some.part.0+0x112>
 800d8c0:	2901      	cmp	r1, #1
 800d8c2:	d1ed      	bne.n	800d8a0 <rclc_executor_spin_some.part.0+0x128>
 800d8c4:	f7ff fce2 	bl	800d28c <_rclc_execute.part.0>
 800d8c8:	2800      	cmp	r0, #0
 800d8ca:	f040 80b6 	bne.w	800da3a <rclc_executor_spin_some.part.0+0x2c2>
 800d8ce:	68ab      	ldr	r3, [r5, #8]
 800d8d0:	e7e6      	b.n	800d8a0 <rclc_executor_spin_some.part.0+0x128>
 800d8d2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d8d6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d8da:	4630      	mov	r0, r6
 800d8dc:	f008 f8d8 	bl	8015a90 <rcl_wait_set_add_client>
 800d8e0:	2800      	cmp	r0, #0
 800d8e2:	f43f af7a 	beq.w	800d7da <rclc_executor_spin_some.part.0+0x62>
 800d8e6:	9001      	str	r0, [sp, #4]
 800d8e8:	f000 fb22 	bl	800df30 <rcutils_reset_error>
 800d8ec:	9801      	ldr	r0, [sp, #4]
 800d8ee:	4607      	mov	r7, r0
 800d8f0:	e03c      	b.n	800d96c <rclc_executor_spin_some.part.0+0x1f4>
 800d8f2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d8f6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d8fa:	4630      	mov	r0, r6
 800d8fc:	f007 fd80 	bl	8015400 <rcl_wait_set_add_subscription>
 800d900:	2800      	cmp	r0, #0
 800d902:	f43f af6a 	beq.w	800d7da <rclc_executor_spin_some.part.0+0x62>
 800d906:	e7ee      	b.n	800d8e6 <rclc_executor_spin_some.part.0+0x16e>
 800d908:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d90c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d910:	4630      	mov	r0, r6
 800d912:	f008 f88d 	bl	8015a30 <rcl_wait_set_add_timer>
 800d916:	2800      	cmp	r0, #0
 800d918:	f43f af5f 	beq.w	800d7da <rclc_executor_spin_some.part.0+0x62>
 800d91c:	e7e3      	b.n	800d8e6 <rclc_executor_spin_some.part.0+0x16e>
 800d91e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d922:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d926:	4630      	mov	r0, r6
 800d928:	f008 f856 	bl	80159d8 <rcl_wait_set_add_guard_condition>
 800d92c:	2800      	cmp	r0, #0
 800d92e:	f43f af54 	beq.w	800d7da <rclc_executor_spin_some.part.0+0x62>
 800d932:	e7d8      	b.n	800d8e6 <rclc_executor_spin_some.part.0+0x16e>
 800d934:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d938:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d93c:	3110      	adds	r1, #16
 800d93e:	4630      	mov	r0, r6
 800d940:	f008 fdd6 	bl	80164f0 <rcl_action_wait_set_add_action_server>
 800d944:	2800      	cmp	r0, #0
 800d946:	f43f af48 	beq.w	800d7da <rclc_executor_spin_some.part.0+0x62>
 800d94a:	e7cc      	b.n	800d8e6 <rclc_executor_spin_some.part.0+0x16e>
 800d94c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d950:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d954:	3110      	adds	r1, #16
 800d956:	2300      	movs	r3, #0
 800d958:	4630      	mov	r0, r6
 800d95a:	f008 fba1 	bl	80160a0 <rcl_action_wait_set_add_action_client>
 800d95e:	2800      	cmp	r0, #0
 800d960:	f43f af3b 	beq.w	800d7da <rclc_executor_spin_some.part.0+0x62>
 800d964:	e7bf      	b.n	800d8e6 <rclc_executor_spin_some.part.0+0x16e>
 800d966:	f000 fae3 	bl	800df30 <rcutils_reset_error>
 800d96a:	2701      	movs	r7, #1
 800d96c:	4638      	mov	r0, r7
 800d96e:	b003      	add	sp, #12
 800d970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d974:	f000 fadc 	bl	800df30 <rcutils_reset_error>
 800d978:	4638      	mov	r0, r7
 800d97a:	b003      	add	sp, #12
 800d97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d980:	4627      	mov	r7, r4
 800d982:	e7f3      	b.n	800d96c <rclc_executor_spin_some.part.0+0x1f4>
 800d984:	68ab      	ldr	r3, [r5, #8]
 800d986:	2b00      	cmp	r3, #0
 800d988:	f000 8092 	beq.w	800dab0 <rclc_executor_spin_some.part.0+0x338>
 800d98c:	2400      	movs	r4, #0
 800d98e:	46a0      	mov	r8, r4
 800d990:	f240 1991 	movw	r9, #401	@ 0x191
 800d994:	e008      	b.n	800d9a8 <rclc_executor_spin_some.part.0+0x230>
 800d996:	f7ff fab7 	bl	800cf08 <_rclc_check_for_new_data>
 800d99a:	4604      	mov	r4, r0
 800d99c:	b108      	cbz	r0, 800d9a2 <rclc_executor_spin_some.part.0+0x22a>
 800d99e:	4548      	cmp	r0, r9
 800d9a0:	d1ee      	bne.n	800d980 <rclc_executor_spin_some.part.0+0x208>
 800d9a2:	68ab      	ldr	r3, [r5, #8]
 800d9a4:	4598      	cmp	r8, r3
 800d9a6:	d265      	bcs.n	800da74 <rclc_executor_spin_some.part.0+0x2fc>
 800d9a8:	686a      	ldr	r2, [r5, #4]
 800d9aa:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d9ae:	4631      	mov	r1, r6
 800d9b0:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800d9b4:	f108 0801 	add.w	r8, r8, #1
 800d9b8:	f1bc 0f00 	cmp.w	ip, #0
 800d9bc:	d1eb      	bne.n	800d996 <rclc_executor_spin_some.part.0+0x21e>
 800d9be:	4619      	mov	r1, r3
 800d9c0:	4610      	mov	r0, r2
 800d9c2:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800d9c6:	4798      	blx	r3
 800d9c8:	2800      	cmp	r0, #0
 800d9ca:	d0d9      	beq.n	800d980 <rclc_executor_spin_some.part.0+0x208>
 800d9cc:	68ab      	ldr	r3, [r5, #8]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d0d6      	beq.n	800d980 <rclc_executor_spin_some.part.0+0x208>
 800d9d2:	f04f 0800 	mov.w	r8, #0
 800d9d6:	f240 1991 	movw	r9, #401	@ 0x191
 800d9da:	f240 2a59 	movw	sl, #601	@ 0x259
 800d9de:	e00e      	b.n	800d9fe <rclc_executor_spin_some.part.0+0x286>
 800d9e0:	f813 300b 	ldrb.w	r3, [r3, fp]
 800d9e4:	2b08      	cmp	r3, #8
 800d9e6:	d033      	beq.n	800da50 <rclc_executor_spin_some.part.0+0x2d8>
 800d9e8:	2b09      	cmp	r3, #9
 800d9ea:	d028      	beq.n	800da3e <rclc_executor_spin_some.part.0+0x2c6>
 800d9ec:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800d9f0:	b9fb      	cbnz	r3, 800da32 <rclc_executor_spin_some.part.0+0x2ba>
 800d9f2:	68ab      	ldr	r3, [r5, #8]
 800d9f4:	f108 0801 	add.w	r8, r8, #1
 800d9f8:	4598      	cmp	r8, r3
 800d9fa:	d2b7      	bcs.n	800d96c <rclc_executor_spin_some.part.0+0x1f4>
 800d9fc:	2400      	movs	r4, #0
 800d9fe:	6868      	ldr	r0, [r5, #4]
 800da00:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800da04:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800da08:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d0b7      	beq.n	800d980 <rclc_executor_spin_some.part.0+0x208>
 800da10:	4631      	mov	r1, r6
 800da12:	f7ff fac7 	bl	800cfa4 <_rclc_take_new_data>
 800da16:	b118      	cbz	r0, 800da20 <rclc_executor_spin_some.part.0+0x2a8>
 800da18:	4548      	cmp	r0, r9
 800da1a:	d001      	beq.n	800da20 <rclc_executor_spin_some.part.0+0x2a8>
 800da1c:	4550      	cmp	r0, sl
 800da1e:	d10c      	bne.n	800da3a <rclc_executor_spin_some.part.0+0x2c2>
 800da20:	686b      	ldr	r3, [r5, #4]
 800da22:	eb13 000b 	adds.w	r0, r3, fp
 800da26:	d021      	beq.n	800da6c <rclc_executor_spin_some.part.0+0x2f4>
 800da28:	7842      	ldrb	r2, [r0, #1]
 800da2a:	2a00      	cmp	r2, #0
 800da2c:	d0d8      	beq.n	800d9e0 <rclc_executor_spin_some.part.0+0x268>
 800da2e:	2a01      	cmp	r2, #1
 800da30:	d1df      	bne.n	800d9f2 <rclc_executor_spin_some.part.0+0x27a>
 800da32:	f7ff fc2b 	bl	800d28c <_rclc_execute.part.0>
 800da36:	2800      	cmp	r0, #0
 800da38:	d0db      	beq.n	800d9f2 <rclc_executor_spin_some.part.0+0x27a>
 800da3a:	4607      	mov	r7, r0
 800da3c:	e796      	b.n	800d96c <rclc_executor_spin_some.part.0+0x1f4>
 800da3e:	6843      	ldr	r3, [r0, #4]
 800da40:	6a1a      	ldr	r2, [r3, #32]
 800da42:	2a00      	cmp	r2, #0
 800da44:	d1f5      	bne.n	800da32 <rclc_executor_spin_some.part.0+0x2ba>
 800da46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d0d1      	beq.n	800d9f2 <rclc_executor_spin_some.part.0+0x27a>
 800da4e:	e7f0      	b.n	800da32 <rclc_executor_spin_some.part.0+0x2ba>
 800da50:	6843      	ldr	r3, [r0, #4]
 800da52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800da54:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800da58:	d1eb      	bne.n	800da32 <rclc_executor_spin_some.part.0+0x2ba>
 800da5a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800da5e:	2a00      	cmp	r2, #0
 800da60:	d1e7      	bne.n	800da32 <rclc_executor_spin_some.part.0+0x2ba>
 800da62:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800da66:	2b00      	cmp	r3, #0
 800da68:	d0c3      	beq.n	800d9f2 <rclc_executor_spin_some.part.0+0x27a>
 800da6a:	e7e2      	b.n	800da32 <rclc_executor_spin_some.part.0+0x2ba>
 800da6c:	270b      	movs	r7, #11
 800da6e:	e77d      	b.n	800d96c <rclc_executor_spin_some.part.0+0x1f4>
 800da70:	686a      	ldr	r2, [r5, #4]
 800da72:	e6e2      	b.n	800d83a <rclc_executor_spin_some.part.0+0xc2>
 800da74:	686a      	ldr	r2, [r5, #4]
 800da76:	e7a2      	b.n	800d9be <rclc_executor_spin_some.part.0+0x246>
 800da78:	6842      	ldr	r2, [r0, #4]
 800da7a:	6a11      	ldr	r1, [r2, #32]
 800da7c:	2900      	cmp	r1, #0
 800da7e:	f47f af21 	bne.w	800d8c4 <rclc_executor_spin_some.part.0+0x14c>
 800da82:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800da86:	2a00      	cmp	r2, #0
 800da88:	f43f af0a 	beq.w	800d8a0 <rclc_executor_spin_some.part.0+0x128>
 800da8c:	e71a      	b.n	800d8c4 <rclc_executor_spin_some.part.0+0x14c>
 800da8e:	6842      	ldr	r2, [r0, #4]
 800da90:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800da92:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800da96:	f47f af15 	bne.w	800d8c4 <rclc_executor_spin_some.part.0+0x14c>
 800da9a:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800da9e:	2900      	cmp	r1, #0
 800daa0:	f47f af10 	bne.w	800d8c4 <rclc_executor_spin_some.part.0+0x14c>
 800daa4:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800daa8:	2a00      	cmp	r2, #0
 800daaa:	f43f aef9 	beq.w	800d8a0 <rclc_executor_spin_some.part.0+0x128>
 800daae:	e709      	b.n	800d8c4 <rclc_executor_spin_some.part.0+0x14c>
 800dab0:	686a      	ldr	r2, [r5, #4]
 800dab2:	461c      	mov	r4, r3
 800dab4:	e783      	b.n	800d9be <rclc_executor_spin_some.part.0+0x246>
 800dab6:	686a      	ldr	r2, [r5, #4]
 800dab8:	461c      	mov	r4, r3
 800daba:	e6be      	b.n	800d83a <rclc_executor_spin_some.part.0+0xc2>

0800dabc <rclc_executor_spin>:
 800dabc:	b1d0      	cbz	r0, 800daf4 <rclc_executor_spin+0x38>
 800dabe:	b510      	push	{r4, lr}
 800dac0:	4604      	mov	r4, r0
 800dac2:	b082      	sub	sp, #8
 800dac4:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800dac8:	6820      	ldr	r0, [r4, #0]
 800daca:	e9cd 2300 	strd	r2, r3, [sp]
 800dace:	f006 f927 	bl	8013d20 <rcl_context_is_valid>
 800dad2:	4601      	mov	r1, r0
 800dad4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dad8:	4620      	mov	r0, r4
 800dada:	b131      	cbz	r1, 800daea <rclc_executor_spin+0x2e>
 800dadc:	f7ff fe4c 	bl	800d778 <rclc_executor_spin_some.part.0>
 800dae0:	f030 0302 	bics.w	r3, r0, #2
 800dae4:	d0ee      	beq.n	800dac4 <rclc_executor_spin+0x8>
 800dae6:	b002      	add	sp, #8
 800dae8:	bd10      	pop	{r4, pc}
 800daea:	f000 fa21 	bl	800df30 <rcutils_reset_error>
 800daee:	2001      	movs	r0, #1
 800daf0:	b002      	add	sp, #8
 800daf2:	bd10      	pop	{r4, pc}
 800daf4:	200b      	movs	r0, #11
 800daf6:	4770      	bx	lr

0800daf8 <rclc_executor_handle_counters_zero_init>:
 800daf8:	b130      	cbz	r0, 800db08 <rclc_executor_handle_counters_zero_init+0x10>
 800dafa:	b508      	push	{r3, lr}
 800dafc:	2220      	movs	r2, #32
 800dafe:	2100      	movs	r1, #0
 800db00:	f00a ffc6 	bl	8018a90 <memset>
 800db04:	2000      	movs	r0, #0
 800db06:	bd08      	pop	{r3, pc}
 800db08:	200b      	movs	r0, #11
 800db0a:	4770      	bx	lr
 800db0c:	0000      	movs	r0, r0
	...

0800db10 <rclc_executor_handle_init>:
 800db10:	b168      	cbz	r0, 800db2e <rclc_executor_handle_init+0x1e>
 800db12:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800db38 <rclc_executor_handle_init+0x28>
 800db16:	2300      	movs	r3, #0
 800db18:	220b      	movs	r2, #11
 800db1a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800db1e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800db22:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800db26:	8002      	strh	r2, [r0, #0]
 800db28:	8703      	strh	r3, [r0, #56]	@ 0x38
 800db2a:	4618      	mov	r0, r3
 800db2c:	4770      	bx	lr
 800db2e:	200b      	movs	r0, #11
 800db30:	4770      	bx	lr
 800db32:	bf00      	nop
 800db34:	f3af 8000 	nop.w
	...

0800db40 <rclc_support_init_with_options>:
 800db40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db44:	b083      	sub	sp, #12
 800db46:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800db48:	b340      	cbz	r0, 800db9c <rclc_support_init_with_options+0x5c>
 800db4a:	461d      	mov	r5, r3
 800db4c:	b333      	cbz	r3, 800db9c <rclc_support_init_with_options+0x5c>
 800db4e:	b32e      	cbz	r6, 800db9c <rclc_support_init_with_options+0x5c>
 800db50:	46e9      	mov	r9, sp
 800db52:	4604      	mov	r4, r0
 800db54:	4648      	mov	r0, r9
 800db56:	460f      	mov	r7, r1
 800db58:	4690      	mov	r8, r2
 800db5a:	f006 f8d7 	bl	8013d0c <rcl_get_zero_initialized_context>
 800db5e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800db62:	462a      	mov	r2, r5
 800db64:	e884 0003 	stmia.w	r4, {r0, r1}
 800db68:	4623      	mov	r3, r4
 800db6a:	4641      	mov	r1, r8
 800db6c:	4638      	mov	r0, r7
 800db6e:	f006 fbaf 	bl	80142d0 <rcl_init>
 800db72:	4605      	mov	r5, r0
 800db74:	b960      	cbnz	r0, 800db90 <rclc_support_init_with_options+0x50>
 800db76:	60a6      	str	r6, [r4, #8]
 800db78:	4632      	mov	r2, r6
 800db7a:	f104 010c 	add.w	r1, r4, #12
 800db7e:	2003      	movs	r0, #3
 800db80:	f006 feb0 	bl	80148e4 <rcl_clock_init>
 800db84:	4605      	mov	r5, r0
 800db86:	b918      	cbnz	r0, 800db90 <rclc_support_init_with_options+0x50>
 800db88:	4628      	mov	r0, r5
 800db8a:	b003      	add	sp, #12
 800db8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db90:	f000 f9ce 	bl	800df30 <rcutils_reset_error>
 800db94:	4628      	mov	r0, r5
 800db96:	b003      	add	sp, #12
 800db98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db9c:	250b      	movs	r5, #11
 800db9e:	4628      	mov	r0, r5
 800dba0:	b003      	add	sp, #12
 800dba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dba6:	bf00      	nop

0800dba8 <rclc_node_init_default>:
 800dba8:	b3b8      	cbz	r0, 800dc1a <rclc_node_init_default+0x72>
 800dbaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dbae:	460d      	mov	r5, r1
 800dbb0:	b0a1      	sub	sp, #132	@ 0x84
 800dbb2:	b329      	cbz	r1, 800dc00 <rclc_node_init_default+0x58>
 800dbb4:	4616      	mov	r6, r2
 800dbb6:	b31a      	cbz	r2, 800dc00 <rclc_node_init_default+0x58>
 800dbb8:	461f      	mov	r7, r3
 800dbba:	b30b      	cbz	r3, 800dc00 <rclc_node_init_default+0x58>
 800dbbc:	f10d 0810 	add.w	r8, sp, #16
 800dbc0:	4604      	mov	r4, r0
 800dbc2:	4640      	mov	r0, r8
 800dbc4:	f7fe fe10 	bl	800c7e8 <rcl_get_zero_initialized_node>
 800dbc8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800dbcc:	f10d 0918 	add.w	r9, sp, #24
 800dbd0:	e884 0003 	stmia.w	r4, {r0, r1}
 800dbd4:	4648      	mov	r0, r9
 800dbd6:	f7fe ff7f 	bl	800cad8 <rcl_node_get_default_options>
 800dbda:	4640      	mov	r0, r8
 800dbdc:	f7fe fe04 	bl	800c7e8 <rcl_get_zero_initialized_node>
 800dbe0:	f8cd 9000 	str.w	r9, [sp]
 800dbe4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800dbe8:	463b      	mov	r3, r7
 800dbea:	e884 0003 	stmia.w	r4, {r0, r1}
 800dbee:	4632      	mov	r2, r6
 800dbf0:	4629      	mov	r1, r5
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	f7fe fe02 	bl	800c7fc <rcl_node_init>
 800dbf8:	b930      	cbnz	r0, 800dc08 <rclc_node_init_default+0x60>
 800dbfa:	b021      	add	sp, #132	@ 0x84
 800dbfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc00:	200b      	movs	r0, #11
 800dc02:	b021      	add	sp, #132	@ 0x84
 800dc04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc08:	9003      	str	r0, [sp, #12]
 800dc0a:	f000 f991 	bl	800df30 <rcutils_reset_error>
 800dc0e:	f000 f98f 	bl	800df30 <rcutils_reset_error>
 800dc12:	9803      	ldr	r0, [sp, #12]
 800dc14:	b021      	add	sp, #132	@ 0x84
 800dc16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc1a:	200b      	movs	r0, #11
 800dc1c:	4770      	bx	lr
 800dc1e:	bf00      	nop

0800dc20 <rclc_publisher_init_default>:
 800dc20:	b368      	cbz	r0, 800dc7e <rclc_publisher_init_default+0x5e>
 800dc22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc26:	460d      	mov	r5, r1
 800dc28:	b0a0      	sub	sp, #128	@ 0x80
 800dc2a:	b321      	cbz	r1, 800dc76 <rclc_publisher_init_default+0x56>
 800dc2c:	4616      	mov	r6, r2
 800dc2e:	b312      	cbz	r2, 800dc76 <rclc_publisher_init_default+0x56>
 800dc30:	461f      	mov	r7, r3
 800dc32:	b303      	cbz	r3, 800dc76 <rclc_publisher_init_default+0x56>
 800dc34:	4604      	mov	r4, r0
 800dc36:	f7ff f823 	bl	800cc80 <rcl_get_zero_initialized_publisher>
 800dc3a:	f10d 0810 	add.w	r8, sp, #16
 800dc3e:	6020      	str	r0, [r4, #0]
 800dc40:	4640      	mov	r0, r8
 800dc42:	f7ff f8b9 	bl	800cdb8 <rcl_publisher_get_default_options>
 800dc46:	490f      	ldr	r1, [pc, #60]	@ (800dc84 <rclc_publisher_init_default+0x64>)
 800dc48:	2250      	movs	r2, #80	@ 0x50
 800dc4a:	4640      	mov	r0, r8
 800dc4c:	f00a ffe9 	bl	8018c22 <memcpy>
 800dc50:	f8cd 8000 	str.w	r8, [sp]
 800dc54:	463b      	mov	r3, r7
 800dc56:	4632      	mov	r2, r6
 800dc58:	4629      	mov	r1, r5
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	f7ff f816 	bl	800cc8c <rcl_publisher_init>
 800dc60:	b910      	cbnz	r0, 800dc68 <rclc_publisher_init_default+0x48>
 800dc62:	b020      	add	sp, #128	@ 0x80
 800dc64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc68:	9003      	str	r0, [sp, #12]
 800dc6a:	f000 f961 	bl	800df30 <rcutils_reset_error>
 800dc6e:	9803      	ldr	r0, [sp, #12]
 800dc70:	b020      	add	sp, #128	@ 0x80
 800dc72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc76:	200b      	movs	r0, #11
 800dc78:	b020      	add	sp, #128	@ 0x80
 800dc7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc7e:	200b      	movs	r0, #11
 800dc80:	4770      	bx	lr
 800dc82:	bf00      	nop
 800dc84:	08019d18 	.word	0x08019d18

0800dc88 <rclc_timer_init_default>:
 800dc88:	b360      	cbz	r0, 800dce4 <rclc_timer_init_default+0x5c>
 800dc8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc8e:	460e      	mov	r6, r1
 800dc90:	b08a      	sub	sp, #40	@ 0x28
 800dc92:	b319      	cbz	r1, 800dcdc <rclc_timer_init_default+0x54>
 800dc94:	4690      	mov	r8, r2
 800dc96:	461f      	mov	r7, r3
 800dc98:	4605      	mov	r5, r0
 800dc9a:	f007 f801 	bl	8014ca0 <rcl_get_zero_initialized_timer>
 800dc9e:	68b4      	ldr	r4, [r6, #8]
 800dca0:	6028      	str	r0, [r5, #0]
 800dca2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dca4:	f10d 0c0c 	add.w	ip, sp, #12
 800dca8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dcac:	6823      	ldr	r3, [r4, #0]
 800dcae:	f8cc 3000 	str.w	r3, [ip]
 800dcb2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dcb4:	9302      	str	r3, [sp, #8]
 800dcb6:	e9cd 8700 	strd	r8, r7, [sp]
 800dcba:	4628      	mov	r0, r5
 800dcbc:	4632      	mov	r2, r6
 800dcbe:	f106 010c 	add.w	r1, r6, #12
 800dcc2:	f006 fff5 	bl	8014cb0 <rcl_timer_init>
 800dcc6:	b910      	cbnz	r0, 800dcce <rclc_timer_init_default+0x46>
 800dcc8:	b00a      	add	sp, #40	@ 0x28
 800dcca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcce:	9009      	str	r0, [sp, #36]	@ 0x24
 800dcd0:	f000 f92e 	bl	800df30 <rcutils_reset_error>
 800dcd4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dcd6:	b00a      	add	sp, #40	@ 0x28
 800dcd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcdc:	200b      	movs	r0, #11
 800dcde:	b00a      	add	sp, #40	@ 0x28
 800dce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dce4:	200b      	movs	r0, #11
 800dce6:	4770      	bx	lr

0800dce8 <__default_zero_allocate>:
 800dce8:	f00a b9e8 	b.w	80180bc <calloc>

0800dcec <__default_reallocate>:
 800dcec:	f00a bb86 	b.w	80183fc <realloc>

0800dcf0 <__default_deallocate>:
 800dcf0:	f00a ba62 	b.w	80181b8 <free>

0800dcf4 <__default_allocate>:
 800dcf4:	f00a ba58 	b.w	80181a8 <malloc>

0800dcf8 <rcutils_get_zero_initialized_allocator>:
 800dcf8:	b510      	push	{r4, lr}
 800dcfa:	4c05      	ldr	r4, [pc, #20]	@ (800dd10 <rcutils_get_zero_initialized_allocator+0x18>)
 800dcfc:	4686      	mov	lr, r0
 800dcfe:	4684      	mov	ip, r0
 800dd00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dd06:	6823      	ldr	r3, [r4, #0]
 800dd08:	f8cc 3000 	str.w	r3, [ip]
 800dd0c:	4670      	mov	r0, lr
 800dd0e:	bd10      	pop	{r4, pc}
 800dd10:	08019d68 	.word	0x08019d68

0800dd14 <rcutils_set_default_allocator>:
 800dd14:	b1a8      	cbz	r0, 800dd42 <rcutils_set_default_allocator+0x2e>
 800dd16:	6802      	ldr	r2, [r0, #0]
 800dd18:	b1a2      	cbz	r2, 800dd44 <rcutils_set_default_allocator+0x30>
 800dd1a:	6841      	ldr	r1, [r0, #4]
 800dd1c:	b1a1      	cbz	r1, 800dd48 <rcutils_set_default_allocator+0x34>
 800dd1e:	b410      	push	{r4}
 800dd20:	68c4      	ldr	r4, [r0, #12]
 800dd22:	b164      	cbz	r4, 800dd3e <rcutils_set_default_allocator+0x2a>
 800dd24:	6880      	ldr	r0, [r0, #8]
 800dd26:	b138      	cbz	r0, 800dd38 <rcutils_set_default_allocator+0x24>
 800dd28:	4b08      	ldr	r3, [pc, #32]	@ (800dd4c <rcutils_set_default_allocator+0x38>)
 800dd2a:	601a      	str	r2, [r3, #0]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800dd32:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800dd36:	2001      	movs	r0, #1
 800dd38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd3c:	4770      	bx	lr
 800dd3e:	4620      	mov	r0, r4
 800dd40:	e7fa      	b.n	800dd38 <rcutils_set_default_allocator+0x24>
 800dd42:	4770      	bx	lr
 800dd44:	4610      	mov	r0, r2
 800dd46:	4770      	bx	lr
 800dd48:	4608      	mov	r0, r1
 800dd4a:	4770      	bx	lr
 800dd4c:	200001bc 	.word	0x200001bc

0800dd50 <rcutils_get_default_allocator>:
 800dd50:	b510      	push	{r4, lr}
 800dd52:	4c05      	ldr	r4, [pc, #20]	@ (800dd68 <rcutils_get_default_allocator+0x18>)
 800dd54:	4686      	mov	lr, r0
 800dd56:	4684      	mov	ip, r0
 800dd58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dd5e:	6823      	ldr	r3, [r4, #0]
 800dd60:	f8cc 3000 	str.w	r3, [ip]
 800dd64:	4670      	mov	r0, lr
 800dd66:	bd10      	pop	{r4, pc}
 800dd68:	200001bc 	.word	0x200001bc

0800dd6c <rcutils_allocator_is_valid>:
 800dd6c:	b158      	cbz	r0, 800dd86 <rcutils_allocator_is_valid+0x1a>
 800dd6e:	6803      	ldr	r3, [r0, #0]
 800dd70:	b143      	cbz	r3, 800dd84 <rcutils_allocator_is_valid+0x18>
 800dd72:	6843      	ldr	r3, [r0, #4]
 800dd74:	b133      	cbz	r3, 800dd84 <rcutils_allocator_is_valid+0x18>
 800dd76:	68c3      	ldr	r3, [r0, #12]
 800dd78:	b123      	cbz	r3, 800dd84 <rcutils_allocator_is_valid+0x18>
 800dd7a:	6880      	ldr	r0, [r0, #8]
 800dd7c:	3800      	subs	r0, #0
 800dd7e:	bf18      	it	ne
 800dd80:	2001      	movne	r0, #1
 800dd82:	4770      	bx	lr
 800dd84:	4618      	mov	r0, r3
 800dd86:	4770      	bx	lr

0800dd88 <__atomic_load_8>:
 800dd88:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800dd8c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800dd90:	4a15      	ldr	r2, [pc, #84]	@ (800dde8 <__atomic_load_8+0x60>)
 800dd92:	4b16      	ldr	r3, [pc, #88]	@ (800ddec <__atomic_load_8+0x64>)
 800dd94:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800dd98:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800dd9c:	fb02 f101 	mul.w	r1, r2, r1
 800dda0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800dda4:	fba3 2301 	umull	r2, r3, r3, r1
 800dda8:	091b      	lsrs	r3, r3, #4
 800ddaa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800ddae:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800ddb2:	b4d0      	push	{r4, r6, r7}
 800ddb4:	4c0e      	ldr	r4, [pc, #56]	@ (800ddf0 <__atomic_load_8+0x68>)
 800ddb6:	1ac9      	subs	r1, r1, r3
 800ddb8:	1862      	adds	r2, r4, r1
 800ddba:	f04f 0c01 	mov.w	ip, #1
 800ddbe:	e8d2 3f4f 	ldrexb	r3, [r2]
 800ddc2:	e8c2 cf46 	strexb	r6, ip, [r2]
 800ddc6:	2e00      	cmp	r6, #0
 800ddc8:	d1f9      	bne.n	800ddbe <__atomic_load_8+0x36>
 800ddca:	f3bf 8f5b 	dmb	ish
 800ddce:	b2db      	uxtb	r3, r3
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d1f4      	bne.n	800ddbe <__atomic_load_8+0x36>
 800ddd4:	e9d0 6700 	ldrd	r6, r7, [r0]
 800ddd8:	f3bf 8f5b 	dmb	ish
 800dddc:	5463      	strb	r3, [r4, r1]
 800ddde:	4630      	mov	r0, r6
 800dde0:	4639      	mov	r1, r7
 800dde2:	bcd0      	pop	{r4, r6, r7}
 800dde4:	4770      	bx	lr
 800dde6:	bf00      	nop
 800dde8:	27d4eb2d 	.word	0x27d4eb2d
 800ddec:	b21642c9 	.word	0xb21642c9
 800ddf0:	200066e8 	.word	0x200066e8

0800ddf4 <__atomic_store_8>:
 800ddf4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800ddf8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800ddfc:	b570      	push	{r4, r5, r6, lr}
 800ddfe:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800de02:	4c14      	ldr	r4, [pc, #80]	@ (800de54 <__atomic_store_8+0x60>)
 800de04:	4d14      	ldr	r5, [pc, #80]	@ (800de58 <__atomic_store_8+0x64>)
 800de06:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800de0a:	fb04 f101 	mul.w	r1, r4, r1
 800de0e:	4c13      	ldr	r4, [pc, #76]	@ (800de5c <__atomic_store_8+0x68>)
 800de10:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800de14:	fba4 4e01 	umull	r4, lr, r4, r1
 800de18:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800de1c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800de20:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 800de24:	eba1 0e0e 	sub.w	lr, r1, lr
 800de28:	eb05 0c0e 	add.w	ip, r5, lr
 800de2c:	f04f 0401 	mov.w	r4, #1
 800de30:	e8dc 1f4f 	ldrexb	r1, [ip]
 800de34:	e8cc 4f46 	strexb	r6, r4, [ip]
 800de38:	2e00      	cmp	r6, #0
 800de3a:	d1f9      	bne.n	800de30 <__atomic_store_8+0x3c>
 800de3c:	f3bf 8f5b 	dmb	ish
 800de40:	b2c9      	uxtb	r1, r1
 800de42:	2900      	cmp	r1, #0
 800de44:	d1f4      	bne.n	800de30 <__atomic_store_8+0x3c>
 800de46:	e9c0 2300 	strd	r2, r3, [r0]
 800de4a:	f3bf 8f5b 	dmb	ish
 800de4e:	f805 100e 	strb.w	r1, [r5, lr]
 800de52:	bd70      	pop	{r4, r5, r6, pc}
 800de54:	27d4eb2d 	.word	0x27d4eb2d
 800de58:	200066e8 	.word	0x200066e8
 800de5c:	b21642c9 	.word	0xb21642c9

0800de60 <__atomic_exchange_8>:
 800de60:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 800de64:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 800de68:	4916      	ldr	r1, [pc, #88]	@ (800dec4 <__atomic_exchange_8+0x64>)
 800de6a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 800de6e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 800de72:	fb01 fc0c 	mul.w	ip, r1, ip
 800de76:	4914      	ldr	r1, [pc, #80]	@ (800dec8 <__atomic_exchange_8+0x68>)
 800de78:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 800de7c:	b570      	push	{r4, r5, r6, lr}
 800de7e:	4605      	mov	r5, r0
 800de80:	fba1 010c 	umull	r0, r1, r1, ip
 800de84:	0909      	lsrs	r1, r1, #4
 800de86:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800de8a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 800de8e:	4e0f      	ldr	r6, [pc, #60]	@ (800decc <__atomic_exchange_8+0x6c>)
 800de90:	ebac 0c01 	sub.w	ip, ip, r1
 800de94:	eb06 010c 	add.w	r1, r6, ip
 800de98:	f04f 0e01 	mov.w	lr, #1
 800de9c:	e8d1 4f4f 	ldrexb	r4, [r1]
 800dea0:	e8c1 ef40 	strexb	r0, lr, [r1]
 800dea4:	2800      	cmp	r0, #0
 800dea6:	d1f9      	bne.n	800de9c <__atomic_exchange_8+0x3c>
 800dea8:	f3bf 8f5b 	dmb	ish
 800deac:	b2e4      	uxtb	r4, r4
 800deae:	2c00      	cmp	r4, #0
 800deb0:	d1f4      	bne.n	800de9c <__atomic_exchange_8+0x3c>
 800deb2:	e9d5 0100 	ldrd	r0, r1, [r5]
 800deb6:	e9c5 2300 	strd	r2, r3, [r5]
 800deba:	f3bf 8f5b 	dmb	ish
 800debe:	f806 400c 	strb.w	r4, [r6, ip]
 800dec2:	bd70      	pop	{r4, r5, r6, pc}
 800dec4:	27d4eb2d 	.word	0x27d4eb2d
 800dec8:	b21642c9 	.word	0xb21642c9
 800decc:	200066e8 	.word	0x200066e8

0800ded0 <rcutils_get_env>:
 800ded0:	b168      	cbz	r0, 800deee <rcutils_get_env+0x1e>
 800ded2:	b510      	push	{r4, lr}
 800ded4:	460c      	mov	r4, r1
 800ded6:	b129      	cbz	r1, 800dee4 <rcutils_get_env+0x14>
 800ded8:	f00a f91e 	bl	8018118 <getenv>
 800dedc:	b120      	cbz	r0, 800dee8 <rcutils_get_env+0x18>
 800dede:	6020      	str	r0, [r4, #0]
 800dee0:	2000      	movs	r0, #0
 800dee2:	bd10      	pop	{r4, pc}
 800dee4:	4803      	ldr	r0, [pc, #12]	@ (800def4 <rcutils_get_env+0x24>)
 800dee6:	bd10      	pop	{r4, pc}
 800dee8:	4b03      	ldr	r3, [pc, #12]	@ (800def8 <rcutils_get_env+0x28>)
 800deea:	6023      	str	r3, [r4, #0]
 800deec:	bd10      	pop	{r4, pc}
 800deee:	4803      	ldr	r0, [pc, #12]	@ (800defc <rcutils_get_env+0x2c>)
 800def0:	4770      	bx	lr
 800def2:	bf00      	nop
 800def4:	08019d98 	.word	0x08019d98
 800def8:	0801a974 	.word	0x0801a974
 800defc:	08019d7c 	.word	0x08019d7c

0800df00 <rcutils_get_error_string>:
 800df00:	4b06      	ldr	r3, [pc, #24]	@ (800df1c <rcutils_get_error_string+0x1c>)
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	b13b      	cbz	r3, 800df16 <rcutils_get_error_string+0x16>
 800df06:	4b06      	ldr	r3, [pc, #24]	@ (800df20 <rcutils_get_error_string+0x20>)
 800df08:	781a      	ldrb	r2, [r3, #0]
 800df0a:	b90a      	cbnz	r2, 800df10 <rcutils_get_error_string+0x10>
 800df0c:	2201      	movs	r2, #1
 800df0e:	701a      	strb	r2, [r3, #0]
 800df10:	4b04      	ldr	r3, [pc, #16]	@ (800df24 <rcutils_get_error_string+0x24>)
 800df12:	7818      	ldrb	r0, [r3, #0]
 800df14:	4770      	bx	lr
 800df16:	4b04      	ldr	r3, [pc, #16]	@ (800df28 <rcutils_get_error_string+0x28>)
 800df18:	7818      	ldrb	r0, [r3, #0]
 800df1a:	4770      	bx	lr
 800df1c:	200066ff 	.word	0x200066ff
 800df20:	20006711 	.word	0x20006711
 800df24:	20006710 	.word	0x20006710
 800df28:	0801a300 	.word	0x0801a300
 800df2c:	00000000 	.word	0x00000000

0800df30 <rcutils_reset_error>:
 800df30:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800df50 <rcutils_reset_error+0x20>
 800df34:	4a08      	ldr	r2, [pc, #32]	@ (800df58 <rcutils_reset_error+0x28>)
 800df36:	4809      	ldr	r0, [pc, #36]	@ (800df5c <rcutils_reset_error+0x2c>)
 800df38:	4909      	ldr	r1, [pc, #36]	@ (800df60 <rcutils_reset_error+0x30>)
 800df3a:	2300      	movs	r3, #0
 800df3c:	8013      	strh	r3, [r2, #0]
 800df3e:	ed82 7b02 	vstr	d7, [r2, #8]
 800df42:	4a08      	ldr	r2, [pc, #32]	@ (800df64 <rcutils_reset_error+0x34>)
 800df44:	7003      	strb	r3, [r0, #0]
 800df46:	700b      	strb	r3, [r1, #0]
 800df48:	7013      	strb	r3, [r2, #0]
 800df4a:	4770      	bx	lr
 800df4c:	f3af 8000 	nop.w
	...
 800df58:	20006700 	.word	0x20006700
 800df5c:	20006711 	.word	0x20006711
 800df60:	20006710 	.word	0x20006710
 800df64:	200066ff 	.word	0x200066ff

0800df68 <rcutils_format_string_limit>:
 800df68:	b40f      	push	{r0, r1, r2, r3}
 800df6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df6c:	b083      	sub	sp, #12
 800df6e:	ac08      	add	r4, sp, #32
 800df70:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800df72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800df76:	b34e      	cbz	r6, 800dfcc <rcutils_format_string_limit+0x64>
 800df78:	a808      	add	r0, sp, #32
 800df7a:	f7ff fef7 	bl	800dd6c <rcutils_allocator_is_valid>
 800df7e:	b328      	cbz	r0, 800dfcc <rcutils_format_string_limit+0x64>
 800df80:	2100      	movs	r1, #0
 800df82:	ab0f      	add	r3, sp, #60	@ 0x3c
 800df84:	4632      	mov	r2, r6
 800df86:	4608      	mov	r0, r1
 800df88:	e9cd 3300 	strd	r3, r3, [sp]
 800df8c:	f000 f8f4 	bl	800e178 <rcutils_vsnprintf>
 800df90:	1c43      	adds	r3, r0, #1
 800df92:	4605      	mov	r5, r0
 800df94:	d01a      	beq.n	800dfcc <rcutils_format_string_limit+0x64>
 800df96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800df98:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800df9a:	1c47      	adds	r7, r0, #1
 800df9c:	429f      	cmp	r7, r3
 800df9e:	bf84      	itt	hi
 800dfa0:	461f      	movhi	r7, r3
 800dfa2:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800dfa6:	4638      	mov	r0, r7
 800dfa8:	9b08      	ldr	r3, [sp, #32]
 800dfaa:	4798      	blx	r3
 800dfac:	4604      	mov	r4, r0
 800dfae:	b168      	cbz	r0, 800dfcc <rcutils_format_string_limit+0x64>
 800dfb0:	9b01      	ldr	r3, [sp, #4]
 800dfb2:	4632      	mov	r2, r6
 800dfb4:	4639      	mov	r1, r7
 800dfb6:	f000 f8df 	bl	800e178 <rcutils_vsnprintf>
 800dfba:	2800      	cmp	r0, #0
 800dfbc:	db02      	blt.n	800dfc4 <rcutils_format_string_limit+0x5c>
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	5563      	strb	r3, [r4, r5]
 800dfc2:	e004      	b.n	800dfce <rcutils_format_string_limit+0x66>
 800dfc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfc6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800dfc8:	4620      	mov	r0, r4
 800dfca:	4798      	blx	r3
 800dfcc:	2400      	movs	r4, #0
 800dfce:	4620      	mov	r0, r4
 800dfd0:	b003      	add	sp, #12
 800dfd2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dfd6:	b004      	add	sp, #16
 800dfd8:	4770      	bx	lr
 800dfda:	bf00      	nop

0800dfdc <rcutils_repl_str>:
 800dfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe0:	ed2d 8b02 	vpush	{d8}
 800dfe4:	b087      	sub	sp, #28
 800dfe6:	4680      	mov	r8, r0
 800dfe8:	4608      	mov	r0, r1
 800dfea:	f8cd 8004 	str.w	r8, [sp, #4]
 800dfee:	ee08 2a10 	vmov	s16, r2
 800dff2:	468a      	mov	sl, r1
 800dff4:	4699      	mov	r9, r3
 800dff6:	f7f2 f91d 	bl	8000234 <strlen>
 800dffa:	2600      	movs	r6, #0
 800dffc:	4647      	mov	r7, r8
 800dffe:	9002      	str	r0, [sp, #8]
 800e000:	46b3      	mov	fp, r6
 800e002:	2510      	movs	r5, #16
 800e004:	46b0      	mov	r8, r6
 800e006:	e01d      	b.n	800e044 <rcutils_repl_str+0x68>
 800e008:	f10b 0b01 	add.w	fp, fp, #1
 800e00c:	455e      	cmp	r6, fp
 800e00e:	d211      	bcs.n	800e034 <rcutils_repl_str+0x58>
 800e010:	442e      	add	r6, r5
 800e012:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e016:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e01a:	00b1      	lsls	r1, r6, #2
 800e01c:	4798      	blx	r3
 800e01e:	2800      	cmp	r0, #0
 800e020:	f000 8088 	beq.w	800e134 <rcutils_repl_str+0x158>
 800e024:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e028:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800e02c:	4680      	mov	r8, r0
 800e02e:	bf28      	it	cs
 800e030:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800e034:	9a01      	ldr	r2, [sp, #4]
 800e036:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800e03a:	1aa2      	subs	r2, r4, r2
 800e03c:	f843 2c04 	str.w	r2, [r3, #-4]
 800e040:	9b02      	ldr	r3, [sp, #8]
 800e042:	18e7      	adds	r7, r4, r3
 800e044:	4651      	mov	r1, sl
 800e046:	4638      	mov	r0, r7
 800e048:	f00a fd49 	bl	8018ade <strstr>
 800e04c:	4604      	mov	r4, r0
 800e04e:	4640      	mov	r0, r8
 800e050:	2c00      	cmp	r4, #0
 800e052:	d1d9      	bne.n	800e008 <rcutils_repl_str+0x2c>
 800e054:	46b8      	mov	r8, r7
 800e056:	4607      	mov	r7, r0
 800e058:	4640      	mov	r0, r8
 800e05a:	f7f2 f8eb 	bl	8000234 <strlen>
 800e05e:	9b01      	ldr	r3, [sp, #4]
 800e060:	eba8 0303 	sub.w	r3, r8, r3
 800e064:	181c      	adds	r4, r3, r0
 800e066:	9404      	str	r4, [sp, #16]
 800e068:	f1bb 0f00 	cmp.w	fp, #0
 800e06c:	d04a      	beq.n	800e104 <rcutils_repl_str+0x128>
 800e06e:	ee18 0a10 	vmov	r0, s16
 800e072:	f7f2 f8df 	bl	8000234 <strlen>
 800e076:	9b02      	ldr	r3, [sp, #8]
 800e078:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e07c:	1ac3      	subs	r3, r0, r3
 800e07e:	fb0b 4303 	mla	r3, fp, r3, r4
 800e082:	461a      	mov	r2, r3
 800e084:	9305      	str	r3, [sp, #20]
 800e086:	4606      	mov	r6, r0
 800e088:	f8d9 3000 	ldr.w	r3, [r9]
 800e08c:	1c50      	adds	r0, r2, #1
 800e08e:	4798      	blx	r3
 800e090:	9003      	str	r0, [sp, #12]
 800e092:	2800      	cmp	r0, #0
 800e094:	d04f      	beq.n	800e136 <rcutils_repl_str+0x15a>
 800e096:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e09a:	683a      	ldr	r2, [r7, #0]
 800e09c:	4641      	mov	r1, r8
 800e09e:	f00a fdc0 	bl	8018c22 <memcpy>
 800e0a2:	683d      	ldr	r5, [r7, #0]
 800e0a4:	9b03      	ldr	r3, [sp, #12]
 800e0a6:	9701      	str	r7, [sp, #4]
 800e0a8:	46ba      	mov	sl, r7
 800e0aa:	441d      	add	r5, r3
 800e0ac:	9f02      	ldr	r7, [sp, #8]
 800e0ae:	f8cd 9008 	str.w	r9, [sp, #8]
 800e0b2:	2401      	movs	r4, #1
 800e0b4:	46d1      	mov	r9, sl
 800e0b6:	ee18 aa10 	vmov	sl, s16
 800e0ba:	e00a      	b.n	800e0d2 <rcutils_repl_str+0xf6>
 800e0bc:	f8d9 5000 	ldr.w	r5, [r9]
 800e0c0:	1aaa      	subs	r2, r5, r2
 800e0c2:	1885      	adds	r5, r0, r2
 800e0c4:	f00a fdad 	bl	8018c22 <memcpy>
 800e0c8:	45a3      	cmp	fp, r4
 800e0ca:	f104 0201 	add.w	r2, r4, #1
 800e0ce:	d935      	bls.n	800e13c <rcutils_repl_str+0x160>
 800e0d0:	4614      	mov	r4, r2
 800e0d2:	4632      	mov	r2, r6
 800e0d4:	4651      	mov	r1, sl
 800e0d6:	4628      	mov	r0, r5
 800e0d8:	f00a fda3 	bl	8018c22 <memcpy>
 800e0dc:	f859 2b04 	ldr.w	r2, [r9], #4
 800e0e0:	45a3      	cmp	fp, r4
 800e0e2:	443a      	add	r2, r7
 800e0e4:	eb05 0006 	add.w	r0, r5, r6
 800e0e8:	eb08 0102 	add.w	r1, r8, r2
 800e0ec:	d1e6      	bne.n	800e0bc <rcutils_repl_str+0xe0>
 800e0ee:	9b04      	ldr	r3, [sp, #16]
 800e0f0:	1a9a      	subs	r2, r3, r2
 800e0f2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800e0f6:	f00a fd94 	bl	8018c22 <memcpy>
 800e0fa:	9a03      	ldr	r2, [sp, #12]
 800e0fc:	9905      	ldr	r1, [sp, #20]
 800e0fe:	2300      	movs	r3, #0
 800e100:	5453      	strb	r3, [r2, r1]
 800e102:	e00b      	b.n	800e11c <rcutils_repl_str+0x140>
 800e104:	4620      	mov	r0, r4
 800e106:	f8d9 3000 	ldr.w	r3, [r9]
 800e10a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e10e:	3001      	adds	r0, #1
 800e110:	4798      	blx	r3
 800e112:	9003      	str	r0, [sp, #12]
 800e114:	b110      	cbz	r0, 800e11c <rcutils_repl_str+0x140>
 800e116:	9901      	ldr	r1, [sp, #4]
 800e118:	f00a fd7b 	bl	8018c12 <strcpy>
 800e11c:	4638      	mov	r0, r7
 800e11e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e122:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e126:	4798      	blx	r3
 800e128:	9803      	ldr	r0, [sp, #12]
 800e12a:	b007      	add	sp, #28
 800e12c:	ecbd 8b02 	vpop	{d8}
 800e130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e134:	4647      	mov	r7, r8
 800e136:	2300      	movs	r3, #0
 800e138:	9303      	str	r3, [sp, #12]
 800e13a:	e7ef      	b.n	800e11c <rcutils_repl_str+0x140>
 800e13c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800e140:	e7db      	b.n	800e0fa <rcutils_repl_str+0x11e>
 800e142:	bf00      	nop

0800e144 <rcutils_snprintf>:
 800e144:	b40c      	push	{r2, r3}
 800e146:	b530      	push	{r4, r5, lr}
 800e148:	b083      	sub	sp, #12
 800e14a:	ab06      	add	r3, sp, #24
 800e14c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e150:	9301      	str	r3, [sp, #4]
 800e152:	b152      	cbz	r2, 800e16a <rcutils_snprintf+0x26>
 800e154:	b138      	cbz	r0, 800e166 <rcutils_snprintf+0x22>
 800e156:	b141      	cbz	r1, 800e16a <rcutils_snprintf+0x26>
 800e158:	f00a fbce 	bl	80188f8 <vsniprintf>
 800e15c:	b003      	add	sp, #12
 800e15e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e162:	b002      	add	sp, #8
 800e164:	4770      	bx	lr
 800e166:	2900      	cmp	r1, #0
 800e168:	d0f6      	beq.n	800e158 <rcutils_snprintf+0x14>
 800e16a:	f00a fd25 	bl	8018bb8 <__errno>
 800e16e:	2316      	movs	r3, #22
 800e170:	6003      	str	r3, [r0, #0]
 800e172:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e176:	e7f1      	b.n	800e15c <rcutils_snprintf+0x18>

0800e178 <rcutils_vsnprintf>:
 800e178:	b570      	push	{r4, r5, r6, lr}
 800e17a:	b13a      	cbz	r2, 800e18c <rcutils_vsnprintf+0x14>
 800e17c:	b120      	cbz	r0, 800e188 <rcutils_vsnprintf+0x10>
 800e17e:	b129      	cbz	r1, 800e18c <rcutils_vsnprintf+0x14>
 800e180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e184:	f00a bbb8 	b.w	80188f8 <vsniprintf>
 800e188:	2900      	cmp	r1, #0
 800e18a:	d0f9      	beq.n	800e180 <rcutils_vsnprintf+0x8>
 800e18c:	f00a fd14 	bl	8018bb8 <__errno>
 800e190:	2316      	movs	r3, #22
 800e192:	6003      	str	r3, [r0, #0]
 800e194:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e198:	bd70      	pop	{r4, r5, r6, pc}
 800e19a:	bf00      	nop

0800e19c <rcutils_strdup>:
 800e19c:	b084      	sub	sp, #16
 800e19e:	b570      	push	{r4, r5, r6, lr}
 800e1a0:	b082      	sub	sp, #8
 800e1a2:	ac07      	add	r4, sp, #28
 800e1a4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800e1a8:	4605      	mov	r5, r0
 800e1aa:	b1b0      	cbz	r0, 800e1da <rcutils_strdup+0x3e>
 800e1ac:	f7f2 f842 	bl	8000234 <strlen>
 800e1b0:	1c42      	adds	r2, r0, #1
 800e1b2:	9b07      	ldr	r3, [sp, #28]
 800e1b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e1b6:	9201      	str	r2, [sp, #4]
 800e1b8:	4606      	mov	r6, r0
 800e1ba:	4610      	mov	r0, r2
 800e1bc:	4798      	blx	r3
 800e1be:	4604      	mov	r4, r0
 800e1c0:	b128      	cbz	r0, 800e1ce <rcutils_strdup+0x32>
 800e1c2:	9a01      	ldr	r2, [sp, #4]
 800e1c4:	4629      	mov	r1, r5
 800e1c6:	f00a fd2c 	bl	8018c22 <memcpy>
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	55a3      	strb	r3, [r4, r6]
 800e1ce:	4620      	mov	r0, r4
 800e1d0:	b002      	add	sp, #8
 800e1d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e1d6:	b004      	add	sp, #16
 800e1d8:	4770      	bx	lr
 800e1da:	4604      	mov	r4, r0
 800e1dc:	e7f7      	b.n	800e1ce <rcutils_strdup+0x32>
 800e1de:	bf00      	nop

0800e1e0 <rcutils_strndup>:
 800e1e0:	b082      	sub	sp, #8
 800e1e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1e4:	ac06      	add	r4, sp, #24
 800e1e6:	e884 000c 	stmia.w	r4, {r2, r3}
 800e1ea:	4605      	mov	r5, r0
 800e1ec:	b188      	cbz	r0, 800e212 <rcutils_strndup+0x32>
 800e1ee:	1c4f      	adds	r7, r1, #1
 800e1f0:	460e      	mov	r6, r1
 800e1f2:	4638      	mov	r0, r7
 800e1f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e1f6:	4790      	blx	r2
 800e1f8:	4604      	mov	r4, r0
 800e1fa:	b128      	cbz	r0, 800e208 <rcutils_strndup+0x28>
 800e1fc:	463a      	mov	r2, r7
 800e1fe:	4629      	mov	r1, r5
 800e200:	f00a fd0f 	bl	8018c22 <memcpy>
 800e204:	2300      	movs	r3, #0
 800e206:	55a3      	strb	r3, [r4, r6]
 800e208:	4620      	mov	r0, r4
 800e20a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e20e:	b002      	add	sp, #8
 800e210:	4770      	bx	lr
 800e212:	4604      	mov	r4, r0
 800e214:	e7f8      	b.n	800e208 <rcutils_strndup+0x28>
 800e216:	bf00      	nop

0800e218 <rcutils_get_zero_initialized_string_map>:
 800e218:	4b01      	ldr	r3, [pc, #4]	@ (800e220 <rcutils_get_zero_initialized_string_map+0x8>)
 800e21a:	2000      	movs	r0, #0
 800e21c:	6018      	str	r0, [r3, #0]
 800e21e:	4770      	bx	lr
 800e220:	20006714 	.word	0x20006714

0800e224 <rcutils_string_map_reserve>:
 800e224:	2800      	cmp	r0, #0
 800e226:	d05f      	beq.n	800e2e8 <rcutils_string_map_reserve+0xc4>
 800e228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e22c:	460c      	mov	r4, r1
 800e22e:	6801      	ldr	r1, [r0, #0]
 800e230:	b082      	sub	sp, #8
 800e232:	4605      	mov	r5, r0
 800e234:	b129      	cbz	r1, 800e242 <rcutils_string_map_reserve+0x1e>
 800e236:	68cb      	ldr	r3, [r1, #12]
 800e238:	42a3      	cmp	r3, r4
 800e23a:	d906      	bls.n	800e24a <rcutils_string_map_reserve+0x26>
 800e23c:	461c      	mov	r4, r3
 800e23e:	2900      	cmp	r1, #0
 800e240:	d1f9      	bne.n	800e236 <rcutils_string_map_reserve+0x12>
 800e242:	201f      	movs	r0, #31
 800e244:	b002      	add	sp, #8
 800e246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e24a:	688b      	ldr	r3, [r1, #8]
 800e24c:	42a3      	cmp	r3, r4
 800e24e:	d047      	beq.n	800e2e0 <rcutils_string_map_reserve+0xbc>
 800e250:	6a0e      	ldr	r6, [r1, #32]
 800e252:	2c00      	cmp	r4, #0
 800e254:	d034      	beq.n	800e2c0 <rcutils_string_map_reserve+0x9c>
 800e256:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800e25a:	d243      	bcs.n	800e2e4 <rcutils_string_map_reserve+0xc0>
 800e25c:	00a7      	lsls	r7, r4, #2
 800e25e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800e262:	6808      	ldr	r0, [r1, #0]
 800e264:	4632      	mov	r2, r6
 800e266:	4639      	mov	r1, r7
 800e268:	47c0      	blx	r8
 800e26a:	2800      	cmp	r0, #0
 800e26c:	d03a      	beq.n	800e2e4 <rcutils_string_map_reserve+0xc0>
 800e26e:	682b      	ldr	r3, [r5, #0]
 800e270:	4632      	mov	r2, r6
 800e272:	6018      	str	r0, [r3, #0]
 800e274:	4639      	mov	r1, r7
 800e276:	6858      	ldr	r0, [r3, #4]
 800e278:	47c0      	blx	r8
 800e27a:	2800      	cmp	r0, #0
 800e27c:	d032      	beq.n	800e2e4 <rcutils_string_map_reserve+0xc0>
 800e27e:	682d      	ldr	r5, [r5, #0]
 800e280:	68ab      	ldr	r3, [r5, #8]
 800e282:	6068      	str	r0, [r5, #4]
 800e284:	42a3      	cmp	r3, r4
 800e286:	d226      	bcs.n	800e2d6 <rcutils_string_map_reserve+0xb2>
 800e288:	682a      	ldr	r2, [r5, #0]
 800e28a:	eb00 0c07 	add.w	ip, r0, r7
 800e28e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800e292:	45e6      	cmp	lr, ip
 800e294:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800e298:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800e29c:	d203      	bcs.n	800e2a6 <rcutils_string_map_reserve+0x82>
 800e29e:	eb02 0c07 	add.w	ip, r2, r7
 800e2a2:	4566      	cmp	r6, ip
 800e2a4:	d322      	bcc.n	800e2ec <rcutils_string_map_reserve+0xc8>
 800e2a6:	1ae3      	subs	r3, r4, r3
 800e2a8:	009a      	lsls	r2, r3, #2
 800e2aa:	4670      	mov	r0, lr
 800e2ac:	2100      	movs	r1, #0
 800e2ae:	9201      	str	r2, [sp, #4]
 800e2b0:	f00a fbee 	bl	8018a90 <memset>
 800e2b4:	9a01      	ldr	r2, [sp, #4]
 800e2b6:	2100      	movs	r1, #0
 800e2b8:	4630      	mov	r0, r6
 800e2ba:	f00a fbe9 	bl	8018a90 <memset>
 800e2be:	e00a      	b.n	800e2d6 <rcutils_string_map_reserve+0xb2>
 800e2c0:	694f      	ldr	r7, [r1, #20]
 800e2c2:	6808      	ldr	r0, [r1, #0]
 800e2c4:	4631      	mov	r1, r6
 800e2c6:	47b8      	blx	r7
 800e2c8:	682b      	ldr	r3, [r5, #0]
 800e2ca:	4631      	mov	r1, r6
 800e2cc:	6858      	ldr	r0, [r3, #4]
 800e2ce:	601c      	str	r4, [r3, #0]
 800e2d0:	47b8      	blx	r7
 800e2d2:	682d      	ldr	r5, [r5, #0]
 800e2d4:	606c      	str	r4, [r5, #4]
 800e2d6:	2000      	movs	r0, #0
 800e2d8:	60ac      	str	r4, [r5, #8]
 800e2da:	b002      	add	sp, #8
 800e2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2e0:	2000      	movs	r0, #0
 800e2e2:	e7af      	b.n	800e244 <rcutils_string_map_reserve+0x20>
 800e2e4:	200a      	movs	r0, #10
 800e2e6:	e7ad      	b.n	800e244 <rcutils_string_map_reserve+0x20>
 800e2e8:	200b      	movs	r0, #11
 800e2ea:	4770      	bx	lr
 800e2ec:	1f0b      	subs	r3, r1, #4
 800e2ee:	4418      	add	r0, r3
 800e2f0:	4413      	add	r3, r2
 800e2f2:	3a04      	subs	r2, #4
 800e2f4:	4417      	add	r7, r2
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	f843 2f04 	str.w	r2, [r3, #4]!
 800e2fc:	42bb      	cmp	r3, r7
 800e2fe:	f840 2f04 	str.w	r2, [r0, #4]!
 800e302:	d1f9      	bne.n	800e2f8 <rcutils_string_map_reserve+0xd4>
 800e304:	e7e7      	b.n	800e2d6 <rcutils_string_map_reserve+0xb2>
 800e306:	bf00      	nop

0800e308 <rcutils_string_map_init>:
 800e308:	b082      	sub	sp, #8
 800e30a:	b570      	push	{r4, r5, r6, lr}
 800e30c:	ac04      	add	r4, sp, #16
 800e30e:	e884 000c 	stmia.w	r4, {r2, r3}
 800e312:	b380      	cbz	r0, 800e376 <rcutils_string_map_init+0x6e>
 800e314:	6806      	ldr	r6, [r0, #0]
 800e316:	4604      	mov	r4, r0
 800e318:	b12e      	cbz	r6, 800e326 <rcutils_string_map_init+0x1e>
 800e31a:	251e      	movs	r5, #30
 800e31c:	4628      	mov	r0, r5
 800e31e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e322:	b002      	add	sp, #8
 800e324:	4770      	bx	lr
 800e326:	a804      	add	r0, sp, #16
 800e328:	460d      	mov	r5, r1
 800e32a:	f7ff fd1f 	bl	800dd6c <rcutils_allocator_is_valid>
 800e32e:	b310      	cbz	r0, 800e376 <rcutils_string_map_init+0x6e>
 800e330:	9b04      	ldr	r3, [sp, #16]
 800e332:	9908      	ldr	r1, [sp, #32]
 800e334:	2024      	movs	r0, #36	@ 0x24
 800e336:	4798      	blx	r3
 800e338:	6020      	str	r0, [r4, #0]
 800e33a:	b310      	cbz	r0, 800e382 <rcutils_string_map_init+0x7a>
 800e33c:	f10d 0e10 	add.w	lr, sp, #16
 800e340:	e9c0 6600 	strd	r6, r6, [r0]
 800e344:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800e348:	f100 0c10 	add.w	ip, r0, #16
 800e34c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e350:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e354:	f8de 3000 	ldr.w	r3, [lr]
 800e358:	f8cc 3000 	str.w	r3, [ip]
 800e35c:	4629      	mov	r1, r5
 800e35e:	4620      	mov	r0, r4
 800e360:	f7ff ff60 	bl	800e224 <rcutils_string_map_reserve>
 800e364:	4605      	mov	r5, r0
 800e366:	2800      	cmp	r0, #0
 800e368:	d0d8      	beq.n	800e31c <rcutils_string_map_init+0x14>
 800e36a:	9b05      	ldr	r3, [sp, #20]
 800e36c:	9908      	ldr	r1, [sp, #32]
 800e36e:	6820      	ldr	r0, [r4, #0]
 800e370:	4798      	blx	r3
 800e372:	6026      	str	r6, [r4, #0]
 800e374:	e7d2      	b.n	800e31c <rcutils_string_map_init+0x14>
 800e376:	250b      	movs	r5, #11
 800e378:	4628      	mov	r0, r5
 800e37a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e37e:	b002      	add	sp, #8
 800e380:	4770      	bx	lr
 800e382:	250a      	movs	r5, #10
 800e384:	e7ca      	b.n	800e31c <rcutils_string_map_init+0x14>
 800e386:	bf00      	nop

0800e388 <rcutils_string_map_fini>:
 800e388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e38c:	b082      	sub	sp, #8
 800e38e:	2800      	cmp	r0, #0
 800e390:	d03a      	beq.n	800e408 <rcutils_string_map_fini+0x80>
 800e392:	6804      	ldr	r4, [r0, #0]
 800e394:	4606      	mov	r6, r0
 800e396:	2c00      	cmp	r4, #0
 800e398:	d032      	beq.n	800e400 <rcutils_string_map_fini+0x78>
 800e39a:	68a3      	ldr	r3, [r4, #8]
 800e39c:	b32b      	cbz	r3, 800e3ea <rcutils_string_map_fini+0x62>
 800e39e:	2500      	movs	r5, #0
 800e3a0:	6822      	ldr	r2, [r4, #0]
 800e3a2:	462f      	mov	r7, r5
 800e3a4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800e3a8:	b1e0      	cbz	r0, 800e3e4 <rcutils_string_map_fini+0x5c>
 800e3aa:	6a21      	ldr	r1, [r4, #32]
 800e3ac:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800e3b0:	9101      	str	r1, [sp, #4]
 800e3b2:	47c0      	blx	r8
 800e3b4:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e3b8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800e3bc:	9901      	ldr	r1, [sp, #4]
 800e3be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e3c2:	47c0      	blx	r8
 800e3c4:	68e3      	ldr	r3, [r4, #12]
 800e3c6:	6862      	ldr	r2, [r4, #4]
 800e3c8:	3b01      	subs	r3, #1
 800e3ca:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800e3ce:	60e3      	str	r3, [r4, #12]
 800e3d0:	6834      	ldr	r4, [r6, #0]
 800e3d2:	68a3      	ldr	r3, [r4, #8]
 800e3d4:	3501      	adds	r5, #1
 800e3d6:	429d      	cmp	r5, r3
 800e3d8:	d207      	bcs.n	800e3ea <rcutils_string_map_fini+0x62>
 800e3da:	6822      	ldr	r2, [r4, #0]
 800e3dc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800e3e0:	2800      	cmp	r0, #0
 800e3e2:	d1e2      	bne.n	800e3aa <rcutils_string_map_fini+0x22>
 800e3e4:	3501      	adds	r5, #1
 800e3e6:	429d      	cmp	r5, r3
 800e3e8:	d3dc      	bcc.n	800e3a4 <rcutils_string_map_fini+0x1c>
 800e3ea:	2100      	movs	r1, #0
 800e3ec:	4630      	mov	r0, r6
 800e3ee:	f7ff ff19 	bl	800e224 <rcutils_string_map_reserve>
 800e3f2:	4604      	mov	r4, r0
 800e3f4:	b920      	cbnz	r0, 800e400 <rcutils_string_map_fini+0x78>
 800e3f6:	6830      	ldr	r0, [r6, #0]
 800e3f8:	6943      	ldr	r3, [r0, #20]
 800e3fa:	6a01      	ldr	r1, [r0, #32]
 800e3fc:	4798      	blx	r3
 800e3fe:	6034      	str	r4, [r6, #0]
 800e400:	4620      	mov	r0, r4
 800e402:	b002      	add	sp, #8
 800e404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e408:	240b      	movs	r4, #11
 800e40a:	4620      	mov	r0, r4
 800e40c:	b002      	add	sp, #8
 800e40e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e412:	bf00      	nop

0800e414 <rcutils_string_map_getn>:
 800e414:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e418:	b300      	cbz	r0, 800e45c <rcutils_string_map_getn+0x48>
 800e41a:	6807      	ldr	r7, [r0, #0]
 800e41c:	b1ff      	cbz	r7, 800e45e <rcutils_string_map_getn+0x4a>
 800e41e:	4688      	mov	r8, r1
 800e420:	b1e1      	cbz	r1, 800e45c <rcutils_string_map_getn+0x48>
 800e422:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800e426:	683e      	ldr	r6, [r7, #0]
 800e428:	f1ba 0f00 	cmp.w	sl, #0
 800e42c:	d016      	beq.n	800e45c <rcutils_string_map_getn+0x48>
 800e42e:	4691      	mov	r9, r2
 800e430:	3e04      	subs	r6, #4
 800e432:	2400      	movs	r4, #0
 800e434:	f856 5f04 	ldr.w	r5, [r6, #4]!
 800e438:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e43c:	4628      	mov	r0, r5
 800e43e:	3401      	adds	r4, #1
 800e440:	b155      	cbz	r5, 800e458 <rcutils_string_map_getn+0x44>
 800e442:	f7f1 fef7 	bl	8000234 <strlen>
 800e446:	4548      	cmp	r0, r9
 800e448:	4602      	mov	r2, r0
 800e44a:	4629      	mov	r1, r5
 800e44c:	bf38      	it	cc
 800e44e:	464a      	movcc	r2, r9
 800e450:	4640      	mov	r0, r8
 800e452:	f00a fb32 	bl	8018aba <strncmp>
 800e456:	b128      	cbz	r0, 800e464 <rcutils_string_map_getn+0x50>
 800e458:	45a2      	cmp	sl, r4
 800e45a:	d1eb      	bne.n	800e434 <rcutils_string_map_getn+0x20>
 800e45c:	2700      	movs	r7, #0
 800e45e:	4638      	mov	r0, r7
 800e460:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f853 700b 	ldr.w	r7, [r3, fp]
 800e46a:	4638      	mov	r0, r7
 800e46c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e470 <rcutils_system_time_now>:
 800e470:	b308      	cbz	r0, 800e4b6 <rcutils_system_time_now+0x46>
 800e472:	b570      	push	{r4, r5, r6, lr}
 800e474:	b084      	sub	sp, #16
 800e476:	4604      	mov	r4, r0
 800e478:	4669      	mov	r1, sp
 800e47a:	2001      	movs	r0, #1
 800e47c:	f7f3 fbd0 	bl	8001c20 <clock_gettime>
 800e480:	e9dd 3500 	ldrd	r3, r5, [sp]
 800e484:	2d00      	cmp	r5, #0
 800e486:	db13      	blt.n	800e4b0 <rcutils_system_time_now+0x40>
 800e488:	9902      	ldr	r1, [sp, #8]
 800e48a:	2900      	cmp	r1, #0
 800e48c:	db0d      	blt.n	800e4aa <rcutils_system_time_now+0x3a>
 800e48e:	4e0b      	ldr	r6, [pc, #44]	@ (800e4bc <rcutils_system_time_now+0x4c>)
 800e490:	fba3 3206 	umull	r3, r2, r3, r6
 800e494:	185b      	adds	r3, r3, r1
 800e496:	fb06 2205 	mla	r2, r6, r5, r2
 800e49a:	f04f 0000 	mov.w	r0, #0
 800e49e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800e4a2:	e9c4 3200 	strd	r3, r2, [r4]
 800e4a6:	b004      	add	sp, #16
 800e4a8:	bd70      	pop	{r4, r5, r6, pc}
 800e4aa:	ea53 0205 	orrs.w	r2, r3, r5
 800e4ae:	d1ee      	bne.n	800e48e <rcutils_system_time_now+0x1e>
 800e4b0:	2002      	movs	r0, #2
 800e4b2:	b004      	add	sp, #16
 800e4b4:	bd70      	pop	{r4, r5, r6, pc}
 800e4b6:	200b      	movs	r0, #11
 800e4b8:	4770      	bx	lr
 800e4ba:	bf00      	nop
 800e4bc:	3b9aca00 	.word	0x3b9aca00

0800e4c0 <rcutils_steady_time_now>:
 800e4c0:	b308      	cbz	r0, 800e506 <rcutils_steady_time_now+0x46>
 800e4c2:	b570      	push	{r4, r5, r6, lr}
 800e4c4:	b084      	sub	sp, #16
 800e4c6:	4604      	mov	r4, r0
 800e4c8:	4669      	mov	r1, sp
 800e4ca:	2000      	movs	r0, #0
 800e4cc:	f7f3 fba8 	bl	8001c20 <clock_gettime>
 800e4d0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800e4d4:	2d00      	cmp	r5, #0
 800e4d6:	db13      	blt.n	800e500 <rcutils_steady_time_now+0x40>
 800e4d8:	9902      	ldr	r1, [sp, #8]
 800e4da:	2900      	cmp	r1, #0
 800e4dc:	db0d      	blt.n	800e4fa <rcutils_steady_time_now+0x3a>
 800e4de:	4e0b      	ldr	r6, [pc, #44]	@ (800e50c <rcutils_steady_time_now+0x4c>)
 800e4e0:	fba3 3206 	umull	r3, r2, r3, r6
 800e4e4:	185b      	adds	r3, r3, r1
 800e4e6:	fb06 2205 	mla	r2, r6, r5, r2
 800e4ea:	f04f 0000 	mov.w	r0, #0
 800e4ee:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800e4f2:	e9c4 3200 	strd	r3, r2, [r4]
 800e4f6:	b004      	add	sp, #16
 800e4f8:	bd70      	pop	{r4, r5, r6, pc}
 800e4fa:	ea53 0205 	orrs.w	r2, r3, r5
 800e4fe:	d1ee      	bne.n	800e4de <rcutils_steady_time_now+0x1e>
 800e500:	2002      	movs	r0, #2
 800e502:	b004      	add	sp, #16
 800e504:	bd70      	pop	{r4, r5, r6, pc}
 800e506:	200b      	movs	r0, #11
 800e508:	4770      	bx	lr
 800e50a:	bf00      	nop
 800e50c:	3b9aca00 	.word	0x3b9aca00

0800e510 <rmw_get_zero_initialized_init_options>:
 800e510:	b510      	push	{r4, lr}
 800e512:	2238      	movs	r2, #56	@ 0x38
 800e514:	4604      	mov	r4, r0
 800e516:	2100      	movs	r1, #0
 800e518:	f00a faba 	bl	8018a90 <memset>
 800e51c:	f104 0010 	add.w	r0, r4, #16
 800e520:	f000 f80a 	bl	800e538 <rmw_get_default_security_options>
 800e524:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e528:	60e3      	str	r3, [r4, #12]
 800e52a:	4620      	mov	r0, r4
 800e52c:	bd10      	pop	{r4, pc}
 800e52e:	bf00      	nop

0800e530 <rmw_get_default_publisher_options>:
 800e530:	2200      	movs	r2, #0
 800e532:	6002      	str	r2, [r0, #0]
 800e534:	7102      	strb	r2, [r0, #4]
 800e536:	4770      	bx	lr

0800e538 <rmw_get_default_security_options>:
 800e538:	2200      	movs	r2, #0
 800e53a:	7002      	strb	r2, [r0, #0]
 800e53c:	6042      	str	r2, [r0, #4]
 800e53e:	4770      	bx	lr

0800e540 <rmw_validate_full_topic_name>:
 800e540:	2800      	cmp	r0, #0
 800e542:	d057      	beq.n	800e5f4 <rmw_validate_full_topic_name+0xb4>
 800e544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e548:	460d      	mov	r5, r1
 800e54a:	2900      	cmp	r1, #0
 800e54c:	d054      	beq.n	800e5f8 <rmw_validate_full_topic_name+0xb8>
 800e54e:	4616      	mov	r6, r2
 800e550:	4604      	mov	r4, r0
 800e552:	f7f1 fe6f 	bl	8000234 <strlen>
 800e556:	b148      	cbz	r0, 800e56c <rmw_validate_full_topic_name+0x2c>
 800e558:	7823      	ldrb	r3, [r4, #0]
 800e55a:	2b2f      	cmp	r3, #47	@ 0x2f
 800e55c:	d00d      	beq.n	800e57a <rmw_validate_full_topic_name+0x3a>
 800e55e:	2302      	movs	r3, #2
 800e560:	602b      	str	r3, [r5, #0]
 800e562:	b13e      	cbz	r6, 800e574 <rmw_validate_full_topic_name+0x34>
 800e564:	2000      	movs	r0, #0
 800e566:	6030      	str	r0, [r6, #0]
 800e568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e56c:	2301      	movs	r3, #1
 800e56e:	602b      	str	r3, [r5, #0]
 800e570:	2e00      	cmp	r6, #0
 800e572:	d1f7      	bne.n	800e564 <rmw_validate_full_topic_name+0x24>
 800e574:	2000      	movs	r0, #0
 800e576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e57a:	1e43      	subs	r3, r0, #1
 800e57c:	5ce2      	ldrb	r2, [r4, r3]
 800e57e:	2a2f      	cmp	r2, #47	@ 0x2f
 800e580:	d03c      	beq.n	800e5fc <rmw_validate_full_topic_name+0xbc>
 800e582:	1e63      	subs	r3, r4, #1
 800e584:	eb03 0800 	add.w	r8, r3, r0
 800e588:	f1c4 0e01 	rsb	lr, r4, #1
 800e58c:	eb0e 0703 	add.w	r7, lr, r3
 800e590:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e594:	f021 0220 	bic.w	r2, r1, #32
 800e598:	3a41      	subs	r2, #65	@ 0x41
 800e59a:	2a19      	cmp	r2, #25
 800e59c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 800e5a0:	d90b      	bls.n	800e5ba <rmw_validate_full_topic_name+0x7a>
 800e5a2:	295f      	cmp	r1, #95	@ 0x5f
 800e5a4:	d009      	beq.n	800e5ba <rmw_validate_full_topic_name+0x7a>
 800e5a6:	f1bc 0f0a 	cmp.w	ip, #10
 800e5aa:	d906      	bls.n	800e5ba <rmw_validate_full_topic_name+0x7a>
 800e5ac:	2304      	movs	r3, #4
 800e5ae:	602b      	str	r3, [r5, #0]
 800e5b0:	2e00      	cmp	r6, #0
 800e5b2:	d0df      	beq.n	800e574 <rmw_validate_full_topic_name+0x34>
 800e5b4:	6037      	str	r7, [r6, #0]
 800e5b6:	2000      	movs	r0, #0
 800e5b8:	e7d6      	b.n	800e568 <rmw_validate_full_topic_name+0x28>
 800e5ba:	4543      	cmp	r3, r8
 800e5bc:	d1e6      	bne.n	800e58c <rmw_validate_full_topic_name+0x4c>
 800e5be:	4f1a      	ldr	r7, [pc, #104]	@ (800e628 <rmw_validate_full_topic_name+0xe8>)
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	e004      	b.n	800e5ce <rmw_validate_full_topic_name+0x8e>
 800e5c4:	4298      	cmp	r0, r3
 800e5c6:	f104 0401 	add.w	r4, r4, #1
 800e5ca:	d91c      	bls.n	800e606 <rmw_validate_full_topic_name+0xc6>
 800e5cc:	4613      	mov	r3, r2
 800e5ce:	4298      	cmp	r0, r3
 800e5d0:	f103 0201 	add.w	r2, r3, #1
 800e5d4:	d0f6      	beq.n	800e5c4 <rmw_validate_full_topic_name+0x84>
 800e5d6:	7821      	ldrb	r1, [r4, #0]
 800e5d8:	292f      	cmp	r1, #47	@ 0x2f
 800e5da:	d1f3      	bne.n	800e5c4 <rmw_validate_full_topic_name+0x84>
 800e5dc:	7861      	ldrb	r1, [r4, #1]
 800e5de:	292f      	cmp	r1, #47	@ 0x2f
 800e5e0:	d01c      	beq.n	800e61c <rmw_validate_full_topic_name+0xdc>
 800e5e2:	5dc9      	ldrb	r1, [r1, r7]
 800e5e4:	0749      	lsls	r1, r1, #29
 800e5e6:	d5ed      	bpl.n	800e5c4 <rmw_validate_full_topic_name+0x84>
 800e5e8:	2206      	movs	r2, #6
 800e5ea:	602a      	str	r2, [r5, #0]
 800e5ec:	2e00      	cmp	r6, #0
 800e5ee:	d0c1      	beq.n	800e574 <rmw_validate_full_topic_name+0x34>
 800e5f0:	6033      	str	r3, [r6, #0]
 800e5f2:	e7bf      	b.n	800e574 <rmw_validate_full_topic_name+0x34>
 800e5f4:	200b      	movs	r0, #11
 800e5f6:	4770      	bx	lr
 800e5f8:	200b      	movs	r0, #11
 800e5fa:	e7b5      	b.n	800e568 <rmw_validate_full_topic_name+0x28>
 800e5fc:	2203      	movs	r2, #3
 800e5fe:	602a      	str	r2, [r5, #0]
 800e600:	2e00      	cmp	r6, #0
 800e602:	d1f5      	bne.n	800e5f0 <rmw_validate_full_topic_name+0xb0>
 800e604:	e7b6      	b.n	800e574 <rmw_validate_full_topic_name+0x34>
 800e606:	28f7      	cmp	r0, #247	@ 0xf7
 800e608:	d802      	bhi.n	800e610 <rmw_validate_full_topic_name+0xd0>
 800e60a:	2000      	movs	r0, #0
 800e60c:	6028      	str	r0, [r5, #0]
 800e60e:	e7ab      	b.n	800e568 <rmw_validate_full_topic_name+0x28>
 800e610:	2307      	movs	r3, #7
 800e612:	602b      	str	r3, [r5, #0]
 800e614:	2e00      	cmp	r6, #0
 800e616:	d0ad      	beq.n	800e574 <rmw_validate_full_topic_name+0x34>
 800e618:	23f6      	movs	r3, #246	@ 0xf6
 800e61a:	e7e9      	b.n	800e5f0 <rmw_validate_full_topic_name+0xb0>
 800e61c:	2205      	movs	r2, #5
 800e61e:	602a      	str	r2, [r5, #0]
 800e620:	2e00      	cmp	r6, #0
 800e622:	d1e5      	bne.n	800e5f0 <rmw_validate_full_topic_name+0xb0>
 800e624:	e7a6      	b.n	800e574 <rmw_validate_full_topic_name+0x34>
 800e626:	bf00      	nop
 800e628:	0801aa9a 	.word	0x0801aa9a

0800e62c <rmw_validate_namespace_with_size>:
 800e62c:	b340      	cbz	r0, 800e680 <rmw_validate_namespace_with_size+0x54>
 800e62e:	b570      	push	{r4, r5, r6, lr}
 800e630:	4614      	mov	r4, r2
 800e632:	b0c2      	sub	sp, #264	@ 0x108
 800e634:	b332      	cbz	r2, 800e684 <rmw_validate_namespace_with_size+0x58>
 800e636:	2901      	cmp	r1, #1
 800e638:	460d      	mov	r5, r1
 800e63a:	461e      	mov	r6, r3
 800e63c:	d102      	bne.n	800e644 <rmw_validate_namespace_with_size+0x18>
 800e63e:	7803      	ldrb	r3, [r0, #0]
 800e640:	2b2f      	cmp	r3, #47	@ 0x2f
 800e642:	d012      	beq.n	800e66a <rmw_validate_namespace_with_size+0x3e>
 800e644:	aa01      	add	r2, sp, #4
 800e646:	4669      	mov	r1, sp
 800e648:	f7ff ff7a 	bl	800e540 <rmw_validate_full_topic_name>
 800e64c:	b978      	cbnz	r0, 800e66e <rmw_validate_namespace_with_size+0x42>
 800e64e:	9b00      	ldr	r3, [sp, #0]
 800e650:	b14b      	cbz	r3, 800e666 <rmw_validate_namespace_with_size+0x3a>
 800e652:	2b07      	cmp	r3, #7
 800e654:	d007      	beq.n	800e666 <rmw_validate_namespace_with_size+0x3a>
 800e656:	1e5a      	subs	r2, r3, #1
 800e658:	2a05      	cmp	r2, #5
 800e65a:	d82b      	bhi.n	800e6b4 <rmw_validate_namespace_with_size+0x88>
 800e65c:	e8df f002 	tbb	[pc, r2]
 800e660:	1e212427 	.word	0x1e212427
 800e664:	141b      	.short	0x141b
 800e666:	2df5      	cmp	r5, #245	@ 0xf5
 800e668:	d803      	bhi.n	800e672 <rmw_validate_namespace_with_size+0x46>
 800e66a:	2000      	movs	r0, #0
 800e66c:	6020      	str	r0, [r4, #0]
 800e66e:	b042      	add	sp, #264	@ 0x108
 800e670:	bd70      	pop	{r4, r5, r6, pc}
 800e672:	2307      	movs	r3, #7
 800e674:	6023      	str	r3, [r4, #0]
 800e676:	2e00      	cmp	r6, #0
 800e678:	d0f9      	beq.n	800e66e <rmw_validate_namespace_with_size+0x42>
 800e67a:	23f4      	movs	r3, #244	@ 0xf4
 800e67c:	6033      	str	r3, [r6, #0]
 800e67e:	e7f6      	b.n	800e66e <rmw_validate_namespace_with_size+0x42>
 800e680:	200b      	movs	r0, #11
 800e682:	4770      	bx	lr
 800e684:	200b      	movs	r0, #11
 800e686:	e7f2      	b.n	800e66e <rmw_validate_namespace_with_size+0x42>
 800e688:	2306      	movs	r3, #6
 800e68a:	6023      	str	r3, [r4, #0]
 800e68c:	2e00      	cmp	r6, #0
 800e68e:	d0ee      	beq.n	800e66e <rmw_validate_namespace_with_size+0x42>
 800e690:	9b01      	ldr	r3, [sp, #4]
 800e692:	6033      	str	r3, [r6, #0]
 800e694:	e7eb      	b.n	800e66e <rmw_validate_namespace_with_size+0x42>
 800e696:	2305      	movs	r3, #5
 800e698:	6023      	str	r3, [r4, #0]
 800e69a:	e7f7      	b.n	800e68c <rmw_validate_namespace_with_size+0x60>
 800e69c:	2304      	movs	r3, #4
 800e69e:	6023      	str	r3, [r4, #0]
 800e6a0:	e7f4      	b.n	800e68c <rmw_validate_namespace_with_size+0x60>
 800e6a2:	2303      	movs	r3, #3
 800e6a4:	6023      	str	r3, [r4, #0]
 800e6a6:	e7f1      	b.n	800e68c <rmw_validate_namespace_with_size+0x60>
 800e6a8:	2302      	movs	r3, #2
 800e6aa:	6023      	str	r3, [r4, #0]
 800e6ac:	e7ee      	b.n	800e68c <rmw_validate_namespace_with_size+0x60>
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	6023      	str	r3, [r4, #0]
 800e6b2:	e7eb      	b.n	800e68c <rmw_validate_namespace_with_size+0x60>
 800e6b4:	4a03      	ldr	r2, [pc, #12]	@ (800e6c4 <rmw_validate_namespace_with_size+0x98>)
 800e6b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e6ba:	a802      	add	r0, sp, #8
 800e6bc:	f7ff fd42 	bl	800e144 <rcutils_snprintf>
 800e6c0:	2001      	movs	r0, #1
 800e6c2:	e7d4      	b.n	800e66e <rmw_validate_namespace_with_size+0x42>
 800e6c4:	08019db4 	.word	0x08019db4

0800e6c8 <rmw_validate_namespace>:
 800e6c8:	b168      	cbz	r0, 800e6e6 <rmw_validate_namespace+0x1e>
 800e6ca:	b570      	push	{r4, r5, r6, lr}
 800e6cc:	460d      	mov	r5, r1
 800e6ce:	4616      	mov	r6, r2
 800e6d0:	4604      	mov	r4, r0
 800e6d2:	f7f1 fdaf 	bl	8000234 <strlen>
 800e6d6:	4633      	mov	r3, r6
 800e6d8:	4601      	mov	r1, r0
 800e6da:	462a      	mov	r2, r5
 800e6dc:	4620      	mov	r0, r4
 800e6de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e6e2:	f7ff bfa3 	b.w	800e62c <rmw_validate_namespace_with_size>
 800e6e6:	200b      	movs	r0, #11
 800e6e8:	4770      	bx	lr
 800e6ea:	bf00      	nop

0800e6ec <rmw_namespace_validation_result_string>:
 800e6ec:	2807      	cmp	r0, #7
 800e6ee:	bf9a      	itte	ls
 800e6f0:	4b02      	ldrls	r3, [pc, #8]	@ (800e6fc <rmw_namespace_validation_result_string+0x10>)
 800e6f2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e6f6:	4802      	ldrhi	r0, [pc, #8]	@ (800e700 <rmw_namespace_validation_result_string+0x14>)
 800e6f8:	4770      	bx	lr
 800e6fa:	bf00      	nop
 800e6fc:	08019fac 	.word	0x08019fac
 800e700:	08019e04 	.word	0x08019e04

0800e704 <rmw_validate_node_name>:
 800e704:	2800      	cmp	r0, #0
 800e706:	d03b      	beq.n	800e780 <rmw_validate_node_name+0x7c>
 800e708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e70c:	460d      	mov	r5, r1
 800e70e:	2900      	cmp	r1, #0
 800e710:	d038      	beq.n	800e784 <rmw_validate_node_name+0x80>
 800e712:	4616      	mov	r6, r2
 800e714:	4604      	mov	r4, r0
 800e716:	f7f1 fd8d 	bl	8000234 <strlen>
 800e71a:	b1e0      	cbz	r0, 800e756 <rmw_validate_node_name+0x52>
 800e71c:	1e63      	subs	r3, r4, #1
 800e71e:	eb03 0800 	add.w	r8, r3, r0
 800e722:	f1c4 0101 	rsb	r1, r4, #1
 800e726:	18cf      	adds	r7, r1, r3
 800e728:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800e72c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800e730:	f02e 0c20 	bic.w	ip, lr, #32
 800e734:	2a09      	cmp	r2, #9
 800e736:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800e73a:	d914      	bls.n	800e766 <rmw_validate_node_name+0x62>
 800e73c:	f1bc 0f19 	cmp.w	ip, #25
 800e740:	d911      	bls.n	800e766 <rmw_validate_node_name+0x62>
 800e742:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800e746:	d00e      	beq.n	800e766 <rmw_validate_node_name+0x62>
 800e748:	2302      	movs	r3, #2
 800e74a:	602b      	str	r3, [r5, #0]
 800e74c:	b106      	cbz	r6, 800e750 <rmw_validate_node_name+0x4c>
 800e74e:	6037      	str	r7, [r6, #0]
 800e750:	2000      	movs	r0, #0
 800e752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e756:	2301      	movs	r3, #1
 800e758:	602b      	str	r3, [r5, #0]
 800e75a:	2e00      	cmp	r6, #0
 800e75c:	d0f8      	beq.n	800e750 <rmw_validate_node_name+0x4c>
 800e75e:	2000      	movs	r0, #0
 800e760:	6030      	str	r0, [r6, #0]
 800e762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e766:	4543      	cmp	r3, r8
 800e768:	d1dd      	bne.n	800e726 <rmw_validate_node_name+0x22>
 800e76a:	7822      	ldrb	r2, [r4, #0]
 800e76c:	4b0d      	ldr	r3, [pc, #52]	@ (800e7a4 <rmw_validate_node_name+0xa0>)
 800e76e:	5cd3      	ldrb	r3, [r2, r3]
 800e770:	f013 0304 	ands.w	r3, r3, #4
 800e774:	d110      	bne.n	800e798 <rmw_validate_node_name+0x94>
 800e776:	28ff      	cmp	r0, #255	@ 0xff
 800e778:	d806      	bhi.n	800e788 <rmw_validate_node_name+0x84>
 800e77a:	602b      	str	r3, [r5, #0]
 800e77c:	4618      	mov	r0, r3
 800e77e:	e7e8      	b.n	800e752 <rmw_validate_node_name+0x4e>
 800e780:	200b      	movs	r0, #11
 800e782:	4770      	bx	lr
 800e784:	200b      	movs	r0, #11
 800e786:	e7e4      	b.n	800e752 <rmw_validate_node_name+0x4e>
 800e788:	2204      	movs	r2, #4
 800e78a:	602a      	str	r2, [r5, #0]
 800e78c:	2e00      	cmp	r6, #0
 800e78e:	d0df      	beq.n	800e750 <rmw_validate_node_name+0x4c>
 800e790:	22fe      	movs	r2, #254	@ 0xfe
 800e792:	6032      	str	r2, [r6, #0]
 800e794:	4618      	mov	r0, r3
 800e796:	e7dc      	b.n	800e752 <rmw_validate_node_name+0x4e>
 800e798:	2303      	movs	r3, #3
 800e79a:	602b      	str	r3, [r5, #0]
 800e79c:	2e00      	cmp	r6, #0
 800e79e:	d1de      	bne.n	800e75e <rmw_validate_node_name+0x5a>
 800e7a0:	e7d6      	b.n	800e750 <rmw_validate_node_name+0x4c>
 800e7a2:	bf00      	nop
 800e7a4:	0801aa9a 	.word	0x0801aa9a

0800e7a8 <rmw_node_name_validation_result_string>:
 800e7a8:	2804      	cmp	r0, #4
 800e7aa:	bf9a      	itte	ls
 800e7ac:	4b02      	ldrls	r3, [pc, #8]	@ (800e7b8 <rmw_node_name_validation_result_string+0x10>)
 800e7ae:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e7b2:	4802      	ldrhi	r0, [pc, #8]	@ (800e7bc <rmw_node_name_validation_result_string+0x14>)
 800e7b4:	4770      	bx	lr
 800e7b6:	bf00      	nop
 800e7b8:	0801a0b8 	.word	0x0801a0b8
 800e7bc:	08019fcc 	.word	0x08019fcc

0800e7c0 <rmw_uros_set_custom_transport>:
 800e7c0:	b470      	push	{r4, r5, r6}
 800e7c2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800e7c6:	b162      	cbz	r2, 800e7e2 <rmw_uros_set_custom_transport+0x22>
 800e7c8:	b15b      	cbz	r3, 800e7e2 <rmw_uros_set_custom_transport+0x22>
 800e7ca:	b155      	cbz	r5, 800e7e2 <rmw_uros_set_custom_transport+0x22>
 800e7cc:	b14e      	cbz	r6, 800e7e2 <rmw_uros_set_custom_transport+0x22>
 800e7ce:	4c06      	ldr	r4, [pc, #24]	@ (800e7e8 <rmw_uros_set_custom_transport+0x28>)
 800e7d0:	7020      	strb	r0, [r4, #0]
 800e7d2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800e7d6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e7da:	6166      	str	r6, [r4, #20]
 800e7dc:	2000      	movs	r0, #0
 800e7de:	bc70      	pop	{r4, r5, r6}
 800e7e0:	4770      	bx	lr
 800e7e2:	200b      	movs	r0, #11
 800e7e4:	bc70      	pop	{r4, r5, r6}
 800e7e6:	4770      	bx	lr
 800e7e8:	20006718 	.word	0x20006718

0800e7ec <rmw_create_client>:
 800e7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7f0:	b091      	sub	sp, #68	@ 0x44
 800e7f2:	2800      	cmp	r0, #0
 800e7f4:	f000 80ba 	beq.w	800e96c <rmw_create_client+0x180>
 800e7f8:	4689      	mov	r9, r1
 800e7fa:	2900      	cmp	r1, #0
 800e7fc:	f000 80b6 	beq.w	800e96c <rmw_create_client+0x180>
 800e800:	4606      	mov	r6, r0
 800e802:	6800      	ldr	r0, [r0, #0]
 800e804:	4614      	mov	r4, r2
 800e806:	461d      	mov	r5, r3
 800e808:	f001 fc46 	bl	8010098 <is_uxrce_rmw_identifier_valid>
 800e80c:	2800      	cmp	r0, #0
 800e80e:	f000 80ad 	beq.w	800e96c <rmw_create_client+0x180>
 800e812:	2c00      	cmp	r4, #0
 800e814:	f000 80aa 	beq.w	800e96c <rmw_create_client+0x180>
 800e818:	7823      	ldrb	r3, [r4, #0]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	f000 80a6 	beq.w	800e96c <rmw_create_client+0x180>
 800e820:	2d00      	cmp	r5, #0
 800e822:	f000 80a3 	beq.w	800e96c <rmw_create_client+0x180>
 800e826:	4854      	ldr	r0, [pc, #336]	@ (800e978 <rmw_create_client+0x18c>)
 800e828:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800e82c:	f008 fa14 	bl	8016c58 <get_memory>
 800e830:	4606      	mov	r6, r0
 800e832:	2800      	cmp	r0, #0
 800e834:	f000 809b 	beq.w	800e96e <rmw_create_client+0x182>
 800e838:	6887      	ldr	r7, [r0, #8]
 800e83a:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800e83e:	f000 f90b 	bl	800ea58 <rmw_get_implementation_identifier>
 800e842:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 800e846:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800e848:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800e84c:	4620      	mov	r0, r4
 800e84e:	f7f1 fcf1 	bl	8000234 <strlen>
 800e852:	1c42      	adds	r2, r0, #1
 800e854:	2a3c      	cmp	r2, #60	@ 0x3c
 800e856:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 800e85a:	f200 8084 	bhi.w	800e966 <rmw_create_client+0x17a>
 800e85e:	4621      	mov	r1, r4
 800e860:	4650      	mov	r0, sl
 800e862:	f00a f9de 	bl	8018c22 <memcpy>
 800e866:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e86a:	4629      	mov	r1, r5
 800e86c:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 800e870:	677b      	str	r3, [r7, #116]	@ 0x74
 800e872:	2250      	movs	r2, #80	@ 0x50
 800e874:	f107 0020 	add.w	r0, r7, #32
 800e878:	f00a f9d3 	bl	8018c22 <memcpy>
 800e87c:	493f      	ldr	r1, [pc, #252]	@ (800e97c <rmw_create_client+0x190>)
 800e87e:	4648      	mov	r0, r9
 800e880:	f001 fc24 	bl	80100cc <get_service_typesupport_handle>
 800e884:	2800      	cmp	r0, #0
 800e886:	d06e      	beq.n	800e966 <rmw_create_client+0x17a>
 800e888:	6843      	ldr	r3, [r0, #4]
 800e88a:	617b      	str	r3, [r7, #20]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d06a      	beq.n	800e966 <rmw_create_client+0x17a>
 800e890:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e894:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 800e984 <rmw_create_client+0x198>
 800e898:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 800e988 <rmw_create_client+0x19c>
 800e89c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e8a0:	2107      	movs	r1, #7
 800e8a2:	f8b3 05a0 	ldrh.w	r0, [r3, #1440]	@ 0x5a0
 800e8a6:	1c42      	adds	r2, r0, #1
 800e8a8:	f8a3 25a0 	strh.w	r2, [r3, #1440]	@ 0x5a0
 800e8ac:	f002 f88c 	bl	80109c8 <uxr_object_id>
 800e8b0:	2364      	movs	r3, #100	@ 0x64
 800e8b2:	6138      	str	r0, [r7, #16]
 800e8b4:	4652      	mov	r2, sl
 800e8b6:	6978      	ldr	r0, [r7, #20]
 800e8b8:	4649      	mov	r1, r9
 800e8ba:	f001 fb3b 	bl	800ff34 <generate_service_types>
 800e8be:	2800      	cmp	r0, #0
 800e8c0:	d051      	beq.n	800e966 <rmw_create_client+0x17a>
 800e8c2:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 800e98c <rmw_create_client+0x1a0>
 800e8c6:	4a2e      	ldr	r2, [pc, #184]	@ (800e980 <rmw_create_client+0x194>)
 800e8c8:	233c      	movs	r3, #60	@ 0x3c
 800e8ca:	4659      	mov	r1, fp
 800e8cc:	4620      	mov	r0, r4
 800e8ce:	f001 faff 	bl	800fed0 <generate_service_topics>
 800e8d2:	2800      	cmp	r0, #0
 800e8d4:	d047      	beq.n	800e966 <rmw_create_client+0x17a>
 800e8d6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e8da:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800e8de:	a80c      	add	r0, sp, #48	@ 0x30
 800e8e0:	4629      	mov	r1, r5
 800e8e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e8e6:	f001 fad9 	bl	800fe9c <convert_qos_profile>
 800e8ea:	4a25      	ldr	r2, [pc, #148]	@ (800e980 <rmw_create_client+0x194>)
 800e8ec:	9400      	str	r4, [sp, #0]
 800e8ee:	e9cd b203 	strd	fp, r2, [sp, #12]
 800e8f2:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 800e8f6:	a80c      	add	r0, sp, #48	@ 0x30
 800e8f8:	c803      	ldmia	r0, {r0, r1}
 800e8fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8fc:	9005      	str	r0, [sp, #20]
 800e8fe:	9a08      	ldr	r2, [sp, #32]
 800e900:	f8ad 1018 	strh.w	r1, [sp, #24]
 800e904:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e908:	2306      	movs	r3, #6
 800e90a:	9307      	str	r3, [sp, #28]
 800e90c:	6811      	ldr	r1, [r2, #0]
 800e90e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e912:	693a      	ldr	r2, [r7, #16]
 800e914:	f001 ff5c 	bl	80107d0 <uxr_buffer_create_requester_bin>
 800e918:	4602      	mov	r2, r0
 800e91a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800e91e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e922:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e926:	f001 fa9d 	bl	800fe64 <run_xrce_session>
 800e92a:	b1e0      	cbz	r0, 800e966 <rmw_create_client+0x17a>
 800e92c:	7a2b      	ldrb	r3, [r5, #8]
 800e92e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800e932:	2200      	movs	r2, #0
 800e934:	2b02      	cmp	r3, #2
 800e936:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800e93a:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 800e93e:	bf0c      	ite	eq
 800e940:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 800e944:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 800e948:	673a      	str	r2, [r7, #112]	@ 0x70
 800e94a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e94c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800e950:	ab0e      	add	r3, sp, #56	@ 0x38
 800e952:	9300      	str	r3, [sp, #0]
 800e954:	6811      	ldr	r1, [r2, #0]
 800e956:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e958:	693a      	ldr	r2, [r7, #16]
 800e95a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e95e:	f002 f863 	bl	8010a28 <uxr_buffer_request_data>
 800e962:	8338      	strh	r0, [r7, #24]
 800e964:	e003      	b.n	800e96e <rmw_create_client+0x182>
 800e966:	4630      	mov	r0, r6
 800e968:	f001 f966 	bl	800fc38 <rmw_uxrce_fini_client_memory>
 800e96c:	2600      	movs	r6, #0
 800e96e:	4630      	mov	r0, r6
 800e970:	b011      	add	sp, #68	@ 0x44
 800e972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e976:	bf00      	nop
 800e978:	200068b0 	.word	0x200068b0
 800e97c:	08019aa8 	.word	0x08019aa8
 800e980:	200067d4 	.word	0x200067d4
 800e984:	20006810 	.word	0x20006810
 800e988:	20006770 	.word	0x20006770
 800e98c:	20006734 	.word	0x20006734

0800e990 <rmw_destroy_client>:
 800e990:	b570      	push	{r4, r5, r6, lr}
 800e992:	b128      	cbz	r0, 800e9a0 <rmw_destroy_client+0x10>
 800e994:	4604      	mov	r4, r0
 800e996:	6800      	ldr	r0, [r0, #0]
 800e998:	460d      	mov	r5, r1
 800e99a:	f001 fb7d 	bl	8010098 <is_uxrce_rmw_identifier_valid>
 800e99e:	b910      	cbnz	r0, 800e9a6 <rmw_destroy_client+0x16>
 800e9a0:	2401      	movs	r4, #1
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	bd70      	pop	{r4, r5, r6, pc}
 800e9a6:	6863      	ldr	r3, [r4, #4]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d0f9      	beq.n	800e9a0 <rmw_destroy_client+0x10>
 800e9ac:	2d00      	cmp	r5, #0
 800e9ae:	d0f7      	beq.n	800e9a0 <rmw_destroy_client+0x10>
 800e9b0:	6828      	ldr	r0, [r5, #0]
 800e9b2:	f001 fb71 	bl	8010098 <is_uxrce_rmw_identifier_valid>
 800e9b6:	2800      	cmp	r0, #0
 800e9b8:	d0f2      	beq.n	800e9a0 <rmw_destroy_client+0x10>
 800e9ba:	686e      	ldr	r6, [r5, #4]
 800e9bc:	2e00      	cmp	r6, #0
 800e9be:	d0ef      	beq.n	800e9a0 <rmw_destroy_client+0x10>
 800e9c0:	6864      	ldr	r4, [r4, #4]
 800e9c2:	6932      	ldr	r2, [r6, #16]
 800e9c4:	6920      	ldr	r0, [r4, #16]
 800e9c6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e9ca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e9ce:	6819      	ldr	r1, [r3, #0]
 800e9d0:	f002 f864 	bl	8010a9c <uxr_buffer_cancel_data>
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	6920      	ldr	r0, [r4, #16]
 800e9d8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e9dc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e9e0:	f001 fa40 	bl	800fe64 <run_xrce_session>
 800e9e4:	6920      	ldr	r0, [r4, #16]
 800e9e6:	6932      	ldr	r2, [r6, #16]
 800e9e8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e9ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e9f0:	6819      	ldr	r1, [r3, #0]
 800e9f2:	f001 fd93 	bl	801051c <uxr_buffer_delete_entity>
 800e9f6:	4602      	mov	r2, r0
 800e9f8:	6920      	ldr	r0, [r4, #16]
 800e9fa:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e9fe:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ea02:	f001 fa2f 	bl	800fe64 <run_xrce_session>
 800ea06:	2800      	cmp	r0, #0
 800ea08:	4628      	mov	r0, r5
 800ea0a:	bf14      	ite	ne
 800ea0c:	2400      	movne	r4, #0
 800ea0e:	2402      	moveq	r4, #2
 800ea10:	f001 f912 	bl	800fc38 <rmw_uxrce_fini_client_memory>
 800ea14:	e7c5      	b.n	800e9a2 <rmw_destroy_client+0x12>
 800ea16:	bf00      	nop

0800ea18 <rmw_client_request_publisher_get_actual_qos>:
 800ea18:	b150      	cbz	r0, 800ea30 <rmw_client_request_publisher_get_actual_qos+0x18>
 800ea1a:	b508      	push	{r3, lr}
 800ea1c:	460b      	mov	r3, r1
 800ea1e:	b149      	cbz	r1, 800ea34 <rmw_client_request_publisher_get_actual_qos+0x1c>
 800ea20:	6841      	ldr	r1, [r0, #4]
 800ea22:	2250      	movs	r2, #80	@ 0x50
 800ea24:	3120      	adds	r1, #32
 800ea26:	4618      	mov	r0, r3
 800ea28:	f00a f8fb 	bl	8018c22 <memcpy>
 800ea2c:	2000      	movs	r0, #0
 800ea2e:	bd08      	pop	{r3, pc}
 800ea30:	200b      	movs	r0, #11
 800ea32:	4770      	bx	lr
 800ea34:	200b      	movs	r0, #11
 800ea36:	bd08      	pop	{r3, pc}

0800ea38 <rmw_client_response_subscription_get_actual_qos>:
 800ea38:	b150      	cbz	r0, 800ea50 <rmw_client_response_subscription_get_actual_qos+0x18>
 800ea3a:	b508      	push	{r3, lr}
 800ea3c:	460b      	mov	r3, r1
 800ea3e:	b149      	cbz	r1, 800ea54 <rmw_client_response_subscription_get_actual_qos+0x1c>
 800ea40:	6841      	ldr	r1, [r0, #4]
 800ea42:	2250      	movs	r2, #80	@ 0x50
 800ea44:	3120      	adds	r1, #32
 800ea46:	4618      	mov	r0, r3
 800ea48:	f00a f8eb 	bl	8018c22 <memcpy>
 800ea4c:	2000      	movs	r0, #0
 800ea4e:	bd08      	pop	{r3, pc}
 800ea50:	200b      	movs	r0, #11
 800ea52:	4770      	bx	lr
 800ea54:	200b      	movs	r0, #11
 800ea56:	bd08      	pop	{r3, pc}

0800ea58 <rmw_get_implementation_identifier>:
 800ea58:	4b01      	ldr	r3, [pc, #4]	@ (800ea60 <rmw_get_implementation_identifier+0x8>)
 800ea5a:	6818      	ldr	r0, [r3, #0]
 800ea5c:	4770      	bx	lr
 800ea5e:	bf00      	nop
 800ea60:	0801a924 	.word	0x0801a924

0800ea64 <rmw_init_options_init>:
 800ea64:	b084      	sub	sp, #16
 800ea66:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea68:	b083      	sub	sp, #12
 800ea6a:	ad09      	add	r5, sp, #36	@ 0x24
 800ea6c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800ea70:	b130      	cbz	r0, 800ea80 <rmw_init_options_init+0x1c>
 800ea72:	4604      	mov	r4, r0
 800ea74:	4628      	mov	r0, r5
 800ea76:	f7ff f979 	bl	800dd6c <rcutils_allocator_is_valid>
 800ea7a:	b108      	cbz	r0, 800ea80 <rmw_init_options_init+0x1c>
 800ea7c:	68a6      	ldr	r6, [r4, #8]
 800ea7e:	b12e      	cbz	r6, 800ea8c <rmw_init_options_init+0x28>
 800ea80:	200b      	movs	r0, #11
 800ea82:	b003      	add	sp, #12
 800ea84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ea88:	b004      	add	sp, #16
 800ea8a:	4770      	bx	lr
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	2300      	movs	r3, #0
 800ea90:	e9c4 2300 	strd	r2, r3, [r4]
 800ea94:	4b22      	ldr	r3, [pc, #136]	@ (800eb20 <rmw_init_options_init+0xbc>)
 800ea96:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800eb30 <rmw_init_options_init+0xcc>
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	60a3      	str	r3, [r4, #8]
 800ea9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eaa0:	f104 0c20 	add.w	ip, r4, #32
 800eaa4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eaa8:	466f      	mov	r7, sp
 800eaaa:	682b      	ldr	r3, [r5, #0]
 800eaac:	f8cc 3000 	str.w	r3, [ip]
 800eab0:	4638      	mov	r0, r7
 800eab2:	f8c4 e01c 	str.w	lr, [r4, #28]
 800eab6:	60e6      	str	r6, [r4, #12]
 800eab8:	f7ff fd3e 	bl	800e538 <rmw_get_default_security_options>
 800eabc:	e897 0003 	ldmia.w	r7, {r0, r1}
 800eac0:	f104 0310 	add.w	r3, r4, #16
 800eac4:	e883 0003 	stmia.w	r3, {r0, r1}
 800eac8:	2203      	movs	r2, #3
 800eaca:	4816      	ldr	r0, [pc, #88]	@ (800eb24 <rmw_init_options_init+0xc0>)
 800eacc:	4916      	ldr	r1, [pc, #88]	@ (800eb28 <rmw_init_options_init+0xc4>)
 800eace:	7626      	strb	r6, [r4, #24]
 800ead0:	f000 fff2 	bl	800fab8 <rmw_uxrce_init_init_options_impl_memory>
 800ead4:	4813      	ldr	r0, [pc, #76]	@ (800eb24 <rmw_init_options_init+0xc0>)
 800ead6:	f008 f8bf 	bl	8016c58 <get_memory>
 800eada:	b1f0      	cbz	r0, 800eb1a <rmw_init_options_init+0xb6>
 800eadc:	4a13      	ldr	r2, [pc, #76]	@ (800eb2c <rmw_init_options_init+0xc8>)
 800eade:	6883      	ldr	r3, [r0, #8]
 800eae0:	6851      	ldr	r1, [r2, #4]
 800eae2:	7810      	ldrb	r0, [r2, #0]
 800eae4:	6363      	str	r3, [r4, #52]	@ 0x34
 800eae6:	7418      	strb	r0, [r3, #16]
 800eae8:	6159      	str	r1, [r3, #20]
 800eaea:	68d1      	ldr	r1, [r2, #12]
 800eaec:	61d9      	str	r1, [r3, #28]
 800eaee:	6911      	ldr	r1, [r2, #16]
 800eaf0:	6219      	str	r1, [r3, #32]
 800eaf2:	6951      	ldr	r1, [r2, #20]
 800eaf4:	6892      	ldr	r2, [r2, #8]
 800eaf6:	619a      	str	r2, [r3, #24]
 800eaf8:	6259      	str	r1, [r3, #36]	@ 0x24
 800eafa:	f003 ff83 	bl	8012a04 <uxr_nanos>
 800eafe:	f009 fc11 	bl	8018324 <srand>
 800eb02:	f009 fc3d 	bl	8018380 <rand>
 800eb06:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eb08:	6298      	str	r0, [r3, #40]	@ 0x28
 800eb0a:	2800      	cmp	r0, #0
 800eb0c:	d0f9      	beq.n	800eb02 <rmw_init_options_init+0x9e>
 800eb0e:	2000      	movs	r0, #0
 800eb10:	b003      	add	sp, #12
 800eb12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800eb16:	b004      	add	sp, #16
 800eb18:	4770      	bx	lr
 800eb1a:	2001      	movs	r0, #1
 800eb1c:	e7b1      	b.n	800ea82 <rmw_init_options_init+0x1e>
 800eb1e:	bf00      	nop
 800eb20:	0801a924 	.word	0x0801a924
 800eb24:	2000b0a4 	.word	0x2000b0a4
 800eb28:	20006a08 	.word	0x20006a08
 800eb2c:	20006718 	.word	0x20006718
 800eb30:	08019bcc 	.word	0x08019bcc

0800eb34 <rmw_init_options_copy>:
 800eb34:	b570      	push	{r4, r5, r6, lr}
 800eb36:	b158      	cbz	r0, 800eb50 <rmw_init_options_copy+0x1c>
 800eb38:	460d      	mov	r5, r1
 800eb3a:	b149      	cbz	r1, 800eb50 <rmw_init_options_copy+0x1c>
 800eb3c:	4604      	mov	r4, r0
 800eb3e:	6880      	ldr	r0, [r0, #8]
 800eb40:	b120      	cbz	r0, 800eb4c <rmw_init_options_copy+0x18>
 800eb42:	4b1e      	ldr	r3, [pc, #120]	@ (800ebbc <rmw_init_options_copy+0x88>)
 800eb44:	6819      	ldr	r1, [r3, #0]
 800eb46:	f7f1 fb6b 	bl	8000220 <strcmp>
 800eb4a:	bb90      	cbnz	r0, 800ebb2 <rmw_init_options_copy+0x7e>
 800eb4c:	68ab      	ldr	r3, [r5, #8]
 800eb4e:	b113      	cbz	r3, 800eb56 <rmw_init_options_copy+0x22>
 800eb50:	250b      	movs	r5, #11
 800eb52:	4628      	mov	r0, r5
 800eb54:	bd70      	pop	{r4, r5, r6, pc}
 800eb56:	4623      	mov	r3, r4
 800eb58:	462a      	mov	r2, r5
 800eb5a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800eb5e:	f8d3 c000 	ldr.w	ip, [r3]
 800eb62:	6858      	ldr	r0, [r3, #4]
 800eb64:	6899      	ldr	r1, [r3, #8]
 800eb66:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800eb6a:	f8c2 e00c 	str.w	lr, [r2, #12]
 800eb6e:	3310      	adds	r3, #16
 800eb70:	42b3      	cmp	r3, r6
 800eb72:	f8c2 c000 	str.w	ip, [r2]
 800eb76:	6050      	str	r0, [r2, #4]
 800eb78:	6091      	str	r1, [r2, #8]
 800eb7a:	f102 0210 	add.w	r2, r2, #16
 800eb7e:	d1ee      	bne.n	800eb5e <rmw_init_options_copy+0x2a>
 800eb80:	6819      	ldr	r1, [r3, #0]
 800eb82:	685b      	ldr	r3, [r3, #4]
 800eb84:	480e      	ldr	r0, [pc, #56]	@ (800ebc0 <rmw_init_options_copy+0x8c>)
 800eb86:	6053      	str	r3, [r2, #4]
 800eb88:	6011      	str	r1, [r2, #0]
 800eb8a:	f008 f865 	bl	8016c58 <get_memory>
 800eb8e:	b198      	cbz	r0, 800ebb8 <rmw_init_options_copy+0x84>
 800eb90:	6883      	ldr	r3, [r0, #8]
 800eb92:	636b      	str	r3, [r5, #52]	@ 0x34
 800eb94:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800eb96:	f102 0c10 	add.w	ip, r2, #16
 800eb9a:	f103 0410 	add.w	r4, r3, #16
 800eb9e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eba4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800eba8:	2500      	movs	r5, #0
 800ebaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ebae:	4628      	mov	r0, r5
 800ebb0:	bd70      	pop	{r4, r5, r6, pc}
 800ebb2:	250c      	movs	r5, #12
 800ebb4:	4628      	mov	r0, r5
 800ebb6:	bd70      	pop	{r4, r5, r6, pc}
 800ebb8:	2501      	movs	r5, #1
 800ebba:	e7ca      	b.n	800eb52 <rmw_init_options_copy+0x1e>
 800ebbc:	0801a924 	.word	0x0801a924
 800ebc0:	2000b0a4 	.word	0x2000b0a4

0800ebc4 <rmw_init_options_fini>:
 800ebc4:	2800      	cmp	r0, #0
 800ebc6:	d03d      	beq.n	800ec44 <rmw_init_options_fini+0x80>
 800ebc8:	b510      	push	{r4, lr}
 800ebca:	4604      	mov	r4, r0
 800ebcc:	b08e      	sub	sp, #56	@ 0x38
 800ebce:	3020      	adds	r0, #32
 800ebd0:	f7ff f8cc 	bl	800dd6c <rcutils_allocator_is_valid>
 800ebd4:	b360      	cbz	r0, 800ec30 <rmw_init_options_fini+0x6c>
 800ebd6:	68a0      	ldr	r0, [r4, #8]
 800ebd8:	b120      	cbz	r0, 800ebe4 <rmw_init_options_fini+0x20>
 800ebda:	4b1c      	ldr	r3, [pc, #112]	@ (800ec4c <rmw_init_options_fini+0x88>)
 800ebdc:	6819      	ldr	r1, [r3, #0]
 800ebde:	f7f1 fb1f 	bl	8000220 <strcmp>
 800ebe2:	bb68      	cbnz	r0, 800ec40 <rmw_init_options_fini+0x7c>
 800ebe4:	4b1a      	ldr	r3, [pc, #104]	@ (800ec50 <rmw_init_options_fini+0x8c>)
 800ebe6:	6819      	ldr	r1, [r3, #0]
 800ebe8:	b331      	cbz	r1, 800ec38 <rmw_init_options_fini+0x74>
 800ebea:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800ebec:	e001      	b.n	800ebf2 <rmw_init_options_fini+0x2e>
 800ebee:	6849      	ldr	r1, [r1, #4]
 800ebf0:	b311      	cbz	r1, 800ec38 <rmw_init_options_fini+0x74>
 800ebf2:	688b      	ldr	r3, [r1, #8]
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	d1fa      	bne.n	800ebee <rmw_init_options_fini+0x2a>
 800ebf8:	4815      	ldr	r0, [pc, #84]	@ (800ec50 <rmw_init_options_fini+0x8c>)
 800ebfa:	f008 f83d 	bl	8016c78 <put_memory>
 800ebfe:	4668      	mov	r0, sp
 800ec00:	f7ff fc86 	bl	800e510 <rmw_get_zero_initialized_init_options>
 800ec04:	46ee      	mov	lr, sp
 800ec06:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ec0a:	46a4      	mov	ip, r4
 800ec0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ec14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ec1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec20:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ec24:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ec28:	2300      	movs	r3, #0
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	b00e      	add	sp, #56	@ 0x38
 800ec2e:	bd10      	pop	{r4, pc}
 800ec30:	230b      	movs	r3, #11
 800ec32:	4618      	mov	r0, r3
 800ec34:	b00e      	add	sp, #56	@ 0x38
 800ec36:	bd10      	pop	{r4, pc}
 800ec38:	2301      	movs	r3, #1
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	b00e      	add	sp, #56	@ 0x38
 800ec3e:	bd10      	pop	{r4, pc}
 800ec40:	230c      	movs	r3, #12
 800ec42:	e7f2      	b.n	800ec2a <rmw_init_options_fini+0x66>
 800ec44:	230b      	movs	r3, #11
 800ec46:	4618      	mov	r0, r3
 800ec48:	4770      	bx	lr
 800ec4a:	bf00      	nop
 800ec4c:	0801a924 	.word	0x0801a924
 800ec50:	2000b0a4 	.word	0x2000b0a4

0800ec54 <rmw_init>:
 800ec54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec58:	b083      	sub	sp, #12
 800ec5a:	2800      	cmp	r0, #0
 800ec5c:	f000 80d3 	beq.w	800ee06 <rmw_init+0x1b2>
 800ec60:	460e      	mov	r6, r1
 800ec62:	2900      	cmp	r1, #0
 800ec64:	f000 80cf 	beq.w	800ee06 <rmw_init+0x1b2>
 800ec68:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ec6a:	4605      	mov	r5, r0
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	f000 80ca 	beq.w	800ee06 <rmw_init+0x1b2>
 800ec72:	4b7a      	ldr	r3, [pc, #488]	@ (800ee5c <rmw_init+0x208>)
 800ec74:	6880      	ldr	r0, [r0, #8]
 800ec76:	f8d3 8000 	ldr.w	r8, [r3]
 800ec7a:	b128      	cbz	r0, 800ec88 <rmw_init+0x34>
 800ec7c:	4641      	mov	r1, r8
 800ec7e:	f7f1 facf 	bl	8000220 <strcmp>
 800ec82:	2800      	cmp	r0, #0
 800ec84:	f040 80cb 	bne.w	800ee1e <rmw_init+0x1ca>
 800ec88:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ec8c:	4c74      	ldr	r4, [pc, #464]	@ (800ee60 <rmw_init+0x20c>)
 800ec8e:	4975      	ldr	r1, [pc, #468]	@ (800ee64 <rmw_init+0x210>)
 800ec90:	4875      	ldr	r0, [pc, #468]	@ (800ee68 <rmw_init+0x214>)
 800ec92:	f8c6 8008 	str.w	r8, [r6, #8]
 800ec96:	e9c6 2300 	strd	r2, r3, [r6]
 800ec9a:	68eb      	ldr	r3, [r5, #12]
 800ec9c:	64b3      	str	r3, [r6, #72]	@ 0x48
 800ec9e:	2201      	movs	r2, #1
 800eca0:	f000 feaa 	bl	800f9f8 <rmw_uxrce_init_session_memory>
 800eca4:	4620      	mov	r0, r4
 800eca6:	4971      	ldr	r1, [pc, #452]	@ (800ee6c <rmw_init+0x218>)
 800eca8:	2204      	movs	r2, #4
 800ecaa:	f000 fee5 	bl	800fa78 <rmw_uxrce_init_static_input_buffer_memory>
 800ecae:	2700      	movs	r7, #0
 800ecb0:	486d      	ldr	r0, [pc, #436]	@ (800ee68 <rmw_init+0x214>)
 800ecb2:	7367      	strb	r7, [r4, #13]
 800ecb4:	f007 ffd0 	bl	8016c58 <get_memory>
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	f000 80aa 	beq.w	800ee12 <rmw_init+0x1be>
 800ecbe:	6884      	ldr	r4, [r0, #8]
 800ecc0:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800ecc2:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800ecc4:	f890 c010 	ldrb.w	ip, [r0, #16]
 800ecc8:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800eccc:	9101      	str	r1, [sp, #4]
 800ecce:	6a00      	ldr	r0, [r0, #32]
 800ecd0:	9000      	str	r0, [sp, #0]
 800ecd2:	f104 0910 	add.w	r9, r4, #16
 800ecd6:	4661      	mov	r1, ip
 800ecd8:	4648      	mov	r0, r9
 800ecda:	f001 fe2f 	bl	801093c <uxr_set_custom_transport_callbacks>
 800ecde:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800ece2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ece6:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800ecea:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800ecee:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800ecf2:	495f      	ldr	r1, [pc, #380]	@ (800ee70 <rmw_init+0x21c>)
 800ecf4:	f8c3 7594 	str.w	r7, [r3, #1428]	@ 0x594
 800ecf8:	f8c3 7598 	str.w	r7, [r3, #1432]	@ 0x598
 800ecfc:	f8c3 759c 	str.w	r7, [r3, #1436]	@ 0x59c
 800ed00:	f8c3 75a0 	str.w	r7, [r3, #1440]	@ 0x5a0
 800ed04:	485b      	ldr	r0, [pc, #364]	@ (800ee74 <rmw_init+0x220>)
 800ed06:	e9c4 87da 	strd	r8, r7, [r4, #872]	@ 0x368
 800ed0a:	2201      	movs	r2, #1
 800ed0c:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800ed0e:	f000 fe53 	bl	800f9b8 <rmw_uxrce_init_node_memory>
 800ed12:	4959      	ldr	r1, [pc, #356]	@ (800ee78 <rmw_init+0x224>)
 800ed14:	4859      	ldr	r0, [pc, #356]	@ (800ee7c <rmw_init+0x228>)
 800ed16:	2205      	movs	r2, #5
 800ed18:	f000 fe2e 	bl	800f978 <rmw_uxrce_init_subscription_memory>
 800ed1c:	4958      	ldr	r1, [pc, #352]	@ (800ee80 <rmw_init+0x22c>)
 800ed1e:	4859      	ldr	r0, [pc, #356]	@ (800ee84 <rmw_init+0x230>)
 800ed20:	220a      	movs	r2, #10
 800ed22:	f000 fe09 	bl	800f938 <rmw_uxrce_init_publisher_memory>
 800ed26:	4958      	ldr	r1, [pc, #352]	@ (800ee88 <rmw_init+0x234>)
 800ed28:	4858      	ldr	r0, [pc, #352]	@ (800ee8c <rmw_init+0x238>)
 800ed2a:	463a      	mov	r2, r7
 800ed2c:	f000 fdc4 	bl	800f8b8 <rmw_uxrce_init_service_memory>
 800ed30:	4957      	ldr	r1, [pc, #348]	@ (800ee90 <rmw_init+0x23c>)
 800ed32:	4858      	ldr	r0, [pc, #352]	@ (800ee94 <rmw_init+0x240>)
 800ed34:	2201      	movs	r2, #1
 800ed36:	f000 fddf 	bl	800f8f8 <rmw_uxrce_init_client_memory>
 800ed3a:	4957      	ldr	r1, [pc, #348]	@ (800ee98 <rmw_init+0x244>)
 800ed3c:	4857      	ldr	r0, [pc, #348]	@ (800ee9c <rmw_init+0x248>)
 800ed3e:	220f      	movs	r2, #15
 800ed40:	f000 fe7a 	bl	800fa38 <rmw_uxrce_init_topic_memory>
 800ed44:	4956      	ldr	r1, [pc, #344]	@ (800eea0 <rmw_init+0x24c>)
 800ed46:	4857      	ldr	r0, [pc, #348]	@ (800eea4 <rmw_init+0x250>)
 800ed48:	2203      	movs	r2, #3
 800ed4a:	f000 feb5 	bl	800fab8 <rmw_uxrce_init_init_options_impl_memory>
 800ed4e:	4956      	ldr	r1, [pc, #344]	@ (800eea8 <rmw_init+0x254>)
 800ed50:	4856      	ldr	r0, [pc, #344]	@ (800eeac <rmw_init+0x258>)
 800ed52:	2204      	movs	r2, #4
 800ed54:	f000 fed0 	bl	800faf8 <rmw_uxrce_init_wait_set_memory>
 800ed58:	4955      	ldr	r1, [pc, #340]	@ (800eeb0 <rmw_init+0x25c>)
 800ed5a:	4856      	ldr	r0, [pc, #344]	@ (800eeb4 <rmw_init+0x260>)
 800ed5c:	2204      	movs	r2, #4
 800ed5e:	f000 feeb 	bl	800fb38 <rmw_uxrce_init_guard_condition_memory>
 800ed62:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800ed64:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800ed66:	463a      	mov	r2, r7
 800ed68:	f000 fd8e 	bl	800f888 <rmw_uxrce_transport_init>
 800ed6c:	4680      	mov	r8, r0
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	d15b      	bne.n	800ee2a <rmw_init+0x1d6>
 800ed72:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800ed74:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800ed78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ed7a:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800ed7e:	4628      	mov	r0, r5
 800ed80:	f002 f812 	bl	8010da8 <uxr_init_session>
 800ed84:	494c      	ldr	r1, [pc, #304]	@ (800eeb8 <rmw_init+0x264>)
 800ed86:	4622      	mov	r2, r4
 800ed88:	4628      	mov	r0, r5
 800ed8a:	f002 f831 	bl	8010df0 <uxr_set_topic_callback>
 800ed8e:	494b      	ldr	r1, [pc, #300]	@ (800eebc <rmw_init+0x268>)
 800ed90:	4642      	mov	r2, r8
 800ed92:	4628      	mov	r0, r5
 800ed94:	f002 f828 	bl	8010de8 <uxr_set_status_callback>
 800ed98:	4949      	ldr	r1, [pc, #292]	@ (800eec0 <rmw_init+0x26c>)
 800ed9a:	4642      	mov	r2, r8
 800ed9c:	4628      	mov	r0, r5
 800ed9e:	f002 f82b 	bl	8010df8 <uxr_set_request_callback>
 800eda2:	4948      	ldr	r1, [pc, #288]	@ (800eec4 <rmw_init+0x270>)
 800eda4:	4642      	mov	r2, r8
 800eda6:	4628      	mov	r0, r5
 800eda8:	f002 f82a 	bl	8010e00 <uxr_set_reply_callback>
 800edac:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800edb0:	2304      	movs	r3, #4
 800edb2:	0092      	lsls	r2, r2, #2
 800edb4:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800edb8:	4628      	mov	r0, r5
 800edba:	f002 f85f 	bl	8010e7c <uxr_create_input_reliable_stream>
 800edbe:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800edc2:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800edc6:	0092      	lsls	r2, r2, #2
 800edc8:	2304      	movs	r3, #4
 800edca:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800edce:	4628      	mov	r0, r5
 800edd0:	f002 f82c 	bl	8010e2c <uxr_create_output_reliable_stream>
 800edd4:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800edd8:	4628      	mov	r0, r5
 800edda:	f002 f849 	bl	8010e70 <uxr_create_input_best_effort_stream>
 800edde:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800ede2:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800ede6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800edea:	3114      	adds	r1, #20
 800edec:	4628      	mov	r0, r5
 800edee:	f002 f80b 	bl	8010e08 <uxr_create_output_best_effort_stream>
 800edf2:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800edf6:	4628      	mov	r0, r5
 800edf8:	f002 fd96 	bl	8011928 <uxr_create_session>
 800edfc:	b308      	cbz	r0, 800ee42 <rmw_init+0x1ee>
 800edfe:	4640      	mov	r0, r8
 800ee00:	b003      	add	sp, #12
 800ee02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee06:	f04f 080b 	mov.w	r8, #11
 800ee0a:	4640      	mov	r0, r8
 800ee0c:	b003      	add	sp, #12
 800ee0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee12:	f04f 0801 	mov.w	r8, #1
 800ee16:	4640      	mov	r0, r8
 800ee18:	b003      	add	sp, #12
 800ee1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee1e:	f04f 080c 	mov.w	r8, #12
 800ee22:	4640      	mov	r0, r8
 800ee24:	b003      	add	sp, #12
 800ee26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee2a:	4648      	mov	r0, r9
 800ee2c:	f001 fdc8 	bl	80109c0 <uxr_close_custom_transport>
 800ee30:	480d      	ldr	r0, [pc, #52]	@ (800ee68 <rmw_init+0x214>)
 800ee32:	4621      	mov	r1, r4
 800ee34:	f007 ff20 	bl	8016c78 <put_memory>
 800ee38:	4640      	mov	r0, r8
 800ee3a:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800ee3c:	b003      	add	sp, #12
 800ee3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee42:	4648      	mov	r0, r9
 800ee44:	f001 fdbc 	bl	80109c0 <uxr_close_custom_transport>
 800ee48:	4807      	ldr	r0, [pc, #28]	@ (800ee68 <rmw_init+0x214>)
 800ee4a:	4621      	mov	r1, r4
 800ee4c:	f007 ff14 	bl	8016c78 <put_memory>
 800ee50:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800ee54:	f04f 0801 	mov.w	r8, #1
 800ee58:	e7d1      	b.n	800edfe <rmw_init+0x1aa>
 800ee5a:	bf00      	nop
 800ee5c:	0801a924 	.word	0x0801a924
 800ee60:	2000b0f4 	.word	0x2000b0f4
 800ee64:	200073a0 	.word	0x200073a0
 800ee68:	2000b0e4 	.word	0x2000b0e4
 800ee6c:	20008948 	.word	0x20008948
 800ee70:	20006a8c 	.word	0x20006a8c
 800ee74:	2000b0b4 	.word	0x2000b0b4
 800ee78:	2000aa48 	.word	0x2000aa48
 800ee7c:	2000b104 	.word	0x2000b104
 800ee80:	20006b30 	.word	0x20006b30
 800ee84:	2000b0c4 	.word	0x2000b0c4
 800ee88:	200073a0 	.word	0x200073a0
 800ee8c:	2000b0d4 	.word	0x2000b0d4
 800ee90:	200068c0 	.word	0x200068c0
 800ee94:	200068b0 	.word	0x200068b0
 800ee98:	2000ae80 	.word	0x2000ae80
 800ee9c:	2000b114 	.word	0x2000b114
 800eea0:	20006a08 	.word	0x20006a08
 800eea4:	2000b0a4 	.word	0x2000b0a4
 800eea8:	2000b024 	.word	0x2000b024
 800eeac:	2000b124 	.word	0x2000b124
 800eeb0:	20006988 	.word	0x20006988
 800eeb4:	2000b094 	.word	0x2000b094
 800eeb8:	08016a91 	.word	0x08016a91
 800eebc:	08016a89 	.word	0x08016a89
 800eec0:	08016b29 	.word	0x08016b29
 800eec4:	08016bc5 	.word	0x08016bc5

0800eec8 <rmw_context_fini>:
 800eec8:	4b17      	ldr	r3, [pc, #92]	@ (800ef28 <rmw_context_fini+0x60>)
 800eeca:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800eecc:	b570      	push	{r4, r5, r6, lr}
 800eece:	681c      	ldr	r4, [r3, #0]
 800eed0:	4605      	mov	r5, r0
 800eed2:	b334      	cbz	r4, 800ef22 <rmw_context_fini+0x5a>
 800eed4:	2600      	movs	r6, #0
 800eed6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800eeda:	6902      	ldr	r2, [r0, #16]
 800eedc:	428a      	cmp	r2, r1
 800eede:	d018      	beq.n	800ef12 <rmw_context_fini+0x4a>
 800eee0:	2c00      	cmp	r4, #0
 800eee2:	d1f8      	bne.n	800eed6 <rmw_context_fini+0xe>
 800eee4:	b189      	cbz	r1, 800ef0a <rmw_context_fini+0x42>
 800eee6:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800eeea:	789b      	ldrb	r3, [r3, #2]
 800eeec:	2b01      	cmp	r3, #1
 800eeee:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800eef2:	bf14      	ite	ne
 800eef4:	210a      	movne	r1, #10
 800eef6:	2100      	moveq	r1, #0
 800eef8:	f002 fcee 	bl	80118d8 <uxr_delete_session_retries>
 800eefc:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800eefe:	f000 fe3b 	bl	800fb78 <rmw_uxrce_fini_session_memory>
 800ef02:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800ef04:	3010      	adds	r0, #16
 800ef06:	f001 fd5b 	bl	80109c0 <uxr_close_custom_transport>
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800ef0e:	4630      	mov	r0, r6
 800ef10:	bd70      	pop	{r4, r5, r6, pc}
 800ef12:	3018      	adds	r0, #24
 800ef14:	f000 f89c 	bl	800f050 <rmw_destroy_node>
 800ef18:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800ef1a:	4606      	mov	r6, r0
 800ef1c:	2c00      	cmp	r4, #0
 800ef1e:	d1da      	bne.n	800eed6 <rmw_context_fini+0xe>
 800ef20:	e7e0      	b.n	800eee4 <rmw_context_fini+0x1c>
 800ef22:	4626      	mov	r6, r4
 800ef24:	e7de      	b.n	800eee4 <rmw_context_fini+0x1c>
 800ef26:	bf00      	nop
 800ef28:	2000b0b4 	.word	0x2000b0b4

0800ef2c <create_node>:
 800ef2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef30:	b083      	sub	sp, #12
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d05f      	beq.n	800eff6 <create_node+0xca>
 800ef36:	4606      	mov	r6, r0
 800ef38:	4835      	ldr	r0, [pc, #212]	@ (800f010 <create_node+0xe4>)
 800ef3a:	460f      	mov	r7, r1
 800ef3c:	4690      	mov	r8, r2
 800ef3e:	461d      	mov	r5, r3
 800ef40:	f007 fe8a 	bl	8016c58 <get_memory>
 800ef44:	2800      	cmp	r0, #0
 800ef46:	d056      	beq.n	800eff6 <create_node+0xca>
 800ef48:	6884      	ldr	r4, [r0, #8]
 800ef4a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800ef4c:	6123      	str	r3, [r4, #16]
 800ef4e:	f7ff fd83 	bl	800ea58 <rmw_get_implementation_identifier>
 800ef52:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800ef56:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800ef5a:	f8c4 9020 	str.w	r9, [r4, #32]
 800ef5e:	4630      	mov	r0, r6
 800ef60:	f7f1 f968 	bl	8000234 <strlen>
 800ef64:	1c42      	adds	r2, r0, #1
 800ef66:	2a3c      	cmp	r2, #60	@ 0x3c
 800ef68:	f104 0518 	add.w	r5, r4, #24
 800ef6c:	d840      	bhi.n	800eff0 <create_node+0xc4>
 800ef6e:	4648      	mov	r0, r9
 800ef70:	4631      	mov	r1, r6
 800ef72:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800ef76:	f009 fe54 	bl	8018c22 <memcpy>
 800ef7a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800ef7e:	4638      	mov	r0, r7
 800ef80:	f7f1 f958 	bl	8000234 <strlen>
 800ef84:	1c42      	adds	r2, r0, #1
 800ef86:	2a3c      	cmp	r2, #60	@ 0x3c
 800ef88:	d832      	bhi.n	800eff0 <create_node+0xc4>
 800ef8a:	4639      	mov	r1, r7
 800ef8c:	4648      	mov	r0, r9
 800ef8e:	f009 fe48 	bl	8018c22 <memcpy>
 800ef92:	6923      	ldr	r3, [r4, #16]
 800ef94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ef98:	2101      	movs	r1, #1
 800ef9a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800ef9e:	1842      	adds	r2, r0, r1
 800efa0:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800efa4:	f001 fd10 	bl	80109c8 <uxr_object_id>
 800efa8:	6160      	str	r0, [r4, #20]
 800efaa:	783b      	ldrb	r3, [r7, #0]
 800efac:	2b2f      	cmp	r3, #47	@ 0x2f
 800efae:	d127      	bne.n	800f000 <create_node+0xd4>
 800efb0:	787b      	ldrb	r3, [r7, #1]
 800efb2:	bb2b      	cbnz	r3, 800f000 <create_node+0xd4>
 800efb4:	4a17      	ldr	r2, [pc, #92]	@ (800f014 <create_node+0xe8>)
 800efb6:	4818      	ldr	r0, [pc, #96]	@ (800f018 <create_node+0xec>)
 800efb8:	4633      	mov	r3, r6
 800efba:	213c      	movs	r1, #60	@ 0x3c
 800efbc:	f009 fbfa 	bl	80187b4 <sniprintf>
 800efc0:	6920      	ldr	r0, [r4, #16]
 800efc2:	4915      	ldr	r1, [pc, #84]	@ (800f018 <create_node+0xec>)
 800efc4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800efc8:	9100      	str	r1, [sp, #0]
 800efca:	2106      	movs	r1, #6
 800efcc:	9101      	str	r1, [sp, #4]
 800efce:	6811      	ldr	r1, [r2, #0]
 800efd0:	6962      	ldr	r2, [r4, #20]
 800efd2:	fa1f f388 	uxth.w	r3, r8
 800efd6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800efda:	f001 faeb 	bl	80105b4 <uxr_buffer_create_participant_bin>
 800efde:	4602      	mov	r2, r0
 800efe0:	6920      	ldr	r0, [r4, #16]
 800efe2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800efe6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800efea:	f000 ff3b 	bl	800fe64 <run_xrce_session>
 800efee:	b918      	cbnz	r0, 800eff8 <create_node+0xcc>
 800eff0:	4628      	mov	r0, r5
 800eff2:	f000 fdc7 	bl	800fb84 <rmw_uxrce_fini_node_memory>
 800eff6:	2500      	movs	r5, #0
 800eff8:	4628      	mov	r0, r5
 800effa:	b003      	add	sp, #12
 800effc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f000:	4a06      	ldr	r2, [pc, #24]	@ (800f01c <create_node+0xf0>)
 800f002:	9600      	str	r6, [sp, #0]
 800f004:	463b      	mov	r3, r7
 800f006:	213c      	movs	r1, #60	@ 0x3c
 800f008:	4803      	ldr	r0, [pc, #12]	@ (800f018 <create_node+0xec>)
 800f00a:	f009 fbd3 	bl	80187b4 <sniprintf>
 800f00e:	e7d7      	b.n	800efc0 <create_node+0x94>
 800f010:	2000b0b4 	.word	0x2000b0b4
 800f014:	0801a0dc 	.word	0x0801a0dc
 800f018:	20006874 	.word	0x20006874
 800f01c:	08019bdc 	.word	0x08019bdc

0800f020 <rmw_create_node>:
 800f020:	b199      	cbz	r1, 800f04a <rmw_create_node+0x2a>
 800f022:	780b      	ldrb	r3, [r1, #0]
 800f024:	468c      	mov	ip, r1
 800f026:	b183      	cbz	r3, 800f04a <rmw_create_node+0x2a>
 800f028:	b410      	push	{r4}
 800f02a:	4614      	mov	r4, r2
 800f02c:	b14a      	cbz	r2, 800f042 <rmw_create_node+0x22>
 800f02e:	7813      	ldrb	r3, [r2, #0]
 800f030:	b13b      	cbz	r3, 800f042 <rmw_create_node+0x22>
 800f032:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800f034:	4603      	mov	r3, r0
 800f036:	4621      	mov	r1, r4
 800f038:	4660      	mov	r0, ip
 800f03a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f03e:	f7ff bf75 	b.w	800ef2c <create_node>
 800f042:	2000      	movs	r0, #0
 800f044:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f048:	4770      	bx	lr
 800f04a:	2000      	movs	r0, #0
 800f04c:	4770      	bx	lr
 800f04e:	bf00      	nop

0800f050 <rmw_destroy_node>:
 800f050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f052:	b328      	cbz	r0, 800f0a0 <rmw_destroy_node+0x50>
 800f054:	4607      	mov	r7, r0
 800f056:	6800      	ldr	r0, [r0, #0]
 800f058:	b120      	cbz	r0, 800f064 <rmw_destroy_node+0x14>
 800f05a:	4b36      	ldr	r3, [pc, #216]	@ (800f134 <rmw_destroy_node+0xe4>)
 800f05c:	6819      	ldr	r1, [r3, #0]
 800f05e:	f7f1 f8df 	bl	8000220 <strcmp>
 800f062:	b9e8      	cbnz	r0, 800f0a0 <rmw_destroy_node+0x50>
 800f064:	687d      	ldr	r5, [r7, #4]
 800f066:	b1dd      	cbz	r5, 800f0a0 <rmw_destroy_node+0x50>
 800f068:	4b33      	ldr	r3, [pc, #204]	@ (800f138 <rmw_destroy_node+0xe8>)
 800f06a:	681c      	ldr	r4, [r3, #0]
 800f06c:	2c00      	cmp	r4, #0
 800f06e:	d05f      	beq.n	800f130 <rmw_destroy_node+0xe0>
 800f070:	2600      	movs	r6, #0
 800f072:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f076:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800f07a:	429d      	cmp	r5, r3
 800f07c:	d013      	beq.n	800f0a6 <rmw_destroy_node+0x56>
 800f07e:	2c00      	cmp	r4, #0
 800f080:	d1f7      	bne.n	800f072 <rmw_destroy_node+0x22>
 800f082:	4b2e      	ldr	r3, [pc, #184]	@ (800f13c <rmw_destroy_node+0xec>)
 800f084:	681c      	ldr	r4, [r3, #0]
 800f086:	b1c4      	cbz	r4, 800f0ba <rmw_destroy_node+0x6a>
 800f088:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f08c:	6a0b      	ldr	r3, [r1, #32]
 800f08e:	429d      	cmp	r5, r3
 800f090:	d1f9      	bne.n	800f086 <rmw_destroy_node+0x36>
 800f092:	317c      	adds	r1, #124	@ 0x7c
 800f094:	4638      	mov	r0, r7
 800f096:	f000 fb97 	bl	800f7c8 <rmw_destroy_subscription>
 800f09a:	2801      	cmp	r0, #1
 800f09c:	4606      	mov	r6, r0
 800f09e:	d1f2      	bne.n	800f086 <rmw_destroy_node+0x36>
 800f0a0:	2601      	movs	r6, #1
 800f0a2:	4630      	mov	r0, r6
 800f0a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0a6:	3184      	adds	r1, #132	@ 0x84
 800f0a8:	4638      	mov	r0, r7
 800f0aa:	f000 f9a5 	bl	800f3f8 <rmw_destroy_publisher>
 800f0ae:	2801      	cmp	r0, #1
 800f0b0:	4606      	mov	r6, r0
 800f0b2:	d0f5      	beq.n	800f0a0 <rmw_destroy_node+0x50>
 800f0b4:	2c00      	cmp	r4, #0
 800f0b6:	d1dc      	bne.n	800f072 <rmw_destroy_node+0x22>
 800f0b8:	e7e3      	b.n	800f082 <rmw_destroy_node+0x32>
 800f0ba:	4b21      	ldr	r3, [pc, #132]	@ (800f140 <rmw_destroy_node+0xf0>)
 800f0bc:	681c      	ldr	r4, [r3, #0]
 800f0be:	b16c      	cbz	r4, 800f0dc <rmw_destroy_node+0x8c>
 800f0c0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f0c4:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f0c6:	429d      	cmp	r5, r3
 800f0c8:	d1f9      	bne.n	800f0be <rmw_destroy_node+0x6e>
 800f0ca:	317c      	adds	r1, #124	@ 0x7c
 800f0cc:	4638      	mov	r0, r7
 800f0ce:	f000 fb37 	bl	800f740 <rmw_destroy_service>
 800f0d2:	2801      	cmp	r0, #1
 800f0d4:	4606      	mov	r6, r0
 800f0d6:	d0e3      	beq.n	800f0a0 <rmw_destroy_node+0x50>
 800f0d8:	2c00      	cmp	r4, #0
 800f0da:	d1f1      	bne.n	800f0c0 <rmw_destroy_node+0x70>
 800f0dc:	4b19      	ldr	r3, [pc, #100]	@ (800f144 <rmw_destroy_node+0xf4>)
 800f0de:	681c      	ldr	r4, [r3, #0]
 800f0e0:	b16c      	cbz	r4, 800f0fe <rmw_destroy_node+0xae>
 800f0e2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800f0e6:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f0e8:	429d      	cmp	r5, r3
 800f0ea:	d1f9      	bne.n	800f0e0 <rmw_destroy_node+0x90>
 800f0ec:	317c      	adds	r1, #124	@ 0x7c
 800f0ee:	4638      	mov	r0, r7
 800f0f0:	f7ff fc4e 	bl	800e990 <rmw_destroy_client>
 800f0f4:	2801      	cmp	r0, #1
 800f0f6:	4606      	mov	r6, r0
 800f0f8:	d0d2      	beq.n	800f0a0 <rmw_destroy_node+0x50>
 800f0fa:	2c00      	cmp	r4, #0
 800f0fc:	d1f1      	bne.n	800f0e2 <rmw_destroy_node+0x92>
 800f0fe:	6928      	ldr	r0, [r5, #16]
 800f100:	696a      	ldr	r2, [r5, #20]
 800f102:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f106:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f10a:	6819      	ldr	r1, [r3, #0]
 800f10c:	f001 fa06 	bl	801051c <uxr_buffer_delete_entity>
 800f110:	4602      	mov	r2, r0
 800f112:	6928      	ldr	r0, [r5, #16]
 800f114:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f118:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f11c:	f000 fea2 	bl	800fe64 <run_xrce_session>
 800f120:	2800      	cmp	r0, #0
 800f122:	bf08      	it	eq
 800f124:	2602      	moveq	r6, #2
 800f126:	4638      	mov	r0, r7
 800f128:	f000 fd2c 	bl	800fb84 <rmw_uxrce_fini_node_memory>
 800f12c:	4630      	mov	r0, r6
 800f12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f130:	4626      	mov	r6, r4
 800f132:	e7a6      	b.n	800f082 <rmw_destroy_node+0x32>
 800f134:	0801a924 	.word	0x0801a924
 800f138:	2000b0c4 	.word	0x2000b0c4
 800f13c:	2000b104 	.word	0x2000b104
 800f140:	2000b0d4 	.word	0x2000b0d4
 800f144:	200068b0 	.word	0x200068b0

0800f148 <rmw_node_get_graph_guard_condition>:
 800f148:	6843      	ldr	r3, [r0, #4]
 800f14a:	6918      	ldr	r0, [r3, #16]
 800f14c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800f150:	4770      	bx	lr
 800f152:	bf00      	nop

0800f154 <flush_session>:
 800f154:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800f156:	f002 ba77 	b.w	8011648 <uxr_run_session_until_confirm_delivery>
 800f15a:	bf00      	nop

0800f15c <rmw_publish>:
 800f15c:	2800      	cmp	r0, #0
 800f15e:	d053      	beq.n	800f208 <rmw_publish+0xac>
 800f160:	b570      	push	{r4, r5, r6, lr}
 800f162:	460d      	mov	r5, r1
 800f164:	b08e      	sub	sp, #56	@ 0x38
 800f166:	2900      	cmp	r1, #0
 800f168:	d04b      	beq.n	800f202 <rmw_publish+0xa6>
 800f16a:	4604      	mov	r4, r0
 800f16c:	6800      	ldr	r0, [r0, #0]
 800f16e:	f000 ff93 	bl	8010098 <is_uxrce_rmw_identifier_valid>
 800f172:	2800      	cmp	r0, #0
 800f174:	d045      	beq.n	800f202 <rmw_publish+0xa6>
 800f176:	6866      	ldr	r6, [r4, #4]
 800f178:	2e00      	cmp	r6, #0
 800f17a:	d042      	beq.n	800f202 <rmw_publish+0xa6>
 800f17c:	69b4      	ldr	r4, [r6, #24]
 800f17e:	4628      	mov	r0, r5
 800f180:	6923      	ldr	r3, [r4, #16]
 800f182:	4798      	blx	r3
 800f184:	69f3      	ldr	r3, [r6, #28]
 800f186:	9005      	str	r0, [sp, #20]
 800f188:	b113      	cbz	r3, 800f190 <rmw_publish+0x34>
 800f18a:	a805      	add	r0, sp, #20
 800f18c:	4798      	blx	r3
 800f18e:	9805      	ldr	r0, [sp, #20]
 800f190:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f194:	691b      	ldr	r3, [r3, #16]
 800f196:	9000      	str	r0, [sp, #0]
 800f198:	6972      	ldr	r2, [r6, #20]
 800f19a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800f19c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f1a0:	ab06      	add	r3, sp, #24
 800f1a2:	f003 fccf 	bl	8012b44 <uxr_prepare_output_stream>
 800f1a6:	b1d8      	cbz	r0, 800f1e0 <rmw_publish+0x84>
 800f1a8:	68a3      	ldr	r3, [r4, #8]
 800f1aa:	a906      	add	r1, sp, #24
 800f1ac:	4628      	mov	r0, r5
 800f1ae:	4798      	blx	r3
 800f1b0:	6a33      	ldr	r3, [r6, #32]
 800f1b2:	4604      	mov	r4, r0
 800f1b4:	b10b      	cbz	r3, 800f1ba <rmw_publish+0x5e>
 800f1b6:	a806      	add	r0, sp, #24
 800f1b8:	4798      	blx	r3
 800f1ba:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800f1be:	2b01      	cmp	r3, #1
 800f1c0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f1c4:	d022      	beq.n	800f20c <rmw_publish+0xb0>
 800f1c6:	6918      	ldr	r0, [r3, #16]
 800f1c8:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800f1ca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f1ce:	f002 fa3b 	bl	8011648 <uxr_run_session_until_confirm_delivery>
 800f1d2:	4020      	ands	r0, r4
 800f1d4:	b2c4      	uxtb	r4, r0
 800f1d6:	f084 0001 	eor.w	r0, r4, #1
 800f1da:	b2c0      	uxtb	r0, r0
 800f1dc:	b00e      	add	sp, #56	@ 0x38
 800f1de:	bd70      	pop	{r4, r5, r6, pc}
 800f1e0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f1e4:	6918      	ldr	r0, [r3, #16]
 800f1e6:	9b05      	ldr	r3, [sp, #20]
 800f1e8:	9300      	str	r3, [sp, #0]
 800f1ea:	4b0b      	ldr	r3, [pc, #44]	@ (800f218 <rmw_publish+0xbc>)
 800f1ec:	9301      	str	r3, [sp, #4]
 800f1ee:	9602      	str	r6, [sp, #8]
 800f1f0:	6972      	ldr	r2, [r6, #20]
 800f1f2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800f1f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f1f8:	ab06      	add	r3, sp, #24
 800f1fa:	f003 fcd3 	bl	8012ba4 <uxr_prepare_output_stream_fragmented>
 800f1fe:	2800      	cmp	r0, #0
 800f200:	d1d2      	bne.n	800f1a8 <rmw_publish+0x4c>
 800f202:	2001      	movs	r0, #1
 800f204:	b00e      	add	sp, #56	@ 0x38
 800f206:	bd70      	pop	{r4, r5, r6, pc}
 800f208:	2001      	movs	r0, #1
 800f20a:	4770      	bx	lr
 800f20c:	6918      	ldr	r0, [r3, #16]
 800f20e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f212:	f001 fe59 	bl	8010ec8 <uxr_flash_output_streams>
 800f216:	e7de      	b.n	800f1d6 <rmw_publish+0x7a>
 800f218:	0800f155 	.word	0x0800f155

0800f21c <rmw_create_publisher>:
 800f21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f220:	b087      	sub	sp, #28
 800f222:	2800      	cmp	r0, #0
 800f224:	f000 80cc 	beq.w	800f3c0 <rmw_create_publisher+0x1a4>
 800f228:	460e      	mov	r6, r1
 800f22a:	2900      	cmp	r1, #0
 800f22c:	f000 80c8 	beq.w	800f3c0 <rmw_create_publisher+0x1a4>
 800f230:	4604      	mov	r4, r0
 800f232:	6800      	ldr	r0, [r0, #0]
 800f234:	4615      	mov	r5, r2
 800f236:	4698      	mov	r8, r3
 800f238:	f000 ff2e 	bl	8010098 <is_uxrce_rmw_identifier_valid>
 800f23c:	2800      	cmp	r0, #0
 800f23e:	f000 80bf 	beq.w	800f3c0 <rmw_create_publisher+0x1a4>
 800f242:	2d00      	cmp	r5, #0
 800f244:	f000 80bc 	beq.w	800f3c0 <rmw_create_publisher+0x1a4>
 800f248:	782b      	ldrb	r3, [r5, #0]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	f000 80b8 	beq.w	800f3c0 <rmw_create_publisher+0x1a4>
 800f250:	f1b8 0f00 	cmp.w	r8, #0
 800f254:	f000 80b4 	beq.w	800f3c0 <rmw_create_publisher+0x1a4>
 800f258:	485c      	ldr	r0, [pc, #368]	@ (800f3cc <rmw_create_publisher+0x1b0>)
 800f25a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f25e:	f007 fcfb 	bl	8016c58 <get_memory>
 800f262:	2800      	cmp	r0, #0
 800f264:	f000 80ac 	beq.w	800f3c0 <rmw_create_publisher+0x1a4>
 800f268:	6884      	ldr	r4, [r0, #8]
 800f26a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800f26e:	f7ff fbf3 	bl	800ea58 <rmw_get_implementation_identifier>
 800f272:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800f276:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800f27a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800f27e:	4628      	mov	r0, r5
 800f280:	f7f0 ffd8 	bl	8000234 <strlen>
 800f284:	3001      	adds	r0, #1
 800f286:	283c      	cmp	r0, #60	@ 0x3c
 800f288:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800f28c:	f200 8091 	bhi.w	800f3b2 <rmw_create_publisher+0x196>
 800f290:	4a4f      	ldr	r2, [pc, #316]	@ (800f3d0 <rmw_create_publisher+0x1b4>)
 800f292:	462b      	mov	r3, r5
 800f294:	213c      	movs	r1, #60	@ 0x3c
 800f296:	4650      	mov	r0, sl
 800f298:	f009 fa8c 	bl	80187b4 <sniprintf>
 800f29c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f2a0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800f2a2:	4641      	mov	r1, r8
 800f2a4:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800f2a8:	2250      	movs	r2, #80	@ 0x50
 800f2aa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800f2ae:	f009 fcb8 	bl	8018c22 <memcpy>
 800f2b2:	f898 3008 	ldrb.w	r3, [r8, #8]
 800f2b6:	4947      	ldr	r1, [pc, #284]	@ (800f3d4 <rmw_create_publisher+0x1b8>)
 800f2b8:	2b02      	cmp	r3, #2
 800f2ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f2be:	bf0c      	ite	eq
 800f2c0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800f2c4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800f2c8:	67a3      	str	r3, [r4, #120]	@ 0x78
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800f2d0:	4630      	mov	r0, r6
 800f2d2:	f000 feef 	bl	80100b4 <get_message_typesupport_handle>
 800f2d6:	2800      	cmp	r0, #0
 800f2d8:	d06b      	beq.n	800f3b2 <rmw_create_publisher+0x196>
 800f2da:	6842      	ldr	r2, [r0, #4]
 800f2dc:	61a2      	str	r2, [r4, #24]
 800f2de:	2a00      	cmp	r2, #0
 800f2e0:	d067      	beq.n	800f3b2 <rmw_create_publisher+0x196>
 800f2e2:	4629      	mov	r1, r5
 800f2e4:	4643      	mov	r3, r8
 800f2e6:	4648      	mov	r0, r9
 800f2e8:	f007 fd02 	bl	8016cf0 <create_topic>
 800f2ec:	6260      	str	r0, [r4, #36]	@ 0x24
 800f2ee:	2800      	cmp	r0, #0
 800f2f0:	d063      	beq.n	800f3ba <rmw_create_publisher+0x19e>
 800f2f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f2f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f2fa:	2103      	movs	r1, #3
 800f2fc:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800f300:	1c42      	adds	r2, r0, #1
 800f302:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800f306:	f001 fb5f 	bl	80109c8 <uxr_object_id>
 800f30a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800f30e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f312:	6120      	str	r0, [r4, #16]
 800f314:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800f318:	6910      	ldr	r0, [r2, #16]
 800f31a:	2506      	movs	r5, #6
 800f31c:	9500      	str	r5, [sp, #0]
 800f31e:	6819      	ldr	r1, [r3, #0]
 800f320:	6922      	ldr	r2, [r4, #16]
 800f322:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f326:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f32a:	f001 f9ab 	bl	8010684 <uxr_buffer_create_publisher_bin>
 800f32e:	4602      	mov	r2, r0
 800f330:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f334:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f338:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f33c:	f000 fd92 	bl	800fe64 <run_xrce_session>
 800f340:	b3b8      	cbz	r0, 800f3b2 <rmw_create_publisher+0x196>
 800f342:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f346:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f34a:	2105      	movs	r1, #5
 800f34c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800f350:	1c42      	adds	r2, r0, #1
 800f352:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800f356:	f001 fb37 	bl	80109c8 <uxr_object_id>
 800f35a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800f35e:	6160      	str	r0, [r4, #20]
 800f360:	691e      	ldr	r6, [r3, #16]
 800f362:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f366:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800f36a:	f10d 0a10 	add.w	sl, sp, #16
 800f36e:	4641      	mov	r1, r8
 800f370:	4650      	mov	r0, sl
 800f372:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800f376:	f000 fd91 	bl	800fe9c <convert_qos_profile>
 800f37a:	9503      	str	r5, [sp, #12]
 800f37c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800f380:	9001      	str	r0, [sp, #4]
 800f382:	f8ad 1008 	strh.w	r1, [sp, #8]
 800f386:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f38a:	9300      	str	r3, [sp, #0]
 800f38c:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800f390:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f394:	f8d8 1000 	ldr.w	r1, [r8]
 800f398:	4630      	mov	r0, r6
 800f39a:	f001 f9a3 	bl	80106e4 <uxr_buffer_create_datawriter_bin>
 800f39e:	4602      	mov	r2, r0
 800f3a0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f3a4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f3a8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f3ac:	f000 fd5a 	bl	800fe64 <run_xrce_session>
 800f3b0:	b938      	cbnz	r0, 800f3c2 <rmw_create_publisher+0x1a6>
 800f3b2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800f3b4:	b108      	cbz	r0, 800f3ba <rmw_create_publisher+0x19e>
 800f3b6:	f000 fc55 	bl	800fc64 <rmw_uxrce_fini_topic_memory>
 800f3ba:	4638      	mov	r0, r7
 800f3bc:	f000 fbfa 	bl	800fbb4 <rmw_uxrce_fini_publisher_memory>
 800f3c0:	2700      	movs	r7, #0
 800f3c2:	4638      	mov	r0, r7
 800f3c4:	b007      	add	sp, #28
 800f3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ca:	bf00      	nop
 800f3cc:	2000b0c4 	.word	0x2000b0c4
 800f3d0:	0801a0dc 	.word	0x0801a0dc
 800f3d4:	08019aa8 	.word	0x08019aa8

0800f3d8 <rmw_publisher_get_actual_qos>:
 800f3d8:	b150      	cbz	r0, 800f3f0 <rmw_publisher_get_actual_qos+0x18>
 800f3da:	b508      	push	{r3, lr}
 800f3dc:	460b      	mov	r3, r1
 800f3de:	b149      	cbz	r1, 800f3f4 <rmw_publisher_get_actual_qos+0x1c>
 800f3e0:	6841      	ldr	r1, [r0, #4]
 800f3e2:	2250      	movs	r2, #80	@ 0x50
 800f3e4:	3128      	adds	r1, #40	@ 0x28
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f009 fc1b 	bl	8018c22 <memcpy>
 800f3ec:	2000      	movs	r0, #0
 800f3ee:	bd08      	pop	{r3, pc}
 800f3f0:	200b      	movs	r0, #11
 800f3f2:	4770      	bx	lr
 800f3f4:	200b      	movs	r0, #11
 800f3f6:	bd08      	pop	{r3, pc}

0800f3f8 <rmw_destroy_publisher>:
 800f3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3fa:	b128      	cbz	r0, 800f408 <rmw_destroy_publisher+0x10>
 800f3fc:	4604      	mov	r4, r0
 800f3fe:	6800      	ldr	r0, [r0, #0]
 800f400:	460d      	mov	r5, r1
 800f402:	f000 fe49 	bl	8010098 <is_uxrce_rmw_identifier_valid>
 800f406:	b910      	cbnz	r0, 800f40e <rmw_destroy_publisher+0x16>
 800f408:	2401      	movs	r4, #1
 800f40a:	4620      	mov	r0, r4
 800f40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f40e:	6863      	ldr	r3, [r4, #4]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d0f9      	beq.n	800f408 <rmw_destroy_publisher+0x10>
 800f414:	2d00      	cmp	r5, #0
 800f416:	d0f7      	beq.n	800f408 <rmw_destroy_publisher+0x10>
 800f418:	6828      	ldr	r0, [r5, #0]
 800f41a:	f000 fe3d 	bl	8010098 <is_uxrce_rmw_identifier_valid>
 800f41e:	2800      	cmp	r0, #0
 800f420:	d0f2      	beq.n	800f408 <rmw_destroy_publisher+0x10>
 800f422:	686c      	ldr	r4, [r5, #4]
 800f424:	2c00      	cmp	r4, #0
 800f426:	d0ef      	beq.n	800f408 <rmw_destroy_publisher+0x10>
 800f428:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800f42a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800f42e:	f007 fcaf 	bl	8016d90 <destroy_topic>
 800f432:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800f436:	6962      	ldr	r2, [r4, #20]
 800f438:	6918      	ldr	r0, [r3, #16]
 800f43a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f43e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f442:	6819      	ldr	r1, [r3, #0]
 800f444:	f001 f86a 	bl	801051c <uxr_buffer_delete_entity>
 800f448:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800f44c:	6922      	ldr	r2, [r4, #16]
 800f44e:	691b      	ldr	r3, [r3, #16]
 800f450:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800f454:	4604      	mov	r4, r0
 800f456:	6809      	ldr	r1, [r1, #0]
 800f458:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f45c:	f001 f85e 	bl	801051c <uxr_buffer_delete_entity>
 800f460:	693e      	ldr	r6, [r7, #16]
 800f462:	4622      	mov	r2, r4
 800f464:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800f468:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800f46c:	4604      	mov	r4, r0
 800f46e:	4630      	mov	r0, r6
 800f470:	f000 fcf8 	bl	800fe64 <run_xrce_session>
 800f474:	693e      	ldr	r6, [r7, #16]
 800f476:	4622      	mov	r2, r4
 800f478:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800f47c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800f480:	4604      	mov	r4, r0
 800f482:	4630      	mov	r0, r6
 800f484:	f000 fcee 	bl	800fe64 <run_xrce_session>
 800f488:	b12c      	cbz	r4, 800f496 <rmw_destroy_publisher+0x9e>
 800f48a:	b120      	cbz	r0, 800f496 <rmw_destroy_publisher+0x9e>
 800f48c:	2400      	movs	r4, #0
 800f48e:	4628      	mov	r0, r5
 800f490:	f000 fb90 	bl	800fbb4 <rmw_uxrce_fini_publisher_memory>
 800f494:	e7b9      	b.n	800f40a <rmw_destroy_publisher+0x12>
 800f496:	2402      	movs	r4, #2
 800f498:	e7f9      	b.n	800f48e <rmw_destroy_publisher+0x96>
 800f49a:	bf00      	nop

0800f49c <rmw_send_request>:
 800f49c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f4a0:	4604      	mov	r4, r0
 800f4a2:	6800      	ldr	r0, [r0, #0]
 800f4a4:	b08b      	sub	sp, #44	@ 0x2c
 800f4a6:	460e      	mov	r6, r1
 800f4a8:	4615      	mov	r5, r2
 800f4aa:	b128      	cbz	r0, 800f4b8 <rmw_send_request+0x1c>
 800f4ac:	4b21      	ldr	r3, [pc, #132]	@ (800f534 <rmw_send_request+0x98>)
 800f4ae:	6819      	ldr	r1, [r3, #0]
 800f4b0:	f7f0 feb6 	bl	8000220 <strcmp>
 800f4b4:	2800      	cmp	r0, #0
 800f4b6:	d139      	bne.n	800f52c <rmw_send_request+0x90>
 800f4b8:	6864      	ldr	r4, [r4, #4]
 800f4ba:	6963      	ldr	r3, [r4, #20]
 800f4bc:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 800f4c0:	689b      	ldr	r3, [r3, #8]
 800f4c2:	4798      	blx	r3
 800f4c4:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800f4c8:	4630      	mov	r0, r6
 800f4ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f4ce:	4798      	blx	r3
 800f4d0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f4d4:	9000      	str	r0, [sp, #0]
 800f4d6:	6922      	ldr	r2, [r4, #16]
 800f4d8:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800f4da:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f4de:	ab02      	add	r3, sp, #8
 800f4e0:	f003 fb30 	bl	8012b44 <uxr_prepare_output_stream>
 800f4e4:	2700      	movs	r7, #0
 800f4e6:	6028      	str	r0, [r5, #0]
 800f4e8:	606f      	str	r7, [r5, #4]
 800f4ea:	b198      	cbz	r0, 800f514 <rmw_send_request+0x78>
 800f4ec:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f4f0:	a902      	add	r1, sp, #8
 800f4f2:	4630      	mov	r0, r6
 800f4f4:	4798      	blx	r3
 800f4f6:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 800f4fa:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800f4fe:	2b01      	cmp	r3, #1
 800f500:	d00c      	beq.n	800f51c <rmw_send_request+0x80>
 800f502:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800f504:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f508:	f002 f89e 	bl	8011648 <uxr_run_session_until_confirm_delivery>
 800f50c:	4638      	mov	r0, r7
 800f50e:	b00b      	add	sp, #44	@ 0x2c
 800f510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f514:	2001      	movs	r0, #1
 800f516:	b00b      	add	sp, #44	@ 0x2c
 800f518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f51c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f520:	f001 fcd2 	bl	8010ec8 <uxr_flash_output_streams>
 800f524:	4638      	mov	r0, r7
 800f526:	b00b      	add	sp, #44	@ 0x2c
 800f528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f52c:	200c      	movs	r0, #12
 800f52e:	b00b      	add	sp, #44	@ 0x2c
 800f530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f534:	0801a924 	.word	0x0801a924

0800f538 <rmw_take_request>:
 800f538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f53c:	4605      	mov	r5, r0
 800f53e:	6800      	ldr	r0, [r0, #0]
 800f540:	b089      	sub	sp, #36	@ 0x24
 800f542:	460c      	mov	r4, r1
 800f544:	4690      	mov	r8, r2
 800f546:	461e      	mov	r6, r3
 800f548:	b128      	cbz	r0, 800f556 <rmw_take_request+0x1e>
 800f54a:	4b28      	ldr	r3, [pc, #160]	@ (800f5ec <rmw_take_request+0xb4>)
 800f54c:	6819      	ldr	r1, [r3, #0]
 800f54e:	f7f0 fe67 	bl	8000220 <strcmp>
 800f552:	2800      	cmp	r0, #0
 800f554:	d146      	bne.n	800f5e4 <rmw_take_request+0xac>
 800f556:	b10e      	cbz	r6, 800f55c <rmw_take_request+0x24>
 800f558:	2300      	movs	r3, #0
 800f55a:	7033      	strb	r3, [r6, #0]
 800f55c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800f560:	f000 fc02 	bl	800fd68 <rmw_uxrce_clean_expired_static_input_buffer>
 800f564:	4648      	mov	r0, r9
 800f566:	f000 fbd9 	bl	800fd1c <rmw_uxrce_find_static_input_buffer_by_owner>
 800f56a:	4607      	mov	r7, r0
 800f56c:	b3b0      	cbz	r0, 800f5dc <rmw_take_request+0xa4>
 800f56e:	6885      	ldr	r5, [r0, #8]
 800f570:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 800f574:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 800f578:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800f57c:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 800f580:	7423      	strb	r3, [r4, #16]
 800f582:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 800f586:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 800f58a:	74e2      	strb	r2, [r4, #19]
 800f58c:	f8a4 3011 	strh.w	r3, [r4, #17]
 800f590:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 800f594:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 800f598:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 800f59c:	61e1      	str	r1, [r4, #28]
 800f59e:	6162      	str	r2, [r4, #20]
 800f5a0:	61a3      	str	r3, [r4, #24]
 800f5a2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f5a6:	689b      	ldr	r3, [r3, #8]
 800f5a8:	4798      	blx	r3
 800f5aa:	6844      	ldr	r4, [r0, #4]
 800f5ac:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 800f5b0:	f105 0110 	add.w	r1, r5, #16
 800f5b4:	4668      	mov	r0, sp
 800f5b6:	f7fc fe5b 	bl	800c270 <ucdr_init_buffer>
 800f5ba:	68e3      	ldr	r3, [r4, #12]
 800f5bc:	4641      	mov	r1, r8
 800f5be:	4668      	mov	r0, sp
 800f5c0:	4798      	blx	r3
 800f5c2:	4639      	mov	r1, r7
 800f5c4:	4604      	mov	r4, r0
 800f5c6:	480a      	ldr	r0, [pc, #40]	@ (800f5f0 <rmw_take_request+0xb8>)
 800f5c8:	f007 fb56 	bl	8016c78 <put_memory>
 800f5cc:	b106      	cbz	r6, 800f5d0 <rmw_take_request+0x98>
 800f5ce:	7034      	strb	r4, [r6, #0]
 800f5d0:	f084 0001 	eor.w	r0, r4, #1
 800f5d4:	b2c0      	uxtb	r0, r0
 800f5d6:	b009      	add	sp, #36	@ 0x24
 800f5d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5dc:	2001      	movs	r0, #1
 800f5de:	b009      	add	sp, #36	@ 0x24
 800f5e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5e4:	200c      	movs	r0, #12
 800f5e6:	b009      	add	sp, #36	@ 0x24
 800f5e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5ec:	0801a924 	.word	0x0801a924
 800f5f0:	2000b0f4 	.word	0x2000b0f4

0800f5f4 <rmw_send_response>:
 800f5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5f6:	4605      	mov	r5, r0
 800f5f8:	6800      	ldr	r0, [r0, #0]
 800f5fa:	b091      	sub	sp, #68	@ 0x44
 800f5fc:	460c      	mov	r4, r1
 800f5fe:	4616      	mov	r6, r2
 800f600:	b128      	cbz	r0, 800f60e <rmw_send_response+0x1a>
 800f602:	4b29      	ldr	r3, [pc, #164]	@ (800f6a8 <rmw_send_response+0xb4>)
 800f604:	6819      	ldr	r1, [r3, #0]
 800f606:	f7f0 fe0b 	bl	8000220 <strcmp>
 800f60a:	2800      	cmp	r0, #0
 800f60c:	d141      	bne.n	800f692 <rmw_send_response+0x9e>
 800f60e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800f612:	9306      	str	r3, [sp, #24]
 800f614:	4623      	mov	r3, r4
 800f616:	9207      	str	r2, [sp, #28]
 800f618:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f61c:	686d      	ldr	r5, [r5, #4]
 800f61e:	789b      	ldrb	r3, [r3, #2]
 800f620:	68a1      	ldr	r1, [r4, #8]
 800f622:	f88d 2017 	strb.w	r2, [sp, #23]
 800f626:	f88d 3016 	strb.w	r3, [sp, #22]
 800f62a:	68e2      	ldr	r2, [r4, #12]
 800f62c:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 800f630:	6860      	ldr	r0, [r4, #4]
 800f632:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f636:	ab02      	add	r3, sp, #8
 800f638:	c307      	stmia	r3!, {r0, r1, r2}
 800f63a:	696b      	ldr	r3, [r5, #20]
 800f63c:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 800f63e:	68db      	ldr	r3, [r3, #12]
 800f640:	4798      	blx	r3
 800f642:	6844      	ldr	r4, [r0, #4]
 800f644:	4630      	mov	r0, r6
 800f646:	6923      	ldr	r3, [r4, #16]
 800f648:	4798      	blx	r3
 800f64a:	f100 0318 	add.w	r3, r0, #24
 800f64e:	6938      	ldr	r0, [r7, #16]
 800f650:	9300      	str	r3, [sp, #0]
 800f652:	692a      	ldr	r2, [r5, #16]
 800f654:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 800f656:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f65a:	ab08      	add	r3, sp, #32
 800f65c:	f003 fa72 	bl	8012b44 <uxr_prepare_output_stream>
 800f660:	b910      	cbnz	r0, 800f668 <rmw_send_response+0x74>
 800f662:	2001      	movs	r0, #1
 800f664:	b011      	add	sp, #68	@ 0x44
 800f666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f668:	a902      	add	r1, sp, #8
 800f66a:	a808      	add	r0, sp, #32
 800f66c:	f004 faea 	bl	8013c44 <uxr_serialize_SampleIdentity>
 800f670:	68a3      	ldr	r3, [r4, #8]
 800f672:	a908      	add	r1, sp, #32
 800f674:	4630      	mov	r0, r6
 800f676:	4798      	blx	r3
 800f678:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 800f67c:	6938      	ldr	r0, [r7, #16]
 800f67e:	2b01      	cmp	r3, #1
 800f680:	d00a      	beq.n	800f698 <rmw_send_response+0xa4>
 800f682:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800f684:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f688:	f001 ffde 	bl	8011648 <uxr_run_session_until_confirm_delivery>
 800f68c:	2000      	movs	r0, #0
 800f68e:	b011      	add	sp, #68	@ 0x44
 800f690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f692:	200c      	movs	r0, #12
 800f694:	b011      	add	sp, #68	@ 0x44
 800f696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f698:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f69c:	f001 fc14 	bl	8010ec8 <uxr_flash_output_streams>
 800f6a0:	2000      	movs	r0, #0
 800f6a2:	b011      	add	sp, #68	@ 0x44
 800f6a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6a6:	bf00      	nop
 800f6a8:	0801a924 	.word	0x0801a924

0800f6ac <rmw_take_response>:
 800f6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6b0:	4604      	mov	r4, r0
 800f6b2:	6800      	ldr	r0, [r0, #0]
 800f6b4:	b088      	sub	sp, #32
 800f6b6:	4688      	mov	r8, r1
 800f6b8:	4617      	mov	r7, r2
 800f6ba:	461d      	mov	r5, r3
 800f6bc:	b120      	cbz	r0, 800f6c8 <rmw_take_response+0x1c>
 800f6be:	4b1e      	ldr	r3, [pc, #120]	@ (800f738 <rmw_take_response+0x8c>)
 800f6c0:	6819      	ldr	r1, [r3, #0]
 800f6c2:	f7f0 fdad 	bl	8000220 <strcmp>
 800f6c6:	bb78      	cbnz	r0, 800f728 <rmw_take_response+0x7c>
 800f6c8:	b10d      	cbz	r5, 800f6ce <rmw_take_response+0x22>
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	702b      	strb	r3, [r5, #0]
 800f6ce:	6864      	ldr	r4, [r4, #4]
 800f6d0:	f000 fb4a 	bl	800fd68 <rmw_uxrce_clean_expired_static_input_buffer>
 800f6d4:	4620      	mov	r0, r4
 800f6d6:	f000 fb21 	bl	800fd1c <rmw_uxrce_find_static_input_buffer_by_owner>
 800f6da:	4606      	mov	r6, r0
 800f6dc:	b340      	cbz	r0, 800f730 <rmw_take_response+0x84>
 800f6de:	6963      	ldr	r3, [r4, #20]
 800f6e0:	6884      	ldr	r4, [r0, #8]
 800f6e2:	68db      	ldr	r3, [r3, #12]
 800f6e4:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 800f6e8:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 800f6ec:	e9c8 0108 	strd	r0, r1, [r8, #32]
 800f6f0:	4798      	blx	r3
 800f6f2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800f6f6:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 800f6fa:	f104 0110 	add.w	r1, r4, #16
 800f6fe:	4668      	mov	r0, sp
 800f700:	f7fc fdb6 	bl	800c270 <ucdr_init_buffer>
 800f704:	4639      	mov	r1, r7
 800f706:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f70a:	4668      	mov	r0, sp
 800f70c:	4798      	blx	r3
 800f70e:	4631      	mov	r1, r6
 800f710:	4604      	mov	r4, r0
 800f712:	480a      	ldr	r0, [pc, #40]	@ (800f73c <rmw_take_response+0x90>)
 800f714:	f007 fab0 	bl	8016c78 <put_memory>
 800f718:	b105      	cbz	r5, 800f71c <rmw_take_response+0x70>
 800f71a:	702c      	strb	r4, [r5, #0]
 800f71c:	f084 0001 	eor.w	r0, r4, #1
 800f720:	b2c0      	uxtb	r0, r0
 800f722:	b008      	add	sp, #32
 800f724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f728:	200c      	movs	r0, #12
 800f72a:	b008      	add	sp, #32
 800f72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f730:	2001      	movs	r0, #1
 800f732:	b008      	add	sp, #32
 800f734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f738:	0801a924 	.word	0x0801a924
 800f73c:	2000b0f4 	.word	0x2000b0f4

0800f740 <rmw_destroy_service>:
 800f740:	b570      	push	{r4, r5, r6, lr}
 800f742:	b128      	cbz	r0, 800f750 <rmw_destroy_service+0x10>
 800f744:	4604      	mov	r4, r0
 800f746:	6800      	ldr	r0, [r0, #0]
 800f748:	460d      	mov	r5, r1
 800f74a:	f000 fca5 	bl	8010098 <is_uxrce_rmw_identifier_valid>
 800f74e:	b910      	cbnz	r0, 800f756 <rmw_destroy_service+0x16>
 800f750:	2401      	movs	r4, #1
 800f752:	4620      	mov	r0, r4
 800f754:	bd70      	pop	{r4, r5, r6, pc}
 800f756:	6863      	ldr	r3, [r4, #4]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d0f9      	beq.n	800f750 <rmw_destroy_service+0x10>
 800f75c:	2d00      	cmp	r5, #0
 800f75e:	d0f7      	beq.n	800f750 <rmw_destroy_service+0x10>
 800f760:	6828      	ldr	r0, [r5, #0]
 800f762:	f000 fc99 	bl	8010098 <is_uxrce_rmw_identifier_valid>
 800f766:	2800      	cmp	r0, #0
 800f768:	d0f2      	beq.n	800f750 <rmw_destroy_service+0x10>
 800f76a:	686e      	ldr	r6, [r5, #4]
 800f76c:	2e00      	cmp	r6, #0
 800f76e:	d0ef      	beq.n	800f750 <rmw_destroy_service+0x10>
 800f770:	6864      	ldr	r4, [r4, #4]
 800f772:	6932      	ldr	r2, [r6, #16]
 800f774:	6920      	ldr	r0, [r4, #16]
 800f776:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f77a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f77e:	6819      	ldr	r1, [r3, #0]
 800f780:	f001 f98c 	bl	8010a9c <uxr_buffer_cancel_data>
 800f784:	4602      	mov	r2, r0
 800f786:	6920      	ldr	r0, [r4, #16]
 800f788:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f78c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f790:	f000 fb68 	bl	800fe64 <run_xrce_session>
 800f794:	6920      	ldr	r0, [r4, #16]
 800f796:	6932      	ldr	r2, [r6, #16]
 800f798:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f79c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f7a0:	6819      	ldr	r1, [r3, #0]
 800f7a2:	f000 febb 	bl	801051c <uxr_buffer_delete_entity>
 800f7a6:	4602      	mov	r2, r0
 800f7a8:	6920      	ldr	r0, [r4, #16]
 800f7aa:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f7ae:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f7b2:	f000 fb57 	bl	800fe64 <run_xrce_session>
 800f7b6:	2800      	cmp	r0, #0
 800f7b8:	4628      	mov	r0, r5
 800f7ba:	bf14      	ite	ne
 800f7bc:	2400      	movne	r4, #0
 800f7be:	2402      	moveq	r4, #2
 800f7c0:	f000 fa24 	bl	800fc0c <rmw_uxrce_fini_service_memory>
 800f7c4:	e7c5      	b.n	800f752 <rmw_destroy_service+0x12>
 800f7c6:	bf00      	nop

0800f7c8 <rmw_destroy_subscription>:
 800f7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ca:	b128      	cbz	r0, 800f7d8 <rmw_destroy_subscription+0x10>
 800f7cc:	4604      	mov	r4, r0
 800f7ce:	6800      	ldr	r0, [r0, #0]
 800f7d0:	460d      	mov	r5, r1
 800f7d2:	f000 fc61 	bl	8010098 <is_uxrce_rmw_identifier_valid>
 800f7d6:	b910      	cbnz	r0, 800f7de <rmw_destroy_subscription+0x16>
 800f7d8:	2401      	movs	r4, #1
 800f7da:	4620      	mov	r0, r4
 800f7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7de:	6863      	ldr	r3, [r4, #4]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d0f9      	beq.n	800f7d8 <rmw_destroy_subscription+0x10>
 800f7e4:	2d00      	cmp	r5, #0
 800f7e6:	d0f7      	beq.n	800f7d8 <rmw_destroy_subscription+0x10>
 800f7e8:	6828      	ldr	r0, [r5, #0]
 800f7ea:	f000 fc55 	bl	8010098 <is_uxrce_rmw_identifier_valid>
 800f7ee:	2800      	cmp	r0, #0
 800f7f0:	d0f2      	beq.n	800f7d8 <rmw_destroy_subscription+0x10>
 800f7f2:	686c      	ldr	r4, [r5, #4]
 800f7f4:	2c00      	cmp	r4, #0
 800f7f6:	d0ef      	beq.n	800f7d8 <rmw_destroy_subscription+0x10>
 800f7f8:	6a26      	ldr	r6, [r4, #32]
 800f7fa:	6962      	ldr	r2, [r4, #20]
 800f7fc:	6930      	ldr	r0, [r6, #16]
 800f7fe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f802:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f806:	6819      	ldr	r1, [r3, #0]
 800f808:	f001 f948 	bl	8010a9c <uxr_buffer_cancel_data>
 800f80c:	4602      	mov	r2, r0
 800f80e:	6930      	ldr	r0, [r6, #16]
 800f810:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f814:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f818:	f000 fb24 	bl	800fe64 <run_xrce_session>
 800f81c:	69e0      	ldr	r0, [r4, #28]
 800f81e:	f007 fab7 	bl	8016d90 <destroy_topic>
 800f822:	6a23      	ldr	r3, [r4, #32]
 800f824:	6962      	ldr	r2, [r4, #20]
 800f826:	6918      	ldr	r0, [r3, #16]
 800f828:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f82c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f830:	6819      	ldr	r1, [r3, #0]
 800f832:	f000 fe73 	bl	801051c <uxr_buffer_delete_entity>
 800f836:	6a23      	ldr	r3, [r4, #32]
 800f838:	6922      	ldr	r2, [r4, #16]
 800f83a:	691b      	ldr	r3, [r3, #16]
 800f83c:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800f840:	4604      	mov	r4, r0
 800f842:	6809      	ldr	r1, [r1, #0]
 800f844:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f848:	f000 fe68 	bl	801051c <uxr_buffer_delete_entity>
 800f84c:	6937      	ldr	r7, [r6, #16]
 800f84e:	4622      	mov	r2, r4
 800f850:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800f854:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800f858:	4604      	mov	r4, r0
 800f85a:	4638      	mov	r0, r7
 800f85c:	f000 fb02 	bl	800fe64 <run_xrce_session>
 800f860:	6936      	ldr	r6, [r6, #16]
 800f862:	4622      	mov	r2, r4
 800f864:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800f868:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800f86c:	4604      	mov	r4, r0
 800f86e:	4630      	mov	r0, r6
 800f870:	f000 faf8 	bl	800fe64 <run_xrce_session>
 800f874:	b12c      	cbz	r4, 800f882 <rmw_destroy_subscription+0xba>
 800f876:	b120      	cbz	r0, 800f882 <rmw_destroy_subscription+0xba>
 800f878:	2400      	movs	r4, #0
 800f87a:	4628      	mov	r0, r5
 800f87c:	f000 f9b0 	bl	800fbe0 <rmw_uxrce_fini_subscription_memory>
 800f880:	e7ab      	b.n	800f7da <rmw_destroy_subscription+0x12>
 800f882:	2402      	movs	r4, #2
 800f884:	e7f9      	b.n	800f87a <rmw_destroy_subscription+0xb2>
 800f886:	bf00      	nop

0800f888 <rmw_uxrce_transport_init>:
 800f888:	b508      	push	{r3, lr}
 800f88a:	b108      	cbz	r0, 800f890 <rmw_uxrce_transport_init+0x8>
 800f88c:	f100 0210 	add.w	r2, r0, #16
 800f890:	b139      	cbz	r1, 800f8a2 <rmw_uxrce_transport_init+0x1a>
 800f892:	6949      	ldr	r1, [r1, #20]
 800f894:	4610      	mov	r0, r2
 800f896:	f001 f85f 	bl	8010958 <uxr_init_custom_transport>
 800f89a:	f080 0001 	eor.w	r0, r0, #1
 800f89e:	b2c0      	uxtb	r0, r0
 800f8a0:	bd08      	pop	{r3, pc}
 800f8a2:	4b04      	ldr	r3, [pc, #16]	@ (800f8b4 <rmw_uxrce_transport_init+0x2c>)
 800f8a4:	4610      	mov	r0, r2
 800f8a6:	6859      	ldr	r1, [r3, #4]
 800f8a8:	f001 f856 	bl	8010958 <uxr_init_custom_transport>
 800f8ac:	f080 0001 	eor.w	r0, r0, #1
 800f8b0:	b2c0      	uxtb	r0, r0
 800f8b2:	bd08      	pop	{r3, pc}
 800f8b4:	20006718 	.word	0x20006718

0800f8b8 <rmw_uxrce_init_service_memory>:
 800f8b8:	b1e2      	cbz	r2, 800f8f4 <rmw_uxrce_init_service_memory+0x3c>
 800f8ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8be:	7b05      	ldrb	r5, [r0, #12]
 800f8c0:	4606      	mov	r6, r0
 800f8c2:	b9ad      	cbnz	r5, 800f8f0 <rmw_uxrce_init_service_memory+0x38>
 800f8c4:	23c8      	movs	r3, #200	@ 0xc8
 800f8c6:	e9c0 5500 	strd	r5, r5, [r0]
 800f8ca:	6083      	str	r3, [r0, #8]
 800f8cc:	f240 1301 	movw	r3, #257	@ 0x101
 800f8d0:	4617      	mov	r7, r2
 800f8d2:	8183      	strh	r3, [r0, #12]
 800f8d4:	460c      	mov	r4, r1
 800f8d6:	46a8      	mov	r8, r5
 800f8d8:	4621      	mov	r1, r4
 800f8da:	4630      	mov	r0, r6
 800f8dc:	3501      	adds	r5, #1
 800f8de:	f007 f9cb 	bl	8016c78 <put_memory>
 800f8e2:	42af      	cmp	r7, r5
 800f8e4:	60a4      	str	r4, [r4, #8]
 800f8e6:	f884 800c 	strb.w	r8, [r4, #12]
 800f8ea:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800f8ee:	d1f3      	bne.n	800f8d8 <rmw_uxrce_init_service_memory+0x20>
 800f8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8f4:	4770      	bx	lr
 800f8f6:	bf00      	nop

0800f8f8 <rmw_uxrce_init_client_memory>:
 800f8f8:	b1e2      	cbz	r2, 800f934 <rmw_uxrce_init_client_memory+0x3c>
 800f8fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8fe:	7b05      	ldrb	r5, [r0, #12]
 800f900:	4606      	mov	r6, r0
 800f902:	b9ad      	cbnz	r5, 800f930 <rmw_uxrce_init_client_memory+0x38>
 800f904:	23c8      	movs	r3, #200	@ 0xc8
 800f906:	e9c0 5500 	strd	r5, r5, [r0]
 800f90a:	6083      	str	r3, [r0, #8]
 800f90c:	f240 1301 	movw	r3, #257	@ 0x101
 800f910:	4617      	mov	r7, r2
 800f912:	8183      	strh	r3, [r0, #12]
 800f914:	460c      	mov	r4, r1
 800f916:	46a8      	mov	r8, r5
 800f918:	4621      	mov	r1, r4
 800f91a:	4630      	mov	r0, r6
 800f91c:	3501      	adds	r5, #1
 800f91e:	f007 f9ab 	bl	8016c78 <put_memory>
 800f922:	42af      	cmp	r7, r5
 800f924:	60a4      	str	r4, [r4, #8]
 800f926:	f884 800c 	strb.w	r8, [r4, #12]
 800f92a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800f92e:	d1f3      	bne.n	800f918 <rmw_uxrce_init_client_memory+0x20>
 800f930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f934:	4770      	bx	lr
 800f936:	bf00      	nop

0800f938 <rmw_uxrce_init_publisher_memory>:
 800f938:	b1e2      	cbz	r2, 800f974 <rmw_uxrce_init_publisher_memory+0x3c>
 800f93a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f93e:	7b05      	ldrb	r5, [r0, #12]
 800f940:	4606      	mov	r6, r0
 800f942:	b9ad      	cbnz	r5, 800f970 <rmw_uxrce_init_publisher_memory+0x38>
 800f944:	23d8      	movs	r3, #216	@ 0xd8
 800f946:	e9c0 5500 	strd	r5, r5, [r0]
 800f94a:	6083      	str	r3, [r0, #8]
 800f94c:	f240 1301 	movw	r3, #257	@ 0x101
 800f950:	4617      	mov	r7, r2
 800f952:	8183      	strh	r3, [r0, #12]
 800f954:	460c      	mov	r4, r1
 800f956:	46a8      	mov	r8, r5
 800f958:	4621      	mov	r1, r4
 800f95a:	4630      	mov	r0, r6
 800f95c:	3501      	adds	r5, #1
 800f95e:	f007 f98b 	bl	8016c78 <put_memory>
 800f962:	42af      	cmp	r7, r5
 800f964:	60a4      	str	r4, [r4, #8]
 800f966:	f884 800c 	strb.w	r8, [r4, #12]
 800f96a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800f96e:	d1f3      	bne.n	800f958 <rmw_uxrce_init_publisher_memory+0x20>
 800f970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f974:	4770      	bx	lr
 800f976:	bf00      	nop

0800f978 <rmw_uxrce_init_subscription_memory>:
 800f978:	b1e2      	cbz	r2, 800f9b4 <rmw_uxrce_init_subscription_memory+0x3c>
 800f97a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f97e:	7b05      	ldrb	r5, [r0, #12]
 800f980:	4606      	mov	r6, r0
 800f982:	b9ad      	cbnz	r5, 800f9b0 <rmw_uxrce_init_subscription_memory+0x38>
 800f984:	23d8      	movs	r3, #216	@ 0xd8
 800f986:	e9c0 5500 	strd	r5, r5, [r0]
 800f98a:	6083      	str	r3, [r0, #8]
 800f98c:	f240 1301 	movw	r3, #257	@ 0x101
 800f990:	4617      	mov	r7, r2
 800f992:	8183      	strh	r3, [r0, #12]
 800f994:	460c      	mov	r4, r1
 800f996:	46a8      	mov	r8, r5
 800f998:	4621      	mov	r1, r4
 800f99a:	4630      	mov	r0, r6
 800f99c:	3501      	adds	r5, #1
 800f99e:	f007 f96b 	bl	8016c78 <put_memory>
 800f9a2:	42af      	cmp	r7, r5
 800f9a4:	60a4      	str	r4, [r4, #8]
 800f9a6:	f884 800c 	strb.w	r8, [r4, #12]
 800f9aa:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800f9ae:	d1f3      	bne.n	800f998 <rmw_uxrce_init_subscription_memory+0x20>
 800f9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9b4:	4770      	bx	lr
 800f9b6:	bf00      	nop

0800f9b8 <rmw_uxrce_init_node_memory>:
 800f9b8:	b1e2      	cbz	r2, 800f9f4 <rmw_uxrce_init_node_memory+0x3c>
 800f9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9be:	7b05      	ldrb	r5, [r0, #12]
 800f9c0:	4606      	mov	r6, r0
 800f9c2:	b9ad      	cbnz	r5, 800f9f0 <rmw_uxrce_init_node_memory+0x38>
 800f9c4:	23a4      	movs	r3, #164	@ 0xa4
 800f9c6:	e9c0 5500 	strd	r5, r5, [r0]
 800f9ca:	6083      	str	r3, [r0, #8]
 800f9cc:	f240 1301 	movw	r3, #257	@ 0x101
 800f9d0:	4617      	mov	r7, r2
 800f9d2:	8183      	strh	r3, [r0, #12]
 800f9d4:	460c      	mov	r4, r1
 800f9d6:	46a8      	mov	r8, r5
 800f9d8:	4621      	mov	r1, r4
 800f9da:	4630      	mov	r0, r6
 800f9dc:	3501      	adds	r5, #1
 800f9de:	f007 f94b 	bl	8016c78 <put_memory>
 800f9e2:	42af      	cmp	r7, r5
 800f9e4:	60a4      	str	r4, [r4, #8]
 800f9e6:	f884 800c 	strb.w	r8, [r4, #12]
 800f9ea:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800f9ee:	d1f3      	bne.n	800f9d8 <rmw_uxrce_init_node_memory+0x20>
 800f9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9f4:	4770      	bx	lr
 800f9f6:	bf00      	nop

0800f9f8 <rmw_uxrce_init_session_memory>:
 800f9f8:	b1ea      	cbz	r2, 800fa36 <rmw_uxrce_init_session_memory+0x3e>
 800f9fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9fe:	7b05      	ldrb	r5, [r0, #12]
 800fa00:	4606      	mov	r6, r0
 800fa02:	b9b5      	cbnz	r5, 800fa32 <rmw_uxrce_init_session_memory+0x3a>
 800fa04:	e9c0 5500 	strd	r5, r5, [r0]
 800fa08:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800fa0c:	f240 1301 	movw	r3, #257	@ 0x101
 800fa10:	4617      	mov	r7, r2
 800fa12:	f8c0 8008 	str.w	r8, [r0, #8]
 800fa16:	460c      	mov	r4, r1
 800fa18:	8183      	strh	r3, [r0, #12]
 800fa1a:	46a9      	mov	r9, r5
 800fa1c:	4621      	mov	r1, r4
 800fa1e:	4630      	mov	r0, r6
 800fa20:	3501      	adds	r5, #1
 800fa22:	f007 f929 	bl	8016c78 <put_memory>
 800fa26:	42af      	cmp	r7, r5
 800fa28:	60a4      	str	r4, [r4, #8]
 800fa2a:	f884 900c 	strb.w	r9, [r4, #12]
 800fa2e:	4444      	add	r4, r8
 800fa30:	d1f4      	bne.n	800fa1c <rmw_uxrce_init_session_memory+0x24>
 800fa32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa36:	4770      	bx	lr

0800fa38 <rmw_uxrce_init_topic_memory>:
 800fa38:	b1e2      	cbz	r2, 800fa74 <rmw_uxrce_init_topic_memory+0x3c>
 800fa3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa3e:	7b05      	ldrb	r5, [r0, #12]
 800fa40:	4606      	mov	r6, r0
 800fa42:	b9ad      	cbnz	r5, 800fa70 <rmw_uxrce_init_topic_memory+0x38>
 800fa44:	231c      	movs	r3, #28
 800fa46:	e9c0 5500 	strd	r5, r5, [r0]
 800fa4a:	6083      	str	r3, [r0, #8]
 800fa4c:	f240 1301 	movw	r3, #257	@ 0x101
 800fa50:	4617      	mov	r7, r2
 800fa52:	8183      	strh	r3, [r0, #12]
 800fa54:	460c      	mov	r4, r1
 800fa56:	46a8      	mov	r8, r5
 800fa58:	4621      	mov	r1, r4
 800fa5a:	4630      	mov	r0, r6
 800fa5c:	3501      	adds	r5, #1
 800fa5e:	f007 f90b 	bl	8016c78 <put_memory>
 800fa62:	42af      	cmp	r7, r5
 800fa64:	60a4      	str	r4, [r4, #8]
 800fa66:	f884 800c 	strb.w	r8, [r4, #12]
 800fa6a:	f104 041c 	add.w	r4, r4, #28
 800fa6e:	d1f3      	bne.n	800fa58 <rmw_uxrce_init_topic_memory+0x20>
 800fa70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa74:	4770      	bx	lr
 800fa76:	bf00      	nop

0800fa78 <rmw_uxrce_init_static_input_buffer_memory>:
 800fa78:	b1ea      	cbz	r2, 800fab6 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800fa7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa7e:	7b05      	ldrb	r5, [r0, #12]
 800fa80:	4606      	mov	r6, r0
 800fa82:	b9b5      	cbnz	r5, 800fab2 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800fa84:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800fa88:	e9c0 5500 	strd	r5, r5, [r0]
 800fa8c:	6083      	str	r3, [r0, #8]
 800fa8e:	f240 1301 	movw	r3, #257	@ 0x101
 800fa92:	4617      	mov	r7, r2
 800fa94:	8183      	strh	r3, [r0, #12]
 800fa96:	460c      	mov	r4, r1
 800fa98:	46a8      	mov	r8, r5
 800fa9a:	4621      	mov	r1, r4
 800fa9c:	4630      	mov	r0, r6
 800fa9e:	3501      	adds	r5, #1
 800faa0:	f007 f8ea 	bl	8016c78 <put_memory>
 800faa4:	42af      	cmp	r7, r5
 800faa6:	60a4      	str	r4, [r4, #8]
 800faa8:	f884 800c 	strb.w	r8, [r4, #12]
 800faac:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800fab0:	d1f3      	bne.n	800fa9a <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800fab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fab6:	4770      	bx	lr

0800fab8 <rmw_uxrce_init_init_options_impl_memory>:
 800fab8:	b1e2      	cbz	r2, 800faf4 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800faba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fabe:	7b05      	ldrb	r5, [r0, #12]
 800fac0:	4606      	mov	r6, r0
 800fac2:	b9ad      	cbnz	r5, 800faf0 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800fac4:	232c      	movs	r3, #44	@ 0x2c
 800fac6:	e9c0 5500 	strd	r5, r5, [r0]
 800faca:	6083      	str	r3, [r0, #8]
 800facc:	f240 1301 	movw	r3, #257	@ 0x101
 800fad0:	4617      	mov	r7, r2
 800fad2:	8183      	strh	r3, [r0, #12]
 800fad4:	460c      	mov	r4, r1
 800fad6:	46a8      	mov	r8, r5
 800fad8:	4621      	mov	r1, r4
 800fada:	4630      	mov	r0, r6
 800fadc:	3501      	adds	r5, #1
 800fade:	f007 f8cb 	bl	8016c78 <put_memory>
 800fae2:	42af      	cmp	r7, r5
 800fae4:	60a4      	str	r4, [r4, #8]
 800fae6:	f884 800c 	strb.w	r8, [r4, #12]
 800faea:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800faee:	d1f3      	bne.n	800fad8 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800faf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faf4:	4770      	bx	lr
 800faf6:	bf00      	nop

0800faf8 <rmw_uxrce_init_wait_set_memory>:
 800faf8:	b1e2      	cbz	r2, 800fb34 <rmw_uxrce_init_wait_set_memory+0x3c>
 800fafa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fafe:	7b05      	ldrb	r5, [r0, #12]
 800fb00:	4606      	mov	r6, r0
 800fb02:	b9ad      	cbnz	r5, 800fb30 <rmw_uxrce_init_wait_set_memory+0x38>
 800fb04:	231c      	movs	r3, #28
 800fb06:	e9c0 5500 	strd	r5, r5, [r0]
 800fb0a:	6083      	str	r3, [r0, #8]
 800fb0c:	f240 1301 	movw	r3, #257	@ 0x101
 800fb10:	4617      	mov	r7, r2
 800fb12:	8183      	strh	r3, [r0, #12]
 800fb14:	460c      	mov	r4, r1
 800fb16:	46a8      	mov	r8, r5
 800fb18:	4621      	mov	r1, r4
 800fb1a:	4630      	mov	r0, r6
 800fb1c:	3501      	adds	r5, #1
 800fb1e:	f007 f8ab 	bl	8016c78 <put_memory>
 800fb22:	42af      	cmp	r7, r5
 800fb24:	60a4      	str	r4, [r4, #8]
 800fb26:	f884 800c 	strb.w	r8, [r4, #12]
 800fb2a:	f104 041c 	add.w	r4, r4, #28
 800fb2e:	d1f3      	bne.n	800fb18 <rmw_uxrce_init_wait_set_memory+0x20>
 800fb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb34:	4770      	bx	lr
 800fb36:	bf00      	nop

0800fb38 <rmw_uxrce_init_guard_condition_memory>:
 800fb38:	b1e2      	cbz	r2, 800fb74 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800fb3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb3e:	7b05      	ldrb	r5, [r0, #12]
 800fb40:	4606      	mov	r6, r0
 800fb42:	b9ad      	cbnz	r5, 800fb70 <rmw_uxrce_init_guard_condition_memory+0x38>
 800fb44:	2320      	movs	r3, #32
 800fb46:	e9c0 5500 	strd	r5, r5, [r0]
 800fb4a:	6083      	str	r3, [r0, #8]
 800fb4c:	f240 1301 	movw	r3, #257	@ 0x101
 800fb50:	4617      	mov	r7, r2
 800fb52:	8183      	strh	r3, [r0, #12]
 800fb54:	460c      	mov	r4, r1
 800fb56:	46a8      	mov	r8, r5
 800fb58:	4621      	mov	r1, r4
 800fb5a:	4630      	mov	r0, r6
 800fb5c:	3501      	adds	r5, #1
 800fb5e:	f007 f88b 	bl	8016c78 <put_memory>
 800fb62:	42af      	cmp	r7, r5
 800fb64:	60a4      	str	r4, [r4, #8]
 800fb66:	f884 800c 	strb.w	r8, [r4, #12]
 800fb6a:	f104 0420 	add.w	r4, r4, #32
 800fb6e:	d1f3      	bne.n	800fb58 <rmw_uxrce_init_guard_condition_memory+0x20>
 800fb70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb74:	4770      	bx	lr
 800fb76:	bf00      	nop

0800fb78 <rmw_uxrce_fini_session_memory>:
 800fb78:	4601      	mov	r1, r0
 800fb7a:	4801      	ldr	r0, [pc, #4]	@ (800fb80 <rmw_uxrce_fini_session_memory+0x8>)
 800fb7c:	f007 b87c 	b.w	8016c78 <put_memory>
 800fb80:	2000b0e4 	.word	0x2000b0e4

0800fb84 <rmw_uxrce_fini_node_memory>:
 800fb84:	b538      	push	{r3, r4, r5, lr}
 800fb86:	4604      	mov	r4, r0
 800fb88:	6800      	ldr	r0, [r0, #0]
 800fb8a:	b128      	cbz	r0, 800fb98 <rmw_uxrce_fini_node_memory+0x14>
 800fb8c:	4b07      	ldr	r3, [pc, #28]	@ (800fbac <rmw_uxrce_fini_node_memory+0x28>)
 800fb8e:	6819      	ldr	r1, [r3, #0]
 800fb90:	f7f0 fb46 	bl	8000220 <strcmp>
 800fb94:	b940      	cbnz	r0, 800fba8 <rmw_uxrce_fini_node_memory+0x24>
 800fb96:	6020      	str	r0, [r4, #0]
 800fb98:	6861      	ldr	r1, [r4, #4]
 800fb9a:	b129      	cbz	r1, 800fba8 <rmw_uxrce_fini_node_memory+0x24>
 800fb9c:	2500      	movs	r5, #0
 800fb9e:	4804      	ldr	r0, [pc, #16]	@ (800fbb0 <rmw_uxrce_fini_node_memory+0x2c>)
 800fba0:	610d      	str	r5, [r1, #16]
 800fba2:	f007 f869 	bl	8016c78 <put_memory>
 800fba6:	6065      	str	r5, [r4, #4]
 800fba8:	bd38      	pop	{r3, r4, r5, pc}
 800fbaa:	bf00      	nop
 800fbac:	0801a924 	.word	0x0801a924
 800fbb0:	2000b0b4 	.word	0x2000b0b4

0800fbb4 <rmw_uxrce_fini_publisher_memory>:
 800fbb4:	b510      	push	{r4, lr}
 800fbb6:	4604      	mov	r4, r0
 800fbb8:	6800      	ldr	r0, [r0, #0]
 800fbba:	b128      	cbz	r0, 800fbc8 <rmw_uxrce_fini_publisher_memory+0x14>
 800fbbc:	4b06      	ldr	r3, [pc, #24]	@ (800fbd8 <rmw_uxrce_fini_publisher_memory+0x24>)
 800fbbe:	6819      	ldr	r1, [r3, #0]
 800fbc0:	f7f0 fb2e 	bl	8000220 <strcmp>
 800fbc4:	b938      	cbnz	r0, 800fbd6 <rmw_uxrce_fini_publisher_memory+0x22>
 800fbc6:	6020      	str	r0, [r4, #0]
 800fbc8:	6861      	ldr	r1, [r4, #4]
 800fbca:	b121      	cbz	r1, 800fbd6 <rmw_uxrce_fini_publisher_memory+0x22>
 800fbcc:	4803      	ldr	r0, [pc, #12]	@ (800fbdc <rmw_uxrce_fini_publisher_memory+0x28>)
 800fbce:	f007 f853 	bl	8016c78 <put_memory>
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	6063      	str	r3, [r4, #4]
 800fbd6:	bd10      	pop	{r4, pc}
 800fbd8:	0801a924 	.word	0x0801a924
 800fbdc:	2000b0c4 	.word	0x2000b0c4

0800fbe0 <rmw_uxrce_fini_subscription_memory>:
 800fbe0:	b510      	push	{r4, lr}
 800fbe2:	4604      	mov	r4, r0
 800fbe4:	6800      	ldr	r0, [r0, #0]
 800fbe6:	b128      	cbz	r0, 800fbf4 <rmw_uxrce_fini_subscription_memory+0x14>
 800fbe8:	4b06      	ldr	r3, [pc, #24]	@ (800fc04 <rmw_uxrce_fini_subscription_memory+0x24>)
 800fbea:	6819      	ldr	r1, [r3, #0]
 800fbec:	f7f0 fb18 	bl	8000220 <strcmp>
 800fbf0:	b938      	cbnz	r0, 800fc02 <rmw_uxrce_fini_subscription_memory+0x22>
 800fbf2:	6020      	str	r0, [r4, #0]
 800fbf4:	6861      	ldr	r1, [r4, #4]
 800fbf6:	b121      	cbz	r1, 800fc02 <rmw_uxrce_fini_subscription_memory+0x22>
 800fbf8:	4803      	ldr	r0, [pc, #12]	@ (800fc08 <rmw_uxrce_fini_subscription_memory+0x28>)
 800fbfa:	f007 f83d 	bl	8016c78 <put_memory>
 800fbfe:	2300      	movs	r3, #0
 800fc00:	6063      	str	r3, [r4, #4]
 800fc02:	bd10      	pop	{r4, pc}
 800fc04:	0801a924 	.word	0x0801a924
 800fc08:	2000b104 	.word	0x2000b104

0800fc0c <rmw_uxrce_fini_service_memory>:
 800fc0c:	b510      	push	{r4, lr}
 800fc0e:	4604      	mov	r4, r0
 800fc10:	6800      	ldr	r0, [r0, #0]
 800fc12:	b128      	cbz	r0, 800fc20 <rmw_uxrce_fini_service_memory+0x14>
 800fc14:	4b06      	ldr	r3, [pc, #24]	@ (800fc30 <rmw_uxrce_fini_service_memory+0x24>)
 800fc16:	6819      	ldr	r1, [r3, #0]
 800fc18:	f7f0 fb02 	bl	8000220 <strcmp>
 800fc1c:	b938      	cbnz	r0, 800fc2e <rmw_uxrce_fini_service_memory+0x22>
 800fc1e:	6020      	str	r0, [r4, #0]
 800fc20:	6861      	ldr	r1, [r4, #4]
 800fc22:	b121      	cbz	r1, 800fc2e <rmw_uxrce_fini_service_memory+0x22>
 800fc24:	4803      	ldr	r0, [pc, #12]	@ (800fc34 <rmw_uxrce_fini_service_memory+0x28>)
 800fc26:	f007 f827 	bl	8016c78 <put_memory>
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	6063      	str	r3, [r4, #4]
 800fc2e:	bd10      	pop	{r4, pc}
 800fc30:	0801a924 	.word	0x0801a924
 800fc34:	2000b0d4 	.word	0x2000b0d4

0800fc38 <rmw_uxrce_fini_client_memory>:
 800fc38:	b510      	push	{r4, lr}
 800fc3a:	4604      	mov	r4, r0
 800fc3c:	6800      	ldr	r0, [r0, #0]
 800fc3e:	b128      	cbz	r0, 800fc4c <rmw_uxrce_fini_client_memory+0x14>
 800fc40:	4b06      	ldr	r3, [pc, #24]	@ (800fc5c <rmw_uxrce_fini_client_memory+0x24>)
 800fc42:	6819      	ldr	r1, [r3, #0]
 800fc44:	f7f0 faec 	bl	8000220 <strcmp>
 800fc48:	b938      	cbnz	r0, 800fc5a <rmw_uxrce_fini_client_memory+0x22>
 800fc4a:	6020      	str	r0, [r4, #0]
 800fc4c:	6861      	ldr	r1, [r4, #4]
 800fc4e:	b121      	cbz	r1, 800fc5a <rmw_uxrce_fini_client_memory+0x22>
 800fc50:	4803      	ldr	r0, [pc, #12]	@ (800fc60 <rmw_uxrce_fini_client_memory+0x28>)
 800fc52:	f007 f811 	bl	8016c78 <put_memory>
 800fc56:	2300      	movs	r3, #0
 800fc58:	6063      	str	r3, [r4, #4]
 800fc5a:	bd10      	pop	{r4, pc}
 800fc5c:	0801a924 	.word	0x0801a924
 800fc60:	200068b0 	.word	0x200068b0

0800fc64 <rmw_uxrce_fini_topic_memory>:
 800fc64:	b510      	push	{r4, lr}
 800fc66:	4604      	mov	r4, r0
 800fc68:	4621      	mov	r1, r4
 800fc6a:	4803      	ldr	r0, [pc, #12]	@ (800fc78 <rmw_uxrce_fini_topic_memory+0x14>)
 800fc6c:	f007 f804 	bl	8016c78 <put_memory>
 800fc70:	2300      	movs	r3, #0
 800fc72:	61a3      	str	r3, [r4, #24]
 800fc74:	bd10      	pop	{r4, pc}
 800fc76:	bf00      	nop
 800fc78:	2000b114 	.word	0x2000b114

0800fc7c <rmw_uxrce_get_static_input_buffer_for_entity>:
 800fc7c:	b082      	sub	sp, #8
 800fc7e:	b530      	push	{r4, r5, lr}
 800fc80:	4925      	ldr	r1, [pc, #148]	@ (800fd18 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800fc82:	680d      	ldr	r5, [r1, #0]
 800fc84:	ac03      	add	r4, sp, #12
 800fc86:	e884 000c 	stmia.w	r4, {r2, r3}
 800fc8a:	461c      	mov	r4, r3
 800fc8c:	2d00      	cmp	r5, #0
 800fc8e:	d041      	beq.n	800fd14 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800fc90:	462b      	mov	r3, r5
 800fc92:	2100      	movs	r1, #0
 800fc94:	689a      	ldr	r2, [r3, #8]
 800fc96:	685b      	ldr	r3, [r3, #4]
 800fc98:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800fc9c:	4290      	cmp	r0, r2
 800fc9e:	bf08      	it	eq
 800fca0:	3101      	addeq	r1, #1
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d1f6      	bne.n	800fc94 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800fca6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800fcaa:	2b02      	cmp	r3, #2
 800fcac:	d029      	beq.n	800fd02 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800fcae:	d907      	bls.n	800fcc0 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800fcb0:	2b03      	cmp	r3, #3
 800fcb2:	d005      	beq.n	800fcc0 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800fcb4:	2100      	movs	r1, #0
 800fcb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fcba:	4608      	mov	r0, r1
 800fcbc:	b002      	add	sp, #8
 800fcbe:	4770      	bx	lr
 800fcc0:	b314      	cbz	r4, 800fd08 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800fcc2:	428c      	cmp	r4, r1
 800fcc4:	d820      	bhi.n	800fd08 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800fcc6:	2d00      	cmp	r5, #0
 800fcc8:	d0f4      	beq.n	800fcb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800fcca:	2100      	movs	r1, #0
 800fccc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800fcd0:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800fcd4:	e002      	b.n	800fcdc <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800fcd6:	686d      	ldr	r5, [r5, #4]
 800fcd8:	2d00      	cmp	r5, #0
 800fcda:	d0ec      	beq.n	800fcb6 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800fcdc:	68ab      	ldr	r3, [r5, #8]
 800fcde:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800fce2:	4290      	cmp	r0, r2
 800fce4:	d1f7      	bne.n	800fcd6 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800fce6:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800fcea:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800fcee:	4562      	cmp	r2, ip
 800fcf0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800fcf4:	eb73 0e04 	sbcs.w	lr, r3, r4
 800fcf8:	daed      	bge.n	800fcd6 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800fcfa:	4694      	mov	ip, r2
 800fcfc:	461c      	mov	r4, r3
 800fcfe:	4629      	mov	r1, r5
 800fd00:	e7e9      	b.n	800fcd6 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800fd02:	b10c      	cbz	r4, 800fd08 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800fd04:	428c      	cmp	r4, r1
 800fd06:	d9d5      	bls.n	800fcb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800fd08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd0c:	4802      	ldr	r0, [pc, #8]	@ (800fd18 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800fd0e:	b002      	add	sp, #8
 800fd10:	f006 bfa2 	b.w	8016c58 <get_memory>
 800fd14:	4629      	mov	r1, r5
 800fd16:	e7c6      	b.n	800fca6 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800fd18:	2000b0f4 	.word	0x2000b0f4

0800fd1c <rmw_uxrce_find_static_input_buffer_by_owner>:
 800fd1c:	4b11      	ldr	r3, [pc, #68]	@ (800fd64 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	b530      	push	{r4, r5, lr}
 800fd22:	b1e3      	cbz	r3, 800fd5e <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800fd24:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800fd28:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800fd2c:	2400      	movs	r4, #0
 800fd2e:	e001      	b.n	800fd34 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800fd30:	685b      	ldr	r3, [r3, #4]
 800fd32:	b193      	cbz	r3, 800fd5a <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800fd34:	689a      	ldr	r2, [r3, #8]
 800fd36:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800fd3a:	4288      	cmp	r0, r1
 800fd3c:	d1f8      	bne.n	800fd30 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800fd3e:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800fd42:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800fd46:	4571      	cmp	r1, lr
 800fd48:	eb72 050c 	sbcs.w	r5, r2, ip
 800fd4c:	daf0      	bge.n	800fd30 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800fd4e:	461c      	mov	r4, r3
 800fd50:	685b      	ldr	r3, [r3, #4]
 800fd52:	468e      	mov	lr, r1
 800fd54:	4694      	mov	ip, r2
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d1ec      	bne.n	800fd34 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800fd5a:	4620      	mov	r0, r4
 800fd5c:	bd30      	pop	{r4, r5, pc}
 800fd5e:	461c      	mov	r4, r3
 800fd60:	4620      	mov	r0, r4
 800fd62:	bd30      	pop	{r4, r5, pc}
 800fd64:	2000b0f4 	.word	0x2000b0f4

0800fd68 <rmw_uxrce_clean_expired_static_input_buffer>:
 800fd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd6c:	4b3c      	ldr	r3, [pc, #240]	@ (800fe60 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800fd6e:	ed2d 8b06 	vpush	{d8-d10}
 800fd72:	681f      	ldr	r7, [r3, #0]
 800fd74:	b08d      	sub	sp, #52	@ 0x34
 800fd76:	f007 fa27 	bl	80171c8 <rmw_uros_epoch_nanos>
 800fd7a:	2f00      	cmp	r7, #0
 800fd7c:	d05d      	beq.n	800fe3a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800fd7e:	46b8      	mov	r8, r7
 800fd80:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800fe48 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800fd84:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800fd88:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800fd8c:	2b04      	cmp	r3, #4
 800fd8e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800fe50 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800fd92:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800fe58 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800fd96:	4681      	mov	r9, r0
 800fd98:	468a      	mov	sl, r1
 800fd9a:	ac04      	add	r4, sp, #16
 800fd9c:	d03f      	beq.n	800fe1e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800fd9e:	2b05      	cmp	r3, #5
 800fda0:	d044      	beq.n	800fe2c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800fda2:	2b03      	cmp	r3, #3
 800fda4:	d03b      	beq.n	800fe1e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800fda6:	ed8d 8b04 	vstr	d8, [sp, #16]
 800fdaa:	ed8d ab06 	vstr	d10, [sp, #24]
 800fdae:	ed8d 8b08 	vstr	d8, [sp, #32]
 800fdb2:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800fdb6:	ab08      	add	r3, sp, #32
 800fdb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fdba:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fdbe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800fdc2:	f006 fdd5 	bl	8016970 <rmw_time_equal>
 800fdc6:	b118      	cbz	r0, 800fdd0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800fdc8:	ed8d 9b04 	vstr	d9, [sp, #16]
 800fdcc:	ed8d 8b06 	vstr	d8, [sp, #24]
 800fdd0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800fdd4:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800fdd8:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800fddc:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800fde0:	f006 fe1a 	bl	8016a18 <rmw_time_total_nsec>
 800fde4:	1830      	adds	r0, r6, r0
 800fde6:	eb47 0101 	adc.w	r1, r7, r1
 800fdea:	4548      	cmp	r0, r9
 800fdec:	eb71 030a 	sbcs.w	r3, r1, sl
 800fdf0:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800fdf4:	db05      	blt.n	800fe02 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800fdf6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800fdfa:	4591      	cmp	r9, r2
 800fdfc:	eb7a 0303 	sbcs.w	r3, sl, r3
 800fe00:	da03      	bge.n	800fe0a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800fe02:	4817      	ldr	r0, [pc, #92]	@ (800fe60 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800fe04:	4641      	mov	r1, r8
 800fe06:	f006 ff37 	bl	8016c78 <put_memory>
 800fe0a:	f1bb 0f00 	cmp.w	fp, #0
 800fe0e:	d014      	beq.n	800fe3a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800fe10:	46d8      	mov	r8, fp
 800fe12:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800fe16:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800fe1a:	2b04      	cmp	r3, #4
 800fe1c:	d1bf      	bne.n	800fd9e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800fe1e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800fe22:	3340      	adds	r3, #64	@ 0x40
 800fe24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fe2a:	e7c0      	b.n	800fdae <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800fe2c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800fe30:	3348      	adds	r3, #72	@ 0x48
 800fe32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fe38:	e7b9      	b.n	800fdae <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800fe3a:	b00d      	add	sp, #52	@ 0x34
 800fe3c:	ecbd 8b06 	vpop	{d8-d10}
 800fe40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe44:	f3af 8000 	nop.w
	...
 800fe50:	00000001 	.word	0x00000001
 800fe54:	00000000 	.word	0x00000000
 800fe58:	0000001e 	.word	0x0000001e
 800fe5c:	00000000 	.word	0x00000000
 800fe60:	2000b0f4 	.word	0x2000b0f4

0800fe64 <run_xrce_session>:
 800fe64:	b510      	push	{r4, lr}
 800fe66:	788c      	ldrb	r4, [r1, #2]
 800fe68:	b086      	sub	sp, #24
 800fe6a:	2c01      	cmp	r4, #1
 800fe6c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800fe70:	d00c      	beq.n	800fe8c <run_xrce_session+0x28>
 800fe72:	4619      	mov	r1, r3
 800fe74:	2301      	movs	r3, #1
 800fe76:	9300      	str	r3, [sp, #0]
 800fe78:	f10d 020e 	add.w	r2, sp, #14
 800fe7c:	f10d 0317 	add.w	r3, sp, #23
 800fe80:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fe84:	f001 fc06 	bl	8011694 <uxr_run_session_until_all_status>
 800fe88:	b006      	add	sp, #24
 800fe8a:	bd10      	pop	{r4, pc}
 800fe8c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fe90:	f001 f81a 	bl	8010ec8 <uxr_flash_output_streams>
 800fe94:	4620      	mov	r0, r4
 800fe96:	b006      	add	sp, #24
 800fe98:	bd10      	pop	{r4, pc}
 800fe9a:	bf00      	nop

0800fe9c <convert_qos_profile>:
 800fe9c:	7a4a      	ldrb	r2, [r1, #9]
 800fe9e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800fea2:	2a02      	cmp	r2, #2
 800fea4:	bf18      	it	ne
 800fea6:	2200      	movne	r2, #0
 800fea8:	7002      	strb	r2, [r0, #0]
 800feaa:	780a      	ldrb	r2, [r1, #0]
 800feac:	8889      	ldrh	r1, [r1, #4]
 800feae:	8081      	strh	r1, [r0, #4]
 800feb0:	f1ac 0c02 	sub.w	ip, ip, #2
 800feb4:	f1a2 0202 	sub.w	r2, r2, #2
 800feb8:	fabc fc8c 	clz	ip, ip
 800febc:	fab2 f282 	clz	r2, r2
 800fec0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800fec4:	0952      	lsrs	r2, r2, #5
 800fec6:	f880 c001 	strb.w	ip, [r0, #1]
 800feca:	7082      	strb	r2, [r0, #2]
 800fecc:	4770      	bx	lr
 800fece:	bf00      	nop

0800fed0 <generate_service_topics>:
 800fed0:	b570      	push	{r4, r5, r6, lr}
 800fed2:	b082      	sub	sp, #8
 800fed4:	461c      	mov	r4, r3
 800fed6:	4b12      	ldr	r3, [pc, #72]	@ (800ff20 <generate_service_topics+0x50>)
 800fed8:	9301      	str	r3, [sp, #4]
 800feda:	4605      	mov	r5, r0
 800fedc:	4b11      	ldr	r3, [pc, #68]	@ (800ff24 <generate_service_topics+0x54>)
 800fede:	9000      	str	r0, [sp, #0]
 800fee0:	4616      	mov	r6, r2
 800fee2:	4608      	mov	r0, r1
 800fee4:	4a10      	ldr	r2, [pc, #64]	@ (800ff28 <generate_service_topics+0x58>)
 800fee6:	4621      	mov	r1, r4
 800fee8:	f008 fc64 	bl	80187b4 <sniprintf>
 800feec:	4b0f      	ldr	r3, [pc, #60]	@ (800ff2c <generate_service_topics+0x5c>)
 800feee:	9301      	str	r3, [sp, #4]
 800fef0:	4601      	mov	r1, r0
 800fef2:	9500      	str	r5, [sp, #0]
 800fef4:	4b0e      	ldr	r3, [pc, #56]	@ (800ff30 <generate_service_topics+0x60>)
 800fef6:	4a0c      	ldr	r2, [pc, #48]	@ (800ff28 <generate_service_topics+0x58>)
 800fef8:	460d      	mov	r5, r1
 800fefa:	4630      	mov	r0, r6
 800fefc:	4621      	mov	r1, r4
 800fefe:	f008 fc59 	bl	80187b4 <sniprintf>
 800ff02:	2d00      	cmp	r5, #0
 800ff04:	db01      	blt.n	800ff0a <generate_service_topics+0x3a>
 800ff06:	42ac      	cmp	r4, r5
 800ff08:	dc02      	bgt.n	800ff10 <generate_service_topics+0x40>
 800ff0a:	2000      	movs	r0, #0
 800ff0c:	b002      	add	sp, #8
 800ff0e:	bd70      	pop	{r4, r5, r6, pc}
 800ff10:	2800      	cmp	r0, #0
 800ff12:	dbfa      	blt.n	800ff0a <generate_service_topics+0x3a>
 800ff14:	4284      	cmp	r4, r0
 800ff16:	bfd4      	ite	le
 800ff18:	2000      	movle	r0, #0
 800ff1a:	2001      	movgt	r0, #1
 800ff1c:	b002      	add	sp, #8
 800ff1e:	bd70      	pop	{r4, r5, r6, pc}
 800ff20:	0801a0f8 	.word	0x0801a0f8
 800ff24:	0801a0f4 	.word	0x0801a0f4
 800ff28:	0801a0d8 	.word	0x0801a0d8
 800ff2c:	0801a0ec 	.word	0x0801a0ec
 800ff30:	0801a0e8 	.word	0x0801a0e8

0800ff34 <generate_service_types>:
 800ff34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff38:	4605      	mov	r5, r0
 800ff3a:	b086      	sub	sp, #24
 800ff3c:	6880      	ldr	r0, [r0, #8]
 800ff3e:	460c      	mov	r4, r1
 800ff40:	4617      	mov	r7, r2
 800ff42:	461e      	mov	r6, r3
 800ff44:	4780      	blx	r0
 800ff46:	68eb      	ldr	r3, [r5, #12]
 800ff48:	4680      	mov	r8, r0
 800ff4a:	4798      	blx	r3
 800ff4c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800ff50:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800ff54:	2300      	movs	r3, #0
 800ff56:	7023      	strb	r3, [r4, #0]
 800ff58:	6813      	ldr	r3, [r2, #0]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d042      	beq.n	800ffe4 <generate_service_types+0xb0>
 800ff5e:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800fff8 <generate_service_types+0xc4>
 800ff62:	4641      	mov	r1, r8
 800ff64:	4620      	mov	r0, r4
 800ff66:	4c22      	ldr	r4, [pc, #136]	@ (800fff0 <generate_service_types+0xbc>)
 800ff68:	9405      	str	r4, [sp, #20]
 800ff6a:	6852      	ldr	r2, [r2, #4]
 800ff6c:	f8df a090 	ldr.w	sl, [pc, #144]	@ 8010000 <generate_service_types+0xcc>
 800ff70:	9204      	str	r2, [sp, #16]
 800ff72:	9100      	str	r1, [sp, #0]
 800ff74:	e9cd 4802 	strd	r4, r8, [sp, #8]
 800ff78:	4a1e      	ldr	r2, [pc, #120]	@ (800fff4 <generate_service_types+0xc0>)
 800ff7a:	f8cd a004 	str.w	sl, [sp, #4]
 800ff7e:	4631      	mov	r1, r6
 800ff80:	f008 fc18 	bl	80187b4 <sniprintf>
 800ff84:	2800      	cmp	r0, #0
 800ff86:	db1f      	blt.n	800ffc8 <generate_service_types+0x94>
 800ff88:	2300      	movs	r3, #0
 800ff8a:	703b      	strb	r3, [r7, #0]
 800ff8c:	f8d9 3000 	ldr.w	r3, [r9]
 800ff90:	42b0      	cmp	r0, r6
 800ff92:	bfac      	ite	ge
 800ff94:	2500      	movge	r5, #0
 800ff96:	2501      	movlt	r5, #1
 800ff98:	b1eb      	cbz	r3, 800ffd6 <generate_service_types+0xa2>
 800ff9a:	4a17      	ldr	r2, [pc, #92]	@ (800fff8 <generate_service_types+0xc4>)
 800ff9c:	9405      	str	r4, [sp, #20]
 800ff9e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ffa2:	9200      	str	r2, [sp, #0]
 800ffa4:	e9cd 8103 	strd	r8, r1, [sp, #12]
 800ffa8:	e9cd a401 	strd	sl, r4, [sp, #4]
 800ffac:	4a11      	ldr	r2, [pc, #68]	@ (800fff4 <generate_service_types+0xc0>)
 800ffae:	4638      	mov	r0, r7
 800ffb0:	4631      	mov	r1, r6
 800ffb2:	f008 fbff 	bl	80187b4 <sniprintf>
 800ffb6:	2800      	cmp	r0, #0
 800ffb8:	db10      	blt.n	800ffdc <generate_service_types+0xa8>
 800ffba:	42b0      	cmp	r0, r6
 800ffbc:	bfb4      	ite	lt
 800ffbe:	4628      	movlt	r0, r5
 800ffc0:	2000      	movge	r0, #0
 800ffc2:	b006      	add	sp, #24
 800ffc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffc8:	2300      	movs	r3, #0
 800ffca:	703b      	strb	r3, [r7, #0]
 800ffcc:	f8d9 3000 	ldr.w	r3, [r9]
 800ffd0:	2500      	movs	r5, #0
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d1e1      	bne.n	800ff9a <generate_service_types+0x66>
 800ffd6:	4b09      	ldr	r3, [pc, #36]	@ (800fffc <generate_service_types+0xc8>)
 800ffd8:	461a      	mov	r2, r3
 800ffda:	e7df      	b.n	800ff9c <generate_service_types+0x68>
 800ffdc:	2000      	movs	r0, #0
 800ffde:	b006      	add	sp, #24
 800ffe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffe4:	4b05      	ldr	r3, [pc, #20]	@ (800fffc <generate_service_types+0xc8>)
 800ffe6:	f8df 8010 	ldr.w	r8, [pc, #16]	@ 800fff8 <generate_service_types+0xc4>
 800ffea:	4619      	mov	r1, r3
 800ffec:	e7ba      	b.n	800ff64 <generate_service_types+0x30>
 800ffee:	bf00      	nop
 800fff0:	0801a0e0 	.word	0x0801a0e0
 800fff4:	0801a0d0 	.word	0x0801a0d0
 800fff8:	0801a0cc 	.word	0x0801a0cc
 800fffc:	0801a974 	.word	0x0801a974
 8010000:	0801a0e4 	.word	0x0801a0e4

08010004 <generate_type_name>:
 8010004:	b530      	push	{r4, r5, lr}
 8010006:	2300      	movs	r3, #0
 8010008:	700b      	strb	r3, [r1, #0]
 801000a:	6803      	ldr	r3, [r0, #0]
 801000c:	b087      	sub	sp, #28
 801000e:	4614      	mov	r4, r2
 8010010:	b1d3      	cbz	r3, 8010048 <generate_type_name+0x44>
 8010012:	4a0f      	ldr	r2, [pc, #60]	@ (8010050 <generate_type_name+0x4c>)
 8010014:	4615      	mov	r5, r2
 8010016:	9203      	str	r2, [sp, #12]
 8010018:	9500      	str	r5, [sp, #0]
 801001a:	6842      	ldr	r2, [r0, #4]
 801001c:	480d      	ldr	r0, [pc, #52]	@ (8010054 <generate_type_name+0x50>)
 801001e:	9001      	str	r0, [sp, #4]
 8010020:	4608      	mov	r0, r1
 8010022:	490d      	ldr	r1, [pc, #52]	@ (8010058 <generate_type_name+0x54>)
 8010024:	9204      	str	r2, [sp, #16]
 8010026:	9105      	str	r1, [sp, #20]
 8010028:	9102      	str	r1, [sp, #8]
 801002a:	4a0c      	ldr	r2, [pc, #48]	@ (801005c <generate_type_name+0x58>)
 801002c:	4621      	mov	r1, r4
 801002e:	f008 fbc1 	bl	80187b4 <sniprintf>
 8010032:	2800      	cmp	r0, #0
 8010034:	db05      	blt.n	8010042 <generate_type_name+0x3e>
 8010036:	4284      	cmp	r4, r0
 8010038:	bfd4      	ite	le
 801003a:	2000      	movle	r0, #0
 801003c:	2001      	movgt	r0, #1
 801003e:	b007      	add	sp, #28
 8010040:	bd30      	pop	{r4, r5, pc}
 8010042:	2000      	movs	r0, #0
 8010044:	b007      	add	sp, #28
 8010046:	bd30      	pop	{r4, r5, pc}
 8010048:	4b05      	ldr	r3, [pc, #20]	@ (8010060 <generate_type_name+0x5c>)
 801004a:	4a01      	ldr	r2, [pc, #4]	@ (8010050 <generate_type_name+0x4c>)
 801004c:	461d      	mov	r5, r3
 801004e:	e7e2      	b.n	8010016 <generate_type_name+0x12>
 8010050:	0801a0cc 	.word	0x0801a0cc
 8010054:	0801a0e4 	.word	0x0801a0e4
 8010058:	0801a0e0 	.word	0x0801a0e0
 801005c:	0801a0d0 	.word	0x0801a0d0
 8010060:	0801a974 	.word	0x0801a974

08010064 <generate_topic_name>:
 8010064:	b510      	push	{r4, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	4614      	mov	r4, r2
 801006a:	9000      	str	r0, [sp, #0]
 801006c:	4b08      	ldr	r3, [pc, #32]	@ (8010090 <generate_topic_name+0x2c>)
 801006e:	4a09      	ldr	r2, [pc, #36]	@ (8010094 <generate_topic_name+0x30>)
 8010070:	4608      	mov	r0, r1
 8010072:	4621      	mov	r1, r4
 8010074:	f008 fb9e 	bl	80187b4 <sniprintf>
 8010078:	2800      	cmp	r0, #0
 801007a:	db05      	blt.n	8010088 <generate_topic_name+0x24>
 801007c:	4284      	cmp	r4, r0
 801007e:	bfd4      	ite	le
 8010080:	2000      	movle	r0, #0
 8010082:	2001      	movgt	r0, #1
 8010084:	b002      	add	sp, #8
 8010086:	bd10      	pop	{r4, pc}
 8010088:	2000      	movs	r0, #0
 801008a:	b002      	add	sp, #8
 801008c:	bd10      	pop	{r4, pc}
 801008e:	bf00      	nop
 8010090:	0801a100 	.word	0x0801a100
 8010094:	08019bd4 	.word	0x08019bd4

08010098 <is_uxrce_rmw_identifier_valid>:
 8010098:	b510      	push	{r4, lr}
 801009a:	4604      	mov	r4, r0
 801009c:	b140      	cbz	r0, 80100b0 <is_uxrce_rmw_identifier_valid+0x18>
 801009e:	f7fe fcdb 	bl	800ea58 <rmw_get_implementation_identifier>
 80100a2:	4601      	mov	r1, r0
 80100a4:	4620      	mov	r0, r4
 80100a6:	f7f0 f8bb 	bl	8000220 <strcmp>
 80100aa:	fab0 f080 	clz	r0, r0
 80100ae:	0940      	lsrs	r0, r0, #5
 80100b0:	bd10      	pop	{r4, pc}
 80100b2:	bf00      	nop

080100b4 <get_message_typesupport_handle>:
 80100b4:	6883      	ldr	r3, [r0, #8]
 80100b6:	4718      	bx	r3

080100b8 <get_message_typesupport_handle_function>:
 80100b8:	b510      	push	{r4, lr}
 80100ba:	4604      	mov	r4, r0
 80100bc:	6800      	ldr	r0, [r0, #0]
 80100be:	f7f0 f8af 	bl	8000220 <strcmp>
 80100c2:	2800      	cmp	r0, #0
 80100c4:	bf0c      	ite	eq
 80100c6:	4620      	moveq	r0, r4
 80100c8:	2000      	movne	r0, #0
 80100ca:	bd10      	pop	{r4, pc}

080100cc <get_service_typesupport_handle>:
 80100cc:	6883      	ldr	r3, [r0, #8]
 80100ce:	4718      	bx	r3

080100d0 <get_service_typesupport_handle_function>:
 80100d0:	b510      	push	{r4, lr}
 80100d2:	4604      	mov	r4, r0
 80100d4:	6800      	ldr	r0, [r0, #0]
 80100d6:	f7f0 f8a3 	bl	8000220 <strcmp>
 80100da:	2800      	cmp	r0, #0
 80100dc:	bf0c      	ite	eq
 80100de:	4620      	moveq	r0, r4
 80100e0:	2000      	movne	r0, #0
 80100e2:	bd10      	pop	{r4, pc}

080100e4 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80100e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100e8:	6805      	ldr	r5, [r0, #0]
 80100ea:	4604      	mov	r4, r0
 80100ec:	4628      	mov	r0, r5
 80100ee:	460e      	mov	r6, r1
 80100f0:	f7f0 f896 	bl	8000220 <strcmp>
 80100f4:	b1c8      	cbz	r0, 801012a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80100f6:	4b11      	ldr	r3, [pc, #68]	@ (801013c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	429d      	cmp	r5, r3
 80100fc:	d112      	bne.n	8010124 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80100fe:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8010102:	f8d8 4000 	ldr.w	r4, [r8]
 8010106:	b16c      	cbz	r4, 8010124 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8010108:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801010c:	2700      	movs	r7, #0
 801010e:	3d04      	subs	r5, #4
 8010110:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8010114:	4631      	mov	r1, r6
 8010116:	f7f0 f883 	bl	8000220 <strcmp>
 801011a:	00bb      	lsls	r3, r7, #2
 801011c:	b140      	cbz	r0, 8010130 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801011e:	3701      	adds	r7, #1
 8010120:	42bc      	cmp	r4, r7
 8010122:	d1f5      	bne.n	8010110 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8010124:	2000      	movs	r0, #0
 8010126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801012a:	4620      	mov	r0, r4
 801012c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010130:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010138:	58d3      	ldr	r3, [r2, r3]
 801013a:	4718      	bx	r3
 801013c:	200001d0 	.word	0x200001d0

08010140 <rrr_robot_interfaces__srv__RRRTargetPath_Request__init>:
 8010140:	3800      	subs	r0, #0
 8010142:	bf18      	it	ne
 8010144:	2001      	movne	r0, #1
 8010146:	4770      	bx	lr

08010148 <rrr_robot_interfaces__srv__RRRTargetPath_Request__fini>:
 8010148:	4770      	bx	lr
 801014a:	bf00      	nop

0801014c <rrr_robot_interfaces__srv__RRRTargetPath_Response__init>:
 801014c:	b538      	push	{r3, r4, r5, lr}
 801014e:	4604      	mov	r4, r0
 8010150:	b128      	cbz	r0, 801015e <rrr_robot_interfaces__srv__RRRTargetPath_Response__init+0x12>
 8010152:	f007 f847 	bl	80171e4 <rosidl_runtime_c__String__init>
 8010156:	4605      	mov	r5, r0
 8010158:	b120      	cbz	r0, 8010164 <rrr_robot_interfaces__srv__RRRTargetPath_Response__init+0x18>
 801015a:	4628      	mov	r0, r5
 801015c:	bd38      	pop	{r3, r4, r5, pc}
 801015e:	4605      	mov	r5, r0
 8010160:	4628      	mov	r0, r5
 8010162:	bd38      	pop	{r3, r4, r5, pc}
 8010164:	4620      	mov	r0, r4
 8010166:	f007 f853 	bl	8017210 <rosidl_runtime_c__String__fini>
 801016a:	4628      	mov	r0, r5
 801016c:	bd38      	pop	{r3, r4, r5, pc}
 801016e:	bf00      	nop

08010170 <rrr_robot_interfaces__srv__RRRTargetPath_Response__fini>:
 8010170:	b108      	cbz	r0, 8010176 <rrr_robot_interfaces__srv__RRRTargetPath_Response__fini+0x6>
 8010172:	f007 b84d 	b.w	8017210 <rosidl_runtime_c__String__fini>
 8010176:	4770      	bx	lr

08010178 <rosidl_typesupport_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath>:
 8010178:	4b04      	ldr	r3, [pc, #16]	@ (801018c <rosidl_typesupport_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x14>)
 801017a:	681a      	ldr	r2, [r3, #0]
 801017c:	b10a      	cbz	r2, 8010182 <rosidl_typesupport_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0xa>
 801017e:	4803      	ldr	r0, [pc, #12]	@ (801018c <rosidl_typesupport_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x14>)
 8010180:	4770      	bx	lr
 8010182:	4a03      	ldr	r2, [pc, #12]	@ (8010190 <rosidl_typesupport_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x18>)
 8010184:	4801      	ldr	r0, [pc, #4]	@ (801018c <rosidl_typesupport_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x14>)
 8010186:	6812      	ldr	r2, [r2, #0]
 8010188:	601a      	str	r2, [r3, #0]
 801018a:	4770      	bx	lr
 801018c:	200001e0 	.word	0x200001e0
 8010190:	200001d0 	.word	0x200001d0

08010194 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request>:
 8010194:	4b04      	ldr	r3, [pc, #16]	@ (80101a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request+0x14>)
 8010196:	4805      	ldr	r0, [pc, #20]	@ (80101ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request+0x18>)
 8010198:	4905      	ldr	r1, [pc, #20]	@ (80101b0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request+0x1c>)
 801019a:	4a06      	ldr	r2, [pc, #24]	@ (80101b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request+0x20>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	6003      	str	r3, [r0, #0]
 80101a0:	600b      	str	r3, [r1, #0]
 80101a2:	6013      	str	r3, [r2, #0]
 80101a4:	4770      	bx	lr
 80101a6:	bf00      	nop
 80101a8:	200001d0 	.word	0x200001d0
 80101ac:	200001fc 	.word	0x200001fc
 80101b0:	20000208 	.word	0x20000208
 80101b4:	200001e0 	.word	0x200001e0

080101b8 <rrr_robot_interfaces__srv__RRRTargetPath_Request__rosidl_typesupport_introspection_c__RRRTargetPath_Request_init_function>:
 80101b8:	f7ff bfc2 	b.w	8010140 <rrr_robot_interfaces__srv__RRRTargetPath_Request__init>

080101bc <rrr_robot_interfaces__srv__RRRTargetPath_Request__rosidl_typesupport_introspection_c__RRRTargetPath_Request_fini_function>:
 80101bc:	f7ff bfc4 	b.w	8010148 <rrr_robot_interfaces__srv__RRRTargetPath_Request__fini>

080101c0 <rrr_robot_interfaces__srv__RRRTargetPath_Response__rosidl_typesupport_introspection_c__RRRTargetPath_Response_init_function>:
 80101c0:	f7ff bfc4 	b.w	801014c <rrr_robot_interfaces__srv__RRRTargetPath_Response__init>

080101c4 <rrr_robot_interfaces__srv__RRRTargetPath_Response__rosidl_typesupport_introspection_c__RRRTargetPath_Response_fini_function>:
 80101c4:	f7ff bfd4 	b.w	8010170 <rrr_robot_interfaces__srv__RRRTargetPath_Response__fini>

080101c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request>:
 80101c8:	4b04      	ldr	r3, [pc, #16]	@ (80101dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request+0x14>)
 80101ca:	681a      	ldr	r2, [r3, #0]
 80101cc:	b10a      	cbz	r2, 80101d2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request+0xa>
 80101ce:	4803      	ldr	r0, [pc, #12]	@ (80101dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request+0x14>)
 80101d0:	4770      	bx	lr
 80101d2:	4a03      	ldr	r2, [pc, #12]	@ (80101e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request+0x18>)
 80101d4:	4801      	ldr	r0, [pc, #4]	@ (80101dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request+0x14>)
 80101d6:	6812      	ldr	r2, [r2, #0]
 80101d8:	601a      	str	r2, [r3, #0]
 80101da:	4770      	bx	lr
 80101dc:	2000028c 	.word	0x2000028c
 80101e0:	200001d4 	.word	0x200001d4

080101e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Response>:
 80101e4:	4b04      	ldr	r3, [pc, #16]	@ (80101f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Response+0x14>)
 80101e6:	681a      	ldr	r2, [r3, #0]
 80101e8:	b10a      	cbz	r2, 80101ee <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Response+0xa>
 80101ea:	4803      	ldr	r0, [pc, #12]	@ (80101f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Response+0x14>)
 80101ec:	4770      	bx	lr
 80101ee:	4a03      	ldr	r2, [pc, #12]	@ (80101fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Response+0x18>)
 80101f0:	4801      	ldr	r0, [pc, #4]	@ (80101f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Response+0x14>)
 80101f2:	6812      	ldr	r2, [r2, #0]
 80101f4:	601a      	str	r2, [r3, #0]
 80101f6:	4770      	bx	lr
 80101f8:	20000310 	.word	0x20000310
 80101fc:	200001d4 	.word	0x200001d4

08010200 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath>:
 8010200:	4b13      	ldr	r3, [pc, #76]	@ (8010250 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x50>)
 8010202:	681a      	ldr	r2, [r3, #0]
 8010204:	b132      	cbz	r2, 8010214 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x14>
 8010206:	685b      	ldr	r3, [r3, #4]
 8010208:	689a      	ldr	r2, [r3, #8]
 801020a:	b152      	cbz	r2, 8010222 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x22>
 801020c:	68da      	ldr	r2, [r3, #12]
 801020e:	b182      	cbz	r2, 8010232 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x32>
 8010210:	480f      	ldr	r0, [pc, #60]	@ (8010250 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x50>)
 8010212:	4770      	bx	lr
 8010214:	4a0f      	ldr	r2, [pc, #60]	@ (8010254 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x54>)
 8010216:	6812      	ldr	r2, [r2, #0]
 8010218:	601a      	str	r2, [r3, #0]
 801021a:	685b      	ldr	r3, [r3, #4]
 801021c:	689a      	ldr	r2, [r3, #8]
 801021e:	2a00      	cmp	r2, #0
 8010220:	d1f4      	bne.n	801020c <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0xc>
 8010222:	4a0d      	ldr	r2, [pc, #52]	@ (8010258 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x58>)
 8010224:	6811      	ldr	r1, [r2, #0]
 8010226:	b179      	cbz	r1, 8010248 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x48>
 8010228:	6852      	ldr	r2, [r2, #4]
 801022a:	609a      	str	r2, [r3, #8]
 801022c:	68da      	ldr	r2, [r3, #12]
 801022e:	2a00      	cmp	r2, #0
 8010230:	d1ee      	bne.n	8010210 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x10>
 8010232:	4a0a      	ldr	r2, [pc, #40]	@ (801025c <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x5c>)
 8010234:	6811      	ldr	r1, [r2, #0]
 8010236:	b119      	cbz	r1, 8010240 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x40>
 8010238:	6852      	ldr	r2, [r2, #4]
 801023a:	4805      	ldr	r0, [pc, #20]	@ (8010250 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x50>)
 801023c:	60da      	str	r2, [r3, #12]
 801023e:	4770      	bx	lr
 8010240:	4904      	ldr	r1, [pc, #16]	@ (8010254 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x54>)
 8010242:	6809      	ldr	r1, [r1, #0]
 8010244:	6011      	str	r1, [r2, #0]
 8010246:	e7f7      	b.n	8010238 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x38>
 8010248:	4902      	ldr	r1, [pc, #8]	@ (8010254 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x54>)
 801024a:	6809      	ldr	r1, [r1, #0]
 801024c:	6011      	str	r1, [r2, #0]
 801024e:	e7eb      	b.n	8010228 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x28>
 8010250:	2000032c 	.word	0x2000032c
 8010254:	200001d4 	.word	0x200001d4
 8010258:	2000028c 	.word	0x2000028c
 801025c:	20000310 	.word	0x20000310

08010260 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request>:
 8010260:	4800      	ldr	r0, [pc, #0]	@ (8010264 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Request+0x4>)
 8010262:	4770      	bx	lr
 8010264:	20000354 	.word	0x20000354

08010268 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Response>:
 8010268:	4800      	ldr	r0, [pc, #0]	@ (801026c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath_Response+0x4>)
 801026a:	4770      	bx	lr
 801026c:	20000360 	.word	0x20000360

08010270 <_RRRTargetPath_Response__max_serialized_size>:
 8010270:	b508      	push	{r3, lr}
 8010272:	2101      	movs	r1, #1
 8010274:	2000      	movs	r0, #0
 8010276:	f7fb ffff 	bl	800c278 <ucdr_alignment>
 801027a:	3001      	adds	r0, #1
 801027c:	bd08      	pop	{r3, pc}
 801027e:	bf00      	nop

08010280 <_RRRTargetPath_Response__cdr_serialize>:
 8010280:	b1b0      	cbz	r0, 80102b0 <_RRRTargetPath_Response__cdr_serialize+0x30>
 8010282:	b570      	push	{r4, r5, r6, lr}
 8010284:	6806      	ldr	r6, [r0, #0]
 8010286:	460d      	mov	r5, r1
 8010288:	4604      	mov	r4, r0
 801028a:	b176      	cbz	r6, 80102aa <_RRRTargetPath_Response__cdr_serialize+0x2a>
 801028c:	4630      	mov	r0, r6
 801028e:	f7ef ffd1 	bl	8000234 <strlen>
 8010292:	1c42      	adds	r2, r0, #1
 8010294:	4631      	mov	r1, r6
 8010296:	6060      	str	r0, [r4, #4]
 8010298:	4628      	mov	r0, r5
 801029a:	f000 f8e7 	bl	801046c <ucdr_serialize_sequence_char>
 801029e:	7b21      	ldrb	r1, [r4, #12]
 80102a0:	4628      	mov	r0, r5
 80102a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80102a6:	f7fa be73 	b.w	800af90 <ucdr_serialize_bool>
 80102aa:	4632      	mov	r2, r6
 80102ac:	4630      	mov	r0, r6
 80102ae:	e7f1      	b.n	8010294 <_RRRTargetPath_Response__cdr_serialize+0x14>
 80102b0:	4770      	bx	lr
 80102b2:	bf00      	nop

080102b4 <get_serialized_size_rrr_robot_interfaces__srv__RRRTargetPath_Request>:
 80102b4:	b180      	cbz	r0, 80102d8 <get_serialized_size_rrr_robot_interfaces__srv__RRRTargetPath_Request+0x24>
 80102b6:	b538      	push	{r3, r4, r5, lr}
 80102b8:	460d      	mov	r5, r1
 80102ba:	4628      	mov	r0, r5
 80102bc:	2101      	movs	r1, #1
 80102be:	f7fb ffdb 	bl	800c278 <ucdr_alignment>
 80102c2:	1c6b      	adds	r3, r5, #1
 80102c4:	181c      	adds	r4, r3, r0
 80102c6:	2101      	movs	r1, #1
 80102c8:	4620      	mov	r0, r4
 80102ca:	f7fb ffd5 	bl	800c278 <ucdr_alignment>
 80102ce:	f1c5 0501 	rsb	r5, r5, #1
 80102d2:	4428      	add	r0, r5
 80102d4:	4420      	add	r0, r4
 80102d6:	bd38      	pop	{r3, r4, r5, pc}
 80102d8:	4770      	bx	lr
 80102da:	bf00      	nop

080102dc <get_serialized_size_rrr_robot_interfaces__srv__RRRTargetPath_Response>:
 80102dc:	b538      	push	{r3, r4, r5, lr}
 80102de:	4604      	mov	r4, r0
 80102e0:	b180      	cbz	r0, 8010304 <get_serialized_size_rrr_robot_interfaces__srv__RRRTargetPath_Response+0x28>
 80102e2:	460d      	mov	r5, r1
 80102e4:	4628      	mov	r0, r5
 80102e6:	2104      	movs	r1, #4
 80102e8:	f7fb ffc6 	bl	800c278 <ucdr_alignment>
 80102ec:	6864      	ldr	r4, [r4, #4]
 80102ee:	1d6b      	adds	r3, r5, #5
 80102f0:	4423      	add	r3, r4
 80102f2:	181c      	adds	r4, r3, r0
 80102f4:	2101      	movs	r1, #1
 80102f6:	4620      	mov	r0, r4
 80102f8:	f7fb ffbe 	bl	800c278 <ucdr_alignment>
 80102fc:	f1c5 0501 	rsb	r5, r5, #1
 8010300:	4428      	add	r0, r5
 8010302:	4420      	add	r0, r4
 8010304:	bd38      	pop	{r3, r4, r5, pc}
 8010306:	bf00      	nop

08010308 <_RRRTargetPath_Request__cdr_deserialize>:
 8010308:	b538      	push	{r3, r4, r5, lr}
 801030a:	460c      	mov	r4, r1
 801030c:	b141      	cbz	r1, 8010320 <_RRRTargetPath_Request__cdr_deserialize+0x18>
 801030e:	4605      	mov	r5, r0
 8010310:	f7fa fe54 	bl	800afbc <ucdr_deserialize_bool>
 8010314:	1c61      	adds	r1, r4, #1
 8010316:	4628      	mov	r0, r5
 8010318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801031c:	f7fa be4e 	b.w	800afbc <ucdr_deserialize_bool>
 8010320:	4608      	mov	r0, r1
 8010322:	bd38      	pop	{r3, r4, r5, pc}

08010324 <_RRRTargetPath_Request__cdr_serialize>:
 8010324:	b160      	cbz	r0, 8010340 <_RRRTargetPath_Request__cdr_serialize+0x1c>
 8010326:	b538      	push	{r3, r4, r5, lr}
 8010328:	460d      	mov	r5, r1
 801032a:	4604      	mov	r4, r0
 801032c:	7801      	ldrb	r1, [r0, #0]
 801032e:	4628      	mov	r0, r5
 8010330:	f7fa fe2e 	bl	800af90 <ucdr_serialize_bool>
 8010334:	7861      	ldrb	r1, [r4, #1]
 8010336:	4628      	mov	r0, r5
 8010338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801033c:	f7fa be28 	b.w	800af90 <ucdr_serialize_bool>
 8010340:	4770      	bx	lr
 8010342:	bf00      	nop

08010344 <_RRRTargetPath_Response__cdr_deserialize>:
 8010344:	b570      	push	{r4, r5, r6, lr}
 8010346:	460c      	mov	r4, r1
 8010348:	b082      	sub	sp, #8
 801034a:	b1b1      	cbz	r1, 801037a <_RRRTargetPath_Response__cdr_deserialize+0x36>
 801034c:	688e      	ldr	r6, [r1, #8]
 801034e:	6809      	ldr	r1, [r1, #0]
 8010350:	ab01      	add	r3, sp, #4
 8010352:	4632      	mov	r2, r6
 8010354:	4605      	mov	r5, r0
 8010356:	f000 f89b 	bl	8010490 <ucdr_deserialize_sequence_char>
 801035a:	9b01      	ldr	r3, [sp, #4]
 801035c:	b948      	cbnz	r0, 8010372 <_RRRTargetPath_Response__cdr_deserialize+0x2e>
 801035e:	429e      	cmp	r6, r3
 8010360:	d30e      	bcc.n	8010380 <_RRRTargetPath_Response__cdr_deserialize+0x3c>
 8010362:	f104 010c 	add.w	r1, r4, #12
 8010366:	4628      	mov	r0, r5
 8010368:	b002      	add	sp, #8
 801036a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801036e:	f7fa be25 	b.w	800afbc <ucdr_deserialize_bool>
 8010372:	b103      	cbz	r3, 8010376 <_RRRTargetPath_Response__cdr_deserialize+0x32>
 8010374:	3b01      	subs	r3, #1
 8010376:	6063      	str	r3, [r4, #4]
 8010378:	e7f3      	b.n	8010362 <_RRRTargetPath_Response__cdr_deserialize+0x1e>
 801037a:	4608      	mov	r0, r1
 801037c:	b002      	add	sp, #8
 801037e:	bd70      	pop	{r4, r5, r6, pc}
 8010380:	2101      	movs	r1, #1
 8010382:	75a8      	strb	r0, [r5, #22]
 8010384:	7569      	strb	r1, [r5, #21]
 8010386:	6060      	str	r0, [r4, #4]
 8010388:	4628      	mov	r0, r5
 801038a:	f7fb ff8b 	bl	800c2a4 <ucdr_align_to>
 801038e:	9901      	ldr	r1, [sp, #4]
 8010390:	4628      	mov	r0, r5
 8010392:	f7fb ffbd 	bl	800c310 <ucdr_advance_buffer>
 8010396:	e7e4      	b.n	8010362 <_RRRTargetPath_Response__cdr_deserialize+0x1e>

08010398 <_RRRTargetPath_Request__get_serialized_size>:
 8010398:	b160      	cbz	r0, 80103b4 <_RRRTargetPath_Request__get_serialized_size+0x1c>
 801039a:	b510      	push	{r4, lr}
 801039c:	2101      	movs	r1, #1
 801039e:	2000      	movs	r0, #0
 80103a0:	f7fb ff6a 	bl	800c278 <ucdr_alignment>
 80103a4:	1c44      	adds	r4, r0, #1
 80103a6:	2101      	movs	r1, #1
 80103a8:	4620      	mov	r0, r4
 80103aa:	f7fb ff65 	bl	800c278 <ucdr_alignment>
 80103ae:	3001      	adds	r0, #1
 80103b0:	4420      	add	r0, r4
 80103b2:	bd10      	pop	{r4, pc}
 80103b4:	4770      	bx	lr
 80103b6:	bf00      	nop

080103b8 <_RRRTargetPath_Response__get_serialized_size>:
 80103b8:	b510      	push	{r4, lr}
 80103ba:	4604      	mov	r4, r0
 80103bc:	b160      	cbz	r0, 80103d8 <_RRRTargetPath_Response__get_serialized_size+0x20>
 80103be:	2104      	movs	r1, #4
 80103c0:	2000      	movs	r0, #0
 80103c2:	f7fb ff59 	bl	800c278 <ucdr_alignment>
 80103c6:	6863      	ldr	r3, [r4, #4]
 80103c8:	3305      	adds	r3, #5
 80103ca:	181c      	adds	r4, r3, r0
 80103cc:	2101      	movs	r1, #1
 80103ce:	4620      	mov	r0, r4
 80103d0:	f7fb ff52 	bl	800c278 <ucdr_alignment>
 80103d4:	3001      	adds	r0, #1
 80103d6:	4420      	add	r0, r4
 80103d8:	bd10      	pop	{r4, pc}
 80103da:	bf00      	nop

080103dc <_RRRTargetPath_Request__max_serialized_size>:
 80103dc:	b510      	push	{r4, lr}
 80103de:	2101      	movs	r1, #1
 80103e0:	2000      	movs	r0, #0
 80103e2:	f7fb ff49 	bl	800c278 <ucdr_alignment>
 80103e6:	1c44      	adds	r4, r0, #1
 80103e8:	2101      	movs	r1, #1
 80103ea:	4620      	mov	r0, r4
 80103ec:	f7fb ff44 	bl	800c278 <ucdr_alignment>
 80103f0:	3001      	adds	r0, #1
 80103f2:	4420      	add	r0, r4
 80103f4:	bd10      	pop	{r4, pc}
 80103f6:	bf00      	nop

080103f8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath>:
 80103f8:	4800      	ldr	r0, [pc, #0]	@ (80103fc <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__rrr_robot_interfaces__srv__RRRTargetPath+0x4>)
 80103fa:	4770      	bx	lr
 80103fc:	20000348 	.word	0x20000348

08010400 <geometry_msgs__msg__Twist__init>:
 8010400:	b570      	push	{r4, r5, r6, lr}
 8010402:	4605      	mov	r5, r0
 8010404:	b1a8      	cbz	r0, 8010432 <geometry_msgs__msg__Twist__init+0x32>
 8010406:	f000 f82b 	bl	8010460 <geometry_msgs__msg__Vector3__init>
 801040a:	4604      	mov	r4, r0
 801040c:	b140      	cbz	r0, 8010420 <geometry_msgs__msg__Twist__init+0x20>
 801040e:	f105 0618 	add.w	r6, r5, #24
 8010412:	4630      	mov	r0, r6
 8010414:	f000 f824 	bl	8010460 <geometry_msgs__msg__Vector3__init>
 8010418:	4604      	mov	r4, r0
 801041a:	b168      	cbz	r0, 8010438 <geometry_msgs__msg__Twist__init+0x38>
 801041c:	4620      	mov	r0, r4
 801041e:	bd70      	pop	{r4, r5, r6, pc}
 8010420:	4628      	mov	r0, r5
 8010422:	f000 f821 	bl	8010468 <geometry_msgs__msg__Vector3__fini>
 8010426:	f105 0018 	add.w	r0, r5, #24
 801042a:	f000 f81d 	bl	8010468 <geometry_msgs__msg__Vector3__fini>
 801042e:	4620      	mov	r0, r4
 8010430:	bd70      	pop	{r4, r5, r6, pc}
 8010432:	4604      	mov	r4, r0
 8010434:	4620      	mov	r0, r4
 8010436:	bd70      	pop	{r4, r5, r6, pc}
 8010438:	4628      	mov	r0, r5
 801043a:	f000 f815 	bl	8010468 <geometry_msgs__msg__Vector3__fini>
 801043e:	4630      	mov	r0, r6
 8010440:	f000 f812 	bl	8010468 <geometry_msgs__msg__Vector3__fini>
 8010444:	e7ea      	b.n	801041c <geometry_msgs__msg__Twist__init+0x1c>
 8010446:	bf00      	nop

08010448 <geometry_msgs__msg__Twist__fini>:
 8010448:	b148      	cbz	r0, 801045e <geometry_msgs__msg__Twist__fini+0x16>
 801044a:	b510      	push	{r4, lr}
 801044c:	4604      	mov	r4, r0
 801044e:	f000 f80b 	bl	8010468 <geometry_msgs__msg__Vector3__fini>
 8010452:	f104 0018 	add.w	r0, r4, #24
 8010456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801045a:	f000 b805 	b.w	8010468 <geometry_msgs__msg__Vector3__fini>
 801045e:	4770      	bx	lr

08010460 <geometry_msgs__msg__Vector3__init>:
 8010460:	3800      	subs	r0, #0
 8010462:	bf18      	it	ne
 8010464:	2001      	movne	r0, #1
 8010466:	4770      	bx	lr

08010468 <geometry_msgs__msg__Vector3__fini>:
 8010468:	4770      	bx	lr
 801046a:	bf00      	nop

0801046c <ucdr_serialize_sequence_char>:
 801046c:	b570      	push	{r4, r5, r6, lr}
 801046e:	4615      	mov	r5, r2
 8010470:	460e      	mov	r6, r1
 8010472:	7d01      	ldrb	r1, [r0, #20]
 8010474:	4604      	mov	r4, r0
 8010476:	f7fb f867 	bl	800b548 <ucdr_serialize_endian_uint32_t>
 801047a:	b90d      	cbnz	r5, 8010480 <ucdr_serialize_sequence_char+0x14>
 801047c:	2001      	movs	r0, #1
 801047e:	bd70      	pop	{r4, r5, r6, pc}
 8010480:	7d21      	ldrb	r1, [r4, #20]
 8010482:	462b      	mov	r3, r5
 8010484:	4632      	mov	r2, r6
 8010486:	4620      	mov	r0, r4
 8010488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801048c:	f006 bf36 	b.w	80172fc <ucdr_serialize_endian_array_char>

08010490 <ucdr_deserialize_sequence_char>:
 8010490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010494:	461d      	mov	r5, r3
 8010496:	4616      	mov	r6, r2
 8010498:	460f      	mov	r7, r1
 801049a:	461a      	mov	r2, r3
 801049c:	7d01      	ldrb	r1, [r0, #20]
 801049e:	4604      	mov	r4, r0
 80104a0:	f7fb f97a 	bl	800b798 <ucdr_deserialize_endian_uint32_t>
 80104a4:	682b      	ldr	r3, [r5, #0]
 80104a6:	429e      	cmp	r6, r3
 80104a8:	bf3c      	itt	cc
 80104aa:	2201      	movcc	r2, #1
 80104ac:	75a2      	strbcc	r2, [r4, #22]
 80104ae:	b913      	cbnz	r3, 80104b6 <ucdr_deserialize_sequence_char+0x26>
 80104b0:	2001      	movs	r0, #1
 80104b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104b6:	7d21      	ldrb	r1, [r4, #20]
 80104b8:	463a      	mov	r2, r7
 80104ba:	4620      	mov	r0, r4
 80104bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104c0:	f006 bf4e 	b.w	8017360 <ucdr_deserialize_endian_array_char>

080104c4 <ucdr_serialize_sequence_uint8_t>:
 80104c4:	b570      	push	{r4, r5, r6, lr}
 80104c6:	4615      	mov	r5, r2
 80104c8:	460e      	mov	r6, r1
 80104ca:	7d01      	ldrb	r1, [r0, #20]
 80104cc:	4604      	mov	r4, r0
 80104ce:	f7fb f83b 	bl	800b548 <ucdr_serialize_endian_uint32_t>
 80104d2:	b90d      	cbnz	r5, 80104d8 <ucdr_serialize_sequence_uint8_t+0x14>
 80104d4:	2001      	movs	r0, #1
 80104d6:	bd70      	pop	{r4, r5, r6, pc}
 80104d8:	7d21      	ldrb	r1, [r4, #20]
 80104da:	462b      	mov	r3, r5
 80104dc:	4632      	mov	r2, r6
 80104de:	4620      	mov	r0, r4
 80104e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104e4:	f006 bfa0 	b.w	8017428 <ucdr_serialize_endian_array_uint8_t>

080104e8 <ucdr_deserialize_sequence_uint8_t>:
 80104e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104ec:	461d      	mov	r5, r3
 80104ee:	4616      	mov	r6, r2
 80104f0:	460f      	mov	r7, r1
 80104f2:	461a      	mov	r2, r3
 80104f4:	7d01      	ldrb	r1, [r0, #20]
 80104f6:	4604      	mov	r4, r0
 80104f8:	f7fb f94e 	bl	800b798 <ucdr_deserialize_endian_uint32_t>
 80104fc:	682b      	ldr	r3, [r5, #0]
 80104fe:	429e      	cmp	r6, r3
 8010500:	bf3c      	itt	cc
 8010502:	2201      	movcc	r2, #1
 8010504:	75a2      	strbcc	r2, [r4, #22]
 8010506:	b913      	cbnz	r3, 801050e <ucdr_deserialize_sequence_uint8_t+0x26>
 8010508:	2001      	movs	r0, #1
 801050a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801050e:	7d21      	ldrb	r1, [r4, #20]
 8010510:	463a      	mov	r2, r7
 8010512:	4620      	mov	r0, r4
 8010514:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010518:	f006 bfea 	b.w	80174f0 <ucdr_deserialize_endian_array_uint8_t>

0801051c <uxr_buffer_delete_entity>:
 801051c:	b510      	push	{r4, lr}
 801051e:	2300      	movs	r3, #0
 8010520:	b08e      	sub	sp, #56	@ 0x38
 8010522:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010526:	2303      	movs	r3, #3
 8010528:	9300      	str	r3, [sp, #0]
 801052a:	2204      	movs	r2, #4
 801052c:	ab06      	add	r3, sp, #24
 801052e:	4604      	mov	r4, r0
 8010530:	9103      	str	r1, [sp, #12]
 8010532:	f001 fad7 	bl	8011ae4 <uxr_prepare_stream_to_write_submessage>
 8010536:	b918      	cbnz	r0, 8010540 <uxr_buffer_delete_entity+0x24>
 8010538:	4604      	mov	r4, r0
 801053a:	4620      	mov	r0, r4
 801053c:	b00e      	add	sp, #56	@ 0x38
 801053e:	bd10      	pop	{r4, pc}
 8010540:	9902      	ldr	r1, [sp, #8]
 8010542:	aa05      	add	r2, sp, #20
 8010544:	4620      	mov	r0, r4
 8010546:	f001 fc03 	bl	8011d50 <uxr_init_base_object_request>
 801054a:	a905      	add	r1, sp, #20
 801054c:	4604      	mov	r4, r0
 801054e:	a806      	add	r0, sp, #24
 8010550:	f003 fa2e 	bl	80139b0 <uxr_serialize_DELETE_Payload>
 8010554:	4620      	mov	r0, r4
 8010556:	b00e      	add	sp, #56	@ 0x38
 8010558:	bd10      	pop	{r4, pc}
 801055a:	bf00      	nop

0801055c <uxr_common_create_entity>:
 801055c:	b510      	push	{r4, lr}
 801055e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010562:	b08c      	sub	sp, #48	@ 0x30
 8010564:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010568:	f1bc 0f01 	cmp.w	ip, #1
 801056c:	bf0c      	ite	eq
 801056e:	f003 0201 	andeq.w	r2, r3, #1
 8010572:	2200      	movne	r2, #0
 8010574:	330e      	adds	r3, #14
 8010576:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 801057a:	9101      	str	r1, [sp, #4]
 801057c:	441a      	add	r2, r3
 801057e:	2301      	movs	r3, #1
 8010580:	9300      	str	r3, [sp, #0]
 8010582:	9903      	ldr	r1, [sp, #12]
 8010584:	ab04      	add	r3, sp, #16
 8010586:	b292      	uxth	r2, r2
 8010588:	4604      	mov	r4, r0
 801058a:	f001 faab 	bl	8011ae4 <uxr_prepare_stream_to_write_submessage>
 801058e:	b918      	cbnz	r0, 8010598 <uxr_common_create_entity+0x3c>
 8010590:	4604      	mov	r4, r0
 8010592:	4620      	mov	r0, r4
 8010594:	b00c      	add	sp, #48	@ 0x30
 8010596:	bd10      	pop	{r4, pc}
 8010598:	9902      	ldr	r1, [sp, #8]
 801059a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801059c:	4620      	mov	r0, r4
 801059e:	f001 fbd7 	bl	8011d50 <uxr_init_base_object_request>
 80105a2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80105a4:	4604      	mov	r4, r0
 80105a6:	a804      	add	r0, sp, #16
 80105a8:	f003 f95e 	bl	8013868 <uxr_serialize_CREATE_Payload>
 80105ac:	4620      	mov	r0, r4
 80105ae:	b00c      	add	sp, #48	@ 0x30
 80105b0:	bd10      	pop	{r4, pc}
 80105b2:	bf00      	nop

080105b4 <uxr_buffer_create_participant_bin>:
 80105b4:	b570      	push	{r4, r5, r6, lr}
 80105b6:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 80105ba:	ac11      	add	r4, sp, #68	@ 0x44
 80105bc:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 80105c0:	2303      	movs	r3, #3
 80105c2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80105c6:	7223      	strb	r3, [r4, #8]
 80105c8:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 80105ca:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 80105ce:	2201      	movs	r2, #1
 80105d0:	2100      	movs	r1, #0
 80105d2:	4605      	mov	r5, r0
 80105d4:	7122      	strb	r2, [r4, #4]
 80105d6:	f88d 1014 	strb.w	r1, [sp, #20]
 80105da:	b1cb      	cbz	r3, 8010610 <uxr_buffer_create_participant_bin+0x5c>
 80105dc:	f88d 201c 	strb.w	r2, [sp, #28]
 80105e0:	9308      	str	r3, [sp, #32]
 80105e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80105e6:	a915      	add	r1, sp, #84	@ 0x54
 80105e8:	a809      	add	r0, sp, #36	@ 0x24
 80105ea:	f7fb fe41 	bl	800c270 <ucdr_init_buffer>
 80105ee:	a905      	add	r1, sp, #20
 80105f0:	a809      	add	r0, sp, #36	@ 0x24
 80105f2:	f002 fdd3 	bl	801319c <uxr_serialize_OBJK_DomainParticipant_Binary>
 80105f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80105f8:	9600      	str	r6, [sp, #0]
 80105fa:	9401      	str	r4, [sp, #4]
 80105fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010600:	60e3      	str	r3, [r4, #12]
 8010602:	4628      	mov	r0, r5
 8010604:	b29b      	uxth	r3, r3
 8010606:	f7ff ffa9 	bl	801055c <uxr_common_create_entity>
 801060a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 801060e:	bd70      	pop	{r4, r5, r6, pc}
 8010610:	f88d 301c 	strb.w	r3, [sp, #28]
 8010614:	e7e5      	b.n	80105e2 <uxr_buffer_create_participant_bin+0x2e>
 8010616:	bf00      	nop

08010618 <uxr_buffer_create_topic_bin>:
 8010618:	b570      	push	{r4, r5, r6, lr}
 801061a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 801061e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010622:	9105      	str	r1, [sp, #20]
 8010624:	4605      	mov	r5, r0
 8010626:	a997      	add	r1, sp, #604	@ 0x25c
 8010628:	4618      	mov	r0, r3
 801062a:	2302      	movs	r3, #2
 801062c:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8010630:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8010634:	f000 f9ea 	bl	8010a0c <uxr_object_id_to_raw>
 8010638:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 801063a:	9306      	str	r3, [sp, #24]
 801063c:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 801063e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010640:	2303      	movs	r3, #3
 8010642:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010646:	2301      	movs	r3, #1
 8010648:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801064c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010650:	a917      	add	r1, sp, #92	@ 0x5c
 8010652:	2300      	movs	r3, #0
 8010654:	a80b      	add	r0, sp, #44	@ 0x2c
 8010656:	f88d 301c 	strb.w	r3, [sp, #28]
 801065a:	f7fb fe09 	bl	800c270 <ucdr_init_buffer>
 801065e:	a906      	add	r1, sp, #24
 8010660:	a80b      	add	r0, sp, #44	@ 0x2c
 8010662:	f002 fdbd 	bl	80131e0 <uxr_serialize_OBJK_Topic_Binary>
 8010666:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010668:	9316      	str	r3, [sp, #88]	@ 0x58
 801066a:	ac13      	add	r4, sp, #76	@ 0x4c
 801066c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010670:	9600      	str	r6, [sp, #0]
 8010672:	9401      	str	r4, [sp, #4]
 8010674:	b29b      	uxth	r3, r3
 8010676:	4628      	mov	r0, r5
 8010678:	f7ff ff70 	bl	801055c <uxr_common_create_entity>
 801067c:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8010680:	bd70      	pop	{r4, r5, r6, pc}
 8010682:	bf00      	nop

08010684 <uxr_buffer_create_publisher_bin>:
 8010684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010686:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 801068a:	4605      	mov	r5, r0
 801068c:	9105      	str	r1, [sp, #20]
 801068e:	4618      	mov	r0, r3
 8010690:	2603      	movs	r6, #3
 8010692:	a992      	add	r1, sp, #584	@ 0x248
 8010694:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010698:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 801069c:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 80106a0:	f000 f9b4 	bl	8010a0c <uxr_object_id_to_raw>
 80106a4:	2300      	movs	r3, #0
 80106a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80106aa:	a912      	add	r1, sp, #72	@ 0x48
 80106ac:	a806      	add	r0, sp, #24
 80106ae:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80106b2:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80106b6:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 80106ba:	f7fb fdd9 	bl	800c270 <ucdr_init_buffer>
 80106be:	a993      	add	r1, sp, #588	@ 0x24c
 80106c0:	a806      	add	r0, sp, #24
 80106c2:	f002 fe41 	bl	8013348 <uxr_serialize_OBJK_Publisher_Binary>
 80106c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80106c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80106ca:	ac0e      	add	r4, sp, #56	@ 0x38
 80106cc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80106d0:	9700      	str	r7, [sp, #0]
 80106d2:	9401      	str	r4, [sp, #4]
 80106d4:	b29b      	uxth	r3, r3
 80106d6:	4628      	mov	r0, r5
 80106d8:	f7ff ff40 	bl	801055c <uxr_common_create_entity>
 80106dc:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 80106e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106e2:	bf00      	nop

080106e4 <uxr_buffer_create_datawriter_bin>:
 80106e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106e8:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80106ec:	ac1d      	add	r4, sp, #116	@ 0x74
 80106ee:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80106f2:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 80106f6:	9105      	str	r1, [sp, #20]
 80106f8:	4606      	mov	r6, r0
 80106fa:	a9a1      	add	r1, sp, #644	@ 0x284
 80106fc:	4618      	mov	r0, r3
 80106fe:	2305      	movs	r3, #5
 8010700:	7123      	strb	r3, [r4, #4]
 8010702:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8010706:	2703      	movs	r7, #3
 8010708:	f000 f980 	bl	8010a0c <uxr_object_id_to_raw>
 801070c:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 801070e:	7227      	strb	r7, [r4, #8]
 8010710:	a90e      	add	r1, sp, #56	@ 0x38
 8010712:	f000 f97b 	bl	8010a0c <uxr_object_id_to_raw>
 8010716:	2300      	movs	r3, #0
 8010718:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801071c:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8010720:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010724:	3d00      	subs	r5, #0
 8010726:	bf18      	it	ne
 8010728:	2501      	movne	r5, #1
 801072a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801072e:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8010732:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010736:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801073a:	2301      	movs	r3, #1
 801073c:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8010740:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8010744:	bb8a      	cbnz	r2, 80107aa <uxr_buffer_create_datawriter_bin+0xc6>
 8010746:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801074a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801074e:	f04f 0c13 	mov.w	ip, #19
 8010752:	250b      	movs	r5, #11
 8010754:	2221      	movs	r2, #33	@ 0x21
 8010756:	2111      	movs	r1, #17
 8010758:	2009      	movs	r0, #9
 801075a:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 801075e:	b923      	cbnz	r3, 801076a <uxr_buffer_create_datawriter_bin+0x86>
 8010760:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8010764:	4672      	mov	r2, lr
 8010766:	4661      	mov	r1, ip
 8010768:	4628      	mov	r0, r5
 801076a:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 801076e:	2b01      	cmp	r3, #1
 8010770:	d025      	beq.n	80107be <uxr_buffer_create_datawriter_bin+0xda>
 8010772:	2b03      	cmp	r3, #3
 8010774:	d029      	beq.n	80107ca <uxr_buffer_create_datawriter_bin+0xe6>
 8010776:	b32b      	cbz	r3, 80107c4 <uxr_buffer_create_datawriter_bin+0xe0>
 8010778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801077c:	a921      	add	r1, sp, #132	@ 0x84
 801077e:	a806      	add	r0, sp, #24
 8010780:	f7fb fd76 	bl	800c270 <ucdr_init_buffer>
 8010784:	a90e      	add	r1, sp, #56	@ 0x38
 8010786:	a806      	add	r0, sp, #24
 8010788:	f002 fe54 	bl	8013434 <uxr_serialize_OBJK_DataWriter_Binary>
 801078c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801078e:	f8cd 8000 	str.w	r8, [sp]
 8010792:	9401      	str	r4, [sp, #4]
 8010794:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010798:	60e3      	str	r3, [r4, #12]
 801079a:	4630      	mov	r0, r6
 801079c:	b29b      	uxth	r3, r3
 801079e:	f7ff fedd 	bl	801055c <uxr_common_create_entity>
 80107a2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80107a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107aa:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80107ae:	f04f 0c12 	mov.w	ip, #18
 80107b2:	250a      	movs	r5, #10
 80107b4:	2220      	movs	r2, #32
 80107b6:	2110      	movs	r1, #16
 80107b8:	2008      	movs	r0, #8
 80107ba:	2702      	movs	r7, #2
 80107bc:	e7cd      	b.n	801075a <uxr_buffer_create_datawriter_bin+0x76>
 80107be:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80107c2:	e7d9      	b.n	8010778 <uxr_buffer_create_datawriter_bin+0x94>
 80107c4:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80107c8:	e7d6      	b.n	8010778 <uxr_buffer_create_datawriter_bin+0x94>
 80107ca:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80107ce:	e7d3      	b.n	8010778 <uxr_buffer_create_datawriter_bin+0x94>

080107d0 <uxr_buffer_create_requester_bin>:
 80107d0:	b570      	push	{r4, r5, r6, lr}
 80107d2:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 80107d6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80107da:	9105      	str	r1, [sp, #20]
 80107dc:	4605      	mov	r5, r0
 80107de:	a999      	add	r1, sp, #612	@ 0x264
 80107e0:	4618      	mov	r0, r3
 80107e2:	2307      	movs	r3, #7
 80107e4:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 80107e8:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 80107ec:	f000 f90e 	bl	8010a0c <uxr_object_id_to_raw>
 80107f0:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 80107f2:	9306      	str	r3, [sp, #24]
 80107f4:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 80107f6:	9307      	str	r3, [sp, #28]
 80107f8:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 80107fa:	9308      	str	r3, [sp, #32]
 80107fc:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 80107fe:	930c      	str	r3, [sp, #48]	@ 0x30
 8010800:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010802:	930a      	str	r3, [sp, #40]	@ 0x28
 8010804:	2301      	movs	r3, #1
 8010806:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801080a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801080e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010812:	a919      	add	r1, sp, #100	@ 0x64
 8010814:	2303      	movs	r3, #3
 8010816:	a80d      	add	r0, sp, #52	@ 0x34
 8010818:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 801081c:	f7fb fd28 	bl	800c270 <ucdr_init_buffer>
 8010820:	a906      	add	r1, sp, #24
 8010822:	a80d      	add	r0, sp, #52	@ 0x34
 8010824:	f002 fe32 	bl	801348c <uxr_serialize_OBJK_Requester_Binary>
 8010828:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801082a:	9318      	str	r3, [sp, #96]	@ 0x60
 801082c:	ac15      	add	r4, sp, #84	@ 0x54
 801082e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010832:	9600      	str	r6, [sp, #0]
 8010834:	9401      	str	r4, [sp, #4]
 8010836:	b29b      	uxth	r3, r3
 8010838:	4628      	mov	r0, r5
 801083a:	f7ff fe8f 	bl	801055c <uxr_common_create_entity>
 801083e:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 8010842:	bd70      	pop	{r4, r5, r6, pc}

08010844 <get_custom_error>:
 8010844:	4b01      	ldr	r3, [pc, #4]	@ (801084c <get_custom_error+0x8>)
 8010846:	7818      	ldrb	r0, [r3, #0]
 8010848:	4770      	bx	lr
 801084a:	bf00      	nop
 801084c:	2000b134 	.word	0x2000b134

08010850 <recv_custom_msg>:
 8010850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010854:	4693      	mov	fp, r2
 8010856:	b089      	sub	sp, #36	@ 0x24
 8010858:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 801085c:	9305      	str	r3, [sp, #20]
 801085e:	468a      	mov	sl, r1
 8010860:	2100      	movs	r1, #0
 8010862:	4604      	mov	r4, r0
 8010864:	f88d 101e 	strb.w	r1, [sp, #30]
 8010868:	b322      	cbz	r2, 80108b4 <recv_custom_msg+0x64>
 801086a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 801086e:	f10d 081f 	add.w	r8, sp, #31
 8010872:	af05      	add	r7, sp, #20
 8010874:	f10d 061e 	add.w	r6, sp, #30
 8010878:	f44f 7500 	mov.w	r5, #512	@ 0x200
 801087c:	e002      	b.n	8010884 <recv_custom_msg+0x34>
 801087e:	9b05      	ldr	r3, [sp, #20]
 8010880:	2b00      	cmp	r3, #0
 8010882:	dd0f      	ble.n	80108a4 <recv_custom_msg+0x54>
 8010884:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8010888:	4623      	mov	r3, r4
 801088a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801088e:	e9cd 5600 	strd	r5, r6, [sp]
 8010892:	4622      	mov	r2, r4
 8010894:	4648      	mov	r0, r9
 8010896:	f001 fc89 	bl	80121ac <uxr_read_framed_msg>
 801089a:	2800      	cmp	r0, #0
 801089c:	d0ef      	beq.n	801087e <recv_custom_msg+0x2e>
 801089e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80108a2:	b1b3      	cbz	r3, 80108d2 <recv_custom_msg+0x82>
 80108a4:	4b0f      	ldr	r3, [pc, #60]	@ (80108e4 <recv_custom_msg+0x94>)
 80108a6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80108aa:	701a      	strb	r2, [r3, #0]
 80108ac:	2000      	movs	r0, #0
 80108ae:	b009      	add	sp, #36	@ 0x24
 80108b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108b4:	f10d 021f 	add.w	r2, sp, #31
 80108b8:	9200      	str	r2, [sp, #0]
 80108ba:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 80108be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80108c2:	4601      	mov	r1, r0
 80108c4:	47a8      	blx	r5
 80108c6:	2800      	cmp	r0, #0
 80108c8:	d0ec      	beq.n	80108a4 <recv_custom_msg+0x54>
 80108ca:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d1e8      	bne.n	80108a4 <recv_custom_msg+0x54>
 80108d2:	f8cb 0000 	str.w	r0, [fp]
 80108d6:	2001      	movs	r0, #1
 80108d8:	f8ca 4000 	str.w	r4, [sl]
 80108dc:	b009      	add	sp, #36	@ 0x24
 80108de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108e2:	bf00      	nop
 80108e4:	2000b134 	.word	0x2000b134

080108e8 <send_custom_msg>:
 80108e8:	b530      	push	{r4, r5, lr}
 80108ea:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 80108ee:	b087      	sub	sp, #28
 80108f0:	4615      	mov	r5, r2
 80108f2:	b974      	cbnz	r4, 8010912 <send_custom_msg+0x2a>
 80108f4:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 80108f8:	f10d 0317 	add.w	r3, sp, #23
 80108fc:	47a0      	blx	r4
 80108fe:	b108      	cbz	r0, 8010904 <send_custom_msg+0x1c>
 8010900:	42a8      	cmp	r0, r5
 8010902:	d015      	beq.n	8010930 <send_custom_msg+0x48>
 8010904:	4b0c      	ldr	r3, [pc, #48]	@ (8010938 <send_custom_msg+0x50>)
 8010906:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801090a:	701a      	strb	r2, [r3, #0]
 801090c:	2000      	movs	r0, #0
 801090e:	b007      	add	sp, #28
 8010910:	bd30      	pop	{r4, r5, pc}
 8010912:	460b      	mov	r3, r1
 8010914:	2200      	movs	r2, #0
 8010916:	f10d 0117 	add.w	r1, sp, #23
 801091a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801091e:	4602      	mov	r2, r0
 8010920:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8010924:	9500      	str	r5, [sp, #0]
 8010926:	f200 2002 	addw	r0, r0, #514	@ 0x202
 801092a:	f001 fa47 	bl	8011dbc <uxr_write_framed_msg>
 801092e:	e7e6      	b.n	80108fe <send_custom_msg+0x16>
 8010930:	2001      	movs	r0, #1
 8010932:	b007      	add	sp, #28
 8010934:	bd30      	pop	{r4, r5, pc}
 8010936:	bf00      	nop
 8010938:	2000b134 	.word	0x2000b134

0801093c <uxr_set_custom_transport_callbacks>:
 801093c:	b410      	push	{r4}
 801093e:	9c01      	ldr	r4, [sp, #4]
 8010940:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8010944:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8010948:	9b02      	ldr	r3, [sp, #8]
 801094a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801094e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010952:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8010956:	4770      	bx	lr

08010958 <uxr_init_custom_transport>:
 8010958:	b538      	push	{r3, r4, r5, lr}
 801095a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801095e:	b303      	cbz	r3, 80109a2 <uxr_init_custom_transport+0x4a>
 8010960:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8010964:	4604      	mov	r4, r0
 8010966:	b1e2      	cbz	r2, 80109a2 <uxr_init_custom_transport+0x4a>
 8010968:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 801096c:	b1ca      	cbz	r2, 80109a2 <uxr_init_custom_transport+0x4a>
 801096e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8010972:	b1b2      	cbz	r2, 80109a2 <uxr_init_custom_transport+0x4a>
 8010974:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8010978:	4798      	blx	r3
 801097a:	4605      	mov	r5, r0
 801097c:	b188      	cbz	r0, 80109a2 <uxr_init_custom_transport+0x4a>
 801097e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8010982:	b98b      	cbnz	r3, 80109a8 <uxr_init_custom_transport+0x50>
 8010984:	490b      	ldr	r1, [pc, #44]	@ (80109b4 <uxr_init_custom_transport+0x5c>)
 8010986:	4b0c      	ldr	r3, [pc, #48]	@ (80109b8 <uxr_init_custom_transport+0x60>)
 8010988:	4a0c      	ldr	r2, [pc, #48]	@ (80109bc <uxr_init_custom_transport+0x64>)
 801098a:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801098e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010992:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8010996:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 801099a:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801099e:	4628      	mov	r0, r5
 80109a0:	bd38      	pop	{r3, r4, r5, pc}
 80109a2:	2500      	movs	r5, #0
 80109a4:	4628      	mov	r0, r5
 80109a6:	bd38      	pop	{r3, r4, r5, pc}
 80109a8:	2100      	movs	r1, #0
 80109aa:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80109ae:	f001 f9ff 	bl	8011db0 <uxr_init_framing_io>
 80109b2:	e7e7      	b.n	8010984 <uxr_init_custom_transport+0x2c>
 80109b4:	080108e9 	.word	0x080108e9
 80109b8:	08010851 	.word	0x08010851
 80109bc:	08010845 	.word	0x08010845

080109c0 <uxr_close_custom_transport>:
 80109c0:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 80109c4:	4718      	bx	r3
 80109c6:	bf00      	nop

080109c8 <uxr_object_id>:
 80109c8:	b082      	sub	sp, #8
 80109ca:	2300      	movs	r3, #0
 80109cc:	f88d 1006 	strb.w	r1, [sp, #6]
 80109d0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80109d4:	f360 030f 	bfi	r3, r0, #0, #16
 80109d8:	f362 431f 	bfi	r3, r2, #16, #16
 80109dc:	4618      	mov	r0, r3
 80109de:	b002      	add	sp, #8
 80109e0:	4770      	bx	lr
 80109e2:	bf00      	nop

080109e4 <uxr_object_id_from_raw>:
 80109e4:	7843      	ldrb	r3, [r0, #1]
 80109e6:	7801      	ldrb	r1, [r0, #0]
 80109e8:	b082      	sub	sp, #8
 80109ea:	f003 020f 	and.w	r2, r3, #15
 80109ee:	f88d 2006 	strb.w	r2, [sp, #6]
 80109f2:	091b      	lsrs	r3, r3, #4
 80109f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80109f8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80109fc:	2000      	movs	r0, #0
 80109fe:	f363 000f 	bfi	r0, r3, #0, #16
 8010a02:	f362 401f 	bfi	r0, r2, #16, #16
 8010a06:	b002      	add	sp, #8
 8010a08:	4770      	bx	lr
 8010a0a:	bf00      	nop

08010a0c <uxr_object_id_to_raw>:
 8010a0c:	4602      	mov	r2, r0
 8010a0e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8010a12:	b082      	sub	sp, #8
 8010a14:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8010a18:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8010a1c:	f881 c000 	strb.w	ip, [r1]
 8010a20:	7048      	strb	r0, [r1, #1]
 8010a22:	b002      	add	sp, #8
 8010a24:	4770      	bx	lr
 8010a26:	bf00      	nop

08010a28 <uxr_buffer_request_data>:
 8010a28:	b530      	push	{r4, r5, lr}
 8010a2a:	b095      	sub	sp, #84	@ 0x54
 8010a2c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010a30:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8010a32:	9303      	str	r3, [sp, #12]
 8010a34:	2200      	movs	r2, #0
 8010a36:	2d00      	cmp	r5, #0
 8010a38:	bf14      	ite	ne
 8010a3a:	2101      	movne	r1, #1
 8010a3c:	4611      	moveq	r1, r2
 8010a3e:	4604      	mov	r4, r0
 8010a40:	f88d 301c 	strb.w	r3, [sp, #28]
 8010a44:	f88d 201d 	strb.w	r2, [sp, #29]
 8010a48:	f88d 201e 	strb.w	r2, [sp, #30]
 8010a4c:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8010a50:	d021      	beq.n	8010a96 <uxr_buffer_request_data+0x6e>
 8010a52:	682a      	ldr	r2, [r5, #0]
 8010a54:	686b      	ldr	r3, [r5, #4]
 8010a56:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8010a5a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8010a5e:	2210      	movs	r2, #16
 8010a60:	2308      	movs	r3, #8
 8010a62:	2100      	movs	r1, #0
 8010a64:	e9cd 3100 	strd	r3, r1, [sp]
 8010a68:	4620      	mov	r0, r4
 8010a6a:	9905      	ldr	r1, [sp, #20]
 8010a6c:	ab0c      	add	r3, sp, #48	@ 0x30
 8010a6e:	f001 f839 	bl	8011ae4 <uxr_prepare_stream_to_write_submessage>
 8010a72:	b918      	cbnz	r0, 8010a7c <uxr_buffer_request_data+0x54>
 8010a74:	4604      	mov	r4, r0
 8010a76:	4620      	mov	r0, r4
 8010a78:	b015      	add	sp, #84	@ 0x54
 8010a7a:	bd30      	pop	{r4, r5, pc}
 8010a7c:	9904      	ldr	r1, [sp, #16]
 8010a7e:	aa06      	add	r2, sp, #24
 8010a80:	4620      	mov	r0, r4
 8010a82:	f001 f965 	bl	8011d50 <uxr_init_base_object_request>
 8010a86:	a906      	add	r1, sp, #24
 8010a88:	4604      	mov	r4, r0
 8010a8a:	a80c      	add	r0, sp, #48	@ 0x30
 8010a8c:	f003 f83a 	bl	8013b04 <uxr_serialize_READ_DATA_Payload>
 8010a90:	4620      	mov	r0, r4
 8010a92:	b015      	add	sp, #84	@ 0x54
 8010a94:	bd30      	pop	{r4, r5, pc}
 8010a96:	2208      	movs	r2, #8
 8010a98:	e7e2      	b.n	8010a60 <uxr_buffer_request_data+0x38>
 8010a9a:	bf00      	nop

08010a9c <uxr_buffer_cancel_data>:
 8010a9c:	b510      	push	{r4, lr}
 8010a9e:	b094      	sub	sp, #80	@ 0x50
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	9202      	str	r2, [sp, #8]
 8010aa4:	9205      	str	r2, [sp, #20]
 8010aa6:	9301      	str	r3, [sp, #4]
 8010aa8:	2201      	movs	r2, #1
 8010aaa:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010aae:	f88d 301e 	strb.w	r3, [sp, #30]
 8010ab2:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8010ab6:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8010aba:	2308      	movs	r3, #8
 8010abc:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8010ac0:	9300      	str	r3, [sp, #0]
 8010ac2:	2210      	movs	r2, #16
 8010ac4:	ab0c      	add	r3, sp, #48	@ 0x30
 8010ac6:	4604      	mov	r4, r0
 8010ac8:	9103      	str	r1, [sp, #12]
 8010aca:	f001 f80b 	bl	8011ae4 <uxr_prepare_stream_to_write_submessage>
 8010ace:	b918      	cbnz	r0, 8010ad8 <uxr_buffer_cancel_data+0x3c>
 8010ad0:	4604      	mov	r4, r0
 8010ad2:	4620      	mov	r0, r4
 8010ad4:	b014      	add	sp, #80	@ 0x50
 8010ad6:	bd10      	pop	{r4, pc}
 8010ad8:	9905      	ldr	r1, [sp, #20]
 8010ada:	aa06      	add	r2, sp, #24
 8010adc:	4620      	mov	r0, r4
 8010ade:	f001 f937 	bl	8011d50 <uxr_init_base_object_request>
 8010ae2:	a906      	add	r1, sp, #24
 8010ae4:	4604      	mov	r4, r0
 8010ae6:	a80c      	add	r0, sp, #48	@ 0x30
 8010ae8:	f003 f80c 	bl	8013b04 <uxr_serialize_READ_DATA_Payload>
 8010aec:	4620      	mov	r0, r4
 8010aee:	b014      	add	sp, #80	@ 0x50
 8010af0:	bd10      	pop	{r4, pc}
 8010af2:	bf00      	nop

08010af4 <read_submessage_format>:
 8010af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010af8:	b095      	sub	sp, #84	@ 0x54
 8010afa:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8010afe:	b113      	cbz	r3, 8010b06 <read_submessage_format+0x12>
 8010b00:	b015      	add	sp, #84	@ 0x54
 8010b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b06:	460c      	mov	r4, r1
 8010b08:	4615      	mov	r5, r2
 8010b0a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8010b0e:	4607      	mov	r7, r0
 8010b10:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8010b12:	9004      	str	r0, [sp, #16]
 8010b14:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8010b16:	9005      	str	r0, [sp, #20]
 8010b18:	1a52      	subs	r2, r2, r1
 8010b1a:	a80c      	add	r0, sp, #48	@ 0x30
 8010b1c:	4699      	mov	r9, r3
 8010b1e:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8010b22:	f7fb fba5 	bl	800c270 <ucdr_init_buffer>
 8010b26:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010b2a:	a80c      	add	r0, sp, #48	@ 0x30
 8010b2c:	f7fb fb74 	bl	800c218 <ucdr_set_on_full_buffer_callback>
 8010b30:	69e2      	ldr	r2, [r4, #28]
 8010b32:	b19a      	cbz	r2, 8010b5c <read_submessage_format+0x68>
 8010b34:	f1b8 0f07 	cmp.w	r8, #7
 8010b38:	f882 9014 	strb.w	r9, [r2, #20]
 8010b3c:	d040      	beq.n	8010bc0 <read_submessage_format+0xcc>
 8010b3e:	f1b8 0f08 	cmp.w	r8, #8
 8010b42:	d02e      	beq.n	8010ba2 <read_submessage_format+0xae>
 8010b44:	f1b8 0f06 	cmp.w	r8, #6
 8010b48:	d011      	beq.n	8010b6e <read_submessage_format+0x7a>
 8010b4a:	2301      	movs	r3, #1
 8010b4c:	7513      	strb	r3, [r2, #20]
 8010b4e:	4629      	mov	r1, r5
 8010b50:	4620      	mov	r0, r4
 8010b52:	f7fb fbdd 	bl	800c310 <ucdr_advance_buffer>
 8010b56:	b015      	add	sp, #84	@ 0x54
 8010b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b5c:	f1b8 0f07 	cmp.w	r8, #7
 8010b60:	d02e      	beq.n	8010bc0 <read_submessage_format+0xcc>
 8010b62:	f1b8 0f08 	cmp.w	r8, #8
 8010b66:	d01c      	beq.n	8010ba2 <read_submessage_format+0xae>
 8010b68:	f1b8 0f06 	cmp.w	r8, #6
 8010b6c:	d1ef      	bne.n	8010b4e <read_submessage_format+0x5a>
 8010b6e:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8010b72:	f1b8 0f00 	cmp.w	r8, #0
 8010b76:	d011      	beq.n	8010b9c <read_submessage_format+0xa8>
 8010b78:	ab0c      	add	r3, sp, #48	@ 0x30
 8010b7a:	e9cd 3500 	strd	r3, r5, [sp]
 8010b7e:	2306      	movs	r3, #6
 8010b80:	f88d 3016 	strb.w	r3, [sp, #22]
 8010b84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010b88:	9302      	str	r3, [sp, #8]
 8010b8a:	4632      	mov	r2, r6
 8010b8c:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8010b90:	4638      	mov	r0, r7
 8010b92:	47c0      	blx	r8
 8010b94:	2301      	movs	r3, #1
 8010b96:	69e2      	ldr	r2, [r4, #28]
 8010b98:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010b9c:	2a00      	cmp	r2, #0
 8010b9e:	d1d4      	bne.n	8010b4a <read_submessage_format+0x56>
 8010ba0:	e7d5      	b.n	8010b4e <read_submessage_format+0x5a>
 8010ba2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d0f8      	beq.n	8010b9c <read_submessage_format+0xa8>
 8010baa:	a906      	add	r1, sp, #24
 8010bac:	a80c      	add	r0, sp, #48	@ 0x30
 8010bae:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8010bb2:	f003 f86d 	bl	8013c90 <uxr_deserialize_SampleIdentity>
 8010bb6:	b9a0      	cbnz	r0, 8010be2 <read_submessage_format+0xee>
 8010bb8:	69e2      	ldr	r2, [r4, #28]
 8010bba:	2a00      	cmp	r2, #0
 8010bbc:	d1c5      	bne.n	8010b4a <read_submessage_format+0x56>
 8010bbe:	e7c6      	b.n	8010b4e <read_submessage_format+0x5a>
 8010bc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010bc4:	b13b      	cbz	r3, 8010bd6 <read_submessage_format+0xe2>
 8010bc6:	a906      	add	r1, sp, #24
 8010bc8:	a80c      	add	r0, sp, #48	@ 0x30
 8010bca:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8010bce:	f002 fd33 	bl	8013638 <uxr_deserialize_BaseObjectRequest>
 8010bd2:	bb60      	cbnz	r0, 8010c2e <read_submessage_format+0x13a>
 8010bd4:	69e2      	ldr	r2, [r4, #28]
 8010bd6:	68a3      	ldr	r3, [r4, #8]
 8010bd8:	442b      	add	r3, r5
 8010bda:	60a3      	str	r3, [r4, #8]
 8010bdc:	2a00      	cmp	r2, #0
 8010bde:	d1b4      	bne.n	8010b4a <read_submessage_format+0x56>
 8010be0:	e7b5      	b.n	8010b4e <read_submessage_format+0x5a>
 8010be2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8010be6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010be8:	1a52      	subs	r2, r2, r1
 8010bea:	eba8 0803 	sub.w	r8, r8, r3
 8010bee:	a80c      	add	r0, sp, #48	@ 0x30
 8010bf0:	f7fb fb3e 	bl	800c270 <ucdr_init_buffer>
 8010bf4:	44a8      	add	r8, r5
 8010bf6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010bfa:	a80c      	add	r0, sp, #48	@ 0x30
 8010bfc:	f7fb fb0c 	bl	800c218 <ucdr_set_on_full_buffer_callback>
 8010c00:	fa1f f888 	uxth.w	r8, r8
 8010c04:	ab0c      	add	r3, sp, #48	@ 0x30
 8010c06:	9300      	str	r3, [sp, #0]
 8010c08:	f8cd 8004 	str.w	r8, [sp, #4]
 8010c0c:	2108      	movs	r1, #8
 8010c0e:	f88d 1016 	strb.w	r1, [sp, #22]
 8010c12:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8010c16:	9102      	str	r1, [sp, #8]
 8010c18:	ab06      	add	r3, sp, #24
 8010c1a:	4632      	mov	r2, r6
 8010c1c:	9905      	ldr	r1, [sp, #20]
 8010c1e:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8010c22:	4638      	mov	r0, r7
 8010c24:	47b0      	blx	r6
 8010c26:	2301      	movs	r3, #1
 8010c28:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010c2c:	e7c4      	b.n	8010bb8 <read_submessage_format+0xc4>
 8010c2e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8010c32:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010c34:	1a52      	subs	r2, r2, r1
 8010c36:	a80c      	add	r0, sp, #48	@ 0x30
 8010c38:	eba8 0803 	sub.w	r8, r8, r3
 8010c3c:	f7fb fb18 	bl	800c270 <ucdr_init_buffer>
 8010c40:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010c44:	a80c      	add	r0, sp, #48	@ 0x30
 8010c46:	f7fb fae7 	bl	800c218 <ucdr_set_on_full_buffer_callback>
 8010c4a:	ab0c      	add	r3, sp, #48	@ 0x30
 8010c4c:	9300      	str	r3, [sp, #0]
 8010c4e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8010c52:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010c56:	44a8      	add	r8, r5
 8010c58:	fa1f f888 	uxth.w	r8, r8
 8010c5c:	f8cd 8004 	str.w	r8, [sp, #4]
 8010c60:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010c64:	2107      	movs	r1, #7
 8010c66:	f88d 1016 	strb.w	r1, [sp, #22]
 8010c6a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8010c6e:	9102      	str	r1, [sp, #8]
 8010c70:	4632      	mov	r2, r6
 8010c72:	b29b      	uxth	r3, r3
 8010c74:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8010c78:	9905      	ldr	r1, [sp, #20]
 8010c7a:	4638      	mov	r0, r7
 8010c7c:	47b0      	blx	r6
 8010c7e:	2301      	movs	r3, #1
 8010c80:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010c84:	e7a6      	b.n	8010bd4 <read_submessage_format+0xe0>
 8010c86:	bf00      	nop

08010c88 <on_get_fragmentation_info>:
 8010c88:	b500      	push	{lr}
 8010c8a:	b08b      	sub	sp, #44	@ 0x2c
 8010c8c:	4601      	mov	r1, r0
 8010c8e:	2204      	movs	r2, #4
 8010c90:	a802      	add	r0, sp, #8
 8010c92:	f7fb faed 	bl	800c270 <ucdr_init_buffer>
 8010c96:	f10d 0305 	add.w	r3, sp, #5
 8010c9a:	f10d 0206 	add.w	r2, sp, #6
 8010c9e:	a901      	add	r1, sp, #4
 8010ca0:	a802      	add	r0, sp, #8
 8010ca2:	f001 fe69 	bl	8012978 <uxr_read_submessage_header>
 8010ca6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010caa:	2b0d      	cmp	r3, #13
 8010cac:	d003      	beq.n	8010cb6 <on_get_fragmentation_info+0x2e>
 8010cae:	2000      	movs	r0, #0
 8010cb0:	b00b      	add	sp, #44	@ 0x2c
 8010cb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8010cb6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010cba:	f013 0f02 	tst.w	r3, #2
 8010cbe:	bf14      	ite	ne
 8010cc0:	2002      	movne	r0, #2
 8010cc2:	2001      	moveq	r0, #1
 8010cc4:	b00b      	add	sp, #44	@ 0x2c
 8010cc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8010cca:	bf00      	nop

08010ccc <read_submessage_get_info>:
 8010ccc:	b570      	push	{r4, r5, r6, lr}
 8010cce:	2500      	movs	r5, #0
 8010cd0:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8010cd4:	4604      	mov	r4, r0
 8010cd6:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8010cda:	460e      	mov	r6, r1
 8010cdc:	a810      	add	r0, sp, #64	@ 0x40
 8010cde:	4629      	mov	r1, r5
 8010ce0:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8010ce4:	f007 fed4 	bl	8018a90 <memset>
 8010ce8:	a903      	add	r1, sp, #12
 8010cea:	4630      	mov	r0, r6
 8010cec:	f002 fe4c 	bl	8013988 <uxr_deserialize_GET_INFO_Payload>
 8010cf0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010cf4:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010cf8:	4620      	mov	r0, r4
 8010cfa:	f001 f821 	bl	8011d40 <uxr_session_header_offset>
 8010cfe:	462b      	mov	r3, r5
 8010d00:	9000      	str	r0, [sp, #0]
 8010d02:	220c      	movs	r2, #12
 8010d04:	a905      	add	r1, sp, #20
 8010d06:	a808      	add	r0, sp, #32
 8010d08:	f7fb faa0 	bl	800c24c <ucdr_init_buffer_origin_offset>
 8010d0c:	a910      	add	r1, sp, #64	@ 0x40
 8010d0e:	a808      	add	r0, sp, #32
 8010d10:	f002 feac 	bl	8013a6c <uxr_serialize_INFO_Payload>
 8010d14:	9b08      	ldr	r3, [sp, #32]
 8010d16:	462a      	mov	r2, r5
 8010d18:	4629      	mov	r1, r5
 8010d1a:	4620      	mov	r0, r4
 8010d1c:	f000 ffba 	bl	8011c94 <uxr_stamp_session_header>
 8010d20:	a808      	add	r0, sp, #32
 8010d22:	f7fb fad1 	bl	800c2c8 <ucdr_buffer_length>
 8010d26:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010d28:	4602      	mov	r2, r0
 8010d2a:	a905      	add	r1, sp, #20
 8010d2c:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010d30:	47a0      	blx	r4
 8010d32:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8010d36:	bd70      	pop	{r4, r5, r6, pc}

08010d38 <write_submessage_acknack.isra.0>:
 8010d38:	b570      	push	{r4, r5, r6, lr}
 8010d3a:	b092      	sub	sp, #72	@ 0x48
 8010d3c:	4605      	mov	r5, r0
 8010d3e:	460e      	mov	r6, r1
 8010d40:	4614      	mov	r4, r2
 8010d42:	f000 fffd 	bl	8011d40 <uxr_session_header_offset>
 8010d46:	a905      	add	r1, sp, #20
 8010d48:	9000      	str	r0, [sp, #0]
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	a80a      	add	r0, sp, #40	@ 0x28
 8010d4e:	2211      	movs	r2, #17
 8010d50:	f7fb fa7c 	bl	800c24c <ucdr_init_buffer_origin_offset>
 8010d54:	2218      	movs	r2, #24
 8010d56:	fb02 5404 	mla	r4, r2, r4, r5
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	2205      	movs	r2, #5
 8010d5e:	3450      	adds	r4, #80	@ 0x50
 8010d60:	210a      	movs	r1, #10
 8010d62:	a80a      	add	r0, sp, #40	@ 0x28
 8010d64:	f001 fdee 	bl	8012944 <uxr_buffer_submessage_header>
 8010d68:	a903      	add	r1, sp, #12
 8010d6a:	4620      	mov	r0, r4
 8010d6c:	f006 fdac 	bl	80178c8 <uxr_compute_acknack>
 8010d70:	ba40      	rev16	r0, r0
 8010d72:	f8ad 000e 	strh.w	r0, [sp, #14]
 8010d76:	a903      	add	r1, sp, #12
 8010d78:	a80a      	add	r0, sp, #40	@ 0x28
 8010d7a:	f88d 6010 	strb.w	r6, [sp, #16]
 8010d7e:	f002 fee5 	bl	8013b4c <uxr_serialize_ACKNACK_Payload>
 8010d82:	2200      	movs	r2, #0
 8010d84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d86:	4611      	mov	r1, r2
 8010d88:	4628      	mov	r0, r5
 8010d8a:	f000 ff83 	bl	8011c94 <uxr_stamp_session_header>
 8010d8e:	a80a      	add	r0, sp, #40	@ 0x28
 8010d90:	f7fb fa9a 	bl	800c2c8 <ucdr_buffer_length>
 8010d94:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8010d96:	4602      	mov	r2, r0
 8010d98:	a905      	add	r1, sp, #20
 8010d9a:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010d9e:	47a0      	blx	r4
 8010da0:	b012      	add	sp, #72	@ 0x48
 8010da2:	bd70      	pop	{r4, r5, r6, pc}
 8010da4:	0000      	movs	r0, r0
	...

08010da8 <uxr_init_session>:
 8010da8:	b510      	push	{r4, lr}
 8010daa:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8010de0 <uxr_init_session+0x38>
 8010dae:	2300      	movs	r3, #0
 8010db0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8010db4:	4604      	mov	r4, r0
 8010db6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8010dba:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8010dbe:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8010dc2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8010dc6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8010dca:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8010dce:	2181      	movs	r1, #129	@ 0x81
 8010dd0:	f000 fecc 	bl	8011b6c <uxr_init_session_info>
 8010dd4:	f104 0008 	add.w	r0, r4, #8
 8010dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ddc:	f001 bcce 	b.w	801277c <uxr_init_stream_storage>
	...

08010de8 <uxr_set_status_callback>:
 8010de8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8010dec:	4770      	bx	lr
 8010dee:	bf00      	nop

08010df0 <uxr_set_topic_callback>:
 8010df0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8010df4:	4770      	bx	lr
 8010df6:	bf00      	nop

08010df8 <uxr_set_request_callback>:
 8010df8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8010dfc:	4770      	bx	lr
 8010dfe:	bf00      	nop

08010e00 <uxr_set_reply_callback>:
 8010e00:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8010e04:	4770      	bx	lr
 8010e06:	bf00      	nop

08010e08 <uxr_create_output_best_effort_stream>:
 8010e08:	b510      	push	{r4, lr}
 8010e0a:	b084      	sub	sp, #16
 8010e0c:	e9cd 2100 	strd	r2, r1, [sp]
 8010e10:	4604      	mov	r4, r0
 8010e12:	f000 ff95 	bl	8011d40 <uxr_session_header_offset>
 8010e16:	e9dd 2100 	ldrd	r2, r1, [sp]
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	f104 0008 	add.w	r0, r4, #8
 8010e20:	b004      	add	sp, #16
 8010e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e26:	f001 bcf3 	b.w	8012810 <uxr_add_output_best_effort_buffer>
 8010e2a:	bf00      	nop

08010e2c <uxr_create_output_reliable_stream>:
 8010e2c:	b510      	push	{r4, lr}
 8010e2e:	b088      	sub	sp, #32
 8010e30:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010e34:	4604      	mov	r4, r0
 8010e36:	9303      	str	r3, [sp, #12]
 8010e38:	f000 ff82 	bl	8011d40 <uxr_session_header_offset>
 8010e3c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010e40:	9000      	str	r0, [sp, #0]
 8010e42:	9905      	ldr	r1, [sp, #20]
 8010e44:	f104 0008 	add.w	r0, r4, #8
 8010e48:	f001 fcf6 	bl	8012838 <uxr_add_output_reliable_buffer>
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	b2c3      	uxtb	r3, r0
 8010e50:	f363 0207 	bfi	r2, r3, #0, #8
 8010e54:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010e58:	f363 220f 	bfi	r2, r3, #8, #8
 8010e5c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010e60:	f363 4217 	bfi	r2, r3, #16, #8
 8010e64:	0e03      	lsrs	r3, r0, #24
 8010e66:	f363 621f 	bfi	r2, r3, #24, #8
 8010e6a:	4610      	mov	r0, r2
 8010e6c:	b008      	add	sp, #32
 8010e6e:	bd10      	pop	{r4, pc}

08010e70 <uxr_create_input_best_effort_stream>:
 8010e70:	b082      	sub	sp, #8
 8010e72:	3008      	adds	r0, #8
 8010e74:	b002      	add	sp, #8
 8010e76:	f001 bcf9 	b.w	801286c <uxr_add_input_best_effort_buffer>
 8010e7a:	bf00      	nop

08010e7c <uxr_create_input_reliable_stream>:
 8010e7c:	b510      	push	{r4, lr}
 8010e7e:	b084      	sub	sp, #16
 8010e80:	4c0b      	ldr	r4, [pc, #44]	@ (8010eb0 <uxr_create_input_reliable_stream+0x34>)
 8010e82:	9400      	str	r4, [sp, #0]
 8010e84:	3008      	adds	r0, #8
 8010e86:	f001 fd07 	bl	8012898 <uxr_add_input_reliable_buffer>
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	b2c3      	uxtb	r3, r0
 8010e8e:	f363 0207 	bfi	r2, r3, #0, #8
 8010e92:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010e96:	f363 220f 	bfi	r2, r3, #8, #8
 8010e9a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010e9e:	f363 4217 	bfi	r2, r3, #16, #8
 8010ea2:	0e03      	lsrs	r3, r0, #24
 8010ea4:	f363 621f 	bfi	r2, r3, #24, #8
 8010ea8:	4610      	mov	r0, r2
 8010eaa:	b004      	add	sp, #16
 8010eac:	bd10      	pop	{r4, pc}
 8010eae:	bf00      	nop
 8010eb0:	08010c89 	.word	0x08010c89

08010eb4 <uxr_epoch_nanos>:
 8010eb4:	b510      	push	{r4, lr}
 8010eb6:	4604      	mov	r4, r0
 8010eb8:	f001 fda4 	bl	8012a04 <uxr_nanos>
 8010ebc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8010ec0:	1ac0      	subs	r0, r0, r3
 8010ec2:	eb61 0102 	sbc.w	r1, r1, r2
 8010ec6:	bd10      	pop	{r4, pc}

08010ec8 <uxr_flash_output_streams>:
 8010ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ecc:	7e03      	ldrb	r3, [r0, #24]
 8010ece:	b084      	sub	sp, #16
 8010ed0:	4604      	mov	r4, r0
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d035      	beq.n	8010f42 <uxr_flash_output_streams+0x7a>
 8010ed6:	f04f 0900 	mov.w	r9, #0
 8010eda:	4648      	mov	r0, r9
 8010edc:	f10d 0802 	add.w	r8, sp, #2
 8010ee0:	af03      	add	r7, sp, #12
 8010ee2:	ae02      	add	r6, sp, #8
 8010ee4:	e006      	b.n	8010ef4 <uxr_flash_output_streams+0x2c>
 8010ee6:	7e23      	ldrb	r3, [r4, #24]
 8010ee8:	f109 0901 	add.w	r9, r9, #1
 8010eec:	fa5f f089 	uxtb.w	r0, r9
 8010ef0:	4283      	cmp	r3, r0
 8010ef2:	d926      	bls.n	8010f42 <uxr_flash_output_streams+0x7a>
 8010ef4:	2201      	movs	r2, #1
 8010ef6:	4611      	mov	r1, r2
 8010ef8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010efc:	f001 fbea 	bl	80126d4 <uxr_stream_id>
 8010f00:	3508      	adds	r5, #8
 8010f02:	4684      	mov	ip, r0
 8010f04:	4643      	mov	r3, r8
 8010f06:	463a      	mov	r2, r7
 8010f08:	4631      	mov	r1, r6
 8010f0a:	4628      	mov	r0, r5
 8010f0c:	f8cd c004 	str.w	ip, [sp, #4]
 8010f10:	f006 fd60 	bl	80179d4 <uxr_prepare_best_effort_buffer_to_send>
 8010f14:	2800      	cmp	r0, #0
 8010f16:	d0e6      	beq.n	8010ee6 <uxr_flash_output_streams+0x1e>
 8010f18:	9b02      	ldr	r3, [sp, #8]
 8010f1a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010f1e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010f22:	4620      	mov	r0, r4
 8010f24:	f000 feb6 	bl	8011c94 <uxr_stamp_session_header>
 8010f28:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010f2a:	9a03      	ldr	r2, [sp, #12]
 8010f2c:	685d      	ldr	r5, [r3, #4]
 8010f2e:	6818      	ldr	r0, [r3, #0]
 8010f30:	9902      	ldr	r1, [sp, #8]
 8010f32:	47a8      	blx	r5
 8010f34:	f109 0901 	add.w	r9, r9, #1
 8010f38:	7e23      	ldrb	r3, [r4, #24]
 8010f3a:	fa5f f089 	uxtb.w	r0, r9
 8010f3e:	4283      	cmp	r3, r0
 8010f40:	d8d8      	bhi.n	8010ef4 <uxr_flash_output_streams+0x2c>
 8010f42:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010f46:	b38b      	cbz	r3, 8010fac <uxr_flash_output_streams+0xe4>
 8010f48:	f04f 0900 	mov.w	r9, #0
 8010f4c:	f10d 0802 	add.w	r8, sp, #2
 8010f50:	af03      	add	r7, sp, #12
 8010f52:	ae02      	add	r6, sp, #8
 8010f54:	4648      	mov	r0, r9
 8010f56:	2201      	movs	r2, #1
 8010f58:	2102      	movs	r1, #2
 8010f5a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8010f5e:	f001 fbb9 	bl	80126d4 <uxr_stream_id>
 8010f62:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010f66:	3520      	adds	r5, #32
 8010f68:	9001      	str	r0, [sp, #4]
 8010f6a:	e00d      	b.n	8010f88 <uxr_flash_output_streams+0xc0>
 8010f6c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010f70:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010f74:	9b02      	ldr	r3, [sp, #8]
 8010f76:	f000 fe8d 	bl	8011c94 <uxr_stamp_session_header>
 8010f7a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010f7c:	9a03      	ldr	r2, [sp, #12]
 8010f7e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8010f82:	9902      	ldr	r1, [sp, #8]
 8010f84:	6818      	ldr	r0, [r3, #0]
 8010f86:	47d0      	blx	sl
 8010f88:	4643      	mov	r3, r8
 8010f8a:	463a      	mov	r2, r7
 8010f8c:	4631      	mov	r1, r6
 8010f8e:	4628      	mov	r0, r5
 8010f90:	f006 ff3e 	bl	8017e10 <uxr_prepare_next_reliable_buffer_to_send>
 8010f94:	4603      	mov	r3, r0
 8010f96:	4620      	mov	r0, r4
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d1e7      	bne.n	8010f6c <uxr_flash_output_streams+0xa4>
 8010f9c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010fa0:	f109 0901 	add.w	r9, r9, #1
 8010fa4:	fa5f f089 	uxtb.w	r0, r9
 8010fa8:	4283      	cmp	r3, r0
 8010faa:	d8d4      	bhi.n	8010f56 <uxr_flash_output_streams+0x8e>
 8010fac:	b004      	add	sp, #16
 8010fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fb2:	bf00      	nop

08010fb4 <read_submessage_info>:
 8010fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fb8:	460d      	mov	r5, r1
 8010fba:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010fbe:	4669      	mov	r1, sp
 8010fc0:	4607      	mov	r7, r0
 8010fc2:	4628      	mov	r0, r5
 8010fc4:	f002 fbee 	bl	80137a4 <uxr_deserialize_BaseObjectReply>
 8010fc8:	a902      	add	r1, sp, #8
 8010fca:	4604      	mov	r4, r0
 8010fcc:	4628      	mov	r0, r5
 8010fce:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8010fd2:	f7f9 fff3 	bl	800afbc <ucdr_deserialize_bool>
 8010fd6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010fda:	4004      	ands	r4, r0
 8010fdc:	b2e4      	uxtb	r4, r4
 8010fde:	b95b      	cbnz	r3, 8010ff8 <read_submessage_info+0x44>
 8010fe0:	a987      	add	r1, sp, #540	@ 0x21c
 8010fe2:	4628      	mov	r0, r5
 8010fe4:	f7f9 ffea 	bl	800afbc <ucdr_deserialize_bool>
 8010fe8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8010fec:	4606      	mov	r6, r0
 8010fee:	b94b      	cbnz	r3, 8011004 <read_submessage_info+0x50>
 8010ff0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ff8:	a903      	add	r1, sp, #12
 8010ffa:	4628      	mov	r0, r5
 8010ffc:	f002 fa7a 	bl	80134f4 <uxr_deserialize_ObjectVariant>
 8011000:	4004      	ands	r4, r0
 8011002:	e7ed      	b.n	8010fe0 <read_submessage_info+0x2c>
 8011004:	a988      	add	r1, sp, #544	@ 0x220
 8011006:	4628      	mov	r0, r5
 8011008:	f7fa f806 	bl	800b018 <ucdr_deserialize_uint8_t>
 801100c:	4234      	tst	r4, r6
 801100e:	d0ef      	beq.n	8010ff0 <read_submessage_info+0x3c>
 8011010:	2800      	cmp	r0, #0
 8011012:	d0ed      	beq.n	8010ff0 <read_submessage_info+0x3c>
 8011014:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8011018:	2b0d      	cmp	r3, #13
 801101a:	d1e9      	bne.n	8010ff0 <read_submessage_info+0x3c>
 801101c:	a98a      	add	r1, sp, #552	@ 0x228
 801101e:	4628      	mov	r0, r5
 8011020:	f7fa fda0 	bl	800bb64 <ucdr_deserialize_int16_t>
 8011024:	b140      	cbz	r0, 8011038 <read_submessage_info+0x84>
 8011026:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 801102a:	2b00      	cmp	r3, #0
 801102c:	dd07      	ble.n	801103e <read_submessage_info+0x8a>
 801102e:	f1b8 0f00 	cmp.w	r8, #0
 8011032:	bf14      	ite	ne
 8011034:	2001      	movne	r0, #1
 8011036:	2002      	moveq	r0, #2
 8011038:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 801103c:	e7d8      	b.n	8010ff0 <read_submessage_info+0x3c>
 801103e:	2000      	movs	r0, #0
 8011040:	e7fa      	b.n	8011038 <read_submessage_info+0x84>
 8011042:	bf00      	nop

08011044 <read_submessage_list>:
 8011044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011048:	b097      	sub	sp, #92	@ 0x5c
 801104a:	4ec1      	ldr	r6, [pc, #772]	@ (8011350 <read_submessage_list+0x30c>)
 801104c:	9209      	str	r2, [sp, #36]	@ 0x24
 801104e:	4604      	mov	r4, r0
 8011050:	460d      	mov	r5, r1
 8011052:	f04f 0801 	mov.w	r8, #1
 8011056:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801105a:	aa0c      	add	r2, sp, #48	@ 0x30
 801105c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8011060:	4628      	mov	r0, r5
 8011062:	f001 fc89 	bl	8012978 <uxr_read_submessage_header>
 8011066:	2800      	cmp	r0, #0
 8011068:	f000 813e 	beq.w	80112e8 <read_submessage_list+0x2a4>
 801106c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8011070:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8011074:	3b02      	subs	r3, #2
 8011076:	2b0d      	cmp	r3, #13
 8011078:	d8ed      	bhi.n	8011056 <read_submessage_list+0x12>
 801107a:	a101      	add	r1, pc, #4	@ (adr r1, 8011080 <read_submessage_list+0x3c>)
 801107c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011080:	080112df 	.word	0x080112df
 8011084:	08011057 	.word	0x08011057
 8011088:	080112cf 	.word	0x080112cf
 801108c:	0801126d 	.word	0x0801126d
 8011090:	08011263 	.word	0x08011263
 8011094:	08011057 	.word	0x08011057
 8011098:	08011057 	.word	0x08011057
 801109c:	080111c3 	.word	0x080111c3
 80110a0:	08011153 	.word	0x08011153
 80110a4:	08011113 	.word	0x08011113
 80110a8:	08011057 	.word	0x08011057
 80110ac:	08011057 	.word	0x08011057
 80110b0:	08011057 	.word	0x08011057
 80110b4:	080110b9 	.word	0x080110b9
 80110b8:	a910      	add	r1, sp, #64	@ 0x40
 80110ba:	4628      	mov	r0, r5
 80110bc:	f002 fd96 	bl	8013bec <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80110c0:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 80110c4:	f1b9 0f00 	cmp.w	r9, #0
 80110c8:	f000 8116 	beq.w	80112f8 <read_submessage_list+0x2b4>
 80110cc:	f001 fc9a 	bl	8012a04 <uxr_nanos>
 80110d0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80110d2:	4602      	mov	r2, r0
 80110d4:	460b      	mov	r3, r1
 80110d6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80110d8:	2100      	movs	r1, #0
 80110da:	468c      	mov	ip, r1
 80110dc:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80110e0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 80110e4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80110e6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80110e8:	468c      	mov	ip, r1
 80110ea:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80110ee:	46e2      	mov	sl, ip
 80110f0:	46bc      	mov	ip, r7
 80110f2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 80110f6:	fbc0 7106 	smlal	r7, r1, r0, r6
 80110fa:	e9cd ca02 	strd	ip, sl, [sp, #8]
 80110fe:	e9cd 7100 	strd	r7, r1, [sp]
 8011102:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8011106:	9106      	str	r1, [sp, #24]
 8011108:	4620      	mov	r0, r4
 801110a:	47c8      	blx	r9
 801110c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8011110:	e7a1      	b.n	8011056 <read_submessage_list+0x12>
 8011112:	a910      	add	r1, sp, #64	@ 0x40
 8011114:	4628      	mov	r0, r5
 8011116:	f002 fd57 	bl	8013bc8 <uxr_deserialize_HEARTBEAT_Payload>
 801111a:	2100      	movs	r1, #0
 801111c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011120:	f001 fb02 	bl	8012728 <uxr_stream_id_from_raw>
 8011124:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8011128:	900f      	str	r0, [sp, #60]	@ 0x3c
 801112a:	4639      	mov	r1, r7
 801112c:	f104 0008 	add.w	r0, r4, #8
 8011130:	f001 fbe8 	bl	8012904 <uxr_get_input_reliable_stream>
 8011134:	2800      	cmp	r0, #0
 8011136:	d08e      	beq.n	8011056 <read_submessage_list+0x12>
 8011138:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801113c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8011140:	f006 fbb6 	bl	80178b0 <uxr_process_heartbeat>
 8011144:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8011148:	463a      	mov	r2, r7
 801114a:	4620      	mov	r0, r4
 801114c:	f7ff fdf4 	bl	8010d38 <write_submessage_acknack.isra.0>
 8011150:	e781      	b.n	8011056 <read_submessage_list+0x12>
 8011152:	a910      	add	r1, sp, #64	@ 0x40
 8011154:	4628      	mov	r0, r5
 8011156:	f002 fd0f 	bl	8013b78 <uxr_deserialize_ACKNACK_Payload>
 801115a:	2100      	movs	r1, #0
 801115c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011160:	f001 fae2 	bl	8012728 <uxr_stream_id_from_raw>
 8011164:	900d      	str	r0, [sp, #52]	@ 0x34
 8011166:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801116a:	f104 0008 	add.w	r0, r4, #8
 801116e:	f001 fbb5 	bl	80128dc <uxr_get_output_reliable_stream>
 8011172:	4607      	mov	r7, r0
 8011174:	2800      	cmp	r0, #0
 8011176:	f43f af6e 	beq.w	8011056 <read_submessage_list+0x12>
 801117a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 801117e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8011182:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8011186:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801118a:	b289      	uxth	r1, r1
 801118c:	f006 feea 	bl	8017f64 <uxr_process_acknack>
 8011190:	4638      	mov	r0, r7
 8011192:	f006 fea7 	bl	8017ee4 <uxr_begin_output_nack_buffer_it>
 8011196:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801119a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801119e:	e006      	b.n	80111ae <read_submessage_list+0x16a>
 80111a0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80111a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80111a4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80111a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80111aa:	6818      	ldr	r0, [r3, #0]
 80111ac:	47c8      	blx	r9
 80111ae:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 80111b2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80111b4:	4651      	mov	r1, sl
 80111b6:	4638      	mov	r0, r7
 80111b8:	f006 fe96 	bl	8017ee8 <uxr_next_reliable_nack_buffer_to_send>
 80111bc:	2800      	cmp	r0, #0
 80111be:	d1ef      	bne.n	80111a0 <read_submessage_list+0x15c>
 80111c0:	e749      	b.n	8011056 <read_submessage_list+0x12>
 80111c2:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 80111c6:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 80111ca:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80111ce:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80111d2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 80111d6:	4651      	mov	r1, sl
 80111d8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80111dc:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 80111e0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 80111e4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 80111e8:	4628      	mov	r0, r5
 80111ea:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 80111ee:	f002 fa23 	bl	8013638 <uxr_deserialize_BaseObjectRequest>
 80111f2:	4650      	mov	r0, sl
 80111f4:	a90f      	add	r1, sp, #60	@ 0x3c
 80111f6:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80111fa:	f000 fdc7 	bl	8011d8c <uxr_parse_base_object_request>
 80111fe:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8011202:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011204:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8011208:	9110      	str	r1, [sp, #64]	@ 0x40
 801120a:	3f04      	subs	r7, #4
 801120c:	f009 090e 	and.w	r9, r9, #14
 8011210:	b2bf      	uxth	r7, r7
 8011212:	f1bb 0f00 	cmp.w	fp, #0
 8011216:	d006      	beq.n	8011226 <read_submessage_list+0x1e2>
 8011218:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801121c:	9300      	str	r3, [sp, #0]
 801121e:	4652      	mov	r2, sl
 8011220:	2300      	movs	r3, #0
 8011222:	4620      	mov	r0, r4
 8011224:	47d8      	blx	fp
 8011226:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011228:	b16a      	cbz	r2, 8011246 <read_submessage_list+0x202>
 801122a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801122c:	2100      	movs	r1, #0
 801122e:	3802      	subs	r0, #2
 8011230:	e002      	b.n	8011238 <read_submessage_list+0x1f4>
 8011232:	3101      	adds	r1, #1
 8011234:	4291      	cmp	r1, r2
 8011236:	d006      	beq.n	8011246 <read_submessage_list+0x202>
 8011238:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801123c:	4553      	cmp	r3, sl
 801123e:	d1f8      	bne.n	8011232 <read_submessage_list+0x1ee>
 8011240:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011242:	2200      	movs	r2, #0
 8011244:	545a      	strb	r2, [r3, r1]
 8011246:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801124a:	9102      	str	r1, [sp, #8]
 801124c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801124e:	9101      	str	r1, [sp, #4]
 8011250:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011252:	9100      	str	r1, [sp, #0]
 8011254:	464b      	mov	r3, r9
 8011256:	463a      	mov	r2, r7
 8011258:	4629      	mov	r1, r5
 801125a:	4620      	mov	r0, r4
 801125c:	f7ff fc4a 	bl	8010af4 <read_submessage_format>
 8011260:	e6f9      	b.n	8011056 <read_submessage_list+0x12>
 8011262:	4629      	mov	r1, r5
 8011264:	4620      	mov	r0, r4
 8011266:	f7ff fea5 	bl	8010fb4 <read_submessage_info>
 801126a:	e6f4      	b.n	8011056 <read_submessage_list+0x12>
 801126c:	2a00      	cmp	r2, #0
 801126e:	d03e      	beq.n	80112ee <read_submessage_list+0x2aa>
 8011270:	a910      	add	r1, sp, #64	@ 0x40
 8011272:	4628      	mov	r0, r5
 8011274:	f002 fbdc 	bl	8013a30 <uxr_deserialize_STATUS_Payload>
 8011278:	a90e      	add	r1, sp, #56	@ 0x38
 801127a:	aa0d      	add	r2, sp, #52	@ 0x34
 801127c:	a810      	add	r0, sp, #64	@ 0x40
 801127e:	f000 fd85 	bl	8011d8c <uxr_parse_base_object_request>
 8011282:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8011286:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011288:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 801128c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8011290:	910f      	str	r1, [sp, #60]	@ 0x3c
 8011292:	f1ba 0f00 	cmp.w	sl, #0
 8011296:	d006      	beq.n	80112a6 <read_submessage_list+0x262>
 8011298:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801129c:	9300      	str	r3, [sp, #0]
 801129e:	463a      	mov	r2, r7
 80112a0:	464b      	mov	r3, r9
 80112a2:	4620      	mov	r0, r4
 80112a4:	47d0      	blx	sl
 80112a6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80112a8:	2a00      	cmp	r2, #0
 80112aa:	f43f aed4 	beq.w	8011056 <read_submessage_list+0x12>
 80112ae:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80112b0:	2100      	movs	r1, #0
 80112b2:	3802      	subs	r0, #2
 80112b4:	e003      	b.n	80112be <read_submessage_list+0x27a>
 80112b6:	3101      	adds	r1, #1
 80112b8:	4291      	cmp	r1, r2
 80112ba:	f43f aecc 	beq.w	8011056 <read_submessage_list+0x12>
 80112be:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80112c2:	42bb      	cmp	r3, r7
 80112c4:	d1f7      	bne.n	80112b6 <read_submessage_list+0x272>
 80112c6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80112c8:	f803 9001 	strb.w	r9, [r3, r1]
 80112cc:	e6c3      	b.n	8011056 <read_submessage_list+0x12>
 80112ce:	2a00      	cmp	r2, #0
 80112d0:	f47f aec1 	bne.w	8011056 <read_submessage_list+0x12>
 80112d4:	4629      	mov	r1, r5
 80112d6:	4620      	mov	r0, r4
 80112d8:	f000 fc9e 	bl	8011c18 <uxr_read_create_session_status>
 80112dc:	e6bb      	b.n	8011056 <read_submessage_list+0x12>
 80112de:	4629      	mov	r1, r5
 80112e0:	4620      	mov	r0, r4
 80112e2:	f7ff fcf3 	bl	8010ccc <read_submessage_get_info>
 80112e6:	e6b6      	b.n	8011056 <read_submessage_list+0x12>
 80112e8:	b017      	add	sp, #92	@ 0x5c
 80112ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112ee:	4629      	mov	r1, r5
 80112f0:	4620      	mov	r0, r4
 80112f2:	f000 fc9d 	bl	8011c30 <uxr_read_delete_session_status>
 80112f6:	e6ae      	b.n	8011056 <read_submessage_list+0x12>
 80112f8:	f001 fb84 	bl	8012a04 <uxr_nanos>
 80112fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80112fe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011300:	464f      	mov	r7, r9
 8011302:	fbc3 2706 	smlal	r2, r7, r3, r6
 8011306:	1812      	adds	r2, r2, r0
 8011308:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801130a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801130c:	eb47 0101 	adc.w	r1, r7, r1
 8011310:	464f      	mov	r7, r9
 8011312:	fbc3 0706 	smlal	r0, r7, r3, r6
 8011316:	463b      	mov	r3, r7
 8011318:	4684      	mov	ip, r0
 801131a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 801131e:	fbc7 0906 	smlal	r0, r9, r7, r6
 8011322:	eb1c 0c00 	adds.w	ip, ip, r0
 8011326:	464f      	mov	r7, r9
 8011328:	eb43 0307 	adc.w	r3, r3, r7
 801132c:	ebb2 0c0c 	subs.w	ip, r2, ip
 8011330:	eb61 0303 	sbc.w	r3, r1, r3
 8011334:	0fda      	lsrs	r2, r3, #31
 8011336:	eb12 020c 	adds.w	r2, r2, ip
 801133a:	f143 0300 	adc.w	r3, r3, #0
 801133e:	0852      	lsrs	r2, r2, #1
 8011340:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8011344:	105b      	asrs	r3, r3, #1
 8011346:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 801134a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 801134e:	e6dd      	b.n	801110c <read_submessage_list+0xc8>
 8011350:	3b9aca00 	.word	0x3b9aca00

08011354 <listen_message_reliably>:
 8011354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011358:	1e0b      	subs	r3, r1, #0
 801135a:	b09d      	sub	sp, #116	@ 0x74
 801135c:	bfb8      	it	lt
 801135e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8011362:	4680      	mov	r8, r0
 8011364:	9305      	str	r3, [sp, #20]
 8011366:	f001 fb33 	bl	80129d0 <uxr_millis>
 801136a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 801136e:	4681      	mov	r9, r0
 8011370:	2a00      	cmp	r2, #0
 8011372:	f000 80a1 	beq.w	80114b8 <listen_message_reliably+0x164>
 8011376:	2600      	movs	r6, #0
 8011378:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801137c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8011380:	9303      	str	r3, [sp, #12]
 8011382:	4630      	mov	r0, r6
 8011384:	460f      	mov	r7, r1
 8011386:	e00f      	b.n	80113a8 <listen_message_reliably+0x54>
 8011388:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 801138c:	9903      	ldr	r1, [sp, #12]
 801138e:	455a      	cmp	r2, fp
 8011390:	f106 0601 	add.w	r6, r6, #1
 8011394:	eb73 0101 	sbcs.w	r1, r3, r1
 8011398:	b2f0      	uxtb	r0, r6
 801139a:	da01      	bge.n	80113a0 <listen_message_reliably+0x4c>
 801139c:	4693      	mov	fp, r2
 801139e:	9303      	str	r3, [sp, #12]
 80113a0:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80113a4:	4283      	cmp	r3, r0
 80113a6:	d960      	bls.n	801146a <listen_message_reliably+0x116>
 80113a8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80113ac:	2102      	movs	r1, #2
 80113ae:	2201      	movs	r2, #1
 80113b0:	f001 f990 	bl	80126d4 <uxr_stream_id>
 80113b4:	00e4      	lsls	r4, r4, #3
 80113b6:	f104 0520 	add.w	r5, r4, #32
 80113ba:	4445      	add	r5, r8
 80113bc:	4601      	mov	r1, r0
 80113be:	463b      	mov	r3, r7
 80113c0:	464a      	mov	r2, r9
 80113c2:	4628      	mov	r0, r5
 80113c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80113c6:	f006 fd63 	bl	8017e90 <uxr_update_output_stream_heartbeat_timestamp>
 80113ca:	eb08 0304 	add.w	r3, r8, r4
 80113ce:	2800      	cmp	r0, #0
 80113d0:	d0da      	beq.n	8011388 <listen_message_reliably+0x34>
 80113d2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80113d6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 80113da:	9304      	str	r3, [sp, #16]
 80113dc:	4640      	mov	r0, r8
 80113de:	f000 fcaf 	bl	8011d40 <uxr_session_header_offset>
 80113e2:	3501      	adds	r5, #1
 80113e4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 80113e8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80113ec:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80113f0:	2300      	movs	r3, #0
 80113f2:	2211      	movs	r2, #17
 80113f4:	9000      	str	r0, [sp, #0]
 80113f6:	a90c      	add	r1, sp, #48	@ 0x30
 80113f8:	4650      	mov	r0, sl
 80113fa:	f7fa ff27 	bl	800c24c <ucdr_init_buffer_origin_offset>
 80113fe:	2300      	movs	r3, #0
 8011400:	2205      	movs	r2, #5
 8011402:	210b      	movs	r1, #11
 8011404:	4650      	mov	r0, sl
 8011406:	f001 fa9d 	bl	8012944 <uxr_buffer_submessage_header>
 801140a:	8968      	ldrh	r0, [r5, #10]
 801140c:	2101      	movs	r1, #1
 801140e:	f006 fe01 	bl	8018014 <uxr_seq_num_add>
 8011412:	892b      	ldrh	r3, [r5, #8]
 8011414:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8011418:	4602      	mov	r2, r0
 801141a:	9b04      	ldr	r3, [sp, #16]
 801141c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8011420:	a90a      	add	r1, sp, #40	@ 0x28
 8011422:	4650      	mov	r0, sl
 8011424:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8011428:	f002 fbba 	bl	8013ba0 <uxr_serialize_HEARTBEAT_Payload>
 801142c:	2200      	movs	r2, #0
 801142e:	4611      	mov	r1, r2
 8011430:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011432:	4640      	mov	r0, r8
 8011434:	f000 fc2e 	bl	8011c94 <uxr_stamp_session_header>
 8011438:	4650      	mov	r0, sl
 801143a:	f7fa ff45 	bl	800c2c8 <ucdr_buffer_length>
 801143e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8011442:	4602      	mov	r2, r0
 8011444:	a90c      	add	r1, sp, #48	@ 0x30
 8011446:	e9d3 0500 	ldrd	r0, r5, [r3]
 801144a:	4444      	add	r4, r8
 801144c:	47a8      	blx	r5
 801144e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8011452:	9903      	ldr	r1, [sp, #12]
 8011454:	455a      	cmp	r2, fp
 8011456:	f106 0601 	add.w	r6, r6, #1
 801145a:	eb73 0101 	sbcs.w	r1, r3, r1
 801145e:	b2f0      	uxtb	r0, r6
 8011460:	db9c      	blt.n	801139c <listen_message_reliably+0x48>
 8011462:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011466:	4283      	cmp	r3, r0
 8011468:	d89e      	bhi.n	80113a8 <listen_message_reliably+0x54>
 801146a:	9a03      	ldr	r2, [sp, #12]
 801146c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011470:	429a      	cmp	r2, r3
 8011472:	bf08      	it	eq
 8011474:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8011478:	d01e      	beq.n	80114b8 <listen_message_reliably+0x164>
 801147a:	ebab 0309 	sub.w	r3, fp, r9
 801147e:	9905      	ldr	r1, [sp, #20]
 8011480:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8011484:	2b00      	cmp	r3, #0
 8011486:	bf08      	it	eq
 8011488:	2301      	moveq	r3, #1
 801148a:	4299      	cmp	r1, r3
 801148c:	bfa8      	it	ge
 801148e:	4619      	movge	r1, r3
 8011490:	6894      	ldr	r4, [r2, #8]
 8011492:	6810      	ldr	r0, [r2, #0]
 8011494:	4689      	mov	r9, r1
 8011496:	460b      	mov	r3, r1
 8011498:	aa08      	add	r2, sp, #32
 801149a:	a907      	add	r1, sp, #28
 801149c:	47a0      	blx	r4
 801149e:	b968      	cbnz	r0, 80114bc <listen_message_reliably+0x168>
 80114a0:	9b05      	ldr	r3, [sp, #20]
 80114a2:	eba3 0309 	sub.w	r3, r3, r9
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	9305      	str	r3, [sp, #20]
 80114aa:	f73f af5c 	bgt.w	8011366 <listen_message_reliably+0x12>
 80114ae:	4604      	mov	r4, r0
 80114b0:	4620      	mov	r0, r4
 80114b2:	b01d      	add	sp, #116	@ 0x74
 80114b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114b8:	9b05      	ldr	r3, [sp, #20]
 80114ba:	e7e0      	b.n	801147e <listen_message_reliably+0x12a>
 80114bc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80114c0:	4604      	mov	r4, r0
 80114c2:	a80c      	add	r0, sp, #48	@ 0x30
 80114c4:	f7fa fed4 	bl	800c270 <ucdr_init_buffer>
 80114c8:	2500      	movs	r5, #0
 80114ca:	f10d 031a 	add.w	r3, sp, #26
 80114ce:	aa06      	add	r2, sp, #24
 80114d0:	a90c      	add	r1, sp, #48	@ 0x30
 80114d2:	4640      	mov	r0, r8
 80114d4:	f88d 5018 	strb.w	r5, [sp, #24]
 80114d8:	f000 fbf0 	bl	8011cbc <uxr_read_session_header>
 80114dc:	b918      	cbnz	r0, 80114e6 <listen_message_reliably+0x192>
 80114de:	4620      	mov	r0, r4
 80114e0:	b01d      	add	sp, #116	@ 0x74
 80114e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114e6:	4629      	mov	r1, r5
 80114e8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80114ec:	f001 f91c 	bl	8012728 <uxr_stream_id_from_raw>
 80114f0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 80114f4:	2d01      	cmp	r5, #1
 80114f6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80114fa:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 80114fe:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011502:	d04b      	beq.n	801159c <listen_message_reliably+0x248>
 8011504:	2d02      	cmp	r5, #2
 8011506:	d00f      	beq.n	8011528 <listen_message_reliably+0x1d4>
 8011508:	2d00      	cmp	r5, #0
 801150a:	d1e8      	bne.n	80114de <listen_message_reliably+0x18a>
 801150c:	4629      	mov	r1, r5
 801150e:	4628      	mov	r0, r5
 8011510:	f001 f90a 	bl	8012728 <uxr_stream_id_from_raw>
 8011514:	a90c      	add	r1, sp, #48	@ 0x30
 8011516:	4602      	mov	r2, r0
 8011518:	4640      	mov	r0, r8
 801151a:	920a      	str	r2, [sp, #40]	@ 0x28
 801151c:	f7ff fd92 	bl	8011044 <read_submessage_list>
 8011520:	4620      	mov	r0, r4
 8011522:	b01d      	add	sp, #116	@ 0x74
 8011524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011528:	4631      	mov	r1, r6
 801152a:	f108 0008 	add.w	r0, r8, #8
 801152e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8011532:	f001 f9e7 	bl	8012904 <uxr_get_input_reliable_stream>
 8011536:	4607      	mov	r7, r0
 8011538:	b338      	cbz	r0, 801158a <listen_message_reliably+0x236>
 801153a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801153c:	9203      	str	r2, [sp, #12]
 801153e:	a80c      	add	r0, sp, #48	@ 0x30
 8011540:	f7fa fec6 	bl	800c2d0 <ucdr_buffer_remaining>
 8011544:	4603      	mov	r3, r0
 8011546:	f10d 0019 	add.w	r0, sp, #25
 801154a:	9000      	str	r0, [sp, #0]
 801154c:	9a03      	ldr	r2, [sp, #12]
 801154e:	4651      	mov	r1, sl
 8011550:	4638      	mov	r0, r7
 8011552:	f006 f8b3 	bl	80176bc <uxr_receive_reliable_message>
 8011556:	b1c0      	cbz	r0, 801158a <listen_message_reliably+0x236>
 8011558:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801155c:	b393      	cbz	r3, 80115c4 <listen_message_reliably+0x270>
 801155e:	ad14      	add	r5, sp, #80	@ 0x50
 8011560:	f04f 0a02 	mov.w	sl, #2
 8011564:	e00a      	b.n	801157c <listen_message_reliably+0x228>
 8011566:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 801156a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 801156e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8011572:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011574:	4629      	mov	r1, r5
 8011576:	4640      	mov	r0, r8
 8011578:	f7ff fd64 	bl	8011044 <read_submessage_list>
 801157c:	2204      	movs	r2, #4
 801157e:	4629      	mov	r1, r5
 8011580:	4638      	mov	r0, r7
 8011582:	f006 f91b 	bl	80177bc <uxr_next_input_reliable_buffer_available>
 8011586:	2800      	cmp	r0, #0
 8011588:	d1ed      	bne.n	8011566 <listen_message_reliably+0x212>
 801158a:	4640      	mov	r0, r8
 801158c:	4632      	mov	r2, r6
 801158e:	4649      	mov	r1, r9
 8011590:	f7ff fbd2 	bl	8010d38 <write_submessage_acknack.isra.0>
 8011594:	4620      	mov	r0, r4
 8011596:	b01d      	add	sp, #116	@ 0x74
 8011598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801159c:	4631      	mov	r1, r6
 801159e:	f108 0008 	add.w	r0, r8, #8
 80115a2:	f001 f9a5 	bl	80128f0 <uxr_get_input_best_effort_stream>
 80115a6:	2800      	cmp	r0, #0
 80115a8:	d099      	beq.n	80114de <listen_message_reliably+0x18a>
 80115aa:	4651      	mov	r1, sl
 80115ac:	f005 fff2 	bl	8017594 <uxr_receive_best_effort_message>
 80115b0:	2800      	cmp	r0, #0
 80115b2:	d094      	beq.n	80114de <listen_message_reliably+0x18a>
 80115b4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80115b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80115ba:	a90c      	add	r1, sp, #48	@ 0x30
 80115bc:	4640      	mov	r0, r8
 80115be:	f7ff fd41 	bl	8011044 <read_submessage_list>
 80115c2:	e78c      	b.n	80114de <listen_message_reliably+0x18a>
 80115c4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80115c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80115ca:	a90c      	add	r1, sp, #48	@ 0x30
 80115cc:	4640      	mov	r0, r8
 80115ce:	f7ff fd39 	bl	8011044 <read_submessage_list>
 80115d2:	e7c4      	b.n	801155e <listen_message_reliably+0x20a>

080115d4 <uxr_run_session_timeout>:
 80115d4:	b570      	push	{r4, r5, r6, lr}
 80115d6:	4604      	mov	r4, r0
 80115d8:	460d      	mov	r5, r1
 80115da:	f001 f9f9 	bl	80129d0 <uxr_millis>
 80115de:	4606      	mov	r6, r0
 80115e0:	4620      	mov	r0, r4
 80115e2:	f7ff fc71 	bl	8010ec8 <uxr_flash_output_streams>
 80115e6:	4629      	mov	r1, r5
 80115e8:	4620      	mov	r0, r4
 80115ea:	f7ff feb3 	bl	8011354 <listen_message_reliably>
 80115ee:	f001 f9ef 	bl	80129d0 <uxr_millis>
 80115f2:	1b83      	subs	r3, r0, r6
 80115f4:	1ae9      	subs	r1, r5, r3
 80115f6:	2900      	cmp	r1, #0
 80115f8:	dcf6      	bgt.n	80115e8 <uxr_run_session_timeout+0x14>
 80115fa:	f104 0008 	add.w	r0, r4, #8
 80115fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011602:	f001 b989 	b.w	8012918 <uxr_output_streams_confirmed>
 8011606:	bf00      	nop

08011608 <uxr_run_session_until_data>:
 8011608:	b570      	push	{r4, r5, r6, lr}
 801160a:	4604      	mov	r4, r0
 801160c:	460d      	mov	r5, r1
 801160e:	f001 f9df 	bl	80129d0 <uxr_millis>
 8011612:	4606      	mov	r6, r0
 8011614:	4620      	mov	r0, r4
 8011616:	f7ff fc57 	bl	8010ec8 <uxr_flash_output_streams>
 801161a:	2300      	movs	r3, #0
 801161c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8011620:	4629      	mov	r1, r5
 8011622:	e005      	b.n	8011630 <uxr_run_session_until_data+0x28>
 8011624:	f001 f9d4 	bl	80129d0 <uxr_millis>
 8011628:	1b83      	subs	r3, r0, r6
 801162a:	1ae9      	subs	r1, r5, r3
 801162c:	2900      	cmp	r1, #0
 801162e:	dd07      	ble.n	8011640 <uxr_run_session_until_data+0x38>
 8011630:	4620      	mov	r0, r4
 8011632:	f7ff fe8f 	bl	8011354 <listen_message_reliably>
 8011636:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801163a:	2800      	cmp	r0, #0
 801163c:	d0f2      	beq.n	8011624 <uxr_run_session_until_data+0x1c>
 801163e:	bd70      	pop	{r4, r5, r6, pc}
 8011640:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011644:	bd70      	pop	{r4, r5, r6, pc}
 8011646:	bf00      	nop

08011648 <uxr_run_session_until_confirm_delivery>:
 8011648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801164c:	4606      	mov	r6, r0
 801164e:	460d      	mov	r5, r1
 8011650:	f001 f9be 	bl	80129d0 <uxr_millis>
 8011654:	4607      	mov	r7, r0
 8011656:	4630      	mov	r0, r6
 8011658:	f7ff fc36 	bl	8010ec8 <uxr_flash_output_streams>
 801165c:	2d00      	cmp	r5, #0
 801165e:	f106 0808 	add.w	r8, r6, #8
 8011662:	bfa8      	it	ge
 8011664:	462c      	movge	r4, r5
 8011666:	da07      	bge.n	8011678 <uxr_run_session_until_confirm_delivery+0x30>
 8011668:	e00e      	b.n	8011688 <uxr_run_session_until_confirm_delivery+0x40>
 801166a:	f7ff fe73 	bl	8011354 <listen_message_reliably>
 801166e:	f001 f9af 	bl	80129d0 <uxr_millis>
 8011672:	1bc3      	subs	r3, r0, r7
 8011674:	1aec      	subs	r4, r5, r3
 8011676:	d407      	bmi.n	8011688 <uxr_run_session_until_confirm_delivery+0x40>
 8011678:	4640      	mov	r0, r8
 801167a:	f001 f94d 	bl	8012918 <uxr_output_streams_confirmed>
 801167e:	4603      	mov	r3, r0
 8011680:	4621      	mov	r1, r4
 8011682:	4630      	mov	r0, r6
 8011684:	2b00      	cmp	r3, #0
 8011686:	d0f0      	beq.n	801166a <uxr_run_session_until_confirm_delivery+0x22>
 8011688:	4640      	mov	r0, r8
 801168a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801168e:	f001 b943 	b.w	8012918 <uxr_output_streams_confirmed>
 8011692:	bf00      	nop

08011694 <uxr_run_session_until_all_status>:
 8011694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011698:	9c08      	ldr	r4, [sp, #32]
 801169a:	4606      	mov	r6, r0
 801169c:	460f      	mov	r7, r1
 801169e:	4691      	mov	r9, r2
 80116a0:	461d      	mov	r5, r3
 80116a2:	f7ff fc11 	bl	8010ec8 <uxr_flash_output_streams>
 80116a6:	b124      	cbz	r4, 80116b2 <uxr_run_session_until_all_status+0x1e>
 80116a8:	4622      	mov	r2, r4
 80116aa:	21ff      	movs	r1, #255	@ 0xff
 80116ac:	4628      	mov	r0, r5
 80116ae:	f007 f9ef 	bl	8018a90 <memset>
 80116b2:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 80116b6:	67f4      	str	r4, [r6, #124]	@ 0x7c
 80116b8:	f001 f98a 	bl	80129d0 <uxr_millis>
 80116bc:	3d01      	subs	r5, #1
 80116be:	f1a9 0902 	sub.w	r9, r9, #2
 80116c2:	4680      	mov	r8, r0
 80116c4:	4639      	mov	r1, r7
 80116c6:	4630      	mov	r0, r6
 80116c8:	f7ff fe44 	bl	8011354 <listen_message_reliably>
 80116cc:	f001 f980 	bl	80129d0 <uxr_millis>
 80116d0:	eba0 0008 	sub.w	r0, r0, r8
 80116d4:	1a39      	subs	r1, r7, r0
 80116d6:	b344      	cbz	r4, 801172a <uxr_run_session_until_all_status+0x96>
 80116d8:	4628      	mov	r0, r5
 80116da:	46ac      	mov	ip, r5
 80116dc:	2301      	movs	r3, #1
 80116de:	e002      	b.n	80116e6 <uxr_run_session_until_all_status+0x52>
 80116e0:	42a3      	cmp	r3, r4
 80116e2:	d20d      	bcs.n	8011700 <uxr_run_session_until_all_status+0x6c>
 80116e4:	3301      	adds	r3, #1
 80116e6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 80116ea:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80116ee:	d1f7      	bne.n	80116e0 <uxr_run_session_until_all_status+0x4c>
 80116f0:	42a3      	cmp	r3, r4
 80116f2:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 80116f6:	d213      	bcs.n	8011720 <uxr_run_session_until_all_status+0x8c>
 80116f8:	2a00      	cmp	r2, #0
 80116fa:	d0f3      	beq.n	80116e4 <uxr_run_session_until_all_status+0x50>
 80116fc:	2900      	cmp	r1, #0
 80116fe:	dce2      	bgt.n	80116c6 <uxr_run_session_until_all_status+0x32>
 8011700:	2300      	movs	r3, #0
 8011702:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8011704:	442c      	add	r4, r5
 8011706:	e001      	b.n	801170c <uxr_run_session_until_all_status+0x78>
 8011708:	2b01      	cmp	r3, #1
 801170a:	d812      	bhi.n	8011732 <uxr_run_session_until_all_status+0x9e>
 801170c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011710:	4284      	cmp	r4, r0
 8011712:	d1f9      	bne.n	8011708 <uxr_run_session_until_all_status+0x74>
 8011714:	2b01      	cmp	r3, #1
 8011716:	bf8c      	ite	hi
 8011718:	2000      	movhi	r0, #0
 801171a:	2001      	movls	r0, #1
 801171c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011720:	2900      	cmp	r1, #0
 8011722:	dded      	ble.n	8011700 <uxr_run_session_until_all_status+0x6c>
 8011724:	2a00      	cmp	r2, #0
 8011726:	d1ce      	bne.n	80116c6 <uxr_run_session_until_all_status+0x32>
 8011728:	e7ea      	b.n	8011700 <uxr_run_session_until_all_status+0x6c>
 801172a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 801172c:	2001      	movs	r0, #1
 801172e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011732:	2000      	movs	r0, #0
 8011734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011738 <wait_session_status>:
 8011738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801173c:	4604      	mov	r4, r0
 801173e:	b09d      	sub	sp, #116	@ 0x74
 8011740:	20ff      	movs	r0, #255	@ 0xff
 8011742:	7160      	strb	r0, [r4, #5]
 8011744:	9303      	str	r3, [sp, #12]
 8011746:	2b00      	cmp	r3, #0
 8011748:	f000 80b6 	beq.w	80118b8 <wait_session_status+0x180>
 801174c:	468a      	mov	sl, r1
 801174e:	4691      	mov	r9, r2
 8011750:	f04f 0b00 	mov.w	fp, #0
 8011754:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011756:	464a      	mov	r2, r9
 8011758:	e9d3 0500 	ldrd	r0, r5, [r3]
 801175c:	4651      	mov	r1, sl
 801175e:	47a8      	blx	r5
 8011760:	f001 f936 	bl	80129d0 <uxr_millis>
 8011764:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011768:	4605      	mov	r5, r0
 801176a:	e009      	b.n	8011780 <wait_session_status+0x48>
 801176c:	f001 f930 	bl	80129d0 <uxr_millis>
 8011770:	1b40      	subs	r0, r0, r5
 8011772:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011776:	2b00      	cmp	r3, #0
 8011778:	dd40      	ble.n	80117fc <wait_session_status+0xc4>
 801177a:	7960      	ldrb	r0, [r4, #5]
 801177c:	28ff      	cmp	r0, #255	@ 0xff
 801177e:	d145      	bne.n	801180c <wait_session_status+0xd4>
 8011780:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011782:	a908      	add	r1, sp, #32
 8011784:	6896      	ldr	r6, [r2, #8]
 8011786:	6810      	ldr	r0, [r2, #0]
 8011788:	aa09      	add	r2, sp, #36	@ 0x24
 801178a:	47b0      	blx	r6
 801178c:	2800      	cmp	r0, #0
 801178e:	d0ed      	beq.n	801176c <wait_session_status+0x34>
 8011790:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011794:	a80c      	add	r0, sp, #48	@ 0x30
 8011796:	f7fa fd6b 	bl	800c270 <ucdr_init_buffer>
 801179a:	2600      	movs	r6, #0
 801179c:	f10d 031e 	add.w	r3, sp, #30
 80117a0:	aa07      	add	r2, sp, #28
 80117a2:	a90c      	add	r1, sp, #48	@ 0x30
 80117a4:	4620      	mov	r0, r4
 80117a6:	f88d 601c 	strb.w	r6, [sp, #28]
 80117aa:	f000 fa87 	bl	8011cbc <uxr_read_session_header>
 80117ae:	2800      	cmp	r0, #0
 80117b0:	d0dc      	beq.n	801176c <wait_session_status+0x34>
 80117b2:	4631      	mov	r1, r6
 80117b4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80117b8:	f000 ffb6 	bl	8012728 <uxr_stream_id_from_raw>
 80117bc:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80117c0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80117c4:	9302      	str	r3, [sp, #8]
 80117c6:	2f01      	cmp	r7, #1
 80117c8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80117cc:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80117d0:	d05c      	beq.n	801188c <wait_session_status+0x154>
 80117d2:	2f02      	cmp	r7, #2
 80117d4:	d020      	beq.n	8011818 <wait_session_status+0xe0>
 80117d6:	2f00      	cmp	r7, #0
 80117d8:	d1c8      	bne.n	801176c <wait_session_status+0x34>
 80117da:	4639      	mov	r1, r7
 80117dc:	4638      	mov	r0, r7
 80117de:	f000 ffa3 	bl	8012728 <uxr_stream_id_from_raw>
 80117e2:	a90c      	add	r1, sp, #48	@ 0x30
 80117e4:	4602      	mov	r2, r0
 80117e6:	900b      	str	r0, [sp, #44]	@ 0x2c
 80117e8:	4620      	mov	r0, r4
 80117ea:	f7ff fc2b 	bl	8011044 <read_submessage_list>
 80117ee:	f001 f8ef 	bl	80129d0 <uxr_millis>
 80117f2:	1b40      	subs	r0, r0, r5
 80117f4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	dcbe      	bgt.n	801177a <wait_session_status+0x42>
 80117fc:	9b03      	ldr	r3, [sp, #12]
 80117fe:	7960      	ldrb	r0, [r4, #5]
 8011800:	f10b 0b01 	add.w	fp, fp, #1
 8011804:	455b      	cmp	r3, fp
 8011806:	d001      	beq.n	801180c <wait_session_status+0xd4>
 8011808:	28ff      	cmp	r0, #255	@ 0xff
 801180a:	d0a3      	beq.n	8011754 <wait_session_status+0x1c>
 801180c:	38ff      	subs	r0, #255	@ 0xff
 801180e:	bf18      	it	ne
 8011810:	2001      	movne	r0, #1
 8011812:	b01d      	add	sp, #116	@ 0x74
 8011814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011818:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 801181c:	9304      	str	r3, [sp, #16]
 801181e:	4631      	mov	r1, r6
 8011820:	f104 0008 	add.w	r0, r4, #8
 8011824:	f001 f86e 	bl	8012904 <uxr_get_input_reliable_stream>
 8011828:	4680      	mov	r8, r0
 801182a:	b348      	cbz	r0, 8011880 <wait_session_status+0x148>
 801182c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801182e:	9205      	str	r2, [sp, #20]
 8011830:	a80c      	add	r0, sp, #48	@ 0x30
 8011832:	f7fa fd4d 	bl	800c2d0 <ucdr_buffer_remaining>
 8011836:	4603      	mov	r3, r0
 8011838:	f10d 001d 	add.w	r0, sp, #29
 801183c:	9000      	str	r0, [sp, #0]
 801183e:	9a05      	ldr	r2, [sp, #20]
 8011840:	9902      	ldr	r1, [sp, #8]
 8011842:	4640      	mov	r0, r8
 8011844:	f005 ff3a 	bl	80176bc <uxr_receive_reliable_message>
 8011848:	b1d0      	cbz	r0, 8011880 <wait_session_status+0x148>
 801184a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d03a      	beq.n	80118c8 <wait_session_status+0x190>
 8011852:	9f04      	ldr	r7, [sp, #16]
 8011854:	e00a      	b.n	801186c <wait_session_status+0x134>
 8011856:	f04f 0302 	mov.w	r3, #2
 801185a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801185e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8011862:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8011866:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011868:	f7ff fbec 	bl	8011044 <read_submessage_list>
 801186c:	a914      	add	r1, sp, #80	@ 0x50
 801186e:	2204      	movs	r2, #4
 8011870:	4640      	mov	r0, r8
 8011872:	f005 ffa3 	bl	80177bc <uxr_next_input_reliable_buffer_available>
 8011876:	4603      	mov	r3, r0
 8011878:	a914      	add	r1, sp, #80	@ 0x50
 801187a:	4620      	mov	r0, r4
 801187c:	2b00      	cmp	r3, #0
 801187e:	d1ea      	bne.n	8011856 <wait_session_status+0x11e>
 8011880:	9904      	ldr	r1, [sp, #16]
 8011882:	4632      	mov	r2, r6
 8011884:	4620      	mov	r0, r4
 8011886:	f7ff fa57 	bl	8010d38 <write_submessage_acknack.isra.0>
 801188a:	e76f      	b.n	801176c <wait_session_status+0x34>
 801188c:	4631      	mov	r1, r6
 801188e:	f104 0008 	add.w	r0, r4, #8
 8011892:	f001 f82d 	bl	80128f0 <uxr_get_input_best_effort_stream>
 8011896:	2800      	cmp	r0, #0
 8011898:	f43f af68 	beq.w	801176c <wait_session_status+0x34>
 801189c:	9902      	ldr	r1, [sp, #8]
 801189e:	f005 fe79 	bl	8017594 <uxr_receive_best_effort_message>
 80118a2:	2800      	cmp	r0, #0
 80118a4:	f43f af62 	beq.w	801176c <wait_session_status+0x34>
 80118a8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80118ac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80118ae:	a90c      	add	r1, sp, #48	@ 0x30
 80118b0:	4620      	mov	r0, r4
 80118b2:	f7ff fbc7 	bl	8011044 <read_submessage_list>
 80118b6:	e759      	b.n	801176c <wait_session_status+0x34>
 80118b8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80118ba:	e9d3 0400 	ldrd	r0, r4, [r3]
 80118be:	47a0      	blx	r4
 80118c0:	2001      	movs	r0, #1
 80118c2:	b01d      	add	sp, #116	@ 0x74
 80118c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118c8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80118cc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80118ce:	a90c      	add	r1, sp, #48	@ 0x30
 80118d0:	4620      	mov	r0, r4
 80118d2:	f7ff fbb7 	bl	8011044 <read_submessage_list>
 80118d6:	e7bc      	b.n	8011852 <wait_session_status+0x11a>

080118d8 <uxr_delete_session_retries>:
 80118d8:	b530      	push	{r4, r5, lr}
 80118da:	b08f      	sub	sp, #60	@ 0x3c
 80118dc:	4604      	mov	r4, r0
 80118de:	460d      	mov	r5, r1
 80118e0:	f000 fa2e 	bl	8011d40 <uxr_session_header_offset>
 80118e4:	2300      	movs	r3, #0
 80118e6:	2210      	movs	r2, #16
 80118e8:	9000      	str	r0, [sp, #0]
 80118ea:	a902      	add	r1, sp, #8
 80118ec:	a806      	add	r0, sp, #24
 80118ee:	f7fa fcad 	bl	800c24c <ucdr_init_buffer_origin_offset>
 80118f2:	a906      	add	r1, sp, #24
 80118f4:	4620      	mov	r0, r4
 80118f6:	f000 f973 	bl	8011be0 <uxr_buffer_delete_session>
 80118fa:	2200      	movs	r2, #0
 80118fc:	4611      	mov	r1, r2
 80118fe:	9b06      	ldr	r3, [sp, #24]
 8011900:	4620      	mov	r0, r4
 8011902:	f000 f9c7 	bl	8011c94 <uxr_stamp_session_header>
 8011906:	a806      	add	r0, sp, #24
 8011908:	f7fa fcde 	bl	800c2c8 <ucdr_buffer_length>
 801190c:	462b      	mov	r3, r5
 801190e:	4602      	mov	r2, r0
 8011910:	a902      	add	r1, sp, #8
 8011912:	4620      	mov	r0, r4
 8011914:	f7ff ff10 	bl	8011738 <wait_session_status>
 8011918:	b118      	cbz	r0, 8011922 <uxr_delete_session_retries+0x4a>
 801191a:	7960      	ldrb	r0, [r4, #5]
 801191c:	fab0 f080 	clz	r0, r0
 8011920:	0940      	lsrs	r0, r0, #5
 8011922:	b00f      	add	sp, #60	@ 0x3c
 8011924:	bd30      	pop	{r4, r5, pc}
 8011926:	bf00      	nop

08011928 <uxr_create_session>:
 8011928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801192c:	f100 0b08 	add.w	fp, r0, #8
 8011930:	b0ab      	sub	sp, #172	@ 0xac
 8011932:	4604      	mov	r4, r0
 8011934:	4658      	mov	r0, fp
 8011936:	f000 ff2b 	bl	8012790 <uxr_reset_stream_storage>
 801193a:	4620      	mov	r0, r4
 801193c:	f000 fa00 	bl	8011d40 <uxr_session_header_offset>
 8011940:	2300      	movs	r3, #0
 8011942:	9000      	str	r0, [sp, #0]
 8011944:	221c      	movs	r2, #28
 8011946:	a90b      	add	r1, sp, #44	@ 0x2c
 8011948:	a812      	add	r0, sp, #72	@ 0x48
 801194a:	f7fa fc7f 	bl	800c24c <ucdr_init_buffer_origin_offset>
 801194e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011950:	8a1a      	ldrh	r2, [r3, #16]
 8011952:	3a04      	subs	r2, #4
 8011954:	b292      	uxth	r2, r2
 8011956:	a912      	add	r1, sp, #72	@ 0x48
 8011958:	4620      	mov	r0, r4
 801195a:	f000 f917 	bl	8011b8c <uxr_buffer_create_session>
 801195e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011960:	4620      	mov	r0, r4
 8011962:	f000 f983 	bl	8011c6c <uxr_stamp_create_session_header>
 8011966:	a812      	add	r0, sp, #72	@ 0x48
 8011968:	f7fa fcae 	bl	800c2c8 <ucdr_buffer_length>
 801196c:	23ff      	movs	r3, #255	@ 0xff
 801196e:	7163      	strb	r3, [r4, #5]
 8011970:	230a      	movs	r3, #10
 8011972:	46da      	mov	sl, fp
 8011974:	9303      	str	r3, [sp, #12]
 8011976:	4683      	mov	fp, r0
 8011978:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801197a:	465a      	mov	r2, fp
 801197c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011980:	a90b      	add	r1, sp, #44	@ 0x2c
 8011982:	47a8      	blx	r5
 8011984:	f001 f824 	bl	80129d0 <uxr_millis>
 8011988:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801198c:	4605      	mov	r5, r0
 801198e:	e009      	b.n	80119a4 <uxr_create_session+0x7c>
 8011990:	f001 f81e 	bl	80129d0 <uxr_millis>
 8011994:	1b40      	subs	r0, r0, r5
 8011996:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801199a:	2b00      	cmp	r3, #0
 801199c:	7962      	ldrb	r2, [r4, #5]
 801199e:	dd38      	ble.n	8011a12 <uxr_create_session+0xea>
 80119a0:	2aff      	cmp	r2, #255	@ 0xff
 80119a2:	d13c      	bne.n	8011a1e <uxr_create_session+0xf6>
 80119a4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80119a6:	a907      	add	r1, sp, #28
 80119a8:	6896      	ldr	r6, [r2, #8]
 80119aa:	6810      	ldr	r0, [r2, #0]
 80119ac:	aa08      	add	r2, sp, #32
 80119ae:	47b0      	blx	r6
 80119b0:	2800      	cmp	r0, #0
 80119b2:	d0ed      	beq.n	8011990 <uxr_create_session+0x68>
 80119b4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80119b8:	a81a      	add	r0, sp, #104	@ 0x68
 80119ba:	f7fa fc59 	bl	800c270 <ucdr_init_buffer>
 80119be:	2600      	movs	r6, #0
 80119c0:	f10d 031a 	add.w	r3, sp, #26
 80119c4:	aa06      	add	r2, sp, #24
 80119c6:	a91a      	add	r1, sp, #104	@ 0x68
 80119c8:	4620      	mov	r0, r4
 80119ca:	f88d 6018 	strb.w	r6, [sp, #24]
 80119ce:	f000 f975 	bl	8011cbc <uxr_read_session_header>
 80119d2:	2800      	cmp	r0, #0
 80119d4:	d0dc      	beq.n	8011990 <uxr_create_session+0x68>
 80119d6:	4631      	mov	r1, r6
 80119d8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80119dc:	f000 fea4 	bl	8012728 <uxr_stream_id_from_raw>
 80119e0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80119e4:	2e01      	cmp	r6, #1
 80119e6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80119ea:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80119ee:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80119f2:	d053      	beq.n	8011a9c <uxr_create_session+0x174>
 80119f4:	2e02      	cmp	r6, #2
 80119f6:	d018      	beq.n	8011a2a <uxr_create_session+0x102>
 80119f8:	2e00      	cmp	r6, #0
 80119fa:	d1c9      	bne.n	8011990 <uxr_create_session+0x68>
 80119fc:	4631      	mov	r1, r6
 80119fe:	4630      	mov	r0, r6
 8011a00:	f000 fe92 	bl	8012728 <uxr_stream_id_from_raw>
 8011a04:	a91a      	add	r1, sp, #104	@ 0x68
 8011a06:	4602      	mov	r2, r0
 8011a08:	900a      	str	r0, [sp, #40]	@ 0x28
 8011a0a:	4620      	mov	r0, r4
 8011a0c:	f7ff fb1a 	bl	8011044 <read_submessage_list>
 8011a10:	e7be      	b.n	8011990 <uxr_create_session+0x68>
 8011a12:	9b03      	ldr	r3, [sp, #12]
 8011a14:	3b01      	subs	r3, #1
 8011a16:	9303      	str	r3, [sp, #12]
 8011a18:	d001      	beq.n	8011a1e <uxr_create_session+0xf6>
 8011a1a:	2aff      	cmp	r2, #255	@ 0xff
 8011a1c:	d0ac      	beq.n	8011978 <uxr_create_session+0x50>
 8011a1e:	2a00      	cmp	r2, #0
 8011a20:	d051      	beq.n	8011ac6 <uxr_create_session+0x19e>
 8011a22:	2000      	movs	r0, #0
 8011a24:	b02b      	add	sp, #172	@ 0xac
 8011a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a2a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011a2e:	9304      	str	r3, [sp, #16]
 8011a30:	4639      	mov	r1, r7
 8011a32:	4650      	mov	r0, sl
 8011a34:	f000 ff66 	bl	8012904 <uxr_get_input_reliable_stream>
 8011a38:	4680      	mov	r8, r0
 8011a3a:	b348      	cbz	r0, 8011a90 <uxr_create_session+0x168>
 8011a3c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011a3e:	9205      	str	r2, [sp, #20]
 8011a40:	a81a      	add	r0, sp, #104	@ 0x68
 8011a42:	f7fa fc45 	bl	800c2d0 <ucdr_buffer_remaining>
 8011a46:	4603      	mov	r3, r0
 8011a48:	f10d 0019 	add.w	r0, sp, #25
 8011a4c:	9000      	str	r0, [sp, #0]
 8011a4e:	9a05      	ldr	r2, [sp, #20]
 8011a50:	4649      	mov	r1, r9
 8011a52:	4640      	mov	r0, r8
 8011a54:	f005 fe32 	bl	80176bc <uxr_receive_reliable_message>
 8011a58:	b1d0      	cbz	r0, 8011a90 <uxr_create_session+0x168>
 8011a5a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d038      	beq.n	8011ad4 <uxr_create_session+0x1ac>
 8011a62:	9e04      	ldr	r6, [sp, #16]
 8011a64:	e00a      	b.n	8011a7c <uxr_create_session+0x154>
 8011a66:	f04f 0302 	mov.w	r3, #2
 8011a6a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8011a6e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8011a72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011a76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011a78:	f7ff fae4 	bl	8011044 <read_submessage_list>
 8011a7c:	a922      	add	r1, sp, #136	@ 0x88
 8011a7e:	2204      	movs	r2, #4
 8011a80:	4640      	mov	r0, r8
 8011a82:	f005 fe9b 	bl	80177bc <uxr_next_input_reliable_buffer_available>
 8011a86:	4603      	mov	r3, r0
 8011a88:	a922      	add	r1, sp, #136	@ 0x88
 8011a8a:	4620      	mov	r0, r4
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d1ea      	bne.n	8011a66 <uxr_create_session+0x13e>
 8011a90:	9904      	ldr	r1, [sp, #16]
 8011a92:	463a      	mov	r2, r7
 8011a94:	4620      	mov	r0, r4
 8011a96:	f7ff f94f 	bl	8010d38 <write_submessage_acknack.isra.0>
 8011a9a:	e779      	b.n	8011990 <uxr_create_session+0x68>
 8011a9c:	4639      	mov	r1, r7
 8011a9e:	4650      	mov	r0, sl
 8011aa0:	f000 ff26 	bl	80128f0 <uxr_get_input_best_effort_stream>
 8011aa4:	2800      	cmp	r0, #0
 8011aa6:	f43f af73 	beq.w	8011990 <uxr_create_session+0x68>
 8011aaa:	4649      	mov	r1, r9
 8011aac:	f005 fd72 	bl	8017594 <uxr_receive_best_effort_message>
 8011ab0:	2800      	cmp	r0, #0
 8011ab2:	f43f af6d 	beq.w	8011990 <uxr_create_session+0x68>
 8011ab6:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011aba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011abc:	a91a      	add	r1, sp, #104	@ 0x68
 8011abe:	4620      	mov	r0, r4
 8011ac0:	f7ff fac0 	bl	8011044 <read_submessage_list>
 8011ac4:	e764      	b.n	8011990 <uxr_create_session+0x68>
 8011ac6:	4650      	mov	r0, sl
 8011ac8:	f000 fe62 	bl	8012790 <uxr_reset_stream_storage>
 8011acc:	2001      	movs	r0, #1
 8011ace:	b02b      	add	sp, #172	@ 0xac
 8011ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ad4:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011ad8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011ada:	a91a      	add	r1, sp, #104	@ 0x68
 8011adc:	4620      	mov	r0, r4
 8011ade:	f7ff fab1 	bl	8011044 <read_submessage_list>
 8011ae2:	e7be      	b.n	8011a62 <uxr_create_session+0x13a>

08011ae4 <uxr_prepare_stream_to_write_submessage>:
 8011ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ae8:	b082      	sub	sp, #8
 8011aea:	4682      	mov	sl, r0
 8011aec:	4610      	mov	r0, r2
 8011aee:	4615      	mov	r5, r2
 8011af0:	461e      	mov	r6, r3
 8011af2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8011af6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8011afa:	9101      	str	r1, [sp, #4]
 8011afc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8011b00:	f000 ff60 	bl	80129c4 <uxr_submessage_padding>
 8011b04:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011b08:	f105 0904 	add.w	r9, r5, #4
 8011b0c:	2b01      	cmp	r3, #1
 8011b0e:	4481      	add	r9, r0
 8011b10:	d01d      	beq.n	8011b4e <uxr_prepare_stream_to_write_submessage+0x6a>
 8011b12:	2b02      	cmp	r3, #2
 8011b14:	d116      	bne.n	8011b44 <uxr_prepare_stream_to_write_submessage+0x60>
 8011b16:	4621      	mov	r1, r4
 8011b18:	f10a 0008 	add.w	r0, sl, #8
 8011b1c:	f000 fede 	bl	80128dc <uxr_get_output_reliable_stream>
 8011b20:	4604      	mov	r4, r0
 8011b22:	b158      	cbz	r0, 8011b3c <uxr_prepare_stream_to_write_submessage+0x58>
 8011b24:	4649      	mov	r1, r9
 8011b26:	4632      	mov	r2, r6
 8011b28:	f006 f804 	bl	8017b34 <uxr_prepare_reliable_buffer_to_write>
 8011b2c:	4604      	mov	r4, r0
 8011b2e:	b12c      	cbz	r4, 8011b3c <uxr_prepare_stream_to_write_submessage+0x58>
 8011b30:	4643      	mov	r3, r8
 8011b32:	b2aa      	uxth	r2, r5
 8011b34:	4639      	mov	r1, r7
 8011b36:	4630      	mov	r0, r6
 8011b38:	f000 ff04 	bl	8012944 <uxr_buffer_submessage_header>
 8011b3c:	4620      	mov	r0, r4
 8011b3e:	b002      	add	sp, #8
 8011b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b44:	2400      	movs	r4, #0
 8011b46:	4620      	mov	r0, r4
 8011b48:	b002      	add	sp, #8
 8011b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b4e:	4621      	mov	r1, r4
 8011b50:	f10a 0008 	add.w	r0, sl, #8
 8011b54:	f000 feba 	bl	80128cc <uxr_get_output_best_effort_stream>
 8011b58:	4604      	mov	r4, r0
 8011b5a:	2800      	cmp	r0, #0
 8011b5c:	d0ee      	beq.n	8011b3c <uxr_prepare_stream_to_write_submessage+0x58>
 8011b5e:	4649      	mov	r1, r9
 8011b60:	4632      	mov	r2, r6
 8011b62:	f005 ff17 	bl	8017994 <uxr_prepare_best_effort_buffer_to_write>
 8011b66:	4604      	mov	r4, r0
 8011b68:	e7e1      	b.n	8011b2e <uxr_prepare_stream_to_write_submessage+0x4a>
 8011b6a:	bf00      	nop

08011b6c <uxr_init_session_info>:
 8011b6c:	0e13      	lsrs	r3, r2, #24
 8011b6e:	7043      	strb	r3, [r0, #1]
 8011b70:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011b74:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011b78:	7001      	strb	r1, [r0, #0]
 8011b7a:	70c3      	strb	r3, [r0, #3]
 8011b7c:	2109      	movs	r1, #9
 8011b7e:	23ff      	movs	r3, #255	@ 0xff
 8011b80:	f880 c002 	strb.w	ip, [r0, #2]
 8011b84:	7102      	strb	r2, [r0, #4]
 8011b86:	80c1      	strh	r1, [r0, #6]
 8011b88:	7143      	strb	r3, [r0, #5]
 8011b8a:	4770      	bx	lr

08011b8c <uxr_buffer_create_session>:
 8011b8c:	b530      	push	{r4, r5, lr}
 8011b8e:	b089      	sub	sp, #36	@ 0x24
 8011b90:	2300      	movs	r3, #0
 8011b92:	4d12      	ldr	r5, [pc, #72]	@ (8011bdc <uxr_buffer_create_session+0x50>)
 8011b94:	9307      	str	r3, [sp, #28]
 8011b96:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011b9a:	2201      	movs	r2, #1
 8011b9c:	9301      	str	r3, [sp, #4]
 8011b9e:	80c2      	strh	r2, [r0, #6]
 8011ba0:	f88d 2004 	strb.w	r2, [sp, #4]
 8011ba4:	682a      	ldr	r2, [r5, #0]
 8011ba6:	9200      	str	r2, [sp, #0]
 8011ba8:	88aa      	ldrh	r2, [r5, #4]
 8011baa:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011bae:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8011bb2:	9202      	str	r2, [sp, #8]
 8011bb4:	460c      	mov	r4, r1
 8011bb6:	7802      	ldrb	r2, [r0, #0]
 8011bb8:	9303      	str	r3, [sp, #12]
 8011bba:	4619      	mov	r1, r3
 8011bbc:	f88d 200c 	strb.w	r2, [sp, #12]
 8011bc0:	4620      	mov	r0, r4
 8011bc2:	2210      	movs	r2, #16
 8011bc4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8011bc8:	9306      	str	r3, [sp, #24]
 8011bca:	f000 febb 	bl	8012944 <uxr_buffer_submessage_header>
 8011bce:	4669      	mov	r1, sp
 8011bd0:	4620      	mov	r0, r4
 8011bd2:	f001 fe47 	bl	8013864 <uxr_serialize_CREATE_CLIENT_Payload>
 8011bd6:	b009      	add	sp, #36	@ 0x24
 8011bd8:	bd30      	pop	{r4, r5, pc}
 8011bda:	bf00      	nop
 8011bdc:	08019934 	.word	0x08019934

08011be0 <uxr_buffer_delete_session>:
 8011be0:	b510      	push	{r4, lr}
 8011be2:	4b0c      	ldr	r3, [pc, #48]	@ (8011c14 <uxr_buffer_delete_session+0x34>)
 8011be4:	b082      	sub	sp, #8
 8011be6:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8011bea:	f8ad c006 	strh.w	ip, [sp, #6]
 8011bee:	460c      	mov	r4, r1
 8011bf0:	2202      	movs	r2, #2
 8011bf2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011bf6:	80c2      	strh	r2, [r0, #6]
 8011bf8:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011bfc:	2204      	movs	r2, #4
 8011bfe:	2300      	movs	r3, #0
 8011c00:	2103      	movs	r1, #3
 8011c02:	4620      	mov	r0, r4
 8011c04:	f000 fe9e 	bl	8012944 <uxr_buffer_submessage_header>
 8011c08:	a901      	add	r1, sp, #4
 8011c0a:	4620      	mov	r0, r4
 8011c0c:	f001 fed0 	bl	80139b0 <uxr_serialize_DELETE_Payload>
 8011c10:	b002      	add	sp, #8
 8011c12:	bd10      	pop	{r4, pc}
 8011c14:	08019934 	.word	0x08019934

08011c18 <uxr_read_create_session_status>:
 8011c18:	b510      	push	{r4, lr}
 8011c1a:	b088      	sub	sp, #32
 8011c1c:	4604      	mov	r4, r0
 8011c1e:	4608      	mov	r0, r1
 8011c20:	a901      	add	r1, sp, #4
 8011c22:	f001 fed5 	bl	80139d0 <uxr_deserialize_STATUS_AGENT_Payload>
 8011c26:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011c2a:	7163      	strb	r3, [r4, #5]
 8011c2c:	b008      	add	sp, #32
 8011c2e:	bd10      	pop	{r4, pc}

08011c30 <uxr_read_delete_session_status>:
 8011c30:	b510      	push	{r4, lr}
 8011c32:	4604      	mov	r4, r0
 8011c34:	b084      	sub	sp, #16
 8011c36:	4608      	mov	r0, r1
 8011c38:	a902      	add	r1, sp, #8
 8011c3a:	f001 fef9 	bl	8013a30 <uxr_deserialize_STATUS_Payload>
 8011c3e:	88e3      	ldrh	r3, [r4, #6]
 8011c40:	2b02      	cmp	r3, #2
 8011c42:	d001      	beq.n	8011c48 <uxr_read_delete_session_status+0x18>
 8011c44:	b004      	add	sp, #16
 8011c46:	bd10      	pop	{r4, pc}
 8011c48:	f10d 000a 	add.w	r0, sp, #10
 8011c4c:	f7fe feca 	bl	80109e4 <uxr_object_id_from_raw>
 8011c50:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011c54:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011c58:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011c5c:	b29b      	uxth	r3, r3
 8011c5e:	2b02      	cmp	r3, #2
 8011c60:	bf04      	itt	eq
 8011c62:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8011c66:	7163      	strbeq	r3, [r4, #5]
 8011c68:	b004      	add	sp, #16
 8011c6a:	bd10      	pop	{r4, pc}

08011c6c <uxr_stamp_create_session_header>:
 8011c6c:	b510      	push	{r4, lr}
 8011c6e:	2208      	movs	r2, #8
 8011c70:	b08a      	sub	sp, #40	@ 0x28
 8011c72:	4604      	mov	r4, r0
 8011c74:	eb0d 0002 	add.w	r0, sp, r2
 8011c78:	f7fa fafa 	bl	800c270 <ucdr_init_buffer>
 8011c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c80:	9400      	str	r4, [sp, #0]
 8011c82:	2300      	movs	r3, #0
 8011c84:	461a      	mov	r2, r3
 8011c86:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8011c8a:	a802      	add	r0, sp, #8
 8011c8c:	f001 f854 	bl	8012d38 <uxr_serialize_message_header>
 8011c90:	b00a      	add	sp, #40	@ 0x28
 8011c92:	bd10      	pop	{r4, pc}

08011c94 <uxr_stamp_session_header>:
 8011c94:	b530      	push	{r4, r5, lr}
 8011c96:	b08d      	sub	sp, #52	@ 0x34
 8011c98:	4604      	mov	r4, r0
 8011c9a:	460d      	mov	r5, r1
 8011c9c:	9203      	str	r2, [sp, #12]
 8011c9e:	4619      	mov	r1, r3
 8011ca0:	a804      	add	r0, sp, #16
 8011ca2:	2208      	movs	r2, #8
 8011ca4:	f7fa fae4 	bl	800c270 <ucdr_init_buffer>
 8011ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cac:	9b03      	ldr	r3, [sp, #12]
 8011cae:	9400      	str	r4, [sp, #0]
 8011cb0:	462a      	mov	r2, r5
 8011cb2:	a804      	add	r0, sp, #16
 8011cb4:	f001 f840 	bl	8012d38 <uxr_serialize_message_header>
 8011cb8:	b00d      	add	sp, #52	@ 0x34
 8011cba:	bd30      	pop	{r4, r5, pc}

08011cbc <uxr_read_session_header>:
 8011cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cc0:	4607      	mov	r7, r0
 8011cc2:	b084      	sub	sp, #16
 8011cc4:	4608      	mov	r0, r1
 8011cc6:	460c      	mov	r4, r1
 8011cc8:	4615      	mov	r5, r2
 8011cca:	461e      	mov	r6, r3
 8011ccc:	f7fa fb00 	bl	800c2d0 <ucdr_buffer_remaining>
 8011cd0:	2808      	cmp	r0, #8
 8011cd2:	d803      	bhi.n	8011cdc <uxr_read_session_header+0x20>
 8011cd4:	2000      	movs	r0, #0
 8011cd6:	b004      	add	sp, #16
 8011cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cdc:	f10d 080c 	add.w	r8, sp, #12
 8011ce0:	4633      	mov	r3, r6
 8011ce2:	462a      	mov	r2, r5
 8011ce4:	f8cd 8000 	str.w	r8, [sp]
 8011ce8:	4620      	mov	r0, r4
 8011cea:	f10d 010b 	add.w	r1, sp, #11
 8011cee:	f001 f841 	bl	8012d74 <uxr_deserialize_message_header>
 8011cf2:	783a      	ldrb	r2, [r7, #0]
 8011cf4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011cf8:	4293      	cmp	r3, r2
 8011cfa:	d1eb      	bne.n	8011cd4 <uxr_read_session_header+0x18>
 8011cfc:	061b      	lsls	r3, r3, #24
 8011cfe:	d41c      	bmi.n	8011d3a <uxr_read_session_header+0x7e>
 8011d00:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011d04:	787b      	ldrb	r3, [r7, #1]
 8011d06:	429a      	cmp	r2, r3
 8011d08:	d003      	beq.n	8011d12 <uxr_read_session_header+0x56>
 8011d0a:	2001      	movs	r0, #1
 8011d0c:	f080 0001 	eor.w	r0, r0, #1
 8011d10:	e7e1      	b.n	8011cd6 <uxr_read_session_header+0x1a>
 8011d12:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011d16:	78bb      	ldrb	r3, [r7, #2]
 8011d18:	429a      	cmp	r2, r3
 8011d1a:	f107 0102 	add.w	r1, r7, #2
 8011d1e:	d1f4      	bne.n	8011d0a <uxr_read_session_header+0x4e>
 8011d20:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011d24:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	d1ee      	bne.n	8011d0a <uxr_read_session_header+0x4e>
 8011d2c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011d30:	784b      	ldrb	r3, [r1, #1]
 8011d32:	429a      	cmp	r2, r3
 8011d34:	d1e9      	bne.n	8011d0a <uxr_read_session_header+0x4e>
 8011d36:	2000      	movs	r0, #0
 8011d38:	e7e8      	b.n	8011d0c <uxr_read_session_header+0x50>
 8011d3a:	2001      	movs	r0, #1
 8011d3c:	e7cb      	b.n	8011cd6 <uxr_read_session_header+0x1a>
 8011d3e:	bf00      	nop

08011d40 <uxr_session_header_offset>:
 8011d40:	f990 3000 	ldrsb.w	r3, [r0]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	bfac      	ite	ge
 8011d48:	2008      	movge	r0, #8
 8011d4a:	2004      	movlt	r0, #4
 8011d4c:	4770      	bx	lr
 8011d4e:	bf00      	nop

08011d50 <uxr_init_base_object_request>:
 8011d50:	b510      	push	{r4, lr}
 8011d52:	88c3      	ldrh	r3, [r0, #6]
 8011d54:	b082      	sub	sp, #8
 8011d56:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8011d5a:	9101      	str	r1, [sp, #4]
 8011d5c:	f1a3 010a 	sub.w	r1, r3, #10
 8011d60:	b289      	uxth	r1, r1
 8011d62:	42a1      	cmp	r1, r4
 8011d64:	d80e      	bhi.n	8011d84 <uxr_init_base_object_request+0x34>
 8011d66:	3301      	adds	r3, #1
 8011d68:	b29c      	uxth	r4, r3
 8011d6a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011d6e:	b2db      	uxtb	r3, r3
 8011d70:	80c4      	strh	r4, [r0, #6]
 8011d72:	9801      	ldr	r0, [sp, #4]
 8011d74:	7011      	strb	r1, [r2, #0]
 8011d76:	7053      	strb	r3, [r2, #1]
 8011d78:	1c91      	adds	r1, r2, #2
 8011d7a:	f7fe fe47 	bl	8010a0c <uxr_object_id_to_raw>
 8011d7e:	4620      	mov	r0, r4
 8011d80:	b002      	add	sp, #8
 8011d82:	bd10      	pop	{r4, pc}
 8011d84:	230a      	movs	r3, #10
 8011d86:	2100      	movs	r1, #0
 8011d88:	461c      	mov	r4, r3
 8011d8a:	e7f1      	b.n	8011d70 <uxr_init_base_object_request+0x20>

08011d8c <uxr_parse_base_object_request>:
 8011d8c:	b570      	push	{r4, r5, r6, lr}
 8011d8e:	4604      	mov	r4, r0
 8011d90:	3002      	adds	r0, #2
 8011d92:	460d      	mov	r5, r1
 8011d94:	4616      	mov	r6, r2
 8011d96:	f7fe fe25 	bl	80109e4 <uxr_object_id_from_raw>
 8011d9a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011d9e:	8028      	strh	r0, [r5, #0]
 8011da0:	806b      	strh	r3, [r5, #2]
 8011da2:	7822      	ldrb	r2, [r4, #0]
 8011da4:	7863      	ldrb	r3, [r4, #1]
 8011da6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011daa:	8033      	strh	r3, [r6, #0]
 8011dac:	bd70      	pop	{r4, r5, r6, pc}
 8011dae:	bf00      	nop

08011db0 <uxr_init_framing_io>:
 8011db0:	2300      	movs	r3, #0
 8011db2:	7041      	strb	r1, [r0, #1]
 8011db4:	7003      	strb	r3, [r0, #0]
 8011db6:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8011db8:	4770      	bx	lr
 8011dba:	bf00      	nop

08011dbc <uxr_write_framed_msg>:
 8011dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dc0:	4617      	mov	r7, r2
 8011dc2:	7842      	ldrb	r2, [r0, #1]
 8011dc4:	b083      	sub	sp, #12
 8011dc6:	460e      	mov	r6, r1
 8011dc8:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8011dcc:	469a      	mov	sl, r3
 8011dce:	2901      	cmp	r1, #1
 8011dd0:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8011dd4:	4604      	mov	r4, r0
 8011dd6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8011dda:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8011dde:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8011de2:	f240 8137 	bls.w	8012054 <uxr_write_framed_msg+0x298>
 8011de6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8011dea:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8011dee:	2901      	cmp	r1, #1
 8011df0:	f04f 0202 	mov.w	r2, #2
 8011df4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011df8:	f240 808f 	bls.w	8011f1a <uxr_write_framed_msg+0x15e>
 8011dfc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011dfe:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8011e02:	b2dd      	uxtb	r5, r3
 8011e04:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011e08:	2203      	movs	r2, #3
 8011e0a:	2901      	cmp	r1, #1
 8011e0c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011e10:	f240 809a 	bls.w	8011f48 <uxr_write_framed_msg+0x18c>
 8011e14:	18a1      	adds	r1, r4, r2
 8011e16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011e18:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8011e1c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011e20:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8011e24:	3201      	adds	r2, #1
 8011e26:	2801      	cmp	r0, #1
 8011e28:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011e2c:	f240 80a0 	bls.w	8011f70 <uxr_write_framed_msg+0x1b4>
 8011e30:	18a0      	adds	r0, r4, r2
 8011e32:	3201      	adds	r2, #1
 8011e34:	b2d2      	uxtb	r2, r2
 8011e36:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8011e3a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	f000 80a9 	beq.w	8011f96 <uxr_write_framed_msg+0x1da>
 8011e44:	f04f 0900 	mov.w	r9, #0
 8011e48:	46c8      	mov	r8, r9
 8011e4a:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011e4e:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8011e52:	2901      	cmp	r1, #1
 8011e54:	f240 80c3 	bls.w	8011fde <uxr_write_framed_msg+0x222>
 8011e58:	2a29      	cmp	r2, #41	@ 0x29
 8011e5a:	f200 809f 	bhi.w	8011f9c <uxr_write_framed_msg+0x1e0>
 8011e5e:	18a1      	adds	r1, r4, r2
 8011e60:	3201      	adds	r2, #1
 8011e62:	b2d2      	uxtb	r2, r2
 8011e64:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8011e68:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011e6c:	ea89 0303 	eor.w	r3, r9, r3
 8011e70:	498c      	ldr	r1, [pc, #560]	@ (80120a4 <uxr_write_framed_msg+0x2e8>)
 8011e72:	b2db      	uxtb	r3, r3
 8011e74:	f108 0801 	add.w	r8, r8, #1
 8011e78:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011e7c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8011e80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011e82:	4543      	cmp	r3, r8
 8011e84:	d8e1      	bhi.n	8011e4a <uxr_write_framed_msg+0x8e>
 8011e86:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8011e8a:	fa5f f889 	uxtb.w	r8, r9
 8011e8e:	9301      	str	r3, [sp, #4]
 8011e90:	f04f 0900 	mov.w	r9, #0
 8011e94:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8011e98:	fa5f f18a 	uxtb.w	r1, sl
 8011e9c:	2901      	cmp	r1, #1
 8011e9e:	d921      	bls.n	8011ee4 <uxr_write_framed_msg+0x128>
 8011ea0:	2a29      	cmp	r2, #41	@ 0x29
 8011ea2:	f240 80af 	bls.w	8012004 <uxr_write_framed_msg+0x248>
 8011ea6:	2500      	movs	r5, #0
 8011ea8:	e000      	b.n	8011eac <uxr_write_framed_msg+0xf0>
 8011eaa:	b160      	cbz	r0, 8011ec6 <uxr_write_framed_msg+0x10a>
 8011eac:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011eb0:	1b52      	subs	r2, r2, r5
 8011eb2:	465b      	mov	r3, fp
 8011eb4:	4421      	add	r1, r4
 8011eb6:	4638      	mov	r0, r7
 8011eb8:	47b0      	blx	r6
 8011eba:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011ebe:	4405      	add	r5, r0
 8011ec0:	4295      	cmp	r5, r2
 8011ec2:	d3f2      	bcc.n	8011eaa <uxr_write_framed_msg+0xee>
 8011ec4:	d003      	beq.n	8011ece <uxr_write_framed_msg+0x112>
 8011ec6:	2000      	movs	r0, #0
 8011ec8:	b003      	add	sp, #12
 8011eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ece:	fa5f f18a 	uxtb.w	r1, sl
 8011ed2:	f04f 0300 	mov.w	r3, #0
 8011ed6:	2901      	cmp	r1, #1
 8011ed8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011edc:	f04f 0200 	mov.w	r2, #0
 8011ee0:	f200 8090 	bhi.w	8012004 <uxr_write_framed_msg+0x248>
 8011ee4:	1c51      	adds	r1, r2, #1
 8011ee6:	b2c9      	uxtb	r1, r1
 8011ee8:	2929      	cmp	r1, #41	@ 0x29
 8011eea:	d8dc      	bhi.n	8011ea6 <uxr_write_framed_msg+0xea>
 8011eec:	18a5      	adds	r5, r4, r2
 8011eee:	4421      	add	r1, r4
 8011ef0:	3202      	adds	r2, #2
 8011ef2:	f088 0820 	eor.w	r8, r8, #32
 8011ef6:	4648      	mov	r0, r9
 8011ef8:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8011efc:	b2d2      	uxtb	r2, r2
 8011efe:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8011f02:	f04f 0901 	mov.w	r9, #1
 8011f06:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8011f0a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011f0e:	2800      	cmp	r0, #0
 8011f10:	f040 8085 	bne.w	801201e <uxr_write_framed_msg+0x262>
 8011f14:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011f18:	e7bc      	b.n	8011e94 <uxr_write_framed_msg+0xd8>
 8011f1a:	4611      	mov	r1, r2
 8011f1c:	f04f 0c03 	mov.w	ip, #3
 8011f20:	2204      	movs	r2, #4
 8011f22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011f24:	4421      	add	r1, r4
 8011f26:	b2dd      	uxtb	r5, r3
 8011f28:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8011f2c:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8011f30:	44a4      	add	ip, r4
 8011f32:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011f36:	f080 0020 	eor.w	r0, r0, #32
 8011f3a:	2901      	cmp	r1, #1
 8011f3c:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8011f40:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011f44:	f63f af66 	bhi.w	8011e14 <uxr_write_framed_msg+0x58>
 8011f48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011f4a:	18a0      	adds	r0, r4, r2
 8011f4c:	f085 0520 	eor.w	r5, r5, #32
 8011f50:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011f54:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011f58:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8011f5c:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8011f60:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8011f64:	3202      	adds	r2, #2
 8011f66:	2801      	cmp	r0, #1
 8011f68:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011f6c:	f63f af60 	bhi.w	8011e30 <uxr_write_framed_msg+0x74>
 8011f70:	1c50      	adds	r0, r2, #1
 8011f72:	18a5      	adds	r5, r4, r2
 8011f74:	fa54 f080 	uxtab	r0, r4, r0
 8011f78:	3202      	adds	r2, #2
 8011f7a:	f081 0120 	eor.w	r1, r1, #32
 8011f7e:	b2d2      	uxtb	r2, r2
 8011f80:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011f84:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8011f88:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8011f8c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	f47f af57 	bne.w	8011e44 <uxr_write_framed_msg+0x88>
 8011f96:	9301      	str	r3, [sp, #4]
 8011f98:	4698      	mov	r8, r3
 8011f9a:	e779      	b.n	8011e90 <uxr_write_framed_msg+0xd4>
 8011f9c:	2500      	movs	r5, #0
 8011f9e:	e001      	b.n	8011fa4 <uxr_write_framed_msg+0x1e8>
 8011fa0:	2800      	cmp	r0, #0
 8011fa2:	d090      	beq.n	8011ec6 <uxr_write_framed_msg+0x10a>
 8011fa4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011fa8:	1b52      	subs	r2, r2, r5
 8011faa:	465b      	mov	r3, fp
 8011fac:	4421      	add	r1, r4
 8011fae:	4638      	mov	r0, r7
 8011fb0:	47b0      	blx	r6
 8011fb2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011fb6:	4405      	add	r5, r0
 8011fb8:	4295      	cmp	r5, r2
 8011fba:	d3f1      	bcc.n	8011fa0 <uxr_write_framed_msg+0x1e4>
 8011fbc:	d183      	bne.n	8011ec6 <uxr_write_framed_msg+0x10a>
 8011fbe:	f04f 0300 	mov.w	r3, #0
 8011fc2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011fc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011fc8:	4543      	cmp	r3, r8
 8011fca:	d964      	bls.n	8012096 <uxr_write_framed_msg+0x2da>
 8011fcc:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011fd0:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8011fd4:	2901      	cmp	r1, #1
 8011fd6:	f04f 0200 	mov.w	r2, #0
 8011fda:	f63f af3d 	bhi.w	8011e58 <uxr_write_framed_msg+0x9c>
 8011fde:	1c51      	adds	r1, r2, #1
 8011fe0:	b2c9      	uxtb	r1, r1
 8011fe2:	2929      	cmp	r1, #41	@ 0x29
 8011fe4:	d8da      	bhi.n	8011f9c <uxr_write_framed_msg+0x1e0>
 8011fe6:	18a0      	adds	r0, r4, r2
 8011fe8:	4421      	add	r1, r4
 8011fea:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8011fee:	3202      	adds	r2, #2
 8011ff0:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8011ff4:	b2d2      	uxtb	r2, r2
 8011ff6:	f083 0020 	eor.w	r0, r3, #32
 8011ffa:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8011ffe:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012002:	e733      	b.n	8011e6c <uxr_write_framed_msg+0xb0>
 8012004:	18a1      	adds	r1, r4, r2
 8012006:	3201      	adds	r2, #1
 8012008:	4648      	mov	r0, r9
 801200a:	b2d2      	uxtb	r2, r2
 801200c:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8012010:	f04f 0901 	mov.w	r9, #1
 8012014:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012018:	2800      	cmp	r0, #0
 801201a:	f43f af7b 	beq.w	8011f14 <uxr_write_framed_msg+0x158>
 801201e:	2500      	movs	r5, #0
 8012020:	e002      	b.n	8012028 <uxr_write_framed_msg+0x26c>
 8012022:	2800      	cmp	r0, #0
 8012024:	f43f af4f 	beq.w	8011ec6 <uxr_write_framed_msg+0x10a>
 8012028:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801202c:	1b52      	subs	r2, r2, r5
 801202e:	465b      	mov	r3, fp
 8012030:	4421      	add	r1, r4
 8012032:	4638      	mov	r0, r7
 8012034:	47b0      	blx	r6
 8012036:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801203a:	4405      	add	r5, r0
 801203c:	4295      	cmp	r5, r2
 801203e:	d3f0      	bcc.n	8012022 <uxr_write_framed_msg+0x266>
 8012040:	f47f af41 	bne.w	8011ec6 <uxr_write_framed_msg+0x10a>
 8012044:	2300      	movs	r3, #0
 8012046:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801204a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801204c:	b298      	uxth	r0, r3
 801204e:	b003      	add	sp, #12
 8012050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012054:	217d      	movs	r1, #125	@ 0x7d
 8012056:	f082 0220 	eor.w	r2, r2, #32
 801205a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 801205e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8012062:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8012066:	2901      	cmp	r1, #1
 8012068:	f04f 0203 	mov.w	r2, #3
 801206c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012070:	d804      	bhi.n	801207c <uxr_write_framed_msg+0x2c0>
 8012072:	4611      	mov	r1, r2
 8012074:	f04f 0c04 	mov.w	ip, #4
 8012078:	2205      	movs	r2, #5
 801207a:	e752      	b.n	8011f22 <uxr_write_framed_msg+0x166>
 801207c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801207e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8012082:	b2dd      	uxtb	r5, r3
 8012084:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8012088:	2204      	movs	r2, #4
 801208a:	2901      	cmp	r1, #1
 801208c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012090:	f63f aec0 	bhi.w	8011e14 <uxr_write_framed_msg+0x58>
 8012094:	e758      	b.n	8011f48 <uxr_write_framed_msg+0x18c>
 8012096:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801209a:	fa5f f889 	uxtb.w	r8, r9
 801209e:	9301      	str	r3, [sp, #4]
 80120a0:	2200      	movs	r2, #0
 80120a2:	e6f5      	b.n	8011e90 <uxr_write_framed_msg+0xd4>
 80120a4:	0801a4fc 	.word	0x0801a4fc

080120a8 <uxr_framing_read_transport>:
 80120a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120ac:	4604      	mov	r4, r0
 80120ae:	b083      	sub	sp, #12
 80120b0:	461f      	mov	r7, r3
 80120b2:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 80120b6:	4689      	mov	r9, r1
 80120b8:	4692      	mov	sl, r2
 80120ba:	f000 fc89 	bl	80129d0 <uxr_millis>
 80120be:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80120c2:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80120c6:	42b3      	cmp	r3, r6
 80120c8:	4680      	mov	r8, r0
 80120ca:	d061      	beq.n	8012190 <uxr_framing_read_transport+0xe8>
 80120cc:	d81c      	bhi.n	8012108 <uxr_framing_read_transport+0x60>
 80120ce:	1e75      	subs	r5, r6, #1
 80120d0:	1aed      	subs	r5, r5, r3
 80120d2:	b2ed      	uxtb	r5, r5
 80120d4:	2600      	movs	r6, #0
 80120d6:	455d      	cmp	r5, fp
 80120d8:	d81f      	bhi.n	801211a <uxr_framing_read_transport+0x72>
 80120da:	19ab      	adds	r3, r5, r6
 80120dc:	455b      	cmp	r3, fp
 80120de:	bf84      	itt	hi
 80120e0:	ebab 0605 	subhi.w	r6, fp, r5
 80120e4:	b2f6      	uxtbhi	r6, r6
 80120e6:	b9ed      	cbnz	r5, 8012124 <uxr_framing_read_transport+0x7c>
 80120e8:	f04f 0b00 	mov.w	fp, #0
 80120ec:	f000 fc70 	bl	80129d0 <uxr_millis>
 80120f0:	683b      	ldr	r3, [r7, #0]
 80120f2:	eba0 0808 	sub.w	r8, r0, r8
 80120f6:	eba3 0308 	sub.w	r3, r3, r8
 80120fa:	4658      	mov	r0, fp
 80120fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012100:	603b      	str	r3, [r7, #0]
 8012102:	b003      	add	sp, #12
 8012104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012108:	2e00      	cmp	r6, #0
 801210a:	d049      	beq.n	80121a0 <uxr_framing_read_transport+0xf8>
 801210c:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8012110:	b2ed      	uxtb	r5, r5
 8012112:	3e01      	subs	r6, #1
 8012114:	455d      	cmp	r5, fp
 8012116:	b2f6      	uxtb	r6, r6
 8012118:	d9df      	bls.n	80120da <uxr_framing_read_transport+0x32>
 801211a:	fa5f f58b 	uxtb.w	r5, fp
 801211e:	2600      	movs	r6, #0
 8012120:	2d00      	cmp	r5, #0
 8012122:	d0e1      	beq.n	80120e8 <uxr_framing_read_transport+0x40>
 8012124:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012128:	3102      	adds	r1, #2
 801212a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801212c:	9300      	str	r3, [sp, #0]
 801212e:	683b      	ldr	r3, [r7, #0]
 8012130:	4421      	add	r1, r4
 8012132:	462a      	mov	r2, r5
 8012134:	4650      	mov	r0, sl
 8012136:	47c8      	blx	r9
 8012138:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801213c:	4a1a      	ldr	r2, [pc, #104]	@ (80121a8 <uxr_framing_read_transport+0x100>)
 801213e:	4403      	add	r3, r0
 8012140:	0859      	lsrs	r1, r3, #1
 8012142:	fba2 2101 	umull	r2, r1, r2, r1
 8012146:	0889      	lsrs	r1, r1, #2
 8012148:	222a      	movs	r2, #42	@ 0x2a
 801214a:	fb02 3111 	mls	r1, r2, r1, r3
 801214e:	4683      	mov	fp, r0
 8012150:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8012154:	2800      	cmp	r0, #0
 8012156:	d0c7      	beq.n	80120e8 <uxr_framing_read_transport+0x40>
 8012158:	42a8      	cmp	r0, r5
 801215a:	d1c7      	bne.n	80120ec <uxr_framing_read_transport+0x44>
 801215c:	2e00      	cmp	r6, #0
 801215e:	d0c5      	beq.n	80120ec <uxr_framing_read_transport+0x44>
 8012160:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012162:	9300      	str	r3, [sp, #0]
 8012164:	3102      	adds	r1, #2
 8012166:	4632      	mov	r2, r6
 8012168:	4421      	add	r1, r4
 801216a:	2300      	movs	r3, #0
 801216c:	4650      	mov	r0, sl
 801216e:	47c8      	blx	r9
 8012170:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012174:	4a0c      	ldr	r2, [pc, #48]	@ (80121a8 <uxr_framing_read_transport+0x100>)
 8012176:	180b      	adds	r3, r1, r0
 8012178:	0859      	lsrs	r1, r3, #1
 801217a:	fba2 1201 	umull	r1, r2, r2, r1
 801217e:	0892      	lsrs	r2, r2, #2
 8012180:	212a      	movs	r1, #42	@ 0x2a
 8012182:	fb01 3312 	mls	r3, r1, r2, r3
 8012186:	eb00 0b05 	add.w	fp, r0, r5
 801218a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801218e:	e7ad      	b.n	80120ec <uxr_framing_read_transport+0x44>
 8012190:	2600      	movs	r6, #0
 8012192:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8012196:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8012198:	d9bf      	bls.n	801211a <uxr_framing_read_transport+0x72>
 801219a:	2102      	movs	r1, #2
 801219c:	2529      	movs	r5, #41	@ 0x29
 801219e:	e7c4      	b.n	801212a <uxr_framing_read_transport+0x82>
 80121a0:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 80121a4:	b2ed      	uxtb	r5, r5
 80121a6:	e796      	b.n	80120d6 <uxr_framing_read_transport+0x2e>
 80121a8:	30c30c31 	.word	0x30c30c31

080121ac <uxr_read_framed_msg>:
 80121ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121b0:	461e      	mov	r6, r3
 80121b2:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80121b6:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80121ba:	429d      	cmp	r5, r3
 80121bc:	b083      	sub	sp, #12
 80121be:	4604      	mov	r4, r0
 80121c0:	4688      	mov	r8, r1
 80121c2:	4691      	mov	r9, r2
 80121c4:	f000 8188 	beq.w	80124d8 <uxr_read_framed_msg+0x32c>
 80121c8:	7823      	ldrb	r3, [r4, #0]
 80121ca:	4dc1      	ldr	r5, [pc, #772]	@ (80124d0 <uxr_read_framed_msg+0x324>)
 80121cc:	4fc1      	ldr	r7, [pc, #772]	@ (80124d4 <uxr_read_framed_msg+0x328>)
 80121ce:	2b07      	cmp	r3, #7
 80121d0:	d8fd      	bhi.n	80121ce <uxr_read_framed_msg+0x22>
 80121d2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80121d6:	0115      	.short	0x0115
 80121d8:	00d600f6 	.word	0x00d600f6
 80121dc:	009000b9 	.word	0x009000b9
 80121e0:	0030004d 	.word	0x0030004d
 80121e4:	0008      	.short	0x0008
 80121e6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80121ea:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80121ee:	4299      	cmp	r1, r3
 80121f0:	f000 814a 	beq.w	8012488 <uxr_read_framed_msg+0x2dc>
 80121f4:	18e2      	adds	r2, r4, r3
 80121f6:	7892      	ldrb	r2, [r2, #2]
 80121f8:	2a7d      	cmp	r2, #125	@ 0x7d
 80121fa:	f000 8199 	beq.w	8012530 <uxr_read_framed_msg+0x384>
 80121fe:	3301      	adds	r3, #1
 8012200:	0858      	lsrs	r0, r3, #1
 8012202:	fba5 1000 	umull	r1, r0, r5, r0
 8012206:	0880      	lsrs	r0, r0, #2
 8012208:	212a      	movs	r1, #42	@ 0x2a
 801220a:	fb01 3310 	mls	r3, r1, r0, r3
 801220e:	2a7e      	cmp	r2, #126	@ 0x7e
 8012210:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012214:	f000 8252 	beq.w	80126bc <uxr_read_framed_msg+0x510>
 8012218:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801221a:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801221c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012220:	b29b      	uxth	r3, r3
 8012222:	2200      	movs	r2, #0
 8012224:	4299      	cmp	r1, r3
 8012226:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8012228:	7022      	strb	r2, [r4, #0]
 801222a:	f000 8179 	beq.w	8012520 <uxr_read_framed_msg+0x374>
 801222e:	2000      	movs	r0, #0
 8012230:	b003      	add	sp, #12
 8012232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012236:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801223a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801223e:	4299      	cmp	r1, r3
 8012240:	f000 8131 	beq.w	80124a6 <uxr_read_framed_msg+0x2fa>
 8012244:	18e2      	adds	r2, r4, r3
 8012246:	7890      	ldrb	r0, [r2, #2]
 8012248:	287d      	cmp	r0, #125	@ 0x7d
 801224a:	f000 8190 	beq.w	801256e <uxr_read_framed_msg+0x3c2>
 801224e:	3301      	adds	r3, #1
 8012250:	085a      	lsrs	r2, r3, #1
 8012252:	fba5 1202 	umull	r1, r2, r5, r2
 8012256:	0892      	lsrs	r2, r2, #2
 8012258:	212a      	movs	r1, #42	@ 0x2a
 801225a:	fb01 3312 	mls	r3, r1, r2, r3
 801225e:	287e      	cmp	r0, #126	@ 0x7e
 8012260:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012264:	f000 821a 	beq.w	801269c <uxr_read_framed_msg+0x4f0>
 8012268:	2307      	movs	r3, #7
 801226a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 801226c:	7023      	strb	r3, [r4, #0]
 801226e:	e7ae      	b.n	80121ce <uxr_read_framed_msg+0x22>
 8012270:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012272:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012276:	459e      	cmp	lr, r3
 8012278:	d938      	bls.n	80122ec <uxr_read_framed_msg+0x140>
 801227a:	ee07 8a90 	vmov	s15, r8
 801227e:	212a      	movs	r1, #42	@ 0x2a
 8012280:	e020      	b.n	80122c4 <uxr_read_framed_msg+0x118>
 8012282:	f89b c002 	ldrb.w	ip, [fp, #2]
 8012286:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801228a:	f000 80d4 	beq.w	8012436 <uxr_read_framed_msg+0x28a>
 801228e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012292:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012296:	f000 8219 	beq.w	80126cc <uxr_read_framed_msg+0x520>
 801229a:	f806 c003 	strb.w	ip, [r6, r3]
 801229e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 80122a2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80122a4:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80122a8:	ea8a 000c 	eor.w	r0, sl, ip
 80122ac:	b2c0      	uxtb	r0, r0
 80122ae:	3301      	adds	r3, #1
 80122b0:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 80122b4:	b29b      	uxth	r3, r3
 80122b6:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 80122ba:	4573      	cmp	r3, lr
 80122bc:	8663      	strh	r3, [r4, #50]	@ 0x32
 80122be:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80122c0:	f080 8120 	bcs.w	8012504 <uxr_read_framed_msg+0x358>
 80122c4:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80122c8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80122cc:	f100 0c01 	add.w	ip, r0, #1
 80122d0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80122d4:	fba5 8202 	umull	r8, r2, r5, r2
 80122d8:	0892      	lsrs	r2, r2, #2
 80122da:	4582      	cmp	sl, r0
 80122dc:	eb04 0b00 	add.w	fp, r4, r0
 80122e0:	fb01 c212 	mls	r2, r1, r2, ip
 80122e4:	d1cd      	bne.n	8012282 <uxr_read_framed_msg+0xd6>
 80122e6:	ee17 8a90 	vmov	r8, s15
 80122ea:	459e      	cmp	lr, r3
 80122ec:	f040 8111 	bne.w	8012512 <uxr_read_framed_msg+0x366>
 80122f0:	2306      	movs	r3, #6
 80122f2:	7023      	strb	r3, [r4, #0]
 80122f4:	e76b      	b.n	80121ce <uxr_read_framed_msg+0x22>
 80122f6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80122fa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80122fe:	4298      	cmp	r0, r3
 8012300:	f000 80c2 	beq.w	8012488 <uxr_read_framed_msg+0x2dc>
 8012304:	18e2      	adds	r2, r4, r3
 8012306:	7891      	ldrb	r1, [r2, #2]
 8012308:	297d      	cmp	r1, #125	@ 0x7d
 801230a:	f000 814c 	beq.w	80125a6 <uxr_read_framed_msg+0x3fa>
 801230e:	3301      	adds	r3, #1
 8012310:	085a      	lsrs	r2, r3, #1
 8012312:	fba5 0202 	umull	r0, r2, r5, r2
 8012316:	0892      	lsrs	r2, r2, #2
 8012318:	202a      	movs	r0, #42	@ 0x2a
 801231a:	fb00 3312 	mls	r3, r0, r2, r3
 801231e:	297e      	cmp	r1, #126	@ 0x7e
 8012320:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012324:	f000 81ca 	beq.w	80126bc <uxr_read_framed_msg+0x510>
 8012328:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801232a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801232e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012330:	b29b      	uxth	r3, r3
 8012332:	2000      	movs	r0, #0
 8012334:	428b      	cmp	r3, r1
 8012336:	8623      	strh	r3, [r4, #48]	@ 0x30
 8012338:	8660      	strh	r0, [r4, #50]	@ 0x32
 801233a:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801233c:	f240 80df 	bls.w	80124fe <uxr_read_framed_msg+0x352>
 8012340:	7020      	strb	r0, [r4, #0]
 8012342:	b003      	add	sp, #12
 8012344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012348:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801234c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012350:	4299      	cmp	r1, r3
 8012352:	f000 80a8 	beq.w	80124a6 <uxr_read_framed_msg+0x2fa>
 8012356:	18e2      	adds	r2, r4, r3
 8012358:	7890      	ldrb	r0, [r2, #2]
 801235a:	287d      	cmp	r0, #125	@ 0x7d
 801235c:	f000 8164 	beq.w	8012628 <uxr_read_framed_msg+0x47c>
 8012360:	3301      	adds	r3, #1
 8012362:	085a      	lsrs	r2, r3, #1
 8012364:	fba5 1202 	umull	r1, r2, r5, r2
 8012368:	0892      	lsrs	r2, r2, #2
 801236a:	212a      	movs	r1, #42	@ 0x2a
 801236c:	fb01 3312 	mls	r3, r1, r2, r3
 8012370:	287e      	cmp	r0, #126	@ 0x7e
 8012372:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012376:	f000 8191 	beq.w	801269c <uxr_read_framed_msg+0x4f0>
 801237a:	2304      	movs	r3, #4
 801237c:	8620      	strh	r0, [r4, #48]	@ 0x30
 801237e:	7023      	strb	r3, [r4, #0]
 8012380:	e725      	b.n	80121ce <uxr_read_framed_msg+0x22>
 8012382:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012386:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801238a:	4290      	cmp	r0, r2
 801238c:	f000 80b3 	beq.w	80124f6 <uxr_read_framed_msg+0x34a>
 8012390:	18a3      	adds	r3, r4, r2
 8012392:	7899      	ldrb	r1, [r3, #2]
 8012394:	297d      	cmp	r1, #125	@ 0x7d
 8012396:	f000 8164 	beq.w	8012662 <uxr_read_framed_msg+0x4b6>
 801239a:	3201      	adds	r2, #1
 801239c:	0850      	lsrs	r0, r2, #1
 801239e:	fba5 3000 	umull	r3, r0, r5, r0
 80123a2:	0880      	lsrs	r0, r0, #2
 80123a4:	232a      	movs	r3, #42	@ 0x2a
 80123a6:	fb03 2210 	mls	r2, r3, r0, r2
 80123aa:	297e      	cmp	r1, #126	@ 0x7e
 80123ac:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80123b0:	f000 8188 	beq.w	80126c4 <uxr_read_framed_msg+0x518>
 80123b4:	7863      	ldrb	r3, [r4, #1]
 80123b6:	428b      	cmp	r3, r1
 80123b8:	bf0c      	ite	eq
 80123ba:	2303      	moveq	r3, #3
 80123bc:	2300      	movne	r3, #0
 80123be:	7023      	strb	r3, [r4, #0]
 80123c0:	e705      	b.n	80121ce <uxr_read_framed_msg+0x22>
 80123c2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80123c6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80123ca:	2200      	movs	r2, #0
 80123cc:	4299      	cmp	r1, r3
 80123ce:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80123d2:	d06c      	beq.n	80124ae <uxr_read_framed_msg+0x302>
 80123d4:	18e2      	adds	r2, r4, r3
 80123d6:	7890      	ldrb	r0, [r2, #2]
 80123d8:	287d      	cmp	r0, #125	@ 0x7d
 80123da:	f000 8101 	beq.w	80125e0 <uxr_read_framed_msg+0x434>
 80123de:	3301      	adds	r3, #1
 80123e0:	085a      	lsrs	r2, r3, #1
 80123e2:	fba5 1202 	umull	r1, r2, r5, r2
 80123e6:	0892      	lsrs	r2, r2, #2
 80123e8:	212a      	movs	r1, #42	@ 0x2a
 80123ea:	fb01 3312 	mls	r3, r1, r2, r3
 80123ee:	287e      	cmp	r0, #126	@ 0x7e
 80123f0:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80123f4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80123f8:	d059      	beq.n	80124ae <uxr_read_framed_msg+0x302>
 80123fa:	2302      	movs	r3, #2
 80123fc:	7023      	strb	r3, [r4, #0]
 80123fe:	e6e6      	b.n	80121ce <uxr_read_framed_msg+0x22>
 8012400:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8012404:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012408:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 801240c:	1c51      	adds	r1, r2, #1
 801240e:	084b      	lsrs	r3, r1, #1
 8012410:	fba5 c303 	umull	ip, r3, r5, r3
 8012414:	089b      	lsrs	r3, r3, #2
 8012416:	fb0e 1313 	mls	r3, lr, r3, r1
 801241a:	4592      	cmp	sl, r2
 801241c:	eb04 0002 	add.w	r0, r4, r2
 8012420:	b2da      	uxtb	r2, r3
 8012422:	f43f af04 	beq.w	801222e <uxr_read_framed_msg+0x82>
 8012426:	7883      	ldrb	r3, [r0, #2]
 8012428:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801242c:	2b7e      	cmp	r3, #126	@ 0x7e
 801242e:	d1ed      	bne.n	801240c <uxr_read_framed_msg+0x260>
 8012430:	2301      	movs	r3, #1
 8012432:	7023      	strb	r3, [r4, #0]
 8012434:	e6cb      	b.n	80121ce <uxr_read_framed_msg+0x22>
 8012436:	f100 0c01 	add.w	ip, r0, #1
 801243a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801243e:	fba5 8202 	umull	r8, r2, r5, r2
 8012442:	0892      	lsrs	r2, r2, #2
 8012444:	fb01 c212 	mls	r2, r1, r2, ip
 8012448:	eb04 0c02 	add.w	ip, r4, r2
 801244c:	b2d2      	uxtb	r2, r2
 801244e:	4592      	cmp	sl, r2
 8012450:	f100 0002 	add.w	r0, r0, #2
 8012454:	f43f af47 	beq.w	80122e6 <uxr_read_framed_msg+0x13a>
 8012458:	0842      	lsrs	r2, r0, #1
 801245a:	f89c a002 	ldrb.w	sl, [ip, #2]
 801245e:	fba5 8202 	umull	r8, r2, r5, r2
 8012462:	0892      	lsrs	r2, r2, #2
 8012464:	fb01 0012 	mls	r0, r1, r2, r0
 8012468:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 801246c:	f08a 0c20 	eor.w	ip, sl, #32
 8012470:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8012474:	f47f af11 	bne.w	801229a <uxr_read_framed_msg+0xee>
 8012478:	459e      	cmp	lr, r3
 801247a:	ee17 8a90 	vmov	r8, s15
 801247e:	f43f af37 	beq.w	80122f0 <uxr_read_framed_msg+0x144>
 8012482:	2301      	movs	r3, #1
 8012484:	7023      	strb	r3, [r4, #0]
 8012486:	e6a2      	b.n	80121ce <uxr_read_framed_msg+0x22>
 8012488:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801248a:	9300      	str	r3, [sp, #0]
 801248c:	2301      	movs	r3, #1
 801248e:	9301      	str	r3, [sp, #4]
 8012490:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012492:	464a      	mov	r2, r9
 8012494:	4641      	mov	r1, r8
 8012496:	4620      	mov	r0, r4
 8012498:	f7ff fe06 	bl	80120a8 <uxr_framing_read_transport>
 801249c:	2800      	cmp	r0, #0
 801249e:	f43f aec6 	beq.w	801222e <uxr_read_framed_msg+0x82>
 80124a2:	7823      	ldrb	r3, [r4, #0]
 80124a4:	e693      	b.n	80121ce <uxr_read_framed_msg+0x22>
 80124a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80124a8:	9300      	str	r3, [sp, #0]
 80124aa:	2302      	movs	r3, #2
 80124ac:	e7ef      	b.n	801248e <uxr_read_framed_msg+0x2e2>
 80124ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80124b0:	9300      	str	r3, [sp, #0]
 80124b2:	2304      	movs	r3, #4
 80124b4:	9301      	str	r3, [sp, #4]
 80124b6:	464a      	mov	r2, r9
 80124b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80124ba:	4641      	mov	r1, r8
 80124bc:	4620      	mov	r0, r4
 80124be:	f7ff fdf3 	bl	80120a8 <uxr_framing_read_transport>
 80124c2:	2800      	cmp	r0, #0
 80124c4:	d1ed      	bne.n	80124a2 <uxr_read_framed_msg+0x2f6>
 80124c6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80124ca:	2b7e      	cmp	r3, #126	@ 0x7e
 80124cc:	d0e9      	beq.n	80124a2 <uxr_read_framed_msg+0x2f6>
 80124ce:	e6ae      	b.n	801222e <uxr_read_framed_msg+0x82>
 80124d0:	30c30c31 	.word	0x30c30c31
 80124d4:	0801a4fc 	.word	0x0801a4fc
 80124d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80124da:	9300      	str	r3, [sp, #0]
 80124dc:	2305      	movs	r3, #5
 80124de:	9301      	str	r3, [sp, #4]
 80124e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80124e2:	f7ff fde1 	bl	80120a8 <uxr_framing_read_transport>
 80124e6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80124ea:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80124ee:	429a      	cmp	r2, r3
 80124f0:	f43f ae9d 	beq.w	801222e <uxr_read_framed_msg+0x82>
 80124f4:	e668      	b.n	80121c8 <uxr_read_framed_msg+0x1c>
 80124f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80124f8:	9300      	str	r3, [sp, #0]
 80124fa:	2303      	movs	r3, #3
 80124fc:	e7c7      	b.n	801248e <uxr_read_framed_msg+0x2e2>
 80124fe:	2305      	movs	r3, #5
 8012500:	7023      	strb	r3, [r4, #0]
 8012502:	e664      	b.n	80121ce <uxr_read_framed_msg+0x22>
 8012504:	ee17 8a90 	vmov	r8, s15
 8012508:	f43f aef2 	beq.w	80122f0 <uxr_read_framed_msg+0x144>
 801250c:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012510:	d08e      	beq.n	8012430 <uxr_read_framed_msg+0x284>
 8012512:	ebae 0303 	sub.w	r3, lr, r3
 8012516:	3302      	adds	r3, #2
 8012518:	9301      	str	r3, [sp, #4]
 801251a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801251c:	9300      	str	r3, [sp, #0]
 801251e:	e7b7      	b.n	8012490 <uxr_read_framed_msg+0x2e4>
 8012520:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012522:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012526:	7013      	strb	r3, [r2, #0]
 8012528:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801252a:	b003      	add	sp, #12
 801252c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012530:	f103 0c01 	add.w	ip, r3, #1
 8012534:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012538:	fba5 0202 	umull	r0, r2, r5, r2
 801253c:	0892      	lsrs	r2, r2, #2
 801253e:	202a      	movs	r0, #42	@ 0x2a
 8012540:	fb00 c212 	mls	r2, r0, r2, ip
 8012544:	fa5f fc82 	uxtb.w	ip, r2
 8012548:	4561      	cmp	r1, ip
 801254a:	d09d      	beq.n	8012488 <uxr_read_framed_msg+0x2dc>
 801254c:	3302      	adds	r3, #2
 801254e:	4422      	add	r2, r4
 8012550:	0859      	lsrs	r1, r3, #1
 8012552:	7892      	ldrb	r2, [r2, #2]
 8012554:	fba5 c101 	umull	ip, r1, r5, r1
 8012558:	0889      	lsrs	r1, r1, #2
 801255a:	fb00 3311 	mls	r3, r0, r1, r3
 801255e:	2a7e      	cmp	r2, #126	@ 0x7e
 8012560:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012564:	f000 80aa 	beq.w	80126bc <uxr_read_framed_msg+0x510>
 8012568:	f082 0220 	eor.w	r2, r2, #32
 801256c:	e654      	b.n	8012218 <uxr_read_framed_msg+0x6c>
 801256e:	1c58      	adds	r0, r3, #1
 8012570:	0842      	lsrs	r2, r0, #1
 8012572:	fba5 c202 	umull	ip, r2, r5, r2
 8012576:	0892      	lsrs	r2, r2, #2
 8012578:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801257c:	fb0c 0212 	mls	r2, ip, r2, r0
 8012580:	b2d0      	uxtb	r0, r2
 8012582:	4281      	cmp	r1, r0
 8012584:	d08f      	beq.n	80124a6 <uxr_read_framed_msg+0x2fa>
 8012586:	4422      	add	r2, r4
 8012588:	3302      	adds	r3, #2
 801258a:	7890      	ldrb	r0, [r2, #2]
 801258c:	085a      	lsrs	r2, r3, #1
 801258e:	fba5 1202 	umull	r1, r2, r5, r2
 8012592:	0892      	lsrs	r2, r2, #2
 8012594:	fb0c 3312 	mls	r3, ip, r2, r3
 8012598:	287e      	cmp	r0, #126	@ 0x7e
 801259a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801259e:	d07d      	beq.n	801269c <uxr_read_framed_msg+0x4f0>
 80125a0:	f080 0020 	eor.w	r0, r0, #32
 80125a4:	e660      	b.n	8012268 <uxr_read_framed_msg+0xbc>
 80125a6:	1c59      	adds	r1, r3, #1
 80125a8:	084a      	lsrs	r2, r1, #1
 80125aa:	fba5 c202 	umull	ip, r2, r5, r2
 80125ae:	0892      	lsrs	r2, r2, #2
 80125b0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80125b4:	fb0c 1212 	mls	r2, ip, r2, r1
 80125b8:	b2d1      	uxtb	r1, r2
 80125ba:	4288      	cmp	r0, r1
 80125bc:	f43f af64 	beq.w	8012488 <uxr_read_framed_msg+0x2dc>
 80125c0:	4422      	add	r2, r4
 80125c2:	3302      	adds	r3, #2
 80125c4:	7891      	ldrb	r1, [r2, #2]
 80125c6:	085a      	lsrs	r2, r3, #1
 80125c8:	fba5 0202 	umull	r0, r2, r5, r2
 80125cc:	0892      	lsrs	r2, r2, #2
 80125ce:	fb0c 3312 	mls	r3, ip, r2, r3
 80125d2:	297e      	cmp	r1, #126	@ 0x7e
 80125d4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80125d8:	d070      	beq.n	80126bc <uxr_read_framed_msg+0x510>
 80125da:	f081 0120 	eor.w	r1, r1, #32
 80125de:	e6a3      	b.n	8012328 <uxr_read_framed_msg+0x17c>
 80125e0:	f103 0c01 	add.w	ip, r3, #1
 80125e4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80125e8:	fba5 0202 	umull	r0, r2, r5, r2
 80125ec:	0892      	lsrs	r2, r2, #2
 80125ee:	202a      	movs	r0, #42	@ 0x2a
 80125f0:	fb00 c212 	mls	r2, r0, r2, ip
 80125f4:	fa5f fc82 	uxtb.w	ip, r2
 80125f8:	4561      	cmp	r1, ip
 80125fa:	f43f af58 	beq.w	80124ae <uxr_read_framed_msg+0x302>
 80125fe:	4422      	add	r2, r4
 8012600:	3302      	adds	r3, #2
 8012602:	7891      	ldrb	r1, [r2, #2]
 8012604:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8012608:	085a      	lsrs	r2, r3, #1
 801260a:	fba5 c202 	umull	ip, r2, r5, r2
 801260e:	0892      	lsrs	r2, r2, #2
 8012610:	fb00 3312 	mls	r3, r0, r2, r3
 8012614:	297e      	cmp	r1, #126	@ 0x7e
 8012616:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801261a:	f43f af48 	beq.w	80124ae <uxr_read_framed_msg+0x302>
 801261e:	f081 0120 	eor.w	r1, r1, #32
 8012622:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8012626:	e6e8      	b.n	80123fa <uxr_read_framed_msg+0x24e>
 8012628:	1c58      	adds	r0, r3, #1
 801262a:	0842      	lsrs	r2, r0, #1
 801262c:	fba5 c202 	umull	ip, r2, r5, r2
 8012630:	0892      	lsrs	r2, r2, #2
 8012632:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012636:	fb0c 0212 	mls	r2, ip, r2, r0
 801263a:	b2d0      	uxtb	r0, r2
 801263c:	4281      	cmp	r1, r0
 801263e:	f43f af32 	beq.w	80124a6 <uxr_read_framed_msg+0x2fa>
 8012642:	4422      	add	r2, r4
 8012644:	3302      	adds	r3, #2
 8012646:	7890      	ldrb	r0, [r2, #2]
 8012648:	085a      	lsrs	r2, r3, #1
 801264a:	fba5 1202 	umull	r1, r2, r5, r2
 801264e:	0892      	lsrs	r2, r2, #2
 8012650:	fb0c 3312 	mls	r3, ip, r2, r3
 8012654:	287e      	cmp	r0, #126	@ 0x7e
 8012656:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801265a:	d01f      	beq.n	801269c <uxr_read_framed_msg+0x4f0>
 801265c:	f080 0020 	eor.w	r0, r0, #32
 8012660:	e68b      	b.n	801237a <uxr_read_framed_msg+0x1ce>
 8012662:	1c51      	adds	r1, r2, #1
 8012664:	084b      	lsrs	r3, r1, #1
 8012666:	fba5 c303 	umull	ip, r3, r5, r3
 801266a:	089b      	lsrs	r3, r3, #2
 801266c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012670:	fb0c 1313 	mls	r3, ip, r3, r1
 8012674:	b2d9      	uxtb	r1, r3
 8012676:	4288      	cmp	r0, r1
 8012678:	f43f af3d 	beq.w	80124f6 <uxr_read_framed_msg+0x34a>
 801267c:	3202      	adds	r2, #2
 801267e:	4423      	add	r3, r4
 8012680:	0850      	lsrs	r0, r2, #1
 8012682:	789b      	ldrb	r3, [r3, #2]
 8012684:	fba5 1000 	umull	r1, r0, r5, r0
 8012688:	0880      	lsrs	r0, r0, #2
 801268a:	fb0c 2210 	mls	r2, ip, r0, r2
 801268e:	2b7e      	cmp	r3, #126	@ 0x7e
 8012690:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012694:	d016      	beq.n	80126c4 <uxr_read_framed_msg+0x518>
 8012696:	f083 0120 	eor.w	r1, r3, #32
 801269a:	e68b      	b.n	80123b4 <uxr_read_framed_msg+0x208>
 801269c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801269e:	9300      	str	r3, [sp, #0]
 80126a0:	2302      	movs	r3, #2
 80126a2:	9301      	str	r3, [sp, #4]
 80126a4:	464a      	mov	r2, r9
 80126a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80126a8:	4641      	mov	r1, r8
 80126aa:	4620      	mov	r0, r4
 80126ac:	f7ff fcfc 	bl	80120a8 <uxr_framing_read_transport>
 80126b0:	2800      	cmp	r0, #0
 80126b2:	f47f aef6 	bne.w	80124a2 <uxr_read_framed_msg+0x2f6>
 80126b6:	2301      	movs	r3, #1
 80126b8:	7023      	strb	r3, [r4, #0]
 80126ba:	e588      	b.n	80121ce <uxr_read_framed_msg+0x22>
 80126bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80126be:	9300      	str	r3, [sp, #0]
 80126c0:	2301      	movs	r3, #1
 80126c2:	e7ee      	b.n	80126a2 <uxr_read_framed_msg+0x4f6>
 80126c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80126c6:	9300      	str	r3, [sp, #0]
 80126c8:	2303      	movs	r3, #3
 80126ca:	e7ea      	b.n	80126a2 <uxr_read_framed_msg+0x4f6>
 80126cc:	ee17 8a90 	vmov	r8, s15
 80126d0:	e6ae      	b.n	8012430 <uxr_read_framed_msg+0x284>
 80126d2:	bf00      	nop

080126d4 <uxr_stream_id>:
 80126d4:	2901      	cmp	r1, #1
 80126d6:	b082      	sub	sp, #8
 80126d8:	d01d      	beq.n	8012716 <uxr_stream_id+0x42>
 80126da:	2902      	cmp	r1, #2
 80126dc:	f04f 0c00 	mov.w	ip, #0
 80126e0:	d01e      	beq.n	8012720 <uxr_stream_id+0x4c>
 80126e2:	2300      	movs	r3, #0
 80126e4:	f36c 0307 	bfi	r3, ip, #0, #8
 80126e8:	f360 230f 	bfi	r3, r0, #8, #8
 80126ec:	f361 4317 	bfi	r3, r1, #16, #8
 80126f0:	f362 631f 	bfi	r3, r2, #24, #8
 80126f4:	b2da      	uxtb	r2, r3
 80126f6:	2000      	movs	r0, #0
 80126f8:	f362 0007 	bfi	r0, r2, #0, #8
 80126fc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012700:	f362 200f 	bfi	r0, r2, #8, #8
 8012704:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012708:	f362 4017 	bfi	r0, r2, #16, #8
 801270c:	0e1b      	lsrs	r3, r3, #24
 801270e:	f363 601f 	bfi	r0, r3, #24, #8
 8012712:	b002      	add	sp, #8
 8012714:	4770      	bx	lr
 8012716:	f100 0c01 	add.w	ip, r0, #1
 801271a:	fa5f fc8c 	uxtb.w	ip, ip
 801271e:	e7e0      	b.n	80126e2 <uxr_stream_id+0xe>
 8012720:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8012724:	e7dd      	b.n	80126e2 <uxr_stream_id+0xe>
 8012726:	bf00      	nop

08012728 <uxr_stream_id_from_raw>:
 8012728:	b082      	sub	sp, #8
 801272a:	b130      	cbz	r0, 801273a <uxr_stream_id_from_raw+0x12>
 801272c:	0603      	lsls	r3, r0, #24
 801272e:	d420      	bmi.n	8012772 <uxr_stream_id_from_raw+0x4a>
 8012730:	1e42      	subs	r2, r0, #1
 8012732:	b2d2      	uxtb	r2, r2
 8012734:	f04f 0c01 	mov.w	ip, #1
 8012738:	e001      	b.n	801273e <uxr_stream_id_from_raw+0x16>
 801273a:	4684      	mov	ip, r0
 801273c:	4602      	mov	r2, r0
 801273e:	2300      	movs	r3, #0
 8012740:	f360 0307 	bfi	r3, r0, #0, #8
 8012744:	f362 230f 	bfi	r3, r2, #8, #8
 8012748:	f36c 4317 	bfi	r3, ip, #16, #8
 801274c:	f361 631f 	bfi	r3, r1, #24, #8
 8012750:	b2da      	uxtb	r2, r3
 8012752:	2000      	movs	r0, #0
 8012754:	f362 0007 	bfi	r0, r2, #0, #8
 8012758:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801275c:	f362 200f 	bfi	r0, r2, #8, #8
 8012760:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012764:	f362 4017 	bfi	r0, r2, #16, #8
 8012768:	0e1b      	lsrs	r3, r3, #24
 801276a:	f363 601f 	bfi	r0, r3, #24, #8
 801276e:	b002      	add	sp, #8
 8012770:	4770      	bx	lr
 8012772:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8012776:	f04f 0c02 	mov.w	ip, #2
 801277a:	e7e0      	b.n	801273e <uxr_stream_id_from_raw+0x16>

0801277c <uxr_init_stream_storage>:
 801277c:	2300      	movs	r3, #0
 801277e:	7403      	strb	r3, [r0, #16]
 8012780:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8012784:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8012788:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801278c:	4770      	bx	lr
 801278e:	bf00      	nop

08012790 <uxr_reset_stream_storage>:
 8012790:	b570      	push	{r4, r5, r6, lr}
 8012792:	7c03      	ldrb	r3, [r0, #16]
 8012794:	4604      	mov	r4, r0
 8012796:	b153      	cbz	r3, 80127ae <uxr_reset_stream_storage+0x1e>
 8012798:	4606      	mov	r6, r0
 801279a:	2500      	movs	r5, #0
 801279c:	4630      	mov	r0, r6
 801279e:	f005 f8f3 	bl	8017988 <uxr_reset_output_best_effort_stream>
 80127a2:	7c23      	ldrb	r3, [r4, #16]
 80127a4:	3501      	adds	r5, #1
 80127a6:	42ab      	cmp	r3, r5
 80127a8:	f106 0610 	add.w	r6, r6, #16
 80127ac:	d8f6      	bhi.n	801279c <uxr_reset_stream_storage+0xc>
 80127ae:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80127b2:	b163      	cbz	r3, 80127ce <uxr_reset_stream_storage+0x3e>
 80127b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80127b8:	2500      	movs	r5, #0
 80127ba:	4630      	mov	r0, r6
 80127bc:	f004 fee6 	bl	801758c <uxr_reset_input_best_effort_stream>
 80127c0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80127c4:	3501      	adds	r5, #1
 80127c6:	42ab      	cmp	r3, r5
 80127c8:	f106 0602 	add.w	r6, r6, #2
 80127cc:	d8f5      	bhi.n	80127ba <uxr_reset_stream_storage+0x2a>
 80127ce:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80127d2:	b163      	cbz	r3, 80127ee <uxr_reset_stream_storage+0x5e>
 80127d4:	f104 0618 	add.w	r6, r4, #24
 80127d8:	2500      	movs	r5, #0
 80127da:	4630      	mov	r0, r6
 80127dc:	f005 f980 	bl	8017ae0 <uxr_reset_output_reliable_stream>
 80127e0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80127e4:	3501      	adds	r5, #1
 80127e6:	42ab      	cmp	r3, r5
 80127e8:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80127ec:	d8f5      	bhi.n	80127da <uxr_reset_stream_storage+0x4a>
 80127ee:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80127f2:	b163      	cbz	r3, 801280e <uxr_reset_stream_storage+0x7e>
 80127f4:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80127f8:	2500      	movs	r5, #0
 80127fa:	4630      	mov	r0, r6
 80127fc:	f004 ff3a 	bl	8017674 <uxr_reset_input_reliable_stream>
 8012800:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012804:	3501      	adds	r5, #1
 8012806:	42ab      	cmp	r3, r5
 8012808:	f106 0618 	add.w	r6, r6, #24
 801280c:	d8f5      	bhi.n	80127fa <uxr_reset_stream_storage+0x6a>
 801280e:	bd70      	pop	{r4, r5, r6, pc}

08012810 <uxr_add_output_best_effort_buffer>:
 8012810:	b510      	push	{r4, lr}
 8012812:	7c04      	ldrb	r4, [r0, #16]
 8012814:	f104 0c01 	add.w	ip, r4, #1
 8012818:	b082      	sub	sp, #8
 801281a:	f880 c010 	strb.w	ip, [r0, #16]
 801281e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8012822:	f005 f8a7 	bl	8017974 <uxr_init_output_best_effort_stream>
 8012826:	2201      	movs	r2, #1
 8012828:	4611      	mov	r1, r2
 801282a:	4620      	mov	r0, r4
 801282c:	b002      	add	sp, #8
 801282e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012832:	f7ff bf4f 	b.w	80126d4 <uxr_stream_id>
 8012836:	bf00      	nop

08012838 <uxr_add_output_reliable_buffer>:
 8012838:	b510      	push	{r4, lr}
 801283a:	b084      	sub	sp, #16
 801283c:	4684      	mov	ip, r0
 801283e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8012842:	9000      	str	r0, [sp, #0]
 8012844:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8012848:	2028      	movs	r0, #40	@ 0x28
 801284a:	fb00 c004 	mla	r0, r0, r4, ip
 801284e:	f104 0e01 	add.w	lr, r4, #1
 8012852:	3018      	adds	r0, #24
 8012854:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8012858:	f005 f90a 	bl	8017a70 <uxr_init_output_reliable_stream>
 801285c:	2201      	movs	r2, #1
 801285e:	2102      	movs	r1, #2
 8012860:	4620      	mov	r0, r4
 8012862:	b004      	add	sp, #16
 8012864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012868:	f7ff bf34 	b.w	80126d4 <uxr_stream_id>

0801286c <uxr_add_input_best_effort_buffer>:
 801286c:	b510      	push	{r4, lr}
 801286e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8012872:	4603      	mov	r3, r0
 8012874:	1c62      	adds	r2, r4, #1
 8012876:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 801287a:	b082      	sub	sp, #8
 801287c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8012880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012884:	f004 fe7e 	bl	8017584 <uxr_init_input_best_effort_stream>
 8012888:	2200      	movs	r2, #0
 801288a:	2101      	movs	r1, #1
 801288c:	4620      	mov	r0, r4
 801288e:	b002      	add	sp, #8
 8012890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012894:	f7ff bf1e 	b.w	80126d4 <uxr_stream_id>

08012898 <uxr_add_input_reliable_buffer>:
 8012898:	b510      	push	{r4, lr}
 801289a:	b084      	sub	sp, #16
 801289c:	4684      	mov	ip, r0
 801289e:	9806      	ldr	r0, [sp, #24]
 80128a0:	9000      	str	r0, [sp, #0]
 80128a2:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 80128a6:	2018      	movs	r0, #24
 80128a8:	fb00 c004 	mla	r0, r0, r4, ip
 80128ac:	f104 0e01 	add.w	lr, r4, #1
 80128b0:	3048      	adds	r0, #72	@ 0x48
 80128b2:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 80128b6:	f004 feb1 	bl	801761c <uxr_init_input_reliable_stream>
 80128ba:	2200      	movs	r2, #0
 80128bc:	2102      	movs	r1, #2
 80128be:	4620      	mov	r0, r4
 80128c0:	b004      	add	sp, #16
 80128c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128c6:	f7ff bf05 	b.w	80126d4 <uxr_stream_id>
 80128ca:	bf00      	nop

080128cc <uxr_get_output_best_effort_stream>:
 80128cc:	7c03      	ldrb	r3, [r0, #16]
 80128ce:	428b      	cmp	r3, r1
 80128d0:	bf8c      	ite	hi
 80128d2:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80128d6:	2000      	movls	r0, #0
 80128d8:	4770      	bx	lr
 80128da:	bf00      	nop

080128dc <uxr_get_output_reliable_stream>:
 80128dc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80128e0:	428b      	cmp	r3, r1
 80128e2:	bf83      	ittte	hi
 80128e4:	2328      	movhi	r3, #40	@ 0x28
 80128e6:	fb03 0001 	mlahi	r0, r3, r1, r0
 80128ea:	3018      	addhi	r0, #24
 80128ec:	2000      	movls	r0, #0
 80128ee:	4770      	bx	lr

080128f0 <uxr_get_input_best_effort_stream>:
 80128f0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80128f4:	428b      	cmp	r3, r1
 80128f6:	bf86      	itte	hi
 80128f8:	3121      	addhi	r1, #33	@ 0x21
 80128fa:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80128fe:	2000      	movls	r0, #0
 8012900:	4770      	bx	lr
 8012902:	bf00      	nop

08012904 <uxr_get_input_reliable_stream>:
 8012904:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8012908:	428b      	cmp	r3, r1
 801290a:	bf83      	ittte	hi
 801290c:	2318      	movhi	r3, #24
 801290e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8012912:	3048      	addhi	r0, #72	@ 0x48
 8012914:	2000      	movls	r0, #0
 8012916:	4770      	bx	lr

08012918 <uxr_output_streams_confirmed>:
 8012918:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801291c:	b183      	cbz	r3, 8012940 <uxr_output_streams_confirmed+0x28>
 801291e:	b570      	push	{r4, r5, r6, lr}
 8012920:	4606      	mov	r6, r0
 8012922:	f100 0518 	add.w	r5, r0, #24
 8012926:	2400      	movs	r4, #0
 8012928:	e001      	b.n	801292e <uxr_output_streams_confirmed+0x16>
 801292a:	3528      	adds	r5, #40	@ 0x28
 801292c:	b138      	cbz	r0, 801293e <uxr_output_streams_confirmed+0x26>
 801292e:	4628      	mov	r0, r5
 8012930:	f005 fb46 	bl	8017fc0 <uxr_is_output_up_to_date>
 8012934:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8012938:	3401      	adds	r4, #1
 801293a:	42a3      	cmp	r3, r4
 801293c:	d8f5      	bhi.n	801292a <uxr_output_streams_confirmed+0x12>
 801293e:	bd70      	pop	{r4, r5, r6, pc}
 8012940:	2001      	movs	r0, #1
 8012942:	4770      	bx	lr

08012944 <uxr_buffer_submessage_header>:
 8012944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012946:	4604      	mov	r4, r0
 8012948:	460e      	mov	r6, r1
 801294a:	2104      	movs	r1, #4
 801294c:	4615      	mov	r5, r2
 801294e:	461f      	mov	r7, r3
 8012950:	f7f9 fca8 	bl	800c2a4 <ucdr_align_to>
 8012954:	2301      	movs	r3, #1
 8012956:	ea47 0203 	orr.w	r2, r7, r3
 801295a:	4631      	mov	r1, r6
 801295c:	7523      	strb	r3, [r4, #20]
 801295e:	4620      	mov	r0, r4
 8012960:	462b      	mov	r3, r5
 8012962:	f000 fa27 	bl	8012db4 <uxr_serialize_submessage_header>
 8012966:	4620      	mov	r0, r4
 8012968:	f7f9 fcb2 	bl	800c2d0 <ucdr_buffer_remaining>
 801296c:	42a8      	cmp	r0, r5
 801296e:	bf34      	ite	cc
 8012970:	2000      	movcc	r0, #0
 8012972:	2001      	movcs	r0, #1
 8012974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012976:	bf00      	nop

08012978 <uxr_read_submessage_header>:
 8012978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801297c:	4604      	mov	r4, r0
 801297e:	460d      	mov	r5, r1
 8012980:	2104      	movs	r1, #4
 8012982:	4616      	mov	r6, r2
 8012984:	4698      	mov	r8, r3
 8012986:	f7f9 fc8d 	bl	800c2a4 <ucdr_align_to>
 801298a:	4620      	mov	r0, r4
 801298c:	f7f9 fca0 	bl	800c2d0 <ucdr_buffer_remaining>
 8012990:	2803      	cmp	r0, #3
 8012992:	bf8c      	ite	hi
 8012994:	2701      	movhi	r7, #1
 8012996:	2700      	movls	r7, #0
 8012998:	d802      	bhi.n	80129a0 <uxr_read_submessage_header+0x28>
 801299a:	4638      	mov	r0, r7
 801299c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129a0:	4633      	mov	r3, r6
 80129a2:	4642      	mov	r2, r8
 80129a4:	4620      	mov	r0, r4
 80129a6:	4629      	mov	r1, r5
 80129a8:	f000 fa18 	bl	8012ddc <uxr_deserialize_submessage_header>
 80129ac:	f898 3000 	ldrb.w	r3, [r8]
 80129b0:	f003 0201 	and.w	r2, r3, #1
 80129b4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80129b8:	f888 3000 	strb.w	r3, [r8]
 80129bc:	7522      	strb	r2, [r4, #20]
 80129be:	4638      	mov	r0, r7
 80129c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080129c4 <uxr_submessage_padding>:
 80129c4:	f010 0003 	ands.w	r0, r0, #3
 80129c8:	bf18      	it	ne
 80129ca:	f1c0 0004 	rsbne	r0, r0, #4
 80129ce:	4770      	bx	lr

080129d0 <uxr_millis>:
 80129d0:	b510      	push	{r4, lr}
 80129d2:	b084      	sub	sp, #16
 80129d4:	4669      	mov	r1, sp
 80129d6:	2001      	movs	r0, #1
 80129d8:	f7ef f922 	bl	8001c20 <clock_gettime>
 80129dc:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80129e0:	4906      	ldr	r1, [pc, #24]	@ (80129fc <uxr_millis+0x2c>)
 80129e2:	fba0 0301 	umull	r0, r3, r0, r1
 80129e6:	1900      	adds	r0, r0, r4
 80129e8:	fb01 3102 	mla	r1, r1, r2, r3
 80129ec:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80129f0:	4a03      	ldr	r2, [pc, #12]	@ (8012a00 <uxr_millis+0x30>)
 80129f2:	2300      	movs	r3, #0
 80129f4:	f7ed fe88 	bl	8000708 <__aeabi_ldivmod>
 80129f8:	b004      	add	sp, #16
 80129fa:	bd10      	pop	{r4, pc}
 80129fc:	3b9aca00 	.word	0x3b9aca00
 8012a00:	000f4240 	.word	0x000f4240

08012a04 <uxr_nanos>:
 8012a04:	b510      	push	{r4, lr}
 8012a06:	b084      	sub	sp, #16
 8012a08:	4669      	mov	r1, sp
 8012a0a:	2001      	movs	r0, #1
 8012a0c:	f7ef f908 	bl	8001c20 <clock_gettime>
 8012a10:	4a06      	ldr	r2, [pc, #24]	@ (8012a2c <uxr_nanos+0x28>)
 8012a12:	9800      	ldr	r0, [sp, #0]
 8012a14:	9902      	ldr	r1, [sp, #8]
 8012a16:	9c01      	ldr	r4, [sp, #4]
 8012a18:	fba0 0302 	umull	r0, r3, r0, r2
 8012a1c:	1840      	adds	r0, r0, r1
 8012a1e:	fb02 3304 	mla	r3, r2, r4, r3
 8012a22:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8012a26:	b004      	add	sp, #16
 8012a28:	bd10      	pop	{r4, pc}
 8012a2a:	bf00      	nop
 8012a2c:	3b9aca00 	.word	0x3b9aca00

08012a30 <on_full_output_buffer_fragmented>:
 8012a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a34:	460c      	mov	r4, r1
 8012a36:	b08a      	sub	sp, #40	@ 0x28
 8012a38:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8012a3c:	4606      	mov	r6, r0
 8012a3e:	f104 0008 	add.w	r0, r4, #8
 8012a42:	f7ff ff4b 	bl	80128dc <uxr_get_output_reliable_stream>
 8012a46:	4605      	mov	r5, r0
 8012a48:	f005 fac4 	bl	8017fd4 <get_available_free_slots>
 8012a4c:	b968      	cbnz	r0, 8012a6a <on_full_output_buffer_fragmented+0x3a>
 8012a4e:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8012a52:	4620      	mov	r0, r4
 8012a54:	4798      	blx	r3
 8012a56:	b918      	cbnz	r0, 8012a60 <on_full_output_buffer_fragmented+0x30>
 8012a58:	2001      	movs	r0, #1
 8012a5a:	b00a      	add	sp, #40	@ 0x28
 8012a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a60:	4628      	mov	r0, r5
 8012a62:	f005 fab7 	bl	8017fd4 <get_available_free_slots>
 8012a66:	2800      	cmp	r0, #0
 8012a68:	d0f6      	beq.n	8012a58 <on_full_output_buffer_fragmented+0x28>
 8012a6a:	8929      	ldrh	r1, [r5, #8]
 8012a6c:	89eb      	ldrh	r3, [r5, #14]
 8012a6e:	7b28      	ldrb	r0, [r5, #12]
 8012a70:	686a      	ldr	r2, [r5, #4]
 8012a72:	fbb2 f8f1 	udiv	r8, r2, r1
 8012a76:	fbb3 f2f1 	udiv	r2, r3, r1
 8012a7a:	fb01 3112 	mls	r1, r1, r2, r3
 8012a7e:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8012a82:	b289      	uxth	r1, r1
 8012a84:	fb08 f101 	mul.w	r1, r8, r1
 8012a88:	30fc      	adds	r0, #252	@ 0xfc
 8012a8a:	f1a8 0804 	sub.w	r8, r8, #4
 8012a8e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8012a92:	4440      	add	r0, r8
 8012a94:	b287      	uxth	r7, r0
 8012a96:	1bdb      	subs	r3, r3, r7
 8012a98:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8012a9c:	682b      	ldr	r3, [r5, #0]
 8012a9e:	3104      	adds	r1, #4
 8012aa0:	4419      	add	r1, r3
 8012aa2:	4642      	mov	r2, r8
 8012aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012aa8:	9300      	str	r3, [sp, #0]
 8012aaa:	a802      	add	r0, sp, #8
 8012aac:	2300      	movs	r3, #0
 8012aae:	f7f9 fbcd 	bl	800c24c <ucdr_init_buffer_origin_offset>
 8012ab2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012ab6:	f102 0308 	add.w	r3, r2, #8
 8012aba:	4543      	cmp	r3, r8
 8012abc:	d928      	bls.n	8012b10 <on_full_output_buffer_fragmented+0xe0>
 8012abe:	463a      	mov	r2, r7
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	210d      	movs	r1, #13
 8012ac4:	a802      	add	r0, sp, #8
 8012ac6:	f7ff ff3d 	bl	8012944 <uxr_buffer_submessage_header>
 8012aca:	8929      	ldrh	r1, [r5, #8]
 8012acc:	89eb      	ldrh	r3, [r5, #14]
 8012ace:	fbb3 f2f1 	udiv	r2, r3, r1
 8012ad2:	fb01 3312 	mls	r3, r1, r2, r3
 8012ad6:	b29b      	uxth	r3, r3
 8012ad8:	686a      	ldr	r2, [r5, #4]
 8012ada:	fbb2 f2f1 	udiv	r2, r2, r1
 8012ade:	fb02 f303 	mul.w	r3, r2, r3
 8012ae2:	682a      	ldr	r2, [r5, #0]
 8012ae4:	f842 8003 	str.w	r8, [r2, r3]
 8012ae8:	89e8      	ldrh	r0, [r5, #14]
 8012aea:	2101      	movs	r1, #1
 8012aec:	f005 fa92 	bl	8018014 <uxr_seq_num_add>
 8012af0:	9904      	ldr	r1, [sp, #16]
 8012af2:	9a03      	ldr	r2, [sp, #12]
 8012af4:	81e8      	strh	r0, [r5, #14]
 8012af6:	1a52      	subs	r2, r2, r1
 8012af8:	4630      	mov	r0, r6
 8012afa:	f7f9 fbb9 	bl	800c270 <ucdr_init_buffer>
 8012afe:	4630      	mov	r0, r6
 8012b00:	490f      	ldr	r1, [pc, #60]	@ (8012b40 <on_full_output_buffer_fragmented+0x110>)
 8012b02:	4622      	mov	r2, r4
 8012b04:	f7f9 fb88 	bl	800c218 <ucdr_set_on_full_buffer_callback>
 8012b08:	2000      	movs	r0, #0
 8012b0a:	b00a      	add	sp, #40	@ 0x28
 8012b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b10:	b292      	uxth	r2, r2
 8012b12:	2302      	movs	r3, #2
 8012b14:	210d      	movs	r1, #13
 8012b16:	a802      	add	r0, sp, #8
 8012b18:	f7ff ff14 	bl	8012944 <uxr_buffer_submessage_header>
 8012b1c:	8928      	ldrh	r0, [r5, #8]
 8012b1e:	89eb      	ldrh	r3, [r5, #14]
 8012b20:	fbb3 f1f0 	udiv	r1, r3, r0
 8012b24:	fb00 3311 	mls	r3, r0, r1, r3
 8012b28:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012b2c:	6869      	ldr	r1, [r5, #4]
 8012b2e:	fbb1 f1f0 	udiv	r1, r1, r0
 8012b32:	b29b      	uxth	r3, r3
 8012b34:	fb01 f303 	mul.w	r3, r1, r3
 8012b38:	6829      	ldr	r1, [r5, #0]
 8012b3a:	3208      	adds	r2, #8
 8012b3c:	50ca      	str	r2, [r1, r3]
 8012b3e:	e7d3      	b.n	8012ae8 <on_full_output_buffer_fragmented+0xb8>
 8012b40:	08012a31 	.word	0x08012a31

08012b44 <uxr_prepare_output_stream>:
 8012b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b46:	b087      	sub	sp, #28
 8012b48:	2707      	movs	r7, #7
 8012b4a:	9202      	str	r2, [sp, #8]
 8012b4c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012b4e:	9103      	str	r1, [sp, #12]
 8012b50:	2500      	movs	r5, #0
 8012b52:	3204      	adds	r2, #4
 8012b54:	e9cd 7500 	strd	r7, r5, [sp]
 8012b58:	461c      	mov	r4, r3
 8012b5a:	4606      	mov	r6, r0
 8012b5c:	f7fe ffc2 	bl	8011ae4 <uxr_prepare_stream_to_write_submessage>
 8012b60:	f080 0201 	eor.w	r2, r0, #1
 8012b64:	b2d2      	uxtb	r2, r2
 8012b66:	75a2      	strb	r2, [r4, #22]
 8012b68:	b112      	cbz	r2, 8012b70 <uxr_prepare_output_stream+0x2c>
 8012b6a:	4628      	mov	r0, r5
 8012b6c:	b007      	add	sp, #28
 8012b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b70:	aa05      	add	r2, sp, #20
 8012b72:	9902      	ldr	r1, [sp, #8]
 8012b74:	4630      	mov	r0, r6
 8012b76:	f7ff f8eb 	bl	8011d50 <uxr_init_base_object_request>
 8012b7a:	a905      	add	r1, sp, #20
 8012b7c:	4605      	mov	r5, r0
 8012b7e:	4620      	mov	r0, r4
 8012b80:	f000 ffd4 	bl	8013b2c <uxr_serialize_WRITE_DATA_Payload_Data>
 8012b84:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8012b88:	69a6      	ldr	r6, [r4, #24]
 8012b8a:	69e7      	ldr	r7, [r4, #28]
 8012b8c:	1a52      	subs	r2, r2, r1
 8012b8e:	4620      	mov	r0, r4
 8012b90:	f7f9 fb6e 	bl	800c270 <ucdr_init_buffer>
 8012b94:	4620      	mov	r0, r4
 8012b96:	463a      	mov	r2, r7
 8012b98:	4631      	mov	r1, r6
 8012b9a:	f7f9 fb3d 	bl	800c218 <ucdr_set_on_full_buffer_callback>
 8012b9e:	4628      	mov	r0, r5
 8012ba0:	b007      	add	sp, #28
 8012ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012ba4 <uxr_prepare_output_stream_fragmented>:
 8012ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ba8:	b091      	sub	sp, #68	@ 0x44
 8012baa:	4605      	mov	r5, r0
 8012bac:	9105      	str	r1, [sp, #20]
 8012bae:	3008      	adds	r0, #8
 8012bb0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8012bb4:	461e      	mov	r6, r3
 8012bb6:	9204      	str	r2, [sp, #16]
 8012bb8:	f7ff fe90 	bl	80128dc <uxr_get_output_reliable_stream>
 8012bbc:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8012bc0:	2b01      	cmp	r3, #1
 8012bc2:	f000 8091 	beq.w	8012ce8 <uxr_prepare_output_stream_fragmented+0x144>
 8012bc6:	4604      	mov	r4, r0
 8012bc8:	2800      	cmp	r0, #0
 8012bca:	f000 808d 	beq.w	8012ce8 <uxr_prepare_output_stream_fragmented+0x144>
 8012bce:	f005 fa01 	bl	8017fd4 <get_available_free_slots>
 8012bd2:	2800      	cmp	r0, #0
 8012bd4:	f000 8083 	beq.w	8012cde <uxr_prepare_output_stream_fragmented+0x13a>
 8012bd8:	8922      	ldrh	r2, [r4, #8]
 8012bda:	89e7      	ldrh	r7, [r4, #14]
 8012bdc:	fbb7 f9f2 	udiv	r9, r7, r2
 8012be0:	fb02 7919 	mls	r9, r2, r9, r7
 8012be4:	fa1f f989 	uxth.w	r9, r9
 8012be8:	6863      	ldr	r3, [r4, #4]
 8012bea:	fbb3 f2f2 	udiv	r2, r3, r2
 8012bee:	6823      	ldr	r3, [r4, #0]
 8012bf0:	9203      	str	r2, [sp, #12]
 8012bf2:	fb02 f909 	mul.w	r9, r2, r9
 8012bf6:	f109 0904 	add.w	r9, r9, #4
 8012bfa:	4499      	add	r9, r3
 8012bfc:	7b23      	ldrb	r3, [r4, #12]
 8012bfe:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012c02:	4543      	cmp	r3, r8
 8012c04:	f1a2 0b04 	sub.w	fp, r2, #4
 8012c08:	d37a      	bcc.n	8012d00 <uxr_prepare_output_stream_fragmented+0x15c>
 8012c0a:	f1ab 0a04 	sub.w	sl, fp, #4
 8012c0e:	ebaa 0a03 	sub.w	sl, sl, r3
 8012c12:	465a      	mov	r2, fp
 8012c14:	2300      	movs	r3, #0
 8012c16:	4649      	mov	r1, r9
 8012c18:	a808      	add	r0, sp, #32
 8012c1a:	f8cd 8000 	str.w	r8, [sp]
 8012c1e:	f7f9 fb15 	bl	800c24c <ucdr_init_buffer_origin_offset>
 8012c22:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8012c24:	fa1f fa8a 	uxth.w	sl, sl
 8012c28:	4652      	mov	r2, sl
 8012c2a:	f103 0a08 	add.w	sl, r3, #8
 8012c2e:	45da      	cmp	sl, fp
 8012c30:	bf34      	ite	cc
 8012c32:	2302      	movcc	r3, #2
 8012c34:	2300      	movcs	r3, #0
 8012c36:	210d      	movs	r1, #13
 8012c38:	a808      	add	r0, sp, #32
 8012c3a:	f7ff fe83 	bl	8012944 <uxr_buffer_submessage_header>
 8012c3e:	8921      	ldrh	r1, [r4, #8]
 8012c40:	fbb7 f2f1 	udiv	r2, r7, r1
 8012c44:	fb01 7212 	mls	r2, r1, r2, r7
 8012c48:	b292      	uxth	r2, r2
 8012c4a:	6863      	ldr	r3, [r4, #4]
 8012c4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8012c50:	fb02 f303 	mul.w	r3, r2, r3
 8012c54:	6822      	ldr	r2, [r4, #0]
 8012c56:	4638      	mov	r0, r7
 8012c58:	f842 b003 	str.w	fp, [r2, r3]
 8012c5c:	2101      	movs	r1, #1
 8012c5e:	f005 f9d9 	bl	8018014 <uxr_seq_num_add>
 8012c62:	9b03      	ldr	r3, [sp, #12]
 8012c64:	f108 0104 	add.w	r1, r8, #4
 8012c68:	f1a3 0208 	sub.w	r2, r3, #8
 8012c6c:	eba2 0208 	sub.w	r2, r2, r8
 8012c70:	4449      	add	r1, r9
 8012c72:	4607      	mov	r7, r0
 8012c74:	4630      	mov	r0, r6
 8012c76:	f7f9 fafb 	bl	800c270 <ucdr_init_buffer>
 8012c7a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8012c7c:	81e7      	strh	r7, [r4, #14]
 8012c7e:	1d1a      	adds	r2, r3, #4
 8012c80:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8012c84:	bf28      	it	cs
 8012c86:	2200      	movcs	r2, #0
 8012c88:	2300      	movs	r3, #0
 8012c8a:	b292      	uxth	r2, r2
 8012c8c:	2107      	movs	r1, #7
 8012c8e:	4630      	mov	r0, r6
 8012c90:	f7ff fe58 	bl	8012944 <uxr_buffer_submessage_header>
 8012c94:	9904      	ldr	r1, [sp, #16]
 8012c96:	aa07      	add	r2, sp, #28
 8012c98:	4628      	mov	r0, r5
 8012c9a:	f7ff f859 	bl	8011d50 <uxr_init_base_object_request>
 8012c9e:	4604      	mov	r4, r0
 8012ca0:	b318      	cbz	r0, 8012cea <uxr_prepare_output_stream_fragmented+0x146>
 8012ca2:	a907      	add	r1, sp, #28
 8012ca4:	4630      	mov	r0, r6
 8012ca6:	f000 ff41 	bl	8013b2c <uxr_serialize_WRITE_DATA_Payload_Data>
 8012caa:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8012cae:	4630      	mov	r0, r6
 8012cb0:	1a52      	subs	r2, r2, r1
 8012cb2:	f7f9 fadd 	bl	800c270 <ucdr_init_buffer>
 8012cb6:	9b05      	ldr	r3, [sp, #20]
 8012cb8:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8012cbc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012cbe:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8012cc2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8012cc4:	491b      	ldr	r1, [pc, #108]	@ (8012d34 <uxr_prepare_output_stream_fragmented+0x190>)
 8012cc6:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8012cca:	4630      	mov	r0, r6
 8012ccc:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8012cd0:	462a      	mov	r2, r5
 8012cd2:	f7f9 faa1 	bl	800c218 <ucdr_set_on_full_buffer_callback>
 8012cd6:	4620      	mov	r0, r4
 8012cd8:	b011      	add	sp, #68	@ 0x44
 8012cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cde:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8012ce0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012ce2:	4628      	mov	r0, r5
 8012ce4:	4798      	blx	r3
 8012ce6:	b920      	cbnz	r0, 8012cf2 <uxr_prepare_output_stream_fragmented+0x14e>
 8012ce8:	2400      	movs	r4, #0
 8012cea:	4620      	mov	r0, r4
 8012cec:	b011      	add	sp, #68	@ 0x44
 8012cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cf2:	4620      	mov	r0, r4
 8012cf4:	f005 f96e 	bl	8017fd4 <get_available_free_slots>
 8012cf8:	2800      	cmp	r0, #0
 8012cfa:	f47f af6d 	bne.w	8012bd8 <uxr_prepare_output_stream_fragmented+0x34>
 8012cfe:	e7f3      	b.n	8012ce8 <uxr_prepare_output_stream_fragmented+0x144>
 8012d00:	4638      	mov	r0, r7
 8012d02:	2101      	movs	r1, #1
 8012d04:	f005 f986 	bl	8018014 <uxr_seq_num_add>
 8012d08:	8921      	ldrh	r1, [r4, #8]
 8012d0a:	fbb0 f2f1 	udiv	r2, r0, r1
 8012d0e:	fb01 0912 	mls	r9, r1, r2, r0
 8012d12:	fa1f f289 	uxth.w	r2, r9
 8012d16:	6863      	ldr	r3, [r4, #4]
 8012d18:	fbb3 f9f1 	udiv	r9, r3, r1
 8012d1c:	6823      	ldr	r3, [r4, #0]
 8012d1e:	fb02 f909 	mul.w	r9, r2, r9
 8012d22:	f109 0904 	add.w	r9, r9, #4
 8012d26:	4499      	add	r9, r3
 8012d28:	4607      	mov	r7, r0
 8012d2a:	7b23      	ldrb	r3, [r4, #12]
 8012d2c:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012d30:	e76b      	b.n	8012c0a <uxr_prepare_output_stream_fragmented+0x66>
 8012d32:	bf00      	nop
 8012d34:	08012a31 	.word	0x08012a31

08012d38 <uxr_serialize_message_header>:
 8012d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d3a:	b083      	sub	sp, #12
 8012d3c:	4616      	mov	r6, r2
 8012d3e:	4604      	mov	r4, r0
 8012d40:	9301      	str	r3, [sp, #4]
 8012d42:	460d      	mov	r5, r1
 8012d44:	9f08      	ldr	r7, [sp, #32]
 8012d46:	f7f8 f951 	bl	800afec <ucdr_serialize_uint8_t>
 8012d4a:	4631      	mov	r1, r6
 8012d4c:	4620      	mov	r0, r4
 8012d4e:	f7f8 f94d 	bl	800afec <ucdr_serialize_uint8_t>
 8012d52:	9a01      	ldr	r2, [sp, #4]
 8012d54:	2101      	movs	r1, #1
 8012d56:	4620      	mov	r0, r4
 8012d58:	f7f8 f9f4 	bl	800b144 <ucdr_serialize_endian_uint16_t>
 8012d5c:	062b      	lsls	r3, r5, #24
 8012d5e:	d501      	bpl.n	8012d64 <uxr_serialize_message_header+0x2c>
 8012d60:	b003      	add	sp, #12
 8012d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d64:	2204      	movs	r2, #4
 8012d66:	4639      	mov	r1, r7
 8012d68:	4620      	mov	r0, r4
 8012d6a:	b003      	add	sp, #12
 8012d6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012d70:	f004 bb28 	b.w	80173c4 <ucdr_serialize_array_uint8_t>

08012d74 <uxr_deserialize_message_header>:
 8012d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d76:	b083      	sub	sp, #12
 8012d78:	4616      	mov	r6, r2
 8012d7a:	4604      	mov	r4, r0
 8012d7c:	9301      	str	r3, [sp, #4]
 8012d7e:	460d      	mov	r5, r1
 8012d80:	9f08      	ldr	r7, [sp, #32]
 8012d82:	f7f8 f949 	bl	800b018 <ucdr_deserialize_uint8_t>
 8012d86:	4631      	mov	r1, r6
 8012d88:	4620      	mov	r0, r4
 8012d8a:	f7f8 f945 	bl	800b018 <ucdr_deserialize_uint8_t>
 8012d8e:	9a01      	ldr	r2, [sp, #4]
 8012d90:	2101      	movs	r1, #1
 8012d92:	4620      	mov	r0, r4
 8012d94:	f7f8 faca 	bl	800b32c <ucdr_deserialize_endian_uint16_t>
 8012d98:	f995 3000 	ldrsb.w	r3, [r5]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	da01      	bge.n	8012da4 <uxr_deserialize_message_header+0x30>
 8012da0:	b003      	add	sp, #12
 8012da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012da4:	2204      	movs	r2, #4
 8012da6:	4639      	mov	r1, r7
 8012da8:	4620      	mov	r0, r4
 8012daa:	b003      	add	sp, #12
 8012dac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012db0:	f004 bb6c 	b.w	801748c <ucdr_deserialize_array_uint8_t>

08012db4 <uxr_serialize_submessage_header>:
 8012db4:	b530      	push	{r4, r5, lr}
 8012db6:	b083      	sub	sp, #12
 8012db8:	4615      	mov	r5, r2
 8012dba:	4604      	mov	r4, r0
 8012dbc:	9301      	str	r3, [sp, #4]
 8012dbe:	f7f8 f915 	bl	800afec <ucdr_serialize_uint8_t>
 8012dc2:	4629      	mov	r1, r5
 8012dc4:	4620      	mov	r0, r4
 8012dc6:	f7f8 f911 	bl	800afec <ucdr_serialize_uint8_t>
 8012dca:	9a01      	ldr	r2, [sp, #4]
 8012dcc:	2101      	movs	r1, #1
 8012dce:	4620      	mov	r0, r4
 8012dd0:	b003      	add	sp, #12
 8012dd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012dd6:	f7f8 b9b5 	b.w	800b144 <ucdr_serialize_endian_uint16_t>
 8012dda:	bf00      	nop

08012ddc <uxr_deserialize_submessage_header>:
 8012ddc:	b530      	push	{r4, r5, lr}
 8012dde:	b083      	sub	sp, #12
 8012de0:	4615      	mov	r5, r2
 8012de2:	4604      	mov	r4, r0
 8012de4:	9301      	str	r3, [sp, #4]
 8012de6:	f7f8 f917 	bl	800b018 <ucdr_deserialize_uint8_t>
 8012dea:	4629      	mov	r1, r5
 8012dec:	4620      	mov	r0, r4
 8012dee:	f7f8 f913 	bl	800b018 <ucdr_deserialize_uint8_t>
 8012df2:	9a01      	ldr	r2, [sp, #4]
 8012df4:	2101      	movs	r1, #1
 8012df6:	4620      	mov	r0, r4
 8012df8:	b003      	add	sp, #12
 8012dfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012dfe:	f7f8 ba95 	b.w	800b32c <ucdr_deserialize_endian_uint16_t>
 8012e02:	bf00      	nop

08012e04 <uxr_serialize_CLIENT_Representation>:
 8012e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e08:	2204      	movs	r2, #4
 8012e0a:	460e      	mov	r6, r1
 8012e0c:	4605      	mov	r5, r0
 8012e0e:	f004 fad9 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 8012e12:	2202      	movs	r2, #2
 8012e14:	4607      	mov	r7, r0
 8012e16:	1d31      	adds	r1, r6, #4
 8012e18:	4628      	mov	r0, r5
 8012e1a:	f004 fad3 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 8012e1e:	4038      	ands	r0, r7
 8012e20:	2202      	movs	r2, #2
 8012e22:	1db1      	adds	r1, r6, #6
 8012e24:	b2c7      	uxtb	r7, r0
 8012e26:	4628      	mov	r0, r5
 8012e28:	f004 facc 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 8012e2c:	2204      	movs	r2, #4
 8012e2e:	4007      	ands	r7, r0
 8012e30:	f106 0108 	add.w	r1, r6, #8
 8012e34:	4628      	mov	r0, r5
 8012e36:	f004 fac5 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 8012e3a:	7b31      	ldrb	r1, [r6, #12]
 8012e3c:	4007      	ands	r7, r0
 8012e3e:	4628      	mov	r0, r5
 8012e40:	f7f8 f8d4 	bl	800afec <ucdr_serialize_uint8_t>
 8012e44:	7b71      	ldrb	r1, [r6, #13]
 8012e46:	4007      	ands	r7, r0
 8012e48:	4628      	mov	r0, r5
 8012e4a:	f7f8 f8a1 	bl	800af90 <ucdr_serialize_bool>
 8012e4e:	7b73      	ldrb	r3, [r6, #13]
 8012e50:	ea07 0800 	and.w	r8, r7, r0
 8012e54:	b93b      	cbnz	r3, 8012e66 <uxr_serialize_CLIENT_Representation+0x62>
 8012e56:	8bb1      	ldrh	r1, [r6, #28]
 8012e58:	4628      	mov	r0, r5
 8012e5a:	f7f8 f8f3 	bl	800b044 <ucdr_serialize_uint16_t>
 8012e5e:	ea08 0000 	and.w	r0, r8, r0
 8012e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e66:	6931      	ldr	r1, [r6, #16]
 8012e68:	4628      	mov	r0, r5
 8012e6a:	f7f8 fad5 	bl	800b418 <ucdr_serialize_uint32_t>
 8012e6e:	6933      	ldr	r3, [r6, #16]
 8012e70:	b1e3      	cbz	r3, 8012eac <uxr_serialize_CLIENT_Representation+0xa8>
 8012e72:	b1c0      	cbz	r0, 8012ea6 <uxr_serialize_CLIENT_Representation+0xa2>
 8012e74:	4637      	mov	r7, r6
 8012e76:	f04f 0900 	mov.w	r9, #0
 8012e7a:	e001      	b.n	8012e80 <uxr_serialize_CLIENT_Representation+0x7c>
 8012e7c:	3708      	adds	r7, #8
 8012e7e:	b194      	cbz	r4, 8012ea6 <uxr_serialize_CLIENT_Representation+0xa2>
 8012e80:	6979      	ldr	r1, [r7, #20]
 8012e82:	4628      	mov	r0, r5
 8012e84:	f004 fb66 	bl	8017554 <ucdr_serialize_string>
 8012e88:	69b9      	ldr	r1, [r7, #24]
 8012e8a:	4604      	mov	r4, r0
 8012e8c:	4628      	mov	r0, r5
 8012e8e:	f004 fb61 	bl	8017554 <ucdr_serialize_string>
 8012e92:	6933      	ldr	r3, [r6, #16]
 8012e94:	f109 0901 	add.w	r9, r9, #1
 8012e98:	4004      	ands	r4, r0
 8012e9a:	4599      	cmp	r9, r3
 8012e9c:	b2e4      	uxtb	r4, r4
 8012e9e:	d3ed      	bcc.n	8012e7c <uxr_serialize_CLIENT_Representation+0x78>
 8012ea0:	ea08 0804 	and.w	r8, r8, r4
 8012ea4:	e7d7      	b.n	8012e56 <uxr_serialize_CLIENT_Representation+0x52>
 8012ea6:	f04f 0800 	mov.w	r8, #0
 8012eaa:	e7d4      	b.n	8012e56 <uxr_serialize_CLIENT_Representation+0x52>
 8012eac:	ea08 0800 	and.w	r8, r8, r0
 8012eb0:	e7d1      	b.n	8012e56 <uxr_serialize_CLIENT_Representation+0x52>
 8012eb2:	bf00      	nop

08012eb4 <uxr_deserialize_CLIENT_Representation>:
 8012eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012eb8:	2204      	movs	r2, #4
 8012eba:	460c      	mov	r4, r1
 8012ebc:	4605      	mov	r5, r0
 8012ebe:	f004 fae5 	bl	801748c <ucdr_deserialize_array_uint8_t>
 8012ec2:	2202      	movs	r2, #2
 8012ec4:	4607      	mov	r7, r0
 8012ec6:	1d21      	adds	r1, r4, #4
 8012ec8:	4628      	mov	r0, r5
 8012eca:	f004 fadf 	bl	801748c <ucdr_deserialize_array_uint8_t>
 8012ece:	4038      	ands	r0, r7
 8012ed0:	2202      	movs	r2, #2
 8012ed2:	1da1      	adds	r1, r4, #6
 8012ed4:	b2c6      	uxtb	r6, r0
 8012ed6:	4628      	mov	r0, r5
 8012ed8:	f004 fad8 	bl	801748c <ucdr_deserialize_array_uint8_t>
 8012edc:	2204      	movs	r2, #4
 8012ede:	4006      	ands	r6, r0
 8012ee0:	f104 0108 	add.w	r1, r4, #8
 8012ee4:	4628      	mov	r0, r5
 8012ee6:	f004 fad1 	bl	801748c <ucdr_deserialize_array_uint8_t>
 8012eea:	f104 010c 	add.w	r1, r4, #12
 8012eee:	4006      	ands	r6, r0
 8012ef0:	4628      	mov	r0, r5
 8012ef2:	f7f8 f891 	bl	800b018 <ucdr_deserialize_uint8_t>
 8012ef6:	f104 010d 	add.w	r1, r4, #13
 8012efa:	ea06 0700 	and.w	r7, r6, r0
 8012efe:	4628      	mov	r0, r5
 8012f00:	f7f8 f85c 	bl	800afbc <ucdr_deserialize_bool>
 8012f04:	7b63      	ldrb	r3, [r4, #13]
 8012f06:	4007      	ands	r7, r0
 8012f08:	b93b      	cbnz	r3, 8012f1a <uxr_deserialize_CLIENT_Representation+0x66>
 8012f0a:	f104 011c 	add.w	r1, r4, #28
 8012f0e:	4628      	mov	r0, r5
 8012f10:	f7f8 f998 	bl	800b244 <ucdr_deserialize_uint16_t>
 8012f14:	4038      	ands	r0, r7
 8012f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f1a:	f104 0110 	add.w	r1, r4, #16
 8012f1e:	4628      	mov	r0, r5
 8012f20:	f7f8 fbaa 	bl	800b678 <ucdr_deserialize_uint32_t>
 8012f24:	6923      	ldr	r3, [r4, #16]
 8012f26:	2b01      	cmp	r3, #1
 8012f28:	d903      	bls.n	8012f32 <uxr_deserialize_CLIENT_Representation+0x7e>
 8012f2a:	2301      	movs	r3, #1
 8012f2c:	75ab      	strb	r3, [r5, #22]
 8012f2e:	2700      	movs	r7, #0
 8012f30:	e7eb      	b.n	8012f0a <uxr_deserialize_CLIENT_Representation+0x56>
 8012f32:	b30b      	cbz	r3, 8012f78 <uxr_deserialize_CLIENT_Representation+0xc4>
 8012f34:	2800      	cmp	r0, #0
 8012f36:	d0fa      	beq.n	8012f2e <uxr_deserialize_CLIENT_Representation+0x7a>
 8012f38:	46a0      	mov	r8, r4
 8012f3a:	f04f 0900 	mov.w	r9, #0
 8012f3e:	e001      	b.n	8012f44 <uxr_deserialize_CLIENT_Representation+0x90>
 8012f40:	2e00      	cmp	r6, #0
 8012f42:	d0f4      	beq.n	8012f2e <uxr_deserialize_CLIENT_Representation+0x7a>
 8012f44:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012f48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012f4c:	4628      	mov	r0, r5
 8012f4e:	f004 fb11 	bl	8017574 <ucdr_deserialize_string>
 8012f52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012f56:	4606      	mov	r6, r0
 8012f58:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8012f5c:	4628      	mov	r0, r5
 8012f5e:	f004 fb09 	bl	8017574 <ucdr_deserialize_string>
 8012f62:	6923      	ldr	r3, [r4, #16]
 8012f64:	f109 0901 	add.w	r9, r9, #1
 8012f68:	4006      	ands	r6, r0
 8012f6a:	4599      	cmp	r9, r3
 8012f6c:	f108 0808 	add.w	r8, r8, #8
 8012f70:	b2f6      	uxtb	r6, r6
 8012f72:	d3e5      	bcc.n	8012f40 <uxr_deserialize_CLIENT_Representation+0x8c>
 8012f74:	4037      	ands	r7, r6
 8012f76:	e7c8      	b.n	8012f0a <uxr_deserialize_CLIENT_Representation+0x56>
 8012f78:	4007      	ands	r7, r0
 8012f7a:	e7c6      	b.n	8012f0a <uxr_deserialize_CLIENT_Representation+0x56>

08012f7c <uxr_serialize_AGENT_Representation>:
 8012f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f80:	2204      	movs	r2, #4
 8012f82:	460f      	mov	r7, r1
 8012f84:	4605      	mov	r5, r0
 8012f86:	f004 fa1d 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 8012f8a:	2202      	movs	r2, #2
 8012f8c:	4604      	mov	r4, r0
 8012f8e:	1d39      	adds	r1, r7, #4
 8012f90:	4628      	mov	r0, r5
 8012f92:	f004 fa17 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 8012f96:	4020      	ands	r0, r4
 8012f98:	2202      	movs	r2, #2
 8012f9a:	1db9      	adds	r1, r7, #6
 8012f9c:	b2c4      	uxtb	r4, r0
 8012f9e:	4628      	mov	r0, r5
 8012fa0:	f004 fa10 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 8012fa4:	7a39      	ldrb	r1, [r7, #8]
 8012fa6:	4004      	ands	r4, r0
 8012fa8:	4628      	mov	r0, r5
 8012faa:	f7f7 fff1 	bl	800af90 <ucdr_serialize_bool>
 8012fae:	7a3b      	ldrb	r3, [r7, #8]
 8012fb0:	ea00 0804 	and.w	r8, r0, r4
 8012fb4:	b913      	cbnz	r3, 8012fbc <uxr_serialize_AGENT_Representation+0x40>
 8012fb6:	4640      	mov	r0, r8
 8012fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fbc:	68f9      	ldr	r1, [r7, #12]
 8012fbe:	4628      	mov	r0, r5
 8012fc0:	f7f8 fa2a 	bl	800b418 <ucdr_serialize_uint32_t>
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	b303      	cbz	r3, 801300a <uxr_serialize_AGENT_Representation+0x8e>
 8012fc8:	b1d0      	cbz	r0, 8013000 <uxr_serialize_AGENT_Representation+0x84>
 8012fca:	463e      	mov	r6, r7
 8012fcc:	f04f 0900 	mov.w	r9, #0
 8012fd0:	e001      	b.n	8012fd6 <uxr_serialize_AGENT_Representation+0x5a>
 8012fd2:	3608      	adds	r6, #8
 8012fd4:	b1a4      	cbz	r4, 8013000 <uxr_serialize_AGENT_Representation+0x84>
 8012fd6:	6931      	ldr	r1, [r6, #16]
 8012fd8:	4628      	mov	r0, r5
 8012fda:	f004 fabb 	bl	8017554 <ucdr_serialize_string>
 8012fde:	6971      	ldr	r1, [r6, #20]
 8012fe0:	4604      	mov	r4, r0
 8012fe2:	4628      	mov	r0, r5
 8012fe4:	f004 fab6 	bl	8017554 <ucdr_serialize_string>
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	f109 0901 	add.w	r9, r9, #1
 8012fee:	4004      	ands	r4, r0
 8012ff0:	4599      	cmp	r9, r3
 8012ff2:	b2e4      	uxtb	r4, r4
 8012ff4:	d3ed      	bcc.n	8012fd2 <uxr_serialize_AGENT_Representation+0x56>
 8012ff6:	ea08 0804 	and.w	r8, r8, r4
 8012ffa:	4640      	mov	r0, r8
 8012ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013000:	f04f 0800 	mov.w	r8, #0
 8013004:	4640      	mov	r0, r8
 8013006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801300a:	ea08 0800 	and.w	r8, r8, r0
 801300e:	e7d2      	b.n	8012fb6 <uxr_serialize_AGENT_Representation+0x3a>

08013010 <uxr_serialize_DATAWRITER_Representation>:
 8013010:	b570      	push	{r4, r5, r6, lr}
 8013012:	460d      	mov	r5, r1
 8013014:	7809      	ldrb	r1, [r1, #0]
 8013016:	4606      	mov	r6, r0
 8013018:	f7f7 ffe8 	bl	800afec <ucdr_serialize_uint8_t>
 801301c:	4604      	mov	r4, r0
 801301e:	b130      	cbz	r0, 801302e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013020:	782b      	ldrb	r3, [r5, #0]
 8013022:	2b02      	cmp	r3, #2
 8013024:	d00c      	beq.n	8013040 <uxr_serialize_DATAWRITER_Representation+0x30>
 8013026:	2b03      	cmp	r3, #3
 8013028:	d010      	beq.n	801304c <uxr_serialize_DATAWRITER_Representation+0x3c>
 801302a:	2b01      	cmp	r3, #1
 801302c:	d008      	beq.n	8013040 <uxr_serialize_DATAWRITER_Representation+0x30>
 801302e:	2202      	movs	r2, #2
 8013030:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8013034:	4630      	mov	r0, r6
 8013036:	f004 f9c5 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 801303a:	4020      	ands	r0, r4
 801303c:	b2c0      	uxtb	r0, r0
 801303e:	bd70      	pop	{r4, r5, r6, pc}
 8013040:	6869      	ldr	r1, [r5, #4]
 8013042:	4630      	mov	r0, r6
 8013044:	f004 fa86 	bl	8017554 <ucdr_serialize_string>
 8013048:	4604      	mov	r4, r0
 801304a:	e7f0      	b.n	801302e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801304c:	4629      	mov	r1, r5
 801304e:	4630      	mov	r0, r6
 8013050:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8013054:	3104      	adds	r1, #4
 8013056:	f7fd fa35 	bl	80104c4 <ucdr_serialize_sequence_uint8_t>
 801305a:	4604      	mov	r4, r0
 801305c:	e7e7      	b.n	801302e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801305e:	bf00      	nop

08013060 <uxr_serialize_ObjectVariant.part.0>:
 8013060:	b570      	push	{r4, r5, r6, lr}
 8013062:	780b      	ldrb	r3, [r1, #0]
 8013064:	3b01      	subs	r3, #1
 8013066:	460c      	mov	r4, r1
 8013068:	4605      	mov	r5, r0
 801306a:	2b0d      	cmp	r3, #13
 801306c:	d854      	bhi.n	8013118 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801306e:	e8df f003 	tbb	[pc, r3]
 8013072:	0730      	.short	0x0730
 8013074:	07071b1b 	.word	0x07071b1b
 8013078:	0c530707 	.word	0x0c530707
 801307c:	494e0c0c 	.word	0x494e0c0c
 8013080:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013084:	3104      	adds	r1, #4
 8013086:	f7ff bfc3 	b.w	8013010 <uxr_serialize_DATAWRITER_Representation>
 801308a:	7909      	ldrb	r1, [r1, #4]
 801308c:	f7f7 ffae 	bl	800afec <ucdr_serialize_uint8_t>
 8013090:	b1e8      	cbz	r0, 80130ce <uxr_serialize_ObjectVariant.part.0+0x6e>
 8013092:	7923      	ldrb	r3, [r4, #4]
 8013094:	2b01      	cmp	r3, #1
 8013096:	d001      	beq.n	801309c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8013098:	2b02      	cmp	r3, #2
 801309a:	d13d      	bne.n	8013118 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801309c:	68a1      	ldr	r1, [r4, #8]
 801309e:	4628      	mov	r0, r5
 80130a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130a4:	f004 ba56 	b.w	8017554 <ucdr_serialize_string>
 80130a8:	7909      	ldrb	r1, [r1, #4]
 80130aa:	f7f7 ff9f 	bl	800afec <ucdr_serialize_uint8_t>
 80130ae:	4606      	mov	r6, r0
 80130b0:	b120      	cbz	r0, 80130bc <uxr_serialize_ObjectVariant.part.0+0x5c>
 80130b2:	7923      	ldrb	r3, [r4, #4]
 80130b4:	2b02      	cmp	r3, #2
 80130b6:	d039      	beq.n	801312c <uxr_serialize_ObjectVariant.part.0+0xcc>
 80130b8:	2b03      	cmp	r3, #3
 80130ba:	d02f      	beq.n	801311c <uxr_serialize_ObjectVariant.part.0+0xbc>
 80130bc:	2202      	movs	r2, #2
 80130be:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80130c2:	4628      	mov	r0, r5
 80130c4:	f004 f97e 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 80130c8:	4030      	ands	r0, r6
 80130ca:	b2c0      	uxtb	r0, r0
 80130cc:	bd70      	pop	{r4, r5, r6, pc}
 80130ce:	2000      	movs	r0, #0
 80130d0:	bd70      	pop	{r4, r5, r6, pc}
 80130d2:	7909      	ldrb	r1, [r1, #4]
 80130d4:	f7f7 ff8a 	bl	800afec <ucdr_serialize_uint8_t>
 80130d8:	4606      	mov	r6, r0
 80130da:	b158      	cbz	r0, 80130f4 <uxr_serialize_ObjectVariant.part.0+0x94>
 80130dc:	7923      	ldrb	r3, [r4, #4]
 80130de:	2b02      	cmp	r3, #2
 80130e0:	d003      	beq.n	80130ea <uxr_serialize_ObjectVariant.part.0+0x8a>
 80130e2:	2b03      	cmp	r3, #3
 80130e4:	d028      	beq.n	8013138 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80130e6:	2b01      	cmp	r3, #1
 80130e8:	d104      	bne.n	80130f4 <uxr_serialize_ObjectVariant.part.0+0x94>
 80130ea:	68a1      	ldr	r1, [r4, #8]
 80130ec:	4628      	mov	r0, r5
 80130ee:	f004 fa31 	bl	8017554 <ucdr_serialize_string>
 80130f2:	4606      	mov	r6, r0
 80130f4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80130f8:	4628      	mov	r0, r5
 80130fa:	f7f8 fcb3 	bl	800ba64 <ucdr_serialize_int16_t>
 80130fe:	4030      	ands	r0, r6
 8013100:	b2c0      	uxtb	r0, r0
 8013102:	bd70      	pop	{r4, r5, r6, pc}
 8013104:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013108:	3104      	adds	r1, #4
 801310a:	f7ff be7b 	b.w	8012e04 <uxr_serialize_CLIENT_Representation>
 801310e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013112:	3104      	adds	r1, #4
 8013114:	f7ff bf32 	b.w	8012f7c <uxr_serialize_AGENT_Representation>
 8013118:	2001      	movs	r0, #1
 801311a:	bd70      	pop	{r4, r5, r6, pc}
 801311c:	68a2      	ldr	r2, [r4, #8]
 801311e:	f104 010c 	add.w	r1, r4, #12
 8013122:	4628      	mov	r0, r5
 8013124:	f7fd f9ce 	bl	80104c4 <ucdr_serialize_sequence_uint8_t>
 8013128:	4606      	mov	r6, r0
 801312a:	e7c7      	b.n	80130bc <uxr_serialize_ObjectVariant.part.0+0x5c>
 801312c:	68a1      	ldr	r1, [r4, #8]
 801312e:	4628      	mov	r0, r5
 8013130:	f004 fa10 	bl	8017554 <ucdr_serialize_string>
 8013134:	4606      	mov	r6, r0
 8013136:	e7c1      	b.n	80130bc <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013138:	68a2      	ldr	r2, [r4, #8]
 801313a:	f104 010c 	add.w	r1, r4, #12
 801313e:	4628      	mov	r0, r5
 8013140:	f7fd f9c0 	bl	80104c4 <ucdr_serialize_sequence_uint8_t>
 8013144:	4606      	mov	r6, r0
 8013146:	e7d5      	b.n	80130f4 <uxr_serialize_ObjectVariant.part.0+0x94>

08013148 <uxr_deserialize_DATAWRITER_Representation>:
 8013148:	b570      	push	{r4, r5, r6, lr}
 801314a:	4606      	mov	r6, r0
 801314c:	460d      	mov	r5, r1
 801314e:	f7f7 ff63 	bl	800b018 <ucdr_deserialize_uint8_t>
 8013152:	4604      	mov	r4, r0
 8013154:	b130      	cbz	r0, 8013164 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013156:	782b      	ldrb	r3, [r5, #0]
 8013158:	2b02      	cmp	r3, #2
 801315a:	d00c      	beq.n	8013176 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801315c:	2b03      	cmp	r3, #3
 801315e:	d012      	beq.n	8013186 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8013160:	2b01      	cmp	r3, #1
 8013162:	d008      	beq.n	8013176 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013164:	2202      	movs	r2, #2
 8013166:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801316a:	4630      	mov	r0, r6
 801316c:	f004 f98e 	bl	801748c <ucdr_deserialize_array_uint8_t>
 8013170:	4020      	ands	r0, r4
 8013172:	b2c0      	uxtb	r0, r0
 8013174:	bd70      	pop	{r4, r5, r6, pc}
 8013176:	6869      	ldr	r1, [r5, #4]
 8013178:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801317c:	4630      	mov	r0, r6
 801317e:	f004 f9f9 	bl	8017574 <ucdr_deserialize_string>
 8013182:	4604      	mov	r4, r0
 8013184:	e7ee      	b.n	8013164 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013186:	1d2b      	adds	r3, r5, #4
 8013188:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801318c:	f105 0108 	add.w	r1, r5, #8
 8013190:	4630      	mov	r0, r6
 8013192:	f7fd f9a9 	bl	80104e8 <ucdr_deserialize_sequence_uint8_t>
 8013196:	4604      	mov	r4, r0
 8013198:	e7e4      	b.n	8013164 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801319a:	bf00      	nop

0801319c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801319c:	b570      	push	{r4, r5, r6, lr}
 801319e:	460d      	mov	r5, r1
 80131a0:	7809      	ldrb	r1, [r1, #0]
 80131a2:	4606      	mov	r6, r0
 80131a4:	f7f7 fef4 	bl	800af90 <ucdr_serialize_bool>
 80131a8:	782b      	ldrb	r3, [r5, #0]
 80131aa:	4604      	mov	r4, r0
 80131ac:	b94b      	cbnz	r3, 80131c2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80131ae:	7a29      	ldrb	r1, [r5, #8]
 80131b0:	4630      	mov	r0, r6
 80131b2:	f7f7 feed 	bl	800af90 <ucdr_serialize_bool>
 80131b6:	7a2b      	ldrb	r3, [r5, #8]
 80131b8:	4004      	ands	r4, r0
 80131ba:	b2e4      	uxtb	r4, r4
 80131bc:	b943      	cbnz	r3, 80131d0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80131be:	4620      	mov	r0, r4
 80131c0:	bd70      	pop	{r4, r5, r6, pc}
 80131c2:	6869      	ldr	r1, [r5, #4]
 80131c4:	4630      	mov	r0, r6
 80131c6:	f004 f9c5 	bl	8017554 <ucdr_serialize_string>
 80131ca:	4004      	ands	r4, r0
 80131cc:	b2e4      	uxtb	r4, r4
 80131ce:	e7ee      	b.n	80131ae <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80131d0:	68e9      	ldr	r1, [r5, #12]
 80131d2:	4630      	mov	r0, r6
 80131d4:	f004 f9be 	bl	8017554 <ucdr_serialize_string>
 80131d8:	4004      	ands	r4, r0
 80131da:	4620      	mov	r0, r4
 80131dc:	bd70      	pop	{r4, r5, r6, pc}
 80131de:	bf00      	nop

080131e0 <uxr_serialize_OBJK_Topic_Binary>:
 80131e0:	b570      	push	{r4, r5, r6, lr}
 80131e2:	460d      	mov	r5, r1
 80131e4:	6809      	ldr	r1, [r1, #0]
 80131e6:	4606      	mov	r6, r0
 80131e8:	f004 f9b4 	bl	8017554 <ucdr_serialize_string>
 80131ec:	7929      	ldrb	r1, [r5, #4]
 80131ee:	4604      	mov	r4, r0
 80131f0:	4630      	mov	r0, r6
 80131f2:	f7f7 fecd 	bl	800af90 <ucdr_serialize_bool>
 80131f6:	792b      	ldrb	r3, [r5, #4]
 80131f8:	4004      	ands	r4, r0
 80131fa:	b2e4      	uxtb	r4, r4
 80131fc:	b943      	cbnz	r3, 8013210 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80131fe:	7b29      	ldrb	r1, [r5, #12]
 8013200:	4630      	mov	r0, r6
 8013202:	f7f7 fec5 	bl	800af90 <ucdr_serialize_bool>
 8013206:	7b2b      	ldrb	r3, [r5, #12]
 8013208:	4004      	ands	r4, r0
 801320a:	b93b      	cbnz	r3, 801321c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801320c:	4620      	mov	r0, r4
 801320e:	bd70      	pop	{r4, r5, r6, pc}
 8013210:	68a9      	ldr	r1, [r5, #8]
 8013212:	4630      	mov	r0, r6
 8013214:	f004 f99e 	bl	8017554 <ucdr_serialize_string>
 8013218:	4004      	ands	r4, r0
 801321a:	e7f0      	b.n	80131fe <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801321c:	6929      	ldr	r1, [r5, #16]
 801321e:	4630      	mov	r0, r6
 8013220:	f004 f998 	bl	8017554 <ucdr_serialize_string>
 8013224:	4004      	ands	r4, r0
 8013226:	b2e4      	uxtb	r4, r4
 8013228:	4620      	mov	r0, r4
 801322a:	bd70      	pop	{r4, r5, r6, pc}

0801322c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801322c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013230:	460c      	mov	r4, r1
 8013232:	7809      	ldrb	r1, [r1, #0]
 8013234:	4606      	mov	r6, r0
 8013236:	f7f7 feab 	bl	800af90 <ucdr_serialize_bool>
 801323a:	7823      	ldrb	r3, [r4, #0]
 801323c:	4605      	mov	r5, r0
 801323e:	b96b      	cbnz	r3, 801325c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8013240:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8013244:	4630      	mov	r0, r6
 8013246:	f7f7 fea3 	bl	800af90 <ucdr_serialize_bool>
 801324a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801324e:	4005      	ands	r5, r0
 8013250:	b2ed      	uxtb	r5, r5
 8013252:	2b00      	cmp	r3, #0
 8013254:	d169      	bne.n	801332a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8013256:	4628      	mov	r0, r5
 8013258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801325c:	6861      	ldr	r1, [r4, #4]
 801325e:	4630      	mov	r0, r6
 8013260:	f7f8 f8da 	bl	800b418 <ucdr_serialize_uint32_t>
 8013264:	6863      	ldr	r3, [r4, #4]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d06b      	beq.n	8013342 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801326a:	2800      	cmp	r0, #0
 801326c:	d067      	beq.n	801333e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801326e:	68a1      	ldr	r1, [r4, #8]
 8013270:	4630      	mov	r0, r6
 8013272:	f004 f96f 	bl	8017554 <ucdr_serialize_string>
 8013276:	6863      	ldr	r3, [r4, #4]
 8013278:	2b01      	cmp	r3, #1
 801327a:	d953      	bls.n	8013324 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801327c:	2800      	cmp	r0, #0
 801327e:	d05e      	beq.n	801333e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013280:	68e1      	ldr	r1, [r4, #12]
 8013282:	4630      	mov	r0, r6
 8013284:	f004 f966 	bl	8017554 <ucdr_serialize_string>
 8013288:	6863      	ldr	r3, [r4, #4]
 801328a:	2b02      	cmp	r3, #2
 801328c:	d94a      	bls.n	8013324 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801328e:	2800      	cmp	r0, #0
 8013290:	d055      	beq.n	801333e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013292:	6921      	ldr	r1, [r4, #16]
 8013294:	4630      	mov	r0, r6
 8013296:	f004 f95d 	bl	8017554 <ucdr_serialize_string>
 801329a:	6863      	ldr	r3, [r4, #4]
 801329c:	2b03      	cmp	r3, #3
 801329e:	d941      	bls.n	8013324 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80132a0:	2800      	cmp	r0, #0
 80132a2:	d04c      	beq.n	801333e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80132a4:	6961      	ldr	r1, [r4, #20]
 80132a6:	4630      	mov	r0, r6
 80132a8:	f004 f954 	bl	8017554 <ucdr_serialize_string>
 80132ac:	6863      	ldr	r3, [r4, #4]
 80132ae:	2b04      	cmp	r3, #4
 80132b0:	d938      	bls.n	8013324 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80132b2:	2800      	cmp	r0, #0
 80132b4:	d043      	beq.n	801333e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80132b6:	69a1      	ldr	r1, [r4, #24]
 80132b8:	4630      	mov	r0, r6
 80132ba:	f004 f94b 	bl	8017554 <ucdr_serialize_string>
 80132be:	6863      	ldr	r3, [r4, #4]
 80132c0:	2b05      	cmp	r3, #5
 80132c2:	d92f      	bls.n	8013324 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80132c4:	2800      	cmp	r0, #0
 80132c6:	d03a      	beq.n	801333e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80132c8:	69e1      	ldr	r1, [r4, #28]
 80132ca:	4630      	mov	r0, r6
 80132cc:	f004 f942 	bl	8017554 <ucdr_serialize_string>
 80132d0:	6863      	ldr	r3, [r4, #4]
 80132d2:	2b06      	cmp	r3, #6
 80132d4:	d926      	bls.n	8013324 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80132d6:	b390      	cbz	r0, 801333e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80132d8:	6a21      	ldr	r1, [r4, #32]
 80132da:	4630      	mov	r0, r6
 80132dc:	f004 f93a 	bl	8017554 <ucdr_serialize_string>
 80132e0:	6863      	ldr	r3, [r4, #4]
 80132e2:	2b07      	cmp	r3, #7
 80132e4:	d91e      	bls.n	8013324 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80132e6:	b350      	cbz	r0, 801333e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80132e8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80132ea:	4630      	mov	r0, r6
 80132ec:	f004 f932 	bl	8017554 <ucdr_serialize_string>
 80132f0:	6863      	ldr	r3, [r4, #4]
 80132f2:	2b08      	cmp	r3, #8
 80132f4:	d916      	bls.n	8013324 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80132f6:	b310      	cbz	r0, 801333e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80132f8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80132fa:	4630      	mov	r0, r6
 80132fc:	f004 f92a 	bl	8017554 <ucdr_serialize_string>
 8013300:	6863      	ldr	r3, [r4, #4]
 8013302:	2b09      	cmp	r3, #9
 8013304:	d90e      	bls.n	8013324 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013306:	b1d0      	cbz	r0, 801333e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013308:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801330c:	2709      	movs	r7, #9
 801330e:	e000      	b.n	8013312 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8013310:	b1a8      	cbz	r0, 801333e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013312:	f858 1b04 	ldr.w	r1, [r8], #4
 8013316:	4630      	mov	r0, r6
 8013318:	f004 f91c 	bl	8017554 <ucdr_serialize_string>
 801331c:	6862      	ldr	r2, [r4, #4]
 801331e:	3701      	adds	r7, #1
 8013320:	4297      	cmp	r7, r2
 8013322:	d3f5      	bcc.n	8013310 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8013324:	4005      	ands	r5, r0
 8013326:	b2ed      	uxtb	r5, r5
 8013328:	e78a      	b.n	8013240 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801332a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801332c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013330:	4630      	mov	r0, r6
 8013332:	f7fd f8c7 	bl	80104c4 <ucdr_serialize_sequence_uint8_t>
 8013336:	4005      	ands	r5, r0
 8013338:	4628      	mov	r0, r5
 801333a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801333e:	2500      	movs	r5, #0
 8013340:	e77e      	b.n	8013240 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013342:	4028      	ands	r0, r5
 8013344:	b2c5      	uxtb	r5, r0
 8013346:	e77b      	b.n	8013240 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08013348 <uxr_serialize_OBJK_Publisher_Binary>:
 8013348:	b570      	push	{r4, r5, r6, lr}
 801334a:	460d      	mov	r5, r1
 801334c:	7809      	ldrb	r1, [r1, #0]
 801334e:	4606      	mov	r6, r0
 8013350:	f7f7 fe1e 	bl	800af90 <ucdr_serialize_bool>
 8013354:	782b      	ldrb	r3, [r5, #0]
 8013356:	4604      	mov	r4, r0
 8013358:	b94b      	cbnz	r3, 801336e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801335a:	7a29      	ldrb	r1, [r5, #8]
 801335c:	4630      	mov	r0, r6
 801335e:	f7f7 fe17 	bl	800af90 <ucdr_serialize_bool>
 8013362:	7a2b      	ldrb	r3, [r5, #8]
 8013364:	4004      	ands	r4, r0
 8013366:	b2e4      	uxtb	r4, r4
 8013368:	b943      	cbnz	r3, 801337c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801336a:	4620      	mov	r0, r4
 801336c:	bd70      	pop	{r4, r5, r6, pc}
 801336e:	6869      	ldr	r1, [r5, #4]
 8013370:	4630      	mov	r0, r6
 8013372:	f004 f8ef 	bl	8017554 <ucdr_serialize_string>
 8013376:	4004      	ands	r4, r0
 8013378:	b2e4      	uxtb	r4, r4
 801337a:	e7ee      	b.n	801335a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801337c:	f105 010c 	add.w	r1, r5, #12
 8013380:	4630      	mov	r0, r6
 8013382:	f7ff ff53 	bl	801322c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8013386:	4004      	ands	r4, r0
 8013388:	4620      	mov	r0, r4
 801338a:	bd70      	pop	{r4, r5, r6, pc}

0801338c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801338c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8013390:	4688      	mov	r8, r1
 8013392:	8809      	ldrh	r1, [r1, #0]
 8013394:	4681      	mov	r9, r0
 8013396:	f7f7 fe55 	bl	800b044 <ucdr_serialize_uint16_t>
 801339a:	f898 1002 	ldrb.w	r1, [r8, #2]
 801339e:	4606      	mov	r6, r0
 80133a0:	4648      	mov	r0, r9
 80133a2:	f7f7 fdf5 	bl	800af90 <ucdr_serialize_bool>
 80133a6:	f898 3002 	ldrb.w	r3, [r8, #2]
 80133aa:	4006      	ands	r6, r0
 80133ac:	b2f5      	uxtb	r5, r6
 80133ae:	b9eb      	cbnz	r3, 80133ec <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80133b0:	f898 1006 	ldrb.w	r1, [r8, #6]
 80133b4:	4648      	mov	r0, r9
 80133b6:	f7f7 fdeb 	bl	800af90 <ucdr_serialize_bool>
 80133ba:	f898 3006 	ldrb.w	r3, [r8, #6]
 80133be:	4005      	ands	r5, r0
 80133c0:	bb7b      	cbnz	r3, 8013422 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80133c2:	f898 100c 	ldrb.w	r1, [r8, #12]
 80133c6:	4648      	mov	r0, r9
 80133c8:	f7f7 fde2 	bl	800af90 <ucdr_serialize_bool>
 80133cc:	f898 300c 	ldrb.w	r3, [r8, #12]
 80133d0:	4005      	ands	r5, r0
 80133d2:	b9f3      	cbnz	r3, 8013412 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80133d4:	f898 1014 	ldrb.w	r1, [r8, #20]
 80133d8:	4648      	mov	r0, r9
 80133da:	f7f7 fdd9 	bl	800af90 <ucdr_serialize_bool>
 80133de:	f898 3014 	ldrb.w	r3, [r8, #20]
 80133e2:	4005      	ands	r5, r0
 80133e4:	b94b      	cbnz	r3, 80133fa <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80133e6:	4628      	mov	r0, r5
 80133e8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80133ec:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80133f0:	4648      	mov	r0, r9
 80133f2:	f7f7 fe27 	bl	800b044 <ucdr_serialize_uint16_t>
 80133f6:	4005      	ands	r5, r0
 80133f8:	e7da      	b.n	80133b0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80133fa:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80133fe:	f108 011c 	add.w	r1, r8, #28
 8013402:	4648      	mov	r0, r9
 8013404:	f7fd f85e 	bl	80104c4 <ucdr_serialize_sequence_uint8_t>
 8013408:	4028      	ands	r0, r5
 801340a:	b2c5      	uxtb	r5, r0
 801340c:	4628      	mov	r0, r5
 801340e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013412:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013416:	4648      	mov	r0, r9
 8013418:	f7f7 fffe 	bl	800b418 <ucdr_serialize_uint32_t>
 801341c:	4028      	ands	r0, r5
 801341e:	b2c5      	uxtb	r5, r0
 8013420:	e7d8      	b.n	80133d4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8013422:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8013426:	4648      	mov	r0, r9
 8013428:	f7f7 fff6 	bl	800b418 <ucdr_serialize_uint32_t>
 801342c:	4028      	ands	r0, r5
 801342e:	b2c5      	uxtb	r5, r0
 8013430:	e7c7      	b.n	80133c2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8013432:	bf00      	nop

08013434 <uxr_serialize_OBJK_DataWriter_Binary>:
 8013434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013436:	2202      	movs	r2, #2
 8013438:	460d      	mov	r5, r1
 801343a:	4606      	mov	r6, r0
 801343c:	f003 ffc2 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 8013440:	78a9      	ldrb	r1, [r5, #2]
 8013442:	4604      	mov	r4, r0
 8013444:	4630      	mov	r0, r6
 8013446:	f7f7 fda3 	bl	800af90 <ucdr_serialize_bool>
 801344a:	78ab      	ldrb	r3, [r5, #2]
 801344c:	4004      	ands	r4, r0
 801344e:	b2e4      	uxtb	r4, r4
 8013450:	b90b      	cbnz	r3, 8013456 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8013452:	4620      	mov	r0, r4
 8013454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013456:	f105 0108 	add.w	r1, r5, #8
 801345a:	4630      	mov	r0, r6
 801345c:	f7ff ff96 	bl	801338c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013460:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8013464:	4607      	mov	r7, r0
 8013466:	4630      	mov	r0, r6
 8013468:	f7f7 fd92 	bl	800af90 <ucdr_serialize_bool>
 801346c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8013470:	4038      	ands	r0, r7
 8013472:	b2c7      	uxtb	r7, r0
 8013474:	b913      	cbnz	r3, 801347c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8013476:	403c      	ands	r4, r7
 8013478:	4620      	mov	r0, r4
 801347a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801347c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8013480:	4630      	mov	r0, r6
 8013482:	f7f8 fa1f 	bl	800b8c4 <ucdr_serialize_uint64_t>
 8013486:	4007      	ands	r7, r0
 8013488:	e7f5      	b.n	8013476 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801348a:	bf00      	nop

0801348c <uxr_serialize_OBJK_Requester_Binary>:
 801348c:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8013490:	460f      	mov	r7, r1
 8013492:	6809      	ldr	r1, [r1, #0]
 8013494:	4680      	mov	r8, r0
 8013496:	f004 f85d 	bl	8017554 <ucdr_serialize_string>
 801349a:	6879      	ldr	r1, [r7, #4]
 801349c:	4605      	mov	r5, r0
 801349e:	4640      	mov	r0, r8
 80134a0:	f004 f858 	bl	8017554 <ucdr_serialize_string>
 80134a4:	68b9      	ldr	r1, [r7, #8]
 80134a6:	4005      	ands	r5, r0
 80134a8:	4640      	mov	r0, r8
 80134aa:	f004 f853 	bl	8017554 <ucdr_serialize_string>
 80134ae:	b2ec      	uxtb	r4, r5
 80134b0:	4004      	ands	r4, r0
 80134b2:	7b39      	ldrb	r1, [r7, #12]
 80134b4:	4640      	mov	r0, r8
 80134b6:	f7f7 fd6b 	bl	800af90 <ucdr_serialize_bool>
 80134ba:	7b3b      	ldrb	r3, [r7, #12]
 80134bc:	4004      	ands	r4, r0
 80134be:	b94b      	cbnz	r3, 80134d4 <uxr_serialize_OBJK_Requester_Binary+0x48>
 80134c0:	7d39      	ldrb	r1, [r7, #20]
 80134c2:	4640      	mov	r0, r8
 80134c4:	f7f7 fd64 	bl	800af90 <ucdr_serialize_bool>
 80134c8:	7d3b      	ldrb	r3, [r7, #20]
 80134ca:	4004      	ands	r4, r0
 80134cc:	b943      	cbnz	r3, 80134e0 <uxr_serialize_OBJK_Requester_Binary+0x54>
 80134ce:	4620      	mov	r0, r4
 80134d0:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 80134d4:	6939      	ldr	r1, [r7, #16]
 80134d6:	4640      	mov	r0, r8
 80134d8:	f004 f83c 	bl	8017554 <ucdr_serialize_string>
 80134dc:	4004      	ands	r4, r0
 80134de:	e7ef      	b.n	80134c0 <uxr_serialize_OBJK_Requester_Binary+0x34>
 80134e0:	69b9      	ldr	r1, [r7, #24]
 80134e2:	4640      	mov	r0, r8
 80134e4:	f004 f836 	bl	8017554 <ucdr_serialize_string>
 80134e8:	4004      	ands	r4, r0
 80134ea:	b2e4      	uxtb	r4, r4
 80134ec:	4620      	mov	r0, r4
 80134ee:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 80134f2:	bf00      	nop

080134f4 <uxr_deserialize_ObjectVariant>:
 80134f4:	b570      	push	{r4, r5, r6, lr}
 80134f6:	4605      	mov	r5, r0
 80134f8:	460e      	mov	r6, r1
 80134fa:	f7f7 fd8d 	bl	800b018 <ucdr_deserialize_uint8_t>
 80134fe:	b168      	cbz	r0, 801351c <uxr_deserialize_ObjectVariant+0x28>
 8013500:	7833      	ldrb	r3, [r6, #0]
 8013502:	3b01      	subs	r3, #1
 8013504:	4604      	mov	r4, r0
 8013506:	2b0d      	cmp	r3, #13
 8013508:	d809      	bhi.n	801351e <uxr_deserialize_ObjectVariant+0x2a>
 801350a:	e8df f003 	tbb	[pc, r3]
 801350e:	0a41      	.short	0x0a41
 8013510:	0a0a2323 	.word	0x0a0a2323
 8013514:	10080a0a 	.word	0x10080a0a
 8013518:	565c1010 	.word	0x565c1010
 801351c:	2400      	movs	r4, #0
 801351e:	4620      	mov	r0, r4
 8013520:	bd70      	pop	{r4, r5, r6, pc}
 8013522:	1d31      	adds	r1, r6, #4
 8013524:	4628      	mov	r0, r5
 8013526:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801352a:	f7ff be0d 	b.w	8013148 <uxr_deserialize_DATAWRITER_Representation>
 801352e:	1d31      	adds	r1, r6, #4
 8013530:	4628      	mov	r0, r5
 8013532:	f7f7 fd71 	bl	800b018 <ucdr_deserialize_uint8_t>
 8013536:	2800      	cmp	r0, #0
 8013538:	d0f0      	beq.n	801351c <uxr_deserialize_ObjectVariant+0x28>
 801353a:	7933      	ldrb	r3, [r6, #4]
 801353c:	2b01      	cmp	r3, #1
 801353e:	d001      	beq.n	8013544 <uxr_deserialize_ObjectVariant+0x50>
 8013540:	2b02      	cmp	r3, #2
 8013542:	d1ec      	bne.n	801351e <uxr_deserialize_ObjectVariant+0x2a>
 8013544:	68b1      	ldr	r1, [r6, #8]
 8013546:	4628      	mov	r0, r5
 8013548:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801354c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013550:	f004 b810 	b.w	8017574 <ucdr_deserialize_string>
 8013554:	1d31      	adds	r1, r6, #4
 8013556:	4628      	mov	r0, r5
 8013558:	f7f7 fd5e 	bl	800b018 <ucdr_deserialize_uint8_t>
 801355c:	4604      	mov	r4, r0
 801355e:	b170      	cbz	r0, 801357e <uxr_deserialize_ObjectVariant+0x8a>
 8013560:	7933      	ldrb	r3, [r6, #4]
 8013562:	2b02      	cmp	r3, #2
 8013564:	d04c      	beq.n	8013600 <uxr_deserialize_ObjectVariant+0x10c>
 8013566:	2b03      	cmp	r3, #3
 8013568:	d109      	bne.n	801357e <uxr_deserialize_ObjectVariant+0x8a>
 801356a:	f106 0308 	add.w	r3, r6, #8
 801356e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013572:	f106 010c 	add.w	r1, r6, #12
 8013576:	4628      	mov	r0, r5
 8013578:	f7fc ffb6 	bl	80104e8 <ucdr_deserialize_sequence_uint8_t>
 801357c:	4604      	mov	r4, r0
 801357e:	2202      	movs	r2, #2
 8013580:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8013584:	4628      	mov	r0, r5
 8013586:	f003 ff81 	bl	801748c <ucdr_deserialize_array_uint8_t>
 801358a:	4020      	ands	r0, r4
 801358c:	b2c4      	uxtb	r4, r0
 801358e:	e7c6      	b.n	801351e <uxr_deserialize_ObjectVariant+0x2a>
 8013590:	1d31      	adds	r1, r6, #4
 8013592:	4628      	mov	r0, r5
 8013594:	f7f7 fd40 	bl	800b018 <ucdr_deserialize_uint8_t>
 8013598:	4604      	mov	r4, r0
 801359a:	b130      	cbz	r0, 80135aa <uxr_deserialize_ObjectVariant+0xb6>
 801359c:	7933      	ldrb	r3, [r6, #4]
 801359e:	2b02      	cmp	r3, #2
 80135a0:	d036      	beq.n	8013610 <uxr_deserialize_ObjectVariant+0x11c>
 80135a2:	2b03      	cmp	r3, #3
 80135a4:	d03c      	beq.n	8013620 <uxr_deserialize_ObjectVariant+0x12c>
 80135a6:	2b01      	cmp	r3, #1
 80135a8:	d032      	beq.n	8013610 <uxr_deserialize_ObjectVariant+0x11c>
 80135aa:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80135ae:	4628      	mov	r0, r5
 80135b0:	f7f8 fad8 	bl	800bb64 <ucdr_deserialize_int16_t>
 80135b4:	4020      	ands	r0, r4
 80135b6:	b2c4      	uxtb	r4, r0
 80135b8:	e7b1      	b.n	801351e <uxr_deserialize_ObjectVariant+0x2a>
 80135ba:	1d31      	adds	r1, r6, #4
 80135bc:	4628      	mov	r0, r5
 80135be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80135c2:	f7ff bc77 	b.w	8012eb4 <uxr_deserialize_CLIENT_Representation>
 80135c6:	2204      	movs	r2, #4
 80135c8:	18b1      	adds	r1, r6, r2
 80135ca:	4628      	mov	r0, r5
 80135cc:	f003 ff5e 	bl	801748c <ucdr_deserialize_array_uint8_t>
 80135d0:	2202      	movs	r2, #2
 80135d2:	f106 0108 	add.w	r1, r6, #8
 80135d6:	4604      	mov	r4, r0
 80135d8:	4628      	mov	r0, r5
 80135da:	f003 ff57 	bl	801748c <ucdr_deserialize_array_uint8_t>
 80135de:	2202      	movs	r2, #2
 80135e0:	4004      	ands	r4, r0
 80135e2:	f106 010a 	add.w	r1, r6, #10
 80135e6:	4628      	mov	r0, r5
 80135e8:	f003 ff50 	bl	801748c <ucdr_deserialize_array_uint8_t>
 80135ec:	b2e4      	uxtb	r4, r4
 80135ee:	4603      	mov	r3, r0
 80135f0:	f106 010c 	add.w	r1, r6, #12
 80135f4:	4628      	mov	r0, r5
 80135f6:	401c      	ands	r4, r3
 80135f8:	f7f7 fce0 	bl	800afbc <ucdr_deserialize_bool>
 80135fc:	4004      	ands	r4, r0
 80135fe:	e78e      	b.n	801351e <uxr_deserialize_ObjectVariant+0x2a>
 8013600:	68b1      	ldr	r1, [r6, #8]
 8013602:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013606:	4628      	mov	r0, r5
 8013608:	f003 ffb4 	bl	8017574 <ucdr_deserialize_string>
 801360c:	4604      	mov	r4, r0
 801360e:	e7b6      	b.n	801357e <uxr_deserialize_ObjectVariant+0x8a>
 8013610:	68b1      	ldr	r1, [r6, #8]
 8013612:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013616:	4628      	mov	r0, r5
 8013618:	f003 ffac 	bl	8017574 <ucdr_deserialize_string>
 801361c:	4604      	mov	r4, r0
 801361e:	e7c4      	b.n	80135aa <uxr_deserialize_ObjectVariant+0xb6>
 8013620:	f106 0308 	add.w	r3, r6, #8
 8013624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013628:	f106 010c 	add.w	r1, r6, #12
 801362c:	4628      	mov	r0, r5
 801362e:	f7fc ff5b 	bl	80104e8 <ucdr_deserialize_sequence_uint8_t>
 8013632:	4604      	mov	r4, r0
 8013634:	e7b9      	b.n	80135aa <uxr_deserialize_ObjectVariant+0xb6>
 8013636:	bf00      	nop

08013638 <uxr_deserialize_BaseObjectRequest>:
 8013638:	b570      	push	{r4, r5, r6, lr}
 801363a:	2202      	movs	r2, #2
 801363c:	4605      	mov	r5, r0
 801363e:	460e      	mov	r6, r1
 8013640:	f003 ff24 	bl	801748c <ucdr_deserialize_array_uint8_t>
 8013644:	2202      	movs	r2, #2
 8013646:	4604      	mov	r4, r0
 8013648:	18b1      	adds	r1, r6, r2
 801364a:	4628      	mov	r0, r5
 801364c:	f003 ff1e 	bl	801748c <ucdr_deserialize_array_uint8_t>
 8013650:	4020      	ands	r0, r4
 8013652:	b2c0      	uxtb	r0, r0
 8013654:	bd70      	pop	{r4, r5, r6, pc}
 8013656:	bf00      	nop

08013658 <uxr_serialize_ActivityInfoVariant>:
 8013658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801365c:	460d      	mov	r5, r1
 801365e:	7809      	ldrb	r1, [r1, #0]
 8013660:	4607      	mov	r7, r0
 8013662:	f7f7 fcc3 	bl	800afec <ucdr_serialize_uint8_t>
 8013666:	4681      	mov	r9, r0
 8013668:	b138      	cbz	r0, 801367a <uxr_serialize_ActivityInfoVariant+0x22>
 801366a:	782b      	ldrb	r3, [r5, #0]
 801366c:	2b06      	cmp	r3, #6
 801366e:	f000 8082 	beq.w	8013776 <uxr_serialize_ActivityInfoVariant+0x11e>
 8013672:	2b0d      	cmp	r3, #13
 8013674:	d016      	beq.n	80136a4 <uxr_serialize_ActivityInfoVariant+0x4c>
 8013676:	2b05      	cmp	r3, #5
 8013678:	d002      	beq.n	8013680 <uxr_serialize_ActivityInfoVariant+0x28>
 801367a:	4648      	mov	r0, r9
 801367c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013680:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013684:	4638      	mov	r0, r7
 8013686:	f7f8 f9ed 	bl	800ba64 <ucdr_serialize_int16_t>
 801368a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 801368e:	4681      	mov	r9, r0
 8013690:	4638      	mov	r0, r7
 8013692:	f7f8 f917 	bl	800b8c4 <ucdr_serialize_uint64_t>
 8013696:	ea09 0000 	and.w	r0, r9, r0
 801369a:	fa5f f980 	uxtb.w	r9, r0
 801369e:	4648      	mov	r0, r9
 80136a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136a4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80136a8:	4638      	mov	r0, r7
 80136aa:	f7f8 f9db 	bl	800ba64 <ucdr_serialize_int16_t>
 80136ae:	68e9      	ldr	r1, [r5, #12]
 80136b0:	4681      	mov	r9, r0
 80136b2:	4638      	mov	r0, r7
 80136b4:	f7f7 feb0 	bl	800b418 <ucdr_serialize_uint32_t>
 80136b8:	68eb      	ldr	r3, [r5, #12]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d0eb      	beq.n	8013696 <uxr_serialize_ActivityInfoVariant+0x3e>
 80136be:	b320      	cbz	r0, 801370a <uxr_serialize_ActivityInfoVariant+0xb2>
 80136c0:	f105 080c 	add.w	r8, r5, #12
 80136c4:	2600      	movs	r6, #0
 80136c6:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 80136ca:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80136ce:	f89a 1010 	ldrb.w	r1, [sl, #16]
 80136d2:	4638      	mov	r0, r7
 80136d4:	f7f7 fc8a 	bl	800afec <ucdr_serialize_uint8_t>
 80136d8:	2800      	cmp	r0, #0
 80136da:	d053      	beq.n	8013784 <uxr_serialize_ActivityInfoVariant+0x12c>
 80136dc:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80136e0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80136e4:	0074      	lsls	r4, r6, #1
 80136e6:	00c9      	lsls	r1, r1, #3
 80136e8:	2b03      	cmp	r3, #3
 80136ea:	d854      	bhi.n	8013796 <uxr_serialize_ActivityInfoVariant+0x13e>
 80136ec:	e8df f003 	tbb	[pc, r3]
 80136f0:	02102132 	.word	0x02102132
 80136f4:	4441      	add	r1, r8
 80136f6:	4638      	mov	r0, r7
 80136f8:	6889      	ldr	r1, [r1, #8]
 80136fa:	f003 ff2b 	bl	8017554 <ucdr_serialize_string>
 80136fe:	68ea      	ldr	r2, [r5, #12]
 8013700:	3601      	adds	r6, #1
 8013702:	4296      	cmp	r6, r2
 8013704:	d242      	bcs.n	801378c <uxr_serialize_ActivityInfoVariant+0x134>
 8013706:	2800      	cmp	r0, #0
 8013708:	d1dd      	bne.n	80136c6 <uxr_serialize_ActivityInfoVariant+0x6e>
 801370a:	f04f 0900 	mov.w	r9, #0
 801370e:	e7b4      	b.n	801367a <uxr_serialize_ActivityInfoVariant+0x22>
 8013710:	3108      	adds	r1, #8
 8013712:	4441      	add	r1, r8
 8013714:	2210      	movs	r2, #16
 8013716:	4638      	mov	r0, r7
 8013718:	f003 fe54 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 801371c:	4434      	add	r4, r6
 801371e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013722:	4604      	mov	r4, r0
 8013724:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013726:	4638      	mov	r0, r7
 8013728:	f7f7 fe76 	bl	800b418 <ucdr_serialize_uint32_t>
 801372c:	4020      	ands	r0, r4
 801372e:	b2c0      	uxtb	r0, r0
 8013730:	e7e5      	b.n	80136fe <uxr_serialize_ActivityInfoVariant+0xa6>
 8013732:	3108      	adds	r1, #8
 8013734:	4441      	add	r1, r8
 8013736:	2204      	movs	r2, #4
 8013738:	4638      	mov	r0, r7
 801373a:	f003 fe43 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 801373e:	4434      	add	r4, r6
 8013740:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013744:	4604      	mov	r4, r0
 8013746:	8b19      	ldrh	r1, [r3, #24]
 8013748:	4638      	mov	r0, r7
 801374a:	f7f7 fc7b 	bl	800b044 <ucdr_serialize_uint16_t>
 801374e:	4020      	ands	r0, r4
 8013750:	b2c0      	uxtb	r0, r0
 8013752:	e7d4      	b.n	80136fe <uxr_serialize_ActivityInfoVariant+0xa6>
 8013754:	3108      	adds	r1, #8
 8013756:	4441      	add	r1, r8
 8013758:	2202      	movs	r2, #2
 801375a:	4638      	mov	r0, r7
 801375c:	f003 fe32 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 8013760:	4434      	add	r4, r6
 8013762:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013766:	4604      	mov	r4, r0
 8013768:	7d99      	ldrb	r1, [r3, #22]
 801376a:	4638      	mov	r0, r7
 801376c:	f7f7 fc3e 	bl	800afec <ucdr_serialize_uint8_t>
 8013770:	4020      	ands	r0, r4
 8013772:	b2c0      	uxtb	r0, r0
 8013774:	e7c3      	b.n	80136fe <uxr_serialize_ActivityInfoVariant+0xa6>
 8013776:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801377a:	4638      	mov	r0, r7
 801377c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013780:	f7f8 b970 	b.w	800ba64 <ucdr_serialize_int16_t>
 8013784:	68ea      	ldr	r2, [r5, #12]
 8013786:	3601      	adds	r6, #1
 8013788:	42b2      	cmp	r2, r6
 801378a:	d8be      	bhi.n	801370a <uxr_serialize_ActivityInfoVariant+0xb2>
 801378c:	ea09 0900 	and.w	r9, r9, r0
 8013790:	fa5f f989 	uxtb.w	r9, r9
 8013794:	e771      	b.n	801367a <uxr_serialize_ActivityInfoVariant+0x22>
 8013796:	68eb      	ldr	r3, [r5, #12]
 8013798:	3601      	adds	r6, #1
 801379a:	429e      	cmp	r6, r3
 801379c:	f10a 0a18 	add.w	sl, sl, #24
 80137a0:	d395      	bcc.n	80136ce <uxr_serialize_ActivityInfoVariant+0x76>
 80137a2:	e76a      	b.n	801367a <uxr_serialize_ActivityInfoVariant+0x22>

080137a4 <uxr_deserialize_BaseObjectReply>:
 80137a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137a8:	2202      	movs	r2, #2
 80137aa:	4606      	mov	r6, r0
 80137ac:	460f      	mov	r7, r1
 80137ae:	f003 fe6d 	bl	801748c <ucdr_deserialize_array_uint8_t>
 80137b2:	2202      	movs	r2, #2
 80137b4:	18b9      	adds	r1, r7, r2
 80137b6:	4605      	mov	r5, r0
 80137b8:	4630      	mov	r0, r6
 80137ba:	f003 fe67 	bl	801748c <ucdr_deserialize_array_uint8_t>
 80137be:	1d39      	adds	r1, r7, #4
 80137c0:	4680      	mov	r8, r0
 80137c2:	4630      	mov	r0, r6
 80137c4:	f7f7 fc28 	bl	800b018 <ucdr_deserialize_uint8_t>
 80137c8:	1d79      	adds	r1, r7, #5
 80137ca:	4604      	mov	r4, r0
 80137cc:	4630      	mov	r0, r6
 80137ce:	f7f7 fc23 	bl	800b018 <ucdr_deserialize_uint8_t>
 80137d2:	ea05 0508 	and.w	r5, r5, r8
 80137d6:	402c      	ands	r4, r5
 80137d8:	4020      	ands	r0, r4
 80137da:	b2c0      	uxtb	r0, r0
 80137dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080137e0 <uxr_serialize_ReadSpecification>:
 80137e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137e4:	460e      	mov	r6, r1
 80137e6:	7809      	ldrb	r1, [r1, #0]
 80137e8:	4607      	mov	r7, r0
 80137ea:	f7f7 fbff 	bl	800afec <ucdr_serialize_uint8_t>
 80137ee:	7871      	ldrb	r1, [r6, #1]
 80137f0:	4604      	mov	r4, r0
 80137f2:	4638      	mov	r0, r7
 80137f4:	f7f7 fbfa 	bl	800afec <ucdr_serialize_uint8_t>
 80137f8:	78b1      	ldrb	r1, [r6, #2]
 80137fa:	4004      	ands	r4, r0
 80137fc:	4638      	mov	r0, r7
 80137fe:	f7f7 fbc7 	bl	800af90 <ucdr_serialize_bool>
 8013802:	78b3      	ldrb	r3, [r6, #2]
 8013804:	b2e4      	uxtb	r4, r4
 8013806:	4004      	ands	r4, r0
 8013808:	b94b      	cbnz	r3, 801381e <uxr_serialize_ReadSpecification+0x3e>
 801380a:	7a31      	ldrb	r1, [r6, #8]
 801380c:	4638      	mov	r0, r7
 801380e:	f7f7 fbbf 	bl	800af90 <ucdr_serialize_bool>
 8013812:	7a33      	ldrb	r3, [r6, #8]
 8013814:	4004      	ands	r4, r0
 8013816:	b943      	cbnz	r3, 801382a <uxr_serialize_ReadSpecification+0x4a>
 8013818:	4620      	mov	r0, r4
 801381a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801381e:	6871      	ldr	r1, [r6, #4]
 8013820:	4638      	mov	r0, r7
 8013822:	f003 fe97 	bl	8017554 <ucdr_serialize_string>
 8013826:	4004      	ands	r4, r0
 8013828:	e7ef      	b.n	801380a <uxr_serialize_ReadSpecification+0x2a>
 801382a:	8971      	ldrh	r1, [r6, #10]
 801382c:	4638      	mov	r0, r7
 801382e:	f7f7 fc09 	bl	800b044 <ucdr_serialize_uint16_t>
 8013832:	89b1      	ldrh	r1, [r6, #12]
 8013834:	4605      	mov	r5, r0
 8013836:	4638      	mov	r0, r7
 8013838:	f7f7 fc04 	bl	800b044 <ucdr_serialize_uint16_t>
 801383c:	89f1      	ldrh	r1, [r6, #14]
 801383e:	4005      	ands	r5, r0
 8013840:	4638      	mov	r0, r7
 8013842:	f7f7 fbff 	bl	800b044 <ucdr_serialize_uint16_t>
 8013846:	8a31      	ldrh	r1, [r6, #16]
 8013848:	4680      	mov	r8, r0
 801384a:	4638      	mov	r0, r7
 801384c:	f7f7 fbfa 	bl	800b044 <ucdr_serialize_uint16_t>
 8013850:	b2ed      	uxtb	r5, r5
 8013852:	4025      	ands	r5, r4
 8013854:	ea08 0505 	and.w	r5, r8, r5
 8013858:	ea00 0405 	and.w	r4, r0, r5
 801385c:	4620      	mov	r0, r4
 801385e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013862:	bf00      	nop

08013864 <uxr_serialize_CREATE_CLIENT_Payload>:
 8013864:	f7ff bace 	b.w	8012e04 <uxr_serialize_CLIENT_Representation>

08013868 <uxr_serialize_CREATE_Payload>:
 8013868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801386a:	2202      	movs	r2, #2
 801386c:	4607      	mov	r7, r0
 801386e:	460e      	mov	r6, r1
 8013870:	f003 fda8 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 8013874:	2202      	movs	r2, #2
 8013876:	18b1      	adds	r1, r6, r2
 8013878:	4605      	mov	r5, r0
 801387a:	4638      	mov	r0, r7
 801387c:	f003 fda2 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 8013880:	7931      	ldrb	r1, [r6, #4]
 8013882:	4604      	mov	r4, r0
 8013884:	4638      	mov	r0, r7
 8013886:	f7f7 fbb1 	bl	800afec <ucdr_serialize_uint8_t>
 801388a:	b170      	cbz	r0, 80138aa <uxr_serialize_CREATE_Payload+0x42>
 801388c:	7933      	ldrb	r3, [r6, #4]
 801388e:	402c      	ands	r4, r5
 8013890:	3b01      	subs	r3, #1
 8013892:	b2e4      	uxtb	r4, r4
 8013894:	2b0d      	cmp	r3, #13
 8013896:	d809      	bhi.n	80138ac <uxr_serialize_CREATE_Payload+0x44>
 8013898:	e8df f003 	tbb	[pc, r3]
 801389c:	23230a4c 	.word	0x23230a4c
 80138a0:	0a0a0a0a 	.word	0x0a0a0a0a
 80138a4:	12121208 	.word	0x12121208
 80138a8:	3e45      	.short	0x3e45
 80138aa:	2400      	movs	r4, #0
 80138ac:	4620      	mov	r0, r4
 80138ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138b0:	f106 0108 	add.w	r1, r6, #8
 80138b4:	4638      	mov	r0, r7
 80138b6:	f7ff fbab 	bl	8013010 <uxr_serialize_DATAWRITER_Representation>
 80138ba:	4004      	ands	r4, r0
 80138bc:	4620      	mov	r0, r4
 80138be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138c0:	7a31      	ldrb	r1, [r6, #8]
 80138c2:	4638      	mov	r0, r7
 80138c4:	f7f7 fb92 	bl	800afec <ucdr_serialize_uint8_t>
 80138c8:	2800      	cmp	r0, #0
 80138ca:	d0ee      	beq.n	80138aa <uxr_serialize_CREATE_Payload+0x42>
 80138cc:	7a33      	ldrb	r3, [r6, #8]
 80138ce:	2b01      	cmp	r3, #1
 80138d0:	d001      	beq.n	80138d6 <uxr_serialize_CREATE_Payload+0x6e>
 80138d2:	2b02      	cmp	r3, #2
 80138d4:	d1ea      	bne.n	80138ac <uxr_serialize_CREATE_Payload+0x44>
 80138d6:	68f1      	ldr	r1, [r6, #12]
 80138d8:	4638      	mov	r0, r7
 80138da:	f003 fe3b 	bl	8017554 <ucdr_serialize_string>
 80138de:	4004      	ands	r4, r0
 80138e0:	e7e4      	b.n	80138ac <uxr_serialize_CREATE_Payload+0x44>
 80138e2:	7a31      	ldrb	r1, [r6, #8]
 80138e4:	4638      	mov	r0, r7
 80138e6:	f7f7 fb81 	bl	800afec <ucdr_serialize_uint8_t>
 80138ea:	4605      	mov	r5, r0
 80138ec:	b158      	cbz	r0, 8013906 <uxr_serialize_CREATE_Payload+0x9e>
 80138ee:	7a33      	ldrb	r3, [r6, #8]
 80138f0:	2b02      	cmp	r3, #2
 80138f2:	d034      	beq.n	801395e <uxr_serialize_CREATE_Payload+0xf6>
 80138f4:	2b03      	cmp	r3, #3
 80138f6:	d106      	bne.n	8013906 <uxr_serialize_CREATE_Payload+0x9e>
 80138f8:	68f2      	ldr	r2, [r6, #12]
 80138fa:	f106 0110 	add.w	r1, r6, #16
 80138fe:	4638      	mov	r0, r7
 8013900:	f7fc fde0 	bl	80104c4 <ucdr_serialize_sequence_uint8_t>
 8013904:	4605      	mov	r5, r0
 8013906:	2202      	movs	r2, #2
 8013908:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 801390c:	4638      	mov	r0, r7
 801390e:	f003 fd59 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 8013912:	4028      	ands	r0, r5
 8013914:	4004      	ands	r4, r0
 8013916:	e7c9      	b.n	80138ac <uxr_serialize_CREATE_Payload+0x44>
 8013918:	f106 0108 	add.w	r1, r6, #8
 801391c:	4638      	mov	r0, r7
 801391e:	f7ff fa71 	bl	8012e04 <uxr_serialize_CLIENT_Representation>
 8013922:	4004      	ands	r4, r0
 8013924:	e7c2      	b.n	80138ac <uxr_serialize_CREATE_Payload+0x44>
 8013926:	f106 0108 	add.w	r1, r6, #8
 801392a:	4638      	mov	r0, r7
 801392c:	f7ff fb26 	bl	8012f7c <uxr_serialize_AGENT_Representation>
 8013930:	4004      	ands	r4, r0
 8013932:	e7bb      	b.n	80138ac <uxr_serialize_CREATE_Payload+0x44>
 8013934:	7a31      	ldrb	r1, [r6, #8]
 8013936:	4638      	mov	r0, r7
 8013938:	f7f7 fb58 	bl	800afec <ucdr_serialize_uint8_t>
 801393c:	4605      	mov	r5, r0
 801393e:	b130      	cbz	r0, 801394e <uxr_serialize_CREATE_Payload+0xe6>
 8013940:	7a33      	ldrb	r3, [r6, #8]
 8013942:	2b02      	cmp	r3, #2
 8013944:	d011      	beq.n	801396a <uxr_serialize_CREATE_Payload+0x102>
 8013946:	2b03      	cmp	r3, #3
 8013948:	d015      	beq.n	8013976 <uxr_serialize_CREATE_Payload+0x10e>
 801394a:	2b01      	cmp	r3, #1
 801394c:	d00d      	beq.n	801396a <uxr_serialize_CREATE_Payload+0x102>
 801394e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8013952:	4638      	mov	r0, r7
 8013954:	f7f8 f886 	bl	800ba64 <ucdr_serialize_int16_t>
 8013958:	4028      	ands	r0, r5
 801395a:	4004      	ands	r4, r0
 801395c:	e7a6      	b.n	80138ac <uxr_serialize_CREATE_Payload+0x44>
 801395e:	68f1      	ldr	r1, [r6, #12]
 8013960:	4638      	mov	r0, r7
 8013962:	f003 fdf7 	bl	8017554 <ucdr_serialize_string>
 8013966:	4605      	mov	r5, r0
 8013968:	e7cd      	b.n	8013906 <uxr_serialize_CREATE_Payload+0x9e>
 801396a:	68f1      	ldr	r1, [r6, #12]
 801396c:	4638      	mov	r0, r7
 801396e:	f003 fdf1 	bl	8017554 <ucdr_serialize_string>
 8013972:	4605      	mov	r5, r0
 8013974:	e7eb      	b.n	801394e <uxr_serialize_CREATE_Payload+0xe6>
 8013976:	68f2      	ldr	r2, [r6, #12]
 8013978:	f106 0110 	add.w	r1, r6, #16
 801397c:	4638      	mov	r0, r7
 801397e:	f7fc fda1 	bl	80104c4 <ucdr_serialize_sequence_uint8_t>
 8013982:	4605      	mov	r5, r0
 8013984:	e7e3      	b.n	801394e <uxr_serialize_CREATE_Payload+0xe6>
 8013986:	bf00      	nop

08013988 <uxr_deserialize_GET_INFO_Payload>:
 8013988:	b570      	push	{r4, r5, r6, lr}
 801398a:	2202      	movs	r2, #2
 801398c:	4605      	mov	r5, r0
 801398e:	460e      	mov	r6, r1
 8013990:	f003 fd7c 	bl	801748c <ucdr_deserialize_array_uint8_t>
 8013994:	2202      	movs	r2, #2
 8013996:	18b1      	adds	r1, r6, r2
 8013998:	4604      	mov	r4, r0
 801399a:	4628      	mov	r0, r5
 801399c:	f003 fd76 	bl	801748c <ucdr_deserialize_array_uint8_t>
 80139a0:	1d31      	adds	r1, r6, #4
 80139a2:	4004      	ands	r4, r0
 80139a4:	4628      	mov	r0, r5
 80139a6:	f7f7 fe67 	bl	800b678 <ucdr_deserialize_uint32_t>
 80139aa:	b2e4      	uxtb	r4, r4
 80139ac:	4020      	ands	r0, r4
 80139ae:	bd70      	pop	{r4, r5, r6, pc}

080139b0 <uxr_serialize_DELETE_Payload>:
 80139b0:	b570      	push	{r4, r5, r6, lr}
 80139b2:	2202      	movs	r2, #2
 80139b4:	4605      	mov	r5, r0
 80139b6:	460e      	mov	r6, r1
 80139b8:	f003 fd04 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 80139bc:	2202      	movs	r2, #2
 80139be:	4604      	mov	r4, r0
 80139c0:	18b1      	adds	r1, r6, r2
 80139c2:	4628      	mov	r0, r5
 80139c4:	f003 fcfe 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 80139c8:	4020      	ands	r0, r4
 80139ca:	b2c0      	uxtb	r0, r0
 80139cc:	bd70      	pop	{r4, r5, r6, pc}
 80139ce:	bf00      	nop

080139d0 <uxr_deserialize_STATUS_AGENT_Payload>:
 80139d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139d4:	4605      	mov	r5, r0
 80139d6:	460e      	mov	r6, r1
 80139d8:	f7f7 fb1e 	bl	800b018 <ucdr_deserialize_uint8_t>
 80139dc:	1c71      	adds	r1, r6, #1
 80139de:	4604      	mov	r4, r0
 80139e0:	4628      	mov	r0, r5
 80139e2:	f7f7 fb19 	bl	800b018 <ucdr_deserialize_uint8_t>
 80139e6:	2204      	movs	r2, #4
 80139e8:	18b1      	adds	r1, r6, r2
 80139ea:	4680      	mov	r8, r0
 80139ec:	4628      	mov	r0, r5
 80139ee:	f003 fd4d 	bl	801748c <ucdr_deserialize_array_uint8_t>
 80139f2:	f106 0108 	add.w	r1, r6, #8
 80139f6:	4607      	mov	r7, r0
 80139f8:	2202      	movs	r2, #2
 80139fa:	4628      	mov	r0, r5
 80139fc:	f003 fd46 	bl	801748c <ucdr_deserialize_array_uint8_t>
 8013a00:	ea04 0308 	and.w	r3, r4, r8
 8013a04:	b2db      	uxtb	r3, r3
 8013a06:	ea03 0407 	and.w	r4, r3, r7
 8013a0a:	2202      	movs	r2, #2
 8013a0c:	4607      	mov	r7, r0
 8013a0e:	f106 010a 	add.w	r1, r6, #10
 8013a12:	4628      	mov	r0, r5
 8013a14:	f003 fd3a 	bl	801748c <ucdr_deserialize_array_uint8_t>
 8013a18:	f106 010c 	add.w	r1, r6, #12
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	4628      	mov	r0, r5
 8013a20:	461d      	mov	r5, r3
 8013a22:	f7f7 facb 	bl	800afbc <ucdr_deserialize_bool>
 8013a26:	403c      	ands	r4, r7
 8013a28:	4025      	ands	r5, r4
 8013a2a:	4028      	ands	r0, r5
 8013a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013a30 <uxr_deserialize_STATUS_Payload>:
 8013a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a34:	2202      	movs	r2, #2
 8013a36:	4606      	mov	r6, r0
 8013a38:	460f      	mov	r7, r1
 8013a3a:	f003 fd27 	bl	801748c <ucdr_deserialize_array_uint8_t>
 8013a3e:	2202      	movs	r2, #2
 8013a40:	18b9      	adds	r1, r7, r2
 8013a42:	4605      	mov	r5, r0
 8013a44:	4630      	mov	r0, r6
 8013a46:	f003 fd21 	bl	801748c <ucdr_deserialize_array_uint8_t>
 8013a4a:	1d39      	adds	r1, r7, #4
 8013a4c:	4680      	mov	r8, r0
 8013a4e:	4630      	mov	r0, r6
 8013a50:	f7f7 fae2 	bl	800b018 <ucdr_deserialize_uint8_t>
 8013a54:	1d79      	adds	r1, r7, #5
 8013a56:	4604      	mov	r4, r0
 8013a58:	4630      	mov	r0, r6
 8013a5a:	f7f7 fadd 	bl	800b018 <ucdr_deserialize_uint8_t>
 8013a5e:	ea05 0508 	and.w	r5, r5, r8
 8013a62:	402c      	ands	r4, r5
 8013a64:	4020      	ands	r0, r4
 8013a66:	b2c0      	uxtb	r0, r0
 8013a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013a6c <uxr_serialize_INFO_Payload>:
 8013a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a70:	2202      	movs	r2, #2
 8013a72:	460c      	mov	r4, r1
 8013a74:	4605      	mov	r5, r0
 8013a76:	f003 fca5 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 8013a7a:	2202      	movs	r2, #2
 8013a7c:	18a1      	adds	r1, r4, r2
 8013a7e:	4680      	mov	r8, r0
 8013a80:	4628      	mov	r0, r5
 8013a82:	f003 fc9f 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 8013a86:	7921      	ldrb	r1, [r4, #4]
 8013a88:	4607      	mov	r7, r0
 8013a8a:	4628      	mov	r0, r5
 8013a8c:	f7f7 faae 	bl	800afec <ucdr_serialize_uint8_t>
 8013a90:	7961      	ldrb	r1, [r4, #5]
 8013a92:	4606      	mov	r6, r0
 8013a94:	4628      	mov	r0, r5
 8013a96:	f7f7 faa9 	bl	800afec <ucdr_serialize_uint8_t>
 8013a9a:	ea08 0807 	and.w	r8, r8, r7
 8013a9e:	ea06 0608 	and.w	r6, r6, r8
 8013aa2:	4006      	ands	r6, r0
 8013aa4:	7a21      	ldrb	r1, [r4, #8]
 8013aa6:	4628      	mov	r0, r5
 8013aa8:	f7f7 fa72 	bl	800af90 <ucdr_serialize_bool>
 8013aac:	7a23      	ldrb	r3, [r4, #8]
 8013aae:	b2f7      	uxtb	r7, r6
 8013ab0:	4606      	mov	r6, r0
 8013ab2:	b96b      	cbnz	r3, 8013ad0 <uxr_serialize_INFO_Payload+0x64>
 8013ab4:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8013ab8:	4628      	mov	r0, r5
 8013aba:	f7f7 fa69 	bl	800af90 <ucdr_serialize_bool>
 8013abe:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8013ac2:	4030      	ands	r0, r6
 8013ac4:	b2c6      	uxtb	r6, r0
 8013ac6:	b983      	cbnz	r3, 8013aea <uxr_serialize_INFO_Payload+0x7e>
 8013ac8:	ea06 0007 	and.w	r0, r6, r7
 8013acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ad0:	7b21      	ldrb	r1, [r4, #12]
 8013ad2:	4628      	mov	r0, r5
 8013ad4:	f7f7 fa8a 	bl	800afec <ucdr_serialize_uint8_t>
 8013ad8:	b188      	cbz	r0, 8013afe <uxr_serialize_INFO_Payload+0x92>
 8013ada:	f104 010c 	add.w	r1, r4, #12
 8013ade:	4628      	mov	r0, r5
 8013ae0:	f7ff fabe 	bl	8013060 <uxr_serialize_ObjectVariant.part.0>
 8013ae4:	4030      	ands	r0, r6
 8013ae6:	b2c6      	uxtb	r6, r0
 8013ae8:	e7e4      	b.n	8013ab4 <uxr_serialize_INFO_Payload+0x48>
 8013aea:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8013aee:	4628      	mov	r0, r5
 8013af0:	f7ff fdb2 	bl	8013658 <uxr_serialize_ActivityInfoVariant>
 8013af4:	4006      	ands	r6, r0
 8013af6:	ea06 0007 	and.w	r0, r6, r7
 8013afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013afe:	4606      	mov	r6, r0
 8013b00:	e7d8      	b.n	8013ab4 <uxr_serialize_INFO_Payload+0x48>
 8013b02:	bf00      	nop

08013b04 <uxr_serialize_READ_DATA_Payload>:
 8013b04:	b570      	push	{r4, r5, r6, lr}
 8013b06:	2202      	movs	r2, #2
 8013b08:	4605      	mov	r5, r0
 8013b0a:	460e      	mov	r6, r1
 8013b0c:	f003 fc5a 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 8013b10:	2202      	movs	r2, #2
 8013b12:	18b1      	adds	r1, r6, r2
 8013b14:	4604      	mov	r4, r0
 8013b16:	4628      	mov	r0, r5
 8013b18:	f003 fc54 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 8013b1c:	1d31      	adds	r1, r6, #4
 8013b1e:	4004      	ands	r4, r0
 8013b20:	4628      	mov	r0, r5
 8013b22:	f7ff fe5d 	bl	80137e0 <uxr_serialize_ReadSpecification>
 8013b26:	b2e4      	uxtb	r4, r4
 8013b28:	4020      	ands	r0, r4
 8013b2a:	bd70      	pop	{r4, r5, r6, pc}

08013b2c <uxr_serialize_WRITE_DATA_Payload_Data>:
 8013b2c:	b570      	push	{r4, r5, r6, lr}
 8013b2e:	2202      	movs	r2, #2
 8013b30:	4605      	mov	r5, r0
 8013b32:	460e      	mov	r6, r1
 8013b34:	f003 fc46 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 8013b38:	2202      	movs	r2, #2
 8013b3a:	4604      	mov	r4, r0
 8013b3c:	18b1      	adds	r1, r6, r2
 8013b3e:	4628      	mov	r0, r5
 8013b40:	f003 fc40 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 8013b44:	4020      	ands	r0, r4
 8013b46:	b2c0      	uxtb	r0, r0
 8013b48:	bd70      	pop	{r4, r5, r6, pc}
 8013b4a:	bf00      	nop

08013b4c <uxr_serialize_ACKNACK_Payload>:
 8013b4c:	b570      	push	{r4, r5, r6, lr}
 8013b4e:	460c      	mov	r4, r1
 8013b50:	460e      	mov	r6, r1
 8013b52:	f834 1b02 	ldrh.w	r1, [r4], #2
 8013b56:	4605      	mov	r5, r0
 8013b58:	f7f7 fa74 	bl	800b044 <ucdr_serialize_uint16_t>
 8013b5c:	2202      	movs	r2, #2
 8013b5e:	4621      	mov	r1, r4
 8013b60:	4604      	mov	r4, r0
 8013b62:	4628      	mov	r0, r5
 8013b64:	f003 fc2e 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 8013b68:	7931      	ldrb	r1, [r6, #4]
 8013b6a:	4004      	ands	r4, r0
 8013b6c:	4628      	mov	r0, r5
 8013b6e:	f7f7 fa3d 	bl	800afec <ucdr_serialize_uint8_t>
 8013b72:	b2e4      	uxtb	r4, r4
 8013b74:	4020      	ands	r0, r4
 8013b76:	bd70      	pop	{r4, r5, r6, pc}

08013b78 <uxr_deserialize_ACKNACK_Payload>:
 8013b78:	b570      	push	{r4, r5, r6, lr}
 8013b7a:	4605      	mov	r5, r0
 8013b7c:	460e      	mov	r6, r1
 8013b7e:	f7f7 fb61 	bl	800b244 <ucdr_deserialize_uint16_t>
 8013b82:	2202      	movs	r2, #2
 8013b84:	18b1      	adds	r1, r6, r2
 8013b86:	4604      	mov	r4, r0
 8013b88:	4628      	mov	r0, r5
 8013b8a:	f003 fc7f 	bl	801748c <ucdr_deserialize_array_uint8_t>
 8013b8e:	1d31      	adds	r1, r6, #4
 8013b90:	4004      	ands	r4, r0
 8013b92:	4628      	mov	r0, r5
 8013b94:	f7f7 fa40 	bl	800b018 <ucdr_deserialize_uint8_t>
 8013b98:	b2e4      	uxtb	r4, r4
 8013b9a:	4020      	ands	r0, r4
 8013b9c:	bd70      	pop	{r4, r5, r6, pc}
 8013b9e:	bf00      	nop

08013ba0 <uxr_serialize_HEARTBEAT_Payload>:
 8013ba0:	b570      	push	{r4, r5, r6, lr}
 8013ba2:	460d      	mov	r5, r1
 8013ba4:	8809      	ldrh	r1, [r1, #0]
 8013ba6:	4606      	mov	r6, r0
 8013ba8:	f7f7 fa4c 	bl	800b044 <ucdr_serialize_uint16_t>
 8013bac:	8869      	ldrh	r1, [r5, #2]
 8013bae:	4604      	mov	r4, r0
 8013bb0:	4630      	mov	r0, r6
 8013bb2:	f7f7 fa47 	bl	800b044 <ucdr_serialize_uint16_t>
 8013bb6:	7929      	ldrb	r1, [r5, #4]
 8013bb8:	4004      	ands	r4, r0
 8013bba:	4630      	mov	r0, r6
 8013bbc:	f7f7 fa16 	bl	800afec <ucdr_serialize_uint8_t>
 8013bc0:	b2e4      	uxtb	r4, r4
 8013bc2:	4020      	ands	r0, r4
 8013bc4:	bd70      	pop	{r4, r5, r6, pc}
 8013bc6:	bf00      	nop

08013bc8 <uxr_deserialize_HEARTBEAT_Payload>:
 8013bc8:	b570      	push	{r4, r5, r6, lr}
 8013bca:	4605      	mov	r5, r0
 8013bcc:	460e      	mov	r6, r1
 8013bce:	f7f7 fb39 	bl	800b244 <ucdr_deserialize_uint16_t>
 8013bd2:	1cb1      	adds	r1, r6, #2
 8013bd4:	4604      	mov	r4, r0
 8013bd6:	4628      	mov	r0, r5
 8013bd8:	f7f7 fb34 	bl	800b244 <ucdr_deserialize_uint16_t>
 8013bdc:	1d31      	adds	r1, r6, #4
 8013bde:	4004      	ands	r4, r0
 8013be0:	4628      	mov	r0, r5
 8013be2:	f7f7 fa19 	bl	800b018 <ucdr_deserialize_uint8_t>
 8013be6:	b2e4      	uxtb	r4, r4
 8013be8:	4020      	ands	r0, r4
 8013bea:	bd70      	pop	{r4, r5, r6, pc}

08013bec <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8013bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bf0:	4605      	mov	r5, r0
 8013bf2:	460e      	mov	r6, r1
 8013bf4:	f7f8 f8c2 	bl	800bd7c <ucdr_deserialize_int32_t>
 8013bf8:	1d31      	adds	r1, r6, #4
 8013bfa:	4607      	mov	r7, r0
 8013bfc:	4628      	mov	r0, r5
 8013bfe:	f7f7 fd3b 	bl	800b678 <ucdr_deserialize_uint32_t>
 8013c02:	f106 0108 	add.w	r1, r6, #8
 8013c06:	4680      	mov	r8, r0
 8013c08:	4628      	mov	r0, r5
 8013c0a:	f7f8 f8b7 	bl	800bd7c <ucdr_deserialize_int32_t>
 8013c0e:	f106 010c 	add.w	r1, r6, #12
 8013c12:	4604      	mov	r4, r0
 8013c14:	4628      	mov	r0, r5
 8013c16:	f7f7 fd2f 	bl	800b678 <ucdr_deserialize_uint32_t>
 8013c1a:	ea07 0708 	and.w	r7, r7, r8
 8013c1e:	403c      	ands	r4, r7
 8013c20:	f106 0110 	add.w	r1, r6, #16
 8013c24:	4004      	ands	r4, r0
 8013c26:	4628      	mov	r0, r5
 8013c28:	f7f8 f8a8 	bl	800bd7c <ucdr_deserialize_int32_t>
 8013c2c:	f106 0114 	add.w	r1, r6, #20
 8013c30:	4607      	mov	r7, r0
 8013c32:	4628      	mov	r0, r5
 8013c34:	f7f7 fd20 	bl	800b678 <ucdr_deserialize_uint32_t>
 8013c38:	b2e4      	uxtb	r4, r4
 8013c3a:	403c      	ands	r4, r7
 8013c3c:	4020      	ands	r0, r4
 8013c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c42:	bf00      	nop

08013c44 <uxr_serialize_SampleIdentity>:
 8013c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c48:	220c      	movs	r2, #12
 8013c4a:	4604      	mov	r4, r0
 8013c4c:	460d      	mov	r5, r1
 8013c4e:	f003 fbb9 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 8013c52:	2203      	movs	r2, #3
 8013c54:	f105 010c 	add.w	r1, r5, #12
 8013c58:	4607      	mov	r7, r0
 8013c5a:	4620      	mov	r0, r4
 8013c5c:	f003 fbb2 	bl	80173c4 <ucdr_serialize_array_uint8_t>
 8013c60:	7be9      	ldrb	r1, [r5, #15]
 8013c62:	4680      	mov	r8, r0
 8013c64:	4620      	mov	r0, r4
 8013c66:	f7f7 f9c1 	bl	800afec <ucdr_serialize_uint8_t>
 8013c6a:	6929      	ldr	r1, [r5, #16]
 8013c6c:	4606      	mov	r6, r0
 8013c6e:	4620      	mov	r0, r4
 8013c70:	f7f7 ffec 	bl	800bc4c <ucdr_serialize_int32_t>
 8013c74:	6969      	ldr	r1, [r5, #20]
 8013c76:	4603      	mov	r3, r0
 8013c78:	4620      	mov	r0, r4
 8013c7a:	ea07 0708 	and.w	r7, r7, r8
 8013c7e:	461c      	mov	r4, r3
 8013c80:	f7f7 fbca 	bl	800b418 <ucdr_serialize_uint32_t>
 8013c84:	403e      	ands	r6, r7
 8013c86:	4034      	ands	r4, r6
 8013c88:	4020      	ands	r0, r4
 8013c8a:	b2c0      	uxtb	r0, r0
 8013c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013c90 <uxr_deserialize_SampleIdentity>:
 8013c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c94:	220c      	movs	r2, #12
 8013c96:	4604      	mov	r4, r0
 8013c98:	460d      	mov	r5, r1
 8013c9a:	f003 fbf7 	bl	801748c <ucdr_deserialize_array_uint8_t>
 8013c9e:	2203      	movs	r2, #3
 8013ca0:	f105 010c 	add.w	r1, r5, #12
 8013ca4:	4607      	mov	r7, r0
 8013ca6:	4620      	mov	r0, r4
 8013ca8:	f003 fbf0 	bl	801748c <ucdr_deserialize_array_uint8_t>
 8013cac:	f105 010f 	add.w	r1, r5, #15
 8013cb0:	4680      	mov	r8, r0
 8013cb2:	4620      	mov	r0, r4
 8013cb4:	f7f7 f9b0 	bl	800b018 <ucdr_deserialize_uint8_t>
 8013cb8:	f105 0110 	add.w	r1, r5, #16
 8013cbc:	4606      	mov	r6, r0
 8013cbe:	4620      	mov	r0, r4
 8013cc0:	f7f8 f85c 	bl	800bd7c <ucdr_deserialize_int32_t>
 8013cc4:	f105 0114 	add.w	r1, r5, #20
 8013cc8:	4603      	mov	r3, r0
 8013cca:	4620      	mov	r0, r4
 8013ccc:	ea07 0708 	and.w	r7, r7, r8
 8013cd0:	461c      	mov	r4, r3
 8013cd2:	f7f7 fcd1 	bl	800b678 <ucdr_deserialize_uint32_t>
 8013cd6:	403e      	ands	r6, r7
 8013cd8:	4034      	ands	r4, r6
 8013cda:	4020      	ands	r0, r4
 8013cdc:	b2c0      	uxtb	r0, r0
 8013cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ce2:	bf00      	nop

08013ce4 <rcl_convert_rmw_ret_to_rcl_ret>:
 8013ce4:	280b      	cmp	r0, #11
 8013ce6:	dc0d      	bgt.n	8013d04 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8013ce8:	2800      	cmp	r0, #0
 8013cea:	db09      	blt.n	8013d00 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013cec:	280b      	cmp	r0, #11
 8013cee:	d807      	bhi.n	8013d00 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013cf0:	e8df f000 	tbb	[pc, r0]
 8013cf4:	07060607 	.word	0x07060607
 8013cf8:	06060606 	.word	0x06060606
 8013cfc:	07070606 	.word	0x07070606
 8013d00:	2001      	movs	r0, #1
 8013d02:	4770      	bx	lr
 8013d04:	28cb      	cmp	r0, #203	@ 0xcb
 8013d06:	bf18      	it	ne
 8013d08:	2001      	movne	r0, #1
 8013d0a:	4770      	bx	lr

08013d0c <rcl_get_zero_initialized_context>:
 8013d0c:	4a03      	ldr	r2, [pc, #12]	@ (8013d1c <rcl_get_zero_initialized_context+0x10>)
 8013d0e:	4603      	mov	r3, r0
 8013d10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013d14:	e883 0003 	stmia.w	r3, {r0, r1}
 8013d18:	4618      	mov	r0, r3
 8013d1a:	4770      	bx	lr
 8013d1c:	0801a6fc 	.word	0x0801a6fc

08013d20 <rcl_context_is_valid>:
 8013d20:	b118      	cbz	r0, 8013d2a <rcl_context_is_valid+0xa>
 8013d22:	6840      	ldr	r0, [r0, #4]
 8013d24:	3800      	subs	r0, #0
 8013d26:	bf18      	it	ne
 8013d28:	2001      	movne	r0, #1
 8013d2a:	4770      	bx	lr

08013d2c <__cleanup_context>:
 8013d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d30:	4606      	mov	r6, r0
 8013d32:	6800      	ldr	r0, [r0, #0]
 8013d34:	2300      	movs	r3, #0
 8013d36:	6073      	str	r3, [r6, #4]
 8013d38:	2800      	cmp	r0, #0
 8013d3a:	d049      	beq.n	8013dd0 <__cleanup_context+0xa4>
 8013d3c:	6947      	ldr	r7, [r0, #20]
 8013d3e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8013d42:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8013d46:	b137      	cbz	r7, 8013d56 <__cleanup_context+0x2a>
 8013d48:	3014      	adds	r0, #20
 8013d4a:	f7f8 fcaf 	bl	800c6ac <rcl_init_options_fini>
 8013d4e:	4607      	mov	r7, r0
 8013d50:	2800      	cmp	r0, #0
 8013d52:	d144      	bne.n	8013dde <__cleanup_context+0xb2>
 8013d54:	6830      	ldr	r0, [r6, #0]
 8013d56:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013d58:	b143      	cbz	r3, 8013d6c <__cleanup_context+0x40>
 8013d5a:	3028      	adds	r0, #40	@ 0x28
 8013d5c:	f7fb f8b4 	bl	800eec8 <rmw_context_fini>
 8013d60:	b118      	cbz	r0, 8013d6a <__cleanup_context+0x3e>
 8013d62:	2f00      	cmp	r7, #0
 8013d64:	d03e      	beq.n	8013de4 <__cleanup_context+0xb8>
 8013d66:	f7fa f8e3 	bl	800df30 <rcutils_reset_error>
 8013d6a:	6830      	ldr	r0, [r6, #0]
 8013d6c:	6a03      	ldr	r3, [r0, #32]
 8013d6e:	b1db      	cbz	r3, 8013da8 <__cleanup_context+0x7c>
 8013d70:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8013d74:	2a01      	cmp	r2, #1
 8013d76:	f17c 0100 	sbcs.w	r1, ip, #0
 8013d7a:	db11      	blt.n	8013da0 <__cleanup_context+0x74>
 8013d7c:	2400      	movs	r4, #0
 8013d7e:	4625      	mov	r5, r4
 8013d80:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013d84:	4649      	mov	r1, r9
 8013d86:	b1b8      	cbz	r0, 8013db8 <__cleanup_context+0x8c>
 8013d88:	47c0      	blx	r8
 8013d8a:	6833      	ldr	r3, [r6, #0]
 8013d8c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8013d90:	3401      	adds	r4, #1
 8013d92:	f145 0500 	adc.w	r5, r5, #0
 8013d96:	4294      	cmp	r4, r2
 8013d98:	eb75 010c 	sbcs.w	r1, r5, ip
 8013d9c:	6a1b      	ldr	r3, [r3, #32]
 8013d9e:	dbef      	blt.n	8013d80 <__cleanup_context+0x54>
 8013da0:	4618      	mov	r0, r3
 8013da2:	4649      	mov	r1, r9
 8013da4:	47c0      	blx	r8
 8013da6:	6830      	ldr	r0, [r6, #0]
 8013da8:	4649      	mov	r1, r9
 8013daa:	47c0      	blx	r8
 8013dac:	2300      	movs	r3, #0
 8013dae:	e9c6 3300 	strd	r3, r3, [r6]
 8013db2:	4638      	mov	r0, r7
 8013db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013db8:	3401      	adds	r4, #1
 8013dba:	f145 0500 	adc.w	r5, r5, #0
 8013dbe:	4294      	cmp	r4, r2
 8013dc0:	eb75 010c 	sbcs.w	r1, r5, ip
 8013dc4:	dbdc      	blt.n	8013d80 <__cleanup_context+0x54>
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	4649      	mov	r1, r9
 8013dca:	47c0      	blx	r8
 8013dcc:	6830      	ldr	r0, [r6, #0]
 8013dce:	e7eb      	b.n	8013da8 <__cleanup_context+0x7c>
 8013dd0:	4607      	mov	r7, r0
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	e9c6 3300 	strd	r3, r3, [r6]
 8013dd8:	4638      	mov	r0, r7
 8013dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013dde:	f7fa f8a7 	bl	800df30 <rcutils_reset_error>
 8013de2:	e7b7      	b.n	8013d54 <__cleanup_context+0x28>
 8013de4:	f7ff ff7e 	bl	8013ce4 <rcl_convert_rmw_ret_to_rcl_ret>
 8013de8:	4607      	mov	r7, r0
 8013dea:	e7bc      	b.n	8013d66 <__cleanup_context+0x3a>

08013dec <rcl_expand_topic_name>:
 8013dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013df0:	b08b      	sub	sp, #44	@ 0x2c
 8013df2:	9306      	str	r3, [sp, #24]
 8013df4:	2800      	cmp	r0, #0
 8013df6:	f000 80ad 	beq.w	8013f54 <rcl_expand_topic_name+0x168>
 8013dfa:	460e      	mov	r6, r1
 8013dfc:	2900      	cmp	r1, #0
 8013dfe:	f000 80a9 	beq.w	8013f54 <rcl_expand_topic_name+0x168>
 8013e02:	4617      	mov	r7, r2
 8013e04:	2a00      	cmp	r2, #0
 8013e06:	f000 80a5 	beq.w	8013f54 <rcl_expand_topic_name+0x168>
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	f000 80a2 	beq.w	8013f54 <rcl_expand_topic_name+0x168>
 8013e10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	f000 809e 	beq.w	8013f54 <rcl_expand_topic_name+0x168>
 8013e18:	2200      	movs	r2, #0
 8013e1a:	a909      	add	r1, sp, #36	@ 0x24
 8013e1c:	4680      	mov	r8, r0
 8013e1e:	f001 f963 	bl	80150e8 <rcl_validate_topic_name>
 8013e22:	4604      	mov	r4, r0
 8013e24:	2800      	cmp	r0, #0
 8013e26:	f040 8096 	bne.w	8013f56 <rcl_expand_topic_name+0x16a>
 8013e2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	f040 809a 	bne.w	8013f66 <rcl_expand_topic_name+0x17a>
 8013e32:	4602      	mov	r2, r0
 8013e34:	a909      	add	r1, sp, #36	@ 0x24
 8013e36:	4630      	mov	r0, r6
 8013e38:	f7fa fc64 	bl	800e704 <rmw_validate_node_name>
 8013e3c:	2800      	cmp	r0, #0
 8013e3e:	f040 808e 	bne.w	8013f5e <rcl_expand_topic_name+0x172>
 8013e42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013e44:	2a00      	cmp	r2, #0
 8013e46:	f040 8093 	bne.w	8013f70 <rcl_expand_topic_name+0x184>
 8013e4a:	a909      	add	r1, sp, #36	@ 0x24
 8013e4c:	4638      	mov	r0, r7
 8013e4e:	f7fa fc3b 	bl	800e6c8 <rmw_validate_namespace>
 8013e52:	2800      	cmp	r0, #0
 8013e54:	f040 8083 	bne.w	8013f5e <rcl_expand_topic_name+0x172>
 8013e58:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8013e5a:	2c00      	cmp	r4, #0
 8013e5c:	f040 80ed 	bne.w	801403a <rcl_expand_topic_name+0x24e>
 8013e60:	217b      	movs	r1, #123	@ 0x7b
 8013e62:	4640      	mov	r0, r8
 8013e64:	f004 fe1c 	bl	8018aa0 <strchr>
 8013e68:	f898 3000 	ldrb.w	r3, [r8]
 8013e6c:	2b2f      	cmp	r3, #47	@ 0x2f
 8013e6e:	4605      	mov	r5, r0
 8013e70:	f000 809e 	beq.w	8013fb0 <rcl_expand_topic_name+0x1c4>
 8013e74:	2b7e      	cmp	r3, #126	@ 0x7e
 8013e76:	f040 80a2 	bne.w	8013fbe <rcl_expand_topic_name+0x1d2>
 8013e7a:	4638      	mov	r0, r7
 8013e7c:	f7ec f9da 	bl	8000234 <strlen>
 8013e80:	4a82      	ldr	r2, [pc, #520]	@ (801408c <rcl_expand_topic_name+0x2a0>)
 8013e82:	4b83      	ldr	r3, [pc, #524]	@ (8014090 <rcl_expand_topic_name+0x2a4>)
 8013e84:	2801      	cmp	r0, #1
 8013e86:	bf18      	it	ne
 8013e88:	4613      	movne	r3, r2
 8013e8a:	9302      	str	r3, [sp, #8]
 8013e8c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8013e8e:	9300      	str	r3, [sp, #0]
 8013e90:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8013e94:	f108 0301 	add.w	r3, r8, #1
 8013e98:	9305      	str	r3, [sp, #20]
 8013e9a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013e9e:	9301      	str	r3, [sp, #4]
 8013ea0:	ab14      	add	r3, sp, #80	@ 0x50
 8013ea2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013ea4:	f7fa f860 	bl	800df68 <rcutils_format_string_limit>
 8013ea8:	4682      	mov	sl, r0
 8013eaa:	2800      	cmp	r0, #0
 8013eac:	f000 80c7 	beq.w	801403e <rcl_expand_topic_name+0x252>
 8013eb0:	2d00      	cmp	r5, #0
 8013eb2:	f000 80a2 	beq.w	8013ffa <rcl_expand_topic_name+0x20e>
 8013eb6:	217b      	movs	r1, #123	@ 0x7b
 8013eb8:	f004 fdf2 	bl	8018aa0 <strchr>
 8013ebc:	46d1      	mov	r9, sl
 8013ebe:	4605      	mov	r5, r0
 8013ec0:	9407      	str	r4, [sp, #28]
 8013ec2:	46d3      	mov	fp, sl
 8013ec4:	464c      	mov	r4, r9
 8013ec6:	2d00      	cmp	r5, #0
 8013ec8:	f000 80be 	beq.w	8014048 <rcl_expand_topic_name+0x25c>
 8013ecc:	217d      	movs	r1, #125	@ 0x7d
 8013ece:	4620      	mov	r0, r4
 8013ed0:	f004 fde6 	bl	8018aa0 <strchr>
 8013ed4:	eba0 0905 	sub.w	r9, r0, r5
 8013ed8:	f109 0a01 	add.w	sl, r9, #1
 8013edc:	486d      	ldr	r0, [pc, #436]	@ (8014094 <rcl_expand_topic_name+0x2a8>)
 8013ede:	4652      	mov	r2, sl
 8013ee0:	4629      	mov	r1, r5
 8013ee2:	f004 fdea 	bl	8018aba <strncmp>
 8013ee6:	2800      	cmp	r0, #0
 8013ee8:	d067      	beq.n	8013fba <rcl_expand_topic_name+0x1ce>
 8013eea:	486b      	ldr	r0, [pc, #428]	@ (8014098 <rcl_expand_topic_name+0x2ac>)
 8013eec:	4652      	mov	r2, sl
 8013eee:	4629      	mov	r1, r5
 8013ef0:	f004 fde3 	bl	8018aba <strncmp>
 8013ef4:	b130      	cbz	r0, 8013f04 <rcl_expand_topic_name+0x118>
 8013ef6:	4869      	ldr	r0, [pc, #420]	@ (801409c <rcl_expand_topic_name+0x2b0>)
 8013ef8:	4652      	mov	r2, sl
 8013efa:	4629      	mov	r1, r5
 8013efc:	f004 fddd 	bl	8018aba <strncmp>
 8013f00:	2800      	cmp	r0, #0
 8013f02:	d137      	bne.n	8013f74 <rcl_expand_topic_name+0x188>
 8013f04:	46b9      	mov	r9, r7
 8013f06:	ab16      	add	r3, sp, #88	@ 0x58
 8013f08:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013f0c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013f10:	ab14      	add	r3, sp, #80	@ 0x50
 8013f12:	4628      	mov	r0, r5
 8013f14:	cb0c      	ldmia	r3, {r2, r3}
 8013f16:	4651      	mov	r1, sl
 8013f18:	f7fa f962 	bl	800e1e0 <rcutils_strndup>
 8013f1c:	4605      	mov	r5, r0
 8013f1e:	2800      	cmp	r0, #0
 8013f20:	f000 809c 	beq.w	801405c <rcl_expand_topic_name+0x270>
 8013f24:	464a      	mov	r2, r9
 8013f26:	4620      	mov	r0, r4
 8013f28:	ab14      	add	r3, sp, #80	@ 0x50
 8013f2a:	4629      	mov	r1, r5
 8013f2c:	f7fa f856 	bl	800dfdc <rcutils_repl_str>
 8013f30:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8013f32:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013f34:	4604      	mov	r4, r0
 8013f36:	4628      	mov	r0, r5
 8013f38:	4798      	blx	r3
 8013f3a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013f3c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8013f3e:	4658      	mov	r0, fp
 8013f40:	4798      	blx	r3
 8013f42:	2c00      	cmp	r4, #0
 8013f44:	d07b      	beq.n	801403e <rcl_expand_topic_name+0x252>
 8013f46:	217b      	movs	r1, #123	@ 0x7b
 8013f48:	4620      	mov	r0, r4
 8013f4a:	f004 fda9 	bl	8018aa0 <strchr>
 8013f4e:	46a3      	mov	fp, r4
 8013f50:	4605      	mov	r5, r0
 8013f52:	e7b8      	b.n	8013ec6 <rcl_expand_topic_name+0xda>
 8013f54:	240b      	movs	r4, #11
 8013f56:	4620      	mov	r0, r4
 8013f58:	b00b      	add	sp, #44	@ 0x2c
 8013f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f5e:	f7ff fec1 	bl	8013ce4 <rcl_convert_rmw_ret_to_rcl_ret>
 8013f62:	4604      	mov	r4, r0
 8013f64:	e7f7      	b.n	8013f56 <rcl_expand_topic_name+0x16a>
 8013f66:	2467      	movs	r4, #103	@ 0x67
 8013f68:	4620      	mov	r0, r4
 8013f6a:	b00b      	add	sp, #44	@ 0x2c
 8013f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f70:	24c9      	movs	r4, #201	@ 0xc9
 8013f72:	e7f0      	b.n	8013f56 <rcl_expand_topic_name+0x16a>
 8013f74:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8013f78:	9806      	ldr	r0, [sp, #24]
 8013f7a:	1c69      	adds	r1, r5, #1
 8013f7c:	f7fa fa4a 	bl	800e414 <rcutils_string_map_getn>
 8013f80:	4681      	mov	r9, r0
 8013f82:	2800      	cmp	r0, #0
 8013f84:	d1bf      	bne.n	8013f06 <rcl_expand_topic_name+0x11a>
 8013f86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013f88:	aa16      	add	r2, sp, #88	@ 0x58
 8013f8a:	6018      	str	r0, [r3, #0]
 8013f8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8013f8e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013f92:	ab14      	add	r3, sp, #80	@ 0x50
 8013f94:	cb0c      	ldmia	r3, {r2, r3}
 8013f96:	4651      	mov	r1, sl
 8013f98:	4628      	mov	r0, r5
 8013f9a:	f7fa f921 	bl	800e1e0 <rcutils_strndup>
 8013f9e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8013fa0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013fa2:	4798      	blx	r3
 8013fa4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013fa6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8013fa8:	4658      	mov	r0, fp
 8013faa:	2469      	movs	r4, #105	@ 0x69
 8013fac:	4798      	blx	r3
 8013fae:	e7d2      	b.n	8013f56 <rcl_expand_topic_name+0x16a>
 8013fb0:	2800      	cmp	r0, #0
 8013fb2:	d05b      	beq.n	801406c <rcl_expand_topic_name+0x280>
 8013fb4:	46c1      	mov	r9, r8
 8013fb6:	46a2      	mov	sl, r4
 8013fb8:	e782      	b.n	8013ec0 <rcl_expand_topic_name+0xd4>
 8013fba:	46b1      	mov	r9, r6
 8013fbc:	e7a3      	b.n	8013f06 <rcl_expand_topic_name+0x11a>
 8013fbe:	2800      	cmp	r0, #0
 8013fc0:	d1f8      	bne.n	8013fb4 <rcl_expand_topic_name+0x1c8>
 8013fc2:	4638      	mov	r0, r7
 8013fc4:	f7ec f936 	bl	8000234 <strlen>
 8013fc8:	4a35      	ldr	r2, [pc, #212]	@ (80140a0 <rcl_expand_topic_name+0x2b4>)
 8013fca:	4b36      	ldr	r3, [pc, #216]	@ (80140a4 <rcl_expand_topic_name+0x2b8>)
 8013fcc:	f8cd 8010 	str.w	r8, [sp, #16]
 8013fd0:	2801      	cmp	r0, #1
 8013fd2:	bf18      	it	ne
 8013fd4:	4613      	movne	r3, r2
 8013fd6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8013fda:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8013fde:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8013fe0:	9703      	str	r7, [sp, #12]
 8013fe2:	9200      	str	r2, [sp, #0]
 8013fe4:	ab14      	add	r3, sp, #80	@ 0x50
 8013fe6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013fe8:	f7f9 ffbe 	bl	800df68 <rcutils_format_string_limit>
 8013fec:	4682      	mov	sl, r0
 8013fee:	4653      	mov	r3, sl
 8013ff0:	b32b      	cbz	r3, 801403e <rcl_expand_topic_name+0x252>
 8013ff2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013ff4:	f8c3 a000 	str.w	sl, [r3]
 8013ff8:	e7ad      	b.n	8013f56 <rcl_expand_topic_name+0x16a>
 8013ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8013ffe:	2b2f      	cmp	r3, #47	@ 0x2f
 8014000:	d0f7      	beq.n	8013ff2 <rcl_expand_topic_name+0x206>
 8014002:	4638      	mov	r0, r7
 8014004:	f7ec f916 	bl	8000234 <strlen>
 8014008:	4a25      	ldr	r2, [pc, #148]	@ (80140a0 <rcl_expand_topic_name+0x2b4>)
 801400a:	4b26      	ldr	r3, [pc, #152]	@ (80140a4 <rcl_expand_topic_name+0x2b8>)
 801400c:	f8cd a010 	str.w	sl, [sp, #16]
 8014010:	2801      	cmp	r0, #1
 8014012:	bf18      	it	ne
 8014014:	4613      	movne	r3, r2
 8014016:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801401a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801401e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8014020:	9703      	str	r7, [sp, #12]
 8014022:	9200      	str	r2, [sp, #0]
 8014024:	ab14      	add	r3, sp, #80	@ 0x50
 8014026:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014028:	f7f9 ff9e 	bl	800df68 <rcutils_format_string_limit>
 801402c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801402e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014030:	4605      	mov	r5, r0
 8014032:	4650      	mov	r0, sl
 8014034:	4798      	blx	r3
 8014036:	46aa      	mov	sl, r5
 8014038:	e7d9      	b.n	8013fee <rcl_expand_topic_name+0x202>
 801403a:	24ca      	movs	r4, #202	@ 0xca
 801403c:	e78b      	b.n	8013f56 <rcl_expand_topic_name+0x16a>
 801403e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014040:	2300      	movs	r3, #0
 8014042:	6013      	str	r3, [r2, #0]
 8014044:	240a      	movs	r4, #10
 8014046:	e786      	b.n	8013f56 <rcl_expand_topic_name+0x16a>
 8014048:	465b      	mov	r3, fp
 801404a:	9c07      	ldr	r4, [sp, #28]
 801404c:	46da      	mov	sl, fp
 801404e:	2b00      	cmp	r3, #0
 8014050:	d1d3      	bne.n	8013ffa <rcl_expand_topic_name+0x20e>
 8014052:	f898 3000 	ldrb.w	r3, [r8]
 8014056:	2b2f      	cmp	r3, #47	@ 0x2f
 8014058:	d0cb      	beq.n	8013ff2 <rcl_expand_topic_name+0x206>
 801405a:	e7b2      	b.n	8013fc2 <rcl_expand_topic_name+0x1d6>
 801405c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8014060:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014062:	6015      	str	r5, [r2, #0]
 8014064:	4658      	mov	r0, fp
 8014066:	4798      	blx	r3
 8014068:	240a      	movs	r4, #10
 801406a:	e774      	b.n	8013f56 <rcl_expand_topic_name+0x16a>
 801406c:	ab17      	add	r3, sp, #92	@ 0x5c
 801406e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014072:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014076:	ab14      	add	r3, sp, #80	@ 0x50
 8014078:	cb0e      	ldmia	r3, {r1, r2, r3}
 801407a:	4640      	mov	r0, r8
 801407c:	f7fa f88e 	bl	800e19c <rcutils_strdup>
 8014080:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014082:	2800      	cmp	r0, #0
 8014084:	6018      	str	r0, [r3, #0]
 8014086:	bf08      	it	eq
 8014088:	240a      	moveq	r4, #10
 801408a:	e764      	b.n	8013f56 <rcl_expand_topic_name+0x16a>
 801408c:	0801a704 	.word	0x0801a704
 8014090:	0801a0d8 	.word	0x0801a0d8
 8014094:	0801a70c 	.word	0x0801a70c
 8014098:	0801a714 	.word	0x0801a714
 801409c:	0801a71c 	.word	0x0801a71c
 80140a0:	08019bdc 	.word	0x08019bdc
 80140a4:	08019bd4 	.word	0x08019bd4

080140a8 <rcl_get_default_topic_name_substitutions>:
 80140a8:	2800      	cmp	r0, #0
 80140aa:	bf0c      	ite	eq
 80140ac:	200b      	moveq	r0, #11
 80140ae:	2000      	movne	r0, #0
 80140b0:	4770      	bx	lr
 80140b2:	bf00      	nop

080140b4 <rcl_get_zero_initialized_guard_condition>:
 80140b4:	4a03      	ldr	r2, [pc, #12]	@ (80140c4 <rcl_get_zero_initialized_guard_condition+0x10>)
 80140b6:	4603      	mov	r3, r0
 80140b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80140bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80140c0:	4618      	mov	r0, r3
 80140c2:	4770      	bx	lr
 80140c4:	0801a728 	.word	0x0801a728

080140c8 <rcl_guard_condition_init>:
 80140c8:	b082      	sub	sp, #8
 80140ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140cc:	b087      	sub	sp, #28
 80140ce:	ac0c      	add	r4, sp, #48	@ 0x30
 80140d0:	e884 000c 	stmia.w	r4, {r2, r3}
 80140d4:	46a6      	mov	lr, r4
 80140d6:	460d      	mov	r5, r1
 80140d8:	4604      	mov	r4, r0
 80140da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80140de:	f10d 0c04 	add.w	ip, sp, #4
 80140e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80140e6:	f8de 3000 	ldr.w	r3, [lr]
 80140ea:	f8cc 3000 	str.w	r3, [ip]
 80140ee:	a801      	add	r0, sp, #4
 80140f0:	f7f9 fe3c 	bl	800dd6c <rcutils_allocator_is_valid>
 80140f4:	b338      	cbz	r0, 8014146 <rcl_guard_condition_init+0x7e>
 80140f6:	b334      	cbz	r4, 8014146 <rcl_guard_condition_init+0x7e>
 80140f8:	6866      	ldr	r6, [r4, #4]
 80140fa:	b9ee      	cbnz	r6, 8014138 <rcl_guard_condition_init+0x70>
 80140fc:	b31d      	cbz	r5, 8014146 <rcl_guard_condition_init+0x7e>
 80140fe:	4628      	mov	r0, r5
 8014100:	f7ff fe0e 	bl	8013d20 <rcl_context_is_valid>
 8014104:	b308      	cbz	r0, 801414a <rcl_guard_condition_init+0x82>
 8014106:	9b01      	ldr	r3, [sp, #4]
 8014108:	9905      	ldr	r1, [sp, #20]
 801410a:	201c      	movs	r0, #28
 801410c:	4798      	blx	r3
 801410e:	4607      	mov	r7, r0
 8014110:	6060      	str	r0, [r4, #4]
 8014112:	b310      	cbz	r0, 801415a <rcl_guard_condition_init+0x92>
 8014114:	6828      	ldr	r0, [r5, #0]
 8014116:	3028      	adds	r0, #40	@ 0x28
 8014118:	f002 fdc2 	bl	8016ca0 <rmw_create_guard_condition>
 801411c:	6038      	str	r0, [r7, #0]
 801411e:	6860      	ldr	r0, [r4, #4]
 8014120:	6805      	ldr	r5, [r0, #0]
 8014122:	b1a5      	cbz	r5, 801414e <rcl_guard_condition_init+0x86>
 8014124:	2301      	movs	r3, #1
 8014126:	ac01      	add	r4, sp, #4
 8014128:	7103      	strb	r3, [r0, #4]
 801412a:	f100 0708 	add.w	r7, r0, #8
 801412e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014130:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014132:	6823      	ldr	r3, [r4, #0]
 8014134:	603b      	str	r3, [r7, #0]
 8014136:	e000      	b.n	801413a <rcl_guard_condition_init+0x72>
 8014138:	2664      	movs	r6, #100	@ 0x64
 801413a:	4630      	mov	r0, r6
 801413c:	b007      	add	sp, #28
 801413e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014142:	b002      	add	sp, #8
 8014144:	4770      	bx	lr
 8014146:	260b      	movs	r6, #11
 8014148:	e7f7      	b.n	801413a <rcl_guard_condition_init+0x72>
 801414a:	2665      	movs	r6, #101	@ 0x65
 801414c:	e7f5      	b.n	801413a <rcl_guard_condition_init+0x72>
 801414e:	9b02      	ldr	r3, [sp, #8]
 8014150:	9905      	ldr	r1, [sp, #20]
 8014152:	4798      	blx	r3
 8014154:	2601      	movs	r6, #1
 8014156:	6065      	str	r5, [r4, #4]
 8014158:	e7ef      	b.n	801413a <rcl_guard_condition_init+0x72>
 801415a:	260a      	movs	r6, #10
 801415c:	e7ed      	b.n	801413a <rcl_guard_condition_init+0x72>
 801415e:	bf00      	nop

08014160 <rcl_guard_condition_init_from_rmw>:
 8014160:	b082      	sub	sp, #8
 8014162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014166:	b086      	sub	sp, #24
 8014168:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801416c:	4604      	mov	r4, r0
 801416e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8014172:	460e      	mov	r6, r1
 8014174:	4617      	mov	r7, r2
 8014176:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801417a:	f10d 0e04 	add.w	lr, sp, #4
 801417e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014182:	f8dc 3000 	ldr.w	r3, [ip]
 8014186:	f8ce 3000 	str.w	r3, [lr]
 801418a:	a801      	add	r0, sp, #4
 801418c:	f7f9 fdee 	bl	800dd6c <rcutils_allocator_is_valid>
 8014190:	b350      	cbz	r0, 80141e8 <rcl_guard_condition_init_from_rmw+0x88>
 8014192:	b34c      	cbz	r4, 80141e8 <rcl_guard_condition_init_from_rmw+0x88>
 8014194:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8014198:	f1b8 0f00 	cmp.w	r8, #0
 801419c:	d11e      	bne.n	80141dc <rcl_guard_condition_init_from_rmw+0x7c>
 801419e:	b31f      	cbz	r7, 80141e8 <rcl_guard_condition_init_from_rmw+0x88>
 80141a0:	4638      	mov	r0, r7
 80141a2:	f7ff fdbd 	bl	8013d20 <rcl_context_is_valid>
 80141a6:	b328      	cbz	r0, 80141f4 <rcl_guard_condition_init_from_rmw+0x94>
 80141a8:	9b01      	ldr	r3, [sp, #4]
 80141aa:	9905      	ldr	r1, [sp, #20]
 80141ac:	201c      	movs	r0, #28
 80141ae:	4798      	blx	r3
 80141b0:	4605      	mov	r5, r0
 80141b2:	6060      	str	r0, [r4, #4]
 80141b4:	b358      	cbz	r0, 801420e <rcl_guard_condition_init_from_rmw+0xae>
 80141b6:	b1fe      	cbz	r6, 80141f8 <rcl_guard_condition_init_from_rmw+0x98>
 80141b8:	6006      	str	r6, [r0, #0]
 80141ba:	f880 8004 	strb.w	r8, [r0, #4]
 80141be:	ac01      	add	r4, sp, #4
 80141c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80141c2:	f105 0c08 	add.w	ip, r5, #8
 80141c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80141ca:	6823      	ldr	r3, [r4, #0]
 80141cc:	f8cc 3000 	str.w	r3, [ip]
 80141d0:	2000      	movs	r0, #0
 80141d2:	b006      	add	sp, #24
 80141d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80141d8:	b002      	add	sp, #8
 80141da:	4770      	bx	lr
 80141dc:	2064      	movs	r0, #100	@ 0x64
 80141de:	b006      	add	sp, #24
 80141e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80141e4:	b002      	add	sp, #8
 80141e6:	4770      	bx	lr
 80141e8:	200b      	movs	r0, #11
 80141ea:	b006      	add	sp, #24
 80141ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80141f0:	b002      	add	sp, #8
 80141f2:	4770      	bx	lr
 80141f4:	2065      	movs	r0, #101	@ 0x65
 80141f6:	e7f2      	b.n	80141de <rcl_guard_condition_init_from_rmw+0x7e>
 80141f8:	6838      	ldr	r0, [r7, #0]
 80141fa:	3028      	adds	r0, #40	@ 0x28
 80141fc:	f002 fd50 	bl	8016ca0 <rmw_create_guard_condition>
 8014200:	6028      	str	r0, [r5, #0]
 8014202:	6865      	ldr	r5, [r4, #4]
 8014204:	682e      	ldr	r6, [r5, #0]
 8014206:	b126      	cbz	r6, 8014212 <rcl_guard_condition_init_from_rmw+0xb2>
 8014208:	2301      	movs	r3, #1
 801420a:	712b      	strb	r3, [r5, #4]
 801420c:	e7d7      	b.n	80141be <rcl_guard_condition_init_from_rmw+0x5e>
 801420e:	200a      	movs	r0, #10
 8014210:	e7e5      	b.n	80141de <rcl_guard_condition_init_from_rmw+0x7e>
 8014212:	4628      	mov	r0, r5
 8014214:	9b02      	ldr	r3, [sp, #8]
 8014216:	9905      	ldr	r1, [sp, #20]
 8014218:	4798      	blx	r3
 801421a:	6066      	str	r6, [r4, #4]
 801421c:	2001      	movs	r0, #1
 801421e:	e7de      	b.n	80141de <rcl_guard_condition_init_from_rmw+0x7e>

08014220 <rcl_guard_condition_fini>:
 8014220:	b570      	push	{r4, r5, r6, lr}
 8014222:	b082      	sub	sp, #8
 8014224:	b1f0      	cbz	r0, 8014264 <rcl_guard_condition_fini+0x44>
 8014226:	6843      	ldr	r3, [r0, #4]
 8014228:	4604      	mov	r4, r0
 801422a:	b163      	cbz	r3, 8014246 <rcl_guard_condition_fini+0x26>
 801422c:	6818      	ldr	r0, [r3, #0]
 801422e:	68de      	ldr	r6, [r3, #12]
 8014230:	6999      	ldr	r1, [r3, #24]
 8014232:	b160      	cbz	r0, 801424e <rcl_guard_condition_fini+0x2e>
 8014234:	791d      	ldrb	r5, [r3, #4]
 8014236:	b965      	cbnz	r5, 8014252 <rcl_guard_condition_fini+0x32>
 8014238:	4618      	mov	r0, r3
 801423a:	47b0      	blx	r6
 801423c:	2300      	movs	r3, #0
 801423e:	4628      	mov	r0, r5
 8014240:	6063      	str	r3, [r4, #4]
 8014242:	b002      	add	sp, #8
 8014244:	bd70      	pop	{r4, r5, r6, pc}
 8014246:	461d      	mov	r5, r3
 8014248:	4628      	mov	r0, r5
 801424a:	b002      	add	sp, #8
 801424c:	bd70      	pop	{r4, r5, r6, pc}
 801424e:	4605      	mov	r5, r0
 8014250:	e7f2      	b.n	8014238 <rcl_guard_condition_fini+0x18>
 8014252:	9101      	str	r1, [sp, #4]
 8014254:	f002 fd38 	bl	8016cc8 <rmw_destroy_guard_condition>
 8014258:	1e05      	subs	r5, r0, #0
 801425a:	6863      	ldr	r3, [r4, #4]
 801425c:	9901      	ldr	r1, [sp, #4]
 801425e:	bf18      	it	ne
 8014260:	2501      	movne	r5, #1
 8014262:	e7e9      	b.n	8014238 <rcl_guard_condition_fini+0x18>
 8014264:	250b      	movs	r5, #11
 8014266:	4628      	mov	r0, r5
 8014268:	b002      	add	sp, #8
 801426a:	bd70      	pop	{r4, r5, r6, pc}

0801426c <rcl_guard_condition_get_default_options>:
 801426c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801426e:	b087      	sub	sp, #28
 8014270:	4606      	mov	r6, r0
 8014272:	4668      	mov	r0, sp
 8014274:	f7f9 fd6c 	bl	800dd50 <rcutils_get_default_allocator>
 8014278:	4b09      	ldr	r3, [pc, #36]	@ (80142a0 <rcl_guard_condition_get_default_options+0x34>)
 801427a:	46ee      	mov	lr, sp
 801427c:	469c      	mov	ip, r3
 801427e:	461d      	mov	r5, r3
 8014280:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014284:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801428a:	4634      	mov	r4, r6
 801428c:	f8de 7000 	ldr.w	r7, [lr]
 8014290:	f8cc 7000 	str.w	r7, [ip]
 8014294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014296:	4630      	mov	r0, r6
 8014298:	6027      	str	r7, [r4, #0]
 801429a:	b007      	add	sp, #28
 801429c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801429e:	bf00      	nop
 80142a0:	2000b138 	.word	0x2000b138

080142a4 <rcl_trigger_guard_condition>:
 80142a4:	b148      	cbz	r0, 80142ba <rcl_trigger_guard_condition+0x16>
 80142a6:	b508      	push	{r3, lr}
 80142a8:	6843      	ldr	r3, [r0, #4]
 80142aa:	b143      	cbz	r3, 80142be <rcl_trigger_guard_condition+0x1a>
 80142ac:	6818      	ldr	r0, [r3, #0]
 80142ae:	f002 fde5 	bl	8016e7c <rmw_trigger_guard_condition>
 80142b2:	3800      	subs	r0, #0
 80142b4:	bf18      	it	ne
 80142b6:	2001      	movne	r0, #1
 80142b8:	bd08      	pop	{r3, pc}
 80142ba:	200b      	movs	r0, #11
 80142bc:	4770      	bx	lr
 80142be:	200b      	movs	r0, #11
 80142c0:	bd08      	pop	{r3, pc}
 80142c2:	bf00      	nop

080142c4 <rcl_guard_condition_get_rmw_handle>:
 80142c4:	b110      	cbz	r0, 80142cc <rcl_guard_condition_get_rmw_handle+0x8>
 80142c6:	6840      	ldr	r0, [r0, #4]
 80142c8:	b100      	cbz	r0, 80142cc <rcl_guard_condition_get_rmw_handle+0x8>
 80142ca:	6800      	ldr	r0, [r0, #0]
 80142cc:	4770      	bx	lr
 80142ce:	bf00      	nop

080142d0 <rcl_init>:
 80142d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142d4:	1e05      	subs	r5, r0, #0
 80142d6:	b09e      	sub	sp, #120	@ 0x78
 80142d8:	460e      	mov	r6, r1
 80142da:	4690      	mov	r8, r2
 80142dc:	461f      	mov	r7, r3
 80142de:	f340 809c 	ble.w	801441a <rcl_init+0x14a>
 80142e2:	2900      	cmp	r1, #0
 80142e4:	f000 809c 	beq.w	8014420 <rcl_init+0x150>
 80142e8:	f1a1 0e04 	sub.w	lr, r1, #4
 80142ec:	f04f 0c00 	mov.w	ip, #0
 80142f0:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80142f4:	f10c 0c01 	add.w	ip, ip, #1
 80142f8:	2c00      	cmp	r4, #0
 80142fa:	f000 8091 	beq.w	8014420 <rcl_init+0x150>
 80142fe:	4565      	cmp	r5, ip
 8014300:	d1f6      	bne.n	80142f0 <rcl_init+0x20>
 8014302:	f1b8 0f00 	cmp.w	r8, #0
 8014306:	f000 808b 	beq.w	8014420 <rcl_init+0x150>
 801430a:	f8d8 4000 	ldr.w	r4, [r8]
 801430e:	2c00      	cmp	r4, #0
 8014310:	f000 8086 	beq.w	8014420 <rcl_init+0x150>
 8014314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014316:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 801431a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801431e:	6823      	ldr	r3, [r4, #0]
 8014320:	f8cc 3000 	str.w	r3, [ip]
 8014324:	a819      	add	r0, sp, #100	@ 0x64
 8014326:	f7f9 fd21 	bl	800dd6c <rcutils_allocator_is_valid>
 801432a:	2800      	cmp	r0, #0
 801432c:	d078      	beq.n	8014420 <rcl_init+0x150>
 801432e:	2f00      	cmp	r7, #0
 8014330:	d076      	beq.n	8014420 <rcl_init+0x150>
 8014332:	683b      	ldr	r3, [r7, #0]
 8014334:	2b00      	cmp	r3, #0
 8014336:	d178      	bne.n	801442a <rcl_init+0x15a>
 8014338:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801433c:	2178      	movs	r1, #120	@ 0x78
 801433e:	2001      	movs	r0, #1
 8014340:	4798      	blx	r3
 8014342:	4604      	mov	r4, r0
 8014344:	6038      	str	r0, [r7, #0]
 8014346:	2800      	cmp	r0, #0
 8014348:	f000 80b6 	beq.w	80144b8 <rcl_init+0x1e8>
 801434c:	a802      	add	r0, sp, #8
 801434e:	f002 faff 	bl	8016950 <rmw_get_zero_initialized_context>
 8014352:	a902      	add	r1, sp, #8
 8014354:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8014358:	2250      	movs	r2, #80	@ 0x50
 801435a:	ac19      	add	r4, sp, #100	@ 0x64
 801435c:	f004 fc61 	bl	8018c22 <memcpy>
 8014360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014362:	f8d7 e000 	ldr.w	lr, [r7]
 8014366:	46f4      	mov	ip, lr
 8014368:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801436c:	6823      	ldr	r3, [r4, #0]
 801436e:	f8cc 3000 	str.w	r3, [ip]
 8014372:	f10e 0114 	add.w	r1, lr, #20
 8014376:	4640      	mov	r0, r8
 8014378:	f7f8 f9c2 	bl	800c700 <rcl_init_options_copy>
 801437c:	4604      	mov	r4, r0
 801437e:	2800      	cmp	r0, #0
 8014380:	d144      	bne.n	801440c <rcl_init+0x13c>
 8014382:	f8d7 9000 	ldr.w	r9, [r7]
 8014386:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801438a:	f8c9 0020 	str.w	r0, [r9, #32]
 801438e:	f8c9 5018 	str.w	r5, [r9, #24]
 8014392:	f8c9 801c 	str.w	r8, [r9, #28]
 8014396:	2d00      	cmp	r5, #0
 8014398:	d04e      	beq.n	8014438 <rcl_init+0x168>
 801439a:	2e00      	cmp	r6, #0
 801439c:	d04c      	beq.n	8014438 <rcl_init+0x168>
 801439e:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80143a2:	2104      	movs	r1, #4
 80143a4:	4628      	mov	r0, r5
 80143a6:	4798      	blx	r3
 80143a8:	f8c9 0020 	str.w	r0, [r9, #32]
 80143ac:	f8d7 9000 	ldr.w	r9, [r7]
 80143b0:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80143b4:	46ca      	mov	sl, r9
 80143b6:	b343      	cbz	r3, 801440a <rcl_init+0x13a>
 80143b8:	2d01      	cmp	r5, #1
 80143ba:	f178 0300 	sbcs.w	r3, r8, #0
 80143be:	db3b      	blt.n	8014438 <rcl_init+0x168>
 80143c0:	2400      	movs	r4, #0
 80143c2:	3e04      	subs	r6, #4
 80143c4:	46a1      	mov	r9, r4
 80143c6:	e00b      	b.n	80143e0 <rcl_init+0x110>
 80143c8:	6831      	ldr	r1, [r6, #0]
 80143ca:	f004 fc2a 	bl	8018c22 <memcpy>
 80143ce:	3401      	adds	r4, #1
 80143d0:	f149 0900 	adc.w	r9, r9, #0
 80143d4:	45c8      	cmp	r8, r9
 80143d6:	bf08      	it	eq
 80143d8:	42a5      	cmpeq	r5, r4
 80143da:	d02b      	beq.n	8014434 <rcl_init+0x164>
 80143dc:	f8d7 a000 	ldr.w	sl, [r7]
 80143e0:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80143e4:	f7eb ff26 	bl	8000234 <strlen>
 80143e8:	1c42      	adds	r2, r0, #1
 80143ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80143ec:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80143ee:	f8da a020 	ldr.w	sl, [sl, #32]
 80143f2:	9201      	str	r2, [sp, #4]
 80143f4:	4610      	mov	r0, r2
 80143f6:	4798      	blx	r3
 80143f8:	683b      	ldr	r3, [r7, #0]
 80143fa:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80143fe:	6a1b      	ldr	r3, [r3, #32]
 8014400:	9a01      	ldr	r2, [sp, #4]
 8014402:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014406:	2800      	cmp	r0, #0
 8014408:	d1de      	bne.n	80143c8 <rcl_init+0xf8>
 801440a:	240a      	movs	r4, #10
 801440c:	4638      	mov	r0, r7
 801440e:	f7ff fc8d 	bl	8013d2c <__cleanup_context>
 8014412:	4620      	mov	r0, r4
 8014414:	b01e      	add	sp, #120	@ 0x78
 8014416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801441a:	2900      	cmp	r1, #0
 801441c:	f43f af71 	beq.w	8014302 <rcl_init+0x32>
 8014420:	240b      	movs	r4, #11
 8014422:	4620      	mov	r0, r4
 8014424:	b01e      	add	sp, #120	@ 0x78
 8014426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801442a:	2464      	movs	r4, #100	@ 0x64
 801442c:	4620      	mov	r0, r4
 801442e:	b01e      	add	sp, #120	@ 0x78
 8014430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014434:	f8d7 9000 	ldr.w	r9, [r7]
 8014438:	4926      	ldr	r1, [pc, #152]	@ (80144d4 <rcl_init+0x204>)
 801443a:	680b      	ldr	r3, [r1, #0]
 801443c:	3301      	adds	r3, #1
 801443e:	d036      	beq.n	80144ae <rcl_init+0x1de>
 8014440:	600b      	str	r3, [r1, #0]
 8014442:	461a      	mov	r2, r3
 8014444:	2400      	movs	r4, #0
 8014446:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801444a:	607b      	str	r3, [r7, #4]
 801444c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801444e:	3301      	adds	r3, #1
 8014450:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8014454:	d034      	beq.n	80144c0 <rcl_init+0x1f0>
 8014456:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 801445a:	b93b      	cbnz	r3, 801446c <rcl_init+0x19c>
 801445c:	3030      	adds	r0, #48	@ 0x30
 801445e:	f000 f83b 	bl	80144d8 <rcl_get_localhost_only>
 8014462:	4604      	mov	r4, r0
 8014464:	2800      	cmp	r0, #0
 8014466:	d1d1      	bne.n	801440c <rcl_init+0x13c>
 8014468:	683b      	ldr	r3, [r7, #0]
 801446a:	6958      	ldr	r0, [r3, #20]
 801446c:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801446e:	aa18      	add	r2, sp, #96	@ 0x60
 8014470:	a917      	add	r1, sp, #92	@ 0x5c
 8014472:	f000 fe27 	bl	80150c4 <rcl_validate_enclave_name>
 8014476:	4604      	mov	r4, r0
 8014478:	2800      	cmp	r0, #0
 801447a:	d1c7      	bne.n	801440c <rcl_init+0x13c>
 801447c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801447e:	b9eb      	cbnz	r3, 80144bc <rcl_init+0x1ec>
 8014480:	6839      	ldr	r1, [r7, #0]
 8014482:	694b      	ldr	r3, [r1, #20]
 8014484:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8014486:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801448a:	f000 f8f3 	bl	8014674 <rcl_get_security_options_from_environment>
 801448e:	4604      	mov	r4, r0
 8014490:	2800      	cmp	r0, #0
 8014492:	d1bb      	bne.n	801440c <rcl_init+0x13c>
 8014494:	6839      	ldr	r1, [r7, #0]
 8014496:	6948      	ldr	r0, [r1, #20]
 8014498:	3128      	adds	r1, #40	@ 0x28
 801449a:	3018      	adds	r0, #24
 801449c:	f7fa fbda 	bl	800ec54 <rmw_init>
 80144a0:	4604      	mov	r4, r0
 80144a2:	2800      	cmp	r0, #0
 80144a4:	d0bd      	beq.n	8014422 <rcl_init+0x152>
 80144a6:	f7ff fc1d 	bl	8013ce4 <rcl_convert_rmw_ret_to_rcl_ret>
 80144aa:	4604      	mov	r4, r0
 80144ac:	e7ae      	b.n	801440c <rcl_init+0x13c>
 80144ae:	2201      	movs	r2, #1
 80144b0:	461c      	mov	r4, r3
 80144b2:	600a      	str	r2, [r1, #0]
 80144b4:	4613      	mov	r3, r2
 80144b6:	e7c6      	b.n	8014446 <rcl_init+0x176>
 80144b8:	240a      	movs	r4, #10
 80144ba:	e7b2      	b.n	8014422 <rcl_init+0x152>
 80144bc:	2401      	movs	r4, #1
 80144be:	e7a5      	b.n	801440c <rcl_init+0x13c>
 80144c0:	3024      	adds	r0, #36	@ 0x24
 80144c2:	f003 fdc7 	bl	8018054 <rcl_get_default_domain_id>
 80144c6:	4604      	mov	r4, r0
 80144c8:	2800      	cmp	r0, #0
 80144ca:	d19f      	bne.n	801440c <rcl_init+0x13c>
 80144cc:	683b      	ldr	r3, [r7, #0]
 80144ce:	6958      	ldr	r0, [r3, #20]
 80144d0:	e7c1      	b.n	8014456 <rcl_init+0x186>
 80144d2:	bf00      	nop
 80144d4:	2000b14c 	.word	0x2000b14c

080144d8 <rcl_get_localhost_only>:
 80144d8:	b510      	push	{r4, lr}
 80144da:	b082      	sub	sp, #8
 80144dc:	2300      	movs	r3, #0
 80144de:	9301      	str	r3, [sp, #4]
 80144e0:	b1b8      	cbz	r0, 8014512 <rcl_get_localhost_only+0x3a>
 80144e2:	4604      	mov	r4, r0
 80144e4:	a901      	add	r1, sp, #4
 80144e6:	480c      	ldr	r0, [pc, #48]	@ (8014518 <rcl_get_localhost_only+0x40>)
 80144e8:	f7f9 fcf2 	bl	800ded0 <rcutils_get_env>
 80144ec:	b110      	cbz	r0, 80144f4 <rcl_get_localhost_only+0x1c>
 80144ee:	2001      	movs	r0, #1
 80144f0:	b002      	add	sp, #8
 80144f2:	bd10      	pop	{r4, pc}
 80144f4:	9b01      	ldr	r3, [sp, #4]
 80144f6:	b113      	cbz	r3, 80144fe <rcl_get_localhost_only+0x26>
 80144f8:	781a      	ldrb	r2, [r3, #0]
 80144fa:	2a31      	cmp	r2, #49	@ 0x31
 80144fc:	d004      	beq.n	8014508 <rcl_get_localhost_only+0x30>
 80144fe:	2302      	movs	r3, #2
 8014500:	2000      	movs	r0, #0
 8014502:	7023      	strb	r3, [r4, #0]
 8014504:	b002      	add	sp, #8
 8014506:	bd10      	pop	{r4, pc}
 8014508:	785b      	ldrb	r3, [r3, #1]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d1f7      	bne.n	80144fe <rcl_get_localhost_only+0x26>
 801450e:	2301      	movs	r3, #1
 8014510:	e7f6      	b.n	8014500 <rcl_get_localhost_only+0x28>
 8014512:	200b      	movs	r0, #11
 8014514:	b002      	add	sp, #8
 8014516:	bd10      	pop	{r4, pc}
 8014518:	0801a730 	.word	0x0801a730

0801451c <exact_match_lookup>:
 801451c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801451e:	f102 0708 	add.w	r7, r2, #8
 8014522:	460b      	mov	r3, r1
 8014524:	4614      	mov	r4, r2
 8014526:	4606      	mov	r6, r0
 8014528:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801452c:	b085      	sub	sp, #20
 801452e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014532:	4618      	mov	r0, r3
 8014534:	4919      	ldr	r1, [pc, #100]	@ (801459c <exact_match_lookup+0x80>)
 8014536:	e894 000c 	ldmia.w	r4, {r2, r3}
 801453a:	f002 f9fb 	bl	8016934 <rcutils_join_path>
 801453e:	7833      	ldrb	r3, [r6, #0]
 8014540:	2b2f      	cmp	r3, #47	@ 0x2f
 8014542:	4605      	mov	r5, r0
 8014544:	d023      	beq.n	801458e <exact_match_lookup+0x72>
 8014546:	f104 030c 	add.w	r3, r4, #12
 801454a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801454e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014552:	1c70      	adds	r0, r6, #1
 8014554:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014558:	f002 f9f2 	bl	8016940 <rcutils_to_native_path>
 801455c:	4606      	mov	r6, r0
 801455e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014562:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014566:	4631      	mov	r1, r6
 8014568:	e894 000c 	ldmia.w	r4, {r2, r3}
 801456c:	4628      	mov	r0, r5
 801456e:	f002 f9e1 	bl	8016934 <rcutils_join_path>
 8014572:	6862      	ldr	r2, [r4, #4]
 8014574:	6921      	ldr	r1, [r4, #16]
 8014576:	4603      	mov	r3, r0
 8014578:	4630      	mov	r0, r6
 801457a:	461e      	mov	r6, r3
 801457c:	4790      	blx	r2
 801457e:	4628      	mov	r0, r5
 8014580:	6863      	ldr	r3, [r4, #4]
 8014582:	6921      	ldr	r1, [r4, #16]
 8014584:	4798      	blx	r3
 8014586:	4635      	mov	r5, r6
 8014588:	4628      	mov	r0, r5
 801458a:	b005      	add	sp, #20
 801458c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801458e:	7873      	ldrb	r3, [r6, #1]
 8014590:	2b00      	cmp	r3, #0
 8014592:	d1d8      	bne.n	8014546 <exact_match_lookup+0x2a>
 8014594:	4628      	mov	r0, r5
 8014596:	b005      	add	sp, #20
 8014598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801459a:	bf00      	nop
 801459c:	0801a780 	.word	0x0801a780

080145a0 <rcl_get_secure_root>:
 80145a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80145a4:	b085      	sub	sp, #20
 80145a6:	b168      	cbz	r0, 80145c4 <rcl_get_secure_root+0x24>
 80145a8:	4607      	mov	r7, r0
 80145aa:	4608      	mov	r0, r1
 80145ac:	460c      	mov	r4, r1
 80145ae:	f7f9 fbdd 	bl	800dd6c <rcutils_allocator_is_valid>
 80145b2:	b138      	cbz	r0, 80145c4 <rcl_get_secure_root+0x24>
 80145b4:	2300      	movs	r3, #0
 80145b6:	482d      	ldr	r0, [pc, #180]	@ (801466c <rcl_get_secure_root+0xcc>)
 80145b8:	9303      	str	r3, [sp, #12]
 80145ba:	a903      	add	r1, sp, #12
 80145bc:	f7f9 fc88 	bl	800ded0 <rcutils_get_env>
 80145c0:	4605      	mov	r5, r0
 80145c2:	b120      	cbz	r0, 80145ce <rcl_get_secure_root+0x2e>
 80145c4:	2500      	movs	r5, #0
 80145c6:	4628      	mov	r0, r5
 80145c8:	b005      	add	sp, #20
 80145ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145ce:	9b03      	ldr	r3, [sp, #12]
 80145d0:	781a      	ldrb	r2, [r3, #0]
 80145d2:	2a00      	cmp	r2, #0
 80145d4:	d0f6      	beq.n	80145c4 <rcl_get_secure_root+0x24>
 80145d6:	f104 090c 	add.w	r9, r4, #12
 80145da:	e899 0003 	ldmia.w	r9, {r0, r1}
 80145de:	e88d 0003 	stmia.w	sp, {r0, r1}
 80145e2:	4618      	mov	r0, r3
 80145e4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80145e8:	f7f9 fdd8 	bl	800e19c <rcutils_strdup>
 80145ec:	4680      	mov	r8, r0
 80145ee:	2800      	cmp	r0, #0
 80145f0:	d0e8      	beq.n	80145c4 <rcl_get_secure_root+0x24>
 80145f2:	481f      	ldr	r0, [pc, #124]	@ (8014670 <rcl_get_secure_root+0xd0>)
 80145f4:	9503      	str	r5, [sp, #12]
 80145f6:	a903      	add	r1, sp, #12
 80145f8:	f7f9 fc6a 	bl	800ded0 <rcutils_get_env>
 80145fc:	b160      	cbz	r0, 8014618 <rcl_get_secure_root+0x78>
 80145fe:	2600      	movs	r6, #0
 8014600:	6863      	ldr	r3, [r4, #4]
 8014602:	6921      	ldr	r1, [r4, #16]
 8014604:	4630      	mov	r0, r6
 8014606:	4798      	blx	r3
 8014608:	4640      	mov	r0, r8
 801460a:	6863      	ldr	r3, [r4, #4]
 801460c:	6921      	ldr	r1, [r4, #16]
 801460e:	4798      	blx	r3
 8014610:	4628      	mov	r0, r5
 8014612:	b005      	add	sp, #20
 8014614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014618:	9b03      	ldr	r3, [sp, #12]
 801461a:	781e      	ldrb	r6, [r3, #0]
 801461c:	b1f6      	cbz	r6, 801465c <rcl_get_secure_root+0xbc>
 801461e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014622:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014626:	4618      	mov	r0, r3
 8014628:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801462c:	f7f9 fdb6 	bl	800e19c <rcutils_strdup>
 8014630:	4606      	mov	r6, r0
 8014632:	2800      	cmp	r0, #0
 8014634:	d0e3      	beq.n	80145fe <rcl_get_secure_root+0x5e>
 8014636:	4622      	mov	r2, r4
 8014638:	4641      	mov	r1, r8
 801463a:	f7ff ff6f 	bl	801451c <exact_match_lookup>
 801463e:	4605      	mov	r5, r0
 8014640:	2d00      	cmp	r5, #0
 8014642:	d0dd      	beq.n	8014600 <rcl_get_secure_root+0x60>
 8014644:	4628      	mov	r0, r5
 8014646:	f002 f973 	bl	8016930 <rcutils_is_directory>
 801464a:	4603      	mov	r3, r0
 801464c:	2800      	cmp	r0, #0
 801464e:	d1d7      	bne.n	8014600 <rcl_get_secure_root+0x60>
 8014650:	4628      	mov	r0, r5
 8014652:	6921      	ldr	r1, [r4, #16]
 8014654:	461d      	mov	r5, r3
 8014656:	6863      	ldr	r3, [r4, #4]
 8014658:	4798      	blx	r3
 801465a:	e7d1      	b.n	8014600 <rcl_get_secure_root+0x60>
 801465c:	4622      	mov	r2, r4
 801465e:	4638      	mov	r0, r7
 8014660:	4641      	mov	r1, r8
 8014662:	f7ff ff5b 	bl	801451c <exact_match_lookup>
 8014666:	4605      	mov	r5, r0
 8014668:	e7ea      	b.n	8014640 <rcl_get_secure_root+0xa0>
 801466a:	bf00      	nop
 801466c:	0801a78c 	.word	0x0801a78c
 8014670:	0801a7a4 	.word	0x0801a7a4

08014674 <rcl_get_security_options_from_environment>:
 8014674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014678:	b082      	sub	sp, #8
 801467a:	2300      	movs	r3, #0
 801467c:	4606      	mov	r6, r0
 801467e:	460f      	mov	r7, r1
 8014680:	4820      	ldr	r0, [pc, #128]	@ (8014704 <rcl_get_security_options_from_environment+0x90>)
 8014682:	9301      	str	r3, [sp, #4]
 8014684:	a901      	add	r1, sp, #4
 8014686:	4690      	mov	r8, r2
 8014688:	f7f9 fc22 	bl	800ded0 <rcutils_get_env>
 801468c:	b120      	cbz	r0, 8014698 <rcl_get_security_options_from_environment+0x24>
 801468e:	2501      	movs	r5, #1
 8014690:	4628      	mov	r0, r5
 8014692:	b002      	add	sp, #8
 8014694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014698:	491b      	ldr	r1, [pc, #108]	@ (8014708 <rcl_get_security_options_from_environment+0x94>)
 801469a:	4604      	mov	r4, r0
 801469c:	9801      	ldr	r0, [sp, #4]
 801469e:	f7eb fdbf 	bl	8000220 <strcmp>
 80146a2:	4605      	mov	r5, r0
 80146a4:	b9e8      	cbnz	r0, 80146e2 <rcl_get_security_options_from_environment+0x6e>
 80146a6:	9001      	str	r0, [sp, #4]
 80146a8:	f1b8 0f00 	cmp.w	r8, #0
 80146ac:	d020      	beq.n	80146f0 <rcl_get_security_options_from_environment+0x7c>
 80146ae:	4817      	ldr	r0, [pc, #92]	@ (801470c <rcl_get_security_options_from_environment+0x98>)
 80146b0:	a901      	add	r1, sp, #4
 80146b2:	f7f9 fc0d 	bl	800ded0 <rcutils_get_env>
 80146b6:	2800      	cmp	r0, #0
 80146b8:	d1e9      	bne.n	801468e <rcl_get_security_options_from_environment+0x1a>
 80146ba:	4915      	ldr	r1, [pc, #84]	@ (8014710 <rcl_get_security_options_from_environment+0x9c>)
 80146bc:	9801      	ldr	r0, [sp, #4]
 80146be:	f7eb fdaf 	bl	8000220 <strcmp>
 80146c2:	fab0 f080 	clz	r0, r0
 80146c6:	0940      	lsrs	r0, r0, #5
 80146c8:	f888 0000 	strb.w	r0, [r8]
 80146cc:	4639      	mov	r1, r7
 80146ce:	4630      	mov	r0, r6
 80146d0:	f7ff ff66 	bl	80145a0 <rcl_get_secure_root>
 80146d4:	b170      	cbz	r0, 80146f4 <rcl_get_security_options_from_environment+0x80>
 80146d6:	f8c8 0004 	str.w	r0, [r8, #4]
 80146da:	4628      	mov	r0, r5
 80146dc:	b002      	add	sp, #8
 80146de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146e2:	4625      	mov	r5, r4
 80146e4:	4628      	mov	r0, r5
 80146e6:	f888 4000 	strb.w	r4, [r8]
 80146ea:	b002      	add	sp, #8
 80146ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146f0:	250b      	movs	r5, #11
 80146f2:	e7cd      	b.n	8014690 <rcl_get_security_options_from_environment+0x1c>
 80146f4:	f898 5000 	ldrb.w	r5, [r8]
 80146f8:	f1a5 0501 	sub.w	r5, r5, #1
 80146fc:	fab5 f585 	clz	r5, r5
 8014700:	096d      	lsrs	r5, r5, #5
 8014702:	e7c5      	b.n	8014690 <rcl_get_security_options_from_environment+0x1c>
 8014704:	0801a744 	.word	0x0801a744
 8014708:	0801a758 	.word	0x0801a758
 801470c:	0801a760 	.word	0x0801a760
 8014710:	0801a778 	.word	0x0801a778

08014714 <rcl_service_get_rmw_handle>:
 8014714:	b118      	cbz	r0, 801471e <rcl_service_get_rmw_handle+0xa>
 8014716:	6800      	ldr	r0, [r0, #0]
 8014718:	b108      	cbz	r0, 801471e <rcl_service_get_rmw_handle+0xa>
 801471a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801471e:	4770      	bx	lr

08014720 <rcl_take_request>:
 8014720:	b570      	push	{r4, r5, r6, lr}
 8014722:	468e      	mov	lr, r1
 8014724:	460c      	mov	r4, r1
 8014726:	4616      	mov	r6, r2
 8014728:	4605      	mov	r5, r0
 801472a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801472e:	b08c      	sub	sp, #48	@ 0x30
 8014730:	f10d 0c18 	add.w	ip, sp, #24
 8014734:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014738:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801473c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014740:	b30d      	cbz	r5, 8014786 <rcl_take_request+0x66>
 8014742:	682b      	ldr	r3, [r5, #0]
 8014744:	b1fb      	cbz	r3, 8014786 <rcl_take_request+0x66>
 8014746:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801474a:	b1e0      	cbz	r0, 8014786 <rcl_take_request+0x66>
 801474c:	b336      	cbz	r6, 801479c <rcl_take_request+0x7c>
 801474e:	2300      	movs	r3, #0
 8014750:	f88d 3007 	strb.w	r3, [sp, #7]
 8014754:	4632      	mov	r2, r6
 8014756:	f10d 0307 	add.w	r3, sp, #7
 801475a:	a902      	add	r1, sp, #8
 801475c:	f7fa feec 	bl	800f538 <rmw_take_request>
 8014760:	4605      	mov	r5, r0
 8014762:	b198      	cbz	r0, 801478c <rcl_take_request+0x6c>
 8014764:	280a      	cmp	r0, #10
 8014766:	bf18      	it	ne
 8014768:	2501      	movne	r5, #1
 801476a:	f10d 0e18 	add.w	lr, sp, #24
 801476e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014772:	46a4      	mov	ip, r4
 8014774:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014778:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801477c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014780:	4628      	mov	r0, r5
 8014782:	b00c      	add	sp, #48	@ 0x30
 8014784:	bd70      	pop	{r4, r5, r6, pc}
 8014786:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801478a:	e7ee      	b.n	801476a <rcl_take_request+0x4a>
 801478c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014790:	f240 2359 	movw	r3, #601	@ 0x259
 8014794:	2a00      	cmp	r2, #0
 8014796:	bf08      	it	eq
 8014798:	461d      	moveq	r5, r3
 801479a:	e7e6      	b.n	801476a <rcl_take_request+0x4a>
 801479c:	250b      	movs	r5, #11
 801479e:	e7e4      	b.n	801476a <rcl_take_request+0x4a>

080147a0 <rcl_send_response>:
 80147a0:	b170      	cbz	r0, 80147c0 <rcl_send_response+0x20>
 80147a2:	6800      	ldr	r0, [r0, #0]
 80147a4:	b160      	cbz	r0, 80147c0 <rcl_send_response+0x20>
 80147a6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80147aa:	b148      	cbz	r0, 80147c0 <rcl_send_response+0x20>
 80147ac:	b159      	cbz	r1, 80147c6 <rcl_send_response+0x26>
 80147ae:	b510      	push	{r4, lr}
 80147b0:	b15a      	cbz	r2, 80147ca <rcl_send_response+0x2a>
 80147b2:	f7fa ff1f 	bl	800f5f4 <rmw_send_response>
 80147b6:	b110      	cbz	r0, 80147be <rcl_send_response+0x1e>
 80147b8:	2802      	cmp	r0, #2
 80147ba:	bf18      	it	ne
 80147bc:	2001      	movne	r0, #1
 80147be:	bd10      	pop	{r4, pc}
 80147c0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80147c4:	4770      	bx	lr
 80147c6:	200b      	movs	r0, #11
 80147c8:	4770      	bx	lr
 80147ca:	200b      	movs	r0, #11
 80147cc:	bd10      	pop	{r4, pc}
 80147ce:	bf00      	nop

080147d0 <rcl_service_is_valid>:
 80147d0:	b130      	cbz	r0, 80147e0 <rcl_service_is_valid+0x10>
 80147d2:	6800      	ldr	r0, [r0, #0]
 80147d4:	b120      	cbz	r0, 80147e0 <rcl_service_is_valid+0x10>
 80147d6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80147da:	3800      	subs	r0, #0
 80147dc:	bf18      	it	ne
 80147de:	2001      	movne	r0, #1
 80147e0:	4770      	bx	lr
 80147e2:	bf00      	nop

080147e4 <rcl_take>:
 80147e4:	2800      	cmp	r0, #0
 80147e6:	d04a      	beq.n	801487e <rcl_take+0x9a>
 80147e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147ec:	4604      	mov	r4, r0
 80147ee:	6800      	ldr	r0, [r0, #0]
 80147f0:	b0a4      	sub	sp, #144	@ 0x90
 80147f2:	2800      	cmp	r0, #0
 80147f4:	d03b      	beq.n	801486e <rcl_take+0x8a>
 80147f6:	461f      	mov	r7, r3
 80147f8:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d036      	beq.n	801486e <rcl_take+0x8a>
 8014800:	460e      	mov	r6, r1
 8014802:	2900      	cmp	r1, #0
 8014804:	d039      	beq.n	801487a <rcl_take+0x96>
 8014806:	4615      	mov	r5, r2
 8014808:	2a00      	cmp	r2, #0
 801480a:	d03c      	beq.n	8014886 <rcl_take+0xa2>
 801480c:	a802      	add	r0, sp, #8
 801480e:	f002 f933 	bl	8016a78 <rmw_get_zero_initialized_message_info>
 8014812:	f10d 0c08 	add.w	ip, sp, #8
 8014816:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801481a:	46ae      	mov	lr, r5
 801481c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014820:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014824:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014828:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801482c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014830:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8014834:	f04f 0800 	mov.w	r8, #0
 8014838:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801483c:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8014840:	6822      	ldr	r2, [r4, #0]
 8014842:	462b      	mov	r3, r5
 8014844:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8014848:	9700      	str	r7, [sp, #0]
 801484a:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 801484e:	4631      	mov	r1, r6
 8014850:	f002 fac0 	bl	8016dd4 <rmw_take_with_info>
 8014854:	4603      	mov	r3, r0
 8014856:	b9c0      	cbnz	r0, 801488a <rcl_take+0xa6>
 8014858:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 801485c:	f240 1291 	movw	r2, #401	@ 0x191
 8014860:	2900      	cmp	r1, #0
 8014862:	bf08      	it	eq
 8014864:	4613      	moveq	r3, r2
 8014866:	4618      	mov	r0, r3
 8014868:	b024      	add	sp, #144	@ 0x90
 801486a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801486e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014872:	4618      	mov	r0, r3
 8014874:	b024      	add	sp, #144	@ 0x90
 8014876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801487a:	230b      	movs	r3, #11
 801487c:	e7f3      	b.n	8014866 <rcl_take+0x82>
 801487e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014882:	4618      	mov	r0, r3
 8014884:	4770      	bx	lr
 8014886:	ad14      	add	r5, sp, #80	@ 0x50
 8014888:	e7c0      	b.n	801480c <rcl_take+0x28>
 801488a:	f7ff fa2b 	bl	8013ce4 <rcl_convert_rmw_ret_to_rcl_ret>
 801488e:	4603      	mov	r3, r0
 8014890:	e7e9      	b.n	8014866 <rcl_take+0x82>
 8014892:	bf00      	nop

08014894 <rcl_subscription_get_rmw_handle>:
 8014894:	b118      	cbz	r0, 801489e <rcl_subscription_get_rmw_handle+0xa>
 8014896:	6800      	ldr	r0, [r0, #0]
 8014898:	b108      	cbz	r0, 801489e <rcl_subscription_get_rmw_handle+0xa>
 801489a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801489e:	4770      	bx	lr

080148a0 <rcl_subscription_is_valid>:
 80148a0:	b130      	cbz	r0, 80148b0 <rcl_subscription_is_valid+0x10>
 80148a2:	6800      	ldr	r0, [r0, #0]
 80148a4:	b120      	cbz	r0, 80148b0 <rcl_subscription_is_valid+0x10>
 80148a6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80148aa:	3800      	subs	r0, #0
 80148ac:	bf18      	it	ne
 80148ae:	2001      	movne	r0, #1
 80148b0:	4770      	bx	lr
 80148b2:	bf00      	nop

080148b4 <rcl_get_system_time>:
 80148b4:	4608      	mov	r0, r1
 80148b6:	f7f9 bddb 	b.w	800e470 <rcutils_system_time_now>
 80148ba:	bf00      	nop

080148bc <rcl_get_steady_time>:
 80148bc:	4608      	mov	r0, r1
 80148be:	f7f9 bdff 	b.w	800e4c0 <rcutils_steady_time_now>
 80148c2:	bf00      	nop

080148c4 <rcl_get_ros_time>:
 80148c4:	7a03      	ldrb	r3, [r0, #8]
 80148c6:	b510      	push	{r4, lr}
 80148c8:	460c      	mov	r4, r1
 80148ca:	b133      	cbz	r3, 80148da <rcl_get_ros_time+0x16>
 80148cc:	2105      	movs	r1, #5
 80148ce:	f7f9 fa5b 	bl	800dd88 <__atomic_load_8>
 80148d2:	e9c4 0100 	strd	r0, r1, [r4]
 80148d6:	2000      	movs	r0, #0
 80148d8:	bd10      	pop	{r4, pc}
 80148da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148de:	4608      	mov	r0, r1
 80148e0:	f7f9 bdc6 	b.w	800e470 <rcutils_system_time_now>

080148e4 <rcl_clock_init>:
 80148e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148e6:	4605      	mov	r5, r0
 80148e8:	4610      	mov	r0, r2
 80148ea:	4614      	mov	r4, r2
 80148ec:	460e      	mov	r6, r1
 80148ee:	f7f9 fa3d 	bl	800dd6c <rcutils_allocator_is_valid>
 80148f2:	b128      	cbz	r0, 8014900 <rcl_clock_init+0x1c>
 80148f4:	2d03      	cmp	r5, #3
 80148f6:	d803      	bhi.n	8014900 <rcl_clock_init+0x1c>
 80148f8:	e8df f005 	tbb	[pc, r5]
 80148fc:	06532e1d 	.word	0x06532e1d
 8014900:	f04f 0c0b 	mov.w	ip, #11
 8014904:	4660      	mov	r0, ip
 8014906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014908:	2e00      	cmp	r6, #0
 801490a:	d0f9      	beq.n	8014900 <rcl_clock_init+0x1c>
 801490c:	2c00      	cmp	r4, #0
 801490e:	d0f7      	beq.n	8014900 <rcl_clock_init+0x1c>
 8014910:	2300      	movs	r3, #0
 8014912:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014916:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 80149cc <rcl_clock_init+0xe8>
 801491a:	6133      	str	r3, [r6, #16]
 801491c:	f106 0514 	add.w	r5, r6, #20
 8014920:	469c      	mov	ip, r3
 8014922:	2703      	movs	r7, #3
 8014924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014928:	6823      	ldr	r3, [r4, #0]
 801492a:	602b      	str	r3, [r5, #0]
 801492c:	7037      	strb	r7, [r6, #0]
 801492e:	f8c6 e00c 	str.w	lr, [r6, #12]
 8014932:	4660      	mov	r0, ip
 8014934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014936:	2e00      	cmp	r6, #0
 8014938:	d0e2      	beq.n	8014900 <rcl_clock_init+0x1c>
 801493a:	2300      	movs	r3, #0
 801493c:	7033      	strb	r3, [r6, #0]
 801493e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014942:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8014946:	469c      	mov	ip, r3
 8014948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801494a:	f106 0514 	add.w	r5, r6, #20
 801494e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014950:	6823      	ldr	r3, [r4, #0]
 8014952:	602b      	str	r3, [r5, #0]
 8014954:	4660      	mov	r0, ip
 8014956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014958:	2e00      	cmp	r6, #0
 801495a:	d0d1      	beq.n	8014900 <rcl_clock_init+0x1c>
 801495c:	2c00      	cmp	r4, #0
 801495e:	d0cf      	beq.n	8014900 <rcl_clock_init+0x1c>
 8014960:	2700      	movs	r7, #0
 8014962:	7037      	strb	r7, [r6, #0]
 8014964:	46a4      	mov	ip, r4
 8014966:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801496a:	f106 0514 	add.w	r5, r6, #20
 801496e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8014972:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8014976:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014978:	f8dc 3000 	ldr.w	r3, [ip]
 801497c:	602b      	str	r3, [r5, #0]
 801497e:	6921      	ldr	r1, [r4, #16]
 8014980:	6823      	ldr	r3, [r4, #0]
 8014982:	2010      	movs	r0, #16
 8014984:	4798      	blx	r3
 8014986:	6130      	str	r0, [r6, #16]
 8014988:	b1d0      	cbz	r0, 80149c0 <rcl_clock_init+0xdc>
 801498a:	2200      	movs	r2, #0
 801498c:	2300      	movs	r3, #0
 801498e:	e9c0 2300 	strd	r2, r3, [r0]
 8014992:	2301      	movs	r3, #1
 8014994:	7207      	strb	r7, [r0, #8]
 8014996:	4a0c      	ldr	r2, [pc, #48]	@ (80149c8 <rcl_clock_init+0xe4>)
 8014998:	7033      	strb	r3, [r6, #0]
 801499a:	46bc      	mov	ip, r7
 801499c:	60f2      	str	r2, [r6, #12]
 801499e:	4660      	mov	r0, ip
 80149a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149a2:	2e00      	cmp	r6, #0
 80149a4:	d0ac      	beq.n	8014900 <rcl_clock_init+0x1c>
 80149a6:	2c00      	cmp	r4, #0
 80149a8:	d0aa      	beq.n	8014900 <rcl_clock_init+0x1c>
 80149aa:	2300      	movs	r3, #0
 80149ac:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80149b0:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 80149d0 <rcl_clock_init+0xec>
 80149b4:	6133      	str	r3, [r6, #16]
 80149b6:	f106 0514 	add.w	r5, r6, #20
 80149ba:	469c      	mov	ip, r3
 80149bc:	2702      	movs	r7, #2
 80149be:	e7b1      	b.n	8014924 <rcl_clock_init+0x40>
 80149c0:	f04f 0c0a 	mov.w	ip, #10
 80149c4:	e79e      	b.n	8014904 <rcl_clock_init+0x20>
 80149c6:	bf00      	nop
 80149c8:	080148c5 	.word	0x080148c5
 80149cc:	080148bd 	.word	0x080148bd
 80149d0:	080148b5 	.word	0x080148b5

080149d4 <rcl_clock_get_now>:
 80149d4:	b140      	cbz	r0, 80149e8 <rcl_clock_get_now+0x14>
 80149d6:	b139      	cbz	r1, 80149e8 <rcl_clock_get_now+0x14>
 80149d8:	7803      	ldrb	r3, [r0, #0]
 80149da:	b11b      	cbz	r3, 80149e4 <rcl_clock_get_now+0x10>
 80149dc:	68c3      	ldr	r3, [r0, #12]
 80149de:	b10b      	cbz	r3, 80149e4 <rcl_clock_get_now+0x10>
 80149e0:	6900      	ldr	r0, [r0, #16]
 80149e2:	4718      	bx	r3
 80149e4:	2001      	movs	r0, #1
 80149e6:	4770      	bx	lr
 80149e8:	200b      	movs	r0, #11
 80149ea:	4770      	bx	lr

080149ec <rcl_clock_add_jump_callback>:
 80149ec:	b082      	sub	sp, #8
 80149ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149f2:	a906      	add	r1, sp, #24
 80149f4:	e881 000c 	stmia.w	r1, {r2, r3}
 80149f8:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 80149fc:	b320      	cbz	r0, 8014a48 <rcl_clock_add_jump_callback+0x5c>
 80149fe:	4604      	mov	r4, r0
 8014a00:	3014      	adds	r0, #20
 8014a02:	f7f9 f9b3 	bl	800dd6c <rcutils_allocator_is_valid>
 8014a06:	b1f8      	cbz	r0, 8014a48 <rcl_clock_add_jump_callback+0x5c>
 8014a08:	b1f6      	cbz	r6, 8014a48 <rcl_clock_add_jump_callback+0x5c>
 8014a0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	db1b      	blt.n	8014a48 <rcl_clock_add_jump_callback+0x5c>
 8014a10:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8014a14:	2a01      	cmp	r2, #1
 8014a16:	f173 0300 	sbcs.w	r3, r3, #0
 8014a1a:	da15      	bge.n	8014a48 <rcl_clock_add_jump_callback+0x5c>
 8014a1c:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8014a20:	2f00      	cmp	r7, #0
 8014a22:	d042      	beq.n	8014aaa <rcl_clock_add_jump_callback+0xbe>
 8014a24:	2300      	movs	r3, #0
 8014a26:	4602      	mov	r2, r0
 8014a28:	e003      	b.n	8014a32 <rcl_clock_add_jump_callback+0x46>
 8014a2a:	42bb      	cmp	r3, r7
 8014a2c:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8014a30:	d011      	beq.n	8014a56 <rcl_clock_add_jump_callback+0x6a>
 8014a32:	6811      	ldr	r1, [r2, #0]
 8014a34:	42b1      	cmp	r1, r6
 8014a36:	f103 0301 	add.w	r3, r3, #1
 8014a3a:	d1f6      	bne.n	8014a2a <rcl_clock_add_jump_callback+0x3e>
 8014a3c:	6a11      	ldr	r1, [r2, #32]
 8014a3e:	42a9      	cmp	r1, r5
 8014a40:	d1f3      	bne.n	8014a2a <rcl_clock_add_jump_callback+0x3e>
 8014a42:	f04f 0e01 	mov.w	lr, #1
 8014a46:	e001      	b.n	8014a4c <rcl_clock_add_jump_callback+0x60>
 8014a48:	f04f 0e0b 	mov.w	lr, #11
 8014a4c:	4670      	mov	r0, lr
 8014a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a52:	b002      	add	sp, #8
 8014a54:	4770      	bx	lr
 8014a56:	3301      	adds	r3, #1
 8014a58:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014a5c:	00d9      	lsls	r1, r3, #3
 8014a5e:	69e3      	ldr	r3, [r4, #28]
 8014a60:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014a62:	4798      	blx	r3
 8014a64:	b1f0      	cbz	r0, 8014aa4 <rcl_clock_add_jump_callback+0xb8>
 8014a66:	68a3      	ldr	r3, [r4, #8]
 8014a68:	6060      	str	r0, [r4, #4]
 8014a6a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8014a6e:	f10d 0c18 	add.w	ip, sp, #24
 8014a72:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8014a76:	f103 0801 	add.w	r8, r3, #1
 8014a7a:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8014a7e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014a82:	f106 0708 	add.w	r7, r6, #8
 8014a86:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014a88:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8014a8c:	f04f 0e00 	mov.w	lr, #0
 8014a90:	e887 0003 	stmia.w	r7, {r0, r1}
 8014a94:	6235      	str	r5, [r6, #32]
 8014a96:	4670      	mov	r0, lr
 8014a98:	f8c4 8008 	str.w	r8, [r4, #8]
 8014a9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014aa0:	b002      	add	sp, #8
 8014aa2:	4770      	bx	lr
 8014aa4:	f04f 0e0a 	mov.w	lr, #10
 8014aa8:	e7d0      	b.n	8014a4c <rcl_clock_add_jump_callback+0x60>
 8014aaa:	2128      	movs	r1, #40	@ 0x28
 8014aac:	e7d7      	b.n	8014a5e <rcl_clock_add_jump_callback+0x72>
 8014aae:	bf00      	nop

08014ab0 <rcl_clock_remove_jump_callback>:
 8014ab0:	2800      	cmp	r0, #0
 8014ab2:	d057      	beq.n	8014b64 <rcl_clock_remove_jump_callback+0xb4>
 8014ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ab8:	4605      	mov	r5, r0
 8014aba:	3014      	adds	r0, #20
 8014abc:	4688      	mov	r8, r1
 8014abe:	4692      	mov	sl, r2
 8014ac0:	f7f9 f954 	bl	800dd6c <rcutils_allocator_is_valid>
 8014ac4:	2800      	cmp	r0, #0
 8014ac6:	d03b      	beq.n	8014b40 <rcl_clock_remove_jump_callback+0x90>
 8014ac8:	f1b8 0f00 	cmp.w	r8, #0
 8014acc:	d038      	beq.n	8014b40 <rcl_clock_remove_jump_callback+0x90>
 8014ace:	68ae      	ldr	r6, [r5, #8]
 8014ad0:	b166      	cbz	r6, 8014aec <rcl_clock_remove_jump_callback+0x3c>
 8014ad2:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8014ad6:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8014ada:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8014ade:	464c      	mov	r4, r9
 8014ae0:	6823      	ldr	r3, [r4, #0]
 8014ae2:	4543      	cmp	r3, r8
 8014ae4:	d005      	beq.n	8014af2 <rcl_clock_remove_jump_callback+0x42>
 8014ae6:	3428      	adds	r4, #40	@ 0x28
 8014ae8:	42a7      	cmp	r7, r4
 8014aea:	d1f9      	bne.n	8014ae0 <rcl_clock_remove_jump_callback+0x30>
 8014aec:	2001      	movs	r0, #1
 8014aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014af2:	6a23      	ldr	r3, [r4, #32]
 8014af4:	3428      	adds	r4, #40	@ 0x28
 8014af6:	42bc      	cmp	r4, r7
 8014af8:	d02d      	beq.n	8014b56 <rcl_clock_remove_jump_callback+0xa6>
 8014afa:	4553      	cmp	r3, sl
 8014afc:	d1f0      	bne.n	8014ae0 <rcl_clock_remove_jump_callback+0x30>
 8014afe:	46a6      	mov	lr, r4
 8014b00:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014b04:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8014b08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014b0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014b10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014b14:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014b18:	3428      	adds	r4, #40	@ 0x28
 8014b1a:	42a7      	cmp	r7, r4
 8014b1c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014b20:	d1ed      	bne.n	8014afe <rcl_clock_remove_jump_callback+0x4e>
 8014b22:	3e01      	subs	r6, #1
 8014b24:	60ae      	str	r6, [r5, #8]
 8014b26:	b176      	cbz	r6, 8014b46 <rcl_clock_remove_jump_callback+0x96>
 8014b28:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8014b2c:	69eb      	ldr	r3, [r5, #28]
 8014b2e:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8014b30:	00f1      	lsls	r1, r6, #3
 8014b32:	4648      	mov	r0, r9
 8014b34:	4798      	blx	r3
 8014b36:	b1b8      	cbz	r0, 8014b68 <rcl_clock_remove_jump_callback+0xb8>
 8014b38:	6068      	str	r0, [r5, #4]
 8014b3a:	2000      	movs	r0, #0
 8014b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b40:	200b      	movs	r0, #11
 8014b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b46:	4648      	mov	r0, r9
 8014b48:	69ab      	ldr	r3, [r5, #24]
 8014b4a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8014b4c:	4798      	blx	r3
 8014b4e:	606e      	str	r6, [r5, #4]
 8014b50:	4630      	mov	r0, r6
 8014b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b56:	4553      	cmp	r3, sl
 8014b58:	d1c8      	bne.n	8014aec <rcl_clock_remove_jump_callback+0x3c>
 8014b5a:	3e01      	subs	r6, #1
 8014b5c:	60ae      	str	r6, [r5, #8]
 8014b5e:	2e00      	cmp	r6, #0
 8014b60:	d1e2      	bne.n	8014b28 <rcl_clock_remove_jump_callback+0x78>
 8014b62:	e7f0      	b.n	8014b46 <rcl_clock_remove_jump_callback+0x96>
 8014b64:	200b      	movs	r0, #11
 8014b66:	4770      	bx	lr
 8014b68:	200a      	movs	r0, #10
 8014b6a:	e7ea      	b.n	8014b42 <rcl_clock_remove_jump_callback+0x92>

08014b6c <_rcl_timer_time_jump>:
 8014b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b70:	4605      	mov	r5, r0
 8014b72:	b084      	sub	sp, #16
 8014b74:	4614      	mov	r4, r2
 8014b76:	b131      	cbz	r1, 8014b86 <_rcl_timer_time_jump+0x1a>
 8014b78:	7803      	ldrb	r3, [r0, #0]
 8014b7a:	3b02      	subs	r3, #2
 8014b7c:	2b01      	cmp	r3, #1
 8014b7e:	d93f      	bls.n	8014c00 <_rcl_timer_time_jump+0x94>
 8014b80:	b004      	add	sp, #16
 8014b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b86:	6813      	ldr	r3, [r2, #0]
 8014b88:	a902      	add	r1, sp, #8
 8014b8a:	6818      	ldr	r0, [r3, #0]
 8014b8c:	f7ff ff22 	bl	80149d4 <rcl_clock_get_now>
 8014b90:	2800      	cmp	r0, #0
 8014b92:	d1f5      	bne.n	8014b80 <_rcl_timer_time_jump+0x14>
 8014b94:	6820      	ldr	r0, [r4, #0]
 8014b96:	2105      	movs	r1, #5
 8014b98:	3020      	adds	r0, #32
 8014b9a:	f7f9 f8f5 	bl	800dd88 <__atomic_load_8>
 8014b9e:	6823      	ldr	r3, [r4, #0]
 8014ba0:	4681      	mov	r9, r0
 8014ba2:	4688      	mov	r8, r1
 8014ba4:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8014ba8:	2105      	movs	r1, #5
 8014baa:	f7f9 f8ed 	bl	800dd88 <__atomic_load_8>
 8014bae:	4607      	mov	r7, r0
 8014bb0:	6820      	ldr	r0, [r4, #0]
 8014bb2:	460e      	mov	r6, r1
 8014bb4:	3018      	adds	r0, #24
 8014bb6:	2105      	movs	r1, #5
 8014bb8:	f7f9 f8e6 	bl	800dd88 <__atomic_load_8>
 8014bbc:	782b      	ldrb	r3, [r5, #0]
 8014bbe:	9a02      	ldr	r2, [sp, #8]
 8014bc0:	3b02      	subs	r3, #2
 8014bc2:	2b01      	cmp	r3, #1
 8014bc4:	460d      	mov	r5, r1
 8014bc6:	9b03      	ldr	r3, [sp, #12]
 8014bc8:	4682      	mov	sl, r0
 8014bca:	d937      	bls.n	8014c3c <_rcl_timer_time_jump+0xd0>
 8014bcc:	42ba      	cmp	r2, r7
 8014bce:	eb73 0106 	sbcs.w	r1, r3, r6
 8014bd2:	da5f      	bge.n	8014c94 <_rcl_timer_time_jump+0x128>
 8014bd4:	454a      	cmp	r2, r9
 8014bd6:	eb73 0108 	sbcs.w	r1, r3, r8
 8014bda:	dad1      	bge.n	8014b80 <_rcl_timer_time_jump+0x14>
 8014bdc:	6820      	ldr	r0, [r4, #0]
 8014bde:	eb1a 0202 	adds.w	r2, sl, r2
 8014be2:	eb43 0305 	adc.w	r3, r3, r5
 8014be6:	2505      	movs	r5, #5
 8014be8:	3028      	adds	r0, #40	@ 0x28
 8014bea:	9500      	str	r5, [sp, #0]
 8014bec:	f7f9 f902 	bl	800ddf4 <__atomic_store_8>
 8014bf0:	6820      	ldr	r0, [r4, #0]
 8014bf2:	9500      	str	r5, [sp, #0]
 8014bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014bf8:	3020      	adds	r0, #32
 8014bfa:	f7f9 f8fb 	bl	800ddf4 <__atomic_store_8>
 8014bfe:	e7bf      	b.n	8014b80 <_rcl_timer_time_jump+0x14>
 8014c00:	6813      	ldr	r3, [r2, #0]
 8014c02:	a902      	add	r1, sp, #8
 8014c04:	6818      	ldr	r0, [r3, #0]
 8014c06:	f7ff fee5 	bl	80149d4 <rcl_clock_get_now>
 8014c0a:	2800      	cmp	r0, #0
 8014c0c:	d1b8      	bne.n	8014b80 <_rcl_timer_time_jump+0x14>
 8014c0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014c12:	4313      	orrs	r3, r2
 8014c14:	d0b4      	beq.n	8014b80 <_rcl_timer_time_jump+0x14>
 8014c16:	6820      	ldr	r0, [r4, #0]
 8014c18:	2105      	movs	r1, #5
 8014c1a:	3028      	adds	r0, #40	@ 0x28
 8014c1c:	f7f9 f8b4 	bl	800dd88 <__atomic_load_8>
 8014c20:	9d02      	ldr	r5, [sp, #8]
 8014c22:	9b03      	ldr	r3, [sp, #12]
 8014c24:	4602      	mov	r2, r0
 8014c26:	6820      	ldr	r0, [r4, #0]
 8014c28:	1b52      	subs	r2, r2, r5
 8014c2a:	f04f 0405 	mov.w	r4, #5
 8014c2e:	9400      	str	r4, [sp, #0]
 8014c30:	eb61 0303 	sbc.w	r3, r1, r3
 8014c34:	3030      	adds	r0, #48	@ 0x30
 8014c36:	f7f9 f8dd 	bl	800ddf4 <__atomic_store_8>
 8014c3a:	e7a1      	b.n	8014b80 <_rcl_timer_time_jump+0x14>
 8014c3c:	4313      	orrs	r3, r2
 8014c3e:	d09f      	beq.n	8014b80 <_rcl_timer_time_jump+0x14>
 8014c40:	6820      	ldr	r0, [r4, #0]
 8014c42:	f04f 0805 	mov.w	r8, #5
 8014c46:	2300      	movs	r3, #0
 8014c48:	f8cd 8000 	str.w	r8, [sp]
 8014c4c:	3030      	adds	r0, #48	@ 0x30
 8014c4e:	2200      	movs	r2, #0
 8014c50:	f7f9 f906 	bl	800de60 <__atomic_exchange_8>
 8014c54:	ea51 0300 	orrs.w	r3, r1, r0
 8014c58:	4606      	mov	r6, r0
 8014c5a:	460f      	mov	r7, r1
 8014c5c:	d090      	beq.n	8014b80 <_rcl_timer_time_jump+0x14>
 8014c5e:	9a02      	ldr	r2, [sp, #8]
 8014c60:	9b03      	ldr	r3, [sp, #12]
 8014c62:	f8cd 8000 	str.w	r8, [sp]
 8014c66:	1a12      	subs	r2, r2, r0
 8014c68:	6820      	ldr	r0, [r4, #0]
 8014c6a:	eb63 0301 	sbc.w	r3, r3, r1
 8014c6e:	eb12 020a 	adds.w	r2, r2, sl
 8014c72:	eb43 0305 	adc.w	r3, r3, r5
 8014c76:	3028      	adds	r0, #40	@ 0x28
 8014c78:	f7f9 f8bc 	bl	800ddf4 <__atomic_store_8>
 8014c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014c80:	f8cd 8000 	str.w	r8, [sp]
 8014c84:	6820      	ldr	r0, [r4, #0]
 8014c86:	1b92      	subs	r2, r2, r6
 8014c88:	eb63 0307 	sbc.w	r3, r3, r7
 8014c8c:	3020      	adds	r0, #32
 8014c8e:	f7f9 f8b1 	bl	800ddf4 <__atomic_store_8>
 8014c92:	e775      	b.n	8014b80 <_rcl_timer_time_jump+0x14>
 8014c94:	6820      	ldr	r0, [r4, #0]
 8014c96:	3008      	adds	r0, #8
 8014c98:	f7ff fb04 	bl	80142a4 <rcl_trigger_guard_condition>
 8014c9c:	e770      	b.n	8014b80 <_rcl_timer_time_jump+0x14>
 8014c9e:	bf00      	nop

08014ca0 <rcl_get_zero_initialized_timer>:
 8014ca0:	4b01      	ldr	r3, [pc, #4]	@ (8014ca8 <rcl_get_zero_initialized_timer+0x8>)
 8014ca2:	6818      	ldr	r0, [r3, #0]
 8014ca4:	4770      	bx	lr
 8014ca6:	bf00      	nop
 8014ca8:	0801a7c4 	.word	0x0801a7c4
 8014cac:	00000000 	.word	0x00000000

08014cb0 <rcl_timer_init>:
 8014cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014cb4:	b0aa      	sub	sp, #168	@ 0xa8
 8014cb6:	4604      	mov	r4, r0
 8014cb8:	a835      	add	r0, sp, #212	@ 0xd4
 8014cba:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 8014cbe:	460d      	mov	r5, r1
 8014cc0:	4692      	mov	sl, r2
 8014cc2:	f7f9 f853 	bl	800dd6c <rcutils_allocator_is_valid>
 8014cc6:	2800      	cmp	r0, #0
 8014cc8:	d064      	beq.n	8014d94 <rcl_timer_init+0xe4>
 8014cca:	2c00      	cmp	r4, #0
 8014ccc:	d062      	beq.n	8014d94 <rcl_timer_init+0xe4>
 8014cce:	2d00      	cmp	r5, #0
 8014cd0:	d060      	beq.n	8014d94 <rcl_timer_init+0xe4>
 8014cd2:	2f00      	cmp	r7, #0
 8014cd4:	db5e      	blt.n	8014d94 <rcl_timer_init+0xe4>
 8014cd6:	6823      	ldr	r3, [r4, #0]
 8014cd8:	b123      	cbz	r3, 8014ce4 <rcl_timer_init+0x34>
 8014cda:	2664      	movs	r6, #100	@ 0x64
 8014cdc:	4630      	mov	r0, r6
 8014cde:	b02a      	add	sp, #168	@ 0xa8
 8014ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ce4:	a908      	add	r1, sp, #32
 8014ce6:	4628      	mov	r0, r5
 8014ce8:	f7ff fe74 	bl	80149d4 <rcl_clock_get_now>
 8014cec:	4606      	mov	r6, r0
 8014cee:	2800      	cmp	r0, #0
 8014cf0:	d1f4      	bne.n	8014cdc <rcl_timer_init+0x2c>
 8014cf2:	ae06      	add	r6, sp, #24
 8014cf4:	4630      	mov	r0, r6
 8014cf6:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8014cfa:	f7ff f9db 	bl	80140b4 <rcl_get_zero_initialized_guard_condition>
 8014cfe:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014d02:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8014d06:	ae0b      	add	r6, sp, #44	@ 0x2c
 8014d08:	e889 0003 	stmia.w	r9, {r0, r1}
 8014d0c:	4630      	mov	r0, r6
 8014d0e:	f7ff faad 	bl	801426c <rcl_guard_condition_get_default_options>
 8014d12:	ab0d      	add	r3, sp, #52	@ 0x34
 8014d14:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014d18:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014d1c:	4651      	mov	r1, sl
 8014d1e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014d22:	4648      	mov	r0, r9
 8014d24:	f7ff f9d0 	bl	80140c8 <rcl_guard_condition_init>
 8014d28:	4606      	mov	r6, r0
 8014d2a:	2800      	cmp	r0, #0
 8014d2c:	d1d6      	bne.n	8014cdc <rcl_timer_init+0x2c>
 8014d2e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014d30:	781b      	ldrb	r3, [r3, #0]
 8014d32:	2b01      	cmp	r3, #1
 8014d34:	d033      	beq.n	8014d9e <rcl_timer_init+0xee>
 8014d36:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8014d38:	911a      	str	r1, [sp, #104]	@ 0x68
 8014d3a:	4642      	mov	r2, r8
 8014d3c:	463b      	mov	r3, r7
 8014d3e:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8014d42:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014d46:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8014df8 <rcl_timer_init+0x148>
 8014d4a:	eb12 0008 	adds.w	r0, r2, r8
 8014d4e:	eb47 0103 	adc.w	r1, r7, r3
 8014d52:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8014d56:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8014d5a:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8014d5e:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8014d62:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014d66:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8014d6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d6e:	f8de 3000 	ldr.w	r3, [lr]
 8014d72:	f8cc 3000 	str.w	r3, [ip]
 8014d76:	f04f 0a00 	mov.w	sl, #0
 8014d7a:	4619      	mov	r1, r3
 8014d7c:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8014d80:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8014d82:	2050      	movs	r0, #80	@ 0x50
 8014d84:	4798      	blx	r3
 8014d86:	6020      	str	r0, [r4, #0]
 8014d88:	b358      	cbz	r0, 8014de2 <rcl_timer_init+0x132>
 8014d8a:	2250      	movs	r2, #80	@ 0x50
 8014d8c:	a916      	add	r1, sp, #88	@ 0x58
 8014d8e:	f003 ff48 	bl	8018c22 <memcpy>
 8014d92:	e7a3      	b.n	8014cdc <rcl_timer_init+0x2c>
 8014d94:	260b      	movs	r6, #11
 8014d96:	4630      	mov	r0, r6
 8014d98:	b02a      	add	sp, #168	@ 0xa8
 8014d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d9e:	2001      	movs	r0, #1
 8014da0:	2100      	movs	r1, #0
 8014da2:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8014da6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014daa:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8014dae:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8014db2:	4a13      	ldr	r2, [pc, #76]	@ (8014e00 <rcl_timer_init+0x150>)
 8014db4:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8014db8:	9405      	str	r4, [sp, #20]
 8014dba:	9204      	str	r2, [sp, #16]
 8014dbc:	ab12      	add	r3, sp, #72	@ 0x48
 8014dbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014dc0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014dc4:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8014dc8:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8014dcc:	4628      	mov	r0, r5
 8014dce:	f7ff fe0d 	bl	80149ec <rcl_clock_add_jump_callback>
 8014dd2:	4682      	mov	sl, r0
 8014dd4:	2800      	cmp	r0, #0
 8014dd6:	d0ae      	beq.n	8014d36 <rcl_timer_init+0x86>
 8014dd8:	4648      	mov	r0, r9
 8014dda:	f7ff fa21 	bl	8014220 <rcl_guard_condition_fini>
 8014dde:	4656      	mov	r6, sl
 8014de0:	e77c      	b.n	8014cdc <rcl_timer_init+0x2c>
 8014de2:	4648      	mov	r0, r9
 8014de4:	f7ff fa1c 	bl	8014220 <rcl_guard_condition_fini>
 8014de8:	4905      	ldr	r1, [pc, #20]	@ (8014e00 <rcl_timer_init+0x150>)
 8014dea:	4622      	mov	r2, r4
 8014dec:	4628      	mov	r0, r5
 8014dee:	f7ff fe5f 	bl	8014ab0 <rcl_clock_remove_jump_callback>
 8014df2:	260a      	movs	r6, #10
 8014df4:	e772      	b.n	8014cdc <rcl_timer_init+0x2c>
 8014df6:	bf00      	nop
	...
 8014e00:	08014b6d 	.word	0x08014b6d

08014e04 <rcl_timer_call>:
 8014e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e08:	b087      	sub	sp, #28
 8014e0a:	2800      	cmp	r0, #0
 8014e0c:	d06d      	beq.n	8014eea <rcl_timer_call+0xe6>
 8014e0e:	6803      	ldr	r3, [r0, #0]
 8014e10:	4604      	mov	r4, r0
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d063      	beq.n	8014ede <rcl_timer_call+0xda>
 8014e16:	f3bf 8f5b 	dmb	ish
 8014e1a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014e1e:	f3bf 8f5b 	dmb	ish
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d150      	bne.n	8014ec8 <rcl_timer_call+0xc4>
 8014e26:	6803      	ldr	r3, [r0, #0]
 8014e28:	a904      	add	r1, sp, #16
 8014e2a:	6818      	ldr	r0, [r3, #0]
 8014e2c:	f7ff fdd2 	bl	80149d4 <rcl_clock_get_now>
 8014e30:	4605      	mov	r5, r0
 8014e32:	2800      	cmp	r0, #0
 8014e34:	d14a      	bne.n	8014ecc <rcl_timer_call+0xc8>
 8014e36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	db4a      	blt.n	8014ed4 <rcl_timer_call+0xd0>
 8014e3e:	6820      	ldr	r0, [r4, #0]
 8014e40:	f04f 0a05 	mov.w	sl, #5
 8014e44:	f8cd a000 	str.w	sl, [sp]
 8014e48:	3020      	adds	r0, #32
 8014e4a:	f7f9 f809 	bl	800de60 <__atomic_exchange_8>
 8014e4e:	6823      	ldr	r3, [r4, #0]
 8014e50:	f3bf 8f5b 	dmb	ish
 8014e54:	4680      	mov	r8, r0
 8014e56:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8014e5a:	f3bf 8f5b 	dmb	ish
 8014e5e:	6820      	ldr	r0, [r4, #0]
 8014e60:	4689      	mov	r9, r1
 8014e62:	3028      	adds	r0, #40	@ 0x28
 8014e64:	4651      	mov	r1, sl
 8014e66:	f7f8 ff8f 	bl	800dd88 <__atomic_load_8>
 8014e6a:	4606      	mov	r6, r0
 8014e6c:	6820      	ldr	r0, [r4, #0]
 8014e6e:	460f      	mov	r7, r1
 8014e70:	3018      	adds	r0, #24
 8014e72:	4651      	mov	r1, sl
 8014e74:	f7f8 ff88 	bl	800dd88 <__atomic_load_8>
 8014e78:	1836      	adds	r6, r6, r0
 8014e7a:	4602      	mov	r2, r0
 8014e7c:	4682      	mov	sl, r0
 8014e7e:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8014e82:	eb47 0701 	adc.w	r7, r7, r1
 8014e86:	4286      	cmp	r6, r0
 8014e88:	460b      	mov	r3, r1
 8014e8a:	eb77 010c 	sbcs.w	r1, r7, ip
 8014e8e:	da04      	bge.n	8014e9a <rcl_timer_call+0x96>
 8014e90:	ea53 0102 	orrs.w	r1, r3, r2
 8014e94:	d12e      	bne.n	8014ef4 <rcl_timer_call+0xf0>
 8014e96:	4606      	mov	r6, r0
 8014e98:	4667      	mov	r7, ip
 8014e9a:	6820      	ldr	r0, [r4, #0]
 8014e9c:	2105      	movs	r1, #5
 8014e9e:	4632      	mov	r2, r6
 8014ea0:	463b      	mov	r3, r7
 8014ea2:	3028      	adds	r0, #40	@ 0x28
 8014ea4:	9100      	str	r1, [sp, #0]
 8014ea6:	f7f8 ffa5 	bl	800ddf4 <__atomic_store_8>
 8014eaa:	f1bb 0f00 	cmp.w	fp, #0
 8014eae:	d00d      	beq.n	8014ecc <rcl_timer_call+0xc8>
 8014eb0:	9a04      	ldr	r2, [sp, #16]
 8014eb2:	9b05      	ldr	r3, [sp, #20]
 8014eb4:	ebb2 0208 	subs.w	r2, r2, r8
 8014eb8:	4620      	mov	r0, r4
 8014eba:	eb63 0309 	sbc.w	r3, r3, r9
 8014ebe:	47d8      	blx	fp
 8014ec0:	4628      	mov	r0, r5
 8014ec2:	b007      	add	sp, #28
 8014ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ec8:	f240 3521 	movw	r5, #801	@ 0x321
 8014ecc:	4628      	mov	r0, r5
 8014ece:	b007      	add	sp, #28
 8014ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ed4:	2501      	movs	r5, #1
 8014ed6:	4628      	mov	r0, r5
 8014ed8:	b007      	add	sp, #28
 8014eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ede:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8014ee2:	4628      	mov	r0, r5
 8014ee4:	b007      	add	sp, #28
 8014ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eea:	250b      	movs	r5, #11
 8014eec:	4628      	mov	r0, r5
 8014eee:	b007      	add	sp, #28
 8014ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ef4:	1b80      	subs	r0, r0, r6
 8014ef6:	eb6c 0107 	sbc.w	r1, ip, r7
 8014efa:	3801      	subs	r0, #1
 8014efc:	f161 0100 	sbc.w	r1, r1, #0
 8014f00:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014f04:	f7eb fc00 	bl	8000708 <__aeabi_ldivmod>
 8014f08:	9b02      	ldr	r3, [sp, #8]
 8014f0a:	3001      	adds	r0, #1
 8014f0c:	f141 0100 	adc.w	r1, r1, #0
 8014f10:	fb00 f303 	mul.w	r3, r0, r3
 8014f14:	fb01 330a 	mla	r3, r1, sl, r3
 8014f18:	fba0 0a0a 	umull	r0, sl, r0, sl
 8014f1c:	1986      	adds	r6, r0, r6
 8014f1e:	4453      	add	r3, sl
 8014f20:	eb43 0707 	adc.w	r7, r3, r7
 8014f24:	e7b9      	b.n	8014e9a <rcl_timer_call+0x96>
 8014f26:	bf00      	nop

08014f28 <rcl_timer_is_ready>:
 8014f28:	b570      	push	{r4, r5, r6, lr}
 8014f2a:	b082      	sub	sp, #8
 8014f2c:	b378      	cbz	r0, 8014f8e <rcl_timer_is_ready+0x66>
 8014f2e:	6803      	ldr	r3, [r0, #0]
 8014f30:	4604      	mov	r4, r0
 8014f32:	b383      	cbz	r3, 8014f96 <rcl_timer_is_ready+0x6e>
 8014f34:	460d      	mov	r5, r1
 8014f36:	b351      	cbz	r1, 8014f8e <rcl_timer_is_ready+0x66>
 8014f38:	f3bf 8f5b 	dmb	ish
 8014f3c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014f40:	f3bf 8f5b 	dmb	ish
 8014f44:	b953      	cbnz	r3, 8014f5c <rcl_timer_is_ready+0x34>
 8014f46:	6803      	ldr	r3, [r0, #0]
 8014f48:	4669      	mov	r1, sp
 8014f4a:	6818      	ldr	r0, [r3, #0]
 8014f4c:	f7ff fd42 	bl	80149d4 <rcl_clock_get_now>
 8014f50:	4606      	mov	r6, r0
 8014f52:	b140      	cbz	r0, 8014f66 <rcl_timer_is_ready+0x3e>
 8014f54:	f240 3321 	movw	r3, #801	@ 0x321
 8014f58:	4298      	cmp	r0, r3
 8014f5a:	d101      	bne.n	8014f60 <rcl_timer_is_ready+0x38>
 8014f5c:	2600      	movs	r6, #0
 8014f5e:	702e      	strb	r6, [r5, #0]
 8014f60:	4630      	mov	r0, r6
 8014f62:	b002      	add	sp, #8
 8014f64:	bd70      	pop	{r4, r5, r6, pc}
 8014f66:	6820      	ldr	r0, [r4, #0]
 8014f68:	2105      	movs	r1, #5
 8014f6a:	3028      	adds	r0, #40	@ 0x28
 8014f6c:	f7f8 ff0c 	bl	800dd88 <__atomic_load_8>
 8014f70:	9b00      	ldr	r3, [sp, #0]
 8014f72:	1ac0      	subs	r0, r0, r3
 8014f74:	9b01      	ldr	r3, [sp, #4]
 8014f76:	eb61 0103 	sbc.w	r1, r1, r3
 8014f7a:	2801      	cmp	r0, #1
 8014f7c:	f171 0300 	sbcs.w	r3, r1, #0
 8014f80:	bfb4      	ite	lt
 8014f82:	2301      	movlt	r3, #1
 8014f84:	2300      	movge	r3, #0
 8014f86:	4630      	mov	r0, r6
 8014f88:	702b      	strb	r3, [r5, #0]
 8014f8a:	b002      	add	sp, #8
 8014f8c:	bd70      	pop	{r4, r5, r6, pc}
 8014f8e:	260b      	movs	r6, #11
 8014f90:	4630      	mov	r0, r6
 8014f92:	b002      	add	sp, #8
 8014f94:	bd70      	pop	{r4, r5, r6, pc}
 8014f96:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8014f9a:	e7e1      	b.n	8014f60 <rcl_timer_is_ready+0x38>

08014f9c <rcl_timer_get_time_until_next_call>:
 8014f9c:	b570      	push	{r4, r5, r6, lr}
 8014f9e:	b082      	sub	sp, #8
 8014fa0:	b330      	cbz	r0, 8014ff0 <rcl_timer_get_time_until_next_call+0x54>
 8014fa2:	6803      	ldr	r3, [r0, #0]
 8014fa4:	4604      	mov	r4, r0
 8014fa6:	b33b      	cbz	r3, 8014ff8 <rcl_timer_get_time_until_next_call+0x5c>
 8014fa8:	460d      	mov	r5, r1
 8014faa:	b309      	cbz	r1, 8014ff0 <rcl_timer_get_time_until_next_call+0x54>
 8014fac:	f3bf 8f5b 	dmb	ish
 8014fb0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014fb4:	f3bf 8f5b 	dmb	ish
 8014fb8:	b9ab      	cbnz	r3, 8014fe6 <rcl_timer_get_time_until_next_call+0x4a>
 8014fba:	6803      	ldr	r3, [r0, #0]
 8014fbc:	4669      	mov	r1, sp
 8014fbe:	6818      	ldr	r0, [r3, #0]
 8014fc0:	f7ff fd08 	bl	80149d4 <rcl_clock_get_now>
 8014fc4:	4606      	mov	r6, r0
 8014fc6:	b958      	cbnz	r0, 8014fe0 <rcl_timer_get_time_until_next_call+0x44>
 8014fc8:	6820      	ldr	r0, [r4, #0]
 8014fca:	2105      	movs	r1, #5
 8014fcc:	3028      	adds	r0, #40	@ 0x28
 8014fce:	f7f8 fedb 	bl	800dd88 <__atomic_load_8>
 8014fd2:	9b00      	ldr	r3, [sp, #0]
 8014fd4:	1ac0      	subs	r0, r0, r3
 8014fd6:	9b01      	ldr	r3, [sp, #4]
 8014fd8:	6028      	str	r0, [r5, #0]
 8014fda:	eb61 0103 	sbc.w	r1, r1, r3
 8014fde:	6069      	str	r1, [r5, #4]
 8014fe0:	4630      	mov	r0, r6
 8014fe2:	b002      	add	sp, #8
 8014fe4:	bd70      	pop	{r4, r5, r6, pc}
 8014fe6:	f240 3621 	movw	r6, #801	@ 0x321
 8014fea:	4630      	mov	r0, r6
 8014fec:	b002      	add	sp, #8
 8014fee:	bd70      	pop	{r4, r5, r6, pc}
 8014ff0:	260b      	movs	r6, #11
 8014ff2:	4630      	mov	r0, r6
 8014ff4:	b002      	add	sp, #8
 8014ff6:	bd70      	pop	{r4, r5, r6, pc}
 8014ff8:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8014ffc:	e7f0      	b.n	8014fe0 <rcl_timer_get_time_until_next_call+0x44>
 8014ffe:	bf00      	nop

08015000 <rcl_timer_get_guard_condition>:
 8015000:	b130      	cbz	r0, 8015010 <rcl_timer_get_guard_condition+0x10>
 8015002:	6800      	ldr	r0, [r0, #0]
 8015004:	b120      	cbz	r0, 8015010 <rcl_timer_get_guard_condition+0x10>
 8015006:	68c3      	ldr	r3, [r0, #12]
 8015008:	b10b      	cbz	r3, 801500e <rcl_timer_get_guard_condition+0xe>
 801500a:	3008      	adds	r0, #8
 801500c:	4770      	bx	lr
 801500e:	4618      	mov	r0, r3
 8015010:	4770      	bx	lr
 8015012:	bf00      	nop

08015014 <rcl_validate_enclave_name_with_size>:
 8015014:	b378      	cbz	r0, 8015076 <rcl_validate_enclave_name_with_size+0x62>
 8015016:	b570      	push	{r4, r5, r6, lr}
 8015018:	4615      	mov	r5, r2
 801501a:	b0c2      	sub	sp, #264	@ 0x108
 801501c:	b302      	cbz	r2, 8015060 <rcl_validate_enclave_name_with_size+0x4c>
 801501e:	461e      	mov	r6, r3
 8015020:	466a      	mov	r2, sp
 8015022:	ab01      	add	r3, sp, #4
 8015024:	460c      	mov	r4, r1
 8015026:	f7f9 fb01 	bl	800e62c <rmw_validate_namespace_with_size>
 801502a:	4684      	mov	ip, r0
 801502c:	b9e8      	cbnz	r0, 801506a <rcl_validate_enclave_name_with_size+0x56>
 801502e:	9b00      	ldr	r3, [sp, #0]
 8015030:	b923      	cbnz	r3, 801503c <rcl_validate_enclave_name_with_size+0x28>
 8015032:	2300      	movs	r3, #0
 8015034:	602b      	str	r3, [r5, #0]
 8015036:	4660      	mov	r0, ip
 8015038:	b042      	add	sp, #264	@ 0x108
 801503a:	bd70      	pop	{r4, r5, r6, pc}
 801503c:	2b07      	cmp	r3, #7
 801503e:	d007      	beq.n	8015050 <rcl_validate_enclave_name_with_size+0x3c>
 8015040:	1e5a      	subs	r2, r3, #1
 8015042:	2a05      	cmp	r2, #5
 8015044:	d833      	bhi.n	80150ae <rcl_validate_enclave_name_with_size+0x9a>
 8015046:	e8df f002 	tbb	[pc, r2]
 801504a:	2c2f      	.short	0x2c2f
 801504c:	1a232629 	.word	0x1a232629
 8015050:	2cff      	cmp	r4, #255	@ 0xff
 8015052:	d9ee      	bls.n	8015032 <rcl_validate_enclave_name_with_size+0x1e>
 8015054:	602b      	str	r3, [r5, #0]
 8015056:	2e00      	cmp	r6, #0
 8015058:	d0ed      	beq.n	8015036 <rcl_validate_enclave_name_with_size+0x22>
 801505a:	23fe      	movs	r3, #254	@ 0xfe
 801505c:	6033      	str	r3, [r6, #0]
 801505e:	e7ea      	b.n	8015036 <rcl_validate_enclave_name_with_size+0x22>
 8015060:	f04f 0c0b 	mov.w	ip, #11
 8015064:	4660      	mov	r0, ip
 8015066:	b042      	add	sp, #264	@ 0x108
 8015068:	bd70      	pop	{r4, r5, r6, pc}
 801506a:	f7fe fe3b 	bl	8013ce4 <rcl_convert_rmw_ret_to_rcl_ret>
 801506e:	4684      	mov	ip, r0
 8015070:	4660      	mov	r0, ip
 8015072:	b042      	add	sp, #264	@ 0x108
 8015074:	bd70      	pop	{r4, r5, r6, pc}
 8015076:	f04f 0c0b 	mov.w	ip, #11
 801507a:	4660      	mov	r0, ip
 801507c:	4770      	bx	lr
 801507e:	2306      	movs	r3, #6
 8015080:	602b      	str	r3, [r5, #0]
 8015082:	2e00      	cmp	r6, #0
 8015084:	d0d7      	beq.n	8015036 <rcl_validate_enclave_name_with_size+0x22>
 8015086:	9b01      	ldr	r3, [sp, #4]
 8015088:	6033      	str	r3, [r6, #0]
 801508a:	4660      	mov	r0, ip
 801508c:	b042      	add	sp, #264	@ 0x108
 801508e:	bd70      	pop	{r4, r5, r6, pc}
 8015090:	2305      	movs	r3, #5
 8015092:	602b      	str	r3, [r5, #0]
 8015094:	e7f5      	b.n	8015082 <rcl_validate_enclave_name_with_size+0x6e>
 8015096:	2304      	movs	r3, #4
 8015098:	602b      	str	r3, [r5, #0]
 801509a:	e7f2      	b.n	8015082 <rcl_validate_enclave_name_with_size+0x6e>
 801509c:	2303      	movs	r3, #3
 801509e:	602b      	str	r3, [r5, #0]
 80150a0:	e7ef      	b.n	8015082 <rcl_validate_enclave_name_with_size+0x6e>
 80150a2:	2302      	movs	r3, #2
 80150a4:	602b      	str	r3, [r5, #0]
 80150a6:	e7ec      	b.n	8015082 <rcl_validate_enclave_name_with_size+0x6e>
 80150a8:	2301      	movs	r3, #1
 80150aa:	602b      	str	r3, [r5, #0]
 80150ac:	e7e9      	b.n	8015082 <rcl_validate_enclave_name_with_size+0x6e>
 80150ae:	4a04      	ldr	r2, [pc, #16]	@ (80150c0 <rcl_validate_enclave_name_with_size+0xac>)
 80150b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80150b4:	a802      	add	r0, sp, #8
 80150b6:	f7f9 f845 	bl	800e144 <rcutils_snprintf>
 80150ba:	f04f 0c01 	mov.w	ip, #1
 80150be:	e7ba      	b.n	8015036 <rcl_validate_enclave_name_with_size+0x22>
 80150c0:	0801a7c8 	.word	0x0801a7c8

080150c4 <rcl_validate_enclave_name>:
 80150c4:	b168      	cbz	r0, 80150e2 <rcl_validate_enclave_name+0x1e>
 80150c6:	b570      	push	{r4, r5, r6, lr}
 80150c8:	460d      	mov	r5, r1
 80150ca:	4616      	mov	r6, r2
 80150cc:	4604      	mov	r4, r0
 80150ce:	f7eb f8b1 	bl	8000234 <strlen>
 80150d2:	4633      	mov	r3, r6
 80150d4:	4601      	mov	r1, r0
 80150d6:	462a      	mov	r2, r5
 80150d8:	4620      	mov	r0, r4
 80150da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150de:	f7ff bf99 	b.w	8015014 <rcl_validate_enclave_name_with_size>
 80150e2:	200b      	movs	r0, #11
 80150e4:	4770      	bx	lr
 80150e6:	bf00      	nop

080150e8 <rcl_validate_topic_name>:
 80150e8:	2800      	cmp	r0, #0
 80150ea:	d07a      	beq.n	80151e2 <rcl_validate_topic_name+0xfa>
 80150ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150f0:	460e      	mov	r6, r1
 80150f2:	2900      	cmp	r1, #0
 80150f4:	d07c      	beq.n	80151f0 <rcl_validate_topic_name+0x108>
 80150f6:	4617      	mov	r7, r2
 80150f8:	4605      	mov	r5, r0
 80150fa:	f7eb f89b 	bl	8000234 <strlen>
 80150fe:	b1b0      	cbz	r0, 801512e <rcl_validate_topic_name+0x46>
 8015100:	f895 9000 	ldrb.w	r9, [r5]
 8015104:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8015288 <rcl_validate_topic_name+0x1a0>
 8015108:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801510c:	f013 0304 	ands.w	r3, r3, #4
 8015110:	d169      	bne.n	80151e6 <rcl_validate_topic_name+0xfe>
 8015112:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8015116:	f815 2008 	ldrb.w	r2, [r5, r8]
 801511a:	2a2f      	cmp	r2, #47	@ 0x2f
 801511c:	d10e      	bne.n	801513c <rcl_validate_topic_name+0x54>
 801511e:	2202      	movs	r2, #2
 8015120:	6032      	str	r2, [r6, #0]
 8015122:	b36f      	cbz	r7, 8015180 <rcl_validate_topic_name+0x98>
 8015124:	f8c7 8000 	str.w	r8, [r7]
 8015128:	4618      	mov	r0, r3
 801512a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801512e:	2301      	movs	r3, #1
 8015130:	6033      	str	r3, [r6, #0]
 8015132:	b32f      	cbz	r7, 8015180 <rcl_validate_topic_name+0x98>
 8015134:	2000      	movs	r0, #0
 8015136:	6038      	str	r0, [r7, #0]
 8015138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801513c:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8015140:	461c      	mov	r4, r3
 8015142:	4619      	mov	r1, r3
 8015144:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8015148:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801514c:	f1be 0f09 	cmp.w	lr, #9
 8015150:	d919      	bls.n	8015186 <rcl_validate_topic_name+0x9e>
 8015152:	f022 0e20 	bic.w	lr, r2, #32
 8015156:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 801515a:	f1be 0f19 	cmp.w	lr, #25
 801515e:	d912      	bls.n	8015186 <rcl_validate_topic_name+0x9e>
 8015160:	2a5f      	cmp	r2, #95	@ 0x5f
 8015162:	d019      	beq.n	8015198 <rcl_validate_topic_name+0xb0>
 8015164:	2a2f      	cmp	r2, #47	@ 0x2f
 8015166:	d051      	beq.n	801520c <rcl_validate_topic_name+0x124>
 8015168:	2a7e      	cmp	r2, #126	@ 0x7e
 801516a:	d048      	beq.n	80151fe <rcl_validate_topic_name+0x116>
 801516c:	2a7b      	cmp	r2, #123	@ 0x7b
 801516e:	d054      	beq.n	801521a <rcl_validate_topic_name+0x132>
 8015170:	2a7d      	cmp	r2, #125	@ 0x7d
 8015172:	d161      	bne.n	8015238 <rcl_validate_topic_name+0x150>
 8015174:	2c00      	cmp	r4, #0
 8015176:	d155      	bne.n	8015224 <rcl_validate_topic_name+0x13c>
 8015178:	2305      	movs	r3, #5
 801517a:	6033      	str	r3, [r6, #0]
 801517c:	b107      	cbz	r7, 8015180 <rcl_validate_topic_name+0x98>
 801517e:	6039      	str	r1, [r7, #0]
 8015180:	2000      	movs	r0, #0
 8015182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015186:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801518a:	0752      	lsls	r2, r2, #29
 801518c:	d504      	bpl.n	8015198 <rcl_validate_topic_name+0xb0>
 801518e:	b11c      	cbz	r4, 8015198 <rcl_validate_topic_name+0xb0>
 8015190:	b111      	cbz	r1, 8015198 <rcl_validate_topic_name+0xb0>
 8015192:	1e4a      	subs	r2, r1, #1
 8015194:	429a      	cmp	r2, r3
 8015196:	d02d      	beq.n	80151f4 <rcl_validate_topic_name+0x10c>
 8015198:	3101      	adds	r1, #1
 801519a:	4288      	cmp	r0, r1
 801519c:	d1d2      	bne.n	8015144 <rcl_validate_topic_name+0x5c>
 801519e:	2c00      	cmp	r4, #0
 80151a0:	d145      	bne.n	801522e <rcl_validate_topic_name+0x146>
 80151a2:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 80151a6:	d04f      	beq.n	8015248 <rcl_validate_topic_name+0x160>
 80151a8:	4620      	mov	r0, r4
 80151aa:	2301      	movs	r3, #1
 80151ac:	e006      	b.n	80151bc <rcl_validate_topic_name+0xd4>
 80151ae:	428b      	cmp	r3, r1
 80151b0:	f105 0501 	add.w	r5, r5, #1
 80151b4:	f103 0201 	add.w	r2, r3, #1
 80151b8:	d236      	bcs.n	8015228 <rcl_validate_topic_name+0x140>
 80151ba:	4613      	mov	r3, r2
 80151bc:	4580      	cmp	r8, r0
 80151be:	f100 0001 	add.w	r0, r0, #1
 80151c2:	d0f4      	beq.n	80151ae <rcl_validate_topic_name+0xc6>
 80151c4:	782a      	ldrb	r2, [r5, #0]
 80151c6:	2a2f      	cmp	r2, #47	@ 0x2f
 80151c8:	d1f1      	bne.n	80151ae <rcl_validate_topic_name+0xc6>
 80151ca:	786a      	ldrb	r2, [r5, #1]
 80151cc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80151d0:	0754      	lsls	r4, r2, #29
 80151d2:	d5ec      	bpl.n	80151ae <rcl_validate_topic_name+0xc6>
 80151d4:	2204      	movs	r2, #4
 80151d6:	6032      	str	r2, [r6, #0]
 80151d8:	2f00      	cmp	r7, #0
 80151da:	d0d1      	beq.n	8015180 <rcl_validate_topic_name+0x98>
 80151dc:	603b      	str	r3, [r7, #0]
 80151de:	2000      	movs	r0, #0
 80151e0:	e7aa      	b.n	8015138 <rcl_validate_topic_name+0x50>
 80151e2:	200b      	movs	r0, #11
 80151e4:	4770      	bx	lr
 80151e6:	2304      	movs	r3, #4
 80151e8:	6033      	str	r3, [r6, #0]
 80151ea:	2f00      	cmp	r7, #0
 80151ec:	d1a2      	bne.n	8015134 <rcl_validate_topic_name+0x4c>
 80151ee:	e7c7      	b.n	8015180 <rcl_validate_topic_name+0x98>
 80151f0:	200b      	movs	r0, #11
 80151f2:	e7a1      	b.n	8015138 <rcl_validate_topic_name+0x50>
 80151f4:	2309      	movs	r3, #9
 80151f6:	6033      	str	r3, [r6, #0]
 80151f8:	2f00      	cmp	r7, #0
 80151fa:	d1c0      	bne.n	801517e <rcl_validate_topic_name+0x96>
 80151fc:	e7c0      	b.n	8015180 <rcl_validate_topic_name+0x98>
 80151fe:	2900      	cmp	r1, #0
 8015200:	d0ca      	beq.n	8015198 <rcl_validate_topic_name+0xb0>
 8015202:	2306      	movs	r3, #6
 8015204:	6033      	str	r3, [r6, #0]
 8015206:	2f00      	cmp	r7, #0
 8015208:	d1b9      	bne.n	801517e <rcl_validate_topic_name+0x96>
 801520a:	e7b9      	b.n	8015180 <rcl_validate_topic_name+0x98>
 801520c:	2c00      	cmp	r4, #0
 801520e:	d0c3      	beq.n	8015198 <rcl_validate_topic_name+0xb0>
 8015210:	2308      	movs	r3, #8
 8015212:	6033      	str	r3, [r6, #0]
 8015214:	2f00      	cmp	r7, #0
 8015216:	d1b2      	bne.n	801517e <rcl_validate_topic_name+0x96>
 8015218:	e7b2      	b.n	8015180 <rcl_validate_topic_name+0x98>
 801521a:	2c00      	cmp	r4, #0
 801521c:	d1f8      	bne.n	8015210 <rcl_validate_topic_name+0x128>
 801521e:	460b      	mov	r3, r1
 8015220:	2401      	movs	r4, #1
 8015222:	e7b9      	b.n	8015198 <rcl_validate_topic_name+0xb0>
 8015224:	2400      	movs	r4, #0
 8015226:	e7b7      	b.n	8015198 <rcl_validate_topic_name+0xb0>
 8015228:	2000      	movs	r0, #0
 801522a:	6030      	str	r0, [r6, #0]
 801522c:	e784      	b.n	8015138 <rcl_validate_topic_name+0x50>
 801522e:	2205      	movs	r2, #5
 8015230:	6032      	str	r2, [r6, #0]
 8015232:	2f00      	cmp	r7, #0
 8015234:	d1d2      	bne.n	80151dc <rcl_validate_topic_name+0xf4>
 8015236:	e7a3      	b.n	8015180 <rcl_validate_topic_name+0x98>
 8015238:	2c00      	cmp	r4, #0
 801523a:	bf14      	ite	ne
 801523c:	2308      	movne	r3, #8
 801523e:	2303      	moveq	r3, #3
 8015240:	6033      	str	r3, [r6, #0]
 8015242:	2f00      	cmp	r7, #0
 8015244:	d19b      	bne.n	801517e <rcl_validate_topic_name+0x96>
 8015246:	e79b      	b.n	8015180 <rcl_validate_topic_name+0x98>
 8015248:	2301      	movs	r3, #1
 801524a:	e00a      	b.n	8015262 <rcl_validate_topic_name+0x17a>
 801524c:	2c01      	cmp	r4, #1
 801524e:	d013      	beq.n	8015278 <rcl_validate_topic_name+0x190>
 8015250:	4299      	cmp	r1, r3
 8015252:	f104 0401 	add.w	r4, r4, #1
 8015256:	f105 0501 	add.w	r5, r5, #1
 801525a:	f103 0201 	add.w	r2, r3, #1
 801525e:	d9e3      	bls.n	8015228 <rcl_validate_topic_name+0x140>
 8015260:	4613      	mov	r3, r2
 8015262:	45a0      	cmp	r8, r4
 8015264:	d0f4      	beq.n	8015250 <rcl_validate_topic_name+0x168>
 8015266:	782a      	ldrb	r2, [r5, #0]
 8015268:	2a2f      	cmp	r2, #47	@ 0x2f
 801526a:	d1ef      	bne.n	801524c <rcl_validate_topic_name+0x164>
 801526c:	786a      	ldrb	r2, [r5, #1]
 801526e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015272:	0752      	lsls	r2, r2, #29
 8015274:	d5ec      	bpl.n	8015250 <rcl_validate_topic_name+0x168>
 8015276:	e7ad      	b.n	80151d4 <rcl_validate_topic_name+0xec>
 8015278:	2307      	movs	r3, #7
 801527a:	6033      	str	r3, [r6, #0]
 801527c:	2f00      	cmp	r7, #0
 801527e:	f43f af7f 	beq.w	8015180 <rcl_validate_topic_name+0x98>
 8015282:	603c      	str	r4, [r7, #0]
 8015284:	2000      	movs	r0, #0
 8015286:	e757      	b.n	8015138 <rcl_validate_topic_name+0x50>
 8015288:	0801aa9a 	.word	0x0801aa9a

0801528c <rcl_get_zero_initialized_wait_set>:
 801528c:	b510      	push	{r4, lr}
 801528e:	4c08      	ldr	r4, [pc, #32]	@ (80152b0 <rcl_get_zero_initialized_wait_set+0x24>)
 8015290:	4686      	mov	lr, r0
 8015292:	4684      	mov	ip, r0
 8015294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015296:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801529a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801529c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80152a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80152a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80152a6:	6823      	ldr	r3, [r4, #0]
 80152a8:	f8cc 3000 	str.w	r3, [ip]
 80152ac:	4670      	mov	r0, lr
 80152ae:	bd10      	pop	{r4, pc}
 80152b0:	0801a828 	.word	0x0801a828

080152b4 <rcl_wait_set_is_valid>:
 80152b4:	b118      	cbz	r0, 80152be <rcl_wait_set_is_valid+0xa>
 80152b6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80152b8:	3800      	subs	r0, #0
 80152ba:	bf18      	it	ne
 80152bc:	2001      	movne	r0, #1
 80152be:	4770      	bx	lr

080152c0 <rcl_wait_set_fini>:
 80152c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152c4:	b082      	sub	sp, #8
 80152c6:	2800      	cmp	r0, #0
 80152c8:	f000 8095 	beq.w	80153f6 <rcl_wait_set_fini+0x136>
 80152cc:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80152ce:	4604      	mov	r4, r0
 80152d0:	2e00      	cmp	r6, #0
 80152d2:	f000 808c 	beq.w	80153ee <rcl_wait_set_fini+0x12e>
 80152d6:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80152d8:	f001 ff62 	bl	80171a0 <rmw_destroy_wait_set>
 80152dc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80152de:	1e06      	subs	r6, r0, #0
 80152e0:	bf18      	it	ne
 80152e2:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80152e6:	2d00      	cmp	r5, #0
 80152e8:	f000 8081 	beq.w	80153ee <rcl_wait_set_fini+0x12e>
 80152ec:	6820      	ldr	r0, [r4, #0]
 80152ee:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80152f2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80152f4:	2700      	movs	r7, #0
 80152f6:	6067      	str	r7, [r4, #4]
 80152f8:	602f      	str	r7, [r5, #0]
 80152fa:	b120      	cbz	r0, 8015306 <rcl_wait_set_fini+0x46>
 80152fc:	9101      	str	r1, [sp, #4]
 80152fe:	47c0      	blx	r8
 8015300:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015302:	9901      	ldr	r1, [sp, #4]
 8015304:	6027      	str	r7, [r4, #0]
 8015306:	68a8      	ldr	r0, [r5, #8]
 8015308:	b120      	cbz	r0, 8015314 <rcl_wait_set_fini+0x54>
 801530a:	47c0      	blx	r8
 801530c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801530e:	2300      	movs	r3, #0
 8015310:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8015314:	68a0      	ldr	r0, [r4, #8]
 8015316:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015318:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801531a:	f04f 0800 	mov.w	r8, #0
 801531e:	f8c4 800c 	str.w	r8, [r4, #12]
 8015322:	f8c5 800c 	str.w	r8, [r5, #12]
 8015326:	b128      	cbz	r0, 8015334 <rcl_wait_set_fini+0x74>
 8015328:	47b8      	blx	r7
 801532a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801532c:	f8c4 8008 	str.w	r8, [r4, #8]
 8015330:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015332:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015334:	6968      	ldr	r0, [r5, #20]
 8015336:	f04f 0800 	mov.w	r8, #0
 801533a:	f8c5 8010 	str.w	r8, [r5, #16]
 801533e:	b128      	cbz	r0, 801534c <rcl_wait_set_fini+0x8c>
 8015340:	47b8      	blx	r7
 8015342:	f8c5 8014 	str.w	r8, [r5, #20]
 8015346:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015348:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801534a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801534c:	6920      	ldr	r0, [r4, #16]
 801534e:	f04f 0800 	mov.w	r8, #0
 8015352:	f8c4 8014 	str.w	r8, [r4, #20]
 8015356:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801535a:	b128      	cbz	r0, 8015368 <rcl_wait_set_fini+0xa8>
 801535c:	47b8      	blx	r7
 801535e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015360:	f8c4 8010 	str.w	r8, [r4, #16]
 8015364:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015366:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015368:	69a0      	ldr	r0, [r4, #24]
 801536a:	f04f 0800 	mov.w	r8, #0
 801536e:	f8c4 801c 	str.w	r8, [r4, #28]
 8015372:	f8c5 8018 	str.w	r8, [r5, #24]
 8015376:	b128      	cbz	r0, 8015384 <rcl_wait_set_fini+0xc4>
 8015378:	9101      	str	r1, [sp, #4]
 801537a:	47b8      	blx	r7
 801537c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801537e:	9901      	ldr	r1, [sp, #4]
 8015380:	f8c4 8018 	str.w	r8, [r4, #24]
 8015384:	6a28      	ldr	r0, [r5, #32]
 8015386:	b120      	cbz	r0, 8015392 <rcl_wait_set_fini+0xd2>
 8015388:	47b8      	blx	r7
 801538a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801538c:	2300      	movs	r3, #0
 801538e:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8015392:	6a20      	ldr	r0, [r4, #32]
 8015394:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015398:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801539a:	2700      	movs	r7, #0
 801539c:	6267      	str	r7, [r4, #36]	@ 0x24
 801539e:	626f      	str	r7, [r5, #36]	@ 0x24
 80153a0:	b120      	cbz	r0, 80153ac <rcl_wait_set_fini+0xec>
 80153a2:	9101      	str	r1, [sp, #4]
 80153a4:	47c0      	blx	r8
 80153a6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80153a8:	9901      	ldr	r1, [sp, #4]
 80153aa:	6227      	str	r7, [r4, #32]
 80153ac:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80153ae:	b120      	cbz	r0, 80153ba <rcl_wait_set_fini+0xfa>
 80153b0:	47c0      	blx	r8
 80153b2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80153b4:	2300      	movs	r3, #0
 80153b6:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80153ba:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80153bc:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80153c0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80153c2:	2700      	movs	r7, #0
 80153c4:	62e7      	str	r7, [r4, #44]	@ 0x2c
 80153c6:	632f      	str	r7, [r5, #48]	@ 0x30
 80153c8:	b120      	cbz	r0, 80153d4 <rcl_wait_set_fini+0x114>
 80153ca:	9101      	str	r1, [sp, #4]
 80153cc:	47c0      	blx	r8
 80153ce:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80153d0:	9901      	ldr	r1, [sp, #4]
 80153d2:	62a7      	str	r7, [r4, #40]	@ 0x28
 80153d4:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80153d6:	b120      	cbz	r0, 80153e2 <rcl_wait_set_fini+0x122>
 80153d8:	47c0      	blx	r8
 80153da:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80153dc:	2300      	movs	r3, #0
 80153de:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80153e2:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80153e4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80153e6:	4628      	mov	r0, r5
 80153e8:	4798      	blx	r3
 80153ea:	2300      	movs	r3, #0
 80153ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80153ee:	4630      	mov	r0, r6
 80153f0:	b002      	add	sp, #8
 80153f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153f6:	260b      	movs	r6, #11
 80153f8:	4630      	mov	r0, r6
 80153fa:	b002      	add	sp, #8
 80153fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015400 <rcl_wait_set_add_subscription>:
 8015400:	b318      	cbz	r0, 801544a <rcl_wait_set_add_subscription+0x4a>
 8015402:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015404:	b570      	push	{r4, r5, r6, lr}
 8015406:	4604      	mov	r4, r0
 8015408:	b30b      	cbz	r3, 801544e <rcl_wait_set_add_subscription+0x4e>
 801540a:	b319      	cbz	r1, 8015454 <rcl_wait_set_add_subscription+0x54>
 801540c:	681d      	ldr	r5, [r3, #0]
 801540e:	6840      	ldr	r0, [r0, #4]
 8015410:	4285      	cmp	r5, r0
 8015412:	d217      	bcs.n	8015444 <rcl_wait_set_add_subscription+0x44>
 8015414:	6820      	ldr	r0, [r4, #0]
 8015416:	1c6e      	adds	r6, r5, #1
 8015418:	601e      	str	r6, [r3, #0]
 801541a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801541e:	b102      	cbz	r2, 8015422 <rcl_wait_set_add_subscription+0x22>
 8015420:	6015      	str	r5, [r2, #0]
 8015422:	4608      	mov	r0, r1
 8015424:	f7ff fa36 	bl	8014894 <rcl_subscription_get_rmw_handle>
 8015428:	b150      	cbz	r0, 8015440 <rcl_wait_set_add_subscription+0x40>
 801542a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801542c:	6842      	ldr	r2, [r0, #4]
 801542e:	689b      	ldr	r3, [r3, #8]
 8015430:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015434:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015436:	6853      	ldr	r3, [r2, #4]
 8015438:	3301      	adds	r3, #1
 801543a:	2000      	movs	r0, #0
 801543c:	6053      	str	r3, [r2, #4]
 801543e:	bd70      	pop	{r4, r5, r6, pc}
 8015440:	2001      	movs	r0, #1
 8015442:	bd70      	pop	{r4, r5, r6, pc}
 8015444:	f240 3086 	movw	r0, #902	@ 0x386
 8015448:	bd70      	pop	{r4, r5, r6, pc}
 801544a:	200b      	movs	r0, #11
 801544c:	4770      	bx	lr
 801544e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015452:	bd70      	pop	{r4, r5, r6, pc}
 8015454:	200b      	movs	r0, #11
 8015456:	bd70      	pop	{r4, r5, r6, pc}

08015458 <rcl_wait_set_clear>:
 8015458:	2800      	cmp	r0, #0
 801545a:	d073      	beq.n	8015544 <rcl_wait_set_clear+0xec>
 801545c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801545e:	b510      	push	{r4, lr}
 8015460:	4604      	mov	r4, r0
 8015462:	2b00      	cmp	r3, #0
 8015464:	d070      	beq.n	8015548 <rcl_wait_set_clear+0xf0>
 8015466:	6800      	ldr	r0, [r0, #0]
 8015468:	b138      	cbz	r0, 801547a <rcl_wait_set_clear+0x22>
 801546a:	6862      	ldr	r2, [r4, #4]
 801546c:	2100      	movs	r1, #0
 801546e:	0092      	lsls	r2, r2, #2
 8015470:	f003 fb0e 	bl	8018a90 <memset>
 8015474:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015476:	2200      	movs	r2, #0
 8015478:	601a      	str	r2, [r3, #0]
 801547a:	68a0      	ldr	r0, [r4, #8]
 801547c:	b138      	cbz	r0, 801548e <rcl_wait_set_clear+0x36>
 801547e:	68e2      	ldr	r2, [r4, #12]
 8015480:	2100      	movs	r1, #0
 8015482:	0092      	lsls	r2, r2, #2
 8015484:	f003 fb04 	bl	8018a90 <memset>
 8015488:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801548a:	2200      	movs	r2, #0
 801548c:	60da      	str	r2, [r3, #12]
 801548e:	69a0      	ldr	r0, [r4, #24]
 8015490:	b138      	cbz	r0, 80154a2 <rcl_wait_set_clear+0x4a>
 8015492:	69e2      	ldr	r2, [r4, #28]
 8015494:	2100      	movs	r1, #0
 8015496:	0092      	lsls	r2, r2, #2
 8015498:	f003 fafa 	bl	8018a90 <memset>
 801549c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801549e:	2200      	movs	r2, #0
 80154a0:	619a      	str	r2, [r3, #24]
 80154a2:	6a20      	ldr	r0, [r4, #32]
 80154a4:	b138      	cbz	r0, 80154b6 <rcl_wait_set_clear+0x5e>
 80154a6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80154a8:	2100      	movs	r1, #0
 80154aa:	0092      	lsls	r2, r2, #2
 80154ac:	f003 faf0 	bl	8018a90 <memset>
 80154b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80154b2:	2200      	movs	r2, #0
 80154b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80154b6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80154b8:	b138      	cbz	r0, 80154ca <rcl_wait_set_clear+0x72>
 80154ba:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80154bc:	2100      	movs	r1, #0
 80154be:	0092      	lsls	r2, r2, #2
 80154c0:	f003 fae6 	bl	8018a90 <memset>
 80154c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80154c6:	2200      	movs	r2, #0
 80154c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80154ca:	6920      	ldr	r0, [r4, #16]
 80154cc:	b138      	cbz	r0, 80154de <rcl_wait_set_clear+0x86>
 80154ce:	6962      	ldr	r2, [r4, #20]
 80154d0:	2100      	movs	r1, #0
 80154d2:	0092      	lsls	r2, r2, #2
 80154d4:	f003 fadc 	bl	8018a90 <memset>
 80154d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80154da:	2200      	movs	r2, #0
 80154dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80154de:	6898      	ldr	r0, [r3, #8]
 80154e0:	b138      	cbz	r0, 80154f2 <rcl_wait_set_clear+0x9a>
 80154e2:	685a      	ldr	r2, [r3, #4]
 80154e4:	2100      	movs	r1, #0
 80154e6:	0092      	lsls	r2, r2, #2
 80154e8:	f003 fad2 	bl	8018a90 <memset>
 80154ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80154ee:	2200      	movs	r2, #0
 80154f0:	605a      	str	r2, [r3, #4]
 80154f2:	6958      	ldr	r0, [r3, #20]
 80154f4:	b138      	cbz	r0, 8015506 <rcl_wait_set_clear+0xae>
 80154f6:	691a      	ldr	r2, [r3, #16]
 80154f8:	2100      	movs	r1, #0
 80154fa:	0092      	lsls	r2, r2, #2
 80154fc:	f003 fac8 	bl	8018a90 <memset>
 8015500:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015502:	2200      	movs	r2, #0
 8015504:	611a      	str	r2, [r3, #16]
 8015506:	6a18      	ldr	r0, [r3, #32]
 8015508:	b138      	cbz	r0, 801551a <rcl_wait_set_clear+0xc2>
 801550a:	69da      	ldr	r2, [r3, #28]
 801550c:	2100      	movs	r1, #0
 801550e:	0092      	lsls	r2, r2, #2
 8015510:	f003 fabe 	bl	8018a90 <memset>
 8015514:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015516:	2200      	movs	r2, #0
 8015518:	61da      	str	r2, [r3, #28]
 801551a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801551c:	b138      	cbz	r0, 801552e <rcl_wait_set_clear+0xd6>
 801551e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015520:	2100      	movs	r1, #0
 8015522:	0092      	lsls	r2, r2, #2
 8015524:	f003 fab4 	bl	8018a90 <memset>
 8015528:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801552a:	2200      	movs	r2, #0
 801552c:	629a      	str	r2, [r3, #40]	@ 0x28
 801552e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015530:	b138      	cbz	r0, 8015542 <rcl_wait_set_clear+0xea>
 8015532:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015534:	2100      	movs	r1, #0
 8015536:	0092      	lsls	r2, r2, #2
 8015538:	f003 faaa 	bl	8018a90 <memset>
 801553c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801553e:	2000      	movs	r0, #0
 8015540:	6358      	str	r0, [r3, #52]	@ 0x34
 8015542:	bd10      	pop	{r4, pc}
 8015544:	200b      	movs	r0, #11
 8015546:	4770      	bx	lr
 8015548:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801554c:	bd10      	pop	{r4, pc}
 801554e:	bf00      	nop

08015550 <rcl_wait_set_resize>:
 8015550:	2800      	cmp	r0, #0
 8015552:	f000 8185 	beq.w	8015860 <rcl_wait_set_resize+0x310>
 8015556:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801555a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801555c:	b083      	sub	sp, #12
 801555e:	4605      	mov	r5, r0
 8015560:	2c00      	cmp	r4, #0
 8015562:	f000 817f 	beq.w	8015864 <rcl_wait_set_resize+0x314>
 8015566:	f04f 0900 	mov.w	r9, #0
 801556a:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801556e:	461f      	mov	r7, r3
 8015570:	4688      	mov	r8, r1
 8015572:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8015576:	4616      	mov	r6, r2
 8015578:	f8c0 9004 	str.w	r9, [r0, #4]
 801557c:	f8c4 9000 	str.w	r9, [r4]
 8015580:	2900      	cmp	r1, #0
 8015582:	f000 80bd 	beq.w	8015700 <rcl_wait_set_resize+0x1b0>
 8015586:	008c      	lsls	r4, r1, #2
 8015588:	6800      	ldr	r0, [r0, #0]
 801558a:	9301      	str	r3, [sp, #4]
 801558c:	4652      	mov	r2, sl
 801558e:	4621      	mov	r1, r4
 8015590:	4798      	blx	r3
 8015592:	9b01      	ldr	r3, [sp, #4]
 8015594:	6028      	str	r0, [r5, #0]
 8015596:	2800      	cmp	r0, #0
 8015598:	f000 80cb 	beq.w	8015732 <rcl_wait_set_resize+0x1e2>
 801559c:	4622      	mov	r2, r4
 801559e:	4649      	mov	r1, r9
 80155a0:	9301      	str	r3, [sp, #4]
 80155a2:	f003 fa75 	bl	8018a90 <memset>
 80155a6:	f8c5 8004 	str.w	r8, [r5, #4]
 80155aa:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80155ae:	9b01      	ldr	r3, [sp, #4]
 80155b0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80155b4:	f8c8 9004 	str.w	r9, [r8, #4]
 80155b8:	4652      	mov	r2, sl
 80155ba:	4621      	mov	r1, r4
 80155bc:	4798      	blx	r3
 80155be:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80155c0:	f8c8 0008 	str.w	r0, [r8, #8]
 80155c4:	689b      	ldr	r3, [r3, #8]
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	f000 80ac 	beq.w	8015724 <rcl_wait_set_resize+0x1d4>
 80155cc:	4622      	mov	r2, r4
 80155ce:	4649      	mov	r1, r9
 80155d0:	4618      	mov	r0, r3
 80155d2:	f003 fa5d 	bl	8018a90 <memset>
 80155d6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80155d8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80155dc:	f04f 0800 	mov.w	r8, #0
 80155e0:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80155e4:	f8c5 800c 	str.w	r8, [r5, #12]
 80155e8:	f8c4 800c 	str.w	r8, [r4, #12]
 80155ec:	2e00      	cmp	r6, #0
 80155ee:	f040 80a4 	bne.w	801573a <rcl_wait_set_resize+0x1ea>
 80155f2:	68a8      	ldr	r0, [r5, #8]
 80155f4:	b128      	cbz	r0, 8015602 <rcl_wait_set_resize+0xb2>
 80155f6:	4649      	mov	r1, r9
 80155f8:	4790      	blx	r2
 80155fa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80155fc:	60ae      	str	r6, [r5, #8]
 80155fe:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015602:	f04f 0800 	mov.w	r8, #0
 8015606:	19f6      	adds	r6, r6, r7
 8015608:	f8c4 8010 	str.w	r8, [r4, #16]
 801560c:	f040 80ac 	bne.w	8015768 <rcl_wait_set_resize+0x218>
 8015610:	6960      	ldr	r0, [r4, #20]
 8015612:	b130      	cbz	r0, 8015622 <rcl_wait_set_resize+0xd2>
 8015614:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8015616:	4649      	mov	r1, r9
 8015618:	4798      	blx	r3
 801561a:	6166      	str	r6, [r4, #20]
 801561c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801561e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015622:	2600      	movs	r6, #0
 8015624:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015628:	616e      	str	r6, [r5, #20]
 801562a:	6426      	str	r6, [r4, #64]	@ 0x40
 801562c:	2f00      	cmp	r7, #0
 801562e:	f040 80ad 	bne.w	801578c <rcl_wait_set_resize+0x23c>
 8015632:	6928      	ldr	r0, [r5, #16]
 8015634:	b138      	cbz	r0, 8015646 <rcl_wait_set_resize+0xf6>
 8015636:	4649      	mov	r1, r9
 8015638:	47d0      	blx	sl
 801563a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801563c:	612f      	str	r7, [r5, #16]
 801563e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015642:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015646:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015648:	2600      	movs	r6, #0
 801564a:	61ee      	str	r6, [r5, #28]
 801564c:	61a6      	str	r6, [r4, #24]
 801564e:	2b00      	cmp	r3, #0
 8015650:	f040 80af 	bne.w	80157b2 <rcl_wait_set_resize+0x262>
 8015654:	69a8      	ldr	r0, [r5, #24]
 8015656:	b120      	cbz	r0, 8015662 <rcl_wait_set_resize+0x112>
 8015658:	4649      	mov	r1, r9
 801565a:	47d0      	blx	sl
 801565c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801565e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015660:	61ab      	str	r3, [r5, #24]
 8015662:	6a20      	ldr	r0, [r4, #32]
 8015664:	b128      	cbz	r0, 8015672 <rcl_wait_set_resize+0x122>
 8015666:	4649      	mov	r1, r9
 8015668:	47d0      	blx	sl
 801566a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801566c:	2300      	movs	r3, #0
 801566e:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8015672:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015674:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8015676:	2600      	movs	r6, #0
 8015678:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801567c:	626e      	str	r6, [r5, #36]	@ 0x24
 801567e:	6266      	str	r6, [r4, #36]	@ 0x24
 8015680:	2b00      	cmp	r3, #0
 8015682:	f000 80b6 	beq.w	80157f2 <rcl_wait_set_resize+0x2a2>
 8015686:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801568a:	6a28      	ldr	r0, [r5, #32]
 801568c:	463a      	mov	r2, r7
 801568e:	4651      	mov	r1, sl
 8015690:	47c8      	blx	r9
 8015692:	6228      	str	r0, [r5, #32]
 8015694:	2800      	cmp	r0, #0
 8015696:	d04c      	beq.n	8015732 <rcl_wait_set_resize+0x1e2>
 8015698:	4652      	mov	r2, sl
 801569a:	4631      	mov	r1, r6
 801569c:	f003 f9f8 	bl	8018a90 <memset>
 80156a0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80156a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80156a4:	626b      	str	r3, [r5, #36]	@ 0x24
 80156a6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80156a8:	62a6      	str	r6, [r4, #40]	@ 0x28
 80156aa:	463a      	mov	r2, r7
 80156ac:	4651      	mov	r1, sl
 80156ae:	47c8      	blx	r9
 80156b0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80156b2:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80156b4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80156b6:	2c00      	cmp	r4, #0
 80156b8:	f000 80f0 	beq.w	801589c <rcl_wait_set_resize+0x34c>
 80156bc:	4620      	mov	r0, r4
 80156be:	4652      	mov	r2, sl
 80156c0:	4631      	mov	r1, r6
 80156c2:	f003 f9e5 	bl	8018a90 <memset>
 80156c6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80156c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80156ca:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80156cc:	2600      	movs	r6, #0
 80156ce:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80156d2:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80156d4:	6326      	str	r6, [r4, #48]	@ 0x30
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	f040 809d 	bne.w	8015816 <rcl_wait_set_resize+0x2c6>
 80156dc:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80156de:	b120      	cbz	r0, 80156ea <rcl_wait_set_resize+0x19a>
 80156e0:	4639      	mov	r1, r7
 80156e2:	47c0      	blx	r8
 80156e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80156e6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80156e8:	62ab      	str	r3, [r5, #40]	@ 0x28
 80156ea:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80156ec:	b310      	cbz	r0, 8015734 <rcl_wait_set_resize+0x1e4>
 80156ee:	4639      	mov	r1, r7
 80156f0:	47c0      	blx	r8
 80156f2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80156f4:	2000      	movs	r0, #0
 80156f6:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 80156fa:	b003      	add	sp, #12
 80156fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015700:	6800      	ldr	r0, [r0, #0]
 8015702:	b120      	cbz	r0, 801570e <rcl_wait_set_resize+0x1be>
 8015704:	4651      	mov	r1, sl
 8015706:	47d8      	blx	fp
 8015708:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801570a:	f8c5 8000 	str.w	r8, [r5]
 801570e:	68a0      	ldr	r0, [r4, #8]
 8015710:	2800      	cmp	r0, #0
 8015712:	f43f af61 	beq.w	80155d8 <rcl_wait_set_resize+0x88>
 8015716:	4651      	mov	r1, sl
 8015718:	47d8      	blx	fp
 801571a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801571c:	2300      	movs	r3, #0
 801571e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8015722:	e759      	b.n	80155d8 <rcl_wait_set_resize+0x88>
 8015724:	6828      	ldr	r0, [r5, #0]
 8015726:	9301      	str	r3, [sp, #4]
 8015728:	4651      	mov	r1, sl
 801572a:	47d8      	blx	fp
 801572c:	9b01      	ldr	r3, [sp, #4]
 801572e:	e9c5 3300 	strd	r3, r3, [r5]
 8015732:	200a      	movs	r0, #10
 8015734:	b003      	add	sp, #12
 8015736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801573a:	00b4      	lsls	r4, r6, #2
 801573c:	68a8      	ldr	r0, [r5, #8]
 801573e:	464a      	mov	r2, r9
 8015740:	4621      	mov	r1, r4
 8015742:	4798      	blx	r3
 8015744:	60a8      	str	r0, [r5, #8]
 8015746:	2800      	cmp	r0, #0
 8015748:	d0f3      	beq.n	8015732 <rcl_wait_set_resize+0x1e2>
 801574a:	4622      	mov	r2, r4
 801574c:	4641      	mov	r1, r8
 801574e:	f003 f99f 	bl	8018a90 <memset>
 8015752:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015754:	60ee      	str	r6, [r5, #12]
 8015756:	f04f 0800 	mov.w	r8, #0
 801575a:	19f6      	adds	r6, r6, r7
 801575c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015760:	f8c4 8010 	str.w	r8, [r4, #16]
 8015764:	f43f af54 	beq.w	8015610 <rcl_wait_set_resize+0xc0>
 8015768:	00b6      	lsls	r6, r6, #2
 801576a:	464a      	mov	r2, r9
 801576c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801576e:	6960      	ldr	r0, [r4, #20]
 8015770:	4631      	mov	r1, r6
 8015772:	4798      	blx	r3
 8015774:	4681      	mov	r9, r0
 8015776:	6160      	str	r0, [r4, #20]
 8015778:	2800      	cmp	r0, #0
 801577a:	d076      	beq.n	801586a <rcl_wait_set_resize+0x31a>
 801577c:	4632      	mov	r2, r6
 801577e:	4641      	mov	r1, r8
 8015780:	f003 f986 	bl	8018a90 <memset>
 8015784:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015786:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801578a:	e74a      	b.n	8015622 <rcl_wait_set_resize+0xd2>
 801578c:	00bc      	lsls	r4, r7, #2
 801578e:	6928      	ldr	r0, [r5, #16]
 8015790:	464a      	mov	r2, r9
 8015792:	4621      	mov	r1, r4
 8015794:	47c0      	blx	r8
 8015796:	6128      	str	r0, [r5, #16]
 8015798:	2800      	cmp	r0, #0
 801579a:	d0ca      	beq.n	8015732 <rcl_wait_set_resize+0x1e2>
 801579c:	4622      	mov	r2, r4
 801579e:	4631      	mov	r1, r6
 80157a0:	f003 f976 	bl	8018a90 <memset>
 80157a4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80157a6:	616f      	str	r7, [r5, #20]
 80157a8:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80157ac:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80157b0:	e749      	b.n	8015646 <rcl_wait_set_resize+0xf6>
 80157b2:	009c      	lsls	r4, r3, #2
 80157b4:	69a8      	ldr	r0, [r5, #24]
 80157b6:	464a      	mov	r2, r9
 80157b8:	4621      	mov	r1, r4
 80157ba:	47c0      	blx	r8
 80157bc:	61a8      	str	r0, [r5, #24]
 80157be:	2800      	cmp	r0, #0
 80157c0:	d0b7      	beq.n	8015732 <rcl_wait_set_resize+0x1e2>
 80157c2:	4622      	mov	r2, r4
 80157c4:	4631      	mov	r1, r6
 80157c6:	f003 f963 	bl	8018a90 <memset>
 80157ca:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 80157cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80157ce:	61eb      	str	r3, [r5, #28]
 80157d0:	6a38      	ldr	r0, [r7, #32]
 80157d2:	61fe      	str	r6, [r7, #28]
 80157d4:	464a      	mov	r2, r9
 80157d6:	4621      	mov	r1, r4
 80157d8:	47c0      	blx	r8
 80157da:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80157dc:	6238      	str	r0, [r7, #32]
 80157de:	6a1f      	ldr	r7, [r3, #32]
 80157e0:	2f00      	cmp	r7, #0
 80157e2:	d054      	beq.n	801588e <rcl_wait_set_resize+0x33e>
 80157e4:	4622      	mov	r2, r4
 80157e6:	4631      	mov	r1, r6
 80157e8:	4638      	mov	r0, r7
 80157ea:	f003 f951 	bl	8018a90 <memset>
 80157ee:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80157f0:	e73f      	b.n	8015672 <rcl_wait_set_resize+0x122>
 80157f2:	6a28      	ldr	r0, [r5, #32]
 80157f4:	b120      	cbz	r0, 8015800 <rcl_wait_set_resize+0x2b0>
 80157f6:	4639      	mov	r1, r7
 80157f8:	47c0      	blx	r8
 80157fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80157fc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80157fe:	622b      	str	r3, [r5, #32]
 8015800:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8015802:	2800      	cmp	r0, #0
 8015804:	f43f af60 	beq.w	80156c8 <rcl_wait_set_resize+0x178>
 8015808:	4639      	mov	r1, r7
 801580a:	47c0      	blx	r8
 801580c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801580e:	2300      	movs	r3, #0
 8015810:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8015814:	e758      	b.n	80156c8 <rcl_wait_set_resize+0x178>
 8015816:	009c      	lsls	r4, r3, #2
 8015818:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801581a:	463a      	mov	r2, r7
 801581c:	4621      	mov	r1, r4
 801581e:	47c8      	blx	r9
 8015820:	62a8      	str	r0, [r5, #40]	@ 0x28
 8015822:	2800      	cmp	r0, #0
 8015824:	d085      	beq.n	8015732 <rcl_wait_set_resize+0x1e2>
 8015826:	4622      	mov	r2, r4
 8015828:	4631      	mov	r1, r6
 801582a:	f003 f931 	bl	8018a90 <memset>
 801582e:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8015832:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015834:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8015836:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801583a:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801583e:	463a      	mov	r2, r7
 8015840:	4621      	mov	r1, r4
 8015842:	47c8      	blx	r9
 8015844:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015846:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801584a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801584c:	b36b      	cbz	r3, 80158aa <rcl_wait_set_resize+0x35a>
 801584e:	4622      	mov	r2, r4
 8015850:	4631      	mov	r1, r6
 8015852:	4618      	mov	r0, r3
 8015854:	f003 f91c 	bl	8018a90 <memset>
 8015858:	4630      	mov	r0, r6
 801585a:	b003      	add	sp, #12
 801585c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015860:	200b      	movs	r0, #11
 8015862:	4770      	bx	lr
 8015864:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015868:	e764      	b.n	8015734 <rcl_wait_set_resize+0x1e4>
 801586a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801586c:	68a8      	ldr	r0, [r5, #8]
 801586e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8015870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015872:	4798      	blx	r3
 8015874:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015876:	6928      	ldr	r0, [r5, #16]
 8015878:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801587a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801587c:	f8c5 900c 	str.w	r9, [r5, #12]
 8015880:	f8c5 9008 	str.w	r9, [r5, #8]
 8015884:	4790      	blx	r2
 8015886:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801588a:	200a      	movs	r0, #10
 801588c:	e752      	b.n	8015734 <rcl_wait_set_resize+0x1e4>
 801588e:	69a8      	ldr	r0, [r5, #24]
 8015890:	4649      	mov	r1, r9
 8015892:	47d0      	blx	sl
 8015894:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8015898:	200a      	movs	r0, #10
 801589a:	e74b      	b.n	8015734 <rcl_wait_set_resize+0x1e4>
 801589c:	6a28      	ldr	r0, [r5, #32]
 801589e:	4639      	mov	r1, r7
 80158a0:	47c0      	blx	r8
 80158a2:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80158a6:	200a      	movs	r0, #10
 80158a8:	e744      	b.n	8015734 <rcl_wait_set_resize+0x1e4>
 80158aa:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80158ac:	9301      	str	r3, [sp, #4]
 80158ae:	4639      	mov	r1, r7
 80158b0:	47c0      	blx	r8
 80158b2:	9b01      	ldr	r3, [sp, #4]
 80158b4:	200a      	movs	r0, #10
 80158b6:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80158ba:	e73b      	b.n	8015734 <rcl_wait_set_resize+0x1e4>

080158bc <rcl_wait_set_init>:
 80158bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158c0:	b084      	sub	sp, #16
 80158c2:	4604      	mov	r4, r0
 80158c4:	a810      	add	r0, sp, #64	@ 0x40
 80158c6:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 80158ca:	460f      	mov	r7, r1
 80158cc:	4690      	mov	r8, r2
 80158ce:	4699      	mov	r9, r3
 80158d0:	f7f8 fa4c 	bl	800dd6c <rcutils_allocator_is_valid>
 80158d4:	2800      	cmp	r0, #0
 80158d6:	d06b      	beq.n	80159b0 <rcl_wait_set_init+0xf4>
 80158d8:	2c00      	cmp	r4, #0
 80158da:	d069      	beq.n	80159b0 <rcl_wait_set_init+0xf4>
 80158dc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80158de:	b125      	cbz	r5, 80158ea <rcl_wait_set_init+0x2e>
 80158e0:	2564      	movs	r5, #100	@ 0x64
 80158e2:	4628      	mov	r0, r5
 80158e4:	b004      	add	sp, #16
 80158e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158ea:	f1ba 0f00 	cmp.w	sl, #0
 80158ee:	d05f      	beq.n	80159b0 <rcl_wait_set_init+0xf4>
 80158f0:	4650      	mov	r0, sl
 80158f2:	f7fe fa15 	bl	8013d20 <rcl_context_is_valid>
 80158f6:	2800      	cmp	r0, #0
 80158f8:	d067      	beq.n	80159ca <rcl_wait_set_init+0x10e>
 80158fa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80158fc:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80158fe:	205c      	movs	r0, #92	@ 0x5c
 8015900:	4798      	blx	r3
 8015902:	6320      	str	r0, [r4, #48]	@ 0x30
 8015904:	2800      	cmp	r0, #0
 8015906:	d062      	beq.n	80159ce <rcl_wait_set_init+0x112>
 8015908:	4629      	mov	r1, r5
 801590a:	225c      	movs	r2, #92	@ 0x5c
 801590c:	f003 f8c0 	bl	8018a90 <memset>
 8015910:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8015914:	eb03 0e02 	add.w	lr, r3, r2
 8015918:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801591a:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 801591c:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8015920:	449e      	add	lr, r3
 8015922:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015926:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801592a:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801592e:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8015932:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8015936:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 801593a:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 801593e:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8015942:	f8da a000 	ldr.w	sl, [sl]
 8015946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015948:	44c6      	add	lr, r8
 801594a:	f8dc 3000 	ldr.w	r3, [ip]
 801594e:	602b      	str	r3, [r5, #0]
 8015950:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8015954:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8015958:	f001 fc18 	bl	801718c <rmw_create_wait_set>
 801595c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801595e:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8015960:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015962:	b350      	cbz	r0, 80159ba <rcl_wait_set_init+0xfe>
 8015964:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015966:	9302      	str	r3, [sp, #8]
 8015968:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801596a:	9301      	str	r3, [sp, #4]
 801596c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801596e:	9300      	str	r3, [sp, #0]
 8015970:	4642      	mov	r2, r8
 8015972:	464b      	mov	r3, r9
 8015974:	4639      	mov	r1, r7
 8015976:	4620      	mov	r0, r4
 8015978:	f7ff fdea 	bl	8015550 <rcl_wait_set_resize>
 801597c:	4605      	mov	r5, r0
 801597e:	2800      	cmp	r0, #0
 8015980:	d0af      	beq.n	80158e2 <rcl_wait_set_init+0x26>
 8015982:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015984:	bb2b      	cbnz	r3, 80159d2 <rcl_wait_set_init+0x116>
 8015986:	2600      	movs	r6, #0
 8015988:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801598c:	9600      	str	r6, [sp, #0]
 801598e:	4633      	mov	r3, r6
 8015990:	4632      	mov	r2, r6
 8015992:	4631      	mov	r1, r6
 8015994:	4620      	mov	r0, r4
 8015996:	f7ff fddb 	bl	8015550 <rcl_wait_set_resize>
 801599a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801599c:	2800      	cmp	r0, #0
 801599e:	d0a0      	beq.n	80158e2 <rcl_wait_set_init+0x26>
 80159a0:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80159a2:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80159a4:	4798      	blx	r3
 80159a6:	4628      	mov	r0, r5
 80159a8:	6326      	str	r6, [r4, #48]	@ 0x30
 80159aa:	b004      	add	sp, #16
 80159ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159b0:	250b      	movs	r5, #11
 80159b2:	4628      	mov	r0, r5
 80159b4:	b004      	add	sp, #16
 80159b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159ba:	2501      	movs	r5, #1
 80159bc:	f001 fbf0 	bl	80171a0 <rmw_destroy_wait_set>
 80159c0:	2800      	cmp	r0, #0
 80159c2:	bf18      	it	ne
 80159c4:	f44f 7561 	movne.w	r5, #900	@ 0x384
 80159c8:	e7dd      	b.n	8015986 <rcl_wait_set_init+0xca>
 80159ca:	2565      	movs	r5, #101	@ 0x65
 80159cc:	e789      	b.n	80158e2 <rcl_wait_set_init+0x26>
 80159ce:	250a      	movs	r5, #10
 80159d0:	e787      	b.n	80158e2 <rcl_wait_set_init+0x26>
 80159d2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80159d4:	e7f2      	b.n	80159bc <rcl_wait_set_init+0x100>
 80159d6:	bf00      	nop

080159d8 <rcl_wait_set_add_guard_condition>:
 80159d8:	b318      	cbz	r0, 8015a22 <rcl_wait_set_add_guard_condition+0x4a>
 80159da:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80159dc:	b570      	push	{r4, r5, r6, lr}
 80159de:	4604      	mov	r4, r0
 80159e0:	b30b      	cbz	r3, 8015a26 <rcl_wait_set_add_guard_condition+0x4e>
 80159e2:	b319      	cbz	r1, 8015a2c <rcl_wait_set_add_guard_condition+0x54>
 80159e4:	68dd      	ldr	r5, [r3, #12]
 80159e6:	68c0      	ldr	r0, [r0, #12]
 80159e8:	4285      	cmp	r5, r0
 80159ea:	d217      	bcs.n	8015a1c <rcl_wait_set_add_guard_condition+0x44>
 80159ec:	68a0      	ldr	r0, [r4, #8]
 80159ee:	1c6e      	adds	r6, r5, #1
 80159f0:	60de      	str	r6, [r3, #12]
 80159f2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80159f6:	b102      	cbz	r2, 80159fa <rcl_wait_set_add_guard_condition+0x22>
 80159f8:	6015      	str	r5, [r2, #0]
 80159fa:	4608      	mov	r0, r1
 80159fc:	f7fe fc62 	bl	80142c4 <rcl_guard_condition_get_rmw_handle>
 8015a00:	b150      	cbz	r0, 8015a18 <rcl_wait_set_add_guard_condition+0x40>
 8015a02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015a04:	6842      	ldr	r2, [r0, #4]
 8015a06:	695b      	ldr	r3, [r3, #20]
 8015a08:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015a0c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015a0e:	6913      	ldr	r3, [r2, #16]
 8015a10:	3301      	adds	r3, #1
 8015a12:	2000      	movs	r0, #0
 8015a14:	6113      	str	r3, [r2, #16]
 8015a16:	bd70      	pop	{r4, r5, r6, pc}
 8015a18:	2001      	movs	r0, #1
 8015a1a:	bd70      	pop	{r4, r5, r6, pc}
 8015a1c:	f240 3086 	movw	r0, #902	@ 0x386
 8015a20:	bd70      	pop	{r4, r5, r6, pc}
 8015a22:	200b      	movs	r0, #11
 8015a24:	4770      	bx	lr
 8015a26:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015a2a:	bd70      	pop	{r4, r5, r6, pc}
 8015a2c:	200b      	movs	r0, #11
 8015a2e:	bd70      	pop	{r4, r5, r6, pc}

08015a30 <rcl_wait_set_add_timer>:
 8015a30:	b328      	cbz	r0, 8015a7e <rcl_wait_set_add_timer+0x4e>
 8015a32:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015a34:	b570      	push	{r4, r5, r6, lr}
 8015a36:	4604      	mov	r4, r0
 8015a38:	b31b      	cbz	r3, 8015a82 <rcl_wait_set_add_timer+0x52>
 8015a3a:	b329      	cbz	r1, 8015a88 <rcl_wait_set_add_timer+0x58>
 8015a3c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8015a3e:	6965      	ldr	r5, [r4, #20]
 8015a40:	42a8      	cmp	r0, r5
 8015a42:	d219      	bcs.n	8015a78 <rcl_wait_set_add_timer+0x48>
 8015a44:	6925      	ldr	r5, [r4, #16]
 8015a46:	1c46      	adds	r6, r0, #1
 8015a48:	641e      	str	r6, [r3, #64]	@ 0x40
 8015a4a:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8015a4e:	b102      	cbz	r2, 8015a52 <rcl_wait_set_add_timer+0x22>
 8015a50:	6010      	str	r0, [r2, #0]
 8015a52:	4608      	mov	r0, r1
 8015a54:	f7ff fad4 	bl	8015000 <rcl_timer_get_guard_condition>
 8015a58:	b168      	cbz	r0, 8015a76 <rcl_wait_set_add_timer+0x46>
 8015a5a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015a5c:	68e3      	ldr	r3, [r4, #12]
 8015a5e:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8015a60:	3b01      	subs	r3, #1
 8015a62:	441d      	add	r5, r3
 8015a64:	f7fe fc2e 	bl	80142c4 <rcl_guard_condition_get_rmw_handle>
 8015a68:	b180      	cbz	r0, 8015a8c <rcl_wait_set_add_timer+0x5c>
 8015a6a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015a6c:	6842      	ldr	r2, [r0, #4]
 8015a6e:	695b      	ldr	r3, [r3, #20]
 8015a70:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015a74:	2000      	movs	r0, #0
 8015a76:	bd70      	pop	{r4, r5, r6, pc}
 8015a78:	f240 3086 	movw	r0, #902	@ 0x386
 8015a7c:	bd70      	pop	{r4, r5, r6, pc}
 8015a7e:	200b      	movs	r0, #11
 8015a80:	4770      	bx	lr
 8015a82:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015a86:	bd70      	pop	{r4, r5, r6, pc}
 8015a88:	200b      	movs	r0, #11
 8015a8a:	bd70      	pop	{r4, r5, r6, pc}
 8015a8c:	2001      	movs	r0, #1
 8015a8e:	bd70      	pop	{r4, r5, r6, pc}

08015a90 <rcl_wait_set_add_client>:
 8015a90:	b318      	cbz	r0, 8015ada <rcl_wait_set_add_client+0x4a>
 8015a92:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015a94:	b570      	push	{r4, r5, r6, lr}
 8015a96:	4604      	mov	r4, r0
 8015a98:	b30b      	cbz	r3, 8015ade <rcl_wait_set_add_client+0x4e>
 8015a9a:	b319      	cbz	r1, 8015ae4 <rcl_wait_set_add_client+0x54>
 8015a9c:	699d      	ldr	r5, [r3, #24]
 8015a9e:	69c0      	ldr	r0, [r0, #28]
 8015aa0:	4285      	cmp	r5, r0
 8015aa2:	d217      	bcs.n	8015ad4 <rcl_wait_set_add_client+0x44>
 8015aa4:	69a0      	ldr	r0, [r4, #24]
 8015aa6:	1c6e      	adds	r6, r5, #1
 8015aa8:	619e      	str	r6, [r3, #24]
 8015aaa:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015aae:	b102      	cbz	r2, 8015ab2 <rcl_wait_set_add_client+0x22>
 8015ab0:	6015      	str	r5, [r2, #0]
 8015ab2:	4608      	mov	r0, r1
 8015ab4:	f7f6 fd04 	bl	800c4c0 <rcl_client_get_rmw_handle>
 8015ab8:	b150      	cbz	r0, 8015ad0 <rcl_wait_set_add_client+0x40>
 8015aba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015abc:	6842      	ldr	r2, [r0, #4]
 8015abe:	6a1b      	ldr	r3, [r3, #32]
 8015ac0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015ac4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015ac6:	69d3      	ldr	r3, [r2, #28]
 8015ac8:	3301      	adds	r3, #1
 8015aca:	2000      	movs	r0, #0
 8015acc:	61d3      	str	r3, [r2, #28]
 8015ace:	bd70      	pop	{r4, r5, r6, pc}
 8015ad0:	2001      	movs	r0, #1
 8015ad2:	bd70      	pop	{r4, r5, r6, pc}
 8015ad4:	f240 3086 	movw	r0, #902	@ 0x386
 8015ad8:	bd70      	pop	{r4, r5, r6, pc}
 8015ada:	200b      	movs	r0, #11
 8015adc:	4770      	bx	lr
 8015ade:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015ae2:	bd70      	pop	{r4, r5, r6, pc}
 8015ae4:	200b      	movs	r0, #11
 8015ae6:	bd70      	pop	{r4, r5, r6, pc}

08015ae8 <rcl_wait_set_add_service>:
 8015ae8:	b318      	cbz	r0, 8015b32 <rcl_wait_set_add_service+0x4a>
 8015aea:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015aec:	b570      	push	{r4, r5, r6, lr}
 8015aee:	4604      	mov	r4, r0
 8015af0:	b30b      	cbz	r3, 8015b36 <rcl_wait_set_add_service+0x4e>
 8015af2:	b319      	cbz	r1, 8015b3c <rcl_wait_set_add_service+0x54>
 8015af4:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8015af6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8015af8:	4285      	cmp	r5, r0
 8015afa:	d217      	bcs.n	8015b2c <rcl_wait_set_add_service+0x44>
 8015afc:	6a20      	ldr	r0, [r4, #32]
 8015afe:	1c6e      	adds	r6, r5, #1
 8015b00:	625e      	str	r6, [r3, #36]	@ 0x24
 8015b02:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015b06:	b102      	cbz	r2, 8015b0a <rcl_wait_set_add_service+0x22>
 8015b08:	6015      	str	r5, [r2, #0]
 8015b0a:	4608      	mov	r0, r1
 8015b0c:	f7fe fe02 	bl	8014714 <rcl_service_get_rmw_handle>
 8015b10:	b150      	cbz	r0, 8015b28 <rcl_wait_set_add_service+0x40>
 8015b12:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015b14:	6842      	ldr	r2, [r0, #4]
 8015b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b18:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015b1c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015b1e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8015b20:	3301      	adds	r3, #1
 8015b22:	2000      	movs	r0, #0
 8015b24:	6293      	str	r3, [r2, #40]	@ 0x28
 8015b26:	bd70      	pop	{r4, r5, r6, pc}
 8015b28:	2001      	movs	r0, #1
 8015b2a:	bd70      	pop	{r4, r5, r6, pc}
 8015b2c:	f240 3086 	movw	r0, #902	@ 0x386
 8015b30:	bd70      	pop	{r4, r5, r6, pc}
 8015b32:	200b      	movs	r0, #11
 8015b34:	4770      	bx	lr
 8015b36:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015b3a:	bd70      	pop	{r4, r5, r6, pc}
 8015b3c:	200b      	movs	r0, #11
 8015b3e:	bd70      	pop	{r4, r5, r6, pc}

08015b40 <rcl_wait>:
 8015b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b44:	ed2d 8b02 	vpush	{d8}
 8015b48:	b08d      	sub	sp, #52	@ 0x34
 8015b4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015b4e:	2800      	cmp	r0, #0
 8015b50:	f000 8143 	beq.w	8015dda <rcl_wait+0x29a>
 8015b54:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8015b56:	4605      	mov	r5, r0
 8015b58:	2e00      	cmp	r6, #0
 8015b5a:	f000 8112 	beq.w	8015d82 <rcl_wait+0x242>
 8015b5e:	6843      	ldr	r3, [r0, #4]
 8015b60:	b983      	cbnz	r3, 8015b84 <rcl_wait+0x44>
 8015b62:	68eb      	ldr	r3, [r5, #12]
 8015b64:	b973      	cbnz	r3, 8015b84 <rcl_wait+0x44>
 8015b66:	696b      	ldr	r3, [r5, #20]
 8015b68:	b963      	cbnz	r3, 8015b84 <rcl_wait+0x44>
 8015b6a:	69eb      	ldr	r3, [r5, #28]
 8015b6c:	b953      	cbnz	r3, 8015b84 <rcl_wait+0x44>
 8015b6e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8015b70:	b943      	cbnz	r3, 8015b84 <rcl_wait+0x44>
 8015b72:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8015b74:	b933      	cbnz	r3, 8015b84 <rcl_wait+0x44>
 8015b76:	f240 3085 	movw	r0, #901	@ 0x385
 8015b7a:	b00d      	add	sp, #52	@ 0x34
 8015b7c:	ecbd 8b02 	vpop	{d8}
 8015b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b84:	9b04      	ldr	r3, [sp, #16]
 8015b86:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8015b88:	2b01      	cmp	r3, #1
 8015b8a:	9b05      	ldr	r3, [sp, #20]
 8015b8c:	f173 0300 	sbcs.w	r3, r3, #0
 8015b90:	f2c0 80f0 	blt.w	8015d74 <rcl_wait+0x234>
 8015b94:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8015b98:	4643      	mov	r3, r8
 8015b9a:	2a00      	cmp	r2, #0
 8015b9c:	f000 8133 	beq.w	8015e06 <rcl_wait+0x2c6>
 8015ba0:	2400      	movs	r4, #0
 8015ba2:	4613      	mov	r3, r2
 8015ba4:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8015e18 <rcl_wait+0x2d8>
 8015ba8:	46a2      	mov	sl, r4
 8015baa:	46a3      	mov	fp, r4
 8015bac:	f240 3921 	movw	r9, #801	@ 0x321
 8015bb0:	4632      	mov	r2, r6
 8015bb2:	e014      	b.n	8015bde <rcl_wait+0x9e>
 8015bb4:	2800      	cmp	r0, #0
 8015bb6:	d1e0      	bne.n	8015b7a <rcl_wait+0x3a>
 8015bb8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015bbc:	4542      	cmp	r2, r8
 8015bbe:	eb73 0107 	sbcs.w	r1, r3, r7
 8015bc2:	da03      	bge.n	8015bcc <rcl_wait+0x8c>
 8015bc4:	4690      	mov	r8, r2
 8015bc6:	461f      	mov	r7, r3
 8015bc8:	f04f 0b01 	mov.w	fp, #1
 8015bcc:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8015bce:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015bd0:	3401      	adds	r4, #1
 8015bd2:	f14a 0a00 	adc.w	sl, sl, #0
 8015bd6:	429c      	cmp	r4, r3
 8015bd8:	f17a 0100 	sbcs.w	r1, sl, #0
 8015bdc:	d228      	bcs.n	8015c30 <rcl_wait+0xf0>
 8015bde:	6928      	ldr	r0, [r5, #16]
 8015be0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8015be4:	a908      	add	r1, sp, #32
 8015be6:	00a6      	lsls	r6, r4, #2
 8015be8:	2800      	cmp	r0, #0
 8015bea:	d0f1      	beq.n	8015bd0 <rcl_wait+0x90>
 8015bec:	68eb      	ldr	r3, [r5, #12]
 8015bee:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8015bf2:	4423      	add	r3, r4
 8015bf4:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8015bf8:	f1be 0f00 	cmp.w	lr, #0
 8015bfc:	d006      	beq.n	8015c0c <rcl_wait+0xcc>
 8015bfe:	6913      	ldr	r3, [r2, #16]
 8015c00:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8015c04:	3301      	adds	r3, #1
 8015c06:	6113      	str	r3, [r2, #16]
 8015c08:	692b      	ldr	r3, [r5, #16]
 8015c0a:	5998      	ldr	r0, [r3, r6]
 8015c0c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015c10:	f7ff f9c4 	bl	8014f9c <rcl_timer_get_time_until_next_call>
 8015c14:	4548      	cmp	r0, r9
 8015c16:	d1cd      	bne.n	8015bb4 <rcl_wait+0x74>
 8015c18:	692b      	ldr	r3, [r5, #16]
 8015c1a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8015c1c:	2100      	movs	r1, #0
 8015c1e:	5199      	str	r1, [r3, r6]
 8015c20:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015c22:	3401      	adds	r4, #1
 8015c24:	f14a 0a00 	adc.w	sl, sl, #0
 8015c28:	429c      	cmp	r4, r3
 8015c2a:	f17a 0100 	sbcs.w	r1, sl, #0
 8015c2e:	d3d6      	bcc.n	8015bde <rcl_wait+0x9e>
 8015c30:	4616      	mov	r6, r2
 8015c32:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8015c36:	4313      	orrs	r3, r2
 8015c38:	46d9      	mov	r9, fp
 8015c3a:	f040 80a9 	bne.w	8015d90 <rcl_wait+0x250>
 8015c3e:	2300      	movs	r3, #0
 8015c40:	2200      	movs	r2, #0
 8015c42:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015c46:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8015c4a:	ab08      	add	r3, sp, #32
 8015c4c:	9302      	str	r3, [sp, #8]
 8015c4e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8015c50:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8015c54:	e9cd 3200 	strd	r3, r2, [sp]
 8015c58:	f106 0110 	add.w	r1, r6, #16
 8015c5c:	f106 031c 	add.w	r3, r6, #28
 8015c60:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8015c64:	1d30      	adds	r0, r6, #4
 8015c66:	f001 f919 	bl	8016e9c <rmw_wait>
 8015c6a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015c6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015c6e:	4680      	mov	r8, r0
 8015c70:	b1ca      	cbz	r2, 8015ca6 <rcl_wait+0x166>
 8015c72:	2400      	movs	r4, #0
 8015c74:	4627      	mov	r7, r4
 8015c76:	692a      	ldr	r2, [r5, #16]
 8015c78:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8015c7c:	f10d 011f 	add.w	r1, sp, #31
 8015c80:	00a6      	lsls	r6, r4, #2
 8015c82:	b160      	cbz	r0, 8015c9e <rcl_wait+0x15e>
 8015c84:	f88d 701f 	strb.w	r7, [sp, #31]
 8015c88:	f7ff f94e 	bl	8014f28 <rcl_timer_is_ready>
 8015c8c:	2800      	cmp	r0, #0
 8015c8e:	f47f af74 	bne.w	8015b7a <rcl_wait+0x3a>
 8015c92:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8015c96:	b90b      	cbnz	r3, 8015c9c <rcl_wait+0x15c>
 8015c98:	692a      	ldr	r2, [r5, #16]
 8015c9a:	5193      	str	r3, [r2, r6]
 8015c9c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015c9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015ca0:	3401      	adds	r4, #1
 8015ca2:	42a2      	cmp	r2, r4
 8015ca4:	d8e7      	bhi.n	8015c76 <rcl_wait+0x136>
 8015ca6:	f038 0002 	bics.w	r0, r8, #2
 8015caa:	f040 8090 	bne.w	8015dce <rcl_wait+0x28e>
 8015cae:	686e      	ldr	r6, [r5, #4]
 8015cb0:	4602      	mov	r2, r0
 8015cb2:	b91e      	cbnz	r6, 8015cbc <rcl_wait+0x17c>
 8015cb4:	e00d      	b.n	8015cd2 <rcl_wait+0x192>
 8015cb6:	3201      	adds	r2, #1
 8015cb8:	42b2      	cmp	r2, r6
 8015cba:	d00a      	beq.n	8015cd2 <rcl_wait+0x192>
 8015cbc:	6899      	ldr	r1, [r3, #8]
 8015cbe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015cc2:	2900      	cmp	r1, #0
 8015cc4:	d1f7      	bne.n	8015cb6 <rcl_wait+0x176>
 8015cc6:	682c      	ldr	r4, [r5, #0]
 8015cc8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015ccc:	3201      	adds	r2, #1
 8015cce:	42b2      	cmp	r2, r6
 8015cd0:	d1f4      	bne.n	8015cbc <rcl_wait+0x17c>
 8015cd2:	68ee      	ldr	r6, [r5, #12]
 8015cd4:	2200      	movs	r2, #0
 8015cd6:	b91e      	cbnz	r6, 8015ce0 <rcl_wait+0x1a0>
 8015cd8:	e00d      	b.n	8015cf6 <rcl_wait+0x1b6>
 8015cda:	3201      	adds	r2, #1
 8015cdc:	42b2      	cmp	r2, r6
 8015cde:	d00a      	beq.n	8015cf6 <rcl_wait+0x1b6>
 8015ce0:	6959      	ldr	r1, [r3, #20]
 8015ce2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015ce6:	2900      	cmp	r1, #0
 8015ce8:	d1f7      	bne.n	8015cda <rcl_wait+0x19a>
 8015cea:	68ac      	ldr	r4, [r5, #8]
 8015cec:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015cf0:	3201      	adds	r2, #1
 8015cf2:	42b2      	cmp	r2, r6
 8015cf4:	d1f4      	bne.n	8015ce0 <rcl_wait+0x1a0>
 8015cf6:	69ee      	ldr	r6, [r5, #28]
 8015cf8:	2200      	movs	r2, #0
 8015cfa:	b91e      	cbnz	r6, 8015d04 <rcl_wait+0x1c4>
 8015cfc:	e00d      	b.n	8015d1a <rcl_wait+0x1da>
 8015cfe:	3201      	adds	r2, #1
 8015d00:	42b2      	cmp	r2, r6
 8015d02:	d00a      	beq.n	8015d1a <rcl_wait+0x1da>
 8015d04:	6a19      	ldr	r1, [r3, #32]
 8015d06:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015d0a:	2900      	cmp	r1, #0
 8015d0c:	d1f7      	bne.n	8015cfe <rcl_wait+0x1be>
 8015d0e:	69ac      	ldr	r4, [r5, #24]
 8015d10:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015d14:	3201      	adds	r2, #1
 8015d16:	42b2      	cmp	r2, r6
 8015d18:	d1f4      	bne.n	8015d04 <rcl_wait+0x1c4>
 8015d1a:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8015d1c:	2200      	movs	r2, #0
 8015d1e:	b91e      	cbnz	r6, 8015d28 <rcl_wait+0x1e8>
 8015d20:	e00d      	b.n	8015d3e <rcl_wait+0x1fe>
 8015d22:	3201      	adds	r2, #1
 8015d24:	4296      	cmp	r6, r2
 8015d26:	d00a      	beq.n	8015d3e <rcl_wait+0x1fe>
 8015d28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8015d2a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015d2e:	2900      	cmp	r1, #0
 8015d30:	d1f7      	bne.n	8015d22 <rcl_wait+0x1e2>
 8015d32:	6a2c      	ldr	r4, [r5, #32]
 8015d34:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015d38:	3201      	adds	r2, #1
 8015d3a:	4296      	cmp	r6, r2
 8015d3c:	d1f4      	bne.n	8015d28 <rcl_wait+0x1e8>
 8015d3e:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8015d40:	2200      	movs	r2, #0
 8015d42:	b91e      	cbnz	r6, 8015d4c <rcl_wait+0x20c>
 8015d44:	e00d      	b.n	8015d62 <rcl_wait+0x222>
 8015d46:	3201      	adds	r2, #1
 8015d48:	42b2      	cmp	r2, r6
 8015d4a:	d00a      	beq.n	8015d62 <rcl_wait+0x222>
 8015d4c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8015d4e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015d52:	2900      	cmp	r1, #0
 8015d54:	d1f7      	bne.n	8015d46 <rcl_wait+0x206>
 8015d56:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8015d58:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015d5c:	3201      	adds	r2, #1
 8015d5e:	42b2      	cmp	r2, r6
 8015d60:	d1f4      	bne.n	8015d4c <rcl_wait+0x20c>
 8015d62:	f1b8 0f02 	cmp.w	r8, #2
 8015d66:	f47f af08 	bne.w	8015b7a <rcl_wait+0x3a>
 8015d6a:	464b      	mov	r3, r9
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	bf08      	it	eq
 8015d70:	2002      	moveq	r0, #2
 8015d72:	e702      	b.n	8015b7a <rcl_wait+0x3a>
 8015d74:	2a00      	cmp	r2, #0
 8015d76:	d03a      	beq.n	8015dee <rcl_wait+0x2ae>
 8015d78:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015d7c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8015d80:	e70e      	b.n	8015ba0 <rcl_wait+0x60>
 8015d82:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015d86:	b00d      	add	sp, #52	@ 0x34
 8015d88:	ecbd 8b02 	vpop	{d8}
 8015d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d90:	9b04      	ldr	r3, [sp, #16]
 8015d92:	2b01      	cmp	r3, #1
 8015d94:	9b05      	ldr	r3, [sp, #20]
 8015d96:	f173 0300 	sbcs.w	r3, r3, #0
 8015d9a:	db24      	blt.n	8015de6 <rcl_wait+0x2a6>
 8015d9c:	2f00      	cmp	r7, #0
 8015d9e:	bfbc      	itt	lt
 8015da0:	f04f 0800 	movlt.w	r8, #0
 8015da4:	4647      	movlt	r7, r8
 8015da6:	a31e      	add	r3, pc, #120	@ (adr r3, 8015e20 <rcl_wait+0x2e0>)
 8015da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dac:	4640      	mov	r0, r8
 8015dae:	4639      	mov	r1, r7
 8015db0:	f7ea fcaa 	bl	8000708 <__aeabi_ldivmod>
 8015db4:	a31a      	add	r3, pc, #104	@ (adr r3, 8015e20 <rcl_wait+0x2e0>)
 8015db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015dbe:	4640      	mov	r0, r8
 8015dc0:	4639      	mov	r1, r7
 8015dc2:	f7ea fca1 	bl	8000708 <__aeabi_ldivmod>
 8015dc6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8015dca:	ab08      	add	r3, sp, #32
 8015dcc:	e73e      	b.n	8015c4c <rcl_wait+0x10c>
 8015dce:	2001      	movs	r0, #1
 8015dd0:	b00d      	add	sp, #52	@ 0x34
 8015dd2:	ecbd 8b02 	vpop	{d8}
 8015dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dda:	200b      	movs	r0, #11
 8015ddc:	b00d      	add	sp, #52	@ 0x34
 8015dde:	ecbd 8b02 	vpop	{d8}
 8015de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015de6:	465b      	mov	r3, fp
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d1d7      	bne.n	8015d9c <rcl_wait+0x25c>
 8015dec:	e72e      	b.n	8015c4c <rcl_wait+0x10c>
 8015dee:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8015df2:	430b      	orrs	r3, r1
 8015df4:	bf08      	it	eq
 8015df6:	4691      	moveq	r9, r2
 8015df8:	f43f af21 	beq.w	8015c3e <rcl_wait+0xfe>
 8015dfc:	9b04      	ldr	r3, [sp, #16]
 8015dfe:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015e02:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8015e06:	2b01      	cmp	r3, #1
 8015e08:	9b05      	ldr	r3, [sp, #20]
 8015e0a:	f173 0300 	sbcs.w	r3, r3, #0
 8015e0e:	f04f 0300 	mov.w	r3, #0
 8015e12:	4699      	mov	r9, r3
 8015e14:	dac2      	bge.n	8015d9c <rcl_wait+0x25c>
 8015e16:	e719      	b.n	8015c4c <rcl_wait+0x10c>
 8015e18:	ffffffff 	.word	0xffffffff
 8015e1c:	7fffffff 	.word	0x7fffffff
 8015e20:	3b9aca00 	.word	0x3b9aca00
 8015e24:	00000000 	.word	0x00000000

08015e28 <rcl_action_take_goal_response>:
 8015e28:	2800      	cmp	r0, #0
 8015e2a:	d039      	beq.n	8015ea0 <rcl_action_take_goal_response+0x78>
 8015e2c:	b570      	push	{r4, r5, r6, lr}
 8015e2e:	4604      	mov	r4, r0
 8015e30:	6800      	ldr	r0, [r0, #0]
 8015e32:	b380      	cbz	r0, 8015e96 <rcl_action_take_goal_response+0x6e>
 8015e34:	460d      	mov	r5, r1
 8015e36:	4616      	mov	r6, r2
 8015e38:	f7f6 fbc6 	bl	800c5c8 <rcl_client_is_valid>
 8015e3c:	b330      	cbz	r0, 8015e8c <rcl_action_take_goal_response+0x64>
 8015e3e:	6820      	ldr	r0, [r4, #0]
 8015e40:	3004      	adds	r0, #4
 8015e42:	f7f6 fbc1 	bl	800c5c8 <rcl_client_is_valid>
 8015e46:	b308      	cbz	r0, 8015e8c <rcl_action_take_goal_response+0x64>
 8015e48:	6820      	ldr	r0, [r4, #0]
 8015e4a:	3008      	adds	r0, #8
 8015e4c:	f7f6 fbbc 	bl	800c5c8 <rcl_client_is_valid>
 8015e50:	b1e0      	cbz	r0, 8015e8c <rcl_action_take_goal_response+0x64>
 8015e52:	6820      	ldr	r0, [r4, #0]
 8015e54:	300c      	adds	r0, #12
 8015e56:	f7fe fd23 	bl	80148a0 <rcl_subscription_is_valid>
 8015e5a:	b1b8      	cbz	r0, 8015e8c <rcl_action_take_goal_response+0x64>
 8015e5c:	6820      	ldr	r0, [r4, #0]
 8015e5e:	3010      	adds	r0, #16
 8015e60:	f7fe fd1e 	bl	80148a0 <rcl_subscription_is_valid>
 8015e64:	b190      	cbz	r0, 8015e8c <rcl_action_take_goal_response+0x64>
 8015e66:	b1cd      	cbz	r5, 8015e9c <rcl_action_take_goal_response+0x74>
 8015e68:	b1c6      	cbz	r6, 8015e9c <rcl_action_take_goal_response+0x74>
 8015e6a:	6820      	ldr	r0, [r4, #0]
 8015e6c:	4632      	mov	r2, r6
 8015e6e:	4629      	mov	r1, r5
 8015e70:	f7f6 fb62 	bl	800c538 <rcl_take_response>
 8015e74:	b148      	cbz	r0, 8015e8a <rcl_action_take_goal_response+0x62>
 8015e76:	280a      	cmp	r0, #10
 8015e78:	d007      	beq.n	8015e8a <rcl_action_take_goal_response+0x62>
 8015e7a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015e7e:	f640 0337 	movw	r3, #2103	@ 0x837
 8015e82:	4290      	cmp	r0, r2
 8015e84:	bf0c      	ite	eq
 8015e86:	4618      	moveq	r0, r3
 8015e88:	2001      	movne	r0, #1
 8015e8a:	bd70      	pop	{r4, r5, r6, pc}
 8015e8c:	f7f8 f850 	bl	800df30 <rcutils_reset_error>
 8015e90:	f640 0036 	movw	r0, #2102	@ 0x836
 8015e94:	bd70      	pop	{r4, r5, r6, pc}
 8015e96:	f640 0036 	movw	r0, #2102	@ 0x836
 8015e9a:	bd70      	pop	{r4, r5, r6, pc}
 8015e9c:	200b      	movs	r0, #11
 8015e9e:	bd70      	pop	{r4, r5, r6, pc}
 8015ea0:	f640 0036 	movw	r0, #2102	@ 0x836
 8015ea4:	4770      	bx	lr
 8015ea6:	bf00      	nop

08015ea8 <rcl_action_send_result_request>:
 8015ea8:	b390      	cbz	r0, 8015f10 <rcl_action_send_result_request+0x68>
 8015eaa:	b570      	push	{r4, r5, r6, lr}
 8015eac:	4604      	mov	r4, r0
 8015eae:	6800      	ldr	r0, [r0, #0]
 8015eb0:	b348      	cbz	r0, 8015f06 <rcl_action_send_result_request+0x5e>
 8015eb2:	460d      	mov	r5, r1
 8015eb4:	4616      	mov	r6, r2
 8015eb6:	f7f6 fb87 	bl	800c5c8 <rcl_client_is_valid>
 8015eba:	b1f8      	cbz	r0, 8015efc <rcl_action_send_result_request+0x54>
 8015ebc:	6820      	ldr	r0, [r4, #0]
 8015ebe:	3004      	adds	r0, #4
 8015ec0:	f7f6 fb82 	bl	800c5c8 <rcl_client_is_valid>
 8015ec4:	b1d0      	cbz	r0, 8015efc <rcl_action_send_result_request+0x54>
 8015ec6:	6820      	ldr	r0, [r4, #0]
 8015ec8:	3008      	adds	r0, #8
 8015eca:	f7f6 fb7d 	bl	800c5c8 <rcl_client_is_valid>
 8015ece:	b1a8      	cbz	r0, 8015efc <rcl_action_send_result_request+0x54>
 8015ed0:	6820      	ldr	r0, [r4, #0]
 8015ed2:	300c      	adds	r0, #12
 8015ed4:	f7fe fce4 	bl	80148a0 <rcl_subscription_is_valid>
 8015ed8:	b180      	cbz	r0, 8015efc <rcl_action_send_result_request+0x54>
 8015eda:	6820      	ldr	r0, [r4, #0]
 8015edc:	3010      	adds	r0, #16
 8015ede:	f7fe fcdf 	bl	80148a0 <rcl_subscription_is_valid>
 8015ee2:	b158      	cbz	r0, 8015efc <rcl_action_send_result_request+0x54>
 8015ee4:	b195      	cbz	r5, 8015f0c <rcl_action_send_result_request+0x64>
 8015ee6:	b18e      	cbz	r6, 8015f0c <rcl_action_send_result_request+0x64>
 8015ee8:	6820      	ldr	r0, [r4, #0]
 8015eea:	4632      	mov	r2, r6
 8015eec:	4629      	mov	r1, r5
 8015eee:	3008      	adds	r0, #8
 8015ef0:	f7f6 faec 	bl	800c4cc <rcl_send_request>
 8015ef4:	3800      	subs	r0, #0
 8015ef6:	bf18      	it	ne
 8015ef8:	2001      	movne	r0, #1
 8015efa:	bd70      	pop	{r4, r5, r6, pc}
 8015efc:	f7f8 f818 	bl	800df30 <rcutils_reset_error>
 8015f00:	f640 0036 	movw	r0, #2102	@ 0x836
 8015f04:	bd70      	pop	{r4, r5, r6, pc}
 8015f06:	f640 0036 	movw	r0, #2102	@ 0x836
 8015f0a:	bd70      	pop	{r4, r5, r6, pc}
 8015f0c:	200b      	movs	r0, #11
 8015f0e:	bd70      	pop	{r4, r5, r6, pc}
 8015f10:	f640 0036 	movw	r0, #2102	@ 0x836
 8015f14:	4770      	bx	lr
 8015f16:	bf00      	nop

08015f18 <rcl_action_take_result_response>:
 8015f18:	2800      	cmp	r0, #0
 8015f1a:	d03a      	beq.n	8015f92 <rcl_action_take_result_response+0x7a>
 8015f1c:	b570      	push	{r4, r5, r6, lr}
 8015f1e:	4604      	mov	r4, r0
 8015f20:	6800      	ldr	r0, [r0, #0]
 8015f22:	b388      	cbz	r0, 8015f88 <rcl_action_take_result_response+0x70>
 8015f24:	460d      	mov	r5, r1
 8015f26:	4616      	mov	r6, r2
 8015f28:	f7f6 fb4e 	bl	800c5c8 <rcl_client_is_valid>
 8015f2c:	b338      	cbz	r0, 8015f7e <rcl_action_take_result_response+0x66>
 8015f2e:	6820      	ldr	r0, [r4, #0]
 8015f30:	3004      	adds	r0, #4
 8015f32:	f7f6 fb49 	bl	800c5c8 <rcl_client_is_valid>
 8015f36:	b310      	cbz	r0, 8015f7e <rcl_action_take_result_response+0x66>
 8015f38:	6820      	ldr	r0, [r4, #0]
 8015f3a:	3008      	adds	r0, #8
 8015f3c:	f7f6 fb44 	bl	800c5c8 <rcl_client_is_valid>
 8015f40:	b1e8      	cbz	r0, 8015f7e <rcl_action_take_result_response+0x66>
 8015f42:	6820      	ldr	r0, [r4, #0]
 8015f44:	300c      	adds	r0, #12
 8015f46:	f7fe fcab 	bl	80148a0 <rcl_subscription_is_valid>
 8015f4a:	b1c0      	cbz	r0, 8015f7e <rcl_action_take_result_response+0x66>
 8015f4c:	6820      	ldr	r0, [r4, #0]
 8015f4e:	3010      	adds	r0, #16
 8015f50:	f7fe fca6 	bl	80148a0 <rcl_subscription_is_valid>
 8015f54:	b198      	cbz	r0, 8015f7e <rcl_action_take_result_response+0x66>
 8015f56:	b1d5      	cbz	r5, 8015f8e <rcl_action_take_result_response+0x76>
 8015f58:	b1ce      	cbz	r6, 8015f8e <rcl_action_take_result_response+0x76>
 8015f5a:	6820      	ldr	r0, [r4, #0]
 8015f5c:	4632      	mov	r2, r6
 8015f5e:	4629      	mov	r1, r5
 8015f60:	3008      	adds	r0, #8
 8015f62:	f7f6 fae9 	bl	800c538 <rcl_take_response>
 8015f66:	b148      	cbz	r0, 8015f7c <rcl_action_take_result_response+0x64>
 8015f68:	280a      	cmp	r0, #10
 8015f6a:	d007      	beq.n	8015f7c <rcl_action_take_result_response+0x64>
 8015f6c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015f70:	f640 0337 	movw	r3, #2103	@ 0x837
 8015f74:	4290      	cmp	r0, r2
 8015f76:	bf0c      	ite	eq
 8015f78:	4618      	moveq	r0, r3
 8015f7a:	2001      	movne	r0, #1
 8015f7c:	bd70      	pop	{r4, r5, r6, pc}
 8015f7e:	f7f7 ffd7 	bl	800df30 <rcutils_reset_error>
 8015f82:	f640 0036 	movw	r0, #2102	@ 0x836
 8015f86:	bd70      	pop	{r4, r5, r6, pc}
 8015f88:	f640 0036 	movw	r0, #2102	@ 0x836
 8015f8c:	bd70      	pop	{r4, r5, r6, pc}
 8015f8e:	200b      	movs	r0, #11
 8015f90:	bd70      	pop	{r4, r5, r6, pc}
 8015f92:	f640 0036 	movw	r0, #2102	@ 0x836
 8015f96:	4770      	bx	lr

08015f98 <rcl_action_take_cancel_response>:
 8015f98:	2800      	cmp	r0, #0
 8015f9a:	d03a      	beq.n	8016012 <rcl_action_take_cancel_response+0x7a>
 8015f9c:	b570      	push	{r4, r5, r6, lr}
 8015f9e:	4604      	mov	r4, r0
 8015fa0:	6800      	ldr	r0, [r0, #0]
 8015fa2:	b388      	cbz	r0, 8016008 <rcl_action_take_cancel_response+0x70>
 8015fa4:	460d      	mov	r5, r1
 8015fa6:	4616      	mov	r6, r2
 8015fa8:	f7f6 fb0e 	bl	800c5c8 <rcl_client_is_valid>
 8015fac:	b338      	cbz	r0, 8015ffe <rcl_action_take_cancel_response+0x66>
 8015fae:	6820      	ldr	r0, [r4, #0]
 8015fb0:	3004      	adds	r0, #4
 8015fb2:	f7f6 fb09 	bl	800c5c8 <rcl_client_is_valid>
 8015fb6:	b310      	cbz	r0, 8015ffe <rcl_action_take_cancel_response+0x66>
 8015fb8:	6820      	ldr	r0, [r4, #0]
 8015fba:	3008      	adds	r0, #8
 8015fbc:	f7f6 fb04 	bl	800c5c8 <rcl_client_is_valid>
 8015fc0:	b1e8      	cbz	r0, 8015ffe <rcl_action_take_cancel_response+0x66>
 8015fc2:	6820      	ldr	r0, [r4, #0]
 8015fc4:	300c      	adds	r0, #12
 8015fc6:	f7fe fc6b 	bl	80148a0 <rcl_subscription_is_valid>
 8015fca:	b1c0      	cbz	r0, 8015ffe <rcl_action_take_cancel_response+0x66>
 8015fcc:	6820      	ldr	r0, [r4, #0]
 8015fce:	3010      	adds	r0, #16
 8015fd0:	f7fe fc66 	bl	80148a0 <rcl_subscription_is_valid>
 8015fd4:	b198      	cbz	r0, 8015ffe <rcl_action_take_cancel_response+0x66>
 8015fd6:	b1d5      	cbz	r5, 801600e <rcl_action_take_cancel_response+0x76>
 8015fd8:	b1ce      	cbz	r6, 801600e <rcl_action_take_cancel_response+0x76>
 8015fda:	6820      	ldr	r0, [r4, #0]
 8015fdc:	4632      	mov	r2, r6
 8015fde:	4629      	mov	r1, r5
 8015fe0:	3004      	adds	r0, #4
 8015fe2:	f7f6 faa9 	bl	800c538 <rcl_take_response>
 8015fe6:	b148      	cbz	r0, 8015ffc <rcl_action_take_cancel_response+0x64>
 8015fe8:	280a      	cmp	r0, #10
 8015fea:	d007      	beq.n	8015ffc <rcl_action_take_cancel_response+0x64>
 8015fec:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015ff0:	f640 0337 	movw	r3, #2103	@ 0x837
 8015ff4:	4290      	cmp	r0, r2
 8015ff6:	bf0c      	ite	eq
 8015ff8:	4618      	moveq	r0, r3
 8015ffa:	2001      	movne	r0, #1
 8015ffc:	bd70      	pop	{r4, r5, r6, pc}
 8015ffe:	f7f7 ff97 	bl	800df30 <rcutils_reset_error>
 8016002:	f640 0036 	movw	r0, #2102	@ 0x836
 8016006:	bd70      	pop	{r4, r5, r6, pc}
 8016008:	f640 0036 	movw	r0, #2102	@ 0x836
 801600c:	bd70      	pop	{r4, r5, r6, pc}
 801600e:	200b      	movs	r0, #11
 8016010:	bd70      	pop	{r4, r5, r6, pc}
 8016012:	f640 0036 	movw	r0, #2102	@ 0x836
 8016016:	4770      	bx	lr

08016018 <rcl_action_take_feedback>:
 8016018:	2800      	cmp	r0, #0
 801601a:	d038      	beq.n	801608e <rcl_action_take_feedback+0x76>
 801601c:	b530      	push	{r4, r5, lr}
 801601e:	4604      	mov	r4, r0
 8016020:	6800      	ldr	r0, [r0, #0]
 8016022:	b091      	sub	sp, #68	@ 0x44
 8016024:	b378      	cbz	r0, 8016086 <rcl_action_take_feedback+0x6e>
 8016026:	460d      	mov	r5, r1
 8016028:	f7f6 face 	bl	800c5c8 <rcl_client_is_valid>
 801602c:	b328      	cbz	r0, 801607a <rcl_action_take_feedback+0x62>
 801602e:	6820      	ldr	r0, [r4, #0]
 8016030:	3004      	adds	r0, #4
 8016032:	f7f6 fac9 	bl	800c5c8 <rcl_client_is_valid>
 8016036:	b300      	cbz	r0, 801607a <rcl_action_take_feedback+0x62>
 8016038:	6820      	ldr	r0, [r4, #0]
 801603a:	3008      	adds	r0, #8
 801603c:	f7f6 fac4 	bl	800c5c8 <rcl_client_is_valid>
 8016040:	b1d8      	cbz	r0, 801607a <rcl_action_take_feedback+0x62>
 8016042:	6820      	ldr	r0, [r4, #0]
 8016044:	300c      	adds	r0, #12
 8016046:	f7fe fc2b 	bl	80148a0 <rcl_subscription_is_valid>
 801604a:	b1b0      	cbz	r0, 801607a <rcl_action_take_feedback+0x62>
 801604c:	6820      	ldr	r0, [r4, #0]
 801604e:	3010      	adds	r0, #16
 8016050:	f7fe fc26 	bl	80148a0 <rcl_subscription_is_valid>
 8016054:	b188      	cbz	r0, 801607a <rcl_action_take_feedback+0x62>
 8016056:	b1ed      	cbz	r5, 8016094 <rcl_action_take_feedback+0x7c>
 8016058:	6820      	ldr	r0, [r4, #0]
 801605a:	2300      	movs	r3, #0
 801605c:	466a      	mov	r2, sp
 801605e:	4629      	mov	r1, r5
 8016060:	300c      	adds	r0, #12
 8016062:	f7fe fbbf 	bl	80147e4 <rcl_take>
 8016066:	b160      	cbz	r0, 8016082 <rcl_action_take_feedback+0x6a>
 8016068:	f240 1391 	movw	r3, #401	@ 0x191
 801606c:	4298      	cmp	r0, r3
 801606e:	d014      	beq.n	801609a <rcl_action_take_feedback+0x82>
 8016070:	280a      	cmp	r0, #10
 8016072:	bf18      	it	ne
 8016074:	2001      	movne	r0, #1
 8016076:	b011      	add	sp, #68	@ 0x44
 8016078:	bd30      	pop	{r4, r5, pc}
 801607a:	f7f7 ff59 	bl	800df30 <rcutils_reset_error>
 801607e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016082:	b011      	add	sp, #68	@ 0x44
 8016084:	bd30      	pop	{r4, r5, pc}
 8016086:	f640 0036 	movw	r0, #2102	@ 0x836
 801608a:	b011      	add	sp, #68	@ 0x44
 801608c:	bd30      	pop	{r4, r5, pc}
 801608e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016092:	4770      	bx	lr
 8016094:	200b      	movs	r0, #11
 8016096:	b011      	add	sp, #68	@ 0x44
 8016098:	bd30      	pop	{r4, r5, pc}
 801609a:	f640 0037 	movw	r0, #2103	@ 0x837
 801609e:	e7f0      	b.n	8016082 <rcl_action_take_feedback+0x6a>

080160a0 <rcl_action_wait_set_add_action_client>:
 80160a0:	2800      	cmp	r0, #0
 80160a2:	d048      	beq.n	8016136 <rcl_action_wait_set_add_action_client+0x96>
 80160a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160a6:	460c      	mov	r4, r1
 80160a8:	2900      	cmp	r1, #0
 80160aa:	d03c      	beq.n	8016126 <rcl_action_wait_set_add_action_client+0x86>
 80160ac:	4605      	mov	r5, r0
 80160ae:	6808      	ldr	r0, [r1, #0]
 80160b0:	2800      	cmp	r0, #0
 80160b2:	d038      	beq.n	8016126 <rcl_action_wait_set_add_action_client+0x86>
 80160b4:	4617      	mov	r7, r2
 80160b6:	461e      	mov	r6, r3
 80160b8:	f7f6 fa86 	bl	800c5c8 <rcl_client_is_valid>
 80160bc:	b3b0      	cbz	r0, 801612c <rcl_action_wait_set_add_action_client+0x8c>
 80160be:	6820      	ldr	r0, [r4, #0]
 80160c0:	3004      	adds	r0, #4
 80160c2:	f7f6 fa81 	bl	800c5c8 <rcl_client_is_valid>
 80160c6:	b388      	cbz	r0, 801612c <rcl_action_wait_set_add_action_client+0x8c>
 80160c8:	6820      	ldr	r0, [r4, #0]
 80160ca:	3008      	adds	r0, #8
 80160cc:	f7f6 fa7c 	bl	800c5c8 <rcl_client_is_valid>
 80160d0:	b360      	cbz	r0, 801612c <rcl_action_wait_set_add_action_client+0x8c>
 80160d2:	6820      	ldr	r0, [r4, #0]
 80160d4:	300c      	adds	r0, #12
 80160d6:	f7fe fbe3 	bl	80148a0 <rcl_subscription_is_valid>
 80160da:	b338      	cbz	r0, 801612c <rcl_action_wait_set_add_action_client+0x8c>
 80160dc:	6820      	ldr	r0, [r4, #0]
 80160de:	3010      	adds	r0, #16
 80160e0:	f7fe fbde 	bl	80148a0 <rcl_subscription_is_valid>
 80160e4:	b310      	cbz	r0, 801612c <rcl_action_wait_set_add_action_client+0x8c>
 80160e6:	6821      	ldr	r1, [r4, #0]
 80160e8:	4628      	mov	r0, r5
 80160ea:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80160ee:	f7ff fccf 	bl	8015a90 <rcl_wait_set_add_client>
 80160f2:	b9b8      	cbnz	r0, 8016124 <rcl_action_wait_set_add_action_client+0x84>
 80160f4:	6821      	ldr	r1, [r4, #0]
 80160f6:	4628      	mov	r0, r5
 80160f8:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80160fc:	3104      	adds	r1, #4
 80160fe:	f7ff fcc7 	bl	8015a90 <rcl_wait_set_add_client>
 8016102:	b978      	cbnz	r0, 8016124 <rcl_action_wait_set_add_action_client+0x84>
 8016104:	6821      	ldr	r1, [r4, #0]
 8016106:	4628      	mov	r0, r5
 8016108:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801610c:	3108      	adds	r1, #8
 801610e:	f7ff fcbf 	bl	8015a90 <rcl_wait_set_add_client>
 8016112:	b938      	cbnz	r0, 8016124 <rcl_action_wait_set_add_action_client+0x84>
 8016114:	6821      	ldr	r1, [r4, #0]
 8016116:	4628      	mov	r0, r5
 8016118:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801611c:	310c      	adds	r1, #12
 801611e:	f7ff f96f 	bl	8015400 <rcl_wait_set_add_subscription>
 8016122:	b158      	cbz	r0, 801613c <rcl_action_wait_set_add_action_client+0x9c>
 8016124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016126:	f640 0036 	movw	r0, #2102	@ 0x836
 801612a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801612c:	f7f7 ff00 	bl	800df30 <rcutils_reset_error>
 8016130:	f640 0036 	movw	r0, #2102	@ 0x836
 8016134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016136:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801613a:	4770      	bx	lr
 801613c:	6821      	ldr	r1, [r4, #0]
 801613e:	4628      	mov	r0, r5
 8016140:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8016144:	3110      	adds	r1, #16
 8016146:	f7ff f95b 	bl	8015400 <rcl_wait_set_add_subscription>
 801614a:	2800      	cmp	r0, #0
 801614c:	d1ea      	bne.n	8016124 <rcl_action_wait_set_add_action_client+0x84>
 801614e:	b11f      	cbz	r7, 8016158 <rcl_action_wait_set_add_action_client+0xb8>
 8016150:	6823      	ldr	r3, [r4, #0]
 8016152:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8016156:	603b      	str	r3, [r7, #0]
 8016158:	2e00      	cmp	r6, #0
 801615a:	d0e3      	beq.n	8016124 <rcl_action_wait_set_add_action_client+0x84>
 801615c:	6823      	ldr	r3, [r4, #0]
 801615e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8016162:	6033      	str	r3, [r6, #0]
 8016164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016166:	bf00      	nop

08016168 <rcl_action_client_wait_set_get_entities_ready>:
 8016168:	2800      	cmp	r0, #0
 801616a:	f000 808d 	beq.w	8016288 <rcl_action_client_wait_set_get_entities_ready+0x120>
 801616e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016172:	460c      	mov	r4, r1
 8016174:	2900      	cmp	r1, #0
 8016176:	d077      	beq.n	8016268 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016178:	4605      	mov	r5, r0
 801617a:	6808      	ldr	r0, [r1, #0]
 801617c:	2800      	cmp	r0, #0
 801617e:	d073      	beq.n	8016268 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016180:	4616      	mov	r6, r2
 8016182:	461f      	mov	r7, r3
 8016184:	f7f6 fa20 	bl	800c5c8 <rcl_client_is_valid>
 8016188:	2800      	cmp	r0, #0
 801618a:	d071      	beq.n	8016270 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801618c:	6820      	ldr	r0, [r4, #0]
 801618e:	3004      	adds	r0, #4
 8016190:	f7f6 fa1a 	bl	800c5c8 <rcl_client_is_valid>
 8016194:	2800      	cmp	r0, #0
 8016196:	d06b      	beq.n	8016270 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016198:	6820      	ldr	r0, [r4, #0]
 801619a:	3008      	adds	r0, #8
 801619c:	f7f6 fa14 	bl	800c5c8 <rcl_client_is_valid>
 80161a0:	2800      	cmp	r0, #0
 80161a2:	d065      	beq.n	8016270 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80161a4:	6820      	ldr	r0, [r4, #0]
 80161a6:	300c      	adds	r0, #12
 80161a8:	f7fe fb7a 	bl	80148a0 <rcl_subscription_is_valid>
 80161ac:	2800      	cmp	r0, #0
 80161ae:	d05f      	beq.n	8016270 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80161b0:	6820      	ldr	r0, [r4, #0]
 80161b2:	3010      	adds	r0, #16
 80161b4:	f7fe fb74 	bl	80148a0 <rcl_subscription_is_valid>
 80161b8:	2800      	cmp	r0, #0
 80161ba:	d059      	beq.n	8016270 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80161bc:	2e00      	cmp	r6, #0
 80161be:	d060      	beq.n	8016282 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80161c0:	2f00      	cmp	r7, #0
 80161c2:	d05e      	beq.n	8016282 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80161c4:	9b06      	ldr	r3, [sp, #24]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d05b      	beq.n	8016282 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80161ca:	9b07      	ldr	r3, [sp, #28]
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d058      	beq.n	8016282 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80161d0:	9b08      	ldr	r3, [sp, #32]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d055      	beq.n	8016282 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80161d6:	6823      	ldr	r3, [r4, #0]
 80161d8:	686a      	ldr	r2, [r5, #4]
 80161da:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80161de:	428a      	cmp	r2, r1
 80161e0:	d94c      	bls.n	801627c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80161e2:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80161e6:	4282      	cmp	r2, r0
 80161e8:	d948      	bls.n	801627c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80161ea:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80161ee:	69ea      	ldr	r2, [r5, #28]
 80161f0:	42a2      	cmp	r2, r4
 80161f2:	d943      	bls.n	801627c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80161f4:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80161f8:	4562      	cmp	r2, ip
 80161fa:	d93f      	bls.n	801627c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80161fc:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8016200:	4572      	cmp	r2, lr
 8016202:	d93b      	bls.n	801627c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016204:	69aa      	ldr	r2, [r5, #24]
 8016206:	682d      	ldr	r5, [r5, #0]
 8016208:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801620c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8016210:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8016214:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8016218:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 801621c:	f103 0c0c 	add.w	ip, r3, #12
 8016220:	eba5 050c 	sub.w	r5, r5, ip
 8016224:	fab5 f585 	clz	r5, r5
 8016228:	096d      	lsrs	r5, r5, #5
 801622a:	7035      	strb	r5, [r6, #0]
 801622c:	f103 0510 	add.w	r5, r3, #16
 8016230:	1b64      	subs	r4, r4, r5
 8016232:	fab4 f484 	clz	r4, r4
 8016236:	0964      	lsrs	r4, r4, #5
 8016238:	703c      	strb	r4, [r7, #0]
 801623a:	eba3 0008 	sub.w	r0, r3, r8
 801623e:	1d1c      	adds	r4, r3, #4
 8016240:	3308      	adds	r3, #8
 8016242:	1ad3      	subs	r3, r2, r3
 8016244:	fab0 f080 	clz	r0, r0
 8016248:	9a06      	ldr	r2, [sp, #24]
 801624a:	0940      	lsrs	r0, r0, #5
 801624c:	1b09      	subs	r1, r1, r4
 801624e:	7010      	strb	r0, [r2, #0]
 8016250:	fab1 f181 	clz	r1, r1
 8016254:	9a07      	ldr	r2, [sp, #28]
 8016256:	0949      	lsrs	r1, r1, #5
 8016258:	7011      	strb	r1, [r2, #0]
 801625a:	fab3 f383 	clz	r3, r3
 801625e:	9a08      	ldr	r2, [sp, #32]
 8016260:	095b      	lsrs	r3, r3, #5
 8016262:	2000      	movs	r0, #0
 8016264:	7013      	strb	r3, [r2, #0]
 8016266:	e001      	b.n	801626c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8016268:	f640 0036 	movw	r0, #2102	@ 0x836
 801626c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016270:	f7f7 fe5e 	bl	800df30 <rcutils_reset_error>
 8016274:	f640 0036 	movw	r0, #2102	@ 0x836
 8016278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801627c:	2001      	movs	r0, #1
 801627e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016282:	200b      	movs	r0, #11
 8016284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016288:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801628c:	4770      	bx	lr
 801628e:	bf00      	nop

08016290 <rcl_action_take_goal_request>:
 8016290:	2800      	cmp	r0, #0
 8016292:	d039      	beq.n	8016308 <rcl_action_take_goal_request+0x78>
 8016294:	b570      	push	{r4, r5, r6, lr}
 8016296:	4604      	mov	r4, r0
 8016298:	6800      	ldr	r0, [r0, #0]
 801629a:	b380      	cbz	r0, 80162fe <rcl_action_take_goal_request+0x6e>
 801629c:	460d      	mov	r5, r1
 801629e:	4616      	mov	r6, r2
 80162a0:	f7fe fa96 	bl	80147d0 <rcl_service_is_valid>
 80162a4:	b330      	cbz	r0, 80162f4 <rcl_action_take_goal_request+0x64>
 80162a6:	6820      	ldr	r0, [r4, #0]
 80162a8:	3004      	adds	r0, #4
 80162aa:	f7fe fa91 	bl	80147d0 <rcl_service_is_valid>
 80162ae:	b308      	cbz	r0, 80162f4 <rcl_action_take_goal_request+0x64>
 80162b0:	6820      	ldr	r0, [r4, #0]
 80162b2:	3008      	adds	r0, #8
 80162b4:	f7fe fa8c 	bl	80147d0 <rcl_service_is_valid>
 80162b8:	b1e0      	cbz	r0, 80162f4 <rcl_action_take_goal_request+0x64>
 80162ba:	6820      	ldr	r0, [r4, #0]
 80162bc:	300c      	adds	r0, #12
 80162be:	f7f6 fdcd 	bl	800ce5c <rcl_publisher_is_valid>
 80162c2:	b1b8      	cbz	r0, 80162f4 <rcl_action_take_goal_request+0x64>
 80162c4:	6820      	ldr	r0, [r4, #0]
 80162c6:	3010      	adds	r0, #16
 80162c8:	f7f6 fdc8 	bl	800ce5c <rcl_publisher_is_valid>
 80162cc:	b190      	cbz	r0, 80162f4 <rcl_action_take_goal_request+0x64>
 80162ce:	b1cd      	cbz	r5, 8016304 <rcl_action_take_goal_request+0x74>
 80162d0:	b1c6      	cbz	r6, 8016304 <rcl_action_take_goal_request+0x74>
 80162d2:	6820      	ldr	r0, [r4, #0]
 80162d4:	4632      	mov	r2, r6
 80162d6:	4629      	mov	r1, r5
 80162d8:	f7fe fa22 	bl	8014720 <rcl_take_request>
 80162dc:	b148      	cbz	r0, 80162f2 <rcl_action_take_goal_request+0x62>
 80162de:	280a      	cmp	r0, #10
 80162e0:	d007      	beq.n	80162f2 <rcl_action_take_goal_request+0x62>
 80162e2:	f240 2259 	movw	r2, #601	@ 0x259
 80162e6:	f640 0399 	movw	r3, #2201	@ 0x899
 80162ea:	4290      	cmp	r0, r2
 80162ec:	bf0c      	ite	eq
 80162ee:	4618      	moveq	r0, r3
 80162f0:	2001      	movne	r0, #1
 80162f2:	bd70      	pop	{r4, r5, r6, pc}
 80162f4:	f7f7 fe1c 	bl	800df30 <rcutils_reset_error>
 80162f8:	f640 0098 	movw	r0, #2200	@ 0x898
 80162fc:	bd70      	pop	{r4, r5, r6, pc}
 80162fe:	f640 0098 	movw	r0, #2200	@ 0x898
 8016302:	bd70      	pop	{r4, r5, r6, pc}
 8016304:	200b      	movs	r0, #11
 8016306:	bd70      	pop	{r4, r5, r6, pc}
 8016308:	f640 0098 	movw	r0, #2200	@ 0x898
 801630c:	4770      	bx	lr
 801630e:	bf00      	nop

08016310 <rcl_action_send_goal_response>:
 8016310:	b390      	cbz	r0, 8016378 <rcl_action_send_goal_response+0x68>
 8016312:	b570      	push	{r4, r5, r6, lr}
 8016314:	4604      	mov	r4, r0
 8016316:	6800      	ldr	r0, [r0, #0]
 8016318:	b348      	cbz	r0, 801636e <rcl_action_send_goal_response+0x5e>
 801631a:	460d      	mov	r5, r1
 801631c:	4616      	mov	r6, r2
 801631e:	f7fe fa57 	bl	80147d0 <rcl_service_is_valid>
 8016322:	b1f8      	cbz	r0, 8016364 <rcl_action_send_goal_response+0x54>
 8016324:	6820      	ldr	r0, [r4, #0]
 8016326:	3004      	adds	r0, #4
 8016328:	f7fe fa52 	bl	80147d0 <rcl_service_is_valid>
 801632c:	b1d0      	cbz	r0, 8016364 <rcl_action_send_goal_response+0x54>
 801632e:	6820      	ldr	r0, [r4, #0]
 8016330:	3008      	adds	r0, #8
 8016332:	f7fe fa4d 	bl	80147d0 <rcl_service_is_valid>
 8016336:	b1a8      	cbz	r0, 8016364 <rcl_action_send_goal_response+0x54>
 8016338:	6820      	ldr	r0, [r4, #0]
 801633a:	300c      	adds	r0, #12
 801633c:	f7f6 fd8e 	bl	800ce5c <rcl_publisher_is_valid>
 8016340:	b180      	cbz	r0, 8016364 <rcl_action_send_goal_response+0x54>
 8016342:	6820      	ldr	r0, [r4, #0]
 8016344:	3010      	adds	r0, #16
 8016346:	f7f6 fd89 	bl	800ce5c <rcl_publisher_is_valid>
 801634a:	b158      	cbz	r0, 8016364 <rcl_action_send_goal_response+0x54>
 801634c:	b195      	cbz	r5, 8016374 <rcl_action_send_goal_response+0x64>
 801634e:	b18e      	cbz	r6, 8016374 <rcl_action_send_goal_response+0x64>
 8016350:	6820      	ldr	r0, [r4, #0]
 8016352:	4632      	mov	r2, r6
 8016354:	4629      	mov	r1, r5
 8016356:	f7fe fa23 	bl	80147a0 <rcl_send_response>
 801635a:	b110      	cbz	r0, 8016362 <rcl_action_send_goal_response+0x52>
 801635c:	2802      	cmp	r0, #2
 801635e:	bf18      	it	ne
 8016360:	2001      	movne	r0, #1
 8016362:	bd70      	pop	{r4, r5, r6, pc}
 8016364:	f7f7 fde4 	bl	800df30 <rcutils_reset_error>
 8016368:	f640 0098 	movw	r0, #2200	@ 0x898
 801636c:	bd70      	pop	{r4, r5, r6, pc}
 801636e:	f640 0098 	movw	r0, #2200	@ 0x898
 8016372:	bd70      	pop	{r4, r5, r6, pc}
 8016374:	200b      	movs	r0, #11
 8016376:	bd70      	pop	{r4, r5, r6, pc}
 8016378:	f640 0098 	movw	r0, #2200	@ 0x898
 801637c:	4770      	bx	lr
 801637e:	bf00      	nop

08016380 <rcl_action_take_result_request>:
 8016380:	2800      	cmp	r0, #0
 8016382:	d03a      	beq.n	80163fa <rcl_action_take_result_request+0x7a>
 8016384:	b570      	push	{r4, r5, r6, lr}
 8016386:	4604      	mov	r4, r0
 8016388:	6800      	ldr	r0, [r0, #0]
 801638a:	b388      	cbz	r0, 80163f0 <rcl_action_take_result_request+0x70>
 801638c:	460d      	mov	r5, r1
 801638e:	4616      	mov	r6, r2
 8016390:	f7fe fa1e 	bl	80147d0 <rcl_service_is_valid>
 8016394:	b338      	cbz	r0, 80163e6 <rcl_action_take_result_request+0x66>
 8016396:	6820      	ldr	r0, [r4, #0]
 8016398:	3004      	adds	r0, #4
 801639a:	f7fe fa19 	bl	80147d0 <rcl_service_is_valid>
 801639e:	b310      	cbz	r0, 80163e6 <rcl_action_take_result_request+0x66>
 80163a0:	6820      	ldr	r0, [r4, #0]
 80163a2:	3008      	adds	r0, #8
 80163a4:	f7fe fa14 	bl	80147d0 <rcl_service_is_valid>
 80163a8:	b1e8      	cbz	r0, 80163e6 <rcl_action_take_result_request+0x66>
 80163aa:	6820      	ldr	r0, [r4, #0]
 80163ac:	300c      	adds	r0, #12
 80163ae:	f7f6 fd55 	bl	800ce5c <rcl_publisher_is_valid>
 80163b2:	b1c0      	cbz	r0, 80163e6 <rcl_action_take_result_request+0x66>
 80163b4:	6820      	ldr	r0, [r4, #0]
 80163b6:	3010      	adds	r0, #16
 80163b8:	f7f6 fd50 	bl	800ce5c <rcl_publisher_is_valid>
 80163bc:	b198      	cbz	r0, 80163e6 <rcl_action_take_result_request+0x66>
 80163be:	b1d5      	cbz	r5, 80163f6 <rcl_action_take_result_request+0x76>
 80163c0:	b1ce      	cbz	r6, 80163f6 <rcl_action_take_result_request+0x76>
 80163c2:	6820      	ldr	r0, [r4, #0]
 80163c4:	4632      	mov	r2, r6
 80163c6:	4629      	mov	r1, r5
 80163c8:	3008      	adds	r0, #8
 80163ca:	f7fe f9a9 	bl	8014720 <rcl_take_request>
 80163ce:	b148      	cbz	r0, 80163e4 <rcl_action_take_result_request+0x64>
 80163d0:	280a      	cmp	r0, #10
 80163d2:	d007      	beq.n	80163e4 <rcl_action_take_result_request+0x64>
 80163d4:	f240 2259 	movw	r2, #601	@ 0x259
 80163d8:	f640 0399 	movw	r3, #2201	@ 0x899
 80163dc:	4290      	cmp	r0, r2
 80163de:	bf0c      	ite	eq
 80163e0:	4618      	moveq	r0, r3
 80163e2:	2001      	movne	r0, #1
 80163e4:	bd70      	pop	{r4, r5, r6, pc}
 80163e6:	f7f7 fda3 	bl	800df30 <rcutils_reset_error>
 80163ea:	f640 0098 	movw	r0, #2200	@ 0x898
 80163ee:	bd70      	pop	{r4, r5, r6, pc}
 80163f0:	f640 0098 	movw	r0, #2200	@ 0x898
 80163f4:	bd70      	pop	{r4, r5, r6, pc}
 80163f6:	200b      	movs	r0, #11
 80163f8:	bd70      	pop	{r4, r5, r6, pc}
 80163fa:	f640 0098 	movw	r0, #2200	@ 0x898
 80163fe:	4770      	bx	lr

08016400 <rcl_action_take_cancel_request>:
 8016400:	2800      	cmp	r0, #0
 8016402:	d03a      	beq.n	801647a <rcl_action_take_cancel_request+0x7a>
 8016404:	b570      	push	{r4, r5, r6, lr}
 8016406:	4604      	mov	r4, r0
 8016408:	6800      	ldr	r0, [r0, #0]
 801640a:	b388      	cbz	r0, 8016470 <rcl_action_take_cancel_request+0x70>
 801640c:	460d      	mov	r5, r1
 801640e:	4616      	mov	r6, r2
 8016410:	f7fe f9de 	bl	80147d0 <rcl_service_is_valid>
 8016414:	b338      	cbz	r0, 8016466 <rcl_action_take_cancel_request+0x66>
 8016416:	6820      	ldr	r0, [r4, #0]
 8016418:	3004      	adds	r0, #4
 801641a:	f7fe f9d9 	bl	80147d0 <rcl_service_is_valid>
 801641e:	b310      	cbz	r0, 8016466 <rcl_action_take_cancel_request+0x66>
 8016420:	6820      	ldr	r0, [r4, #0]
 8016422:	3008      	adds	r0, #8
 8016424:	f7fe f9d4 	bl	80147d0 <rcl_service_is_valid>
 8016428:	b1e8      	cbz	r0, 8016466 <rcl_action_take_cancel_request+0x66>
 801642a:	6820      	ldr	r0, [r4, #0]
 801642c:	300c      	adds	r0, #12
 801642e:	f7f6 fd15 	bl	800ce5c <rcl_publisher_is_valid>
 8016432:	b1c0      	cbz	r0, 8016466 <rcl_action_take_cancel_request+0x66>
 8016434:	6820      	ldr	r0, [r4, #0]
 8016436:	3010      	adds	r0, #16
 8016438:	f7f6 fd10 	bl	800ce5c <rcl_publisher_is_valid>
 801643c:	b198      	cbz	r0, 8016466 <rcl_action_take_cancel_request+0x66>
 801643e:	b1d5      	cbz	r5, 8016476 <rcl_action_take_cancel_request+0x76>
 8016440:	b1ce      	cbz	r6, 8016476 <rcl_action_take_cancel_request+0x76>
 8016442:	6820      	ldr	r0, [r4, #0]
 8016444:	4632      	mov	r2, r6
 8016446:	4629      	mov	r1, r5
 8016448:	3004      	adds	r0, #4
 801644a:	f7fe f969 	bl	8014720 <rcl_take_request>
 801644e:	b148      	cbz	r0, 8016464 <rcl_action_take_cancel_request+0x64>
 8016450:	280a      	cmp	r0, #10
 8016452:	d007      	beq.n	8016464 <rcl_action_take_cancel_request+0x64>
 8016454:	f240 2259 	movw	r2, #601	@ 0x259
 8016458:	f640 0399 	movw	r3, #2201	@ 0x899
 801645c:	4290      	cmp	r0, r2
 801645e:	bf0c      	ite	eq
 8016460:	4618      	moveq	r0, r3
 8016462:	2001      	movne	r0, #1
 8016464:	bd70      	pop	{r4, r5, r6, pc}
 8016466:	f7f7 fd63 	bl	800df30 <rcutils_reset_error>
 801646a:	f640 0098 	movw	r0, #2200	@ 0x898
 801646e:	bd70      	pop	{r4, r5, r6, pc}
 8016470:	f640 0098 	movw	r0, #2200	@ 0x898
 8016474:	bd70      	pop	{r4, r5, r6, pc}
 8016476:	200b      	movs	r0, #11
 8016478:	bd70      	pop	{r4, r5, r6, pc}
 801647a:	f640 0098 	movw	r0, #2200	@ 0x898
 801647e:	4770      	bx	lr

08016480 <rcl_action_send_cancel_response>:
 8016480:	b398      	cbz	r0, 80164ea <rcl_action_send_cancel_response+0x6a>
 8016482:	b570      	push	{r4, r5, r6, lr}
 8016484:	4604      	mov	r4, r0
 8016486:	6800      	ldr	r0, [r0, #0]
 8016488:	b350      	cbz	r0, 80164e0 <rcl_action_send_cancel_response+0x60>
 801648a:	460d      	mov	r5, r1
 801648c:	4616      	mov	r6, r2
 801648e:	f7fe f99f 	bl	80147d0 <rcl_service_is_valid>
 8016492:	b300      	cbz	r0, 80164d6 <rcl_action_send_cancel_response+0x56>
 8016494:	6820      	ldr	r0, [r4, #0]
 8016496:	3004      	adds	r0, #4
 8016498:	f7fe f99a 	bl	80147d0 <rcl_service_is_valid>
 801649c:	b1d8      	cbz	r0, 80164d6 <rcl_action_send_cancel_response+0x56>
 801649e:	6820      	ldr	r0, [r4, #0]
 80164a0:	3008      	adds	r0, #8
 80164a2:	f7fe f995 	bl	80147d0 <rcl_service_is_valid>
 80164a6:	b1b0      	cbz	r0, 80164d6 <rcl_action_send_cancel_response+0x56>
 80164a8:	6820      	ldr	r0, [r4, #0]
 80164aa:	300c      	adds	r0, #12
 80164ac:	f7f6 fcd6 	bl	800ce5c <rcl_publisher_is_valid>
 80164b0:	b188      	cbz	r0, 80164d6 <rcl_action_send_cancel_response+0x56>
 80164b2:	6820      	ldr	r0, [r4, #0]
 80164b4:	3010      	adds	r0, #16
 80164b6:	f7f6 fcd1 	bl	800ce5c <rcl_publisher_is_valid>
 80164ba:	b160      	cbz	r0, 80164d6 <rcl_action_send_cancel_response+0x56>
 80164bc:	b19d      	cbz	r5, 80164e6 <rcl_action_send_cancel_response+0x66>
 80164be:	b196      	cbz	r6, 80164e6 <rcl_action_send_cancel_response+0x66>
 80164c0:	6820      	ldr	r0, [r4, #0]
 80164c2:	4632      	mov	r2, r6
 80164c4:	4629      	mov	r1, r5
 80164c6:	3004      	adds	r0, #4
 80164c8:	f7fe f96a 	bl	80147a0 <rcl_send_response>
 80164cc:	b110      	cbz	r0, 80164d4 <rcl_action_send_cancel_response+0x54>
 80164ce:	2802      	cmp	r0, #2
 80164d0:	bf18      	it	ne
 80164d2:	2001      	movne	r0, #1
 80164d4:	bd70      	pop	{r4, r5, r6, pc}
 80164d6:	f7f7 fd2b 	bl	800df30 <rcutils_reset_error>
 80164da:	f640 0098 	movw	r0, #2200	@ 0x898
 80164de:	bd70      	pop	{r4, r5, r6, pc}
 80164e0:	f640 0098 	movw	r0, #2200	@ 0x898
 80164e4:	bd70      	pop	{r4, r5, r6, pc}
 80164e6:	200b      	movs	r0, #11
 80164e8:	bd70      	pop	{r4, r5, r6, pc}
 80164ea:	f640 0098 	movw	r0, #2200	@ 0x898
 80164ee:	4770      	bx	lr

080164f0 <rcl_action_wait_set_add_action_server>:
 80164f0:	2800      	cmp	r0, #0
 80164f2:	d04d      	beq.n	8016590 <rcl_action_wait_set_add_action_server+0xa0>
 80164f4:	b570      	push	{r4, r5, r6, lr}
 80164f6:	460c      	mov	r4, r1
 80164f8:	b159      	cbz	r1, 8016512 <rcl_action_wait_set_add_action_server+0x22>
 80164fa:	4605      	mov	r5, r0
 80164fc:	6808      	ldr	r0, [r1, #0]
 80164fe:	b140      	cbz	r0, 8016512 <rcl_action_wait_set_add_action_server+0x22>
 8016500:	4616      	mov	r6, r2
 8016502:	f7fe f965 	bl	80147d0 <rcl_service_is_valid>
 8016506:	b120      	cbz	r0, 8016512 <rcl_action_wait_set_add_action_server+0x22>
 8016508:	6820      	ldr	r0, [r4, #0]
 801650a:	3004      	adds	r0, #4
 801650c:	f7fe f960 	bl	80147d0 <rcl_service_is_valid>
 8016510:	b910      	cbnz	r0, 8016518 <rcl_action_wait_set_add_action_server+0x28>
 8016512:	f640 0098 	movw	r0, #2200	@ 0x898
 8016516:	bd70      	pop	{r4, r5, r6, pc}
 8016518:	6820      	ldr	r0, [r4, #0]
 801651a:	3008      	adds	r0, #8
 801651c:	f7fe f958 	bl	80147d0 <rcl_service_is_valid>
 8016520:	2800      	cmp	r0, #0
 8016522:	d0f6      	beq.n	8016512 <rcl_action_wait_set_add_action_server+0x22>
 8016524:	6820      	ldr	r0, [r4, #0]
 8016526:	300c      	adds	r0, #12
 8016528:	f7f6 fcb0 	bl	800ce8c <rcl_publisher_is_valid_except_context>
 801652c:	2800      	cmp	r0, #0
 801652e:	d0f0      	beq.n	8016512 <rcl_action_wait_set_add_action_server+0x22>
 8016530:	6820      	ldr	r0, [r4, #0]
 8016532:	3010      	adds	r0, #16
 8016534:	f7f6 fcaa 	bl	800ce8c <rcl_publisher_is_valid_except_context>
 8016538:	2800      	cmp	r0, #0
 801653a:	d0ea      	beq.n	8016512 <rcl_action_wait_set_add_action_server+0x22>
 801653c:	6821      	ldr	r1, [r4, #0]
 801653e:	4628      	mov	r0, r5
 8016540:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8016544:	f7ff fad0 	bl	8015ae8 <rcl_wait_set_add_service>
 8016548:	2800      	cmp	r0, #0
 801654a:	d1e4      	bne.n	8016516 <rcl_action_wait_set_add_action_server+0x26>
 801654c:	6821      	ldr	r1, [r4, #0]
 801654e:	4628      	mov	r0, r5
 8016550:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8016554:	3104      	adds	r1, #4
 8016556:	f7ff fac7 	bl	8015ae8 <rcl_wait_set_add_service>
 801655a:	2800      	cmp	r0, #0
 801655c:	d1db      	bne.n	8016516 <rcl_action_wait_set_add_action_server+0x26>
 801655e:	6821      	ldr	r1, [r4, #0]
 8016560:	4628      	mov	r0, r5
 8016562:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8016566:	3108      	adds	r1, #8
 8016568:	f7ff fabe 	bl	8015ae8 <rcl_wait_set_add_service>
 801656c:	2800      	cmp	r0, #0
 801656e:	d1d2      	bne.n	8016516 <rcl_action_wait_set_add_action_server+0x26>
 8016570:	6821      	ldr	r1, [r4, #0]
 8016572:	4628      	mov	r0, r5
 8016574:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8016578:	3114      	adds	r1, #20
 801657a:	f7ff fa59 	bl	8015a30 <rcl_wait_set_add_timer>
 801657e:	2800      	cmp	r0, #0
 8016580:	d1c9      	bne.n	8016516 <rcl_action_wait_set_add_action_server+0x26>
 8016582:	2e00      	cmp	r6, #0
 8016584:	d0c7      	beq.n	8016516 <rcl_action_wait_set_add_action_server+0x26>
 8016586:	6823      	ldr	r3, [r4, #0]
 8016588:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801658c:	6033      	str	r3, [r6, #0]
 801658e:	bd70      	pop	{r4, r5, r6, pc}
 8016590:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016594:	4770      	bx	lr
 8016596:	bf00      	nop

08016598 <rcl_action_server_wait_set_get_entities_ready>:
 8016598:	2800      	cmp	r0, #0
 801659a:	d05a      	beq.n	8016652 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801659c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801659e:	460c      	mov	r4, r1
 80165a0:	b161      	cbz	r1, 80165bc <rcl_action_server_wait_set_get_entities_ready+0x24>
 80165a2:	4605      	mov	r5, r0
 80165a4:	6808      	ldr	r0, [r1, #0]
 80165a6:	b148      	cbz	r0, 80165bc <rcl_action_server_wait_set_get_entities_ready+0x24>
 80165a8:	4616      	mov	r6, r2
 80165aa:	461f      	mov	r7, r3
 80165ac:	f7fe f910 	bl	80147d0 <rcl_service_is_valid>
 80165b0:	b120      	cbz	r0, 80165bc <rcl_action_server_wait_set_get_entities_ready+0x24>
 80165b2:	6820      	ldr	r0, [r4, #0]
 80165b4:	3004      	adds	r0, #4
 80165b6:	f7fe f90b 	bl	80147d0 <rcl_service_is_valid>
 80165ba:	b910      	cbnz	r0, 80165c2 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 80165bc:	f640 0098 	movw	r0, #2200	@ 0x898
 80165c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165c2:	6820      	ldr	r0, [r4, #0]
 80165c4:	3008      	adds	r0, #8
 80165c6:	f7fe f903 	bl	80147d0 <rcl_service_is_valid>
 80165ca:	2800      	cmp	r0, #0
 80165cc:	d0f6      	beq.n	80165bc <rcl_action_server_wait_set_get_entities_ready+0x24>
 80165ce:	6820      	ldr	r0, [r4, #0]
 80165d0:	300c      	adds	r0, #12
 80165d2:	f7f6 fc5b 	bl	800ce8c <rcl_publisher_is_valid_except_context>
 80165d6:	2800      	cmp	r0, #0
 80165d8:	d0f0      	beq.n	80165bc <rcl_action_server_wait_set_get_entities_ready+0x24>
 80165da:	6820      	ldr	r0, [r4, #0]
 80165dc:	3010      	adds	r0, #16
 80165de:	f7f6 fc55 	bl	800ce8c <rcl_publisher_is_valid_except_context>
 80165e2:	2800      	cmp	r0, #0
 80165e4:	d0ea      	beq.n	80165bc <rcl_action_server_wait_set_get_entities_ready+0x24>
 80165e6:	b3be      	cbz	r6, 8016658 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80165e8:	b3b7      	cbz	r7, 8016658 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80165ea:	9b06      	ldr	r3, [sp, #24]
 80165ec:	b3a3      	cbz	r3, 8016658 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80165ee:	9b07      	ldr	r3, [sp, #28]
 80165f0:	b393      	cbz	r3, 8016658 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80165f2:	6821      	ldr	r1, [r4, #0]
 80165f4:	692a      	ldr	r2, [r5, #16]
 80165f6:	6a2c      	ldr	r4, [r5, #32]
 80165f8:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80165fc:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8016600:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8016604:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8016608:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 801660c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8016610:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8016614:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8016618:	1a64      	subs	r4, r4, r1
 801661a:	fab4 f484 	clz	r4, r4
 801661e:	0964      	lsrs	r4, r4, #5
 8016620:	7034      	strb	r4, [r6, #0]
 8016622:	1d0c      	adds	r4, r1, #4
 8016624:	1b1b      	subs	r3, r3, r4
 8016626:	fab3 f383 	clz	r3, r3
 801662a:	095b      	lsrs	r3, r3, #5
 801662c:	f101 0408 	add.w	r4, r1, #8
 8016630:	703b      	strb	r3, [r7, #0]
 8016632:	f101 0314 	add.w	r3, r1, #20
 8016636:	1b01      	subs	r1, r0, r4
 8016638:	1ad3      	subs	r3, r2, r3
 801663a:	fab1 f181 	clz	r1, r1
 801663e:	9a06      	ldr	r2, [sp, #24]
 8016640:	0949      	lsrs	r1, r1, #5
 8016642:	7011      	strb	r1, [r2, #0]
 8016644:	fab3 f383 	clz	r3, r3
 8016648:	9a07      	ldr	r2, [sp, #28]
 801664a:	095b      	lsrs	r3, r3, #5
 801664c:	2000      	movs	r0, #0
 801664e:	7013      	strb	r3, [r2, #0]
 8016650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016652:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016656:	4770      	bx	lr
 8016658:	200b      	movs	r0, #11
 801665a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801665c <_execute_event_handler>:
 801665c:	2002      	movs	r0, #2
 801665e:	4770      	bx	lr

08016660 <_cancel_goal_event_handler>:
 8016660:	2003      	movs	r0, #3
 8016662:	4770      	bx	lr

08016664 <_succeed_event_handler>:
 8016664:	2004      	movs	r0, #4
 8016666:	4770      	bx	lr

08016668 <_abort_event_handler>:
 8016668:	2006      	movs	r0, #6
 801666a:	4770      	bx	lr

0801666c <_canceled_event_handler>:
 801666c:	2005      	movs	r0, #5
 801666e:	4770      	bx	lr

08016670 <rcl_action_transition_goal_state>:
 8016670:	b2c2      	uxtb	r2, r0
 8016672:	2a06      	cmp	r2, #6
 8016674:	d80c      	bhi.n	8016690 <rcl_action_transition_goal_state+0x20>
 8016676:	2904      	cmp	r1, #4
 8016678:	d80a      	bhi.n	8016690 <rcl_action_transition_goal_state+0x20>
 801667a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801667e:	b410      	push	{r4}
 8016680:	1853      	adds	r3, r2, r1
 8016682:	4c06      	ldr	r4, [pc, #24]	@ (801669c <rcl_action_transition_goal_state+0x2c>)
 8016684:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8016688:	b123      	cbz	r3, 8016694 <rcl_action_transition_goal_state+0x24>
 801668a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801668e:	4718      	bx	r3
 8016690:	2000      	movs	r0, #0
 8016692:	4770      	bx	lr
 8016694:	2000      	movs	r0, #0
 8016696:	f85d 4b04 	ldr.w	r4, [sp], #4
 801669a:	4770      	bx	lr
 801669c:	0801a85c 	.word	0x0801a85c

080166a0 <rcl_action_get_zero_initialized_cancel_response>:
 80166a0:	b510      	push	{r4, lr}
 80166a2:	4c07      	ldr	r4, [pc, #28]	@ (80166c0 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80166a4:	4686      	mov	lr, r0
 80166a6:	4684      	mov	ip, r0
 80166a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80166aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80166ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80166b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80166b4:	6823      	ldr	r3, [r4, #0]
 80166b6:	f8cc 3000 	str.w	r3, [ip]
 80166ba:	4670      	mov	r0, lr
 80166bc:	bd10      	pop	{r4, pc}
 80166be:	bf00      	nop
 80166c0:	0801a8e8 	.word	0x0801a8e8

080166c4 <rclc_action_send_result_request>:
 80166c4:	b1d0      	cbz	r0, 80166fc <rclc_action_send_result_request+0x38>
 80166c6:	b500      	push	{lr}
 80166c8:	4684      	mov	ip, r0
 80166ca:	b087      	sub	sp, #28
 80166cc:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80166d0:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80166d4:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80166d8:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80166dc:	f10d 0e08 	add.w	lr, sp, #8
 80166e0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80166e4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80166e8:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80166ec:	a902      	add	r1, sp, #8
 80166ee:	3010      	adds	r0, #16
 80166f0:	f7ff fbda 	bl	8015ea8 <rcl_action_send_result_request>
 80166f4:	b920      	cbnz	r0, 8016700 <rclc_action_send_result_request+0x3c>
 80166f6:	b007      	add	sp, #28
 80166f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80166fc:	200b      	movs	r0, #11
 80166fe:	4770      	bx	lr
 8016700:	9001      	str	r0, [sp, #4]
 8016702:	f7f7 fc15 	bl	800df30 <rcutils_reset_error>
 8016706:	9801      	ldr	r0, [sp, #4]
 8016708:	b007      	add	sp, #28
 801670a:	f85d fb04 	ldr.w	pc, [sp], #4
 801670e:	bf00      	nop

08016710 <rclc_action_take_goal_handle>:
 8016710:	b160      	cbz	r0, 801672c <rclc_action_take_goal_handle+0x1c>
 8016712:	6883      	ldr	r3, [r0, #8]
 8016714:	b143      	cbz	r3, 8016728 <rclc_action_take_goal_handle+0x18>
 8016716:	6819      	ldr	r1, [r3, #0]
 8016718:	6081      	str	r1, [r0, #8]
 801671a:	2200      	movs	r2, #0
 801671c:	721a      	strb	r2, [r3, #8]
 801671e:	68c1      	ldr	r1, [r0, #12]
 8016720:	6019      	str	r1, [r3, #0]
 8016722:	621a      	str	r2, [r3, #32]
 8016724:	849a      	strh	r2, [r3, #36]	@ 0x24
 8016726:	60c3      	str	r3, [r0, #12]
 8016728:	4618      	mov	r0, r3
 801672a:	4770      	bx	lr
 801672c:	4603      	mov	r3, r0
 801672e:	e7fb      	b.n	8016728 <rclc_action_take_goal_handle+0x18>

08016730 <rclc_action_remove_used_goal_handle>:
 8016730:	b180      	cbz	r0, 8016754 <rclc_action_remove_used_goal_handle+0x24>
 8016732:	b179      	cbz	r1, 8016754 <rclc_action_remove_used_goal_handle+0x24>
 8016734:	68c3      	ldr	r3, [r0, #12]
 8016736:	4299      	cmp	r1, r3
 8016738:	d00d      	beq.n	8016756 <rclc_action_remove_used_goal_handle+0x26>
 801673a:	b12b      	cbz	r3, 8016748 <rclc_action_remove_used_goal_handle+0x18>
 801673c:	681a      	ldr	r2, [r3, #0]
 801673e:	4291      	cmp	r1, r2
 8016740:	d003      	beq.n	801674a <rclc_action_remove_used_goal_handle+0x1a>
 8016742:	4613      	mov	r3, r2
 8016744:	2b00      	cmp	r3, #0
 8016746:	d1f9      	bne.n	801673c <rclc_action_remove_used_goal_handle+0xc>
 8016748:	4770      	bx	lr
 801674a:	680a      	ldr	r2, [r1, #0]
 801674c:	601a      	str	r2, [r3, #0]
 801674e:	6883      	ldr	r3, [r0, #8]
 8016750:	600b      	str	r3, [r1, #0]
 8016752:	6081      	str	r1, [r0, #8]
 8016754:	4770      	bx	lr
 8016756:	680b      	ldr	r3, [r1, #0]
 8016758:	60c3      	str	r3, [r0, #12]
 801675a:	e7f8      	b.n	801674e <rclc_action_remove_used_goal_handle+0x1e>

0801675c <rclc_action_find_goal_handle_by_uuid>:
 801675c:	b538      	push	{r3, r4, r5, lr}
 801675e:	b180      	cbz	r0, 8016782 <rclc_action_find_goal_handle_by_uuid+0x26>
 8016760:	460d      	mov	r5, r1
 8016762:	b181      	cbz	r1, 8016786 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8016764:	68c4      	ldr	r4, [r0, #12]
 8016766:	b914      	cbnz	r4, 801676e <rclc_action_find_goal_handle_by_uuid+0x12>
 8016768:	e009      	b.n	801677e <rclc_action_find_goal_handle_by_uuid+0x22>
 801676a:	6824      	ldr	r4, [r4, #0]
 801676c:	b13c      	cbz	r4, 801677e <rclc_action_find_goal_handle_by_uuid+0x22>
 801676e:	f104 0009 	add.w	r0, r4, #9
 8016772:	2210      	movs	r2, #16
 8016774:	4629      	mov	r1, r5
 8016776:	f002 f961 	bl	8018a3c <memcmp>
 801677a:	2800      	cmp	r0, #0
 801677c:	d1f5      	bne.n	801676a <rclc_action_find_goal_handle_by_uuid+0xe>
 801677e:	4620      	mov	r0, r4
 8016780:	bd38      	pop	{r3, r4, r5, pc}
 8016782:	4604      	mov	r4, r0
 8016784:	e7fb      	b.n	801677e <rclc_action_find_goal_handle_by_uuid+0x22>
 8016786:	460c      	mov	r4, r1
 8016788:	e7f9      	b.n	801677e <rclc_action_find_goal_handle_by_uuid+0x22>
 801678a:	bf00      	nop

0801678c <rclc_action_find_first_handle_by_status>:
 801678c:	b140      	cbz	r0, 80167a0 <rclc_action_find_first_handle_by_status+0x14>
 801678e:	68c0      	ldr	r0, [r0, #12]
 8016790:	b910      	cbnz	r0, 8016798 <rclc_action_find_first_handle_by_status+0xc>
 8016792:	e005      	b.n	80167a0 <rclc_action_find_first_handle_by_status+0x14>
 8016794:	6800      	ldr	r0, [r0, #0]
 8016796:	b118      	cbz	r0, 80167a0 <rclc_action_find_first_handle_by_status+0x14>
 8016798:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801679c:	428b      	cmp	r3, r1
 801679e:	d1f9      	bne.n	8016794 <rclc_action_find_first_handle_by_status+0x8>
 80167a0:	4770      	bx	lr
 80167a2:	bf00      	nop

080167a4 <rclc_action_find_first_terminated_handle>:
 80167a4:	b140      	cbz	r0, 80167b8 <rclc_action_find_first_terminated_handle+0x14>
 80167a6:	68c0      	ldr	r0, [r0, #12]
 80167a8:	b910      	cbnz	r0, 80167b0 <rclc_action_find_first_terminated_handle+0xc>
 80167aa:	e005      	b.n	80167b8 <rclc_action_find_first_terminated_handle+0x14>
 80167ac:	6800      	ldr	r0, [r0, #0]
 80167ae:	b118      	cbz	r0, 80167b8 <rclc_action_find_first_terminated_handle+0x14>
 80167b0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80167b4:	2b03      	cmp	r3, #3
 80167b6:	ddf9      	ble.n	80167ac <rclc_action_find_first_terminated_handle+0x8>
 80167b8:	4770      	bx	lr
 80167ba:	bf00      	nop

080167bc <rclc_action_find_handle_by_goal_request_sequence_number>:
 80167bc:	b170      	cbz	r0, 80167dc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80167be:	68c0      	ldr	r0, [r0, #12]
 80167c0:	b160      	cbz	r0, 80167dc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80167c2:	b410      	push	{r4}
 80167c4:	e001      	b.n	80167ca <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 80167c6:	6800      	ldr	r0, [r0, #0]
 80167c8:	b128      	cbz	r0, 80167d6 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80167ca:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 80167ce:	4299      	cmp	r1, r3
 80167d0:	bf08      	it	eq
 80167d2:	4294      	cmpeq	r4, r2
 80167d4:	d1f7      	bne.n	80167c6 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80167d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80167da:	4770      	bx	lr
 80167dc:	4770      	bx	lr
 80167de:	bf00      	nop

080167e0 <rclc_action_find_handle_by_result_request_sequence_number>:
 80167e0:	b170      	cbz	r0, 8016800 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80167e2:	68c0      	ldr	r0, [r0, #12]
 80167e4:	b160      	cbz	r0, 8016800 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80167e6:	b410      	push	{r4}
 80167e8:	e001      	b.n	80167ee <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80167ea:	6800      	ldr	r0, [r0, #0]
 80167ec:	b128      	cbz	r0, 80167fa <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80167ee:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80167f2:	4299      	cmp	r1, r3
 80167f4:	bf08      	it	eq
 80167f6:	4294      	cmpeq	r4, r2
 80167f8:	d1f7      	bne.n	80167ea <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80167fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80167fe:	4770      	bx	lr
 8016800:	4770      	bx	lr
 8016802:	bf00      	nop

08016804 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8016804:	b170      	cbz	r0, 8016824 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8016806:	68c0      	ldr	r0, [r0, #12]
 8016808:	b160      	cbz	r0, 8016824 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801680a:	b410      	push	{r4}
 801680c:	e001      	b.n	8016812 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801680e:	6800      	ldr	r0, [r0, #0]
 8016810:	b128      	cbz	r0, 801681e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8016812:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8016816:	4299      	cmp	r1, r3
 8016818:	bf08      	it	eq
 801681a:	4294      	cmpeq	r4, r2
 801681c:	d1f7      	bne.n	801680e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801681e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016822:	4770      	bx	lr
 8016824:	4770      	bx	lr
 8016826:	bf00      	nop

08016828 <rclc_action_find_first_handle_with_goal_response>:
 8016828:	b140      	cbz	r0, 801683c <rclc_action_find_first_handle_with_goal_response+0x14>
 801682a:	68c0      	ldr	r0, [r0, #12]
 801682c:	b910      	cbnz	r0, 8016834 <rclc_action_find_first_handle_with_goal_response+0xc>
 801682e:	e005      	b.n	801683c <rclc_action_find_first_handle_with_goal_response+0x14>
 8016830:	6800      	ldr	r0, [r0, #0]
 8016832:	b118      	cbz	r0, 801683c <rclc_action_find_first_handle_with_goal_response+0x14>
 8016834:	f890 3020 	ldrb.w	r3, [r0, #32]
 8016838:	2b00      	cmp	r3, #0
 801683a:	d0f9      	beq.n	8016830 <rclc_action_find_first_handle_with_goal_response+0x8>
 801683c:	4770      	bx	lr
 801683e:	bf00      	nop

08016840 <rclc_action_find_first_handle_with_result_response>:
 8016840:	b140      	cbz	r0, 8016854 <rclc_action_find_first_handle_with_result_response+0x14>
 8016842:	68c0      	ldr	r0, [r0, #12]
 8016844:	b910      	cbnz	r0, 801684c <rclc_action_find_first_handle_with_result_response+0xc>
 8016846:	e005      	b.n	8016854 <rclc_action_find_first_handle_with_result_response+0x14>
 8016848:	6800      	ldr	r0, [r0, #0]
 801684a:	b118      	cbz	r0, 8016854 <rclc_action_find_first_handle_with_result_response+0x14>
 801684c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8016850:	2b00      	cmp	r3, #0
 8016852:	d0f9      	beq.n	8016848 <rclc_action_find_first_handle_with_result_response+0x8>
 8016854:	4770      	bx	lr
 8016856:	bf00      	nop

08016858 <rclc_action_server_response_goal_request>:
 8016858:	b198      	cbz	r0, 8016882 <rclc_action_server_response_goal_request+0x2a>
 801685a:	b510      	push	{r4, lr}
 801685c:	6844      	ldr	r4, [r0, #4]
 801685e:	b086      	sub	sp, #24
 8016860:	2200      	movs	r2, #0
 8016862:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8016866:	460b      	mov	r3, r1
 8016868:	9205      	str	r2, [sp, #20]
 801686a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801686e:	aa03      	add	r2, sp, #12
 8016870:	f104 0010 	add.w	r0, r4, #16
 8016874:	f88d 300c 	strb.w	r3, [sp, #12]
 8016878:	f7ff fd4a 	bl	8016310 <rcl_action_send_goal_response>
 801687c:	b918      	cbnz	r0, 8016886 <rclc_action_server_response_goal_request+0x2e>
 801687e:	b006      	add	sp, #24
 8016880:	bd10      	pop	{r4, pc}
 8016882:	200b      	movs	r0, #11
 8016884:	4770      	bx	lr
 8016886:	9001      	str	r0, [sp, #4]
 8016888:	f7f7 fb52 	bl	800df30 <rcutils_reset_error>
 801688c:	9801      	ldr	r0, [sp, #4]
 801688e:	b006      	add	sp, #24
 8016890:	bd10      	pop	{r4, pc}
 8016892:	bf00      	nop
 8016894:	0000      	movs	r0, r0
	...

08016898 <rclc_action_server_goal_cancel_accept>:
 8016898:	b310      	cbz	r0, 80168e0 <rclc_action_server_goal_cancel_accept+0x48>
 801689a:	b510      	push	{r4, lr}
 801689c:	b090      	sub	sp, #64	@ 0x40
 801689e:	4604      	mov	r4, r0
 80168a0:	a806      	add	r0, sp, #24
 80168a2:	f7ff fefd 	bl	80166a0 <rcl_action_get_zero_initialized_cancel_response>
 80168a6:	2300      	movs	r3, #0
 80168a8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80168ac:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80168b0:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80168b4:	f88d 3018 	strb.w	r3, [sp, #24]
 80168b8:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80168bc:	f8cd d01c 	str.w	sp, [sp, #28]
 80168c0:	46ec      	mov	ip, sp
 80168c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80168c6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80168e8 <rclc_action_server_goal_cancel_accept+0x50>
 80168ca:	6860      	ldr	r0, [r4, #4]
 80168cc:	aa06      	add	r2, sp, #24
 80168ce:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80168d2:	3010      	adds	r0, #16
 80168d4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80168d8:	f7ff fdd2 	bl	8016480 <rcl_action_send_cancel_response>
 80168dc:	b010      	add	sp, #64	@ 0x40
 80168de:	bd10      	pop	{r4, pc}
 80168e0:	200b      	movs	r0, #11
 80168e2:	4770      	bx	lr
 80168e4:	f3af 8000 	nop.w
 80168e8:	00000001 	.word	0x00000001
 80168ec:	00000001 	.word	0x00000001

080168f0 <rclc_action_server_goal_cancel_reject>:
 80168f0:	b082      	sub	sp, #8
 80168f2:	b530      	push	{r4, r5, lr}
 80168f4:	b08b      	sub	sp, #44	@ 0x2c
 80168f6:	ac0e      	add	r4, sp, #56	@ 0x38
 80168f8:	e884 000c 	stmia.w	r4, {r2, r3}
 80168fc:	b188      	cbz	r0, 8016922 <rclc_action_server_goal_cancel_reject+0x32>
 80168fe:	4604      	mov	r4, r0
 8016900:	a801      	add	r0, sp, #4
 8016902:	460d      	mov	r5, r1
 8016904:	f7ff fecc 	bl	80166a0 <rcl_action_get_zero_initialized_cancel_response>
 8016908:	aa01      	add	r2, sp, #4
 801690a:	a90e      	add	r1, sp, #56	@ 0x38
 801690c:	f104 0010 	add.w	r0, r4, #16
 8016910:	f88d 5004 	strb.w	r5, [sp, #4]
 8016914:	f7ff fdb4 	bl	8016480 <rcl_action_send_cancel_response>
 8016918:	b00b      	add	sp, #44	@ 0x2c
 801691a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801691e:	b002      	add	sp, #8
 8016920:	4770      	bx	lr
 8016922:	200b      	movs	r0, #11
 8016924:	b00b      	add	sp, #44	@ 0x2c
 8016926:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801692a:	b002      	add	sp, #8
 801692c:	4770      	bx	lr
 801692e:	bf00      	nop

08016930 <rcutils_is_directory>:
 8016930:	2000      	movs	r0, #0
 8016932:	4770      	bx	lr

08016934 <rcutils_join_path>:
 8016934:	b082      	sub	sp, #8
 8016936:	e88d 000c 	stmia.w	sp, {r2, r3}
 801693a:	2000      	movs	r0, #0
 801693c:	b002      	add	sp, #8
 801693e:	4770      	bx	lr

08016940 <rcutils_to_native_path>:
 8016940:	b084      	sub	sp, #16
 8016942:	a801      	add	r0, sp, #4
 8016944:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8016948:	b004      	add	sp, #16
 801694a:	2000      	movs	r0, #0
 801694c:	4770      	bx	lr
 801694e:	bf00      	nop

08016950 <rmw_get_zero_initialized_context>:
 8016950:	b510      	push	{r4, lr}
 8016952:	4604      	mov	r4, r0
 8016954:	3010      	adds	r0, #16
 8016956:	f7f7 fddb 	bl	800e510 <rmw_get_zero_initialized_init_options>
 801695a:	2300      	movs	r3, #0
 801695c:	2000      	movs	r0, #0
 801695e:	2100      	movs	r1, #0
 8016960:	e9c4 0100 	strd	r0, r1, [r4]
 8016964:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8016968:	60a3      	str	r3, [r4, #8]
 801696a:	4620      	mov	r0, r4
 801696c:	bd10      	pop	{r4, pc}
 801696e:	bf00      	nop

08016970 <rmw_time_equal>:
 8016970:	b4f0      	push	{r4, r5, r6, r7}
 8016972:	b084      	sub	sp, #16
 8016974:	ac04      	add	r4, sp, #16
 8016976:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801697a:	4603      	mov	r3, r0
 801697c:	4924      	ldr	r1, [pc, #144]	@ (8016a10 <rmw_time_equal+0xa0>)
 801697e:	9e03      	ldr	r6, [sp, #12]
 8016980:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8016984:	2202      	movs	r2, #2
 8016986:	4299      	cmp	r1, r3
 8016988:	41aa      	sbcs	r2, r5
 801698a:	d330      	bcc.n	80169ee <rmw_time_equal+0x7e>
 801698c:	4c21      	ldr	r4, [pc, #132]	@ (8016a14 <rmw_time_equal+0xa4>)
 801698e:	fba3 3204 	umull	r3, r2, r3, r4
 8016992:	fb04 2205 	mla	r2, r4, r5, r2
 8016996:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801699a:	43dd      	mvns	r5, r3
 801699c:	1a8c      	subs	r4, r1, r2
 801699e:	4285      	cmp	r5, r0
 80169a0:	41b4      	sbcs	r4, r6
 80169a2:	d332      	bcc.n	8016a0a <rmw_time_equal+0x9a>
 80169a4:	eb10 0c03 	adds.w	ip, r0, r3
 80169a8:	eb42 0106 	adc.w	r1, r2, r6
 80169ac:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80169b0:	4817      	ldr	r0, [pc, #92]	@ (8016a10 <rmw_time_equal+0xa0>)
 80169b2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80169b4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80169b6:	2202      	movs	r2, #2
 80169b8:	4298      	cmp	r0, r3
 80169ba:	41b2      	sbcs	r2, r6
 80169bc:	d31c      	bcc.n	80169f8 <rmw_time_equal+0x88>
 80169be:	4c15      	ldr	r4, [pc, #84]	@ (8016a14 <rmw_time_equal+0xa4>)
 80169c0:	fba3 3204 	umull	r3, r2, r3, r4
 80169c4:	fb04 2206 	mla	r2, r4, r6, r2
 80169c8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80169cc:	43de      	mvns	r6, r3
 80169ce:	1a84      	subs	r4, r0, r2
 80169d0:	42ae      	cmp	r6, r5
 80169d2:	41bc      	sbcs	r4, r7
 80169d4:	d315      	bcc.n	8016a02 <rmw_time_equal+0x92>
 80169d6:	195b      	adds	r3, r3, r5
 80169d8:	eb42 0207 	adc.w	r2, r2, r7
 80169dc:	428a      	cmp	r2, r1
 80169de:	bf08      	it	eq
 80169e0:	4563      	cmpeq	r3, ip
 80169e2:	bf0c      	ite	eq
 80169e4:	2001      	moveq	r0, #1
 80169e6:	2000      	movne	r0, #0
 80169e8:	b004      	add	sp, #16
 80169ea:	bcf0      	pop	{r4, r5, r6, r7}
 80169ec:	4770      	bx	lr
 80169ee:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80169f2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80169f6:	e7d9      	b.n	80169ac <rmw_time_equal+0x3c>
 80169f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80169fc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8016a00:	e7ec      	b.n	80169dc <rmw_time_equal+0x6c>
 8016a02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016a06:	4602      	mov	r2, r0
 8016a08:	e7e8      	b.n	80169dc <rmw_time_equal+0x6c>
 8016a0a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8016a0e:	e7cd      	b.n	80169ac <rmw_time_equal+0x3c>
 8016a10:	25c17d04 	.word	0x25c17d04
 8016a14:	3b9aca00 	.word	0x3b9aca00

08016a18 <rmw_time_total_nsec>:
 8016a18:	b470      	push	{r4, r5, r6}
 8016a1a:	b085      	sub	sp, #20
 8016a1c:	ac04      	add	r4, sp, #16
 8016a1e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016a22:	4603      	mov	r3, r0
 8016a24:	4912      	ldr	r1, [pc, #72]	@ (8016a70 <rmw_time_total_nsec+0x58>)
 8016a26:	9e03      	ldr	r6, [sp, #12]
 8016a28:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8016a2c:	2202      	movs	r2, #2
 8016a2e:	4299      	cmp	r1, r3
 8016a30:	41aa      	sbcs	r2, r5
 8016a32:	d311      	bcc.n	8016a58 <rmw_time_total_nsec+0x40>
 8016a34:	4c0f      	ldr	r4, [pc, #60]	@ (8016a74 <rmw_time_total_nsec+0x5c>)
 8016a36:	fba3 3204 	umull	r3, r2, r3, r4
 8016a3a:	fb04 2205 	mla	r2, r4, r5, r2
 8016a3e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016a42:	43dd      	mvns	r5, r3
 8016a44:	1a8c      	subs	r4, r1, r2
 8016a46:	4285      	cmp	r5, r0
 8016a48:	41b4      	sbcs	r4, r6
 8016a4a:	d30c      	bcc.n	8016a66 <rmw_time_total_nsec+0x4e>
 8016a4c:	1818      	adds	r0, r3, r0
 8016a4e:	eb42 0106 	adc.w	r1, r2, r6
 8016a52:	b005      	add	sp, #20
 8016a54:	bc70      	pop	{r4, r5, r6}
 8016a56:	4770      	bx	lr
 8016a58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016a5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016a60:	b005      	add	sp, #20
 8016a62:	bc70      	pop	{r4, r5, r6}
 8016a64:	4770      	bx	lr
 8016a66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016a6a:	b005      	add	sp, #20
 8016a6c:	bc70      	pop	{r4, r5, r6}
 8016a6e:	4770      	bx	lr
 8016a70:	25c17d04 	.word	0x25c17d04
 8016a74:	3b9aca00 	.word	0x3b9aca00

08016a78 <rmw_get_zero_initialized_message_info>:
 8016a78:	b510      	push	{r4, lr}
 8016a7a:	2240      	movs	r2, #64	@ 0x40
 8016a7c:	4604      	mov	r4, r0
 8016a7e:	2100      	movs	r1, #0
 8016a80:	f002 f806 	bl	8018a90 <memset>
 8016a84:	4620      	mov	r0, r4
 8016a86:	bd10      	pop	{r4, pc}

08016a88 <on_status>:
 8016a88:	b082      	sub	sp, #8
 8016a8a:	b002      	add	sp, #8
 8016a8c:	4770      	bx	lr
 8016a8e:	bf00      	nop

08016a90 <on_topic>:
 8016a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a94:	4a22      	ldr	r2, [pc, #136]	@ (8016b20 <on_topic+0x90>)
 8016a96:	b094      	sub	sp, #80	@ 0x50
 8016a98:	6812      	ldr	r2, [r2, #0]
 8016a9a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8016a9c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016aa0:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8016aa4:	b3c2      	cbz	r2, 8016b18 <on_topic+0x88>
 8016aa6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8016aaa:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8016aae:	e001      	b.n	8016ab4 <on_topic+0x24>
 8016ab0:	6852      	ldr	r2, [r2, #4]
 8016ab2:	b38a      	cbz	r2, 8016b18 <on_topic+0x88>
 8016ab4:	6894      	ldr	r4, [r2, #8]
 8016ab6:	8aa3      	ldrh	r3, [r4, #20]
 8016ab8:	428b      	cmp	r3, r1
 8016aba:	d1f9      	bne.n	8016ab0 <on_topic+0x20>
 8016abc:	7da3      	ldrb	r3, [r4, #22]
 8016abe:	4283      	cmp	r3, r0
 8016ac0:	d1f6      	bne.n	8016ab0 <on_topic+0x20>
 8016ac2:	2248      	movs	r2, #72	@ 0x48
 8016ac4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8016ac8:	4668      	mov	r0, sp
 8016aca:	f002 f8aa 	bl	8018c22 <memcpy>
 8016ace:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8016ad2:	cb0c      	ldmia	r3, {r2, r3}
 8016ad4:	4620      	mov	r0, r4
 8016ad6:	f7f9 f8d1 	bl	800fc7c <rmw_uxrce_get_static_input_buffer_for_entity>
 8016ada:	4607      	mov	r7, r0
 8016adc:	b1e0      	cbz	r0, 8016b18 <on_topic+0x88>
 8016ade:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8016ae2:	4632      	mov	r2, r6
 8016ae4:	4628      	mov	r0, r5
 8016ae6:	f108 0110 	add.w	r1, r8, #16
 8016aea:	f000 fccf 	bl	801748c <ucdr_deserialize_array_uint8_t>
 8016aee:	b930      	cbnz	r0, 8016afe <on_topic+0x6e>
 8016af0:	480c      	ldr	r0, [pc, #48]	@ (8016b24 <on_topic+0x94>)
 8016af2:	4639      	mov	r1, r7
 8016af4:	b014      	add	sp, #80	@ 0x50
 8016af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016afa:	f000 b8bd 	b.w	8016c78 <put_memory>
 8016afe:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8016b02:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8016b06:	f000 fb5f 	bl	80171c8 <rmw_uros_epoch_nanos>
 8016b0a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8016b0e:	2305      	movs	r3, #5
 8016b10:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016b14:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8016b18:	b014      	add	sp, #80	@ 0x50
 8016b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b1e:	bf00      	nop
 8016b20:	2000b104 	.word	0x2000b104
 8016b24:	2000b0f4 	.word	0x2000b0f4

08016b28 <on_request>:
 8016b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b2c:	4823      	ldr	r0, [pc, #140]	@ (8016bbc <on_request+0x94>)
 8016b2e:	b094      	sub	sp, #80	@ 0x50
 8016b30:	6800      	ldr	r0, [r0, #0]
 8016b32:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016b34:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016b38:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016b3a:	2800      	cmp	r0, #0
 8016b3c:	d03b      	beq.n	8016bb6 <on_request+0x8e>
 8016b3e:	461d      	mov	r5, r3
 8016b40:	e001      	b.n	8016b46 <on_request+0x1e>
 8016b42:	6840      	ldr	r0, [r0, #4]
 8016b44:	b3b8      	cbz	r0, 8016bb6 <on_request+0x8e>
 8016b46:	6884      	ldr	r4, [r0, #8]
 8016b48:	8b21      	ldrh	r1, [r4, #24]
 8016b4a:	4291      	cmp	r1, r2
 8016b4c:	d1f9      	bne.n	8016b42 <on_request+0x1a>
 8016b4e:	2248      	movs	r2, #72	@ 0x48
 8016b50:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016b54:	4668      	mov	r0, sp
 8016b56:	f002 f864 	bl	8018c22 <memcpy>
 8016b5a:	f104 0320 	add.w	r3, r4, #32
 8016b5e:	cb0c      	ldmia	r3, {r2, r3}
 8016b60:	4620      	mov	r0, r4
 8016b62:	f7f9 f88b 	bl	800fc7c <rmw_uxrce_get_static_input_buffer_for_entity>
 8016b66:	4680      	mov	r8, r0
 8016b68:	b328      	cbz	r0, 8016bb6 <on_request+0x8e>
 8016b6a:	4638      	mov	r0, r7
 8016b6c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016b70:	4632      	mov	r2, r6
 8016b72:	f107 0110 	add.w	r1, r7, #16
 8016b76:	f000 fc89 	bl	801748c <ucdr_deserialize_array_uint8_t>
 8016b7a:	b930      	cbnz	r0, 8016b8a <on_request+0x62>
 8016b7c:	4810      	ldr	r0, [pc, #64]	@ (8016bc0 <on_request+0x98>)
 8016b7e:	4641      	mov	r1, r8
 8016b80:	b014      	add	sp, #80	@ 0x50
 8016b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b86:	f000 b877 	b.w	8016c78 <put_memory>
 8016b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016b8c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8016b90:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016b94:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016b98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016ba0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016ba4:	f000 fb10 	bl	80171c8 <rmw_uros_epoch_nanos>
 8016ba8:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016bac:	2303      	movs	r3, #3
 8016bae:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016bb2:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016bb6:	b014      	add	sp, #80	@ 0x50
 8016bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bbc:	2000b0d4 	.word	0x2000b0d4
 8016bc0:	2000b0f4 	.word	0x2000b0f4

08016bc4 <on_reply>:
 8016bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bc8:	4821      	ldr	r0, [pc, #132]	@ (8016c50 <on_reply+0x8c>)
 8016bca:	b094      	sub	sp, #80	@ 0x50
 8016bcc:	6800      	ldr	r0, [r0, #0]
 8016bce:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016bd0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016bd4:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016bd6:	b3b8      	cbz	r0, 8016c48 <on_reply+0x84>
 8016bd8:	461d      	mov	r5, r3
 8016bda:	e001      	b.n	8016be0 <on_reply+0x1c>
 8016bdc:	6840      	ldr	r0, [r0, #4]
 8016bde:	b398      	cbz	r0, 8016c48 <on_reply+0x84>
 8016be0:	6884      	ldr	r4, [r0, #8]
 8016be2:	8b21      	ldrh	r1, [r4, #24]
 8016be4:	4291      	cmp	r1, r2
 8016be6:	d1f9      	bne.n	8016bdc <on_reply+0x18>
 8016be8:	2248      	movs	r2, #72	@ 0x48
 8016bea:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016bee:	4668      	mov	r0, sp
 8016bf0:	f002 f817 	bl	8018c22 <memcpy>
 8016bf4:	f104 0320 	add.w	r3, r4, #32
 8016bf8:	cb0c      	ldmia	r3, {r2, r3}
 8016bfa:	4620      	mov	r0, r4
 8016bfc:	f7f9 f83e 	bl	800fc7c <rmw_uxrce_get_static_input_buffer_for_entity>
 8016c00:	4680      	mov	r8, r0
 8016c02:	b308      	cbz	r0, 8016c48 <on_reply+0x84>
 8016c04:	4638      	mov	r0, r7
 8016c06:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016c0a:	4632      	mov	r2, r6
 8016c0c:	f107 0110 	add.w	r1, r7, #16
 8016c10:	f000 fc3c 	bl	801748c <ucdr_deserialize_array_uint8_t>
 8016c14:	b930      	cbnz	r0, 8016c24 <on_reply+0x60>
 8016c16:	480f      	ldr	r0, [pc, #60]	@ (8016c54 <on_reply+0x90>)
 8016c18:	4641      	mov	r1, r8
 8016c1a:	b014      	add	sp, #80	@ 0x50
 8016c1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c20:	f000 b82a 	b.w	8016c78 <put_memory>
 8016c24:	2200      	movs	r2, #0
 8016c26:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8016c2a:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016c2e:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016c32:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8016c36:	f000 fac7 	bl	80171c8 <rmw_uros_epoch_nanos>
 8016c3a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016c3e:	2304      	movs	r3, #4
 8016c40:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016c44:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016c48:	b014      	add	sp, #80	@ 0x50
 8016c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c4e:	bf00      	nop
 8016c50:	200068b0 	.word	0x200068b0
 8016c54:	2000b0f4 	.word	0x2000b0f4

08016c58 <get_memory>:
 8016c58:	4603      	mov	r3, r0
 8016c5a:	6840      	ldr	r0, [r0, #4]
 8016c5c:	b158      	cbz	r0, 8016c76 <get_memory+0x1e>
 8016c5e:	6842      	ldr	r2, [r0, #4]
 8016c60:	605a      	str	r2, [r3, #4]
 8016c62:	b10a      	cbz	r2, 8016c68 <get_memory+0x10>
 8016c64:	2100      	movs	r1, #0
 8016c66:	6011      	str	r1, [r2, #0]
 8016c68:	681a      	ldr	r2, [r3, #0]
 8016c6a:	6042      	str	r2, [r0, #4]
 8016c6c:	b102      	cbz	r2, 8016c70 <get_memory+0x18>
 8016c6e:	6010      	str	r0, [r2, #0]
 8016c70:	2200      	movs	r2, #0
 8016c72:	6002      	str	r2, [r0, #0]
 8016c74:	6018      	str	r0, [r3, #0]
 8016c76:	4770      	bx	lr

08016c78 <put_memory>:
 8016c78:	680b      	ldr	r3, [r1, #0]
 8016c7a:	b10b      	cbz	r3, 8016c80 <put_memory+0x8>
 8016c7c:	684a      	ldr	r2, [r1, #4]
 8016c7e:	605a      	str	r2, [r3, #4]
 8016c80:	684a      	ldr	r2, [r1, #4]
 8016c82:	b102      	cbz	r2, 8016c86 <put_memory+0xe>
 8016c84:	6013      	str	r3, [r2, #0]
 8016c86:	6803      	ldr	r3, [r0, #0]
 8016c88:	428b      	cmp	r3, r1
 8016c8a:	6843      	ldr	r3, [r0, #4]
 8016c8c:	bf08      	it	eq
 8016c8e:	6002      	streq	r2, [r0, #0]
 8016c90:	604b      	str	r3, [r1, #4]
 8016c92:	b103      	cbz	r3, 8016c96 <put_memory+0x1e>
 8016c94:	6019      	str	r1, [r3, #0]
 8016c96:	2300      	movs	r3, #0
 8016c98:	600b      	str	r3, [r1, #0]
 8016c9a:	6041      	str	r1, [r0, #4]
 8016c9c:	4770      	bx	lr
 8016c9e:	bf00      	nop

08016ca0 <rmw_create_guard_condition>:
 8016ca0:	b538      	push	{r3, r4, r5, lr}
 8016ca2:	4605      	mov	r5, r0
 8016ca4:	4807      	ldr	r0, [pc, #28]	@ (8016cc4 <rmw_create_guard_condition+0x24>)
 8016ca6:	f7ff ffd7 	bl	8016c58 <get_memory>
 8016caa:	b148      	cbz	r0, 8016cc0 <rmw_create_guard_condition+0x20>
 8016cac:	6884      	ldr	r4, [r0, #8]
 8016cae:	2300      	movs	r3, #0
 8016cb0:	7423      	strb	r3, [r4, #16]
 8016cb2:	61e5      	str	r5, [r4, #28]
 8016cb4:	f7f7 fed0 	bl	800ea58 <rmw_get_implementation_identifier>
 8016cb8:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8016cbc:	f104 0014 	add.w	r0, r4, #20
 8016cc0:	bd38      	pop	{r3, r4, r5, pc}
 8016cc2:	bf00      	nop
 8016cc4:	2000b094 	.word	0x2000b094

08016cc8 <rmw_destroy_guard_condition>:
 8016cc8:	b508      	push	{r3, lr}
 8016cca:	4b08      	ldr	r3, [pc, #32]	@ (8016cec <rmw_destroy_guard_condition+0x24>)
 8016ccc:	6819      	ldr	r1, [r3, #0]
 8016cce:	b911      	cbnz	r1, 8016cd6 <rmw_destroy_guard_condition+0xe>
 8016cd0:	e00a      	b.n	8016ce8 <rmw_destroy_guard_condition+0x20>
 8016cd2:	6849      	ldr	r1, [r1, #4]
 8016cd4:	b141      	cbz	r1, 8016ce8 <rmw_destroy_guard_condition+0x20>
 8016cd6:	688b      	ldr	r3, [r1, #8]
 8016cd8:	3314      	adds	r3, #20
 8016cda:	4298      	cmp	r0, r3
 8016cdc:	d1f9      	bne.n	8016cd2 <rmw_destroy_guard_condition+0xa>
 8016cde:	4803      	ldr	r0, [pc, #12]	@ (8016cec <rmw_destroy_guard_condition+0x24>)
 8016ce0:	f7ff ffca 	bl	8016c78 <put_memory>
 8016ce4:	2000      	movs	r0, #0
 8016ce6:	bd08      	pop	{r3, pc}
 8016ce8:	2001      	movs	r0, #1
 8016cea:	bd08      	pop	{r3, pc}
 8016cec:	2000b094 	.word	0x2000b094

08016cf0 <create_topic>:
 8016cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cf4:	4605      	mov	r5, r0
 8016cf6:	b084      	sub	sp, #16
 8016cf8:	4822      	ldr	r0, [pc, #136]	@ (8016d84 <create_topic+0x94>)
 8016cfa:	460f      	mov	r7, r1
 8016cfc:	4616      	mov	r6, r2
 8016cfe:	f7ff ffab 	bl	8016c58 <get_memory>
 8016d02:	4604      	mov	r4, r0
 8016d04:	2800      	cmp	r0, #0
 8016d06:	d039      	beq.n	8016d7c <create_topic+0x8c>
 8016d08:	692b      	ldr	r3, [r5, #16]
 8016d0a:	6884      	ldr	r4, [r0, #8]
 8016d0c:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8016d8c <create_topic+0x9c>
 8016d10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016d14:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8016d18:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8016d1c:	1c42      	adds	r2, r0, #1
 8016d1e:	2102      	movs	r1, #2
 8016d20:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8016d24:	f7f9 fe50 	bl	80109c8 <uxr_object_id>
 8016d28:	223c      	movs	r2, #60	@ 0x3c
 8016d2a:	6120      	str	r0, [r4, #16]
 8016d2c:	4641      	mov	r1, r8
 8016d2e:	4638      	mov	r0, r7
 8016d30:	f7f9 f998 	bl	8010064 <generate_topic_name>
 8016d34:	b1f0      	cbz	r0, 8016d74 <create_topic+0x84>
 8016d36:	4f14      	ldr	r7, [pc, #80]	@ (8016d88 <create_topic+0x98>)
 8016d38:	4630      	mov	r0, r6
 8016d3a:	2264      	movs	r2, #100	@ 0x64
 8016d3c:	4639      	mov	r1, r7
 8016d3e:	f7f9 f961 	bl	8010004 <generate_type_name>
 8016d42:	b1b8      	cbz	r0, 8016d74 <create_topic+0x84>
 8016d44:	6928      	ldr	r0, [r5, #16]
 8016d46:	2306      	movs	r3, #6
 8016d48:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8016d4c:	f8cd 8000 	str.w	r8, [sp]
 8016d50:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8016d54:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016d58:	6811      	ldr	r1, [r2, #0]
 8016d5a:	696b      	ldr	r3, [r5, #20]
 8016d5c:	6922      	ldr	r2, [r4, #16]
 8016d5e:	f7f9 fc5b 	bl	8010618 <uxr_buffer_create_topic_bin>
 8016d62:	4602      	mov	r2, r0
 8016d64:	6928      	ldr	r0, [r5, #16]
 8016d66:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016d6a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016d6e:	f7f9 f879 	bl	800fe64 <run_xrce_session>
 8016d72:	b918      	cbnz	r0, 8016d7c <create_topic+0x8c>
 8016d74:	4620      	mov	r0, r4
 8016d76:	f7f8 ff75 	bl	800fc64 <rmw_uxrce_fini_topic_memory>
 8016d7a:	2400      	movs	r4, #0
 8016d7c:	4620      	mov	r0, r4
 8016d7e:	b004      	add	sp, #16
 8016d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d84:	2000b114 	.word	0x2000b114
 8016d88:	2000b18c 	.word	0x2000b18c
 8016d8c:	2000b150 	.word	0x2000b150

08016d90 <destroy_topic>:
 8016d90:	b538      	push	{r3, r4, r5, lr}
 8016d92:	6985      	ldr	r5, [r0, #24]
 8016d94:	b1d5      	cbz	r5, 8016dcc <destroy_topic+0x3c>
 8016d96:	4604      	mov	r4, r0
 8016d98:	6928      	ldr	r0, [r5, #16]
 8016d9a:	6922      	ldr	r2, [r4, #16]
 8016d9c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016da0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016da4:	6819      	ldr	r1, [r3, #0]
 8016da6:	f7f9 fbb9 	bl	801051c <uxr_buffer_delete_entity>
 8016daa:	4602      	mov	r2, r0
 8016dac:	6928      	ldr	r0, [r5, #16]
 8016dae:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016db2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016db6:	f7f9 f855 	bl	800fe64 <run_xrce_session>
 8016dba:	2800      	cmp	r0, #0
 8016dbc:	4620      	mov	r0, r4
 8016dbe:	bf14      	ite	ne
 8016dc0:	2400      	movne	r4, #0
 8016dc2:	2402      	moveq	r4, #2
 8016dc4:	f7f8 ff4e 	bl	800fc64 <rmw_uxrce_fini_topic_memory>
 8016dc8:	4620      	mov	r0, r4
 8016dca:	bd38      	pop	{r3, r4, r5, pc}
 8016dcc:	2401      	movs	r4, #1
 8016dce:	4620      	mov	r0, r4
 8016dd0:	bd38      	pop	{r3, r4, r5, pc}
 8016dd2:	bf00      	nop

08016dd4 <rmw_take_with_info>:
 8016dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016dd6:	4604      	mov	r4, r0
 8016dd8:	6800      	ldr	r0, [r0, #0]
 8016dda:	b089      	sub	sp, #36	@ 0x24
 8016ddc:	460f      	mov	r7, r1
 8016dde:	4615      	mov	r5, r2
 8016de0:	b128      	cbz	r0, 8016dee <rmw_take_with_info+0x1a>
 8016de2:	4b24      	ldr	r3, [pc, #144]	@ (8016e74 <rmw_take_with_info+0xa0>)
 8016de4:	6819      	ldr	r1, [r3, #0]
 8016de6:	f7e9 fa1b 	bl	8000220 <strcmp>
 8016dea:	2800      	cmp	r0, #0
 8016dec:	d13e      	bne.n	8016e6c <rmw_take_with_info+0x98>
 8016dee:	b305      	cbz	r5, 8016e32 <rmw_take_with_info+0x5e>
 8016df0:	6864      	ldr	r4, [r4, #4]
 8016df2:	2300      	movs	r3, #0
 8016df4:	702b      	strb	r3, [r5, #0]
 8016df6:	f7f8 ffb7 	bl	800fd68 <rmw_uxrce_clean_expired_static_input_buffer>
 8016dfa:	4620      	mov	r0, r4
 8016dfc:	f7f8 ff8e 	bl	800fd1c <rmw_uxrce_find_static_input_buffer_by_owner>
 8016e00:	4606      	mov	r6, r0
 8016e02:	b1f0      	cbz	r0, 8016e42 <rmw_take_with_info+0x6e>
 8016e04:	6881      	ldr	r1, [r0, #8]
 8016e06:	4668      	mov	r0, sp
 8016e08:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016e0c:	3110      	adds	r1, #16
 8016e0e:	f7f5 fa2f 	bl	800c270 <ucdr_init_buffer>
 8016e12:	69a3      	ldr	r3, [r4, #24]
 8016e14:	4639      	mov	r1, r7
 8016e16:	68db      	ldr	r3, [r3, #12]
 8016e18:	4668      	mov	r0, sp
 8016e1a:	4798      	blx	r3
 8016e1c:	4631      	mov	r1, r6
 8016e1e:	4604      	mov	r4, r0
 8016e20:	4815      	ldr	r0, [pc, #84]	@ (8016e78 <rmw_take_with_info+0xa4>)
 8016e22:	f7ff ff29 	bl	8016c78 <put_memory>
 8016e26:	702c      	strb	r4, [r5, #0]
 8016e28:	f084 0001 	eor.w	r0, r4, #1
 8016e2c:	b2c0      	uxtb	r0, r0
 8016e2e:	b009      	add	sp, #36	@ 0x24
 8016e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e32:	6864      	ldr	r4, [r4, #4]
 8016e34:	f7f8 ff98 	bl	800fd68 <rmw_uxrce_clean_expired_static_input_buffer>
 8016e38:	4620      	mov	r0, r4
 8016e3a:	f7f8 ff6f 	bl	800fd1c <rmw_uxrce_find_static_input_buffer_by_owner>
 8016e3e:	4605      	mov	r5, r0
 8016e40:	b910      	cbnz	r0, 8016e48 <rmw_take_with_info+0x74>
 8016e42:	2001      	movs	r0, #1
 8016e44:	b009      	add	sp, #36	@ 0x24
 8016e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e48:	68a9      	ldr	r1, [r5, #8]
 8016e4a:	4668      	mov	r0, sp
 8016e4c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016e50:	3110      	adds	r1, #16
 8016e52:	f7f5 fa0d 	bl	800c270 <ucdr_init_buffer>
 8016e56:	69a3      	ldr	r3, [r4, #24]
 8016e58:	4639      	mov	r1, r7
 8016e5a:	68db      	ldr	r3, [r3, #12]
 8016e5c:	4668      	mov	r0, sp
 8016e5e:	4798      	blx	r3
 8016e60:	4629      	mov	r1, r5
 8016e62:	4604      	mov	r4, r0
 8016e64:	4804      	ldr	r0, [pc, #16]	@ (8016e78 <rmw_take_with_info+0xa4>)
 8016e66:	f7ff ff07 	bl	8016c78 <put_memory>
 8016e6a:	e7dd      	b.n	8016e28 <rmw_take_with_info+0x54>
 8016e6c:	200c      	movs	r0, #12
 8016e6e:	b009      	add	sp, #36	@ 0x24
 8016e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e72:	bf00      	nop
 8016e74:	0801a924 	.word	0x0801a924
 8016e78:	2000b0f4 	.word	0x2000b0f4

08016e7c <rmw_trigger_guard_condition>:
 8016e7c:	b160      	cbz	r0, 8016e98 <rmw_trigger_guard_condition+0x1c>
 8016e7e:	b510      	push	{r4, lr}
 8016e80:	4604      	mov	r4, r0
 8016e82:	6800      	ldr	r0, [r0, #0]
 8016e84:	f7f9 f908 	bl	8010098 <is_uxrce_rmw_identifier_valid>
 8016e88:	b908      	cbnz	r0, 8016e8e <rmw_trigger_guard_condition+0x12>
 8016e8a:	2001      	movs	r0, #1
 8016e8c:	bd10      	pop	{r4, pc}
 8016e8e:	6863      	ldr	r3, [r4, #4]
 8016e90:	2201      	movs	r2, #1
 8016e92:	741a      	strb	r2, [r3, #16]
 8016e94:	2000      	movs	r0, #0
 8016e96:	bd10      	pop	{r4, pc}
 8016e98:	2001      	movs	r0, #1
 8016e9a:	4770      	bx	lr

08016e9c <rmw_wait>:
 8016e9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ea0:	b089      	sub	sp, #36	@ 0x24
 8016ea2:	4605      	mov	r5, r0
 8016ea4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8016ea6:	460e      	mov	r6, r1
 8016ea8:	4698      	mov	r8, r3
 8016eaa:	4691      	mov	r9, r2
 8016eac:	2a00      	cmp	r2, #0
 8016eae:	f000 810a 	beq.w	80170c6 <rmw_wait+0x22a>
 8016eb2:	b16c      	cbz	r4, 8016ed0 <rmw_wait+0x34>
 8016eb4:	4bae      	ldr	r3, [pc, #696]	@ (8017170 <rmw_wait+0x2d4>)
 8016eb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016eb8:	af04      	add	r7, sp, #16
 8016eba:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8016ebe:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016ec2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016ec6:	f7ff fd53 	bl	8016970 <rmw_time_equal>
 8016eca:	2800      	cmp	r0, #0
 8016ecc:	f000 8127 	beq.w	801711e <rmw_wait+0x282>
 8016ed0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016ed4:	f7f8 ff48 	bl	800fd68 <rmw_uxrce_clean_expired_static_input_buffer>
 8016ed8:	4ba6      	ldr	r3, [pc, #664]	@ (8017174 <rmw_wait+0x2d8>)
 8016eda:	681c      	ldr	r4, [r3, #0]
 8016edc:	b14c      	cbz	r4, 8016ef2 <rmw_wait+0x56>
 8016ede:	4623      	mov	r3, r4
 8016ee0:	2100      	movs	r1, #0
 8016ee2:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8016ee6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016eea:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d1f7      	bne.n	8016ee2 <rmw_wait+0x46>
 8016ef2:	f1b9 0f00 	cmp.w	r9, #0
 8016ef6:	d011      	beq.n	8016f1c <rmw_wait+0x80>
 8016ef8:	f8d9 1000 	ldr.w	r1, [r9]
 8016efc:	b171      	cbz	r1, 8016f1c <rmw_wait+0x80>
 8016efe:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8016f02:	2300      	movs	r3, #0
 8016f04:	2001      	movs	r0, #1
 8016f06:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016f0a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016f0c:	6912      	ldr	r2, [r2, #16]
 8016f0e:	3301      	adds	r3, #1
 8016f10:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016f14:	4299      	cmp	r1, r3
 8016f16:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016f1a:	d1f4      	bne.n	8016f06 <rmw_wait+0x6a>
 8016f1c:	f1b8 0f00 	cmp.w	r8, #0
 8016f20:	d011      	beq.n	8016f46 <rmw_wait+0xaa>
 8016f22:	f8d8 1000 	ldr.w	r1, [r8]
 8016f26:	b171      	cbz	r1, 8016f46 <rmw_wait+0xaa>
 8016f28:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8016f2c:	2300      	movs	r3, #0
 8016f2e:	2001      	movs	r0, #1
 8016f30:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016f34:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016f36:	6912      	ldr	r2, [r2, #16]
 8016f38:	3301      	adds	r3, #1
 8016f3a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016f3e:	4299      	cmp	r1, r3
 8016f40:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016f44:	d1f4      	bne.n	8016f30 <rmw_wait+0x94>
 8016f46:	b185      	cbz	r5, 8016f6a <rmw_wait+0xce>
 8016f48:	6829      	ldr	r1, [r5, #0]
 8016f4a:	b171      	cbz	r1, 8016f6a <rmw_wait+0xce>
 8016f4c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8016f50:	2300      	movs	r3, #0
 8016f52:	2001      	movs	r0, #1
 8016f54:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016f58:	6a12      	ldr	r2, [r2, #32]
 8016f5a:	6912      	ldr	r2, [r2, #16]
 8016f5c:	3301      	adds	r3, #1
 8016f5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016f62:	4299      	cmp	r1, r3
 8016f64:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016f68:	d1f4      	bne.n	8016f54 <rmw_wait+0xb8>
 8016f6a:	b34c      	cbz	r4, 8016fc0 <rmw_wait+0x124>
 8016f6c:	4622      	mov	r2, r4
 8016f6e:	2300      	movs	r3, #0
 8016f70:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8016f74:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8016f78:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8016f7c:	440b      	add	r3, r1
 8016f7e:	b2db      	uxtb	r3, r3
 8016f80:	2a00      	cmp	r2, #0
 8016f82:	d1f5      	bne.n	8016f70 <rmw_wait+0xd4>
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	f000 8084 	beq.w	8017092 <rmw_wait+0x1f6>
 8016f8a:	1c7a      	adds	r2, r7, #1
 8016f8c:	d00d      	beq.n	8016faa <rmw_wait+0x10e>
 8016f8e:	ee07 7a90 	vmov	s15, r7
 8016f92:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016f96:	ee07 3a90 	vmov	s15, r3
 8016f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016fa2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8016fa6:	ee17 7a90 	vmov	r7, s15
 8016faa:	68a0      	ldr	r0, [r4, #8]
 8016fac:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8016fb0:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	f040 8090 	bne.w	80170da <rmw_wait+0x23e>
 8016fba:	6864      	ldr	r4, [r4, #4]
 8016fbc:	2c00      	cmp	r4, #0
 8016fbe:	d1f4      	bne.n	8016faa <rmw_wait+0x10e>
 8016fc0:	f1b9 0f00 	cmp.w	r9, #0
 8016fc4:	f000 80bc 	beq.w	8017140 <rmw_wait+0x2a4>
 8016fc8:	f8d9 7000 	ldr.w	r7, [r9]
 8016fcc:	2f00      	cmp	r7, #0
 8016fce:	f000 808e 	beq.w	80170ee <rmw_wait+0x252>
 8016fd2:	2400      	movs	r4, #0
 8016fd4:	4627      	mov	r7, r4
 8016fd6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016fda:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016fde:	f7f8 fe9d 	bl	800fd1c <rmw_uxrce_find_static_input_buffer_by_owner>
 8016fe2:	2800      	cmp	r0, #0
 8016fe4:	d05f      	beq.n	80170a6 <rmw_wait+0x20a>
 8016fe6:	f8d9 3000 	ldr.w	r3, [r9]
 8016fea:	3401      	adds	r4, #1
 8016fec:	42a3      	cmp	r3, r4
 8016fee:	f04f 0701 	mov.w	r7, #1
 8016ff2:	d8f0      	bhi.n	8016fd6 <rmw_wait+0x13a>
 8016ff4:	f1b8 0f00 	cmp.w	r8, #0
 8016ff8:	d012      	beq.n	8017020 <rmw_wait+0x184>
 8016ffa:	f8d8 3000 	ldr.w	r3, [r8]
 8016ffe:	b17b      	cbz	r3, 8017020 <rmw_wait+0x184>
 8017000:	2400      	movs	r4, #0
 8017002:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017006:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801700a:	f7f8 fe87 	bl	800fd1c <rmw_uxrce_find_static_input_buffer_by_owner>
 801700e:	2800      	cmp	r0, #0
 8017010:	d051      	beq.n	80170b6 <rmw_wait+0x21a>
 8017012:	f8d8 3000 	ldr.w	r3, [r8]
 8017016:	3401      	adds	r4, #1
 8017018:	42a3      	cmp	r3, r4
 801701a:	f04f 0701 	mov.w	r7, #1
 801701e:	d8f0      	bhi.n	8017002 <rmw_wait+0x166>
 8017020:	b1dd      	cbz	r5, 801705a <rmw_wait+0x1be>
 8017022:	682b      	ldr	r3, [r5, #0]
 8017024:	b1cb      	cbz	r3, 801705a <rmw_wait+0x1be>
 8017026:	2400      	movs	r4, #0
 8017028:	686b      	ldr	r3, [r5, #4]
 801702a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801702e:	f7f8 fe75 	bl	800fd1c <rmw_uxrce_find_static_input_buffer_by_owner>
 8017032:	b158      	cbz	r0, 801704c <rmw_wait+0x1b0>
 8017034:	682b      	ldr	r3, [r5, #0]
 8017036:	3401      	adds	r4, #1
 8017038:	42a3      	cmp	r3, r4
 801703a:	d969      	bls.n	8017110 <rmw_wait+0x274>
 801703c:	686b      	ldr	r3, [r5, #4]
 801703e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017042:	2701      	movs	r7, #1
 8017044:	f7f8 fe6a 	bl	800fd1c <rmw_uxrce_find_static_input_buffer_by_owner>
 8017048:	2800      	cmp	r0, #0
 801704a:	d1f3      	bne.n	8017034 <rmw_wait+0x198>
 801704c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8017050:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017054:	3401      	adds	r4, #1
 8017056:	42a3      	cmp	r3, r4
 8017058:	d8e6      	bhi.n	8017028 <rmw_wait+0x18c>
 801705a:	b1a6      	cbz	r6, 8017086 <rmw_wait+0x1ea>
 801705c:	6834      	ldr	r4, [r6, #0]
 801705e:	b194      	cbz	r4, 8017086 <rmw_wait+0x1ea>
 8017060:	2300      	movs	r3, #0
 8017062:	461d      	mov	r5, r3
 8017064:	e004      	b.n	8017070 <rmw_wait+0x1d4>
 8017066:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801706a:	3301      	adds	r3, #1
 801706c:	42a3      	cmp	r3, r4
 801706e:	d00a      	beq.n	8017086 <rmw_wait+0x1ea>
 8017070:	6870      	ldr	r0, [r6, #4]
 8017072:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8017076:	7c0a      	ldrb	r2, [r1, #16]
 8017078:	2a00      	cmp	r2, #0
 801707a:	d0f4      	beq.n	8017066 <rmw_wait+0x1ca>
 801707c:	3301      	adds	r3, #1
 801707e:	42a3      	cmp	r3, r4
 8017080:	740d      	strb	r5, [r1, #16]
 8017082:	4617      	mov	r7, r2
 8017084:	d1f4      	bne.n	8017070 <rmw_wait+0x1d4>
 8017086:	2f00      	cmp	r7, #0
 8017088:	d03e      	beq.n	8017108 <rmw_wait+0x26c>
 801708a:	2000      	movs	r0, #0
 801708c:	b009      	add	sp, #36	@ 0x24
 801708e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017092:	68a0      	ldr	r0, [r4, #8]
 8017094:	2100      	movs	r1, #0
 8017096:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801709a:	f7fa fa9b 	bl	80115d4 <uxr_run_session_timeout>
 801709e:	6864      	ldr	r4, [r4, #4]
 80170a0:	2c00      	cmp	r4, #0
 80170a2:	d1f6      	bne.n	8017092 <rmw_wait+0x1f6>
 80170a4:	e78c      	b.n	8016fc0 <rmw_wait+0x124>
 80170a6:	e9d9 3200 	ldrd	r3, r2, [r9]
 80170aa:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80170ae:	3401      	adds	r4, #1
 80170b0:	42a3      	cmp	r3, r4
 80170b2:	d890      	bhi.n	8016fd6 <rmw_wait+0x13a>
 80170b4:	e79e      	b.n	8016ff4 <rmw_wait+0x158>
 80170b6:	e9d8 3200 	ldrd	r3, r2, [r8]
 80170ba:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80170be:	3401      	adds	r4, #1
 80170c0:	429c      	cmp	r4, r3
 80170c2:	d39e      	bcc.n	8017002 <rmw_wait+0x166>
 80170c4:	e7ac      	b.n	8017020 <rmw_wait+0x184>
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	f47f aef3 	bne.w	8016eb2 <rmw_wait+0x16>
 80170cc:	2800      	cmp	r0, #0
 80170ce:	f47f aef0 	bne.w	8016eb2 <rmw_wait+0x16>
 80170d2:	2900      	cmp	r1, #0
 80170d4:	f47f aeed 	bne.w	8016eb2 <rmw_wait+0x16>
 80170d8:	e7d7      	b.n	801708a <rmw_wait+0x1ee>
 80170da:	4639      	mov	r1, r7
 80170dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80170e0:	f7fa fa92 	bl	8011608 <uxr_run_session_until_data>
 80170e4:	6864      	ldr	r4, [r4, #4]
 80170e6:	2c00      	cmp	r4, #0
 80170e8:	f47f af5f 	bne.w	8016faa <rmw_wait+0x10e>
 80170ec:	e768      	b.n	8016fc0 <rmw_wait+0x124>
 80170ee:	f1b8 0f00 	cmp.w	r8, #0
 80170f2:	d032      	beq.n	801715a <rmw_wait+0x2be>
 80170f4:	f8d8 3000 	ldr.w	r3, [r8]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d181      	bne.n	8017000 <rmw_wait+0x164>
 80170fc:	461f      	mov	r7, r3
 80170fe:	2d00      	cmp	r5, #0
 8017100:	d18f      	bne.n	8017022 <rmw_wait+0x186>
 8017102:	462f      	mov	r7, r5
 8017104:	2e00      	cmp	r6, #0
 8017106:	d1a9      	bne.n	801705c <rmw_wait+0x1c0>
 8017108:	2002      	movs	r0, #2
 801710a:	b009      	add	sp, #36	@ 0x24
 801710c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017110:	2e00      	cmp	r6, #0
 8017112:	d0ba      	beq.n	801708a <rmw_wait+0x1ee>
 8017114:	6834      	ldr	r4, [r6, #0]
 8017116:	2701      	movs	r7, #1
 8017118:	2c00      	cmp	r4, #0
 801711a:	d1a1      	bne.n	8017060 <rmw_wait+0x1c4>
 801711c:	e7b5      	b.n	801708a <rmw_wait+0x1ee>
 801711e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017122:	f7ff fc79 	bl	8016a18 <rmw_time_total_nsec>
 8017126:	2300      	movs	r3, #0
 8017128:	4a13      	ldr	r2, [pc, #76]	@ (8017178 <rmw_wait+0x2dc>)
 801712a:	f7e9 fb3d 	bl	80007a8 <__aeabi_uldivmod>
 801712e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8017132:	f171 0300 	sbcs.w	r3, r1, #0
 8017136:	4607      	mov	r7, r0
 8017138:	bfa8      	it	ge
 801713a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801713e:	e6c9      	b.n	8016ed4 <rmw_wait+0x38>
 8017140:	f1b8 0f00 	cmp.w	r8, #0
 8017144:	d009      	beq.n	801715a <rmw_wait+0x2be>
 8017146:	f8d8 3000 	ldr.w	r3, [r8]
 801714a:	464f      	mov	r7, r9
 801714c:	2b00      	cmp	r3, #0
 801714e:	f47f af57 	bne.w	8017000 <rmw_wait+0x164>
 8017152:	2d00      	cmp	r5, #0
 8017154:	f47f af65 	bne.w	8017022 <rmw_wait+0x186>
 8017158:	e7d3      	b.n	8017102 <rmw_wait+0x266>
 801715a:	b17d      	cbz	r5, 801717c <rmw_wait+0x2e0>
 801715c:	682b      	ldr	r3, [r5, #0]
 801715e:	4647      	mov	r7, r8
 8017160:	2b00      	cmp	r3, #0
 8017162:	f47f af60 	bne.w	8017026 <rmw_wait+0x18a>
 8017166:	2e00      	cmp	r6, #0
 8017168:	f47f af78 	bne.w	801705c <rmw_wait+0x1c0>
 801716c:	e7cc      	b.n	8017108 <rmw_wait+0x26c>
 801716e:	bf00      	nop
 8017170:	08019940 	.word	0x08019940
 8017174:	2000b0e4 	.word	0x2000b0e4
 8017178:	000f4240 	.word	0x000f4240
 801717c:	2e00      	cmp	r6, #0
 801717e:	d0c3      	beq.n	8017108 <rmw_wait+0x26c>
 8017180:	6834      	ldr	r4, [r6, #0]
 8017182:	462f      	mov	r7, r5
 8017184:	2c00      	cmp	r4, #0
 8017186:	f47f af6b 	bne.w	8017060 <rmw_wait+0x1c4>
 801718a:	e7bd      	b.n	8017108 <rmw_wait+0x26c>

0801718c <rmw_create_wait_set>:
 801718c:	b508      	push	{r3, lr}
 801718e:	4803      	ldr	r0, [pc, #12]	@ (801719c <rmw_create_wait_set+0x10>)
 8017190:	f7ff fd62 	bl	8016c58 <get_memory>
 8017194:	b108      	cbz	r0, 801719a <rmw_create_wait_set+0xe>
 8017196:	6880      	ldr	r0, [r0, #8]
 8017198:	3010      	adds	r0, #16
 801719a:	bd08      	pop	{r3, pc}
 801719c:	2000b124 	.word	0x2000b124

080171a0 <rmw_destroy_wait_set>:
 80171a0:	b508      	push	{r3, lr}
 80171a2:	4b08      	ldr	r3, [pc, #32]	@ (80171c4 <rmw_destroy_wait_set+0x24>)
 80171a4:	6819      	ldr	r1, [r3, #0]
 80171a6:	b911      	cbnz	r1, 80171ae <rmw_destroy_wait_set+0xe>
 80171a8:	e00a      	b.n	80171c0 <rmw_destroy_wait_set+0x20>
 80171aa:	6849      	ldr	r1, [r1, #4]
 80171ac:	b141      	cbz	r1, 80171c0 <rmw_destroy_wait_set+0x20>
 80171ae:	688b      	ldr	r3, [r1, #8]
 80171b0:	3310      	adds	r3, #16
 80171b2:	4298      	cmp	r0, r3
 80171b4:	d1f9      	bne.n	80171aa <rmw_destroy_wait_set+0xa>
 80171b6:	4803      	ldr	r0, [pc, #12]	@ (80171c4 <rmw_destroy_wait_set+0x24>)
 80171b8:	f7ff fd5e 	bl	8016c78 <put_memory>
 80171bc:	2000      	movs	r0, #0
 80171be:	bd08      	pop	{r3, pc}
 80171c0:	2001      	movs	r0, #1
 80171c2:	bd08      	pop	{r3, pc}
 80171c4:	2000b124 	.word	0x2000b124

080171c8 <rmw_uros_epoch_nanos>:
 80171c8:	4b05      	ldr	r3, [pc, #20]	@ (80171e0 <rmw_uros_epoch_nanos+0x18>)
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	b123      	cbz	r3, 80171d8 <rmw_uros_epoch_nanos+0x10>
 80171ce:	6898      	ldr	r0, [r3, #8]
 80171d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80171d4:	f7f9 be6e 	b.w	8010eb4 <uxr_epoch_nanos>
 80171d8:	2000      	movs	r0, #0
 80171da:	2100      	movs	r1, #0
 80171dc:	4770      	bx	lr
 80171de:	bf00      	nop
 80171e0:	2000b0e4 	.word	0x2000b0e4

080171e4 <rosidl_runtime_c__String__init>:
 80171e4:	b510      	push	{r4, lr}
 80171e6:	4604      	mov	r4, r0
 80171e8:	b086      	sub	sp, #24
 80171ea:	b170      	cbz	r0, 801720a <rosidl_runtime_c__String__init+0x26>
 80171ec:	a801      	add	r0, sp, #4
 80171ee:	f7f6 fdaf 	bl	800dd50 <rcutils_get_default_allocator>
 80171f2:	9b01      	ldr	r3, [sp, #4]
 80171f4:	9905      	ldr	r1, [sp, #20]
 80171f6:	2001      	movs	r0, #1
 80171f8:	4798      	blx	r3
 80171fa:	6020      	str	r0, [r4, #0]
 80171fc:	b128      	cbz	r0, 801720a <rosidl_runtime_c__String__init+0x26>
 80171fe:	2100      	movs	r1, #0
 8017200:	2201      	movs	r2, #1
 8017202:	7001      	strb	r1, [r0, #0]
 8017204:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8017208:	4610      	mov	r0, r2
 801720a:	b006      	add	sp, #24
 801720c:	bd10      	pop	{r4, pc}
 801720e:	bf00      	nop

08017210 <rosidl_runtime_c__String__fini>:
 8017210:	b320      	cbz	r0, 801725c <rosidl_runtime_c__String__fini+0x4c>
 8017212:	b510      	push	{r4, lr}
 8017214:	6803      	ldr	r3, [r0, #0]
 8017216:	b086      	sub	sp, #24
 8017218:	4604      	mov	r4, r0
 801721a:	b173      	cbz	r3, 801723a <rosidl_runtime_c__String__fini+0x2a>
 801721c:	6883      	ldr	r3, [r0, #8]
 801721e:	b1f3      	cbz	r3, 801725e <rosidl_runtime_c__String__fini+0x4e>
 8017220:	a801      	add	r0, sp, #4
 8017222:	f7f6 fd95 	bl	800dd50 <rcutils_get_default_allocator>
 8017226:	9b02      	ldr	r3, [sp, #8]
 8017228:	9905      	ldr	r1, [sp, #20]
 801722a:	6820      	ldr	r0, [r4, #0]
 801722c:	4798      	blx	r3
 801722e:	2300      	movs	r3, #0
 8017230:	e9c4 3300 	strd	r3, r3, [r4]
 8017234:	60a3      	str	r3, [r4, #8]
 8017236:	b006      	add	sp, #24
 8017238:	bd10      	pop	{r4, pc}
 801723a:	6843      	ldr	r3, [r0, #4]
 801723c:	b9db      	cbnz	r3, 8017276 <rosidl_runtime_c__String__fini+0x66>
 801723e:	6883      	ldr	r3, [r0, #8]
 8017240:	2b00      	cmp	r3, #0
 8017242:	d0f8      	beq.n	8017236 <rosidl_runtime_c__String__fini+0x26>
 8017244:	4b12      	ldr	r3, [pc, #72]	@ (8017290 <rosidl_runtime_c__String__fini+0x80>)
 8017246:	4813      	ldr	r0, [pc, #76]	@ (8017294 <rosidl_runtime_c__String__fini+0x84>)
 8017248:	681b      	ldr	r3, [r3, #0]
 801724a:	2251      	movs	r2, #81	@ 0x51
 801724c:	68db      	ldr	r3, [r3, #12]
 801724e:	2101      	movs	r1, #1
 8017250:	f001 fa90 	bl	8018774 <fwrite>
 8017254:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017258:	f000 ff4c 	bl	80180f4 <exit>
 801725c:	4770      	bx	lr
 801725e:	4b0c      	ldr	r3, [pc, #48]	@ (8017290 <rosidl_runtime_c__String__fini+0x80>)
 8017260:	480d      	ldr	r0, [pc, #52]	@ (8017298 <rosidl_runtime_c__String__fini+0x88>)
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	224c      	movs	r2, #76	@ 0x4c
 8017266:	68db      	ldr	r3, [r3, #12]
 8017268:	2101      	movs	r1, #1
 801726a:	f001 fa83 	bl	8018774 <fwrite>
 801726e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017272:	f000 ff3f 	bl	80180f4 <exit>
 8017276:	4b06      	ldr	r3, [pc, #24]	@ (8017290 <rosidl_runtime_c__String__fini+0x80>)
 8017278:	4808      	ldr	r0, [pc, #32]	@ (801729c <rosidl_runtime_c__String__fini+0x8c>)
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	224e      	movs	r2, #78	@ 0x4e
 801727e:	68db      	ldr	r3, [r3, #12]
 8017280:	2101      	movs	r1, #1
 8017282:	f001 fa77 	bl	8018774 <fwrite>
 8017286:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801728a:	f000 ff33 	bl	80180f4 <exit>
 801728e:	bf00      	nop
 8017290:	200003b0 	.word	0x200003b0
 8017294:	0801a9c8 	.word	0x0801a9c8
 8017298:	0801a928 	.word	0x0801a928
 801729c:	0801a978 	.word	0x0801a978

080172a0 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 80172a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172a4:	6805      	ldr	r5, [r0, #0]
 80172a6:	4604      	mov	r4, r0
 80172a8:	4628      	mov	r0, r5
 80172aa:	460e      	mov	r6, r1
 80172ac:	f7e8 ffb8 	bl	8000220 <strcmp>
 80172b0:	b1c8      	cbz	r0, 80172e6 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 80172b2:	4b11      	ldr	r3, [pc, #68]	@ (80172f8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	429d      	cmp	r5, r3
 80172b8:	d112      	bne.n	80172e0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 80172ba:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80172be:	f8d8 4000 	ldr.w	r4, [r8]
 80172c2:	b16c      	cbz	r4, 80172e0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 80172c4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80172c8:	2700      	movs	r7, #0
 80172ca:	3d04      	subs	r5, #4
 80172cc:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80172d0:	4631      	mov	r1, r6
 80172d2:	f7e8 ffa5 	bl	8000220 <strcmp>
 80172d6:	00bb      	lsls	r3, r7, #2
 80172d8:	b140      	cbz	r0, 80172ec <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 80172da:	3701      	adds	r7, #1
 80172dc:	42bc      	cmp	r4, r7
 80172de:	d1f5      	bne.n	80172cc <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 80172e0:	2000      	movs	r0, #0
 80172e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172e6:	4620      	mov	r0, r4
 80172e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172ec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80172f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80172f4:	58d3      	ldr	r3, [r2, r3]
 80172f6:	4718      	bx	r3
 80172f8:	200001d0 	.word	0x200001d0

080172fc <ucdr_serialize_endian_array_char>:
 80172fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017300:	4619      	mov	r1, r3
 8017302:	461f      	mov	r7, r3
 8017304:	4605      	mov	r5, r0
 8017306:	4690      	mov	r8, r2
 8017308:	f7f4 ff5e 	bl	800c1c8 <ucdr_check_buffer_available_for>
 801730c:	b9e0      	cbnz	r0, 8017348 <ucdr_serialize_endian_array_char+0x4c>
 801730e:	463e      	mov	r6, r7
 8017310:	e009      	b.n	8017326 <ucdr_serialize_endian_array_char+0x2a>
 8017312:	68a8      	ldr	r0, [r5, #8]
 8017314:	f001 fc85 	bl	8018c22 <memcpy>
 8017318:	68ab      	ldr	r3, [r5, #8]
 801731a:	6928      	ldr	r0, [r5, #16]
 801731c:	4423      	add	r3, r4
 801731e:	4420      	add	r0, r4
 8017320:	1b36      	subs	r6, r6, r4
 8017322:	60ab      	str	r3, [r5, #8]
 8017324:	6128      	str	r0, [r5, #16]
 8017326:	4631      	mov	r1, r6
 8017328:	2201      	movs	r2, #1
 801732a:	4628      	mov	r0, r5
 801732c:	f7f4 ffd4 	bl	800c2d8 <ucdr_check_final_buffer_behavior_array>
 8017330:	1bb9      	subs	r1, r7, r6
 8017332:	4441      	add	r1, r8
 8017334:	4604      	mov	r4, r0
 8017336:	4602      	mov	r2, r0
 8017338:	2800      	cmp	r0, #0
 801733a:	d1ea      	bne.n	8017312 <ucdr_serialize_endian_array_char+0x16>
 801733c:	2301      	movs	r3, #1
 801733e:	7da8      	ldrb	r0, [r5, #22]
 8017340:	756b      	strb	r3, [r5, #21]
 8017342:	4058      	eors	r0, r3
 8017344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017348:	463a      	mov	r2, r7
 801734a:	68a8      	ldr	r0, [r5, #8]
 801734c:	4641      	mov	r1, r8
 801734e:	f001 fc68 	bl	8018c22 <memcpy>
 8017352:	68aa      	ldr	r2, [r5, #8]
 8017354:	692b      	ldr	r3, [r5, #16]
 8017356:	443a      	add	r2, r7
 8017358:	443b      	add	r3, r7
 801735a:	60aa      	str	r2, [r5, #8]
 801735c:	612b      	str	r3, [r5, #16]
 801735e:	e7ed      	b.n	801733c <ucdr_serialize_endian_array_char+0x40>

08017360 <ucdr_deserialize_endian_array_char>:
 8017360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017364:	4619      	mov	r1, r3
 8017366:	461f      	mov	r7, r3
 8017368:	4605      	mov	r5, r0
 801736a:	4690      	mov	r8, r2
 801736c:	f7f4 ff2c 	bl	800c1c8 <ucdr_check_buffer_available_for>
 8017370:	b9e0      	cbnz	r0, 80173ac <ucdr_deserialize_endian_array_char+0x4c>
 8017372:	463e      	mov	r6, r7
 8017374:	e009      	b.n	801738a <ucdr_deserialize_endian_array_char+0x2a>
 8017376:	68a9      	ldr	r1, [r5, #8]
 8017378:	f001 fc53 	bl	8018c22 <memcpy>
 801737c:	68ab      	ldr	r3, [r5, #8]
 801737e:	6928      	ldr	r0, [r5, #16]
 8017380:	4423      	add	r3, r4
 8017382:	4420      	add	r0, r4
 8017384:	1b36      	subs	r6, r6, r4
 8017386:	60ab      	str	r3, [r5, #8]
 8017388:	6128      	str	r0, [r5, #16]
 801738a:	2201      	movs	r2, #1
 801738c:	4631      	mov	r1, r6
 801738e:	4628      	mov	r0, r5
 8017390:	f7f4 ffa2 	bl	800c2d8 <ucdr_check_final_buffer_behavior_array>
 8017394:	4604      	mov	r4, r0
 8017396:	1bb8      	subs	r0, r7, r6
 8017398:	4440      	add	r0, r8
 801739a:	4622      	mov	r2, r4
 801739c:	2c00      	cmp	r4, #0
 801739e:	d1ea      	bne.n	8017376 <ucdr_deserialize_endian_array_char+0x16>
 80173a0:	2301      	movs	r3, #1
 80173a2:	7da8      	ldrb	r0, [r5, #22]
 80173a4:	756b      	strb	r3, [r5, #21]
 80173a6:	4058      	eors	r0, r3
 80173a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173ac:	463a      	mov	r2, r7
 80173ae:	68a9      	ldr	r1, [r5, #8]
 80173b0:	4640      	mov	r0, r8
 80173b2:	f001 fc36 	bl	8018c22 <memcpy>
 80173b6:	68aa      	ldr	r2, [r5, #8]
 80173b8:	692b      	ldr	r3, [r5, #16]
 80173ba:	443a      	add	r2, r7
 80173bc:	443b      	add	r3, r7
 80173be:	60aa      	str	r2, [r5, #8]
 80173c0:	612b      	str	r3, [r5, #16]
 80173c2:	e7ed      	b.n	80173a0 <ucdr_deserialize_endian_array_char+0x40>

080173c4 <ucdr_serialize_array_uint8_t>:
 80173c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173c8:	4688      	mov	r8, r1
 80173ca:	4611      	mov	r1, r2
 80173cc:	4617      	mov	r7, r2
 80173ce:	4605      	mov	r5, r0
 80173d0:	f7f4 fefa 	bl	800c1c8 <ucdr_check_buffer_available_for>
 80173d4:	b9e0      	cbnz	r0, 8017410 <ucdr_serialize_array_uint8_t+0x4c>
 80173d6:	463e      	mov	r6, r7
 80173d8:	e009      	b.n	80173ee <ucdr_serialize_array_uint8_t+0x2a>
 80173da:	68a8      	ldr	r0, [r5, #8]
 80173dc:	f001 fc21 	bl	8018c22 <memcpy>
 80173e0:	68aa      	ldr	r2, [r5, #8]
 80173e2:	692b      	ldr	r3, [r5, #16]
 80173e4:	4422      	add	r2, r4
 80173e6:	4423      	add	r3, r4
 80173e8:	1b36      	subs	r6, r6, r4
 80173ea:	60aa      	str	r2, [r5, #8]
 80173ec:	612b      	str	r3, [r5, #16]
 80173ee:	4631      	mov	r1, r6
 80173f0:	2201      	movs	r2, #1
 80173f2:	4628      	mov	r0, r5
 80173f4:	f7f4 ff70 	bl	800c2d8 <ucdr_check_final_buffer_behavior_array>
 80173f8:	1bb9      	subs	r1, r7, r6
 80173fa:	4441      	add	r1, r8
 80173fc:	4604      	mov	r4, r0
 80173fe:	4602      	mov	r2, r0
 8017400:	2800      	cmp	r0, #0
 8017402:	d1ea      	bne.n	80173da <ucdr_serialize_array_uint8_t+0x16>
 8017404:	2301      	movs	r3, #1
 8017406:	7da8      	ldrb	r0, [r5, #22]
 8017408:	756b      	strb	r3, [r5, #21]
 801740a:	4058      	eors	r0, r3
 801740c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017410:	463a      	mov	r2, r7
 8017412:	68a8      	ldr	r0, [r5, #8]
 8017414:	4641      	mov	r1, r8
 8017416:	f001 fc04 	bl	8018c22 <memcpy>
 801741a:	68aa      	ldr	r2, [r5, #8]
 801741c:	692b      	ldr	r3, [r5, #16]
 801741e:	443a      	add	r2, r7
 8017420:	443b      	add	r3, r7
 8017422:	60aa      	str	r2, [r5, #8]
 8017424:	612b      	str	r3, [r5, #16]
 8017426:	e7ed      	b.n	8017404 <ucdr_serialize_array_uint8_t+0x40>

08017428 <ucdr_serialize_endian_array_uint8_t>:
 8017428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801742c:	4619      	mov	r1, r3
 801742e:	461f      	mov	r7, r3
 8017430:	4605      	mov	r5, r0
 8017432:	4690      	mov	r8, r2
 8017434:	f7f4 fec8 	bl	800c1c8 <ucdr_check_buffer_available_for>
 8017438:	b9e0      	cbnz	r0, 8017474 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801743a:	463e      	mov	r6, r7
 801743c:	e009      	b.n	8017452 <ucdr_serialize_endian_array_uint8_t+0x2a>
 801743e:	68a8      	ldr	r0, [r5, #8]
 8017440:	f001 fbef 	bl	8018c22 <memcpy>
 8017444:	68ab      	ldr	r3, [r5, #8]
 8017446:	6928      	ldr	r0, [r5, #16]
 8017448:	4423      	add	r3, r4
 801744a:	4420      	add	r0, r4
 801744c:	1b36      	subs	r6, r6, r4
 801744e:	60ab      	str	r3, [r5, #8]
 8017450:	6128      	str	r0, [r5, #16]
 8017452:	4631      	mov	r1, r6
 8017454:	2201      	movs	r2, #1
 8017456:	4628      	mov	r0, r5
 8017458:	f7f4 ff3e 	bl	800c2d8 <ucdr_check_final_buffer_behavior_array>
 801745c:	1bb9      	subs	r1, r7, r6
 801745e:	4441      	add	r1, r8
 8017460:	4604      	mov	r4, r0
 8017462:	4602      	mov	r2, r0
 8017464:	2800      	cmp	r0, #0
 8017466:	d1ea      	bne.n	801743e <ucdr_serialize_endian_array_uint8_t+0x16>
 8017468:	2301      	movs	r3, #1
 801746a:	7da8      	ldrb	r0, [r5, #22]
 801746c:	756b      	strb	r3, [r5, #21]
 801746e:	4058      	eors	r0, r3
 8017470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017474:	463a      	mov	r2, r7
 8017476:	68a8      	ldr	r0, [r5, #8]
 8017478:	4641      	mov	r1, r8
 801747a:	f001 fbd2 	bl	8018c22 <memcpy>
 801747e:	68aa      	ldr	r2, [r5, #8]
 8017480:	692b      	ldr	r3, [r5, #16]
 8017482:	443a      	add	r2, r7
 8017484:	443b      	add	r3, r7
 8017486:	60aa      	str	r2, [r5, #8]
 8017488:	612b      	str	r3, [r5, #16]
 801748a:	e7ed      	b.n	8017468 <ucdr_serialize_endian_array_uint8_t+0x40>

0801748c <ucdr_deserialize_array_uint8_t>:
 801748c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017490:	4688      	mov	r8, r1
 8017492:	4611      	mov	r1, r2
 8017494:	4617      	mov	r7, r2
 8017496:	4605      	mov	r5, r0
 8017498:	f7f4 fe96 	bl	800c1c8 <ucdr_check_buffer_available_for>
 801749c:	b9e0      	cbnz	r0, 80174d8 <ucdr_deserialize_array_uint8_t+0x4c>
 801749e:	463e      	mov	r6, r7
 80174a0:	e009      	b.n	80174b6 <ucdr_deserialize_array_uint8_t+0x2a>
 80174a2:	68a9      	ldr	r1, [r5, #8]
 80174a4:	f001 fbbd 	bl	8018c22 <memcpy>
 80174a8:	68aa      	ldr	r2, [r5, #8]
 80174aa:	692b      	ldr	r3, [r5, #16]
 80174ac:	4422      	add	r2, r4
 80174ae:	4423      	add	r3, r4
 80174b0:	1b36      	subs	r6, r6, r4
 80174b2:	60aa      	str	r2, [r5, #8]
 80174b4:	612b      	str	r3, [r5, #16]
 80174b6:	2201      	movs	r2, #1
 80174b8:	4631      	mov	r1, r6
 80174ba:	4628      	mov	r0, r5
 80174bc:	f7f4 ff0c 	bl	800c2d8 <ucdr_check_final_buffer_behavior_array>
 80174c0:	4604      	mov	r4, r0
 80174c2:	1bb8      	subs	r0, r7, r6
 80174c4:	4440      	add	r0, r8
 80174c6:	4622      	mov	r2, r4
 80174c8:	2c00      	cmp	r4, #0
 80174ca:	d1ea      	bne.n	80174a2 <ucdr_deserialize_array_uint8_t+0x16>
 80174cc:	2301      	movs	r3, #1
 80174ce:	7da8      	ldrb	r0, [r5, #22]
 80174d0:	756b      	strb	r3, [r5, #21]
 80174d2:	4058      	eors	r0, r3
 80174d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174d8:	463a      	mov	r2, r7
 80174da:	68a9      	ldr	r1, [r5, #8]
 80174dc:	4640      	mov	r0, r8
 80174de:	f001 fba0 	bl	8018c22 <memcpy>
 80174e2:	68aa      	ldr	r2, [r5, #8]
 80174e4:	692b      	ldr	r3, [r5, #16]
 80174e6:	443a      	add	r2, r7
 80174e8:	443b      	add	r3, r7
 80174ea:	60aa      	str	r2, [r5, #8]
 80174ec:	612b      	str	r3, [r5, #16]
 80174ee:	e7ed      	b.n	80174cc <ucdr_deserialize_array_uint8_t+0x40>

080174f0 <ucdr_deserialize_endian_array_uint8_t>:
 80174f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174f4:	4619      	mov	r1, r3
 80174f6:	461f      	mov	r7, r3
 80174f8:	4605      	mov	r5, r0
 80174fa:	4690      	mov	r8, r2
 80174fc:	f7f4 fe64 	bl	800c1c8 <ucdr_check_buffer_available_for>
 8017500:	b9e0      	cbnz	r0, 801753c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8017502:	463e      	mov	r6, r7
 8017504:	e009      	b.n	801751a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8017506:	68a9      	ldr	r1, [r5, #8]
 8017508:	f001 fb8b 	bl	8018c22 <memcpy>
 801750c:	68ab      	ldr	r3, [r5, #8]
 801750e:	6928      	ldr	r0, [r5, #16]
 8017510:	4423      	add	r3, r4
 8017512:	4420      	add	r0, r4
 8017514:	1b36      	subs	r6, r6, r4
 8017516:	60ab      	str	r3, [r5, #8]
 8017518:	6128      	str	r0, [r5, #16]
 801751a:	2201      	movs	r2, #1
 801751c:	4631      	mov	r1, r6
 801751e:	4628      	mov	r0, r5
 8017520:	f7f4 feda 	bl	800c2d8 <ucdr_check_final_buffer_behavior_array>
 8017524:	4604      	mov	r4, r0
 8017526:	1bb8      	subs	r0, r7, r6
 8017528:	4440      	add	r0, r8
 801752a:	4622      	mov	r2, r4
 801752c:	2c00      	cmp	r4, #0
 801752e:	d1ea      	bne.n	8017506 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8017530:	2301      	movs	r3, #1
 8017532:	7da8      	ldrb	r0, [r5, #22]
 8017534:	756b      	strb	r3, [r5, #21]
 8017536:	4058      	eors	r0, r3
 8017538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801753c:	463a      	mov	r2, r7
 801753e:	68a9      	ldr	r1, [r5, #8]
 8017540:	4640      	mov	r0, r8
 8017542:	f001 fb6e 	bl	8018c22 <memcpy>
 8017546:	68aa      	ldr	r2, [r5, #8]
 8017548:	692b      	ldr	r3, [r5, #16]
 801754a:	443a      	add	r2, r7
 801754c:	443b      	add	r3, r7
 801754e:	60aa      	str	r2, [r5, #8]
 8017550:	612b      	str	r3, [r5, #16]
 8017552:	e7ed      	b.n	8017530 <ucdr_deserialize_endian_array_uint8_t+0x40>

08017554 <ucdr_serialize_string>:
 8017554:	b510      	push	{r4, lr}
 8017556:	b082      	sub	sp, #8
 8017558:	4604      	mov	r4, r0
 801755a:	4608      	mov	r0, r1
 801755c:	9101      	str	r1, [sp, #4]
 801755e:	f7e8 fe69 	bl	8000234 <strlen>
 8017562:	9901      	ldr	r1, [sp, #4]
 8017564:	1c42      	adds	r2, r0, #1
 8017566:	4620      	mov	r0, r4
 8017568:	b002      	add	sp, #8
 801756a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801756e:	f7f8 bf7d 	b.w	801046c <ucdr_serialize_sequence_char>
 8017572:	bf00      	nop

08017574 <ucdr_deserialize_string>:
 8017574:	b500      	push	{lr}
 8017576:	b083      	sub	sp, #12
 8017578:	ab01      	add	r3, sp, #4
 801757a:	f7f8 ff89 	bl	8010490 <ucdr_deserialize_sequence_char>
 801757e:	b003      	add	sp, #12
 8017580:	f85d fb04 	ldr.w	pc, [sp], #4

08017584 <uxr_init_input_best_effort_stream>:
 8017584:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017588:	8003      	strh	r3, [r0, #0]
 801758a:	4770      	bx	lr

0801758c <uxr_reset_input_best_effort_stream>:
 801758c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017590:	8003      	strh	r3, [r0, #0]
 8017592:	4770      	bx	lr

08017594 <uxr_receive_best_effort_message>:
 8017594:	b538      	push	{r3, r4, r5, lr}
 8017596:	4604      	mov	r4, r0
 8017598:	8800      	ldrh	r0, [r0, #0]
 801759a:	460d      	mov	r5, r1
 801759c:	f000 fd42 	bl	8018024 <uxr_seq_num_cmp>
 80175a0:	4603      	mov	r3, r0
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80175a8:	bfb8      	it	lt
 80175aa:	8025      	strhlt	r5, [r4, #0]
 80175ac:	bd38      	pop	{r3, r4, r5, pc}
 80175ae:	bf00      	nop

080175b0 <on_full_input_buffer>:
 80175b0:	b570      	push	{r4, r5, r6, lr}
 80175b2:	4605      	mov	r5, r0
 80175b4:	460c      	mov	r4, r1
 80175b6:	682b      	ldr	r3, [r5, #0]
 80175b8:	6809      	ldr	r1, [r1, #0]
 80175ba:	8920      	ldrh	r0, [r4, #8]
 80175bc:	6862      	ldr	r2, [r4, #4]
 80175be:	fbb2 f2f0 	udiv	r2, r2, r0
 80175c2:	eba3 0c01 	sub.w	ip, r3, r1
 80175c6:	fbbc fcf2 	udiv	ip, ip, r2
 80175ca:	f10c 0c01 	add.w	ip, ip, #1
 80175ce:	fa1f f38c 	uxth.w	r3, ip
 80175d2:	fbb3 f6f0 	udiv	r6, r3, r0
 80175d6:	fb00 3316 	mls	r3, r0, r6, r3
 80175da:	b29b      	uxth	r3, r3
 80175dc:	fb02 f303 	mul.w	r3, r2, r3
 80175e0:	1d18      	adds	r0, r3, #4
 80175e2:	4408      	add	r0, r1
 80175e4:	7d26      	ldrb	r6, [r4, #20]
 80175e6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80175ea:	b116      	cbz	r6, 80175f2 <on_full_input_buffer+0x42>
 80175ec:	2600      	movs	r6, #0
 80175ee:	f840 6c04 	str.w	r6, [r0, #-4]
 80175f2:	2a03      	cmp	r2, #3
 80175f4:	d801      	bhi.n	80175fa <on_full_input_buffer+0x4a>
 80175f6:	2001      	movs	r0, #1
 80175f8:	bd70      	pop	{r4, r5, r6, pc}
 80175fa:	3308      	adds	r3, #8
 80175fc:	4419      	add	r1, r3
 80175fe:	4628      	mov	r0, r5
 8017600:	692b      	ldr	r3, [r5, #16]
 8017602:	3a04      	subs	r2, #4
 8017604:	f7f4 fe2c 	bl	800c260 <ucdr_init_buffer_origin>
 8017608:	4628      	mov	r0, r5
 801760a:	4903      	ldr	r1, [pc, #12]	@ (8017618 <on_full_input_buffer+0x68>)
 801760c:	4622      	mov	r2, r4
 801760e:	f7f4 fe03 	bl	800c218 <ucdr_set_on_full_buffer_callback>
 8017612:	2000      	movs	r0, #0
 8017614:	bd70      	pop	{r4, r5, r6, pc}
 8017616:	bf00      	nop
 8017618:	080175b1 	.word	0x080175b1

0801761c <uxr_init_input_reliable_stream>:
 801761c:	b500      	push	{lr}
 801761e:	e9c0 1200 	strd	r1, r2, [r0]
 8017622:	f04f 0e00 	mov.w	lr, #0
 8017626:	9a01      	ldr	r2, [sp, #4]
 8017628:	8103      	strh	r3, [r0, #8]
 801762a:	6102      	str	r2, [r0, #16]
 801762c:	f880 e014 	strb.w	lr, [r0, #20]
 8017630:	b1d3      	cbz	r3, 8017668 <uxr_init_input_reliable_stream+0x4c>
 8017632:	f8c1 e000 	str.w	lr, [r1]
 8017636:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801763a:	f1bc 0f01 	cmp.w	ip, #1
 801763e:	d913      	bls.n	8017668 <uxr_init_input_reliable_stream+0x4c>
 8017640:	2301      	movs	r3, #1
 8017642:	fbb3 f1fc 	udiv	r1, r3, ip
 8017646:	fb0c 3111 	mls	r1, ip, r1, r3
 801764a:	b289      	uxth	r1, r1
 801764c:	6842      	ldr	r2, [r0, #4]
 801764e:	fbb2 f2fc 	udiv	r2, r2, ip
 8017652:	fb01 f202 	mul.w	r2, r1, r2
 8017656:	6801      	ldr	r1, [r0, #0]
 8017658:	f841 e002 	str.w	lr, [r1, r2]
 801765c:	3301      	adds	r3, #1
 801765e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017662:	b29b      	uxth	r3, r3
 8017664:	459c      	cmp	ip, r3
 8017666:	d8ec      	bhi.n	8017642 <uxr_init_input_reliable_stream+0x26>
 8017668:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801766c:	60c3      	str	r3, [r0, #12]
 801766e:	f85d fb04 	ldr.w	pc, [sp], #4
 8017672:	bf00      	nop

08017674 <uxr_reset_input_reliable_stream>:
 8017674:	8901      	ldrh	r1, [r0, #8]
 8017676:	b1e9      	cbz	r1, 80176b4 <uxr_reset_input_reliable_stream+0x40>
 8017678:	f04f 0c00 	mov.w	ip, #0
 801767c:	b500      	push	{lr}
 801767e:	4663      	mov	r3, ip
 8017680:	46e6      	mov	lr, ip
 8017682:	fbb3 f2f1 	udiv	r2, r3, r1
 8017686:	fb01 3312 	mls	r3, r1, r2, r3
 801768a:	b29b      	uxth	r3, r3
 801768c:	6842      	ldr	r2, [r0, #4]
 801768e:	fbb2 f2f1 	udiv	r2, r2, r1
 8017692:	fb02 f303 	mul.w	r3, r2, r3
 8017696:	6802      	ldr	r2, [r0, #0]
 8017698:	f842 e003 	str.w	lr, [r2, r3]
 801769c:	f10c 0c01 	add.w	ip, ip, #1
 80176a0:	8901      	ldrh	r1, [r0, #8]
 80176a2:	fa1f f38c 	uxth.w	r3, ip
 80176a6:	4299      	cmp	r1, r3
 80176a8:	d8eb      	bhi.n	8017682 <uxr_reset_input_reliable_stream+0xe>
 80176aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80176ae:	60c3      	str	r3, [r0, #12]
 80176b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80176b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80176b8:	60c3      	str	r3, [r0, #12]
 80176ba:	4770      	bx	lr

080176bc <uxr_receive_reliable_message>:
 80176bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80176c0:	4604      	mov	r4, r0
 80176c2:	460d      	mov	r5, r1
 80176c4:	8901      	ldrh	r1, [r0, #8]
 80176c6:	8980      	ldrh	r0, [r0, #12]
 80176c8:	4690      	mov	r8, r2
 80176ca:	461f      	mov	r7, r3
 80176cc:	f000 fca2 	bl	8018014 <uxr_seq_num_add>
 80176d0:	4629      	mov	r1, r5
 80176d2:	4606      	mov	r6, r0
 80176d4:	89a0      	ldrh	r0, [r4, #12]
 80176d6:	f000 fca5 	bl	8018024 <uxr_seq_num_cmp>
 80176da:	2800      	cmp	r0, #0
 80176dc:	db0a      	blt.n	80176f4 <uxr_receive_reliable_message+0x38>
 80176de:	2600      	movs	r6, #0
 80176e0:	89e0      	ldrh	r0, [r4, #14]
 80176e2:	4629      	mov	r1, r5
 80176e4:	f000 fc9e 	bl	8018024 <uxr_seq_num_cmp>
 80176e8:	2800      	cmp	r0, #0
 80176ea:	da00      	bge.n	80176ee <uxr_receive_reliable_message+0x32>
 80176ec:	81e5      	strh	r5, [r4, #14]
 80176ee:	4630      	mov	r0, r6
 80176f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80176f4:	4630      	mov	r0, r6
 80176f6:	4629      	mov	r1, r5
 80176f8:	f000 fc94 	bl	8018024 <uxr_seq_num_cmp>
 80176fc:	2800      	cmp	r0, #0
 80176fe:	dbee      	blt.n	80176de <uxr_receive_reliable_message+0x22>
 8017700:	6923      	ldr	r3, [r4, #16]
 8017702:	4640      	mov	r0, r8
 8017704:	4798      	blx	r3
 8017706:	2101      	movs	r1, #1
 8017708:	4681      	mov	r9, r0
 801770a:	89a0      	ldrh	r0, [r4, #12]
 801770c:	f000 fc82 	bl	8018014 <uxr_seq_num_add>
 8017710:	f1b9 0f00 	cmp.w	r9, #0
 8017714:	d101      	bne.n	801771a <uxr_receive_reliable_message+0x5e>
 8017716:	4285      	cmp	r5, r0
 8017718:	d047      	beq.n	80177aa <uxr_receive_reliable_message+0xee>
 801771a:	8922      	ldrh	r2, [r4, #8]
 801771c:	fbb5 f0f2 	udiv	r0, r5, r2
 8017720:	fb02 5010 	mls	r0, r2, r0, r5
 8017724:	b280      	uxth	r0, r0
 8017726:	6863      	ldr	r3, [r4, #4]
 8017728:	fbb3 f3f2 	udiv	r3, r3, r2
 801772c:	fb00 f303 	mul.w	r3, r0, r3
 8017730:	6820      	ldr	r0, [r4, #0]
 8017732:	3304      	adds	r3, #4
 8017734:	4418      	add	r0, r3
 8017736:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801773a:	2b00      	cmp	r3, #0
 801773c:	d1cf      	bne.n	80176de <uxr_receive_reliable_message+0x22>
 801773e:	4641      	mov	r1, r8
 8017740:	463a      	mov	r2, r7
 8017742:	f001 fa6e 	bl	8018c22 <memcpy>
 8017746:	8921      	ldrh	r1, [r4, #8]
 8017748:	fbb5 f2f1 	udiv	r2, r5, r1
 801774c:	fb01 5212 	mls	r2, r1, r2, r5
 8017750:	b292      	uxth	r2, r2
 8017752:	6863      	ldr	r3, [r4, #4]
 8017754:	fbb3 f3f1 	udiv	r3, r3, r1
 8017758:	fb02 f303 	mul.w	r3, r2, r3
 801775c:	6822      	ldr	r2, [r4, #0]
 801775e:	50d7      	str	r7, [r2, r3]
 8017760:	9a08      	ldr	r2, [sp, #32]
 8017762:	2301      	movs	r3, #1
 8017764:	7013      	strb	r3, [r2, #0]
 8017766:	f1b9 0f00 	cmp.w	r9, #0
 801776a:	d0b8      	beq.n	80176de <uxr_receive_reliable_message+0x22>
 801776c:	89a6      	ldrh	r6, [r4, #12]
 801776e:	4630      	mov	r0, r6
 8017770:	2101      	movs	r1, #1
 8017772:	f000 fc4f 	bl	8018014 <uxr_seq_num_add>
 8017776:	8922      	ldrh	r2, [r4, #8]
 8017778:	6863      	ldr	r3, [r4, #4]
 801777a:	fbb3 f3f2 	udiv	r3, r3, r2
 801777e:	4606      	mov	r6, r0
 8017780:	fbb0 f0f2 	udiv	r0, r0, r2
 8017784:	fb02 6010 	mls	r0, r2, r0, r6
 8017788:	b280      	uxth	r0, r0
 801778a:	fb00 f303 	mul.w	r3, r0, r3
 801778e:	6820      	ldr	r0, [r4, #0]
 8017790:	3304      	adds	r3, #4
 8017792:	4418      	add	r0, r3
 8017794:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017798:	2b00      	cmp	r3, #0
 801779a:	d0a0      	beq.n	80176de <uxr_receive_reliable_message+0x22>
 801779c:	6923      	ldr	r3, [r4, #16]
 801779e:	4798      	blx	r3
 80177a0:	2802      	cmp	r0, #2
 80177a2:	d008      	beq.n	80177b6 <uxr_receive_reliable_message+0xfa>
 80177a4:	2801      	cmp	r0, #1
 80177a6:	d0e2      	beq.n	801776e <uxr_receive_reliable_message+0xb2>
 80177a8:	e799      	b.n	80176de <uxr_receive_reliable_message+0x22>
 80177aa:	9b08      	ldr	r3, [sp, #32]
 80177ac:	81a5      	strh	r5, [r4, #12]
 80177ae:	2601      	movs	r6, #1
 80177b0:	f883 9000 	strb.w	r9, [r3]
 80177b4:	e794      	b.n	80176e0 <uxr_receive_reliable_message+0x24>
 80177b6:	2601      	movs	r6, #1
 80177b8:	e792      	b.n	80176e0 <uxr_receive_reliable_message+0x24>
 80177ba:	bf00      	nop

080177bc <uxr_next_input_reliable_buffer_available>:
 80177bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177c0:	4604      	mov	r4, r0
 80177c2:	460f      	mov	r7, r1
 80177c4:	8980      	ldrh	r0, [r0, #12]
 80177c6:	2101      	movs	r1, #1
 80177c8:	4690      	mov	r8, r2
 80177ca:	f000 fc23 	bl	8018014 <uxr_seq_num_add>
 80177ce:	8922      	ldrh	r2, [r4, #8]
 80177d0:	fbb0 f6f2 	udiv	r6, r0, r2
 80177d4:	fb02 0616 	mls	r6, r2, r6, r0
 80177d8:	b2b6      	uxth	r6, r6
 80177da:	6863      	ldr	r3, [r4, #4]
 80177dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80177e0:	fb06 f303 	mul.w	r3, r6, r3
 80177e4:	6826      	ldr	r6, [r4, #0]
 80177e6:	3304      	adds	r3, #4
 80177e8:	441e      	add	r6, r3
 80177ea:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80177ee:	f1b9 0f00 	cmp.w	r9, #0
 80177f2:	d023      	beq.n	801783c <uxr_next_input_reliable_buffer_available+0x80>
 80177f4:	6923      	ldr	r3, [r4, #16]
 80177f6:	4605      	mov	r5, r0
 80177f8:	4630      	mov	r0, r6
 80177fa:	4798      	blx	r3
 80177fc:	4682      	mov	sl, r0
 80177fe:	b300      	cbz	r0, 8017842 <uxr_next_input_reliable_buffer_available+0x86>
 8017800:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8017804:	2101      	movs	r1, #1
 8017806:	4650      	mov	r0, sl
 8017808:	f000 fc04 	bl	8018014 <uxr_seq_num_add>
 801780c:	8921      	ldrh	r1, [r4, #8]
 801780e:	fbb0 f2f1 	udiv	r2, r0, r1
 8017812:	4682      	mov	sl, r0
 8017814:	fb01 0212 	mls	r2, r1, r2, r0
 8017818:	e9d4 0300 	ldrd	r0, r3, [r4]
 801781c:	b292      	uxth	r2, r2
 801781e:	fbb3 f3f1 	udiv	r3, r3, r1
 8017822:	fb02 f303 	mul.w	r3, r2, r3
 8017826:	3304      	adds	r3, #4
 8017828:	4418      	add	r0, r3
 801782a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801782e:	b12b      	cbz	r3, 801783c <uxr_next_input_reliable_buffer_available+0x80>
 8017830:	6923      	ldr	r3, [r4, #16]
 8017832:	4798      	blx	r3
 8017834:	2802      	cmp	r0, #2
 8017836:	d01b      	beq.n	8017870 <uxr_next_input_reliable_buffer_available+0xb4>
 8017838:	2801      	cmp	r0, #1
 801783a:	d0e3      	beq.n	8017804 <uxr_next_input_reliable_buffer_available+0x48>
 801783c:	2000      	movs	r0, #0
 801783e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017842:	464a      	mov	r2, r9
 8017844:	4631      	mov	r1, r6
 8017846:	4638      	mov	r0, r7
 8017848:	f7f4 fd12 	bl	800c270 <ucdr_init_buffer>
 801784c:	8921      	ldrh	r1, [r4, #8]
 801784e:	fbb5 f2f1 	udiv	r2, r5, r1
 8017852:	fb01 5212 	mls	r2, r1, r2, r5
 8017856:	b292      	uxth	r2, r2
 8017858:	6863      	ldr	r3, [r4, #4]
 801785a:	fbb3 f3f1 	udiv	r3, r3, r1
 801785e:	fb02 f303 	mul.w	r3, r2, r3
 8017862:	6822      	ldr	r2, [r4, #0]
 8017864:	f842 a003 	str.w	sl, [r2, r3]
 8017868:	2001      	movs	r0, #1
 801786a:	81a5      	strh	r5, [r4, #12]
 801786c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017870:	8920      	ldrh	r0, [r4, #8]
 8017872:	fbb5 f3f0 	udiv	r3, r5, r0
 8017876:	fb00 5513 	mls	r5, r0, r3, r5
 801787a:	b2ad      	uxth	r5, r5
 801787c:	6863      	ldr	r3, [r4, #4]
 801787e:	fbb3 f3f0 	udiv	r3, r3, r0
 8017882:	fb03 f505 	mul.w	r5, r3, r5
 8017886:	6823      	ldr	r3, [r4, #0]
 8017888:	2000      	movs	r0, #0
 801788a:	5158      	str	r0, [r3, r5]
 801788c:	eb06 0108 	add.w	r1, r6, r8
 8017890:	eba9 0208 	sub.w	r2, r9, r8
 8017894:	4638      	mov	r0, r7
 8017896:	f7f4 fceb 	bl	800c270 <ucdr_init_buffer>
 801789a:	4638      	mov	r0, r7
 801789c:	4903      	ldr	r1, [pc, #12]	@ (80178ac <uxr_next_input_reliable_buffer_available+0xf0>)
 801789e:	4622      	mov	r2, r4
 80178a0:	f7f4 fcba 	bl	800c218 <ucdr_set_on_full_buffer_callback>
 80178a4:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80178a8:	2001      	movs	r0, #1
 80178aa:	e7c8      	b.n	801783e <uxr_next_input_reliable_buffer_available+0x82>
 80178ac:	080175b1 	.word	0x080175b1

080178b0 <uxr_process_heartbeat>:
 80178b0:	b538      	push	{r3, r4, r5, lr}
 80178b2:	4611      	mov	r1, r2
 80178b4:	4604      	mov	r4, r0
 80178b6:	89c0      	ldrh	r0, [r0, #14]
 80178b8:	4615      	mov	r5, r2
 80178ba:	f000 fbb3 	bl	8018024 <uxr_seq_num_cmp>
 80178be:	2800      	cmp	r0, #0
 80178c0:	bfb8      	it	lt
 80178c2:	81e5      	strhlt	r5, [r4, #14]
 80178c4:	bd38      	pop	{r3, r4, r5, pc}
 80178c6:	bf00      	nop

080178c8 <uxr_compute_acknack>:
 80178c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178cc:	8903      	ldrh	r3, [r0, #8]
 80178ce:	8985      	ldrh	r5, [r0, #12]
 80178d0:	4604      	mov	r4, r0
 80178d2:	460e      	mov	r6, r1
 80178d4:	b1d3      	cbz	r3, 801790c <uxr_compute_acknack+0x44>
 80178d6:	4628      	mov	r0, r5
 80178d8:	2701      	movs	r7, #1
 80178da:	e003      	b.n	80178e4 <uxr_compute_acknack+0x1c>
 80178dc:	4567      	cmp	r7, ip
 80178de:	d215      	bcs.n	801790c <uxr_compute_acknack+0x44>
 80178e0:	89a0      	ldrh	r0, [r4, #12]
 80178e2:	3701      	adds	r7, #1
 80178e4:	b2b9      	uxth	r1, r7
 80178e6:	f000 fb95 	bl	8018014 <uxr_seq_num_add>
 80178ea:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80178ee:	fbb0 f3fc 	udiv	r3, r0, ip
 80178f2:	fb0c 0313 	mls	r3, ip, r3, r0
 80178f6:	b29a      	uxth	r2, r3
 80178f8:	e9d4 1300 	ldrd	r1, r3, [r4]
 80178fc:	fbb3 f3fc 	udiv	r3, r3, ip
 8017900:	fb02 f303 	mul.w	r3, r2, r3
 8017904:	58cb      	ldr	r3, [r1, r3]
 8017906:	2b00      	cmp	r3, #0
 8017908:	d1e8      	bne.n	80178dc <uxr_compute_acknack+0x14>
 801790a:	4605      	mov	r5, r0
 801790c:	8035      	strh	r5, [r6, #0]
 801790e:	2101      	movs	r1, #1
 8017910:	4628      	mov	r0, r5
 8017912:	89e7      	ldrh	r7, [r4, #14]
 8017914:	f000 fb82 	bl	801801c <uxr_seq_num_sub>
 8017918:	4601      	mov	r1, r0
 801791a:	4638      	mov	r0, r7
 801791c:	f000 fb7e 	bl	801801c <uxr_seq_num_sub>
 8017920:	4605      	mov	r5, r0
 8017922:	b318      	cbz	r0, 801796c <uxr_compute_acknack+0xa4>
 8017924:	f04f 0900 	mov.w	r9, #0
 8017928:	464f      	mov	r7, r9
 801792a:	f04f 0801 	mov.w	r8, #1
 801792e:	fa1f f189 	uxth.w	r1, r9
 8017932:	8830      	ldrh	r0, [r6, #0]
 8017934:	f000 fb6e 	bl	8018014 <uxr_seq_num_add>
 8017938:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801793c:	fbb0 f3fc 	udiv	r3, r0, ip
 8017940:	e9d4 1200 	ldrd	r1, r2, [r4]
 8017944:	fb03 001c 	mls	r0, r3, ip, r0
 8017948:	b283      	uxth	r3, r0
 801794a:	fbb2 f2fc 	udiv	r2, r2, ip
 801794e:	fb02 f303 	mul.w	r3, r2, r3
 8017952:	fa08 f209 	lsl.w	r2, r8, r9
 8017956:	58cb      	ldr	r3, [r1, r3]
 8017958:	f109 0901 	add.w	r9, r9, #1
 801795c:	b90b      	cbnz	r3, 8017962 <uxr_compute_acknack+0x9a>
 801795e:	4317      	orrs	r7, r2
 8017960:	b2bf      	uxth	r7, r7
 8017962:	454d      	cmp	r5, r9
 8017964:	d1e3      	bne.n	801792e <uxr_compute_acknack+0x66>
 8017966:	4638      	mov	r0, r7
 8017968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801796c:	4607      	mov	r7, r0
 801796e:	4638      	mov	r0, r7
 8017970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08017974 <uxr_init_output_best_effort_stream>:
 8017974:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8017978:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801797c:	6001      	str	r1, [r0, #0]
 801797e:	7303      	strb	r3, [r0, #12]
 8017980:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8017984:	4770      	bx	lr
 8017986:	bf00      	nop

08017988 <uxr_reset_output_best_effort_stream>:
 8017988:	7b02      	ldrb	r2, [r0, #12]
 801798a:	6042      	str	r2, [r0, #4]
 801798c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017990:	81c3      	strh	r3, [r0, #14]
 8017992:	4770      	bx	lr

08017994 <uxr_prepare_best_effort_buffer_to_write>:
 8017994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017996:	4604      	mov	r4, r0
 8017998:	b083      	sub	sp, #12
 801799a:	6840      	ldr	r0, [r0, #4]
 801799c:	460d      	mov	r5, r1
 801799e:	4616      	mov	r6, r2
 80179a0:	f7fb f810 	bl	80129c4 <uxr_submessage_padding>
 80179a4:	6863      	ldr	r3, [r4, #4]
 80179a6:	4418      	add	r0, r3
 80179a8:	68a3      	ldr	r3, [r4, #8]
 80179aa:	1942      	adds	r2, r0, r5
 80179ac:	4293      	cmp	r3, r2
 80179ae:	bf2c      	ite	cs
 80179b0:	2701      	movcs	r7, #1
 80179b2:	2700      	movcc	r7, #0
 80179b4:	d202      	bcs.n	80179bc <uxr_prepare_best_effort_buffer_to_write+0x28>
 80179b6:	4638      	mov	r0, r7
 80179b8:	b003      	add	sp, #12
 80179ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179bc:	9000      	str	r0, [sp, #0]
 80179be:	6821      	ldr	r1, [r4, #0]
 80179c0:	4630      	mov	r0, r6
 80179c2:	2300      	movs	r3, #0
 80179c4:	f7f4 fc42 	bl	800c24c <ucdr_init_buffer_origin_offset>
 80179c8:	6861      	ldr	r1, [r4, #4]
 80179ca:	4638      	mov	r0, r7
 80179cc:	4429      	add	r1, r5
 80179ce:	6061      	str	r1, [r4, #4]
 80179d0:	b003      	add	sp, #12
 80179d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080179d4 <uxr_prepare_best_effort_buffer_to_send>:
 80179d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179d8:	4604      	mov	r4, r0
 80179da:	461d      	mov	r5, r3
 80179dc:	6840      	ldr	r0, [r0, #4]
 80179de:	7b23      	ldrb	r3, [r4, #12]
 80179e0:	4298      	cmp	r0, r3
 80179e2:	bf8c      	ite	hi
 80179e4:	2601      	movhi	r6, #1
 80179e6:	2600      	movls	r6, #0
 80179e8:	d802      	bhi.n	80179f0 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80179ea:	4630      	mov	r0, r6
 80179ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179f0:	4688      	mov	r8, r1
 80179f2:	89e0      	ldrh	r0, [r4, #14]
 80179f4:	2101      	movs	r1, #1
 80179f6:	4617      	mov	r7, r2
 80179f8:	f000 fb0c 	bl	8018014 <uxr_seq_num_add>
 80179fc:	6823      	ldr	r3, [r4, #0]
 80179fe:	81e0      	strh	r0, [r4, #14]
 8017a00:	8028      	strh	r0, [r5, #0]
 8017a02:	f8c8 3000 	str.w	r3, [r8]
 8017a06:	6863      	ldr	r3, [r4, #4]
 8017a08:	603b      	str	r3, [r7, #0]
 8017a0a:	7b23      	ldrb	r3, [r4, #12]
 8017a0c:	6063      	str	r3, [r4, #4]
 8017a0e:	4630      	mov	r0, r6
 8017a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017a14 <on_full_output_buffer>:
 8017a14:	b538      	push	{r3, r4, r5, lr}
 8017a16:	6802      	ldr	r2, [r0, #0]
 8017a18:	460c      	mov	r4, r1
 8017a1a:	6809      	ldr	r1, [r1, #0]
 8017a1c:	8923      	ldrh	r3, [r4, #8]
 8017a1e:	eba2 0c01 	sub.w	ip, r2, r1
 8017a22:	6862      	ldr	r2, [r4, #4]
 8017a24:	fbb2 f2f3 	udiv	r2, r2, r3
 8017a28:	fbbc fcf2 	udiv	ip, ip, r2
 8017a2c:	f10c 0c01 	add.w	ip, ip, #1
 8017a30:	fa1f fc8c 	uxth.w	ip, ip
 8017a34:	fbbc fef3 	udiv	lr, ip, r3
 8017a38:	fb03 c31e 	mls	r3, r3, lr, ip
 8017a3c:	b29b      	uxth	r3, r3
 8017a3e:	fb02 f303 	mul.w	r3, r2, r3
 8017a42:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8017a46:	58ca      	ldr	r2, [r1, r3]
 8017a48:	4463      	add	r3, ip
 8017a4a:	eba2 020c 	sub.w	r2, r2, ip
 8017a4e:	3308      	adds	r3, #8
 8017a50:	4605      	mov	r5, r0
 8017a52:	4419      	add	r1, r3
 8017a54:	3a04      	subs	r2, #4
 8017a56:	6903      	ldr	r3, [r0, #16]
 8017a58:	f7f4 fc02 	bl	800c260 <ucdr_init_buffer_origin>
 8017a5c:	4628      	mov	r0, r5
 8017a5e:	4903      	ldr	r1, [pc, #12]	@ (8017a6c <on_full_output_buffer+0x58>)
 8017a60:	4622      	mov	r2, r4
 8017a62:	f7f4 fbd9 	bl	800c218 <ucdr_set_on_full_buffer_callback>
 8017a66:	2000      	movs	r0, #0
 8017a68:	bd38      	pop	{r3, r4, r5, pc}
 8017a6a:	bf00      	nop
 8017a6c:	08017a15 	.word	0x08017a15

08017a70 <uxr_init_output_reliable_stream>:
 8017a70:	b410      	push	{r4}
 8017a72:	f89d c004 	ldrb.w	ip, [sp, #4]
 8017a76:	8103      	strh	r3, [r0, #8]
 8017a78:	e9c0 1200 	strd	r1, r2, [r0]
 8017a7c:	f880 c00c 	strb.w	ip, [r0, #12]
 8017a80:	b1d3      	cbz	r3, 8017ab8 <uxr_init_output_reliable_stream+0x48>
 8017a82:	f8c1 c000 	str.w	ip, [r1]
 8017a86:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017a8a:	f1bc 0f01 	cmp.w	ip, #1
 8017a8e:	d913      	bls.n	8017ab8 <uxr_init_output_reliable_stream+0x48>
 8017a90:	2301      	movs	r3, #1
 8017a92:	fbb3 f1fc 	udiv	r1, r3, ip
 8017a96:	fb0c 3111 	mls	r1, ip, r1, r3
 8017a9a:	b289      	uxth	r1, r1
 8017a9c:	6842      	ldr	r2, [r0, #4]
 8017a9e:	6804      	ldr	r4, [r0, #0]
 8017aa0:	fbb2 f2fc 	udiv	r2, r2, ip
 8017aa4:	fb01 f202 	mul.w	r2, r1, r2
 8017aa8:	7b01      	ldrb	r1, [r0, #12]
 8017aaa:	50a1      	str	r1, [r4, r2]
 8017aac:	3301      	adds	r3, #1
 8017aae:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017ab2:	b29b      	uxth	r3, r3
 8017ab4:	459c      	cmp	ip, r3
 8017ab6:	d8ec      	bhi.n	8017a92 <uxr_init_output_reliable_stream+0x22>
 8017ab8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017abc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017ac0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017ac4:	4905      	ldr	r1, [pc, #20]	@ (8017adc <uxr_init_output_reliable_stream+0x6c>)
 8017ac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017aca:	f8c0 100e 	str.w	r1, [r0, #14]
 8017ace:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	8242      	strh	r2, [r0, #18]
 8017ad6:	8403      	strh	r3, [r0, #32]
 8017ad8:	4770      	bx	lr
 8017ada:	bf00      	nop
 8017adc:	ffff0000 	.word	0xffff0000

08017ae0 <uxr_reset_output_reliable_stream>:
 8017ae0:	8901      	ldrh	r1, [r0, #8]
 8017ae2:	b1b1      	cbz	r1, 8017b12 <uxr_reset_output_reliable_stream+0x32>
 8017ae4:	f04f 0c00 	mov.w	ip, #0
 8017ae8:	4663      	mov	r3, ip
 8017aea:	fbb3 f2f1 	udiv	r2, r3, r1
 8017aee:	fb01 3312 	mls	r3, r1, r2, r3
 8017af2:	b29b      	uxth	r3, r3
 8017af4:	6842      	ldr	r2, [r0, #4]
 8017af6:	fbb2 f2f1 	udiv	r2, r2, r1
 8017afa:	6801      	ldr	r1, [r0, #0]
 8017afc:	fb02 f303 	mul.w	r3, r2, r3
 8017b00:	7b02      	ldrb	r2, [r0, #12]
 8017b02:	50ca      	str	r2, [r1, r3]
 8017b04:	f10c 0c01 	add.w	ip, ip, #1
 8017b08:	8901      	ldrh	r1, [r0, #8]
 8017b0a:	fa1f f38c 	uxth.w	r3, ip
 8017b0e:	4299      	cmp	r1, r3
 8017b10:	d8eb      	bhi.n	8017aea <uxr_reset_output_reliable_stream+0xa>
 8017b12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017b16:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017b1a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017b1e:	4904      	ldr	r1, [pc, #16]	@ (8017b30 <uxr_reset_output_reliable_stream+0x50>)
 8017b20:	f8c0 100e 	str.w	r1, [r0, #14]
 8017b24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017b28:	2300      	movs	r3, #0
 8017b2a:	8242      	strh	r2, [r0, #18]
 8017b2c:	8403      	strh	r3, [r0, #32]
 8017b2e:	4770      	bx	lr
 8017b30:	ffff0000 	.word	0xffff0000

08017b34 <uxr_prepare_reliable_buffer_to_write>:
 8017b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b38:	4604      	mov	r4, r0
 8017b3a:	b091      	sub	sp, #68	@ 0x44
 8017b3c:	8900      	ldrh	r0, [r0, #8]
 8017b3e:	89e6      	ldrh	r6, [r4, #14]
 8017b40:	6823      	ldr	r3, [r4, #0]
 8017b42:	9204      	str	r2, [sp, #16]
 8017b44:	fbb6 f2f0 	udiv	r2, r6, r0
 8017b48:	fb00 6212 	mls	r2, r0, r2, r6
 8017b4c:	b292      	uxth	r2, r2
 8017b4e:	6865      	ldr	r5, [r4, #4]
 8017b50:	fbb5 f5f0 	udiv	r5, r5, r0
 8017b54:	fb05 3202 	mla	r2, r5, r2, r3
 8017b58:	3204      	adds	r2, #4
 8017b5a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8017b5e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8017b62:	9203      	str	r2, [sp, #12]
 8017b64:	468b      	mov	fp, r1
 8017b66:	1f2f      	subs	r7, r5, #4
 8017b68:	2800      	cmp	r0, #0
 8017b6a:	f000 814c 	beq.w	8017e06 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8017b6e:	f04f 0c00 	mov.w	ip, #0
 8017b72:	46e2      	mov	sl, ip
 8017b74:	4661      	mov	r1, ip
 8017b76:	fbb1 f2f0 	udiv	r2, r1, r0
 8017b7a:	fb00 1212 	mls	r2, r0, r2, r1
 8017b7e:	b292      	uxth	r2, r2
 8017b80:	fb05 f202 	mul.w	r2, r5, r2
 8017b84:	f10c 0c01 	add.w	ip, ip, #1
 8017b88:	589a      	ldr	r2, [r3, r2]
 8017b8a:	454a      	cmp	r2, r9
 8017b8c:	bf08      	it	eq
 8017b8e:	f10a 0a01 	addeq.w	sl, sl, #1
 8017b92:	fa1f f18c 	uxth.w	r1, ip
 8017b96:	bf08      	it	eq
 8017b98:	fa1f fa8a 	uxtheq.w	sl, sl
 8017b9c:	4281      	cmp	r1, r0
 8017b9e:	d3ea      	bcc.n	8017b76 <uxr_prepare_reliable_buffer_to_write+0x42>
 8017ba0:	4640      	mov	r0, r8
 8017ba2:	2104      	movs	r1, #4
 8017ba4:	f8cd a014 	str.w	sl, [sp, #20]
 8017ba8:	f7f4 fb66 	bl	800c278 <ucdr_alignment>
 8017bac:	4480      	add	r8, r0
 8017bae:	eb08 020b 	add.w	r2, r8, fp
 8017bb2:	42ba      	cmp	r2, r7
 8017bb4:	f240 80cd 	bls.w	8017d52 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8017bb8:	7b22      	ldrb	r2, [r4, #12]
 8017bba:	445a      	add	r2, fp
 8017bbc:	42ba      	cmp	r2, r7
 8017bbe:	f240 80b5 	bls.w	8017d2c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8017bc2:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8017bc6:	33fc      	adds	r3, #252	@ 0xfc
 8017bc8:	b2ba      	uxth	r2, r7
 8017bca:	4413      	add	r3, r2
 8017bcc:	b29b      	uxth	r3, r3
 8017bce:	fb0a f903 	mul.w	r9, sl, r3
 8017bd2:	45d9      	cmp	r9, fp
 8017bd4:	9305      	str	r3, [sp, #20]
 8017bd6:	9306      	str	r3, [sp, #24]
 8017bd8:	f0c0 80b7 	bcc.w	8017d4a <uxr_prepare_reliable_buffer_to_write+0x216>
 8017bdc:	f108 0304 	add.w	r3, r8, #4
 8017be0:	42bb      	cmp	r3, r7
 8017be2:	f080 80db 	bcs.w	8017d9c <uxr_prepare_reliable_buffer_to_write+0x268>
 8017be6:	f1a2 0904 	sub.w	r9, r2, #4
 8017bea:	eba9 0908 	sub.w	r9, r9, r8
 8017bee:	9b05      	ldr	r3, [sp, #20]
 8017bf0:	fa1f f989 	uxth.w	r9, r9
 8017bf4:	ebab 0b09 	sub.w	fp, fp, r9
 8017bf8:	fbbb f2f3 	udiv	r2, fp, r3
 8017bfc:	fb03 b312 	mls	r3, r3, r2, fp
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	f000 80c8 	beq.w	8017d96 <uxr_prepare_reliable_buffer_to_write+0x262>
 8017c06:	3201      	adds	r2, #1
 8017c08:	b292      	uxth	r2, r2
 8017c0a:	9306      	str	r3, [sp, #24]
 8017c0c:	4552      	cmp	r2, sl
 8017c0e:	f200 809c 	bhi.w	8017d4a <uxr_prepare_reliable_buffer_to_write+0x216>
 8017c12:	f10d 0b20 	add.w	fp, sp, #32
 8017c16:	2a00      	cmp	r2, #0
 8017c18:	d042      	beq.n	8017ca0 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8017c1a:	f8cd 801c 	str.w	r8, [sp, #28]
 8017c1e:	f04f 0a00 	mov.w	sl, #0
 8017c22:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017c26:	9505      	str	r5, [sp, #20]
 8017c28:	f10d 0b20 	add.w	fp, sp, #32
 8017c2c:	4615      	mov	r5, r2
 8017c2e:	e000      	b.n	8017c32 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8017c30:	46c1      	mov	r9, r8
 8017c32:	8920      	ldrh	r0, [r4, #8]
 8017c34:	fbb6 f2f0 	udiv	r2, r6, r0
 8017c38:	fb00 6112 	mls	r1, r0, r2, r6
 8017c3c:	b28a      	uxth	r2, r1
 8017c3e:	6863      	ldr	r3, [r4, #4]
 8017c40:	fbb3 f1f0 	udiv	r1, r3, r0
 8017c44:	6823      	ldr	r3, [r4, #0]
 8017c46:	fb02 f101 	mul.w	r1, r2, r1
 8017c4a:	3104      	adds	r1, #4
 8017c4c:	4419      	add	r1, r3
 8017c4e:	4658      	mov	r0, fp
 8017c50:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8017c54:	9200      	str	r2, [sp, #0]
 8017c56:	2300      	movs	r3, #0
 8017c58:	463a      	mov	r2, r7
 8017c5a:	f7f4 faf7 	bl	800c24c <ucdr_init_buffer_origin_offset>
 8017c5e:	464a      	mov	r2, r9
 8017c60:	2300      	movs	r3, #0
 8017c62:	210d      	movs	r1, #13
 8017c64:	4658      	mov	r0, fp
 8017c66:	f7fa fe6d 	bl	8012944 <uxr_buffer_submessage_header>
 8017c6a:	8921      	ldrh	r1, [r4, #8]
 8017c6c:	fbb6 f2f1 	udiv	r2, r6, r1
 8017c70:	fb01 6212 	mls	r2, r1, r2, r6
 8017c74:	b292      	uxth	r2, r2
 8017c76:	6863      	ldr	r3, [r4, #4]
 8017c78:	fbb3 f3f1 	udiv	r3, r3, r1
 8017c7c:	fb02 f303 	mul.w	r3, r2, r3
 8017c80:	6822      	ldr	r2, [r4, #0]
 8017c82:	4630      	mov	r0, r6
 8017c84:	50d7      	str	r7, [r2, r3]
 8017c86:	2101      	movs	r1, #1
 8017c88:	f000 f9c4 	bl	8018014 <uxr_seq_num_add>
 8017c8c:	f10a 0a01 	add.w	sl, sl, #1
 8017c90:	fa1f f38a 	uxth.w	r3, sl
 8017c94:	429d      	cmp	r5, r3
 8017c96:	4606      	mov	r6, r0
 8017c98:	d8ca      	bhi.n	8017c30 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8017c9a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8017c9e:	9d05      	ldr	r5, [sp, #20]
 8017ca0:	8920      	ldrh	r0, [r4, #8]
 8017ca2:	fbb6 f3f0 	udiv	r3, r6, r0
 8017ca6:	fb00 6313 	mls	r3, r0, r3, r6
 8017caa:	b299      	uxth	r1, r3
 8017cac:	6863      	ldr	r3, [r4, #4]
 8017cae:	fbb3 f3f0 	udiv	r3, r3, r0
 8017cb2:	fb01 f303 	mul.w	r3, r1, r3
 8017cb6:	6821      	ldr	r1, [r4, #0]
 8017cb8:	3304      	adds	r3, #4
 8017cba:	4419      	add	r1, r3
 8017cbc:	463a      	mov	r2, r7
 8017cbe:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8017cc2:	9000      	str	r0, [sp, #0]
 8017cc4:	2300      	movs	r3, #0
 8017cc6:	4658      	mov	r0, fp
 8017cc8:	f7f4 fac0 	bl	800c24c <ucdr_init_buffer_origin_offset>
 8017ccc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8017cd0:	4658      	mov	r0, fp
 8017cd2:	fa1f f289 	uxth.w	r2, r9
 8017cd6:	2302      	movs	r3, #2
 8017cd8:	210d      	movs	r1, #13
 8017cda:	f7fa fe33 	bl	8012944 <uxr_buffer_submessage_header>
 8017cde:	9b03      	ldr	r3, [sp, #12]
 8017ce0:	8927      	ldrh	r7, [r4, #8]
 8017ce2:	7b20      	ldrb	r0, [r4, #12]
 8017ce4:	f108 0104 	add.w	r1, r8, #4
 8017ce8:	440b      	add	r3, r1
 8017cea:	4619      	mov	r1, r3
 8017cec:	fbb6 f3f7 	udiv	r3, r6, r7
 8017cf0:	fb07 6313 	mls	r3, r7, r3, r6
 8017cf4:	f1a5 0208 	sub.w	r2, r5, #8
 8017cf8:	b29d      	uxth	r5, r3
 8017cfa:	3004      	adds	r0, #4
 8017cfc:	6863      	ldr	r3, [r4, #4]
 8017cfe:	fbb3 f3f7 	udiv	r3, r3, r7
 8017d02:	fb05 f303 	mul.w	r3, r5, r3
 8017d06:	6825      	ldr	r5, [r4, #0]
 8017d08:	4448      	add	r0, r9
 8017d0a:	50e8      	str	r0, [r5, r3]
 8017d0c:	9d04      	ldr	r5, [sp, #16]
 8017d0e:	eba2 0208 	sub.w	r2, r2, r8
 8017d12:	4628      	mov	r0, r5
 8017d14:	f7f4 faac 	bl	800c270 <ucdr_init_buffer>
 8017d18:	4628      	mov	r0, r5
 8017d1a:	493c      	ldr	r1, [pc, #240]	@ (8017e0c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8017d1c:	4622      	mov	r2, r4
 8017d1e:	f7f4 fa7b 	bl	800c218 <ucdr_set_on_full_buffer_callback>
 8017d22:	2001      	movs	r0, #1
 8017d24:	81e6      	strh	r6, [r4, #14]
 8017d26:	b011      	add	sp, #68	@ 0x44
 8017d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d2c:	2101      	movs	r1, #1
 8017d2e:	89e0      	ldrh	r0, [r4, #14]
 8017d30:	f000 f970 	bl	8018014 <uxr_seq_num_add>
 8017d34:	8921      	ldrh	r1, [r4, #8]
 8017d36:	4605      	mov	r5, r0
 8017d38:	8a60      	ldrh	r0, [r4, #18]
 8017d3a:	f000 f96b 	bl	8018014 <uxr_seq_num_add>
 8017d3e:	4601      	mov	r1, r0
 8017d40:	4628      	mov	r0, r5
 8017d42:	f000 f96f 	bl	8018024 <uxr_seq_num_cmp>
 8017d46:	2800      	cmp	r0, #0
 8017d48:	dd42      	ble.n	8017dd0 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8017d4a:	2000      	movs	r0, #0
 8017d4c:	b011      	add	sp, #68	@ 0x44
 8017d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d52:	8921      	ldrh	r1, [r4, #8]
 8017d54:	8a60      	ldrh	r0, [r4, #18]
 8017d56:	9205      	str	r2, [sp, #20]
 8017d58:	f000 f95c 	bl	8018014 <uxr_seq_num_add>
 8017d5c:	4601      	mov	r1, r0
 8017d5e:	4630      	mov	r0, r6
 8017d60:	f000 f960 	bl	8018024 <uxr_seq_num_cmp>
 8017d64:	2800      	cmp	r0, #0
 8017d66:	9a05      	ldr	r2, [sp, #20]
 8017d68:	dcef      	bgt.n	8017d4a <uxr_prepare_reliable_buffer_to_write+0x216>
 8017d6a:	8927      	ldrh	r7, [r4, #8]
 8017d6c:	fbb6 f3f7 	udiv	r3, r6, r7
 8017d70:	fb07 6313 	mls	r3, r7, r3, r6
 8017d74:	b29d      	uxth	r5, r3
 8017d76:	6863      	ldr	r3, [r4, #4]
 8017d78:	6824      	ldr	r4, [r4, #0]
 8017d7a:	fbb3 f3f7 	udiv	r3, r3, r7
 8017d7e:	fb05 f303 	mul.w	r3, r5, r3
 8017d82:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8017d86:	50e2      	str	r2, [r4, r3]
 8017d88:	2300      	movs	r3, #0
 8017d8a:	f8cd 8000 	str.w	r8, [sp]
 8017d8e:	f7f4 fa5d 	bl	800c24c <ucdr_init_buffer_origin_offset>
 8017d92:	2001      	movs	r0, #1
 8017d94:	e7da      	b.n	8017d4c <uxr_prepare_reliable_buffer_to_write+0x218>
 8017d96:	b293      	uxth	r3, r2
 8017d98:	461a      	mov	r2, r3
 8017d9a:	e737      	b.n	8017c0c <uxr_prepare_reliable_buffer_to_write+0xd8>
 8017d9c:	4630      	mov	r0, r6
 8017d9e:	2101      	movs	r1, #1
 8017da0:	9207      	str	r2, [sp, #28]
 8017da2:	f000 f937 	bl	8018014 <uxr_seq_num_add>
 8017da6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017daa:	fbb0 f1fc 	udiv	r1, r0, ip
 8017dae:	fb0c 0111 	mls	r1, ip, r1, r0
 8017db2:	4606      	mov	r6, r0
 8017db4:	b288      	uxth	r0, r1
 8017db6:	6863      	ldr	r3, [r4, #4]
 8017db8:	fbb3 f1fc 	udiv	r1, r3, ip
 8017dbc:	6823      	ldr	r3, [r4, #0]
 8017dbe:	9a07      	ldr	r2, [sp, #28]
 8017dc0:	fb00 f101 	mul.w	r1, r0, r1
 8017dc4:	3104      	adds	r1, #4
 8017dc6:	440b      	add	r3, r1
 8017dc8:	9303      	str	r3, [sp, #12]
 8017dca:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8017dce:	e70a      	b.n	8017be6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8017dd0:	8921      	ldrh	r1, [r4, #8]
 8017dd2:	fbb5 f3f1 	udiv	r3, r5, r1
 8017dd6:	fb01 5313 	mls	r3, r1, r3, r5
 8017dda:	b29a      	uxth	r2, r3
 8017ddc:	6863      	ldr	r3, [r4, #4]
 8017dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8017de2:	6821      	ldr	r1, [r4, #0]
 8017de4:	9804      	ldr	r0, [sp, #16]
 8017de6:	fb02 f303 	mul.w	r3, r2, r3
 8017dea:	3304      	adds	r3, #4
 8017dec:	7b22      	ldrb	r2, [r4, #12]
 8017dee:	4419      	add	r1, r3
 8017df0:	445a      	add	r2, fp
 8017df2:	f841 2c04 	str.w	r2, [r1, #-4]
 8017df6:	7b23      	ldrb	r3, [r4, #12]
 8017df8:	9300      	str	r3, [sp, #0]
 8017dfa:	2300      	movs	r3, #0
 8017dfc:	f7f4 fa26 	bl	800c24c <ucdr_init_buffer_origin_offset>
 8017e00:	81e5      	strh	r5, [r4, #14]
 8017e02:	2001      	movs	r0, #1
 8017e04:	e7a2      	b.n	8017d4c <uxr_prepare_reliable_buffer_to_write+0x218>
 8017e06:	4682      	mov	sl, r0
 8017e08:	e6ca      	b.n	8017ba0 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8017e0a:	bf00      	nop
 8017e0c:	08017a15 	.word	0x08017a15

08017e10 <uxr_prepare_next_reliable_buffer_to_send>:
 8017e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e12:	4604      	mov	r4, r0
 8017e14:	460f      	mov	r7, r1
 8017e16:	8a00      	ldrh	r0, [r0, #16]
 8017e18:	2101      	movs	r1, #1
 8017e1a:	4616      	mov	r6, r2
 8017e1c:	461d      	mov	r5, r3
 8017e1e:	f000 f8f9 	bl	8018014 <uxr_seq_num_add>
 8017e22:	8028      	strh	r0, [r5, #0]
 8017e24:	8922      	ldrh	r2, [r4, #8]
 8017e26:	fbb0 f3f2 	udiv	r3, r0, r2
 8017e2a:	fb02 0c13 	mls	ip, r2, r3, r0
 8017e2e:	fa1f fc8c 	uxth.w	ip, ip
 8017e32:	6863      	ldr	r3, [r4, #4]
 8017e34:	fbb3 f3f2 	udiv	r3, r3, r2
 8017e38:	fb0c fc03 	mul.w	ip, ip, r3
 8017e3c:	6823      	ldr	r3, [r4, #0]
 8017e3e:	89e1      	ldrh	r1, [r4, #14]
 8017e40:	f10c 0c04 	add.w	ip, ip, #4
 8017e44:	4463      	add	r3, ip
 8017e46:	603b      	str	r3, [r7, #0]
 8017e48:	6823      	ldr	r3, [r4, #0]
 8017e4a:	449c      	add	ip, r3
 8017e4c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8017e50:	6033      	str	r3, [r6, #0]
 8017e52:	f000 f8e7 	bl	8018024 <uxr_seq_num_cmp>
 8017e56:	2800      	cmp	r0, #0
 8017e58:	dd01      	ble.n	8017e5e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8017e5a:	2000      	movs	r0, #0
 8017e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e5e:	7b23      	ldrb	r3, [r4, #12]
 8017e60:	6832      	ldr	r2, [r6, #0]
 8017e62:	429a      	cmp	r2, r3
 8017e64:	d9f9      	bls.n	8017e5a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8017e66:	8a61      	ldrh	r1, [r4, #18]
 8017e68:	8a20      	ldrh	r0, [r4, #16]
 8017e6a:	f000 f8d7 	bl	801801c <uxr_seq_num_sub>
 8017e6e:	8923      	ldrh	r3, [r4, #8]
 8017e70:	4283      	cmp	r3, r0
 8017e72:	d0f2      	beq.n	8017e5a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8017e74:	8828      	ldrh	r0, [r5, #0]
 8017e76:	89e3      	ldrh	r3, [r4, #14]
 8017e78:	8220      	strh	r0, [r4, #16]
 8017e7a:	4298      	cmp	r0, r3
 8017e7c:	d001      	beq.n	8017e82 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8017e7e:	2001      	movs	r0, #1
 8017e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e82:	2101      	movs	r1, #1
 8017e84:	f000 f8c6 	bl	8018014 <uxr_seq_num_add>
 8017e88:	81e0      	strh	r0, [r4, #14]
 8017e8a:	2001      	movs	r0, #1
 8017e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e8e:	bf00      	nop

08017e90 <uxr_update_output_stream_heartbeat_timestamp>:
 8017e90:	b570      	push	{r4, r5, r6, lr}
 8017e92:	8a01      	ldrh	r1, [r0, #16]
 8017e94:	4604      	mov	r4, r0
 8017e96:	8a40      	ldrh	r0, [r0, #18]
 8017e98:	4615      	mov	r5, r2
 8017e9a:	461e      	mov	r6, r3
 8017e9c:	f000 f8c2 	bl	8018024 <uxr_seq_num_cmp>
 8017ea0:	2800      	cmp	r0, #0
 8017ea2:	db07      	blt.n	8017eb4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8017ea4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017ea8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017eac:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8017eb0:	2000      	movs	r0, #0
 8017eb2:	bd70      	pop	{r4, r5, r6, pc}
 8017eb4:	f894 0020 	ldrb.w	r0, [r4, #32]
 8017eb8:	b940      	cbnz	r0, 8017ecc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8017eba:	2301      	movs	r3, #1
 8017ebc:	f884 3020 	strb.w	r3, [r4, #32]
 8017ec0:	3564      	adds	r5, #100	@ 0x64
 8017ec2:	f146 0600 	adc.w	r6, r6, #0
 8017ec6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8017eca:	bd70      	pop	{r4, r5, r6, pc}
 8017ecc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8017ed0:	4295      	cmp	r5, r2
 8017ed2:	eb76 0303 	sbcs.w	r3, r6, r3
 8017ed6:	bfa5      	ittet	ge
 8017ed8:	3001      	addge	r0, #1
 8017eda:	f884 0020 	strbge.w	r0, [r4, #32]
 8017ede:	2000      	movlt	r0, #0
 8017ee0:	2001      	movge	r0, #1
 8017ee2:	e7ed      	b.n	8017ec0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08017ee4 <uxr_begin_output_nack_buffer_it>:
 8017ee4:	8a40      	ldrh	r0, [r0, #18]
 8017ee6:	4770      	bx	lr

08017ee8 <uxr_next_reliable_nack_buffer_to_send>:
 8017ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017eec:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8017ef0:	b082      	sub	sp, #8
 8017ef2:	f1b8 0f00 	cmp.w	r8, #0
 8017ef6:	d011      	beq.n	8017f1c <uxr_next_reliable_nack_buffer_to_send+0x34>
 8017ef8:	4604      	mov	r4, r0
 8017efa:	8818      	ldrh	r0, [r3, #0]
 8017efc:	460e      	mov	r6, r1
 8017efe:	4617      	mov	r7, r2
 8017f00:	461d      	mov	r5, r3
 8017f02:	2101      	movs	r1, #1
 8017f04:	f000 f886 	bl	8018014 <uxr_seq_num_add>
 8017f08:	8028      	strh	r0, [r5, #0]
 8017f0a:	8a21      	ldrh	r1, [r4, #16]
 8017f0c:	f000 f88a 	bl	8018024 <uxr_seq_num_cmp>
 8017f10:	2800      	cmp	r0, #0
 8017f12:	dd07      	ble.n	8017f24 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8017f14:	f04f 0800 	mov.w	r8, #0
 8017f18:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8017f1c:	4640      	mov	r0, r8
 8017f1e:	b002      	add	sp, #8
 8017f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f24:	8921      	ldrh	r1, [r4, #8]
 8017f26:	8828      	ldrh	r0, [r5, #0]
 8017f28:	6823      	ldr	r3, [r4, #0]
 8017f2a:	fbb0 f2f1 	udiv	r2, r0, r1
 8017f2e:	fb01 0c12 	mls	ip, r1, r2, r0
 8017f32:	fa1f f28c 	uxth.w	r2, ip
 8017f36:	9301      	str	r3, [sp, #4]
 8017f38:	6863      	ldr	r3, [r4, #4]
 8017f3a:	fbb3 fcf1 	udiv	ip, r3, r1
 8017f3e:	9b01      	ldr	r3, [sp, #4]
 8017f40:	fb02 fc0c 	mul.w	ip, r2, ip
 8017f44:	f10c 0c04 	add.w	ip, ip, #4
 8017f48:	4463      	add	r3, ip
 8017f4a:	6033      	str	r3, [r6, #0]
 8017f4c:	6823      	ldr	r3, [r4, #0]
 8017f4e:	4463      	add	r3, ip
 8017f50:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8017f54:	603b      	str	r3, [r7, #0]
 8017f56:	7b22      	ldrb	r2, [r4, #12]
 8017f58:	429a      	cmp	r2, r3
 8017f5a:	d0d2      	beq.n	8017f02 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8017f5c:	4640      	mov	r0, r8
 8017f5e:	b002      	add	sp, #8
 8017f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017f64 <uxr_process_acknack>:
 8017f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f66:	4604      	mov	r4, r0
 8017f68:	460e      	mov	r6, r1
 8017f6a:	4610      	mov	r0, r2
 8017f6c:	2101      	movs	r1, #1
 8017f6e:	f000 f855 	bl	801801c <uxr_seq_num_sub>
 8017f72:	8a61      	ldrh	r1, [r4, #18]
 8017f74:	f000 f852 	bl	801801c <uxr_seq_num_sub>
 8017f78:	b1c0      	cbz	r0, 8017fac <uxr_process_acknack+0x48>
 8017f7a:	4605      	mov	r5, r0
 8017f7c:	2700      	movs	r7, #0
 8017f7e:	2101      	movs	r1, #1
 8017f80:	8a60      	ldrh	r0, [r4, #18]
 8017f82:	f000 f847 	bl	8018014 <uxr_seq_num_add>
 8017f86:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017f8a:	fbb0 f1fc 	udiv	r1, r0, ip
 8017f8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017f92:	fb0c 0111 	mls	r1, ip, r1, r0
 8017f96:	b289      	uxth	r1, r1
 8017f98:	3701      	adds	r7, #1
 8017f9a:	fbb3 f3fc 	udiv	r3, r3, ip
 8017f9e:	fb01 f303 	mul.w	r3, r1, r3
 8017fa2:	42bd      	cmp	r5, r7
 8017fa4:	7b21      	ldrb	r1, [r4, #12]
 8017fa6:	8260      	strh	r0, [r4, #18]
 8017fa8:	50d1      	str	r1, [r2, r3]
 8017faa:	d1e8      	bne.n	8017f7e <uxr_process_acknack+0x1a>
 8017fac:	3e00      	subs	r6, #0
 8017fae:	f04f 0300 	mov.w	r3, #0
 8017fb2:	bf18      	it	ne
 8017fb4:	2601      	movne	r6, #1
 8017fb6:	f884 3020 	strb.w	r3, [r4, #32]
 8017fba:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8017fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017fc0 <uxr_is_output_up_to_date>:
 8017fc0:	8a01      	ldrh	r1, [r0, #16]
 8017fc2:	8a40      	ldrh	r0, [r0, #18]
 8017fc4:	b508      	push	{r3, lr}
 8017fc6:	f000 f82d 	bl	8018024 <uxr_seq_num_cmp>
 8017fca:	fab0 f080 	clz	r0, r0
 8017fce:	0940      	lsrs	r0, r0, #5
 8017fd0:	bd08      	pop	{r3, pc}
 8017fd2:	bf00      	nop

08017fd4 <get_available_free_slots>:
 8017fd4:	8902      	ldrh	r2, [r0, #8]
 8017fd6:	b1da      	cbz	r2, 8018010 <get_available_free_slots+0x3c>
 8017fd8:	b530      	push	{r4, r5, lr}
 8017fda:	2100      	movs	r1, #0
 8017fdc:	6843      	ldr	r3, [r0, #4]
 8017fde:	6805      	ldr	r5, [r0, #0]
 8017fe0:	7b04      	ldrb	r4, [r0, #12]
 8017fe2:	fbb3 fef2 	udiv	lr, r3, r2
 8017fe6:	4608      	mov	r0, r1
 8017fe8:	460b      	mov	r3, r1
 8017fea:	fbb3 fcf2 	udiv	ip, r3, r2
 8017fee:	fb02 331c 	mls	r3, r2, ip, r3
 8017ff2:	b29b      	uxth	r3, r3
 8017ff4:	fb0e f303 	mul.w	r3, lr, r3
 8017ff8:	3101      	adds	r1, #1
 8017ffa:	f855 c003 	ldr.w	ip, [r5, r3]
 8017ffe:	4564      	cmp	r4, ip
 8018000:	bf08      	it	eq
 8018002:	3001      	addeq	r0, #1
 8018004:	b28b      	uxth	r3, r1
 8018006:	bf08      	it	eq
 8018008:	b280      	uxtheq	r0, r0
 801800a:	4293      	cmp	r3, r2
 801800c:	d3ed      	bcc.n	8017fea <get_available_free_slots+0x16>
 801800e:	bd30      	pop	{r4, r5, pc}
 8018010:	4610      	mov	r0, r2
 8018012:	4770      	bx	lr

08018014 <uxr_seq_num_add>:
 8018014:	4408      	add	r0, r1
 8018016:	b280      	uxth	r0, r0
 8018018:	4770      	bx	lr
 801801a:	bf00      	nop

0801801c <uxr_seq_num_sub>:
 801801c:	1a40      	subs	r0, r0, r1
 801801e:	b280      	uxth	r0, r0
 8018020:	4770      	bx	lr
 8018022:	bf00      	nop

08018024 <uxr_seq_num_cmp>:
 8018024:	4288      	cmp	r0, r1
 8018026:	d011      	beq.n	801804c <uxr_seq_num_cmp+0x28>
 8018028:	d309      	bcc.n	801803e <uxr_seq_num_cmp+0x1a>
 801802a:	4288      	cmp	r0, r1
 801802c:	d910      	bls.n	8018050 <uxr_seq_num_cmp+0x2c>
 801802e:	1a40      	subs	r0, r0, r1
 8018030:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8018034:	bfd4      	ite	le
 8018036:	2001      	movle	r0, #1
 8018038:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801803c:	4770      	bx	lr
 801803e:	1a0b      	subs	r3, r1, r0
 8018040:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018044:	daf1      	bge.n	801802a <uxr_seq_num_cmp+0x6>
 8018046:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801804a:	4770      	bx	lr
 801804c:	2000      	movs	r0, #0
 801804e:	4770      	bx	lr
 8018050:	2001      	movs	r0, #1
 8018052:	4770      	bx	lr

08018054 <rcl_get_default_domain_id>:
 8018054:	b530      	push	{r4, r5, lr}
 8018056:	b083      	sub	sp, #12
 8018058:	2300      	movs	r3, #0
 801805a:	9300      	str	r3, [sp, #0]
 801805c:	b1d0      	cbz	r0, 8018094 <rcl_get_default_domain_id+0x40>
 801805e:	4604      	mov	r4, r0
 8018060:	4669      	mov	r1, sp
 8018062:	4815      	ldr	r0, [pc, #84]	@ (80180b8 <rcl_get_default_domain_id+0x64>)
 8018064:	f7f5 ff34 	bl	800ded0 <rcutils_get_env>
 8018068:	4602      	mov	r2, r0
 801806a:	b110      	cbz	r0, 8018072 <rcl_get_default_domain_id+0x1e>
 801806c:	2001      	movs	r0, #1
 801806e:	b003      	add	sp, #12
 8018070:	bd30      	pop	{r4, r5, pc}
 8018072:	9b00      	ldr	r3, [sp, #0]
 8018074:	b18b      	cbz	r3, 801809a <rcl_get_default_domain_id+0x46>
 8018076:	7818      	ldrb	r0, [r3, #0]
 8018078:	2800      	cmp	r0, #0
 801807a:	d0f8      	beq.n	801806e <rcl_get_default_domain_id+0x1a>
 801807c:	a901      	add	r1, sp, #4
 801807e:	4618      	mov	r0, r3
 8018080:	9201      	str	r2, [sp, #4]
 8018082:	f000 fa5f 	bl	8018544 <strtoul>
 8018086:	4605      	mov	r5, r0
 8018088:	b150      	cbz	r0, 80180a0 <rcl_get_default_domain_id+0x4c>
 801808a:	1c43      	adds	r3, r0, #1
 801808c:	d00d      	beq.n	80180aa <rcl_get_default_domain_id+0x56>
 801808e:	6025      	str	r5, [r4, #0]
 8018090:	2000      	movs	r0, #0
 8018092:	e7ec      	b.n	801806e <rcl_get_default_domain_id+0x1a>
 8018094:	200b      	movs	r0, #11
 8018096:	b003      	add	sp, #12
 8018098:	bd30      	pop	{r4, r5, pc}
 801809a:	4618      	mov	r0, r3
 801809c:	b003      	add	sp, #12
 801809e:	bd30      	pop	{r4, r5, pc}
 80180a0:	9b01      	ldr	r3, [sp, #4]
 80180a2:	781b      	ldrb	r3, [r3, #0]
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d0f2      	beq.n	801808e <rcl_get_default_domain_id+0x3a>
 80180a8:	e7e0      	b.n	801806c <rcl_get_default_domain_id+0x18>
 80180aa:	f000 fd85 	bl	8018bb8 <__errno>
 80180ae:	6803      	ldr	r3, [r0, #0]
 80180b0:	2b22      	cmp	r3, #34	@ 0x22
 80180b2:	d1ec      	bne.n	801808e <rcl_get_default_domain_id+0x3a>
 80180b4:	e7da      	b.n	801806c <rcl_get_default_domain_id+0x18>
 80180b6:	bf00      	nop
 80180b8:	0801aa1c 	.word	0x0801aa1c

080180bc <calloc>:
 80180bc:	4b02      	ldr	r3, [pc, #8]	@ (80180c8 <calloc+0xc>)
 80180be:	460a      	mov	r2, r1
 80180c0:	4601      	mov	r1, r0
 80180c2:	6818      	ldr	r0, [r3, #0]
 80180c4:	f000 b802 	b.w	80180cc <_calloc_r>
 80180c8:	200003b0 	.word	0x200003b0

080180cc <_calloc_r>:
 80180cc:	b570      	push	{r4, r5, r6, lr}
 80180ce:	fba1 5402 	umull	r5, r4, r1, r2
 80180d2:	b93c      	cbnz	r4, 80180e4 <_calloc_r+0x18>
 80180d4:	4629      	mov	r1, r5
 80180d6:	f000 f899 	bl	801820c <_malloc_r>
 80180da:	4606      	mov	r6, r0
 80180dc:	b928      	cbnz	r0, 80180ea <_calloc_r+0x1e>
 80180de:	2600      	movs	r6, #0
 80180e0:	4630      	mov	r0, r6
 80180e2:	bd70      	pop	{r4, r5, r6, pc}
 80180e4:	220c      	movs	r2, #12
 80180e6:	6002      	str	r2, [r0, #0]
 80180e8:	e7f9      	b.n	80180de <_calloc_r+0x12>
 80180ea:	462a      	mov	r2, r5
 80180ec:	4621      	mov	r1, r4
 80180ee:	f000 fccf 	bl	8018a90 <memset>
 80180f2:	e7f5      	b.n	80180e0 <_calloc_r+0x14>

080180f4 <exit>:
 80180f4:	b508      	push	{r3, lr}
 80180f6:	4b06      	ldr	r3, [pc, #24]	@ (8018110 <exit+0x1c>)
 80180f8:	4604      	mov	r4, r0
 80180fa:	b113      	cbz	r3, 8018102 <exit+0xe>
 80180fc:	2100      	movs	r1, #0
 80180fe:	f3af 8000 	nop.w
 8018102:	4b04      	ldr	r3, [pc, #16]	@ (8018114 <exit+0x20>)
 8018104:	681b      	ldr	r3, [r3, #0]
 8018106:	b103      	cbz	r3, 801810a <exit+0x16>
 8018108:	4798      	blx	r3
 801810a:	4620      	mov	r0, r4
 801810c:	f7e9 ff0e 	bl	8001f2c <_exit>
 8018110:	00000000 	.word	0x00000000
 8018114:	2000b330 	.word	0x2000b330

08018118 <getenv>:
 8018118:	b507      	push	{r0, r1, r2, lr}
 801811a:	4b04      	ldr	r3, [pc, #16]	@ (801812c <getenv+0x14>)
 801811c:	4601      	mov	r1, r0
 801811e:	aa01      	add	r2, sp, #4
 8018120:	6818      	ldr	r0, [r3, #0]
 8018122:	f000 f805 	bl	8018130 <_findenv_r>
 8018126:	b003      	add	sp, #12
 8018128:	f85d fb04 	ldr.w	pc, [sp], #4
 801812c:	200003b0 	.word	0x200003b0

08018130 <_findenv_r>:
 8018130:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018134:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80181a4 <_findenv_r+0x74>
 8018138:	4606      	mov	r6, r0
 801813a:	4689      	mov	r9, r1
 801813c:	4617      	mov	r7, r2
 801813e:	f000 fd9d 	bl	8018c7c <__env_lock>
 8018142:	f8da 4000 	ldr.w	r4, [sl]
 8018146:	b134      	cbz	r4, 8018156 <_findenv_r+0x26>
 8018148:	464b      	mov	r3, r9
 801814a:	4698      	mov	r8, r3
 801814c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018150:	b13a      	cbz	r2, 8018162 <_findenv_r+0x32>
 8018152:	2a3d      	cmp	r2, #61	@ 0x3d
 8018154:	d1f9      	bne.n	801814a <_findenv_r+0x1a>
 8018156:	4630      	mov	r0, r6
 8018158:	f000 fd96 	bl	8018c88 <__env_unlock>
 801815c:	2000      	movs	r0, #0
 801815e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018162:	eba8 0809 	sub.w	r8, r8, r9
 8018166:	46a3      	mov	fp, r4
 8018168:	f854 0b04 	ldr.w	r0, [r4], #4
 801816c:	2800      	cmp	r0, #0
 801816e:	d0f2      	beq.n	8018156 <_findenv_r+0x26>
 8018170:	4642      	mov	r2, r8
 8018172:	4649      	mov	r1, r9
 8018174:	f000 fca1 	bl	8018aba <strncmp>
 8018178:	2800      	cmp	r0, #0
 801817a:	d1f4      	bne.n	8018166 <_findenv_r+0x36>
 801817c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018180:	eb03 0508 	add.w	r5, r3, r8
 8018184:	f813 3008 	ldrb.w	r3, [r3, r8]
 8018188:	2b3d      	cmp	r3, #61	@ 0x3d
 801818a:	d1ec      	bne.n	8018166 <_findenv_r+0x36>
 801818c:	f8da 3000 	ldr.w	r3, [sl]
 8018190:	ebab 0303 	sub.w	r3, fp, r3
 8018194:	109b      	asrs	r3, r3, #2
 8018196:	4630      	mov	r0, r6
 8018198:	603b      	str	r3, [r7, #0]
 801819a:	f000 fd75 	bl	8018c88 <__env_unlock>
 801819e:	1c68      	adds	r0, r5, #1
 80181a0:	e7dd      	b.n	801815e <_findenv_r+0x2e>
 80181a2:	bf00      	nop
 80181a4:	20000000 	.word	0x20000000

080181a8 <malloc>:
 80181a8:	4b02      	ldr	r3, [pc, #8]	@ (80181b4 <malloc+0xc>)
 80181aa:	4601      	mov	r1, r0
 80181ac:	6818      	ldr	r0, [r3, #0]
 80181ae:	f000 b82d 	b.w	801820c <_malloc_r>
 80181b2:	bf00      	nop
 80181b4:	200003b0 	.word	0x200003b0

080181b8 <free>:
 80181b8:	4b02      	ldr	r3, [pc, #8]	@ (80181c4 <free+0xc>)
 80181ba:	4601      	mov	r1, r0
 80181bc:	6818      	ldr	r0, [r3, #0]
 80181be:	f000 bd69 	b.w	8018c94 <_free_r>
 80181c2:	bf00      	nop
 80181c4:	200003b0 	.word	0x200003b0

080181c8 <sbrk_aligned>:
 80181c8:	b570      	push	{r4, r5, r6, lr}
 80181ca:	4e0f      	ldr	r6, [pc, #60]	@ (8018208 <sbrk_aligned+0x40>)
 80181cc:	460c      	mov	r4, r1
 80181ce:	6831      	ldr	r1, [r6, #0]
 80181d0:	4605      	mov	r5, r0
 80181d2:	b911      	cbnz	r1, 80181da <sbrk_aligned+0x12>
 80181d4:	f000 fcce 	bl	8018b74 <_sbrk_r>
 80181d8:	6030      	str	r0, [r6, #0]
 80181da:	4621      	mov	r1, r4
 80181dc:	4628      	mov	r0, r5
 80181de:	f000 fcc9 	bl	8018b74 <_sbrk_r>
 80181e2:	1c43      	adds	r3, r0, #1
 80181e4:	d103      	bne.n	80181ee <sbrk_aligned+0x26>
 80181e6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80181ea:	4620      	mov	r0, r4
 80181ec:	bd70      	pop	{r4, r5, r6, pc}
 80181ee:	1cc4      	adds	r4, r0, #3
 80181f0:	f024 0403 	bic.w	r4, r4, #3
 80181f4:	42a0      	cmp	r0, r4
 80181f6:	d0f8      	beq.n	80181ea <sbrk_aligned+0x22>
 80181f8:	1a21      	subs	r1, r4, r0
 80181fa:	4628      	mov	r0, r5
 80181fc:	f000 fcba 	bl	8018b74 <_sbrk_r>
 8018200:	3001      	adds	r0, #1
 8018202:	d1f2      	bne.n	80181ea <sbrk_aligned+0x22>
 8018204:	e7ef      	b.n	80181e6 <sbrk_aligned+0x1e>
 8018206:	bf00      	nop
 8018208:	2000b1f0 	.word	0x2000b1f0

0801820c <_malloc_r>:
 801820c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018210:	1ccd      	adds	r5, r1, #3
 8018212:	f025 0503 	bic.w	r5, r5, #3
 8018216:	3508      	adds	r5, #8
 8018218:	2d0c      	cmp	r5, #12
 801821a:	bf38      	it	cc
 801821c:	250c      	movcc	r5, #12
 801821e:	2d00      	cmp	r5, #0
 8018220:	4606      	mov	r6, r0
 8018222:	db01      	blt.n	8018228 <_malloc_r+0x1c>
 8018224:	42a9      	cmp	r1, r5
 8018226:	d904      	bls.n	8018232 <_malloc_r+0x26>
 8018228:	230c      	movs	r3, #12
 801822a:	6033      	str	r3, [r6, #0]
 801822c:	2000      	movs	r0, #0
 801822e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018232:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018308 <_malloc_r+0xfc>
 8018236:	f000 f869 	bl	801830c <__malloc_lock>
 801823a:	f8d8 3000 	ldr.w	r3, [r8]
 801823e:	461c      	mov	r4, r3
 8018240:	bb44      	cbnz	r4, 8018294 <_malloc_r+0x88>
 8018242:	4629      	mov	r1, r5
 8018244:	4630      	mov	r0, r6
 8018246:	f7ff ffbf 	bl	80181c8 <sbrk_aligned>
 801824a:	1c43      	adds	r3, r0, #1
 801824c:	4604      	mov	r4, r0
 801824e:	d158      	bne.n	8018302 <_malloc_r+0xf6>
 8018250:	f8d8 4000 	ldr.w	r4, [r8]
 8018254:	4627      	mov	r7, r4
 8018256:	2f00      	cmp	r7, #0
 8018258:	d143      	bne.n	80182e2 <_malloc_r+0xd6>
 801825a:	2c00      	cmp	r4, #0
 801825c:	d04b      	beq.n	80182f6 <_malloc_r+0xea>
 801825e:	6823      	ldr	r3, [r4, #0]
 8018260:	4639      	mov	r1, r7
 8018262:	4630      	mov	r0, r6
 8018264:	eb04 0903 	add.w	r9, r4, r3
 8018268:	f000 fc84 	bl	8018b74 <_sbrk_r>
 801826c:	4581      	cmp	r9, r0
 801826e:	d142      	bne.n	80182f6 <_malloc_r+0xea>
 8018270:	6821      	ldr	r1, [r4, #0]
 8018272:	1a6d      	subs	r5, r5, r1
 8018274:	4629      	mov	r1, r5
 8018276:	4630      	mov	r0, r6
 8018278:	f7ff ffa6 	bl	80181c8 <sbrk_aligned>
 801827c:	3001      	adds	r0, #1
 801827e:	d03a      	beq.n	80182f6 <_malloc_r+0xea>
 8018280:	6823      	ldr	r3, [r4, #0]
 8018282:	442b      	add	r3, r5
 8018284:	6023      	str	r3, [r4, #0]
 8018286:	f8d8 3000 	ldr.w	r3, [r8]
 801828a:	685a      	ldr	r2, [r3, #4]
 801828c:	bb62      	cbnz	r2, 80182e8 <_malloc_r+0xdc>
 801828e:	f8c8 7000 	str.w	r7, [r8]
 8018292:	e00f      	b.n	80182b4 <_malloc_r+0xa8>
 8018294:	6822      	ldr	r2, [r4, #0]
 8018296:	1b52      	subs	r2, r2, r5
 8018298:	d420      	bmi.n	80182dc <_malloc_r+0xd0>
 801829a:	2a0b      	cmp	r2, #11
 801829c:	d917      	bls.n	80182ce <_malloc_r+0xc2>
 801829e:	1961      	adds	r1, r4, r5
 80182a0:	42a3      	cmp	r3, r4
 80182a2:	6025      	str	r5, [r4, #0]
 80182a4:	bf18      	it	ne
 80182a6:	6059      	strne	r1, [r3, #4]
 80182a8:	6863      	ldr	r3, [r4, #4]
 80182aa:	bf08      	it	eq
 80182ac:	f8c8 1000 	streq.w	r1, [r8]
 80182b0:	5162      	str	r2, [r4, r5]
 80182b2:	604b      	str	r3, [r1, #4]
 80182b4:	4630      	mov	r0, r6
 80182b6:	f000 f82f 	bl	8018318 <__malloc_unlock>
 80182ba:	f104 000b 	add.w	r0, r4, #11
 80182be:	1d23      	adds	r3, r4, #4
 80182c0:	f020 0007 	bic.w	r0, r0, #7
 80182c4:	1ac2      	subs	r2, r0, r3
 80182c6:	bf1c      	itt	ne
 80182c8:	1a1b      	subne	r3, r3, r0
 80182ca:	50a3      	strne	r3, [r4, r2]
 80182cc:	e7af      	b.n	801822e <_malloc_r+0x22>
 80182ce:	6862      	ldr	r2, [r4, #4]
 80182d0:	42a3      	cmp	r3, r4
 80182d2:	bf0c      	ite	eq
 80182d4:	f8c8 2000 	streq.w	r2, [r8]
 80182d8:	605a      	strne	r2, [r3, #4]
 80182da:	e7eb      	b.n	80182b4 <_malloc_r+0xa8>
 80182dc:	4623      	mov	r3, r4
 80182de:	6864      	ldr	r4, [r4, #4]
 80182e0:	e7ae      	b.n	8018240 <_malloc_r+0x34>
 80182e2:	463c      	mov	r4, r7
 80182e4:	687f      	ldr	r7, [r7, #4]
 80182e6:	e7b6      	b.n	8018256 <_malloc_r+0x4a>
 80182e8:	461a      	mov	r2, r3
 80182ea:	685b      	ldr	r3, [r3, #4]
 80182ec:	42a3      	cmp	r3, r4
 80182ee:	d1fb      	bne.n	80182e8 <_malloc_r+0xdc>
 80182f0:	2300      	movs	r3, #0
 80182f2:	6053      	str	r3, [r2, #4]
 80182f4:	e7de      	b.n	80182b4 <_malloc_r+0xa8>
 80182f6:	230c      	movs	r3, #12
 80182f8:	6033      	str	r3, [r6, #0]
 80182fa:	4630      	mov	r0, r6
 80182fc:	f000 f80c 	bl	8018318 <__malloc_unlock>
 8018300:	e794      	b.n	801822c <_malloc_r+0x20>
 8018302:	6005      	str	r5, [r0, #0]
 8018304:	e7d6      	b.n	80182b4 <_malloc_r+0xa8>
 8018306:	bf00      	nop
 8018308:	2000b1f4 	.word	0x2000b1f4

0801830c <__malloc_lock>:
 801830c:	4801      	ldr	r0, [pc, #4]	@ (8018314 <__malloc_lock+0x8>)
 801830e:	f000 bc7e 	b.w	8018c0e <__retarget_lock_acquire_recursive>
 8018312:	bf00      	nop
 8018314:	2000b339 	.word	0x2000b339

08018318 <__malloc_unlock>:
 8018318:	4801      	ldr	r0, [pc, #4]	@ (8018320 <__malloc_unlock+0x8>)
 801831a:	f000 bc79 	b.w	8018c10 <__retarget_lock_release_recursive>
 801831e:	bf00      	nop
 8018320:	2000b339 	.word	0x2000b339

08018324 <srand>:
 8018324:	b538      	push	{r3, r4, r5, lr}
 8018326:	4b10      	ldr	r3, [pc, #64]	@ (8018368 <srand+0x44>)
 8018328:	681d      	ldr	r5, [r3, #0]
 801832a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801832c:	4604      	mov	r4, r0
 801832e:	b9b3      	cbnz	r3, 801835e <srand+0x3a>
 8018330:	2018      	movs	r0, #24
 8018332:	f7ff ff39 	bl	80181a8 <malloc>
 8018336:	4602      	mov	r2, r0
 8018338:	6328      	str	r0, [r5, #48]	@ 0x30
 801833a:	b920      	cbnz	r0, 8018346 <srand+0x22>
 801833c:	4b0b      	ldr	r3, [pc, #44]	@ (801836c <srand+0x48>)
 801833e:	480c      	ldr	r0, [pc, #48]	@ (8018370 <srand+0x4c>)
 8018340:	2146      	movs	r1, #70	@ 0x46
 8018342:	f000 fc7d 	bl	8018c40 <__assert_func>
 8018346:	490b      	ldr	r1, [pc, #44]	@ (8018374 <srand+0x50>)
 8018348:	4b0b      	ldr	r3, [pc, #44]	@ (8018378 <srand+0x54>)
 801834a:	e9c0 1300 	strd	r1, r3, [r0]
 801834e:	4b0b      	ldr	r3, [pc, #44]	@ (801837c <srand+0x58>)
 8018350:	6083      	str	r3, [r0, #8]
 8018352:	230b      	movs	r3, #11
 8018354:	8183      	strh	r3, [r0, #12]
 8018356:	2100      	movs	r1, #0
 8018358:	2001      	movs	r0, #1
 801835a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801835e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018360:	2200      	movs	r2, #0
 8018362:	611c      	str	r4, [r3, #16]
 8018364:	615a      	str	r2, [r3, #20]
 8018366:	bd38      	pop	{r3, r4, r5, pc}
 8018368:	200003b0 	.word	0x200003b0
 801836c:	0801aa2a 	.word	0x0801aa2a
 8018370:	0801aa41 	.word	0x0801aa41
 8018374:	abcd330e 	.word	0xabcd330e
 8018378:	e66d1234 	.word	0xe66d1234
 801837c:	0005deec 	.word	0x0005deec

08018380 <rand>:
 8018380:	4b16      	ldr	r3, [pc, #88]	@ (80183dc <rand+0x5c>)
 8018382:	b510      	push	{r4, lr}
 8018384:	681c      	ldr	r4, [r3, #0]
 8018386:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018388:	b9b3      	cbnz	r3, 80183b8 <rand+0x38>
 801838a:	2018      	movs	r0, #24
 801838c:	f7ff ff0c 	bl	80181a8 <malloc>
 8018390:	4602      	mov	r2, r0
 8018392:	6320      	str	r0, [r4, #48]	@ 0x30
 8018394:	b920      	cbnz	r0, 80183a0 <rand+0x20>
 8018396:	4b12      	ldr	r3, [pc, #72]	@ (80183e0 <rand+0x60>)
 8018398:	4812      	ldr	r0, [pc, #72]	@ (80183e4 <rand+0x64>)
 801839a:	2152      	movs	r1, #82	@ 0x52
 801839c:	f000 fc50 	bl	8018c40 <__assert_func>
 80183a0:	4911      	ldr	r1, [pc, #68]	@ (80183e8 <rand+0x68>)
 80183a2:	4b12      	ldr	r3, [pc, #72]	@ (80183ec <rand+0x6c>)
 80183a4:	e9c0 1300 	strd	r1, r3, [r0]
 80183a8:	4b11      	ldr	r3, [pc, #68]	@ (80183f0 <rand+0x70>)
 80183aa:	6083      	str	r3, [r0, #8]
 80183ac:	230b      	movs	r3, #11
 80183ae:	8183      	strh	r3, [r0, #12]
 80183b0:	2100      	movs	r1, #0
 80183b2:	2001      	movs	r0, #1
 80183b4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80183b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80183ba:	480e      	ldr	r0, [pc, #56]	@ (80183f4 <rand+0x74>)
 80183bc:	690b      	ldr	r3, [r1, #16]
 80183be:	694c      	ldr	r4, [r1, #20]
 80183c0:	4a0d      	ldr	r2, [pc, #52]	@ (80183f8 <rand+0x78>)
 80183c2:	4358      	muls	r0, r3
 80183c4:	fb02 0004 	mla	r0, r2, r4, r0
 80183c8:	fba3 3202 	umull	r3, r2, r3, r2
 80183cc:	3301      	adds	r3, #1
 80183ce:	eb40 0002 	adc.w	r0, r0, r2
 80183d2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80183d6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80183da:	bd10      	pop	{r4, pc}
 80183dc:	200003b0 	.word	0x200003b0
 80183e0:	0801aa2a 	.word	0x0801aa2a
 80183e4:	0801aa41 	.word	0x0801aa41
 80183e8:	abcd330e 	.word	0xabcd330e
 80183ec:	e66d1234 	.word	0xe66d1234
 80183f0:	0005deec 	.word	0x0005deec
 80183f4:	5851f42d 	.word	0x5851f42d
 80183f8:	4c957f2d 	.word	0x4c957f2d

080183fc <realloc>:
 80183fc:	4b02      	ldr	r3, [pc, #8]	@ (8018408 <realloc+0xc>)
 80183fe:	460a      	mov	r2, r1
 8018400:	4601      	mov	r1, r0
 8018402:	6818      	ldr	r0, [r3, #0]
 8018404:	f000 b802 	b.w	801840c <_realloc_r>
 8018408:	200003b0 	.word	0x200003b0

0801840c <_realloc_r>:
 801840c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018410:	4680      	mov	r8, r0
 8018412:	4615      	mov	r5, r2
 8018414:	460c      	mov	r4, r1
 8018416:	b921      	cbnz	r1, 8018422 <_realloc_r+0x16>
 8018418:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801841c:	4611      	mov	r1, r2
 801841e:	f7ff bef5 	b.w	801820c <_malloc_r>
 8018422:	b92a      	cbnz	r2, 8018430 <_realloc_r+0x24>
 8018424:	f000 fc36 	bl	8018c94 <_free_r>
 8018428:	2400      	movs	r4, #0
 801842a:	4620      	mov	r0, r4
 801842c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018430:	f000 fc7a 	bl	8018d28 <_malloc_usable_size_r>
 8018434:	4285      	cmp	r5, r0
 8018436:	4606      	mov	r6, r0
 8018438:	d802      	bhi.n	8018440 <_realloc_r+0x34>
 801843a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801843e:	d8f4      	bhi.n	801842a <_realloc_r+0x1e>
 8018440:	4629      	mov	r1, r5
 8018442:	4640      	mov	r0, r8
 8018444:	f7ff fee2 	bl	801820c <_malloc_r>
 8018448:	4607      	mov	r7, r0
 801844a:	2800      	cmp	r0, #0
 801844c:	d0ec      	beq.n	8018428 <_realloc_r+0x1c>
 801844e:	42b5      	cmp	r5, r6
 8018450:	462a      	mov	r2, r5
 8018452:	4621      	mov	r1, r4
 8018454:	bf28      	it	cs
 8018456:	4632      	movcs	r2, r6
 8018458:	f000 fbe3 	bl	8018c22 <memcpy>
 801845c:	4621      	mov	r1, r4
 801845e:	4640      	mov	r0, r8
 8018460:	f000 fc18 	bl	8018c94 <_free_r>
 8018464:	463c      	mov	r4, r7
 8018466:	e7e0      	b.n	801842a <_realloc_r+0x1e>

08018468 <_strtoul_l.constprop.0>:
 8018468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801846c:	4e34      	ldr	r6, [pc, #208]	@ (8018540 <_strtoul_l.constprop.0+0xd8>)
 801846e:	4686      	mov	lr, r0
 8018470:	460d      	mov	r5, r1
 8018472:	4628      	mov	r0, r5
 8018474:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018478:	5d37      	ldrb	r7, [r6, r4]
 801847a:	f017 0708 	ands.w	r7, r7, #8
 801847e:	d1f8      	bne.n	8018472 <_strtoul_l.constprop.0+0xa>
 8018480:	2c2d      	cmp	r4, #45	@ 0x2d
 8018482:	d12f      	bne.n	80184e4 <_strtoul_l.constprop.0+0x7c>
 8018484:	782c      	ldrb	r4, [r5, #0]
 8018486:	2701      	movs	r7, #1
 8018488:	1c85      	adds	r5, r0, #2
 801848a:	f033 0010 	bics.w	r0, r3, #16
 801848e:	d109      	bne.n	80184a4 <_strtoul_l.constprop.0+0x3c>
 8018490:	2c30      	cmp	r4, #48	@ 0x30
 8018492:	d12c      	bne.n	80184ee <_strtoul_l.constprop.0+0x86>
 8018494:	7828      	ldrb	r0, [r5, #0]
 8018496:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801849a:	2858      	cmp	r0, #88	@ 0x58
 801849c:	d127      	bne.n	80184ee <_strtoul_l.constprop.0+0x86>
 801849e:	786c      	ldrb	r4, [r5, #1]
 80184a0:	2310      	movs	r3, #16
 80184a2:	3502      	adds	r5, #2
 80184a4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80184a8:	2600      	movs	r6, #0
 80184aa:	fbb8 f8f3 	udiv	r8, r8, r3
 80184ae:	fb03 f908 	mul.w	r9, r3, r8
 80184b2:	ea6f 0909 	mvn.w	r9, r9
 80184b6:	4630      	mov	r0, r6
 80184b8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80184bc:	f1bc 0f09 	cmp.w	ip, #9
 80184c0:	d81c      	bhi.n	80184fc <_strtoul_l.constprop.0+0x94>
 80184c2:	4664      	mov	r4, ip
 80184c4:	42a3      	cmp	r3, r4
 80184c6:	dd2a      	ble.n	801851e <_strtoul_l.constprop.0+0xb6>
 80184c8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80184cc:	d007      	beq.n	80184de <_strtoul_l.constprop.0+0x76>
 80184ce:	4580      	cmp	r8, r0
 80184d0:	d322      	bcc.n	8018518 <_strtoul_l.constprop.0+0xb0>
 80184d2:	d101      	bne.n	80184d8 <_strtoul_l.constprop.0+0x70>
 80184d4:	45a1      	cmp	r9, r4
 80184d6:	db1f      	blt.n	8018518 <_strtoul_l.constprop.0+0xb0>
 80184d8:	fb00 4003 	mla	r0, r0, r3, r4
 80184dc:	2601      	movs	r6, #1
 80184de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80184e2:	e7e9      	b.n	80184b8 <_strtoul_l.constprop.0+0x50>
 80184e4:	2c2b      	cmp	r4, #43	@ 0x2b
 80184e6:	bf04      	itt	eq
 80184e8:	782c      	ldrbeq	r4, [r5, #0]
 80184ea:	1c85      	addeq	r5, r0, #2
 80184ec:	e7cd      	b.n	801848a <_strtoul_l.constprop.0+0x22>
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d1d8      	bne.n	80184a4 <_strtoul_l.constprop.0+0x3c>
 80184f2:	2c30      	cmp	r4, #48	@ 0x30
 80184f4:	bf0c      	ite	eq
 80184f6:	2308      	moveq	r3, #8
 80184f8:	230a      	movne	r3, #10
 80184fa:	e7d3      	b.n	80184a4 <_strtoul_l.constprop.0+0x3c>
 80184fc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8018500:	f1bc 0f19 	cmp.w	ip, #25
 8018504:	d801      	bhi.n	801850a <_strtoul_l.constprop.0+0xa2>
 8018506:	3c37      	subs	r4, #55	@ 0x37
 8018508:	e7dc      	b.n	80184c4 <_strtoul_l.constprop.0+0x5c>
 801850a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801850e:	f1bc 0f19 	cmp.w	ip, #25
 8018512:	d804      	bhi.n	801851e <_strtoul_l.constprop.0+0xb6>
 8018514:	3c57      	subs	r4, #87	@ 0x57
 8018516:	e7d5      	b.n	80184c4 <_strtoul_l.constprop.0+0x5c>
 8018518:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801851c:	e7df      	b.n	80184de <_strtoul_l.constprop.0+0x76>
 801851e:	1c73      	adds	r3, r6, #1
 8018520:	d106      	bne.n	8018530 <_strtoul_l.constprop.0+0xc8>
 8018522:	2322      	movs	r3, #34	@ 0x22
 8018524:	f8ce 3000 	str.w	r3, [lr]
 8018528:	4630      	mov	r0, r6
 801852a:	b932      	cbnz	r2, 801853a <_strtoul_l.constprop.0+0xd2>
 801852c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018530:	b107      	cbz	r7, 8018534 <_strtoul_l.constprop.0+0xcc>
 8018532:	4240      	negs	r0, r0
 8018534:	2a00      	cmp	r2, #0
 8018536:	d0f9      	beq.n	801852c <_strtoul_l.constprop.0+0xc4>
 8018538:	b106      	cbz	r6, 801853c <_strtoul_l.constprop.0+0xd4>
 801853a:	1e69      	subs	r1, r5, #1
 801853c:	6011      	str	r1, [r2, #0]
 801853e:	e7f5      	b.n	801852c <_strtoul_l.constprop.0+0xc4>
 8018540:	0801aa9a 	.word	0x0801aa9a

08018544 <strtoul>:
 8018544:	4613      	mov	r3, r2
 8018546:	460a      	mov	r2, r1
 8018548:	4601      	mov	r1, r0
 801854a:	4802      	ldr	r0, [pc, #8]	@ (8018554 <strtoul+0x10>)
 801854c:	6800      	ldr	r0, [r0, #0]
 801854e:	f7ff bf8b 	b.w	8018468 <_strtoul_l.constprop.0>
 8018552:	bf00      	nop
 8018554:	200003b0 	.word	0x200003b0

08018558 <std>:
 8018558:	2300      	movs	r3, #0
 801855a:	b510      	push	{r4, lr}
 801855c:	4604      	mov	r4, r0
 801855e:	e9c0 3300 	strd	r3, r3, [r0]
 8018562:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018566:	6083      	str	r3, [r0, #8]
 8018568:	8181      	strh	r1, [r0, #12]
 801856a:	6643      	str	r3, [r0, #100]	@ 0x64
 801856c:	81c2      	strh	r2, [r0, #14]
 801856e:	6183      	str	r3, [r0, #24]
 8018570:	4619      	mov	r1, r3
 8018572:	2208      	movs	r2, #8
 8018574:	305c      	adds	r0, #92	@ 0x5c
 8018576:	f000 fa8b 	bl	8018a90 <memset>
 801857a:	4b0d      	ldr	r3, [pc, #52]	@ (80185b0 <std+0x58>)
 801857c:	6263      	str	r3, [r4, #36]	@ 0x24
 801857e:	4b0d      	ldr	r3, [pc, #52]	@ (80185b4 <std+0x5c>)
 8018580:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018582:	4b0d      	ldr	r3, [pc, #52]	@ (80185b8 <std+0x60>)
 8018584:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018586:	4b0d      	ldr	r3, [pc, #52]	@ (80185bc <std+0x64>)
 8018588:	6323      	str	r3, [r4, #48]	@ 0x30
 801858a:	4b0d      	ldr	r3, [pc, #52]	@ (80185c0 <std+0x68>)
 801858c:	6224      	str	r4, [r4, #32]
 801858e:	429c      	cmp	r4, r3
 8018590:	d006      	beq.n	80185a0 <std+0x48>
 8018592:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018596:	4294      	cmp	r4, r2
 8018598:	d002      	beq.n	80185a0 <std+0x48>
 801859a:	33d0      	adds	r3, #208	@ 0xd0
 801859c:	429c      	cmp	r4, r3
 801859e:	d105      	bne.n	80185ac <std+0x54>
 80185a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80185a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80185a8:	f000 bb30 	b.w	8018c0c <__retarget_lock_init_recursive>
 80185ac:	bd10      	pop	{r4, pc}
 80185ae:	bf00      	nop
 80185b0:	0801881d 	.word	0x0801881d
 80185b4:	0801883f 	.word	0x0801883f
 80185b8:	08018877 	.word	0x08018877
 80185bc:	0801889b 	.word	0x0801889b
 80185c0:	2000b1f8 	.word	0x2000b1f8

080185c4 <stdio_exit_handler>:
 80185c4:	4a02      	ldr	r2, [pc, #8]	@ (80185d0 <stdio_exit_handler+0xc>)
 80185c6:	4903      	ldr	r1, [pc, #12]	@ (80185d4 <stdio_exit_handler+0x10>)
 80185c8:	4803      	ldr	r0, [pc, #12]	@ (80185d8 <stdio_exit_handler+0x14>)
 80185ca:	f000 b869 	b.w	80186a0 <_fwalk_sglue>
 80185ce:	bf00      	nop
 80185d0:	200003a4 	.word	0x200003a4
 80185d4:	08019691 	.word	0x08019691
 80185d8:	200003b4 	.word	0x200003b4

080185dc <cleanup_stdio>:
 80185dc:	6841      	ldr	r1, [r0, #4]
 80185de:	4b0c      	ldr	r3, [pc, #48]	@ (8018610 <cleanup_stdio+0x34>)
 80185e0:	4299      	cmp	r1, r3
 80185e2:	b510      	push	{r4, lr}
 80185e4:	4604      	mov	r4, r0
 80185e6:	d001      	beq.n	80185ec <cleanup_stdio+0x10>
 80185e8:	f001 f852 	bl	8019690 <_fflush_r>
 80185ec:	68a1      	ldr	r1, [r4, #8]
 80185ee:	4b09      	ldr	r3, [pc, #36]	@ (8018614 <cleanup_stdio+0x38>)
 80185f0:	4299      	cmp	r1, r3
 80185f2:	d002      	beq.n	80185fa <cleanup_stdio+0x1e>
 80185f4:	4620      	mov	r0, r4
 80185f6:	f001 f84b 	bl	8019690 <_fflush_r>
 80185fa:	68e1      	ldr	r1, [r4, #12]
 80185fc:	4b06      	ldr	r3, [pc, #24]	@ (8018618 <cleanup_stdio+0x3c>)
 80185fe:	4299      	cmp	r1, r3
 8018600:	d004      	beq.n	801860c <cleanup_stdio+0x30>
 8018602:	4620      	mov	r0, r4
 8018604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018608:	f001 b842 	b.w	8019690 <_fflush_r>
 801860c:	bd10      	pop	{r4, pc}
 801860e:	bf00      	nop
 8018610:	2000b1f8 	.word	0x2000b1f8
 8018614:	2000b260 	.word	0x2000b260
 8018618:	2000b2c8 	.word	0x2000b2c8

0801861c <global_stdio_init.part.0>:
 801861c:	b510      	push	{r4, lr}
 801861e:	4b0b      	ldr	r3, [pc, #44]	@ (801864c <global_stdio_init.part.0+0x30>)
 8018620:	4c0b      	ldr	r4, [pc, #44]	@ (8018650 <global_stdio_init.part.0+0x34>)
 8018622:	4a0c      	ldr	r2, [pc, #48]	@ (8018654 <global_stdio_init.part.0+0x38>)
 8018624:	601a      	str	r2, [r3, #0]
 8018626:	4620      	mov	r0, r4
 8018628:	2200      	movs	r2, #0
 801862a:	2104      	movs	r1, #4
 801862c:	f7ff ff94 	bl	8018558 <std>
 8018630:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018634:	2201      	movs	r2, #1
 8018636:	2109      	movs	r1, #9
 8018638:	f7ff ff8e 	bl	8018558 <std>
 801863c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018640:	2202      	movs	r2, #2
 8018642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018646:	2112      	movs	r1, #18
 8018648:	f7ff bf86 	b.w	8018558 <std>
 801864c:	2000b330 	.word	0x2000b330
 8018650:	2000b1f8 	.word	0x2000b1f8
 8018654:	080185c5 	.word	0x080185c5

08018658 <__sfp_lock_acquire>:
 8018658:	4801      	ldr	r0, [pc, #4]	@ (8018660 <__sfp_lock_acquire+0x8>)
 801865a:	f000 bad8 	b.w	8018c0e <__retarget_lock_acquire_recursive>
 801865e:	bf00      	nop
 8018660:	2000b33a 	.word	0x2000b33a

08018664 <__sfp_lock_release>:
 8018664:	4801      	ldr	r0, [pc, #4]	@ (801866c <__sfp_lock_release+0x8>)
 8018666:	f000 bad3 	b.w	8018c10 <__retarget_lock_release_recursive>
 801866a:	bf00      	nop
 801866c:	2000b33a 	.word	0x2000b33a

08018670 <__sinit>:
 8018670:	b510      	push	{r4, lr}
 8018672:	4604      	mov	r4, r0
 8018674:	f7ff fff0 	bl	8018658 <__sfp_lock_acquire>
 8018678:	6a23      	ldr	r3, [r4, #32]
 801867a:	b11b      	cbz	r3, 8018684 <__sinit+0x14>
 801867c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018680:	f7ff bff0 	b.w	8018664 <__sfp_lock_release>
 8018684:	4b04      	ldr	r3, [pc, #16]	@ (8018698 <__sinit+0x28>)
 8018686:	6223      	str	r3, [r4, #32]
 8018688:	4b04      	ldr	r3, [pc, #16]	@ (801869c <__sinit+0x2c>)
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	2b00      	cmp	r3, #0
 801868e:	d1f5      	bne.n	801867c <__sinit+0xc>
 8018690:	f7ff ffc4 	bl	801861c <global_stdio_init.part.0>
 8018694:	e7f2      	b.n	801867c <__sinit+0xc>
 8018696:	bf00      	nop
 8018698:	080185dd 	.word	0x080185dd
 801869c:	2000b330 	.word	0x2000b330

080186a0 <_fwalk_sglue>:
 80186a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80186a4:	4607      	mov	r7, r0
 80186a6:	4688      	mov	r8, r1
 80186a8:	4614      	mov	r4, r2
 80186aa:	2600      	movs	r6, #0
 80186ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80186b0:	f1b9 0901 	subs.w	r9, r9, #1
 80186b4:	d505      	bpl.n	80186c2 <_fwalk_sglue+0x22>
 80186b6:	6824      	ldr	r4, [r4, #0]
 80186b8:	2c00      	cmp	r4, #0
 80186ba:	d1f7      	bne.n	80186ac <_fwalk_sglue+0xc>
 80186bc:	4630      	mov	r0, r6
 80186be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80186c2:	89ab      	ldrh	r3, [r5, #12]
 80186c4:	2b01      	cmp	r3, #1
 80186c6:	d907      	bls.n	80186d8 <_fwalk_sglue+0x38>
 80186c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80186cc:	3301      	adds	r3, #1
 80186ce:	d003      	beq.n	80186d8 <_fwalk_sglue+0x38>
 80186d0:	4629      	mov	r1, r5
 80186d2:	4638      	mov	r0, r7
 80186d4:	47c0      	blx	r8
 80186d6:	4306      	orrs	r6, r0
 80186d8:	3568      	adds	r5, #104	@ 0x68
 80186da:	e7e9      	b.n	80186b0 <_fwalk_sglue+0x10>

080186dc <_fwrite_r>:
 80186dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186e0:	9c08      	ldr	r4, [sp, #32]
 80186e2:	468a      	mov	sl, r1
 80186e4:	4690      	mov	r8, r2
 80186e6:	fb02 f903 	mul.w	r9, r2, r3
 80186ea:	4606      	mov	r6, r0
 80186ec:	b118      	cbz	r0, 80186f6 <_fwrite_r+0x1a>
 80186ee:	6a03      	ldr	r3, [r0, #32]
 80186f0:	b90b      	cbnz	r3, 80186f6 <_fwrite_r+0x1a>
 80186f2:	f7ff ffbd 	bl	8018670 <__sinit>
 80186f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80186f8:	07dd      	lsls	r5, r3, #31
 80186fa:	d405      	bmi.n	8018708 <_fwrite_r+0x2c>
 80186fc:	89a3      	ldrh	r3, [r4, #12]
 80186fe:	0598      	lsls	r0, r3, #22
 8018700:	d402      	bmi.n	8018708 <_fwrite_r+0x2c>
 8018702:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018704:	f000 fa83 	bl	8018c0e <__retarget_lock_acquire_recursive>
 8018708:	89a3      	ldrh	r3, [r4, #12]
 801870a:	0719      	lsls	r1, r3, #28
 801870c:	d516      	bpl.n	801873c <_fwrite_r+0x60>
 801870e:	6923      	ldr	r3, [r4, #16]
 8018710:	b1a3      	cbz	r3, 801873c <_fwrite_r+0x60>
 8018712:	2500      	movs	r5, #0
 8018714:	454d      	cmp	r5, r9
 8018716:	d01f      	beq.n	8018758 <_fwrite_r+0x7c>
 8018718:	68a7      	ldr	r7, [r4, #8]
 801871a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801871e:	3f01      	subs	r7, #1
 8018720:	2f00      	cmp	r7, #0
 8018722:	60a7      	str	r7, [r4, #8]
 8018724:	da04      	bge.n	8018730 <_fwrite_r+0x54>
 8018726:	69a3      	ldr	r3, [r4, #24]
 8018728:	429f      	cmp	r7, r3
 801872a:	db0f      	blt.n	801874c <_fwrite_r+0x70>
 801872c:	290a      	cmp	r1, #10
 801872e:	d00d      	beq.n	801874c <_fwrite_r+0x70>
 8018730:	6823      	ldr	r3, [r4, #0]
 8018732:	1c5a      	adds	r2, r3, #1
 8018734:	6022      	str	r2, [r4, #0]
 8018736:	7019      	strb	r1, [r3, #0]
 8018738:	3501      	adds	r5, #1
 801873a:	e7eb      	b.n	8018714 <_fwrite_r+0x38>
 801873c:	4621      	mov	r1, r4
 801873e:	4630      	mov	r0, r6
 8018740:	f000 f926 	bl	8018990 <__swsetup_r>
 8018744:	2800      	cmp	r0, #0
 8018746:	d0e4      	beq.n	8018712 <_fwrite_r+0x36>
 8018748:	2500      	movs	r5, #0
 801874a:	e005      	b.n	8018758 <_fwrite_r+0x7c>
 801874c:	4622      	mov	r2, r4
 801874e:	4630      	mov	r0, r6
 8018750:	f000 f8e0 	bl	8018914 <__swbuf_r>
 8018754:	3001      	adds	r0, #1
 8018756:	d1ef      	bne.n	8018738 <_fwrite_r+0x5c>
 8018758:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801875a:	07da      	lsls	r2, r3, #31
 801875c:	d405      	bmi.n	801876a <_fwrite_r+0x8e>
 801875e:	89a3      	ldrh	r3, [r4, #12]
 8018760:	059b      	lsls	r3, r3, #22
 8018762:	d402      	bmi.n	801876a <_fwrite_r+0x8e>
 8018764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018766:	f000 fa53 	bl	8018c10 <__retarget_lock_release_recursive>
 801876a:	fbb5 f0f8 	udiv	r0, r5, r8
 801876e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08018774 <fwrite>:
 8018774:	b507      	push	{r0, r1, r2, lr}
 8018776:	9300      	str	r3, [sp, #0]
 8018778:	4613      	mov	r3, r2
 801877a:	460a      	mov	r2, r1
 801877c:	4601      	mov	r1, r0
 801877e:	4803      	ldr	r0, [pc, #12]	@ (801878c <fwrite+0x18>)
 8018780:	6800      	ldr	r0, [r0, #0]
 8018782:	f7ff ffab 	bl	80186dc <_fwrite_r>
 8018786:	b003      	add	sp, #12
 8018788:	f85d fb04 	ldr.w	pc, [sp], #4
 801878c:	200003b0 	.word	0x200003b0

08018790 <iprintf>:
 8018790:	b40f      	push	{r0, r1, r2, r3}
 8018792:	b507      	push	{r0, r1, r2, lr}
 8018794:	4906      	ldr	r1, [pc, #24]	@ (80187b0 <iprintf+0x20>)
 8018796:	ab04      	add	r3, sp, #16
 8018798:	6808      	ldr	r0, [r1, #0]
 801879a:	f853 2b04 	ldr.w	r2, [r3], #4
 801879e:	6881      	ldr	r1, [r0, #8]
 80187a0:	9301      	str	r3, [sp, #4]
 80187a2:	f000 fc4b 	bl	801903c <_vfiprintf_r>
 80187a6:	b003      	add	sp, #12
 80187a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80187ac:	b004      	add	sp, #16
 80187ae:	4770      	bx	lr
 80187b0:	200003b0 	.word	0x200003b0

080187b4 <sniprintf>:
 80187b4:	b40c      	push	{r2, r3}
 80187b6:	b530      	push	{r4, r5, lr}
 80187b8:	4b17      	ldr	r3, [pc, #92]	@ (8018818 <sniprintf+0x64>)
 80187ba:	1e0c      	subs	r4, r1, #0
 80187bc:	681d      	ldr	r5, [r3, #0]
 80187be:	b09d      	sub	sp, #116	@ 0x74
 80187c0:	da08      	bge.n	80187d4 <sniprintf+0x20>
 80187c2:	238b      	movs	r3, #139	@ 0x8b
 80187c4:	602b      	str	r3, [r5, #0]
 80187c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80187ca:	b01d      	add	sp, #116	@ 0x74
 80187cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80187d0:	b002      	add	sp, #8
 80187d2:	4770      	bx	lr
 80187d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80187d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80187dc:	bf14      	ite	ne
 80187de:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80187e2:	4623      	moveq	r3, r4
 80187e4:	9304      	str	r3, [sp, #16]
 80187e6:	9307      	str	r3, [sp, #28]
 80187e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80187ec:	9002      	str	r0, [sp, #8]
 80187ee:	9006      	str	r0, [sp, #24]
 80187f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80187f4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80187f6:	ab21      	add	r3, sp, #132	@ 0x84
 80187f8:	a902      	add	r1, sp, #8
 80187fa:	4628      	mov	r0, r5
 80187fc:	9301      	str	r3, [sp, #4]
 80187fe:	f000 faf7 	bl	8018df0 <_svfiprintf_r>
 8018802:	1c43      	adds	r3, r0, #1
 8018804:	bfbc      	itt	lt
 8018806:	238b      	movlt	r3, #139	@ 0x8b
 8018808:	602b      	strlt	r3, [r5, #0]
 801880a:	2c00      	cmp	r4, #0
 801880c:	d0dd      	beq.n	80187ca <sniprintf+0x16>
 801880e:	9b02      	ldr	r3, [sp, #8]
 8018810:	2200      	movs	r2, #0
 8018812:	701a      	strb	r2, [r3, #0]
 8018814:	e7d9      	b.n	80187ca <sniprintf+0x16>
 8018816:	bf00      	nop
 8018818:	200003b0 	.word	0x200003b0

0801881c <__sread>:
 801881c:	b510      	push	{r4, lr}
 801881e:	460c      	mov	r4, r1
 8018820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018824:	f000 f994 	bl	8018b50 <_read_r>
 8018828:	2800      	cmp	r0, #0
 801882a:	bfab      	itete	ge
 801882c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801882e:	89a3      	ldrhlt	r3, [r4, #12]
 8018830:	181b      	addge	r3, r3, r0
 8018832:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8018836:	bfac      	ite	ge
 8018838:	6563      	strge	r3, [r4, #84]	@ 0x54
 801883a:	81a3      	strhlt	r3, [r4, #12]
 801883c:	bd10      	pop	{r4, pc}

0801883e <__swrite>:
 801883e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018842:	461f      	mov	r7, r3
 8018844:	898b      	ldrh	r3, [r1, #12]
 8018846:	05db      	lsls	r3, r3, #23
 8018848:	4605      	mov	r5, r0
 801884a:	460c      	mov	r4, r1
 801884c:	4616      	mov	r6, r2
 801884e:	d505      	bpl.n	801885c <__swrite+0x1e>
 8018850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018854:	2302      	movs	r3, #2
 8018856:	2200      	movs	r2, #0
 8018858:	f000 f968 	bl	8018b2c <_lseek_r>
 801885c:	89a3      	ldrh	r3, [r4, #12]
 801885e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018862:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8018866:	81a3      	strh	r3, [r4, #12]
 8018868:	4632      	mov	r2, r6
 801886a:	463b      	mov	r3, r7
 801886c:	4628      	mov	r0, r5
 801886e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018872:	f000 b98f 	b.w	8018b94 <_write_r>

08018876 <__sseek>:
 8018876:	b510      	push	{r4, lr}
 8018878:	460c      	mov	r4, r1
 801887a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801887e:	f000 f955 	bl	8018b2c <_lseek_r>
 8018882:	1c43      	adds	r3, r0, #1
 8018884:	89a3      	ldrh	r3, [r4, #12]
 8018886:	bf15      	itete	ne
 8018888:	6560      	strne	r0, [r4, #84]	@ 0x54
 801888a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801888e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8018892:	81a3      	strheq	r3, [r4, #12]
 8018894:	bf18      	it	ne
 8018896:	81a3      	strhne	r3, [r4, #12]
 8018898:	bd10      	pop	{r4, pc}

0801889a <__sclose>:
 801889a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801889e:	f000 b935 	b.w	8018b0c <_close_r>

080188a2 <_vsniprintf_r>:
 80188a2:	b530      	push	{r4, r5, lr}
 80188a4:	4614      	mov	r4, r2
 80188a6:	2c00      	cmp	r4, #0
 80188a8:	b09b      	sub	sp, #108	@ 0x6c
 80188aa:	4605      	mov	r5, r0
 80188ac:	461a      	mov	r2, r3
 80188ae:	da05      	bge.n	80188bc <_vsniprintf_r+0x1a>
 80188b0:	238b      	movs	r3, #139	@ 0x8b
 80188b2:	6003      	str	r3, [r0, #0]
 80188b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80188b8:	b01b      	add	sp, #108	@ 0x6c
 80188ba:	bd30      	pop	{r4, r5, pc}
 80188bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80188c0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80188c4:	bf14      	ite	ne
 80188c6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80188ca:	4623      	moveq	r3, r4
 80188cc:	9302      	str	r3, [sp, #8]
 80188ce:	9305      	str	r3, [sp, #20]
 80188d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80188d4:	9100      	str	r1, [sp, #0]
 80188d6:	9104      	str	r1, [sp, #16]
 80188d8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80188dc:	4669      	mov	r1, sp
 80188de:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80188e0:	f000 fa86 	bl	8018df0 <_svfiprintf_r>
 80188e4:	1c43      	adds	r3, r0, #1
 80188e6:	bfbc      	itt	lt
 80188e8:	238b      	movlt	r3, #139	@ 0x8b
 80188ea:	602b      	strlt	r3, [r5, #0]
 80188ec:	2c00      	cmp	r4, #0
 80188ee:	d0e3      	beq.n	80188b8 <_vsniprintf_r+0x16>
 80188f0:	9b00      	ldr	r3, [sp, #0]
 80188f2:	2200      	movs	r2, #0
 80188f4:	701a      	strb	r2, [r3, #0]
 80188f6:	e7df      	b.n	80188b8 <_vsniprintf_r+0x16>

080188f8 <vsniprintf>:
 80188f8:	b507      	push	{r0, r1, r2, lr}
 80188fa:	9300      	str	r3, [sp, #0]
 80188fc:	4613      	mov	r3, r2
 80188fe:	460a      	mov	r2, r1
 8018900:	4601      	mov	r1, r0
 8018902:	4803      	ldr	r0, [pc, #12]	@ (8018910 <vsniprintf+0x18>)
 8018904:	6800      	ldr	r0, [r0, #0]
 8018906:	f7ff ffcc 	bl	80188a2 <_vsniprintf_r>
 801890a:	b003      	add	sp, #12
 801890c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018910:	200003b0 	.word	0x200003b0

08018914 <__swbuf_r>:
 8018914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018916:	460e      	mov	r6, r1
 8018918:	4614      	mov	r4, r2
 801891a:	4605      	mov	r5, r0
 801891c:	b118      	cbz	r0, 8018926 <__swbuf_r+0x12>
 801891e:	6a03      	ldr	r3, [r0, #32]
 8018920:	b90b      	cbnz	r3, 8018926 <__swbuf_r+0x12>
 8018922:	f7ff fea5 	bl	8018670 <__sinit>
 8018926:	69a3      	ldr	r3, [r4, #24]
 8018928:	60a3      	str	r3, [r4, #8]
 801892a:	89a3      	ldrh	r3, [r4, #12]
 801892c:	071a      	lsls	r2, r3, #28
 801892e:	d501      	bpl.n	8018934 <__swbuf_r+0x20>
 8018930:	6923      	ldr	r3, [r4, #16]
 8018932:	b943      	cbnz	r3, 8018946 <__swbuf_r+0x32>
 8018934:	4621      	mov	r1, r4
 8018936:	4628      	mov	r0, r5
 8018938:	f000 f82a 	bl	8018990 <__swsetup_r>
 801893c:	b118      	cbz	r0, 8018946 <__swbuf_r+0x32>
 801893e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8018942:	4638      	mov	r0, r7
 8018944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018946:	6823      	ldr	r3, [r4, #0]
 8018948:	6922      	ldr	r2, [r4, #16]
 801894a:	1a98      	subs	r0, r3, r2
 801894c:	6963      	ldr	r3, [r4, #20]
 801894e:	b2f6      	uxtb	r6, r6
 8018950:	4283      	cmp	r3, r0
 8018952:	4637      	mov	r7, r6
 8018954:	dc05      	bgt.n	8018962 <__swbuf_r+0x4e>
 8018956:	4621      	mov	r1, r4
 8018958:	4628      	mov	r0, r5
 801895a:	f000 fe99 	bl	8019690 <_fflush_r>
 801895e:	2800      	cmp	r0, #0
 8018960:	d1ed      	bne.n	801893e <__swbuf_r+0x2a>
 8018962:	68a3      	ldr	r3, [r4, #8]
 8018964:	3b01      	subs	r3, #1
 8018966:	60a3      	str	r3, [r4, #8]
 8018968:	6823      	ldr	r3, [r4, #0]
 801896a:	1c5a      	adds	r2, r3, #1
 801896c:	6022      	str	r2, [r4, #0]
 801896e:	701e      	strb	r6, [r3, #0]
 8018970:	6962      	ldr	r2, [r4, #20]
 8018972:	1c43      	adds	r3, r0, #1
 8018974:	429a      	cmp	r2, r3
 8018976:	d004      	beq.n	8018982 <__swbuf_r+0x6e>
 8018978:	89a3      	ldrh	r3, [r4, #12]
 801897a:	07db      	lsls	r3, r3, #31
 801897c:	d5e1      	bpl.n	8018942 <__swbuf_r+0x2e>
 801897e:	2e0a      	cmp	r6, #10
 8018980:	d1df      	bne.n	8018942 <__swbuf_r+0x2e>
 8018982:	4621      	mov	r1, r4
 8018984:	4628      	mov	r0, r5
 8018986:	f000 fe83 	bl	8019690 <_fflush_r>
 801898a:	2800      	cmp	r0, #0
 801898c:	d0d9      	beq.n	8018942 <__swbuf_r+0x2e>
 801898e:	e7d6      	b.n	801893e <__swbuf_r+0x2a>

08018990 <__swsetup_r>:
 8018990:	b538      	push	{r3, r4, r5, lr}
 8018992:	4b29      	ldr	r3, [pc, #164]	@ (8018a38 <__swsetup_r+0xa8>)
 8018994:	4605      	mov	r5, r0
 8018996:	6818      	ldr	r0, [r3, #0]
 8018998:	460c      	mov	r4, r1
 801899a:	b118      	cbz	r0, 80189a4 <__swsetup_r+0x14>
 801899c:	6a03      	ldr	r3, [r0, #32]
 801899e:	b90b      	cbnz	r3, 80189a4 <__swsetup_r+0x14>
 80189a0:	f7ff fe66 	bl	8018670 <__sinit>
 80189a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80189a8:	0719      	lsls	r1, r3, #28
 80189aa:	d422      	bmi.n	80189f2 <__swsetup_r+0x62>
 80189ac:	06da      	lsls	r2, r3, #27
 80189ae:	d407      	bmi.n	80189c0 <__swsetup_r+0x30>
 80189b0:	2209      	movs	r2, #9
 80189b2:	602a      	str	r2, [r5, #0]
 80189b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80189b8:	81a3      	strh	r3, [r4, #12]
 80189ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80189be:	e033      	b.n	8018a28 <__swsetup_r+0x98>
 80189c0:	0758      	lsls	r0, r3, #29
 80189c2:	d512      	bpl.n	80189ea <__swsetup_r+0x5a>
 80189c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80189c6:	b141      	cbz	r1, 80189da <__swsetup_r+0x4a>
 80189c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80189cc:	4299      	cmp	r1, r3
 80189ce:	d002      	beq.n	80189d6 <__swsetup_r+0x46>
 80189d0:	4628      	mov	r0, r5
 80189d2:	f000 f95f 	bl	8018c94 <_free_r>
 80189d6:	2300      	movs	r3, #0
 80189d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80189da:	89a3      	ldrh	r3, [r4, #12]
 80189dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80189e0:	81a3      	strh	r3, [r4, #12]
 80189e2:	2300      	movs	r3, #0
 80189e4:	6063      	str	r3, [r4, #4]
 80189e6:	6923      	ldr	r3, [r4, #16]
 80189e8:	6023      	str	r3, [r4, #0]
 80189ea:	89a3      	ldrh	r3, [r4, #12]
 80189ec:	f043 0308 	orr.w	r3, r3, #8
 80189f0:	81a3      	strh	r3, [r4, #12]
 80189f2:	6923      	ldr	r3, [r4, #16]
 80189f4:	b94b      	cbnz	r3, 8018a0a <__swsetup_r+0x7a>
 80189f6:	89a3      	ldrh	r3, [r4, #12]
 80189f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80189fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018a00:	d003      	beq.n	8018a0a <__swsetup_r+0x7a>
 8018a02:	4621      	mov	r1, r4
 8018a04:	4628      	mov	r0, r5
 8018a06:	f000 fea3 	bl	8019750 <__smakebuf_r>
 8018a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a0e:	f013 0201 	ands.w	r2, r3, #1
 8018a12:	d00a      	beq.n	8018a2a <__swsetup_r+0x9a>
 8018a14:	2200      	movs	r2, #0
 8018a16:	60a2      	str	r2, [r4, #8]
 8018a18:	6962      	ldr	r2, [r4, #20]
 8018a1a:	4252      	negs	r2, r2
 8018a1c:	61a2      	str	r2, [r4, #24]
 8018a1e:	6922      	ldr	r2, [r4, #16]
 8018a20:	b942      	cbnz	r2, 8018a34 <__swsetup_r+0xa4>
 8018a22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018a26:	d1c5      	bne.n	80189b4 <__swsetup_r+0x24>
 8018a28:	bd38      	pop	{r3, r4, r5, pc}
 8018a2a:	0799      	lsls	r1, r3, #30
 8018a2c:	bf58      	it	pl
 8018a2e:	6962      	ldrpl	r2, [r4, #20]
 8018a30:	60a2      	str	r2, [r4, #8]
 8018a32:	e7f4      	b.n	8018a1e <__swsetup_r+0x8e>
 8018a34:	2000      	movs	r0, #0
 8018a36:	e7f7      	b.n	8018a28 <__swsetup_r+0x98>
 8018a38:	200003b0 	.word	0x200003b0

08018a3c <memcmp>:
 8018a3c:	b510      	push	{r4, lr}
 8018a3e:	3901      	subs	r1, #1
 8018a40:	4402      	add	r2, r0
 8018a42:	4290      	cmp	r0, r2
 8018a44:	d101      	bne.n	8018a4a <memcmp+0xe>
 8018a46:	2000      	movs	r0, #0
 8018a48:	e005      	b.n	8018a56 <memcmp+0x1a>
 8018a4a:	7803      	ldrb	r3, [r0, #0]
 8018a4c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018a50:	42a3      	cmp	r3, r4
 8018a52:	d001      	beq.n	8018a58 <memcmp+0x1c>
 8018a54:	1b18      	subs	r0, r3, r4
 8018a56:	bd10      	pop	{r4, pc}
 8018a58:	3001      	adds	r0, #1
 8018a5a:	e7f2      	b.n	8018a42 <memcmp+0x6>

08018a5c <memmove>:
 8018a5c:	4288      	cmp	r0, r1
 8018a5e:	b510      	push	{r4, lr}
 8018a60:	eb01 0402 	add.w	r4, r1, r2
 8018a64:	d902      	bls.n	8018a6c <memmove+0x10>
 8018a66:	4284      	cmp	r4, r0
 8018a68:	4623      	mov	r3, r4
 8018a6a:	d807      	bhi.n	8018a7c <memmove+0x20>
 8018a6c:	1e43      	subs	r3, r0, #1
 8018a6e:	42a1      	cmp	r1, r4
 8018a70:	d008      	beq.n	8018a84 <memmove+0x28>
 8018a72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018a76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018a7a:	e7f8      	b.n	8018a6e <memmove+0x12>
 8018a7c:	4402      	add	r2, r0
 8018a7e:	4601      	mov	r1, r0
 8018a80:	428a      	cmp	r2, r1
 8018a82:	d100      	bne.n	8018a86 <memmove+0x2a>
 8018a84:	bd10      	pop	{r4, pc}
 8018a86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018a8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018a8e:	e7f7      	b.n	8018a80 <memmove+0x24>

08018a90 <memset>:
 8018a90:	4402      	add	r2, r0
 8018a92:	4603      	mov	r3, r0
 8018a94:	4293      	cmp	r3, r2
 8018a96:	d100      	bne.n	8018a9a <memset+0xa>
 8018a98:	4770      	bx	lr
 8018a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8018a9e:	e7f9      	b.n	8018a94 <memset+0x4>

08018aa0 <strchr>:
 8018aa0:	b2c9      	uxtb	r1, r1
 8018aa2:	4603      	mov	r3, r0
 8018aa4:	4618      	mov	r0, r3
 8018aa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018aaa:	b112      	cbz	r2, 8018ab2 <strchr+0x12>
 8018aac:	428a      	cmp	r2, r1
 8018aae:	d1f9      	bne.n	8018aa4 <strchr+0x4>
 8018ab0:	4770      	bx	lr
 8018ab2:	2900      	cmp	r1, #0
 8018ab4:	bf18      	it	ne
 8018ab6:	2000      	movne	r0, #0
 8018ab8:	4770      	bx	lr

08018aba <strncmp>:
 8018aba:	b510      	push	{r4, lr}
 8018abc:	b16a      	cbz	r2, 8018ada <strncmp+0x20>
 8018abe:	3901      	subs	r1, #1
 8018ac0:	1884      	adds	r4, r0, r2
 8018ac2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018ac6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018aca:	429a      	cmp	r2, r3
 8018acc:	d103      	bne.n	8018ad6 <strncmp+0x1c>
 8018ace:	42a0      	cmp	r0, r4
 8018ad0:	d001      	beq.n	8018ad6 <strncmp+0x1c>
 8018ad2:	2a00      	cmp	r2, #0
 8018ad4:	d1f5      	bne.n	8018ac2 <strncmp+0x8>
 8018ad6:	1ad0      	subs	r0, r2, r3
 8018ad8:	bd10      	pop	{r4, pc}
 8018ada:	4610      	mov	r0, r2
 8018adc:	e7fc      	b.n	8018ad8 <strncmp+0x1e>

08018ade <strstr>:
 8018ade:	780a      	ldrb	r2, [r1, #0]
 8018ae0:	b570      	push	{r4, r5, r6, lr}
 8018ae2:	b96a      	cbnz	r2, 8018b00 <strstr+0x22>
 8018ae4:	bd70      	pop	{r4, r5, r6, pc}
 8018ae6:	429a      	cmp	r2, r3
 8018ae8:	d109      	bne.n	8018afe <strstr+0x20>
 8018aea:	460c      	mov	r4, r1
 8018aec:	4605      	mov	r5, r0
 8018aee:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d0f6      	beq.n	8018ae4 <strstr+0x6>
 8018af6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8018afa:	429e      	cmp	r6, r3
 8018afc:	d0f7      	beq.n	8018aee <strstr+0x10>
 8018afe:	3001      	adds	r0, #1
 8018b00:	7803      	ldrb	r3, [r0, #0]
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d1ef      	bne.n	8018ae6 <strstr+0x8>
 8018b06:	4618      	mov	r0, r3
 8018b08:	e7ec      	b.n	8018ae4 <strstr+0x6>
	...

08018b0c <_close_r>:
 8018b0c:	b538      	push	{r3, r4, r5, lr}
 8018b0e:	4d06      	ldr	r5, [pc, #24]	@ (8018b28 <_close_r+0x1c>)
 8018b10:	2300      	movs	r3, #0
 8018b12:	4604      	mov	r4, r0
 8018b14:	4608      	mov	r0, r1
 8018b16:	602b      	str	r3, [r5, #0]
 8018b18:	f7e9 fa4c 	bl	8001fb4 <_close>
 8018b1c:	1c43      	adds	r3, r0, #1
 8018b1e:	d102      	bne.n	8018b26 <_close_r+0x1a>
 8018b20:	682b      	ldr	r3, [r5, #0]
 8018b22:	b103      	cbz	r3, 8018b26 <_close_r+0x1a>
 8018b24:	6023      	str	r3, [r4, #0]
 8018b26:	bd38      	pop	{r3, r4, r5, pc}
 8018b28:	2000b334 	.word	0x2000b334

08018b2c <_lseek_r>:
 8018b2c:	b538      	push	{r3, r4, r5, lr}
 8018b2e:	4d07      	ldr	r5, [pc, #28]	@ (8018b4c <_lseek_r+0x20>)
 8018b30:	4604      	mov	r4, r0
 8018b32:	4608      	mov	r0, r1
 8018b34:	4611      	mov	r1, r2
 8018b36:	2200      	movs	r2, #0
 8018b38:	602a      	str	r2, [r5, #0]
 8018b3a:	461a      	mov	r2, r3
 8018b3c:	f7e9 fa61 	bl	8002002 <_lseek>
 8018b40:	1c43      	adds	r3, r0, #1
 8018b42:	d102      	bne.n	8018b4a <_lseek_r+0x1e>
 8018b44:	682b      	ldr	r3, [r5, #0]
 8018b46:	b103      	cbz	r3, 8018b4a <_lseek_r+0x1e>
 8018b48:	6023      	str	r3, [r4, #0]
 8018b4a:	bd38      	pop	{r3, r4, r5, pc}
 8018b4c:	2000b334 	.word	0x2000b334

08018b50 <_read_r>:
 8018b50:	b538      	push	{r3, r4, r5, lr}
 8018b52:	4d07      	ldr	r5, [pc, #28]	@ (8018b70 <_read_r+0x20>)
 8018b54:	4604      	mov	r4, r0
 8018b56:	4608      	mov	r0, r1
 8018b58:	4611      	mov	r1, r2
 8018b5a:	2200      	movs	r2, #0
 8018b5c:	602a      	str	r2, [r5, #0]
 8018b5e:	461a      	mov	r2, r3
 8018b60:	f7e9 f9ef 	bl	8001f42 <_read>
 8018b64:	1c43      	adds	r3, r0, #1
 8018b66:	d102      	bne.n	8018b6e <_read_r+0x1e>
 8018b68:	682b      	ldr	r3, [r5, #0]
 8018b6a:	b103      	cbz	r3, 8018b6e <_read_r+0x1e>
 8018b6c:	6023      	str	r3, [r4, #0]
 8018b6e:	bd38      	pop	{r3, r4, r5, pc}
 8018b70:	2000b334 	.word	0x2000b334

08018b74 <_sbrk_r>:
 8018b74:	b538      	push	{r3, r4, r5, lr}
 8018b76:	4d06      	ldr	r5, [pc, #24]	@ (8018b90 <_sbrk_r+0x1c>)
 8018b78:	2300      	movs	r3, #0
 8018b7a:	4604      	mov	r4, r0
 8018b7c:	4608      	mov	r0, r1
 8018b7e:	602b      	str	r3, [r5, #0]
 8018b80:	f7e9 fa4c 	bl	800201c <_sbrk>
 8018b84:	1c43      	adds	r3, r0, #1
 8018b86:	d102      	bne.n	8018b8e <_sbrk_r+0x1a>
 8018b88:	682b      	ldr	r3, [r5, #0]
 8018b8a:	b103      	cbz	r3, 8018b8e <_sbrk_r+0x1a>
 8018b8c:	6023      	str	r3, [r4, #0]
 8018b8e:	bd38      	pop	{r3, r4, r5, pc}
 8018b90:	2000b334 	.word	0x2000b334

08018b94 <_write_r>:
 8018b94:	b538      	push	{r3, r4, r5, lr}
 8018b96:	4d07      	ldr	r5, [pc, #28]	@ (8018bb4 <_write_r+0x20>)
 8018b98:	4604      	mov	r4, r0
 8018b9a:	4608      	mov	r0, r1
 8018b9c:	4611      	mov	r1, r2
 8018b9e:	2200      	movs	r2, #0
 8018ba0:	602a      	str	r2, [r5, #0]
 8018ba2:	461a      	mov	r2, r3
 8018ba4:	f7e9 f9ea 	bl	8001f7c <_write>
 8018ba8:	1c43      	adds	r3, r0, #1
 8018baa:	d102      	bne.n	8018bb2 <_write_r+0x1e>
 8018bac:	682b      	ldr	r3, [r5, #0]
 8018bae:	b103      	cbz	r3, 8018bb2 <_write_r+0x1e>
 8018bb0:	6023      	str	r3, [r4, #0]
 8018bb2:	bd38      	pop	{r3, r4, r5, pc}
 8018bb4:	2000b334 	.word	0x2000b334

08018bb8 <__errno>:
 8018bb8:	4b01      	ldr	r3, [pc, #4]	@ (8018bc0 <__errno+0x8>)
 8018bba:	6818      	ldr	r0, [r3, #0]
 8018bbc:	4770      	bx	lr
 8018bbe:	bf00      	nop
 8018bc0:	200003b0 	.word	0x200003b0

08018bc4 <__libc_init_array>:
 8018bc4:	b570      	push	{r4, r5, r6, lr}
 8018bc6:	4d0d      	ldr	r5, [pc, #52]	@ (8018bfc <__libc_init_array+0x38>)
 8018bc8:	4c0d      	ldr	r4, [pc, #52]	@ (8018c00 <__libc_init_array+0x3c>)
 8018bca:	1b64      	subs	r4, r4, r5
 8018bcc:	10a4      	asrs	r4, r4, #2
 8018bce:	2600      	movs	r6, #0
 8018bd0:	42a6      	cmp	r6, r4
 8018bd2:	d109      	bne.n	8018be8 <__libc_init_array+0x24>
 8018bd4:	4d0b      	ldr	r5, [pc, #44]	@ (8018c04 <__libc_init_array+0x40>)
 8018bd6:	4c0c      	ldr	r4, [pc, #48]	@ (8018c08 <__libc_init_array+0x44>)
 8018bd8:	f000 fe64 	bl	80198a4 <_init>
 8018bdc:	1b64      	subs	r4, r4, r5
 8018bde:	10a4      	asrs	r4, r4, #2
 8018be0:	2600      	movs	r6, #0
 8018be2:	42a6      	cmp	r6, r4
 8018be4:	d105      	bne.n	8018bf2 <__libc_init_array+0x2e>
 8018be6:	bd70      	pop	{r4, r5, r6, pc}
 8018be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8018bec:	4798      	blx	r3
 8018bee:	3601      	adds	r6, #1
 8018bf0:	e7ee      	b.n	8018bd0 <__libc_init_array+0xc>
 8018bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8018bf6:	4798      	blx	r3
 8018bf8:	3601      	adds	r6, #1
 8018bfa:	e7f2      	b.n	8018be2 <__libc_init_array+0x1e>
 8018bfc:	0801ac14 	.word	0x0801ac14
 8018c00:	0801ac14 	.word	0x0801ac14
 8018c04:	0801ac14 	.word	0x0801ac14
 8018c08:	0801ac20 	.word	0x0801ac20

08018c0c <__retarget_lock_init_recursive>:
 8018c0c:	4770      	bx	lr

08018c0e <__retarget_lock_acquire_recursive>:
 8018c0e:	4770      	bx	lr

08018c10 <__retarget_lock_release_recursive>:
 8018c10:	4770      	bx	lr

08018c12 <strcpy>:
 8018c12:	4603      	mov	r3, r0
 8018c14:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018c18:	f803 2b01 	strb.w	r2, [r3], #1
 8018c1c:	2a00      	cmp	r2, #0
 8018c1e:	d1f9      	bne.n	8018c14 <strcpy+0x2>
 8018c20:	4770      	bx	lr

08018c22 <memcpy>:
 8018c22:	440a      	add	r2, r1
 8018c24:	4291      	cmp	r1, r2
 8018c26:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8018c2a:	d100      	bne.n	8018c2e <memcpy+0xc>
 8018c2c:	4770      	bx	lr
 8018c2e:	b510      	push	{r4, lr}
 8018c30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018c34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018c38:	4291      	cmp	r1, r2
 8018c3a:	d1f9      	bne.n	8018c30 <memcpy+0xe>
 8018c3c:	bd10      	pop	{r4, pc}
	...

08018c40 <__assert_func>:
 8018c40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018c42:	4614      	mov	r4, r2
 8018c44:	461a      	mov	r2, r3
 8018c46:	4b09      	ldr	r3, [pc, #36]	@ (8018c6c <__assert_func+0x2c>)
 8018c48:	681b      	ldr	r3, [r3, #0]
 8018c4a:	4605      	mov	r5, r0
 8018c4c:	68d8      	ldr	r0, [r3, #12]
 8018c4e:	b954      	cbnz	r4, 8018c66 <__assert_func+0x26>
 8018c50:	4b07      	ldr	r3, [pc, #28]	@ (8018c70 <__assert_func+0x30>)
 8018c52:	461c      	mov	r4, r3
 8018c54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018c58:	9100      	str	r1, [sp, #0]
 8018c5a:	462b      	mov	r3, r5
 8018c5c:	4905      	ldr	r1, [pc, #20]	@ (8018c74 <__assert_func+0x34>)
 8018c5e:	f000 fd3f 	bl	80196e0 <fiprintf>
 8018c62:	f000 fdd3 	bl	801980c <abort>
 8018c66:	4b04      	ldr	r3, [pc, #16]	@ (8018c78 <__assert_func+0x38>)
 8018c68:	e7f4      	b.n	8018c54 <__assert_func+0x14>
 8018c6a:	bf00      	nop
 8018c6c:	200003b0 	.word	0x200003b0
 8018c70:	0801abd5 	.word	0x0801abd5
 8018c74:	0801aba7 	.word	0x0801aba7
 8018c78:	0801ab9a 	.word	0x0801ab9a

08018c7c <__env_lock>:
 8018c7c:	4801      	ldr	r0, [pc, #4]	@ (8018c84 <__env_lock+0x8>)
 8018c7e:	f7ff bfc6 	b.w	8018c0e <__retarget_lock_acquire_recursive>
 8018c82:	bf00      	nop
 8018c84:	2000b338 	.word	0x2000b338

08018c88 <__env_unlock>:
 8018c88:	4801      	ldr	r0, [pc, #4]	@ (8018c90 <__env_unlock+0x8>)
 8018c8a:	f7ff bfc1 	b.w	8018c10 <__retarget_lock_release_recursive>
 8018c8e:	bf00      	nop
 8018c90:	2000b338 	.word	0x2000b338

08018c94 <_free_r>:
 8018c94:	b538      	push	{r3, r4, r5, lr}
 8018c96:	4605      	mov	r5, r0
 8018c98:	2900      	cmp	r1, #0
 8018c9a:	d041      	beq.n	8018d20 <_free_r+0x8c>
 8018c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018ca0:	1f0c      	subs	r4, r1, #4
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	bfb8      	it	lt
 8018ca6:	18e4      	addlt	r4, r4, r3
 8018ca8:	f7ff fb30 	bl	801830c <__malloc_lock>
 8018cac:	4a1d      	ldr	r2, [pc, #116]	@ (8018d24 <_free_r+0x90>)
 8018cae:	6813      	ldr	r3, [r2, #0]
 8018cb0:	b933      	cbnz	r3, 8018cc0 <_free_r+0x2c>
 8018cb2:	6063      	str	r3, [r4, #4]
 8018cb4:	6014      	str	r4, [r2, #0]
 8018cb6:	4628      	mov	r0, r5
 8018cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018cbc:	f7ff bb2c 	b.w	8018318 <__malloc_unlock>
 8018cc0:	42a3      	cmp	r3, r4
 8018cc2:	d908      	bls.n	8018cd6 <_free_r+0x42>
 8018cc4:	6820      	ldr	r0, [r4, #0]
 8018cc6:	1821      	adds	r1, r4, r0
 8018cc8:	428b      	cmp	r3, r1
 8018cca:	bf01      	itttt	eq
 8018ccc:	6819      	ldreq	r1, [r3, #0]
 8018cce:	685b      	ldreq	r3, [r3, #4]
 8018cd0:	1809      	addeq	r1, r1, r0
 8018cd2:	6021      	streq	r1, [r4, #0]
 8018cd4:	e7ed      	b.n	8018cb2 <_free_r+0x1e>
 8018cd6:	461a      	mov	r2, r3
 8018cd8:	685b      	ldr	r3, [r3, #4]
 8018cda:	b10b      	cbz	r3, 8018ce0 <_free_r+0x4c>
 8018cdc:	42a3      	cmp	r3, r4
 8018cde:	d9fa      	bls.n	8018cd6 <_free_r+0x42>
 8018ce0:	6811      	ldr	r1, [r2, #0]
 8018ce2:	1850      	adds	r0, r2, r1
 8018ce4:	42a0      	cmp	r0, r4
 8018ce6:	d10b      	bne.n	8018d00 <_free_r+0x6c>
 8018ce8:	6820      	ldr	r0, [r4, #0]
 8018cea:	4401      	add	r1, r0
 8018cec:	1850      	adds	r0, r2, r1
 8018cee:	4283      	cmp	r3, r0
 8018cf0:	6011      	str	r1, [r2, #0]
 8018cf2:	d1e0      	bne.n	8018cb6 <_free_r+0x22>
 8018cf4:	6818      	ldr	r0, [r3, #0]
 8018cf6:	685b      	ldr	r3, [r3, #4]
 8018cf8:	6053      	str	r3, [r2, #4]
 8018cfa:	4408      	add	r0, r1
 8018cfc:	6010      	str	r0, [r2, #0]
 8018cfe:	e7da      	b.n	8018cb6 <_free_r+0x22>
 8018d00:	d902      	bls.n	8018d08 <_free_r+0x74>
 8018d02:	230c      	movs	r3, #12
 8018d04:	602b      	str	r3, [r5, #0]
 8018d06:	e7d6      	b.n	8018cb6 <_free_r+0x22>
 8018d08:	6820      	ldr	r0, [r4, #0]
 8018d0a:	1821      	adds	r1, r4, r0
 8018d0c:	428b      	cmp	r3, r1
 8018d0e:	bf04      	itt	eq
 8018d10:	6819      	ldreq	r1, [r3, #0]
 8018d12:	685b      	ldreq	r3, [r3, #4]
 8018d14:	6063      	str	r3, [r4, #4]
 8018d16:	bf04      	itt	eq
 8018d18:	1809      	addeq	r1, r1, r0
 8018d1a:	6021      	streq	r1, [r4, #0]
 8018d1c:	6054      	str	r4, [r2, #4]
 8018d1e:	e7ca      	b.n	8018cb6 <_free_r+0x22>
 8018d20:	bd38      	pop	{r3, r4, r5, pc}
 8018d22:	bf00      	nop
 8018d24:	2000b1f4 	.word	0x2000b1f4

08018d28 <_malloc_usable_size_r>:
 8018d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018d2c:	1f18      	subs	r0, r3, #4
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	bfbc      	itt	lt
 8018d32:	580b      	ldrlt	r3, [r1, r0]
 8018d34:	18c0      	addlt	r0, r0, r3
 8018d36:	4770      	bx	lr

08018d38 <__ssputs_r>:
 8018d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d3c:	688e      	ldr	r6, [r1, #8]
 8018d3e:	461f      	mov	r7, r3
 8018d40:	42be      	cmp	r6, r7
 8018d42:	680b      	ldr	r3, [r1, #0]
 8018d44:	4682      	mov	sl, r0
 8018d46:	460c      	mov	r4, r1
 8018d48:	4690      	mov	r8, r2
 8018d4a:	d82d      	bhi.n	8018da8 <__ssputs_r+0x70>
 8018d4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018d50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018d54:	d026      	beq.n	8018da4 <__ssputs_r+0x6c>
 8018d56:	6965      	ldr	r5, [r4, #20]
 8018d58:	6909      	ldr	r1, [r1, #16]
 8018d5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018d5e:	eba3 0901 	sub.w	r9, r3, r1
 8018d62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018d66:	1c7b      	adds	r3, r7, #1
 8018d68:	444b      	add	r3, r9
 8018d6a:	106d      	asrs	r5, r5, #1
 8018d6c:	429d      	cmp	r5, r3
 8018d6e:	bf38      	it	cc
 8018d70:	461d      	movcc	r5, r3
 8018d72:	0553      	lsls	r3, r2, #21
 8018d74:	d527      	bpl.n	8018dc6 <__ssputs_r+0x8e>
 8018d76:	4629      	mov	r1, r5
 8018d78:	f7ff fa48 	bl	801820c <_malloc_r>
 8018d7c:	4606      	mov	r6, r0
 8018d7e:	b360      	cbz	r0, 8018dda <__ssputs_r+0xa2>
 8018d80:	6921      	ldr	r1, [r4, #16]
 8018d82:	464a      	mov	r2, r9
 8018d84:	f7ff ff4d 	bl	8018c22 <memcpy>
 8018d88:	89a3      	ldrh	r3, [r4, #12]
 8018d8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018d92:	81a3      	strh	r3, [r4, #12]
 8018d94:	6126      	str	r6, [r4, #16]
 8018d96:	6165      	str	r5, [r4, #20]
 8018d98:	444e      	add	r6, r9
 8018d9a:	eba5 0509 	sub.w	r5, r5, r9
 8018d9e:	6026      	str	r6, [r4, #0]
 8018da0:	60a5      	str	r5, [r4, #8]
 8018da2:	463e      	mov	r6, r7
 8018da4:	42be      	cmp	r6, r7
 8018da6:	d900      	bls.n	8018daa <__ssputs_r+0x72>
 8018da8:	463e      	mov	r6, r7
 8018daa:	6820      	ldr	r0, [r4, #0]
 8018dac:	4632      	mov	r2, r6
 8018dae:	4641      	mov	r1, r8
 8018db0:	f7ff fe54 	bl	8018a5c <memmove>
 8018db4:	68a3      	ldr	r3, [r4, #8]
 8018db6:	1b9b      	subs	r3, r3, r6
 8018db8:	60a3      	str	r3, [r4, #8]
 8018dba:	6823      	ldr	r3, [r4, #0]
 8018dbc:	4433      	add	r3, r6
 8018dbe:	6023      	str	r3, [r4, #0]
 8018dc0:	2000      	movs	r0, #0
 8018dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018dc6:	462a      	mov	r2, r5
 8018dc8:	f7ff fb20 	bl	801840c <_realloc_r>
 8018dcc:	4606      	mov	r6, r0
 8018dce:	2800      	cmp	r0, #0
 8018dd0:	d1e0      	bne.n	8018d94 <__ssputs_r+0x5c>
 8018dd2:	6921      	ldr	r1, [r4, #16]
 8018dd4:	4650      	mov	r0, sl
 8018dd6:	f7ff ff5d 	bl	8018c94 <_free_r>
 8018dda:	230c      	movs	r3, #12
 8018ddc:	f8ca 3000 	str.w	r3, [sl]
 8018de0:	89a3      	ldrh	r3, [r4, #12]
 8018de2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018de6:	81a3      	strh	r3, [r4, #12]
 8018de8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018dec:	e7e9      	b.n	8018dc2 <__ssputs_r+0x8a>
	...

08018df0 <_svfiprintf_r>:
 8018df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018df4:	4698      	mov	r8, r3
 8018df6:	898b      	ldrh	r3, [r1, #12]
 8018df8:	061b      	lsls	r3, r3, #24
 8018dfa:	b09d      	sub	sp, #116	@ 0x74
 8018dfc:	4607      	mov	r7, r0
 8018dfe:	460d      	mov	r5, r1
 8018e00:	4614      	mov	r4, r2
 8018e02:	d510      	bpl.n	8018e26 <_svfiprintf_r+0x36>
 8018e04:	690b      	ldr	r3, [r1, #16]
 8018e06:	b973      	cbnz	r3, 8018e26 <_svfiprintf_r+0x36>
 8018e08:	2140      	movs	r1, #64	@ 0x40
 8018e0a:	f7ff f9ff 	bl	801820c <_malloc_r>
 8018e0e:	6028      	str	r0, [r5, #0]
 8018e10:	6128      	str	r0, [r5, #16]
 8018e12:	b930      	cbnz	r0, 8018e22 <_svfiprintf_r+0x32>
 8018e14:	230c      	movs	r3, #12
 8018e16:	603b      	str	r3, [r7, #0]
 8018e18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018e1c:	b01d      	add	sp, #116	@ 0x74
 8018e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e22:	2340      	movs	r3, #64	@ 0x40
 8018e24:	616b      	str	r3, [r5, #20]
 8018e26:	2300      	movs	r3, #0
 8018e28:	9309      	str	r3, [sp, #36]	@ 0x24
 8018e2a:	2320      	movs	r3, #32
 8018e2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018e30:	f8cd 800c 	str.w	r8, [sp, #12]
 8018e34:	2330      	movs	r3, #48	@ 0x30
 8018e36:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018fd4 <_svfiprintf_r+0x1e4>
 8018e3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018e3e:	f04f 0901 	mov.w	r9, #1
 8018e42:	4623      	mov	r3, r4
 8018e44:	469a      	mov	sl, r3
 8018e46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018e4a:	b10a      	cbz	r2, 8018e50 <_svfiprintf_r+0x60>
 8018e4c:	2a25      	cmp	r2, #37	@ 0x25
 8018e4e:	d1f9      	bne.n	8018e44 <_svfiprintf_r+0x54>
 8018e50:	ebba 0b04 	subs.w	fp, sl, r4
 8018e54:	d00b      	beq.n	8018e6e <_svfiprintf_r+0x7e>
 8018e56:	465b      	mov	r3, fp
 8018e58:	4622      	mov	r2, r4
 8018e5a:	4629      	mov	r1, r5
 8018e5c:	4638      	mov	r0, r7
 8018e5e:	f7ff ff6b 	bl	8018d38 <__ssputs_r>
 8018e62:	3001      	adds	r0, #1
 8018e64:	f000 80a7 	beq.w	8018fb6 <_svfiprintf_r+0x1c6>
 8018e68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018e6a:	445a      	add	r2, fp
 8018e6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8018e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	f000 809f 	beq.w	8018fb6 <_svfiprintf_r+0x1c6>
 8018e78:	2300      	movs	r3, #0
 8018e7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018e7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018e82:	f10a 0a01 	add.w	sl, sl, #1
 8018e86:	9304      	str	r3, [sp, #16]
 8018e88:	9307      	str	r3, [sp, #28]
 8018e8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018e8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8018e90:	4654      	mov	r4, sl
 8018e92:	2205      	movs	r2, #5
 8018e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e98:	484e      	ldr	r0, [pc, #312]	@ (8018fd4 <_svfiprintf_r+0x1e4>)
 8018e9a:	f7e7 f9d9 	bl	8000250 <memchr>
 8018e9e:	9a04      	ldr	r2, [sp, #16]
 8018ea0:	b9d8      	cbnz	r0, 8018eda <_svfiprintf_r+0xea>
 8018ea2:	06d0      	lsls	r0, r2, #27
 8018ea4:	bf44      	itt	mi
 8018ea6:	2320      	movmi	r3, #32
 8018ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018eac:	0711      	lsls	r1, r2, #28
 8018eae:	bf44      	itt	mi
 8018eb0:	232b      	movmi	r3, #43	@ 0x2b
 8018eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8018eba:	2b2a      	cmp	r3, #42	@ 0x2a
 8018ebc:	d015      	beq.n	8018eea <_svfiprintf_r+0xfa>
 8018ebe:	9a07      	ldr	r2, [sp, #28]
 8018ec0:	4654      	mov	r4, sl
 8018ec2:	2000      	movs	r0, #0
 8018ec4:	f04f 0c0a 	mov.w	ip, #10
 8018ec8:	4621      	mov	r1, r4
 8018eca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018ece:	3b30      	subs	r3, #48	@ 0x30
 8018ed0:	2b09      	cmp	r3, #9
 8018ed2:	d94b      	bls.n	8018f6c <_svfiprintf_r+0x17c>
 8018ed4:	b1b0      	cbz	r0, 8018f04 <_svfiprintf_r+0x114>
 8018ed6:	9207      	str	r2, [sp, #28]
 8018ed8:	e014      	b.n	8018f04 <_svfiprintf_r+0x114>
 8018eda:	eba0 0308 	sub.w	r3, r0, r8
 8018ede:	fa09 f303 	lsl.w	r3, r9, r3
 8018ee2:	4313      	orrs	r3, r2
 8018ee4:	9304      	str	r3, [sp, #16]
 8018ee6:	46a2      	mov	sl, r4
 8018ee8:	e7d2      	b.n	8018e90 <_svfiprintf_r+0xa0>
 8018eea:	9b03      	ldr	r3, [sp, #12]
 8018eec:	1d19      	adds	r1, r3, #4
 8018eee:	681b      	ldr	r3, [r3, #0]
 8018ef0:	9103      	str	r1, [sp, #12]
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	bfbb      	ittet	lt
 8018ef6:	425b      	neglt	r3, r3
 8018ef8:	f042 0202 	orrlt.w	r2, r2, #2
 8018efc:	9307      	strge	r3, [sp, #28]
 8018efe:	9307      	strlt	r3, [sp, #28]
 8018f00:	bfb8      	it	lt
 8018f02:	9204      	strlt	r2, [sp, #16]
 8018f04:	7823      	ldrb	r3, [r4, #0]
 8018f06:	2b2e      	cmp	r3, #46	@ 0x2e
 8018f08:	d10a      	bne.n	8018f20 <_svfiprintf_r+0x130>
 8018f0a:	7863      	ldrb	r3, [r4, #1]
 8018f0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8018f0e:	d132      	bne.n	8018f76 <_svfiprintf_r+0x186>
 8018f10:	9b03      	ldr	r3, [sp, #12]
 8018f12:	1d1a      	adds	r2, r3, #4
 8018f14:	681b      	ldr	r3, [r3, #0]
 8018f16:	9203      	str	r2, [sp, #12]
 8018f18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018f1c:	3402      	adds	r4, #2
 8018f1e:	9305      	str	r3, [sp, #20]
 8018f20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018fe4 <_svfiprintf_r+0x1f4>
 8018f24:	7821      	ldrb	r1, [r4, #0]
 8018f26:	2203      	movs	r2, #3
 8018f28:	4650      	mov	r0, sl
 8018f2a:	f7e7 f991 	bl	8000250 <memchr>
 8018f2e:	b138      	cbz	r0, 8018f40 <_svfiprintf_r+0x150>
 8018f30:	9b04      	ldr	r3, [sp, #16]
 8018f32:	eba0 000a 	sub.w	r0, r0, sl
 8018f36:	2240      	movs	r2, #64	@ 0x40
 8018f38:	4082      	lsls	r2, r0
 8018f3a:	4313      	orrs	r3, r2
 8018f3c:	3401      	adds	r4, #1
 8018f3e:	9304      	str	r3, [sp, #16]
 8018f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f44:	4824      	ldr	r0, [pc, #144]	@ (8018fd8 <_svfiprintf_r+0x1e8>)
 8018f46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018f4a:	2206      	movs	r2, #6
 8018f4c:	f7e7 f980 	bl	8000250 <memchr>
 8018f50:	2800      	cmp	r0, #0
 8018f52:	d036      	beq.n	8018fc2 <_svfiprintf_r+0x1d2>
 8018f54:	4b21      	ldr	r3, [pc, #132]	@ (8018fdc <_svfiprintf_r+0x1ec>)
 8018f56:	bb1b      	cbnz	r3, 8018fa0 <_svfiprintf_r+0x1b0>
 8018f58:	9b03      	ldr	r3, [sp, #12]
 8018f5a:	3307      	adds	r3, #7
 8018f5c:	f023 0307 	bic.w	r3, r3, #7
 8018f60:	3308      	adds	r3, #8
 8018f62:	9303      	str	r3, [sp, #12]
 8018f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018f66:	4433      	add	r3, r6
 8018f68:	9309      	str	r3, [sp, #36]	@ 0x24
 8018f6a:	e76a      	b.n	8018e42 <_svfiprintf_r+0x52>
 8018f6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8018f70:	460c      	mov	r4, r1
 8018f72:	2001      	movs	r0, #1
 8018f74:	e7a8      	b.n	8018ec8 <_svfiprintf_r+0xd8>
 8018f76:	2300      	movs	r3, #0
 8018f78:	3401      	adds	r4, #1
 8018f7a:	9305      	str	r3, [sp, #20]
 8018f7c:	4619      	mov	r1, r3
 8018f7e:	f04f 0c0a 	mov.w	ip, #10
 8018f82:	4620      	mov	r0, r4
 8018f84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018f88:	3a30      	subs	r2, #48	@ 0x30
 8018f8a:	2a09      	cmp	r2, #9
 8018f8c:	d903      	bls.n	8018f96 <_svfiprintf_r+0x1a6>
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d0c6      	beq.n	8018f20 <_svfiprintf_r+0x130>
 8018f92:	9105      	str	r1, [sp, #20]
 8018f94:	e7c4      	b.n	8018f20 <_svfiprintf_r+0x130>
 8018f96:	fb0c 2101 	mla	r1, ip, r1, r2
 8018f9a:	4604      	mov	r4, r0
 8018f9c:	2301      	movs	r3, #1
 8018f9e:	e7f0      	b.n	8018f82 <_svfiprintf_r+0x192>
 8018fa0:	ab03      	add	r3, sp, #12
 8018fa2:	9300      	str	r3, [sp, #0]
 8018fa4:	462a      	mov	r2, r5
 8018fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8018fe0 <_svfiprintf_r+0x1f0>)
 8018fa8:	a904      	add	r1, sp, #16
 8018faa:	4638      	mov	r0, r7
 8018fac:	f3af 8000 	nop.w
 8018fb0:	1c42      	adds	r2, r0, #1
 8018fb2:	4606      	mov	r6, r0
 8018fb4:	d1d6      	bne.n	8018f64 <_svfiprintf_r+0x174>
 8018fb6:	89ab      	ldrh	r3, [r5, #12]
 8018fb8:	065b      	lsls	r3, r3, #25
 8018fba:	f53f af2d 	bmi.w	8018e18 <_svfiprintf_r+0x28>
 8018fbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018fc0:	e72c      	b.n	8018e1c <_svfiprintf_r+0x2c>
 8018fc2:	ab03      	add	r3, sp, #12
 8018fc4:	9300      	str	r3, [sp, #0]
 8018fc6:	462a      	mov	r2, r5
 8018fc8:	4b05      	ldr	r3, [pc, #20]	@ (8018fe0 <_svfiprintf_r+0x1f0>)
 8018fca:	a904      	add	r1, sp, #16
 8018fcc:	4638      	mov	r0, r7
 8018fce:	f000 f9bb 	bl	8019348 <_printf_i>
 8018fd2:	e7ed      	b.n	8018fb0 <_svfiprintf_r+0x1c0>
 8018fd4:	0801abd6 	.word	0x0801abd6
 8018fd8:	0801abe0 	.word	0x0801abe0
 8018fdc:	00000000 	.word	0x00000000
 8018fe0:	08018d39 	.word	0x08018d39
 8018fe4:	0801abdc 	.word	0x0801abdc

08018fe8 <__sfputc_r>:
 8018fe8:	6893      	ldr	r3, [r2, #8]
 8018fea:	3b01      	subs	r3, #1
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	b410      	push	{r4}
 8018ff0:	6093      	str	r3, [r2, #8]
 8018ff2:	da08      	bge.n	8019006 <__sfputc_r+0x1e>
 8018ff4:	6994      	ldr	r4, [r2, #24]
 8018ff6:	42a3      	cmp	r3, r4
 8018ff8:	db01      	blt.n	8018ffe <__sfputc_r+0x16>
 8018ffa:	290a      	cmp	r1, #10
 8018ffc:	d103      	bne.n	8019006 <__sfputc_r+0x1e>
 8018ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019002:	f7ff bc87 	b.w	8018914 <__swbuf_r>
 8019006:	6813      	ldr	r3, [r2, #0]
 8019008:	1c58      	adds	r0, r3, #1
 801900a:	6010      	str	r0, [r2, #0]
 801900c:	7019      	strb	r1, [r3, #0]
 801900e:	4608      	mov	r0, r1
 8019010:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019014:	4770      	bx	lr

08019016 <__sfputs_r>:
 8019016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019018:	4606      	mov	r6, r0
 801901a:	460f      	mov	r7, r1
 801901c:	4614      	mov	r4, r2
 801901e:	18d5      	adds	r5, r2, r3
 8019020:	42ac      	cmp	r4, r5
 8019022:	d101      	bne.n	8019028 <__sfputs_r+0x12>
 8019024:	2000      	movs	r0, #0
 8019026:	e007      	b.n	8019038 <__sfputs_r+0x22>
 8019028:	f814 1b01 	ldrb.w	r1, [r4], #1
 801902c:	463a      	mov	r2, r7
 801902e:	4630      	mov	r0, r6
 8019030:	f7ff ffda 	bl	8018fe8 <__sfputc_r>
 8019034:	1c43      	adds	r3, r0, #1
 8019036:	d1f3      	bne.n	8019020 <__sfputs_r+0xa>
 8019038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801903c <_vfiprintf_r>:
 801903c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019040:	460d      	mov	r5, r1
 8019042:	b09d      	sub	sp, #116	@ 0x74
 8019044:	4614      	mov	r4, r2
 8019046:	4698      	mov	r8, r3
 8019048:	4606      	mov	r6, r0
 801904a:	b118      	cbz	r0, 8019054 <_vfiprintf_r+0x18>
 801904c:	6a03      	ldr	r3, [r0, #32]
 801904e:	b90b      	cbnz	r3, 8019054 <_vfiprintf_r+0x18>
 8019050:	f7ff fb0e 	bl	8018670 <__sinit>
 8019054:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019056:	07d9      	lsls	r1, r3, #31
 8019058:	d405      	bmi.n	8019066 <_vfiprintf_r+0x2a>
 801905a:	89ab      	ldrh	r3, [r5, #12]
 801905c:	059a      	lsls	r2, r3, #22
 801905e:	d402      	bmi.n	8019066 <_vfiprintf_r+0x2a>
 8019060:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019062:	f7ff fdd4 	bl	8018c0e <__retarget_lock_acquire_recursive>
 8019066:	89ab      	ldrh	r3, [r5, #12]
 8019068:	071b      	lsls	r3, r3, #28
 801906a:	d501      	bpl.n	8019070 <_vfiprintf_r+0x34>
 801906c:	692b      	ldr	r3, [r5, #16]
 801906e:	b99b      	cbnz	r3, 8019098 <_vfiprintf_r+0x5c>
 8019070:	4629      	mov	r1, r5
 8019072:	4630      	mov	r0, r6
 8019074:	f7ff fc8c 	bl	8018990 <__swsetup_r>
 8019078:	b170      	cbz	r0, 8019098 <_vfiprintf_r+0x5c>
 801907a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801907c:	07dc      	lsls	r4, r3, #31
 801907e:	d504      	bpl.n	801908a <_vfiprintf_r+0x4e>
 8019080:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019084:	b01d      	add	sp, #116	@ 0x74
 8019086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801908a:	89ab      	ldrh	r3, [r5, #12]
 801908c:	0598      	lsls	r0, r3, #22
 801908e:	d4f7      	bmi.n	8019080 <_vfiprintf_r+0x44>
 8019090:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019092:	f7ff fdbd 	bl	8018c10 <__retarget_lock_release_recursive>
 8019096:	e7f3      	b.n	8019080 <_vfiprintf_r+0x44>
 8019098:	2300      	movs	r3, #0
 801909a:	9309      	str	r3, [sp, #36]	@ 0x24
 801909c:	2320      	movs	r3, #32
 801909e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80190a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80190a6:	2330      	movs	r3, #48	@ 0x30
 80190a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019258 <_vfiprintf_r+0x21c>
 80190ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80190b0:	f04f 0901 	mov.w	r9, #1
 80190b4:	4623      	mov	r3, r4
 80190b6:	469a      	mov	sl, r3
 80190b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80190bc:	b10a      	cbz	r2, 80190c2 <_vfiprintf_r+0x86>
 80190be:	2a25      	cmp	r2, #37	@ 0x25
 80190c0:	d1f9      	bne.n	80190b6 <_vfiprintf_r+0x7a>
 80190c2:	ebba 0b04 	subs.w	fp, sl, r4
 80190c6:	d00b      	beq.n	80190e0 <_vfiprintf_r+0xa4>
 80190c8:	465b      	mov	r3, fp
 80190ca:	4622      	mov	r2, r4
 80190cc:	4629      	mov	r1, r5
 80190ce:	4630      	mov	r0, r6
 80190d0:	f7ff ffa1 	bl	8019016 <__sfputs_r>
 80190d4:	3001      	adds	r0, #1
 80190d6:	f000 80a7 	beq.w	8019228 <_vfiprintf_r+0x1ec>
 80190da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80190dc:	445a      	add	r2, fp
 80190de:	9209      	str	r2, [sp, #36]	@ 0x24
 80190e0:	f89a 3000 	ldrb.w	r3, [sl]
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	f000 809f 	beq.w	8019228 <_vfiprintf_r+0x1ec>
 80190ea:	2300      	movs	r3, #0
 80190ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80190f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80190f4:	f10a 0a01 	add.w	sl, sl, #1
 80190f8:	9304      	str	r3, [sp, #16]
 80190fa:	9307      	str	r3, [sp, #28]
 80190fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019100:	931a      	str	r3, [sp, #104]	@ 0x68
 8019102:	4654      	mov	r4, sl
 8019104:	2205      	movs	r2, #5
 8019106:	f814 1b01 	ldrb.w	r1, [r4], #1
 801910a:	4853      	ldr	r0, [pc, #332]	@ (8019258 <_vfiprintf_r+0x21c>)
 801910c:	f7e7 f8a0 	bl	8000250 <memchr>
 8019110:	9a04      	ldr	r2, [sp, #16]
 8019112:	b9d8      	cbnz	r0, 801914c <_vfiprintf_r+0x110>
 8019114:	06d1      	lsls	r1, r2, #27
 8019116:	bf44      	itt	mi
 8019118:	2320      	movmi	r3, #32
 801911a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801911e:	0713      	lsls	r3, r2, #28
 8019120:	bf44      	itt	mi
 8019122:	232b      	movmi	r3, #43	@ 0x2b
 8019124:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019128:	f89a 3000 	ldrb.w	r3, [sl]
 801912c:	2b2a      	cmp	r3, #42	@ 0x2a
 801912e:	d015      	beq.n	801915c <_vfiprintf_r+0x120>
 8019130:	9a07      	ldr	r2, [sp, #28]
 8019132:	4654      	mov	r4, sl
 8019134:	2000      	movs	r0, #0
 8019136:	f04f 0c0a 	mov.w	ip, #10
 801913a:	4621      	mov	r1, r4
 801913c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019140:	3b30      	subs	r3, #48	@ 0x30
 8019142:	2b09      	cmp	r3, #9
 8019144:	d94b      	bls.n	80191de <_vfiprintf_r+0x1a2>
 8019146:	b1b0      	cbz	r0, 8019176 <_vfiprintf_r+0x13a>
 8019148:	9207      	str	r2, [sp, #28]
 801914a:	e014      	b.n	8019176 <_vfiprintf_r+0x13a>
 801914c:	eba0 0308 	sub.w	r3, r0, r8
 8019150:	fa09 f303 	lsl.w	r3, r9, r3
 8019154:	4313      	orrs	r3, r2
 8019156:	9304      	str	r3, [sp, #16]
 8019158:	46a2      	mov	sl, r4
 801915a:	e7d2      	b.n	8019102 <_vfiprintf_r+0xc6>
 801915c:	9b03      	ldr	r3, [sp, #12]
 801915e:	1d19      	adds	r1, r3, #4
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	9103      	str	r1, [sp, #12]
 8019164:	2b00      	cmp	r3, #0
 8019166:	bfbb      	ittet	lt
 8019168:	425b      	neglt	r3, r3
 801916a:	f042 0202 	orrlt.w	r2, r2, #2
 801916e:	9307      	strge	r3, [sp, #28]
 8019170:	9307      	strlt	r3, [sp, #28]
 8019172:	bfb8      	it	lt
 8019174:	9204      	strlt	r2, [sp, #16]
 8019176:	7823      	ldrb	r3, [r4, #0]
 8019178:	2b2e      	cmp	r3, #46	@ 0x2e
 801917a:	d10a      	bne.n	8019192 <_vfiprintf_r+0x156>
 801917c:	7863      	ldrb	r3, [r4, #1]
 801917e:	2b2a      	cmp	r3, #42	@ 0x2a
 8019180:	d132      	bne.n	80191e8 <_vfiprintf_r+0x1ac>
 8019182:	9b03      	ldr	r3, [sp, #12]
 8019184:	1d1a      	adds	r2, r3, #4
 8019186:	681b      	ldr	r3, [r3, #0]
 8019188:	9203      	str	r2, [sp, #12]
 801918a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801918e:	3402      	adds	r4, #2
 8019190:	9305      	str	r3, [sp, #20]
 8019192:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019268 <_vfiprintf_r+0x22c>
 8019196:	7821      	ldrb	r1, [r4, #0]
 8019198:	2203      	movs	r2, #3
 801919a:	4650      	mov	r0, sl
 801919c:	f7e7 f858 	bl	8000250 <memchr>
 80191a0:	b138      	cbz	r0, 80191b2 <_vfiprintf_r+0x176>
 80191a2:	9b04      	ldr	r3, [sp, #16]
 80191a4:	eba0 000a 	sub.w	r0, r0, sl
 80191a8:	2240      	movs	r2, #64	@ 0x40
 80191aa:	4082      	lsls	r2, r0
 80191ac:	4313      	orrs	r3, r2
 80191ae:	3401      	adds	r4, #1
 80191b0:	9304      	str	r3, [sp, #16]
 80191b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80191b6:	4829      	ldr	r0, [pc, #164]	@ (801925c <_vfiprintf_r+0x220>)
 80191b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80191bc:	2206      	movs	r2, #6
 80191be:	f7e7 f847 	bl	8000250 <memchr>
 80191c2:	2800      	cmp	r0, #0
 80191c4:	d03f      	beq.n	8019246 <_vfiprintf_r+0x20a>
 80191c6:	4b26      	ldr	r3, [pc, #152]	@ (8019260 <_vfiprintf_r+0x224>)
 80191c8:	bb1b      	cbnz	r3, 8019212 <_vfiprintf_r+0x1d6>
 80191ca:	9b03      	ldr	r3, [sp, #12]
 80191cc:	3307      	adds	r3, #7
 80191ce:	f023 0307 	bic.w	r3, r3, #7
 80191d2:	3308      	adds	r3, #8
 80191d4:	9303      	str	r3, [sp, #12]
 80191d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80191d8:	443b      	add	r3, r7
 80191da:	9309      	str	r3, [sp, #36]	@ 0x24
 80191dc:	e76a      	b.n	80190b4 <_vfiprintf_r+0x78>
 80191de:	fb0c 3202 	mla	r2, ip, r2, r3
 80191e2:	460c      	mov	r4, r1
 80191e4:	2001      	movs	r0, #1
 80191e6:	e7a8      	b.n	801913a <_vfiprintf_r+0xfe>
 80191e8:	2300      	movs	r3, #0
 80191ea:	3401      	adds	r4, #1
 80191ec:	9305      	str	r3, [sp, #20]
 80191ee:	4619      	mov	r1, r3
 80191f0:	f04f 0c0a 	mov.w	ip, #10
 80191f4:	4620      	mov	r0, r4
 80191f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80191fa:	3a30      	subs	r2, #48	@ 0x30
 80191fc:	2a09      	cmp	r2, #9
 80191fe:	d903      	bls.n	8019208 <_vfiprintf_r+0x1cc>
 8019200:	2b00      	cmp	r3, #0
 8019202:	d0c6      	beq.n	8019192 <_vfiprintf_r+0x156>
 8019204:	9105      	str	r1, [sp, #20]
 8019206:	e7c4      	b.n	8019192 <_vfiprintf_r+0x156>
 8019208:	fb0c 2101 	mla	r1, ip, r1, r2
 801920c:	4604      	mov	r4, r0
 801920e:	2301      	movs	r3, #1
 8019210:	e7f0      	b.n	80191f4 <_vfiprintf_r+0x1b8>
 8019212:	ab03      	add	r3, sp, #12
 8019214:	9300      	str	r3, [sp, #0]
 8019216:	462a      	mov	r2, r5
 8019218:	4b12      	ldr	r3, [pc, #72]	@ (8019264 <_vfiprintf_r+0x228>)
 801921a:	a904      	add	r1, sp, #16
 801921c:	4630      	mov	r0, r6
 801921e:	f3af 8000 	nop.w
 8019222:	4607      	mov	r7, r0
 8019224:	1c78      	adds	r0, r7, #1
 8019226:	d1d6      	bne.n	80191d6 <_vfiprintf_r+0x19a>
 8019228:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801922a:	07d9      	lsls	r1, r3, #31
 801922c:	d405      	bmi.n	801923a <_vfiprintf_r+0x1fe>
 801922e:	89ab      	ldrh	r3, [r5, #12]
 8019230:	059a      	lsls	r2, r3, #22
 8019232:	d402      	bmi.n	801923a <_vfiprintf_r+0x1fe>
 8019234:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019236:	f7ff fceb 	bl	8018c10 <__retarget_lock_release_recursive>
 801923a:	89ab      	ldrh	r3, [r5, #12]
 801923c:	065b      	lsls	r3, r3, #25
 801923e:	f53f af1f 	bmi.w	8019080 <_vfiprintf_r+0x44>
 8019242:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019244:	e71e      	b.n	8019084 <_vfiprintf_r+0x48>
 8019246:	ab03      	add	r3, sp, #12
 8019248:	9300      	str	r3, [sp, #0]
 801924a:	462a      	mov	r2, r5
 801924c:	4b05      	ldr	r3, [pc, #20]	@ (8019264 <_vfiprintf_r+0x228>)
 801924e:	a904      	add	r1, sp, #16
 8019250:	4630      	mov	r0, r6
 8019252:	f000 f879 	bl	8019348 <_printf_i>
 8019256:	e7e4      	b.n	8019222 <_vfiprintf_r+0x1e6>
 8019258:	0801abd6 	.word	0x0801abd6
 801925c:	0801abe0 	.word	0x0801abe0
 8019260:	00000000 	.word	0x00000000
 8019264:	08019017 	.word	0x08019017
 8019268:	0801abdc 	.word	0x0801abdc

0801926c <_printf_common>:
 801926c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019270:	4616      	mov	r6, r2
 8019272:	4698      	mov	r8, r3
 8019274:	688a      	ldr	r2, [r1, #8]
 8019276:	690b      	ldr	r3, [r1, #16]
 8019278:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801927c:	4293      	cmp	r3, r2
 801927e:	bfb8      	it	lt
 8019280:	4613      	movlt	r3, r2
 8019282:	6033      	str	r3, [r6, #0]
 8019284:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019288:	4607      	mov	r7, r0
 801928a:	460c      	mov	r4, r1
 801928c:	b10a      	cbz	r2, 8019292 <_printf_common+0x26>
 801928e:	3301      	adds	r3, #1
 8019290:	6033      	str	r3, [r6, #0]
 8019292:	6823      	ldr	r3, [r4, #0]
 8019294:	0699      	lsls	r1, r3, #26
 8019296:	bf42      	ittt	mi
 8019298:	6833      	ldrmi	r3, [r6, #0]
 801929a:	3302      	addmi	r3, #2
 801929c:	6033      	strmi	r3, [r6, #0]
 801929e:	6825      	ldr	r5, [r4, #0]
 80192a0:	f015 0506 	ands.w	r5, r5, #6
 80192a4:	d106      	bne.n	80192b4 <_printf_common+0x48>
 80192a6:	f104 0a19 	add.w	sl, r4, #25
 80192aa:	68e3      	ldr	r3, [r4, #12]
 80192ac:	6832      	ldr	r2, [r6, #0]
 80192ae:	1a9b      	subs	r3, r3, r2
 80192b0:	42ab      	cmp	r3, r5
 80192b2:	dc26      	bgt.n	8019302 <_printf_common+0x96>
 80192b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80192b8:	6822      	ldr	r2, [r4, #0]
 80192ba:	3b00      	subs	r3, #0
 80192bc:	bf18      	it	ne
 80192be:	2301      	movne	r3, #1
 80192c0:	0692      	lsls	r2, r2, #26
 80192c2:	d42b      	bmi.n	801931c <_printf_common+0xb0>
 80192c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80192c8:	4641      	mov	r1, r8
 80192ca:	4638      	mov	r0, r7
 80192cc:	47c8      	blx	r9
 80192ce:	3001      	adds	r0, #1
 80192d0:	d01e      	beq.n	8019310 <_printf_common+0xa4>
 80192d2:	6823      	ldr	r3, [r4, #0]
 80192d4:	6922      	ldr	r2, [r4, #16]
 80192d6:	f003 0306 	and.w	r3, r3, #6
 80192da:	2b04      	cmp	r3, #4
 80192dc:	bf02      	ittt	eq
 80192de:	68e5      	ldreq	r5, [r4, #12]
 80192e0:	6833      	ldreq	r3, [r6, #0]
 80192e2:	1aed      	subeq	r5, r5, r3
 80192e4:	68a3      	ldr	r3, [r4, #8]
 80192e6:	bf0c      	ite	eq
 80192e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80192ec:	2500      	movne	r5, #0
 80192ee:	4293      	cmp	r3, r2
 80192f0:	bfc4      	itt	gt
 80192f2:	1a9b      	subgt	r3, r3, r2
 80192f4:	18ed      	addgt	r5, r5, r3
 80192f6:	2600      	movs	r6, #0
 80192f8:	341a      	adds	r4, #26
 80192fa:	42b5      	cmp	r5, r6
 80192fc:	d11a      	bne.n	8019334 <_printf_common+0xc8>
 80192fe:	2000      	movs	r0, #0
 8019300:	e008      	b.n	8019314 <_printf_common+0xa8>
 8019302:	2301      	movs	r3, #1
 8019304:	4652      	mov	r2, sl
 8019306:	4641      	mov	r1, r8
 8019308:	4638      	mov	r0, r7
 801930a:	47c8      	blx	r9
 801930c:	3001      	adds	r0, #1
 801930e:	d103      	bne.n	8019318 <_printf_common+0xac>
 8019310:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019318:	3501      	adds	r5, #1
 801931a:	e7c6      	b.n	80192aa <_printf_common+0x3e>
 801931c:	18e1      	adds	r1, r4, r3
 801931e:	1c5a      	adds	r2, r3, #1
 8019320:	2030      	movs	r0, #48	@ 0x30
 8019322:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019326:	4422      	add	r2, r4
 8019328:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801932c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019330:	3302      	adds	r3, #2
 8019332:	e7c7      	b.n	80192c4 <_printf_common+0x58>
 8019334:	2301      	movs	r3, #1
 8019336:	4622      	mov	r2, r4
 8019338:	4641      	mov	r1, r8
 801933a:	4638      	mov	r0, r7
 801933c:	47c8      	blx	r9
 801933e:	3001      	adds	r0, #1
 8019340:	d0e6      	beq.n	8019310 <_printf_common+0xa4>
 8019342:	3601      	adds	r6, #1
 8019344:	e7d9      	b.n	80192fa <_printf_common+0x8e>
	...

08019348 <_printf_i>:
 8019348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801934c:	7e0f      	ldrb	r7, [r1, #24]
 801934e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019350:	2f78      	cmp	r7, #120	@ 0x78
 8019352:	4691      	mov	r9, r2
 8019354:	4680      	mov	r8, r0
 8019356:	460c      	mov	r4, r1
 8019358:	469a      	mov	sl, r3
 801935a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801935e:	d807      	bhi.n	8019370 <_printf_i+0x28>
 8019360:	2f62      	cmp	r7, #98	@ 0x62
 8019362:	d80a      	bhi.n	801937a <_printf_i+0x32>
 8019364:	2f00      	cmp	r7, #0
 8019366:	f000 80d2 	beq.w	801950e <_printf_i+0x1c6>
 801936a:	2f58      	cmp	r7, #88	@ 0x58
 801936c:	f000 80b9 	beq.w	80194e2 <_printf_i+0x19a>
 8019370:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019374:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019378:	e03a      	b.n	80193f0 <_printf_i+0xa8>
 801937a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801937e:	2b15      	cmp	r3, #21
 8019380:	d8f6      	bhi.n	8019370 <_printf_i+0x28>
 8019382:	a101      	add	r1, pc, #4	@ (adr r1, 8019388 <_printf_i+0x40>)
 8019384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019388:	080193e1 	.word	0x080193e1
 801938c:	080193f5 	.word	0x080193f5
 8019390:	08019371 	.word	0x08019371
 8019394:	08019371 	.word	0x08019371
 8019398:	08019371 	.word	0x08019371
 801939c:	08019371 	.word	0x08019371
 80193a0:	080193f5 	.word	0x080193f5
 80193a4:	08019371 	.word	0x08019371
 80193a8:	08019371 	.word	0x08019371
 80193ac:	08019371 	.word	0x08019371
 80193b0:	08019371 	.word	0x08019371
 80193b4:	080194f5 	.word	0x080194f5
 80193b8:	0801941f 	.word	0x0801941f
 80193bc:	080194af 	.word	0x080194af
 80193c0:	08019371 	.word	0x08019371
 80193c4:	08019371 	.word	0x08019371
 80193c8:	08019517 	.word	0x08019517
 80193cc:	08019371 	.word	0x08019371
 80193d0:	0801941f 	.word	0x0801941f
 80193d4:	08019371 	.word	0x08019371
 80193d8:	08019371 	.word	0x08019371
 80193dc:	080194b7 	.word	0x080194b7
 80193e0:	6833      	ldr	r3, [r6, #0]
 80193e2:	1d1a      	adds	r2, r3, #4
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	6032      	str	r2, [r6, #0]
 80193e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80193ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80193f0:	2301      	movs	r3, #1
 80193f2:	e09d      	b.n	8019530 <_printf_i+0x1e8>
 80193f4:	6833      	ldr	r3, [r6, #0]
 80193f6:	6820      	ldr	r0, [r4, #0]
 80193f8:	1d19      	adds	r1, r3, #4
 80193fa:	6031      	str	r1, [r6, #0]
 80193fc:	0606      	lsls	r6, r0, #24
 80193fe:	d501      	bpl.n	8019404 <_printf_i+0xbc>
 8019400:	681d      	ldr	r5, [r3, #0]
 8019402:	e003      	b.n	801940c <_printf_i+0xc4>
 8019404:	0645      	lsls	r5, r0, #25
 8019406:	d5fb      	bpl.n	8019400 <_printf_i+0xb8>
 8019408:	f9b3 5000 	ldrsh.w	r5, [r3]
 801940c:	2d00      	cmp	r5, #0
 801940e:	da03      	bge.n	8019418 <_printf_i+0xd0>
 8019410:	232d      	movs	r3, #45	@ 0x2d
 8019412:	426d      	negs	r5, r5
 8019414:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019418:	4859      	ldr	r0, [pc, #356]	@ (8019580 <_printf_i+0x238>)
 801941a:	230a      	movs	r3, #10
 801941c:	e011      	b.n	8019442 <_printf_i+0xfa>
 801941e:	6821      	ldr	r1, [r4, #0]
 8019420:	6833      	ldr	r3, [r6, #0]
 8019422:	0608      	lsls	r0, r1, #24
 8019424:	f853 5b04 	ldr.w	r5, [r3], #4
 8019428:	d402      	bmi.n	8019430 <_printf_i+0xe8>
 801942a:	0649      	lsls	r1, r1, #25
 801942c:	bf48      	it	mi
 801942e:	b2ad      	uxthmi	r5, r5
 8019430:	2f6f      	cmp	r7, #111	@ 0x6f
 8019432:	4853      	ldr	r0, [pc, #332]	@ (8019580 <_printf_i+0x238>)
 8019434:	6033      	str	r3, [r6, #0]
 8019436:	bf14      	ite	ne
 8019438:	230a      	movne	r3, #10
 801943a:	2308      	moveq	r3, #8
 801943c:	2100      	movs	r1, #0
 801943e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019442:	6866      	ldr	r6, [r4, #4]
 8019444:	60a6      	str	r6, [r4, #8]
 8019446:	2e00      	cmp	r6, #0
 8019448:	bfa2      	ittt	ge
 801944a:	6821      	ldrge	r1, [r4, #0]
 801944c:	f021 0104 	bicge.w	r1, r1, #4
 8019450:	6021      	strge	r1, [r4, #0]
 8019452:	b90d      	cbnz	r5, 8019458 <_printf_i+0x110>
 8019454:	2e00      	cmp	r6, #0
 8019456:	d04b      	beq.n	80194f0 <_printf_i+0x1a8>
 8019458:	4616      	mov	r6, r2
 801945a:	fbb5 f1f3 	udiv	r1, r5, r3
 801945e:	fb03 5711 	mls	r7, r3, r1, r5
 8019462:	5dc7      	ldrb	r7, [r0, r7]
 8019464:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019468:	462f      	mov	r7, r5
 801946a:	42bb      	cmp	r3, r7
 801946c:	460d      	mov	r5, r1
 801946e:	d9f4      	bls.n	801945a <_printf_i+0x112>
 8019470:	2b08      	cmp	r3, #8
 8019472:	d10b      	bne.n	801948c <_printf_i+0x144>
 8019474:	6823      	ldr	r3, [r4, #0]
 8019476:	07df      	lsls	r7, r3, #31
 8019478:	d508      	bpl.n	801948c <_printf_i+0x144>
 801947a:	6923      	ldr	r3, [r4, #16]
 801947c:	6861      	ldr	r1, [r4, #4]
 801947e:	4299      	cmp	r1, r3
 8019480:	bfde      	ittt	le
 8019482:	2330      	movle	r3, #48	@ 0x30
 8019484:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019488:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801948c:	1b92      	subs	r2, r2, r6
 801948e:	6122      	str	r2, [r4, #16]
 8019490:	f8cd a000 	str.w	sl, [sp]
 8019494:	464b      	mov	r3, r9
 8019496:	aa03      	add	r2, sp, #12
 8019498:	4621      	mov	r1, r4
 801949a:	4640      	mov	r0, r8
 801949c:	f7ff fee6 	bl	801926c <_printf_common>
 80194a0:	3001      	adds	r0, #1
 80194a2:	d14a      	bne.n	801953a <_printf_i+0x1f2>
 80194a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80194a8:	b004      	add	sp, #16
 80194aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194ae:	6823      	ldr	r3, [r4, #0]
 80194b0:	f043 0320 	orr.w	r3, r3, #32
 80194b4:	6023      	str	r3, [r4, #0]
 80194b6:	4833      	ldr	r0, [pc, #204]	@ (8019584 <_printf_i+0x23c>)
 80194b8:	2778      	movs	r7, #120	@ 0x78
 80194ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80194be:	6823      	ldr	r3, [r4, #0]
 80194c0:	6831      	ldr	r1, [r6, #0]
 80194c2:	061f      	lsls	r7, r3, #24
 80194c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80194c8:	d402      	bmi.n	80194d0 <_printf_i+0x188>
 80194ca:	065f      	lsls	r7, r3, #25
 80194cc:	bf48      	it	mi
 80194ce:	b2ad      	uxthmi	r5, r5
 80194d0:	6031      	str	r1, [r6, #0]
 80194d2:	07d9      	lsls	r1, r3, #31
 80194d4:	bf44      	itt	mi
 80194d6:	f043 0320 	orrmi.w	r3, r3, #32
 80194da:	6023      	strmi	r3, [r4, #0]
 80194dc:	b11d      	cbz	r5, 80194e6 <_printf_i+0x19e>
 80194de:	2310      	movs	r3, #16
 80194e0:	e7ac      	b.n	801943c <_printf_i+0xf4>
 80194e2:	4827      	ldr	r0, [pc, #156]	@ (8019580 <_printf_i+0x238>)
 80194e4:	e7e9      	b.n	80194ba <_printf_i+0x172>
 80194e6:	6823      	ldr	r3, [r4, #0]
 80194e8:	f023 0320 	bic.w	r3, r3, #32
 80194ec:	6023      	str	r3, [r4, #0]
 80194ee:	e7f6      	b.n	80194de <_printf_i+0x196>
 80194f0:	4616      	mov	r6, r2
 80194f2:	e7bd      	b.n	8019470 <_printf_i+0x128>
 80194f4:	6833      	ldr	r3, [r6, #0]
 80194f6:	6825      	ldr	r5, [r4, #0]
 80194f8:	6961      	ldr	r1, [r4, #20]
 80194fa:	1d18      	adds	r0, r3, #4
 80194fc:	6030      	str	r0, [r6, #0]
 80194fe:	062e      	lsls	r6, r5, #24
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	d501      	bpl.n	8019508 <_printf_i+0x1c0>
 8019504:	6019      	str	r1, [r3, #0]
 8019506:	e002      	b.n	801950e <_printf_i+0x1c6>
 8019508:	0668      	lsls	r0, r5, #25
 801950a:	d5fb      	bpl.n	8019504 <_printf_i+0x1bc>
 801950c:	8019      	strh	r1, [r3, #0]
 801950e:	2300      	movs	r3, #0
 8019510:	6123      	str	r3, [r4, #16]
 8019512:	4616      	mov	r6, r2
 8019514:	e7bc      	b.n	8019490 <_printf_i+0x148>
 8019516:	6833      	ldr	r3, [r6, #0]
 8019518:	1d1a      	adds	r2, r3, #4
 801951a:	6032      	str	r2, [r6, #0]
 801951c:	681e      	ldr	r6, [r3, #0]
 801951e:	6862      	ldr	r2, [r4, #4]
 8019520:	2100      	movs	r1, #0
 8019522:	4630      	mov	r0, r6
 8019524:	f7e6 fe94 	bl	8000250 <memchr>
 8019528:	b108      	cbz	r0, 801952e <_printf_i+0x1e6>
 801952a:	1b80      	subs	r0, r0, r6
 801952c:	6060      	str	r0, [r4, #4]
 801952e:	6863      	ldr	r3, [r4, #4]
 8019530:	6123      	str	r3, [r4, #16]
 8019532:	2300      	movs	r3, #0
 8019534:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019538:	e7aa      	b.n	8019490 <_printf_i+0x148>
 801953a:	6923      	ldr	r3, [r4, #16]
 801953c:	4632      	mov	r2, r6
 801953e:	4649      	mov	r1, r9
 8019540:	4640      	mov	r0, r8
 8019542:	47d0      	blx	sl
 8019544:	3001      	adds	r0, #1
 8019546:	d0ad      	beq.n	80194a4 <_printf_i+0x15c>
 8019548:	6823      	ldr	r3, [r4, #0]
 801954a:	079b      	lsls	r3, r3, #30
 801954c:	d413      	bmi.n	8019576 <_printf_i+0x22e>
 801954e:	68e0      	ldr	r0, [r4, #12]
 8019550:	9b03      	ldr	r3, [sp, #12]
 8019552:	4298      	cmp	r0, r3
 8019554:	bfb8      	it	lt
 8019556:	4618      	movlt	r0, r3
 8019558:	e7a6      	b.n	80194a8 <_printf_i+0x160>
 801955a:	2301      	movs	r3, #1
 801955c:	4632      	mov	r2, r6
 801955e:	4649      	mov	r1, r9
 8019560:	4640      	mov	r0, r8
 8019562:	47d0      	blx	sl
 8019564:	3001      	adds	r0, #1
 8019566:	d09d      	beq.n	80194a4 <_printf_i+0x15c>
 8019568:	3501      	adds	r5, #1
 801956a:	68e3      	ldr	r3, [r4, #12]
 801956c:	9903      	ldr	r1, [sp, #12]
 801956e:	1a5b      	subs	r3, r3, r1
 8019570:	42ab      	cmp	r3, r5
 8019572:	dcf2      	bgt.n	801955a <_printf_i+0x212>
 8019574:	e7eb      	b.n	801954e <_printf_i+0x206>
 8019576:	2500      	movs	r5, #0
 8019578:	f104 0619 	add.w	r6, r4, #25
 801957c:	e7f5      	b.n	801956a <_printf_i+0x222>
 801957e:	bf00      	nop
 8019580:	0801abe7 	.word	0x0801abe7
 8019584:	0801abf8 	.word	0x0801abf8

08019588 <__sflush_r>:
 8019588:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801958c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019590:	0716      	lsls	r6, r2, #28
 8019592:	4605      	mov	r5, r0
 8019594:	460c      	mov	r4, r1
 8019596:	d454      	bmi.n	8019642 <__sflush_r+0xba>
 8019598:	684b      	ldr	r3, [r1, #4]
 801959a:	2b00      	cmp	r3, #0
 801959c:	dc02      	bgt.n	80195a4 <__sflush_r+0x1c>
 801959e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	dd48      	ble.n	8019636 <__sflush_r+0xae>
 80195a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80195a6:	2e00      	cmp	r6, #0
 80195a8:	d045      	beq.n	8019636 <__sflush_r+0xae>
 80195aa:	2300      	movs	r3, #0
 80195ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80195b0:	682f      	ldr	r7, [r5, #0]
 80195b2:	6a21      	ldr	r1, [r4, #32]
 80195b4:	602b      	str	r3, [r5, #0]
 80195b6:	d030      	beq.n	801961a <__sflush_r+0x92>
 80195b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80195ba:	89a3      	ldrh	r3, [r4, #12]
 80195bc:	0759      	lsls	r1, r3, #29
 80195be:	d505      	bpl.n	80195cc <__sflush_r+0x44>
 80195c0:	6863      	ldr	r3, [r4, #4]
 80195c2:	1ad2      	subs	r2, r2, r3
 80195c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80195c6:	b10b      	cbz	r3, 80195cc <__sflush_r+0x44>
 80195c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80195ca:	1ad2      	subs	r2, r2, r3
 80195cc:	2300      	movs	r3, #0
 80195ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80195d0:	6a21      	ldr	r1, [r4, #32]
 80195d2:	4628      	mov	r0, r5
 80195d4:	47b0      	blx	r6
 80195d6:	1c43      	adds	r3, r0, #1
 80195d8:	89a3      	ldrh	r3, [r4, #12]
 80195da:	d106      	bne.n	80195ea <__sflush_r+0x62>
 80195dc:	6829      	ldr	r1, [r5, #0]
 80195de:	291d      	cmp	r1, #29
 80195e0:	d82b      	bhi.n	801963a <__sflush_r+0xb2>
 80195e2:	4a2a      	ldr	r2, [pc, #168]	@ (801968c <__sflush_r+0x104>)
 80195e4:	410a      	asrs	r2, r1
 80195e6:	07d6      	lsls	r6, r2, #31
 80195e8:	d427      	bmi.n	801963a <__sflush_r+0xb2>
 80195ea:	2200      	movs	r2, #0
 80195ec:	6062      	str	r2, [r4, #4]
 80195ee:	04d9      	lsls	r1, r3, #19
 80195f0:	6922      	ldr	r2, [r4, #16]
 80195f2:	6022      	str	r2, [r4, #0]
 80195f4:	d504      	bpl.n	8019600 <__sflush_r+0x78>
 80195f6:	1c42      	adds	r2, r0, #1
 80195f8:	d101      	bne.n	80195fe <__sflush_r+0x76>
 80195fa:	682b      	ldr	r3, [r5, #0]
 80195fc:	b903      	cbnz	r3, 8019600 <__sflush_r+0x78>
 80195fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8019600:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019602:	602f      	str	r7, [r5, #0]
 8019604:	b1b9      	cbz	r1, 8019636 <__sflush_r+0xae>
 8019606:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801960a:	4299      	cmp	r1, r3
 801960c:	d002      	beq.n	8019614 <__sflush_r+0x8c>
 801960e:	4628      	mov	r0, r5
 8019610:	f7ff fb40 	bl	8018c94 <_free_r>
 8019614:	2300      	movs	r3, #0
 8019616:	6363      	str	r3, [r4, #52]	@ 0x34
 8019618:	e00d      	b.n	8019636 <__sflush_r+0xae>
 801961a:	2301      	movs	r3, #1
 801961c:	4628      	mov	r0, r5
 801961e:	47b0      	blx	r6
 8019620:	4602      	mov	r2, r0
 8019622:	1c50      	adds	r0, r2, #1
 8019624:	d1c9      	bne.n	80195ba <__sflush_r+0x32>
 8019626:	682b      	ldr	r3, [r5, #0]
 8019628:	2b00      	cmp	r3, #0
 801962a:	d0c6      	beq.n	80195ba <__sflush_r+0x32>
 801962c:	2b1d      	cmp	r3, #29
 801962e:	d001      	beq.n	8019634 <__sflush_r+0xac>
 8019630:	2b16      	cmp	r3, #22
 8019632:	d11e      	bne.n	8019672 <__sflush_r+0xea>
 8019634:	602f      	str	r7, [r5, #0]
 8019636:	2000      	movs	r0, #0
 8019638:	e022      	b.n	8019680 <__sflush_r+0xf8>
 801963a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801963e:	b21b      	sxth	r3, r3
 8019640:	e01b      	b.n	801967a <__sflush_r+0xf2>
 8019642:	690f      	ldr	r7, [r1, #16]
 8019644:	2f00      	cmp	r7, #0
 8019646:	d0f6      	beq.n	8019636 <__sflush_r+0xae>
 8019648:	0793      	lsls	r3, r2, #30
 801964a:	680e      	ldr	r6, [r1, #0]
 801964c:	bf08      	it	eq
 801964e:	694b      	ldreq	r3, [r1, #20]
 8019650:	600f      	str	r7, [r1, #0]
 8019652:	bf18      	it	ne
 8019654:	2300      	movne	r3, #0
 8019656:	eba6 0807 	sub.w	r8, r6, r7
 801965a:	608b      	str	r3, [r1, #8]
 801965c:	f1b8 0f00 	cmp.w	r8, #0
 8019660:	dde9      	ble.n	8019636 <__sflush_r+0xae>
 8019662:	6a21      	ldr	r1, [r4, #32]
 8019664:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019666:	4643      	mov	r3, r8
 8019668:	463a      	mov	r2, r7
 801966a:	4628      	mov	r0, r5
 801966c:	47b0      	blx	r6
 801966e:	2800      	cmp	r0, #0
 8019670:	dc08      	bgt.n	8019684 <__sflush_r+0xfc>
 8019672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801967a:	81a3      	strh	r3, [r4, #12]
 801967c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019684:	4407      	add	r7, r0
 8019686:	eba8 0800 	sub.w	r8, r8, r0
 801968a:	e7e7      	b.n	801965c <__sflush_r+0xd4>
 801968c:	dfbffffe 	.word	0xdfbffffe

08019690 <_fflush_r>:
 8019690:	b538      	push	{r3, r4, r5, lr}
 8019692:	690b      	ldr	r3, [r1, #16]
 8019694:	4605      	mov	r5, r0
 8019696:	460c      	mov	r4, r1
 8019698:	b913      	cbnz	r3, 80196a0 <_fflush_r+0x10>
 801969a:	2500      	movs	r5, #0
 801969c:	4628      	mov	r0, r5
 801969e:	bd38      	pop	{r3, r4, r5, pc}
 80196a0:	b118      	cbz	r0, 80196aa <_fflush_r+0x1a>
 80196a2:	6a03      	ldr	r3, [r0, #32]
 80196a4:	b90b      	cbnz	r3, 80196aa <_fflush_r+0x1a>
 80196a6:	f7fe ffe3 	bl	8018670 <__sinit>
 80196aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	d0f3      	beq.n	801969a <_fflush_r+0xa>
 80196b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80196b4:	07d0      	lsls	r0, r2, #31
 80196b6:	d404      	bmi.n	80196c2 <_fflush_r+0x32>
 80196b8:	0599      	lsls	r1, r3, #22
 80196ba:	d402      	bmi.n	80196c2 <_fflush_r+0x32>
 80196bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80196be:	f7ff faa6 	bl	8018c0e <__retarget_lock_acquire_recursive>
 80196c2:	4628      	mov	r0, r5
 80196c4:	4621      	mov	r1, r4
 80196c6:	f7ff ff5f 	bl	8019588 <__sflush_r>
 80196ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80196cc:	07da      	lsls	r2, r3, #31
 80196ce:	4605      	mov	r5, r0
 80196d0:	d4e4      	bmi.n	801969c <_fflush_r+0xc>
 80196d2:	89a3      	ldrh	r3, [r4, #12]
 80196d4:	059b      	lsls	r3, r3, #22
 80196d6:	d4e1      	bmi.n	801969c <_fflush_r+0xc>
 80196d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80196da:	f7ff fa99 	bl	8018c10 <__retarget_lock_release_recursive>
 80196de:	e7dd      	b.n	801969c <_fflush_r+0xc>

080196e0 <fiprintf>:
 80196e0:	b40e      	push	{r1, r2, r3}
 80196e2:	b503      	push	{r0, r1, lr}
 80196e4:	4601      	mov	r1, r0
 80196e6:	ab03      	add	r3, sp, #12
 80196e8:	4805      	ldr	r0, [pc, #20]	@ (8019700 <fiprintf+0x20>)
 80196ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80196ee:	6800      	ldr	r0, [r0, #0]
 80196f0:	9301      	str	r3, [sp, #4]
 80196f2:	f7ff fca3 	bl	801903c <_vfiprintf_r>
 80196f6:	b002      	add	sp, #8
 80196f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80196fc:	b003      	add	sp, #12
 80196fe:	4770      	bx	lr
 8019700:	200003b0 	.word	0x200003b0

08019704 <__swhatbuf_r>:
 8019704:	b570      	push	{r4, r5, r6, lr}
 8019706:	460c      	mov	r4, r1
 8019708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801970c:	2900      	cmp	r1, #0
 801970e:	b096      	sub	sp, #88	@ 0x58
 8019710:	4615      	mov	r5, r2
 8019712:	461e      	mov	r6, r3
 8019714:	da0d      	bge.n	8019732 <__swhatbuf_r+0x2e>
 8019716:	89a3      	ldrh	r3, [r4, #12]
 8019718:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801971c:	f04f 0100 	mov.w	r1, #0
 8019720:	bf14      	ite	ne
 8019722:	2340      	movne	r3, #64	@ 0x40
 8019724:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019728:	2000      	movs	r0, #0
 801972a:	6031      	str	r1, [r6, #0]
 801972c:	602b      	str	r3, [r5, #0]
 801972e:	b016      	add	sp, #88	@ 0x58
 8019730:	bd70      	pop	{r4, r5, r6, pc}
 8019732:	466a      	mov	r2, sp
 8019734:	f000 f848 	bl	80197c8 <_fstat_r>
 8019738:	2800      	cmp	r0, #0
 801973a:	dbec      	blt.n	8019716 <__swhatbuf_r+0x12>
 801973c:	9901      	ldr	r1, [sp, #4]
 801973e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019742:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019746:	4259      	negs	r1, r3
 8019748:	4159      	adcs	r1, r3
 801974a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801974e:	e7eb      	b.n	8019728 <__swhatbuf_r+0x24>

08019750 <__smakebuf_r>:
 8019750:	898b      	ldrh	r3, [r1, #12]
 8019752:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019754:	079d      	lsls	r5, r3, #30
 8019756:	4606      	mov	r6, r0
 8019758:	460c      	mov	r4, r1
 801975a:	d507      	bpl.n	801976c <__smakebuf_r+0x1c>
 801975c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019760:	6023      	str	r3, [r4, #0]
 8019762:	6123      	str	r3, [r4, #16]
 8019764:	2301      	movs	r3, #1
 8019766:	6163      	str	r3, [r4, #20]
 8019768:	b003      	add	sp, #12
 801976a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801976c:	ab01      	add	r3, sp, #4
 801976e:	466a      	mov	r2, sp
 8019770:	f7ff ffc8 	bl	8019704 <__swhatbuf_r>
 8019774:	9f00      	ldr	r7, [sp, #0]
 8019776:	4605      	mov	r5, r0
 8019778:	4639      	mov	r1, r7
 801977a:	4630      	mov	r0, r6
 801977c:	f7fe fd46 	bl	801820c <_malloc_r>
 8019780:	b948      	cbnz	r0, 8019796 <__smakebuf_r+0x46>
 8019782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019786:	059a      	lsls	r2, r3, #22
 8019788:	d4ee      	bmi.n	8019768 <__smakebuf_r+0x18>
 801978a:	f023 0303 	bic.w	r3, r3, #3
 801978e:	f043 0302 	orr.w	r3, r3, #2
 8019792:	81a3      	strh	r3, [r4, #12]
 8019794:	e7e2      	b.n	801975c <__smakebuf_r+0xc>
 8019796:	89a3      	ldrh	r3, [r4, #12]
 8019798:	6020      	str	r0, [r4, #0]
 801979a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801979e:	81a3      	strh	r3, [r4, #12]
 80197a0:	9b01      	ldr	r3, [sp, #4]
 80197a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80197a6:	b15b      	cbz	r3, 80197c0 <__smakebuf_r+0x70>
 80197a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80197ac:	4630      	mov	r0, r6
 80197ae:	f000 f81d 	bl	80197ec <_isatty_r>
 80197b2:	b128      	cbz	r0, 80197c0 <__smakebuf_r+0x70>
 80197b4:	89a3      	ldrh	r3, [r4, #12]
 80197b6:	f023 0303 	bic.w	r3, r3, #3
 80197ba:	f043 0301 	orr.w	r3, r3, #1
 80197be:	81a3      	strh	r3, [r4, #12]
 80197c0:	89a3      	ldrh	r3, [r4, #12]
 80197c2:	431d      	orrs	r5, r3
 80197c4:	81a5      	strh	r5, [r4, #12]
 80197c6:	e7cf      	b.n	8019768 <__smakebuf_r+0x18>

080197c8 <_fstat_r>:
 80197c8:	b538      	push	{r3, r4, r5, lr}
 80197ca:	4d07      	ldr	r5, [pc, #28]	@ (80197e8 <_fstat_r+0x20>)
 80197cc:	2300      	movs	r3, #0
 80197ce:	4604      	mov	r4, r0
 80197d0:	4608      	mov	r0, r1
 80197d2:	4611      	mov	r1, r2
 80197d4:	602b      	str	r3, [r5, #0]
 80197d6:	f7e8 fbf9 	bl	8001fcc <_fstat>
 80197da:	1c43      	adds	r3, r0, #1
 80197dc:	d102      	bne.n	80197e4 <_fstat_r+0x1c>
 80197de:	682b      	ldr	r3, [r5, #0]
 80197e0:	b103      	cbz	r3, 80197e4 <_fstat_r+0x1c>
 80197e2:	6023      	str	r3, [r4, #0]
 80197e4:	bd38      	pop	{r3, r4, r5, pc}
 80197e6:	bf00      	nop
 80197e8:	2000b334 	.word	0x2000b334

080197ec <_isatty_r>:
 80197ec:	b538      	push	{r3, r4, r5, lr}
 80197ee:	4d06      	ldr	r5, [pc, #24]	@ (8019808 <_isatty_r+0x1c>)
 80197f0:	2300      	movs	r3, #0
 80197f2:	4604      	mov	r4, r0
 80197f4:	4608      	mov	r0, r1
 80197f6:	602b      	str	r3, [r5, #0]
 80197f8:	f7e8 fbf8 	bl	8001fec <_isatty>
 80197fc:	1c43      	adds	r3, r0, #1
 80197fe:	d102      	bne.n	8019806 <_isatty_r+0x1a>
 8019800:	682b      	ldr	r3, [r5, #0]
 8019802:	b103      	cbz	r3, 8019806 <_isatty_r+0x1a>
 8019804:	6023      	str	r3, [r4, #0]
 8019806:	bd38      	pop	{r3, r4, r5, pc}
 8019808:	2000b334 	.word	0x2000b334

0801980c <abort>:
 801980c:	b508      	push	{r3, lr}
 801980e:	2006      	movs	r0, #6
 8019810:	f000 f82c 	bl	801986c <raise>
 8019814:	2001      	movs	r0, #1
 8019816:	f7e8 fb89 	bl	8001f2c <_exit>

0801981a <_raise_r>:
 801981a:	291f      	cmp	r1, #31
 801981c:	b538      	push	{r3, r4, r5, lr}
 801981e:	4605      	mov	r5, r0
 8019820:	460c      	mov	r4, r1
 8019822:	d904      	bls.n	801982e <_raise_r+0x14>
 8019824:	2316      	movs	r3, #22
 8019826:	6003      	str	r3, [r0, #0]
 8019828:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801982c:	bd38      	pop	{r3, r4, r5, pc}
 801982e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019830:	b112      	cbz	r2, 8019838 <_raise_r+0x1e>
 8019832:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019836:	b94b      	cbnz	r3, 801984c <_raise_r+0x32>
 8019838:	4628      	mov	r0, r5
 801983a:	f000 f831 	bl	80198a0 <_getpid_r>
 801983e:	4622      	mov	r2, r4
 8019840:	4601      	mov	r1, r0
 8019842:	4628      	mov	r0, r5
 8019844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019848:	f000 b818 	b.w	801987c <_kill_r>
 801984c:	2b01      	cmp	r3, #1
 801984e:	d00a      	beq.n	8019866 <_raise_r+0x4c>
 8019850:	1c59      	adds	r1, r3, #1
 8019852:	d103      	bne.n	801985c <_raise_r+0x42>
 8019854:	2316      	movs	r3, #22
 8019856:	6003      	str	r3, [r0, #0]
 8019858:	2001      	movs	r0, #1
 801985a:	e7e7      	b.n	801982c <_raise_r+0x12>
 801985c:	2100      	movs	r1, #0
 801985e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019862:	4620      	mov	r0, r4
 8019864:	4798      	blx	r3
 8019866:	2000      	movs	r0, #0
 8019868:	e7e0      	b.n	801982c <_raise_r+0x12>
	...

0801986c <raise>:
 801986c:	4b02      	ldr	r3, [pc, #8]	@ (8019878 <raise+0xc>)
 801986e:	4601      	mov	r1, r0
 8019870:	6818      	ldr	r0, [r3, #0]
 8019872:	f7ff bfd2 	b.w	801981a <_raise_r>
 8019876:	bf00      	nop
 8019878:	200003b0 	.word	0x200003b0

0801987c <_kill_r>:
 801987c:	b538      	push	{r3, r4, r5, lr}
 801987e:	4d07      	ldr	r5, [pc, #28]	@ (801989c <_kill_r+0x20>)
 8019880:	2300      	movs	r3, #0
 8019882:	4604      	mov	r4, r0
 8019884:	4608      	mov	r0, r1
 8019886:	4611      	mov	r1, r2
 8019888:	602b      	str	r3, [r5, #0]
 801988a:	f7e8 fb3f 	bl	8001f0c <_kill>
 801988e:	1c43      	adds	r3, r0, #1
 8019890:	d102      	bne.n	8019898 <_kill_r+0x1c>
 8019892:	682b      	ldr	r3, [r5, #0]
 8019894:	b103      	cbz	r3, 8019898 <_kill_r+0x1c>
 8019896:	6023      	str	r3, [r4, #0]
 8019898:	bd38      	pop	{r3, r4, r5, pc}
 801989a:	bf00      	nop
 801989c:	2000b334 	.word	0x2000b334

080198a0 <_getpid_r>:
 80198a0:	f7e8 bb2c 	b.w	8001efc <_getpid>

080198a4 <_init>:
 80198a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198a6:	bf00      	nop
 80198a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80198aa:	bc08      	pop	{r3}
 80198ac:	469e      	mov	lr, r3
 80198ae:	4770      	bx	lr

080198b0 <_fini>:
 80198b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198b2:	bf00      	nop
 80198b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80198b6:	bc08      	pop	{r3}
 80198b8:	469e      	mov	lr, r3
 80198ba:	4770      	bx	lr
