
ArduinoJoyStick_uros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000182ec  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db8  080184d0  080184d0  000194d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019288  08019288  0001b234  2**0
                  CONTENTS
  4 .ARM          00000008  08019288  08019288  0001a288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019290  08019290  0001b234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08019290  08019290  0001a290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019298  08019298  0001a298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  0801929c  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ae58  20000238  080194d0  0001b238  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000b090  080194d0  0001c090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b234  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026fe9  00000000  00000000  0001b264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005267  00000000  00000000  0004224d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f20  00000000  00000000  000474b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017f5  00000000  00000000  000493d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ead9  00000000  00000000  0004abcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025a61  00000000  00000000  000796a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012896f  00000000  00000000  0009f107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001c7a76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091d4  00000000  00000000  001c7aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001d0cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000238 	.word	0x20000238
 80001fc:	00000000 	.word	0x00000000
 8000200:	080184b4 	.word	0x080184b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000023c 	.word	0x2000023c
 800021c:	080184b4 	.word	0x080184b4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_ldivmod>:
 8000668:	b97b      	cbnz	r3, 800068a <__aeabi_ldivmod+0x22>
 800066a:	b972      	cbnz	r2, 800068a <__aeabi_ldivmod+0x22>
 800066c:	2900      	cmp	r1, #0
 800066e:	bfbe      	ittt	lt
 8000670:	2000      	movlt	r0, #0
 8000672:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000676:	e006      	blt.n	8000686 <__aeabi_ldivmod+0x1e>
 8000678:	bf08      	it	eq
 800067a:	2800      	cmpeq	r0, #0
 800067c:	bf1c      	itt	ne
 800067e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000682:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000686:	f000 b9b5 	b.w	80009f4 <__aeabi_idiv0>
 800068a:	f1ad 0c08 	sub.w	ip, sp, #8
 800068e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000692:	2900      	cmp	r1, #0
 8000694:	db09      	blt.n	80006aa <__aeabi_ldivmod+0x42>
 8000696:	2b00      	cmp	r3, #0
 8000698:	db1a      	blt.n	80006d0 <__aeabi_ldivmod+0x68>
 800069a:	f000 f84d 	bl	8000738 <__udivmoddi4>
 800069e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006a6:	b004      	add	sp, #16
 80006a8:	4770      	bx	lr
 80006aa:	4240      	negs	r0, r0
 80006ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db1b      	blt.n	80006ec <__aeabi_ldivmod+0x84>
 80006b4:	f000 f840 	bl	8000738 <__udivmoddi4>
 80006b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c0:	b004      	add	sp, #16
 80006c2:	4240      	negs	r0, r0
 80006c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c8:	4252      	negs	r2, r2
 80006ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ce:	4770      	bx	lr
 80006d0:	4252      	negs	r2, r2
 80006d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006d6:	f000 f82f 	bl	8000738 <__udivmoddi4>
 80006da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e2:	b004      	add	sp, #16
 80006e4:	4240      	negs	r0, r0
 80006e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ea:	4770      	bx	lr
 80006ec:	4252      	negs	r2, r2
 80006ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f2:	f000 f821 	bl	8000738 <__udivmoddi4>
 80006f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006fe:	b004      	add	sp, #16
 8000700:	4252      	negs	r2, r2
 8000702:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000706:	4770      	bx	lr

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800071c:	f000 b96a 	b.w	80009f4 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	460c      	mov	r4, r1
 8000740:	2b00      	cmp	r3, #0
 8000742:	d14e      	bne.n	80007e2 <__udivmoddi4+0xaa>
 8000744:	4694      	mov	ip, r2
 8000746:	458c      	cmp	ip, r1
 8000748:	4686      	mov	lr, r0
 800074a:	fab2 f282 	clz	r2, r2
 800074e:	d962      	bls.n	8000816 <__udivmoddi4+0xde>
 8000750:	b14a      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000752:	f1c2 0320 	rsb	r3, r2, #32
 8000756:	4091      	lsls	r1, r2
 8000758:	fa20 f303 	lsr.w	r3, r0, r3
 800075c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000760:	4319      	orrs	r1, r3
 8000762:	fa00 fe02 	lsl.w	lr, r0, r2
 8000766:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800076a:	fa1f f68c 	uxth.w	r6, ip
 800076e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000772:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000776:	fb07 1114 	mls	r1, r7, r4, r1
 800077a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077e:	fb04 f106 	mul.w	r1, r4, r6
 8000782:	4299      	cmp	r1, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x64>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800078e:	f080 8112 	bcs.w	80009b6 <__udivmoddi4+0x27e>
 8000792:	4299      	cmp	r1, r3
 8000794:	f240 810f 	bls.w	80009b6 <__udivmoddi4+0x27e>
 8000798:	3c02      	subs	r4, #2
 800079a:	4463      	add	r3, ip
 800079c:	1a59      	subs	r1, r3, r1
 800079e:	fa1f f38e 	uxth.w	r3, lr
 80007a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80007a6:	fb07 1110 	mls	r1, r7, r0, r1
 80007aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ae:	fb00 f606 	mul.w	r6, r0, r6
 80007b2:	429e      	cmp	r6, r3
 80007b4:	d90a      	bls.n	80007cc <__udivmoddi4+0x94>
 80007b6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80007be:	f080 80fc 	bcs.w	80009ba <__udivmoddi4+0x282>
 80007c2:	429e      	cmp	r6, r3
 80007c4:	f240 80f9 	bls.w	80009ba <__udivmoddi4+0x282>
 80007c8:	4463      	add	r3, ip
 80007ca:	3802      	subs	r0, #2
 80007cc:	1b9b      	subs	r3, r3, r6
 80007ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007d2:	2100      	movs	r1, #0
 80007d4:	b11d      	cbz	r5, 80007de <__udivmoddi4+0xa6>
 80007d6:	40d3      	lsrs	r3, r2
 80007d8:	2200      	movs	r2, #0
 80007da:	e9c5 3200 	strd	r3, r2, [r5]
 80007de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d905      	bls.n	80007f2 <__udivmoddi4+0xba>
 80007e6:	b10d      	cbz	r5, 80007ec <__udivmoddi4+0xb4>
 80007e8:	e9c5 0100 	strd	r0, r1, [r5]
 80007ec:	2100      	movs	r1, #0
 80007ee:	4608      	mov	r0, r1
 80007f0:	e7f5      	b.n	80007de <__udivmoddi4+0xa6>
 80007f2:	fab3 f183 	clz	r1, r3
 80007f6:	2900      	cmp	r1, #0
 80007f8:	d146      	bne.n	8000888 <__udivmoddi4+0x150>
 80007fa:	42a3      	cmp	r3, r4
 80007fc:	d302      	bcc.n	8000804 <__udivmoddi4+0xcc>
 80007fe:	4290      	cmp	r0, r2
 8000800:	f0c0 80f0 	bcc.w	80009e4 <__udivmoddi4+0x2ac>
 8000804:	1a86      	subs	r6, r0, r2
 8000806:	eb64 0303 	sbc.w	r3, r4, r3
 800080a:	2001      	movs	r0, #1
 800080c:	2d00      	cmp	r5, #0
 800080e:	d0e6      	beq.n	80007de <__udivmoddi4+0xa6>
 8000810:	e9c5 6300 	strd	r6, r3, [r5]
 8000814:	e7e3      	b.n	80007de <__udivmoddi4+0xa6>
 8000816:	2a00      	cmp	r2, #0
 8000818:	f040 8090 	bne.w	800093c <__udivmoddi4+0x204>
 800081c:	eba1 040c 	sub.w	r4, r1, ip
 8000820:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000824:	fa1f f78c 	uxth.w	r7, ip
 8000828:	2101      	movs	r1, #1
 800082a:	fbb4 f6f8 	udiv	r6, r4, r8
 800082e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000832:	fb08 4416 	mls	r4, r8, r6, r4
 8000836:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800083a:	fb07 f006 	mul.w	r0, r7, r6
 800083e:	4298      	cmp	r0, r3
 8000840:	d908      	bls.n	8000854 <__udivmoddi4+0x11c>
 8000842:	eb1c 0303 	adds.w	r3, ip, r3
 8000846:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800084a:	d202      	bcs.n	8000852 <__udivmoddi4+0x11a>
 800084c:	4298      	cmp	r0, r3
 800084e:	f200 80cd 	bhi.w	80009ec <__udivmoddi4+0x2b4>
 8000852:	4626      	mov	r6, r4
 8000854:	1a1c      	subs	r4, r3, r0
 8000856:	fa1f f38e 	uxth.w	r3, lr
 800085a:	fbb4 f0f8 	udiv	r0, r4, r8
 800085e:	fb08 4410 	mls	r4, r8, r0, r4
 8000862:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000866:	fb00 f707 	mul.w	r7, r0, r7
 800086a:	429f      	cmp	r7, r3
 800086c:	d908      	bls.n	8000880 <__udivmoddi4+0x148>
 800086e:	eb1c 0303 	adds.w	r3, ip, r3
 8000872:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000876:	d202      	bcs.n	800087e <__udivmoddi4+0x146>
 8000878:	429f      	cmp	r7, r3
 800087a:	f200 80b0 	bhi.w	80009de <__udivmoddi4+0x2a6>
 800087e:	4620      	mov	r0, r4
 8000880:	1bdb      	subs	r3, r3, r7
 8000882:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000886:	e7a5      	b.n	80007d4 <__udivmoddi4+0x9c>
 8000888:	f1c1 0620 	rsb	r6, r1, #32
 800088c:	408b      	lsls	r3, r1
 800088e:	fa22 f706 	lsr.w	r7, r2, r6
 8000892:	431f      	orrs	r7, r3
 8000894:	fa20 fc06 	lsr.w	ip, r0, r6
 8000898:	fa04 f301 	lsl.w	r3, r4, r1
 800089c:	ea43 030c 	orr.w	r3, r3, ip
 80008a0:	40f4      	lsrs	r4, r6
 80008a2:	fa00 f801 	lsl.w	r8, r0, r1
 80008a6:	0c38      	lsrs	r0, r7, #16
 80008a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008ac:	fbb4 fef0 	udiv	lr, r4, r0
 80008b0:	fa1f fc87 	uxth.w	ip, r7
 80008b4:	fb00 441e 	mls	r4, r0, lr, r4
 80008b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008bc:	fb0e f90c 	mul.w	r9, lr, ip
 80008c0:	45a1      	cmp	r9, r4
 80008c2:	fa02 f201 	lsl.w	r2, r2, r1
 80008c6:	d90a      	bls.n	80008de <__udivmoddi4+0x1a6>
 80008c8:	193c      	adds	r4, r7, r4
 80008ca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80008ce:	f080 8084 	bcs.w	80009da <__udivmoddi4+0x2a2>
 80008d2:	45a1      	cmp	r9, r4
 80008d4:	f240 8081 	bls.w	80009da <__udivmoddi4+0x2a2>
 80008d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008dc:	443c      	add	r4, r7
 80008de:	eba4 0409 	sub.w	r4, r4, r9
 80008e2:	fa1f f983 	uxth.w	r9, r3
 80008e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008ea:	fb00 4413 	mls	r4, r0, r3, r4
 80008ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008f6:	45a4      	cmp	ip, r4
 80008f8:	d907      	bls.n	800090a <__udivmoddi4+0x1d2>
 80008fa:	193c      	adds	r4, r7, r4
 80008fc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000900:	d267      	bcs.n	80009d2 <__udivmoddi4+0x29a>
 8000902:	45a4      	cmp	ip, r4
 8000904:	d965      	bls.n	80009d2 <__udivmoddi4+0x29a>
 8000906:	3b02      	subs	r3, #2
 8000908:	443c      	add	r4, r7
 800090a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800090e:	fba0 9302 	umull	r9, r3, r0, r2
 8000912:	eba4 040c 	sub.w	r4, r4, ip
 8000916:	429c      	cmp	r4, r3
 8000918:	46ce      	mov	lr, r9
 800091a:	469c      	mov	ip, r3
 800091c:	d351      	bcc.n	80009c2 <__udivmoddi4+0x28a>
 800091e:	d04e      	beq.n	80009be <__udivmoddi4+0x286>
 8000920:	b155      	cbz	r5, 8000938 <__udivmoddi4+0x200>
 8000922:	ebb8 030e 	subs.w	r3, r8, lr
 8000926:	eb64 040c 	sbc.w	r4, r4, ip
 800092a:	fa04 f606 	lsl.w	r6, r4, r6
 800092e:	40cb      	lsrs	r3, r1
 8000930:	431e      	orrs	r6, r3
 8000932:	40cc      	lsrs	r4, r1
 8000934:	e9c5 6400 	strd	r6, r4, [r5]
 8000938:	2100      	movs	r1, #0
 800093a:	e750      	b.n	80007de <__udivmoddi4+0xa6>
 800093c:	f1c2 0320 	rsb	r3, r2, #32
 8000940:	fa20 f103 	lsr.w	r1, r0, r3
 8000944:	fa0c fc02 	lsl.w	ip, ip, r2
 8000948:	fa24 f303 	lsr.w	r3, r4, r3
 800094c:	4094      	lsls	r4, r2
 800094e:	430c      	orrs	r4, r1
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa00 fe02 	lsl.w	lr, r0, r2
 8000958:	fa1f f78c 	uxth.w	r7, ip
 800095c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000960:	fb08 3110 	mls	r1, r8, r0, r3
 8000964:	0c23      	lsrs	r3, r4, #16
 8000966:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800096a:	fb00 f107 	mul.w	r1, r0, r7
 800096e:	4299      	cmp	r1, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x24c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800097a:	d22c      	bcs.n	80009d6 <__udivmoddi4+0x29e>
 800097c:	4299      	cmp	r1, r3
 800097e:	d92a      	bls.n	80009d6 <__udivmoddi4+0x29e>
 8000980:	3802      	subs	r0, #2
 8000982:	4463      	add	r3, ip
 8000984:	1a5b      	subs	r3, r3, r1
 8000986:	b2a4      	uxth	r4, r4
 8000988:	fbb3 f1f8 	udiv	r1, r3, r8
 800098c:	fb08 3311 	mls	r3, r8, r1, r3
 8000990:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000994:	fb01 f307 	mul.w	r3, r1, r7
 8000998:	42a3      	cmp	r3, r4
 800099a:	d908      	bls.n	80009ae <__udivmoddi4+0x276>
 800099c:	eb1c 0404 	adds.w	r4, ip, r4
 80009a0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80009a4:	d213      	bcs.n	80009ce <__udivmoddi4+0x296>
 80009a6:	42a3      	cmp	r3, r4
 80009a8:	d911      	bls.n	80009ce <__udivmoddi4+0x296>
 80009aa:	3902      	subs	r1, #2
 80009ac:	4464      	add	r4, ip
 80009ae:	1ae4      	subs	r4, r4, r3
 80009b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009b4:	e739      	b.n	800082a <__udivmoddi4+0xf2>
 80009b6:	4604      	mov	r4, r0
 80009b8:	e6f0      	b.n	800079c <__udivmoddi4+0x64>
 80009ba:	4608      	mov	r0, r1
 80009bc:	e706      	b.n	80007cc <__udivmoddi4+0x94>
 80009be:	45c8      	cmp	r8, r9
 80009c0:	d2ae      	bcs.n	8000920 <__udivmoddi4+0x1e8>
 80009c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009ca:	3801      	subs	r0, #1
 80009cc:	e7a8      	b.n	8000920 <__udivmoddi4+0x1e8>
 80009ce:	4631      	mov	r1, r6
 80009d0:	e7ed      	b.n	80009ae <__udivmoddi4+0x276>
 80009d2:	4603      	mov	r3, r0
 80009d4:	e799      	b.n	800090a <__udivmoddi4+0x1d2>
 80009d6:	4630      	mov	r0, r6
 80009d8:	e7d4      	b.n	8000984 <__udivmoddi4+0x24c>
 80009da:	46d6      	mov	lr, sl
 80009dc:	e77f      	b.n	80008de <__udivmoddi4+0x1a6>
 80009de:	4463      	add	r3, ip
 80009e0:	3802      	subs	r0, #2
 80009e2:	e74d      	b.n	8000880 <__udivmoddi4+0x148>
 80009e4:	4606      	mov	r6, r0
 80009e6:	4623      	mov	r3, r4
 80009e8:	4608      	mov	r0, r1
 80009ea:	e70f      	b.n	800080c <__udivmoddi4+0xd4>
 80009ec:	3e02      	subs	r6, #2
 80009ee:	4463      	add	r3, ip
 80009f0:	e730      	b.n	8000854 <__udivmoddi4+0x11c>
 80009f2:	bf00      	nop

080009f4 <__aeabi_idiv0>:
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	@ 0x30
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2220      	movs	r2, #32
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f016 fdb1 	bl	8017578 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a16:	4b39      	ldr	r3, [pc, #228]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a18:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a1e:	4b37      	ldr	r3, [pc, #220]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a20:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a26:	4b35      	ldr	r3, [pc, #212]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a2c:	4b33      	ldr	r3, [pc, #204]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000a32:	4b32      	ldr	r3, [pc, #200]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a38:	4b30      	ldr	r3, [pc, #192]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a40:	2204      	movs	r2, #4
 8000a42:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a44:	4b2d      	ldr	r3, [pc, #180]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000a50:	4b2a      	ldr	r3, [pc, #168]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a52:	2202      	movs	r2, #2
 8000a54:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a56:	4b29      	ldr	r3, [pc, #164]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a5e:	4b27      	ldr	r3, [pc, #156]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a64:	4b25      	ldr	r3, [pc, #148]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a6a:	4b24      	ldr	r3, [pc, #144]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a72:	4b22      	ldr	r3, [pc, #136]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000a78:	4b20      	ldr	r3, [pc, #128]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a80:	481e      	ldr	r0, [pc, #120]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a82:	f001 fda3 	bl	80025cc <HAL_ADC_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000a8c:	f000 fee4 	bl	8001858 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4818      	ldr	r0, [pc, #96]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000a9c:	f002 fe68 	bl	8003770 <HAL_ADCEx_MultiModeConfigChannel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000aa6:	f000 fed7 	bl	8001858 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000aaa:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000aac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aae:	2306      	movs	r3, #6
 8000ab0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000ab2:	2307      	movs	r3, #7
 8000ab4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ab6:	237f      	movs	r3, #127	@ 0x7f
 8000ab8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aba:	2304      	movs	r3, #4
 8000abc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480d      	ldr	r0, [pc, #52]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000ac8:	f002 f9ba 	bl	8002e40 <HAL_ADC_ConfigChannel>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000ad2:	f000 fec1 	bl	8001858 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <MX_ADC1_Init+0x10c>)
 8000ad8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ada:	230c      	movs	r3, #12
 8000adc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4806      	ldr	r0, [pc, #24]	@ (8000afc <MX_ADC1_Init+0x104>)
 8000ae4:	f002 f9ac 	bl	8002e40 <HAL_ADC_ConfigChannel>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000aee:	f000 feb3 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	3730      	adds	r7, #48	@ 0x30
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000254 	.word	0x20000254
 8000b00:	04300002 	.word	0x04300002
 8000b04:	08600004 	.word	0x08600004

08000b08 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b09e      	sub	sp, #120	@ 0x78
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	2254      	movs	r2, #84	@ 0x54
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f016 fd25 	bl	8017578 <memset>
  if(adcHandle->Instance==ADC1)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b36:	d167      	bne.n	8000c08 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b3c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b3e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000b42:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f004 fb09 	bl	8005160 <HAL_RCCEx_PeriphCLKConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000b54:	f000 fe80 	bl	8001858 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b58:	4b2d      	ldr	r3, [pc, #180]	@ (8000c10 <HAL_ADC_MspInit+0x108>)
 8000b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5c:	4a2c      	ldr	r2, [pc, #176]	@ (8000c10 <HAL_ADC_MspInit+0x108>)
 8000b5e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b64:	4b2a      	ldr	r3, [pc, #168]	@ (8000c10 <HAL_ADC_MspInit+0x108>)
 8000b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	4b27      	ldr	r3, [pc, #156]	@ (8000c10 <HAL_ADC_MspInit+0x108>)
 8000b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b74:	4a26      	ldr	r2, [pc, #152]	@ (8000c10 <HAL_ADC_MspInit+0x108>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7c:	4b24      	ldr	r3, [pc, #144]	@ (8000c10 <HAL_ADC_MspInit+0x108>)
 8000b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b9e:	f003 fb0d 	bl	80041bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c14 <HAL_ADC_MspInit+0x10c>)
 8000ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8000c18 <HAL_ADC_MspInit+0x110>)
 8000ba6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c14 <HAL_ADC_MspInit+0x10c>)
 8000baa:	2205      	movs	r2, #5
 8000bac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bae:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <HAL_ADC_MspInit+0x10c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb4:	4b17      	ldr	r3, [pc, #92]	@ (8000c14 <HAL_ADC_MspInit+0x10c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bba:	4b16      	ldr	r3, [pc, #88]	@ (8000c14 <HAL_ADC_MspInit+0x10c>)
 8000bbc:	2280      	movs	r2, #128	@ 0x80
 8000bbe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	@ (8000c14 <HAL_ADC_MspInit+0x10c>)
 8000bc2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bc6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <HAL_ADC_MspInit+0x10c>)
 8000bca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bd0:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <HAL_ADC_MspInit+0x10c>)
 8000bd2:	2220      	movs	r2, #32
 8000bd4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <HAL_ADC_MspInit+0x10c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bdc:	480d      	ldr	r0, [pc, #52]	@ (8000c14 <HAL_ADC_MspInit+0x10c>)
 8000bde:	f002 ffaf 	bl	8003b40 <HAL_DMA_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000be8:	f000 fe36 	bl	8001858 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a09      	ldr	r2, [pc, #36]	@ (8000c14 <HAL_ADC_MspInit+0x10c>)
 8000bf0:	655a      	str	r2, [r3, #84]	@ 0x54
 8000bf2:	4a08      	ldr	r2, [pc, #32]	@ (8000c14 <HAL_ADC_MspInit+0x10c>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2105      	movs	r1, #5
 8000bfc:	2012      	movs	r0, #18
 8000bfe:	f002 ff77 	bl	8003af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c02:	2012      	movs	r0, #18
 8000c04:	f002 ff8e 	bl	8003b24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c08:	bf00      	nop
 8000c0a:	3778      	adds	r7, #120	@ 0x78
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40021000 	.word	0x40021000
 8000c14:	200002c0 	.word	0x200002c0
 8000c18:	40020030 	.word	0x40020030

08000c1c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c20:	4a04      	ldr	r2, [pc, #16]	@ (8000c34 <MX_FREERTOS_Init+0x18>)
 8000c22:	2100      	movs	r1, #0
 8000c24:	4804      	ldr	r0, [pc, #16]	@ (8000c38 <MX_FREERTOS_Init+0x1c>)
 8000c26:	f006 fea7 	bl	8007978 <osThreadNew>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	4a03      	ldr	r2, [pc, #12]	@ (8000c3c <MX_FREERTOS_Init+0x20>)
 8000c2e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	08018558 	.word	0x08018558
 8000c38:	08001409 	.word	0x08001409
 8000c3c:	20000320 	.word	0x20000320

08000c40 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	@ 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000c4c:	f007 ff68 	bl	8008b20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000c50:	4b5a      	ldr	r3, [pc, #360]	@ (8000dbc <pvPortMallocMicroROS+0x17c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d101      	bne.n	8000c5c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000c58:	f000 f986 	bl	8000f68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000c5c:	4b58      	ldr	r3, [pc, #352]	@ (8000dc0 <pvPortMallocMicroROS+0x180>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4013      	ands	r3, r2
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f040 8090 	bne.w	8000d8a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d01e      	beq.n	8000cae <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000c70:	2208      	movs	r2, #8
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d015      	beq.n	8000cae <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f023 0307 	bic.w	r3, r3, #7
 8000c88:	3308      	adds	r3, #8
 8000c8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00b      	beq.n	8000cae <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c9a:	f383 8811 	msr	BASEPRI, r3
 8000c9e:	f3bf 8f6f 	isb	sy
 8000ca2:	f3bf 8f4f 	dsb	sy
 8000ca6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000ca8:	bf00      	nop
 8000caa:	bf00      	nop
 8000cac:	e7fd      	b.n	8000caa <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d06a      	beq.n	8000d8a <pvPortMallocMicroROS+0x14a>
 8000cb4:	4b43      	ldr	r3, [pc, #268]	@ (8000dc4 <pvPortMallocMicroROS+0x184>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d865      	bhi.n	8000d8a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000cbe:	4b42      	ldr	r3, [pc, #264]	@ (8000dc8 <pvPortMallocMicroROS+0x188>)
 8000cc0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000cc2:	4b41      	ldr	r3, [pc, #260]	@ (8000dc8 <pvPortMallocMicroROS+0x188>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000cc8:	e004      	b.n	8000cd4 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ccc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d903      	bls.n	8000ce6 <pvPortMallocMicroROS+0xa6>
 8000cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1f1      	bne.n	8000cca <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000ce6:	4b35      	ldr	r3, [pc, #212]	@ (8000dbc <pvPortMallocMicroROS+0x17c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d04c      	beq.n	8000d8a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000cf0:	6a3b      	ldr	r3, [r7, #32]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2208      	movs	r2, #8
 8000cf6:	4413      	add	r3, r2
 8000cf8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	6a3b      	ldr	r3, [r7, #32]
 8000d00:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	1ad2      	subs	r2, r2, r3
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d920      	bls.n	8000d54 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4413      	add	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	f003 0307 	and.w	r3, r3, #7
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d00b      	beq.n	8000d3c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d28:	f383 8811 	msr	BASEPRI, r3
 8000d2c:	f3bf 8f6f 	isb	sy
 8000d30:	f3bf 8f4f 	dsb	sy
 8000d34:	613b      	str	r3, [r7, #16]
}
 8000d36:	bf00      	nop
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	1ad2      	subs	r2, r2, r3
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000d4e:	69b8      	ldr	r0, [r7, #24]
 8000d50:	f000 f96c 	bl	800102c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc4 <pvPortMallocMicroROS+0x184>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	4a19      	ldr	r2, [pc, #100]	@ (8000dc4 <pvPortMallocMicroROS+0x184>)
 8000d60:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000d62:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <pvPortMallocMicroROS+0x184>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	4b19      	ldr	r3, [pc, #100]	@ (8000dcc <pvPortMallocMicroROS+0x18c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d203      	bcs.n	8000d76 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000d6e:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <pvPortMallocMicroROS+0x184>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a16      	ldr	r2, [pc, #88]	@ (8000dcc <pvPortMallocMicroROS+0x18c>)
 8000d74:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d78:	685a      	ldr	r2, [r3, #4]
 8000d7a:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <pvPortMallocMicroROS+0x180>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d82:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000d8a:	f007 fed7 	bl	8008b3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	f003 0307 	and.w	r3, r3, #7
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d00b      	beq.n	8000db0 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d9c:	f383 8811 	msr	BASEPRI, r3
 8000da0:	f3bf 8f6f 	isb	sy
 8000da4:	f3bf 8f4f 	dsb	sy
 8000da8:	60fb      	str	r3, [r7, #12]
}
 8000daa:	bf00      	nop
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000db0:	69fb      	ldr	r3, [r7, #28]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3728      	adds	r7, #40	@ 0x28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20003e68 	.word	0x20003e68
 8000dc0:	20003e74 	.word	0x20003e74
 8000dc4:	20003e6c 	.word	0x20003e6c
 8000dc8:	20003e60 	.word	0x20003e60
 8000dcc:	20003e70 	.word	0x20003e70

08000dd0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d04a      	beq.n	8000e78 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000de2:	2308      	movs	r3, #8
 8000de4:	425b      	negs	r3, r3
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	4413      	add	r3, r2
 8000dea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	4b22      	ldr	r3, [pc, #136]	@ (8000e80 <vPortFreeMicroROS+0xb0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10b      	bne.n	8000e16 <vPortFreeMicroROS+0x46>
	__asm volatile
 8000dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e02:	f383 8811 	msr	BASEPRI, r3
 8000e06:	f3bf 8f6f 	isb	sy
 8000e0a:	f3bf 8f4f 	dsb	sy
 8000e0e:	60fb      	str	r3, [r7, #12]
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	e7fd      	b.n	8000e12 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d00b      	beq.n	8000e36 <vPortFreeMicroROS+0x66>
	__asm volatile
 8000e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e22:	f383 8811 	msr	BASEPRI, r3
 8000e26:	f3bf 8f6f 	isb	sy
 8000e2a:	f3bf 8f4f 	dsb	sy
 8000e2e:	60bb      	str	r3, [r7, #8]
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	e7fd      	b.n	8000e32 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <vPortFreeMicroROS+0xb0>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d019      	beq.n	8000e78 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d115      	bne.n	8000e78 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <vPortFreeMicroROS+0xb0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	401a      	ands	r2, r3
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000e5c:	f007 fe60 	bl	8008b20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	4b07      	ldr	r3, [pc, #28]	@ (8000e84 <vPortFreeMicroROS+0xb4>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4413      	add	r3, r2
 8000e6a:	4a06      	ldr	r2, [pc, #24]	@ (8000e84 <vPortFreeMicroROS+0xb4>)
 8000e6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000e6e:	6938      	ldr	r0, [r7, #16]
 8000e70:	f000 f8dc 	bl	800102c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000e74:	f007 fe62 	bl	8008b3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000e78:	bf00      	nop
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20003e74 	.word	0x20003e74
 8000e84:	20003e6c 	.word	0x20003e6c

08000e88 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000e94:	2308      	movs	r3, #8
 8000e96:	425b      	negs	r3, r3
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <getBlockSize+0x38>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	4013      	ands	r3, r2
 8000eae:	60fb      	str	r3, [r7, #12]

	return count;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	371c      	adds	r7, #28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20003e74 	.word	0x20003e74

08000ec4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000ece:	f007 fe27 	bl	8008b20 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000ed2:	6838      	ldr	r0, [r7, #0]
 8000ed4:	f7ff feb4 	bl	8000c40 <pvPortMallocMicroROS>
 8000ed8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d017      	beq.n	8000f10 <pvPortReallocMicroROS+0x4c>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d014      	beq.n	8000f10 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ffce 	bl	8000e88 <getBlockSize>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2208      	movs	r2, #8
 8000ef0:	1a9b      	subs	r3, r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d201      	bcs.n	8000f00 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	68b8      	ldr	r0, [r7, #8]
 8000f06:	f016 fc00 	bl	801770a <memcpy>

		vPortFreeMicroROS(pv);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ff60 	bl	8000dd0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000f10:	f007 fe14 	bl	8008b3c <xTaskResumeAll>

	return newmem;
 8000f14:	68bb      	ldr	r3, [r7, #8]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000f28:	f007 fdfa 	bl	8008b20 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	fb02 f303 	mul.w	r3, r2, r3
 8000f34:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000f36:	6978      	ldr	r0, [r7, #20]
 8000f38:	f7ff fe82 	bl	8000c40 <pvPortMallocMicroROS>
 8000f3c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000f42:	e004      	b.n	8000f4e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	613a      	str	r2, [r7, #16]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	1e5a      	subs	r2, r3, #1
 8000f52:	617a      	str	r2, [r7, #20]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1f5      	bne.n	8000f44 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000f58:	f007 fdf0 	bl	8008b3c <xTaskResumeAll>
  	return mem;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000f6e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000f74:	4b27      	ldr	r3, [pc, #156]	@ (8001014 <prvHeapInit+0xac>)
 8000f76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00c      	beq.n	8000f9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	3307      	adds	r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f023 0307 	bic.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000f90:	68ba      	ldr	r2, [r7, #8]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	4a1f      	ldr	r2, [pc, #124]	@ (8001014 <prvHeapInit+0xac>)
 8000f98:	4413      	add	r3, r2
 8000f9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8001018 <prvHeapInit+0xb0>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001018 <prvHeapInit+0xb0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000fb4:	2208      	movs	r2, #8
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	1a9b      	subs	r3, r3, r2
 8000fba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f023 0307 	bic.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4a15      	ldr	r2, [pc, #84]	@ (800101c <prvHeapInit+0xb4>)
 8000fc8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000fca:	4b14      	ldr	r3, [pc, #80]	@ (800101c <prvHeapInit+0xb4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000fd2:	4b12      	ldr	r3, [pc, #72]	@ (800101c <prvHeapInit+0xb4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	1ad2      	subs	r2, r2, r3
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <prvHeapInit+0xb4>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	4a0a      	ldr	r2, [pc, #40]	@ (8001020 <prvHeapInit+0xb8>)
 8000ff6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	4a09      	ldr	r2, [pc, #36]	@ (8001024 <prvHeapInit+0xbc>)
 8000ffe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001000:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <prvHeapInit+0xc0>)
 8001002:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001006:	601a      	str	r2, [r3, #0]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	20003260 	.word	0x20003260
 8001018:	20003e60 	.word	0x20003e60
 800101c:	20003e68 	.word	0x20003e68
 8001020:	20003e70 	.word	0x20003e70
 8001024:	20003e6c 	.word	0x20003e6c
 8001028:	20003e74 	.word	0x20003e74

0800102c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001034:	4b28      	ldr	r3, [pc, #160]	@ (80010d8 <prvInsertBlockIntoFreeList+0xac>)
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	e002      	b.n	8001040 <prvInsertBlockIntoFreeList+0x14>
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	429a      	cmp	r2, r3
 8001048:	d8f7      	bhi.n	800103a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	4413      	add	r3, r2
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	429a      	cmp	r2, r3
 800105a:	d108      	bne.n	800106e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	441a      	add	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	441a      	add	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	429a      	cmp	r2, r3
 8001080:	d118      	bne.n	80010b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <prvInsertBlockIntoFreeList+0xb0>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	429a      	cmp	r2, r3
 800108c:	d00d      	beq.n	80010aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	441a      	add	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	e008      	b.n	80010bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80010aa:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <prvInsertBlockIntoFreeList+0xb0>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	e003      	b.n	80010bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d002      	beq.n	80010ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20003e60 	.word	0x20003e60
 80010dc:	20003e68 	.word	0x20003e68

080010e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80010e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <MX_DMA_Init+0x70>)
 80010e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010ea:	4a19      	ldr	r2, [pc, #100]	@ (8001150 <MX_DMA_Init+0x70>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	6493      	str	r3, [r2, #72]	@ 0x48
 80010f2:	4b17      	ldr	r3, [pc, #92]	@ (8001150 <MX_DMA_Init+0x70>)
 80010f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010fe:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <MX_DMA_Init+0x70>)
 8001100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001102:	4a13      	ldr	r2, [pc, #76]	@ (8001150 <MX_DMA_Init+0x70>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6493      	str	r3, [r2, #72]	@ 0x48
 800110a:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <MX_DMA_Init+0x70>)
 800110c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2105      	movs	r1, #5
 800111a:	200b      	movs	r0, #11
 800111c:	f002 fce8 	bl	8003af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001120:	200b      	movs	r0, #11
 8001122:	f002 fcff 	bl	8003b24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2105      	movs	r1, #5
 800112a:	200c      	movs	r0, #12
 800112c:	f002 fce0 	bl	8003af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001130:	200c      	movs	r0, #12
 8001132:	f002 fcf7 	bl	8003b24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2105      	movs	r1, #5
 800113a:	200d      	movs	r0, #13
 800113c:	f002 fcd8 	bl	8003af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001140:	200d      	movs	r0, #13
 8001142:	f002 fcef 	bl	8003b24 <HAL_NVIC_EnableIRQ>

}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000

08001154 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001162:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001164:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001168:	4904      	ldr	r1, [pc, #16]	@ (800117c <cubemx_transport_open+0x28>)
 800116a:	68f8      	ldr	r0, [r7, #12]
 800116c:	f004 fe62 	bl	8005e34 <HAL_UART_Receive_DMA>
    return true;
 8001170:	2301      	movs	r3, #1
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20003e78 	.word	0x20003e78

08001180 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800118e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f004 fe9b 	bl	8005ecc <HAL_UART_DMAStop>
    return true;
 8001196:	2301      	movs	r3, #1
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80011b4:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011bc:	2b20      	cmp	r3, #32
 80011be:	d11b      	bne.n	80011f8 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	461a      	mov	r2, r3
 80011c6:	68b9      	ldr	r1, [r7, #8]
 80011c8:	6978      	ldr	r0, [r7, #20]
 80011ca:	f004 fdb3 	bl	8005d34 <HAL_UART_Transmit_DMA>
 80011ce:	4603      	mov	r3, r0
 80011d0:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80011d2:	e002      	b.n	80011da <cubemx_transport_write+0x3a>
            osDelay(1);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f006 fc61 	bl	8007a9c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80011da:	7cfb      	ldrb	r3, [r7, #19]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d104      	bne.n	80011ea <cubemx_transport_write+0x4a>
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011e6:	2b20      	cmp	r3, #32
 80011e8:	d1f4      	bne.n	80011d4 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 80011ea:	7cfb      	ldrb	r3, [r7, #19]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d101      	bne.n	80011f4 <cubemx_transport_write+0x54>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	e002      	b.n	80011fa <cubemx_transport_write+0x5a>
 80011f4:	2300      	movs	r3, #0
 80011f6:	e000      	b.n	80011fa <cubemx_transport_write+0x5a>
    }else{
        return 0;
 80011f8:	2300      	movs	r3, #0
    }
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001218:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800121e:	b672      	cpsid	i
}
 8001220:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001230:	4a1b      	ldr	r2, [pc, #108]	@ (80012a0 <cubemx_transport_read+0x9c>)
 8001232:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001234:	b662      	cpsie	i
}
 8001236:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	3301      	adds	r3, #1
 800123c:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 800123e:	2001      	movs	r0, #1
 8001240:	f006 fc2c 	bl	8007a9c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001244:	4b17      	ldr	r3, [pc, #92]	@ (80012a4 <cubemx_transport_read+0xa0>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <cubemx_transport_read+0x9c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	429a      	cmp	r2, r3
 800124e:	d103      	bne.n	8001258 <cubemx_transport_read+0x54>
 8001250:	69fa      	ldr	r2, [r7, #28]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	dbe2      	blt.n	800121e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800125c:	e011      	b.n	8001282 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 800125e:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <cubemx_transport_read+0xa0>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	68b9      	ldr	r1, [r7, #8]
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	440b      	add	r3, r1
 8001268:	490f      	ldr	r1, [pc, #60]	@ (80012a8 <cubemx_transport_read+0xa4>)
 800126a:	5c8a      	ldrb	r2, [r1, r2]
 800126c:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 800126e:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <cubemx_transport_read+0xa0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001278:	4a0a      	ldr	r2, [pc, #40]	@ (80012a4 <cubemx_transport_read+0xa0>)
 800127a:	6013      	str	r3, [r2, #0]
        wrote++;
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	3301      	adds	r3, #1
 8001280:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001282:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <cubemx_transport_read+0xa0>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <cubemx_transport_read+0x9c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d003      	beq.n	8001296 <cubemx_transport_read+0x92>
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	429a      	cmp	r2, r3
 8001294:	d3e3      	bcc.n	800125e <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8001296:	69bb      	ldr	r3, [r7, #24]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3720      	adds	r7, #32
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	2000467c 	.word	0x2000467c
 80012a4:	20004678 	.word	0x20004678
 80012a8:	20003e78 	.word	0x20003e78

080012ac <MX_GPIO_Init>:
        * EXTI
     PB8-BOOT0   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	@ 0x28
 80012b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	4b44      	ldr	r3, [pc, #272]	@ (80013d4 <MX_GPIO_Init+0x128>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c6:	4a43      	ldr	r2, [pc, #268]	@ (80013d4 <MX_GPIO_Init+0x128>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ce:	4b41      	ldr	r3, [pc, #260]	@ (80013d4 <MX_GPIO_Init+0x128>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012da:	4b3e      	ldr	r3, [pc, #248]	@ (80013d4 <MX_GPIO_Init+0x128>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012de:	4a3d      	ldr	r2, [pc, #244]	@ (80013d4 <MX_GPIO_Init+0x128>)
 80012e0:	f043 0320 	orr.w	r3, r3, #32
 80012e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e6:	4b3b      	ldr	r3, [pc, #236]	@ (80013d4 <MX_GPIO_Init+0x128>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ea:	f003 0320 	and.w	r3, r3, #32
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	4b38      	ldr	r3, [pc, #224]	@ (80013d4 <MX_GPIO_Init+0x128>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f6:	4a37      	ldr	r2, [pc, #220]	@ (80013d4 <MX_GPIO_Init+0x128>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012fe:	4b35      	ldr	r3, [pc, #212]	@ (80013d4 <MX_GPIO_Init+0x128>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	4b32      	ldr	r3, [pc, #200]	@ (80013d4 <MX_GPIO_Init+0x128>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130e:	4a31      	ldr	r2, [pc, #196]	@ (80013d4 <MX_GPIO_Init+0x128>)
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001316:	4b2f      	ldr	r3, [pc, #188]	@ (80013d4 <MX_GPIO_Init+0x128>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	2120      	movs	r1, #32
 8001326:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800132a:	f003 f8c9 	bl	80044c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800132e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001334:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4824      	ldr	r0, [pc, #144]	@ (80013d8 <MX_GPIO_Init+0x12c>)
 8001346:	f002 ff39 	bl	80041bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2;
 800134a:	f24c 0304 	movw	r3, #49156	@ 0xc004
 800134e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4619      	mov	r1, r3
 800135e:	481e      	ldr	r0, [pc, #120]	@ (80013d8 <MX_GPIO_Init+0x12c>)
 8001360:	f002 ff2c 	bl	80041bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001364:	2303      	movs	r3, #3
 8001366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001368:	2300      	movs	r3, #0
 800136a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	4819      	ldr	r0, [pc, #100]	@ (80013dc <MX_GPIO_Init+0x130>)
 8001378:	f002 ff20 	bl	80041bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800137c:	2320      	movs	r3, #32
 800137e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4619      	mov	r1, r3
 8001392:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001396:	f002 ff11 	bl	80041bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800139a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800139e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a0:	2312      	movs	r3, #18
 80013a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ac:	2304      	movs	r3, #4
 80013ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	480a      	ldr	r0, [pc, #40]	@ (80013e0 <MX_GPIO_Init+0x134>)
 80013b8:	f002 ff00 	bl	80041bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80013bc:	2200      	movs	r2, #0
 80013be:	2105      	movs	r1, #5
 80013c0:	2028      	movs	r0, #40	@ 0x28
 80013c2:	f002 fb95 	bl	8003af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013c6:	2028      	movs	r0, #40	@ 0x28
 80013c8:	f002 fbac 	bl	8003b24 <HAL_NVIC_EnableIRQ>

}
 80013cc:	bf00      	nop
 80013ce:	3728      	adds	r7, #40	@ 0x28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40021000 	.word	0x40021000
 80013d8:	48000800 	.word	0x48000800
 80013dc:	48001400 	.word	0x48001400
 80013e0:	48000400 	.word	0x48000400

080013e4 <timer_callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END Header_StartDefaultTask */

/* Start Out of Start DefaultTask */
void timer_callback(rcl_timer_t *timer, int64_t last_call_time) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <timer_callback+0x1a>
		/* Code here*/
		ReadADC_AVERAGE();
 80013f6:	f000 f923 	bl	8001640 <ReadADC_AVERAGE>
		SentCMDVEL();
 80013fa:	f000 f9b9 	bl	8001770 <SentCMDVEL>
	}
}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <StartDefaultTask>:

void StartDefaultTask(void *argument) {
 8001408:	b5b0      	push	{r4, r5, r7, lr}
 800140a:	b0b2      	sub	sp, #200	@ 0xc8
 800140c:	af02      	add	r7, sp, #8
 800140e:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
	/* USER CODE BEGIN 5 */

	// micro-ROS configuration
	rmw_uros_set_custom_transport(true, (void*) &hlpuart1, cubemx_transport_open, cubemx_transport_close, cubemx_transport_write, cubemx_transport_read);
 8001412:	4b44      	ldr	r3, [pc, #272]	@ (8001524 <StartDefaultTask+0x11c>)
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	4b44      	ldr	r3, [pc, #272]	@ (8001528 <StartDefaultTask+0x120>)
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	4b44      	ldr	r3, [pc, #272]	@ (800152c <StartDefaultTask+0x124>)
 800141c:	4a44      	ldr	r2, [pc, #272]	@ (8001530 <StartDefaultTask+0x128>)
 800141e:	4945      	ldr	r1, [pc, #276]	@ (8001534 <StartDefaultTask+0x12c>)
 8001420:	2001      	movs	r0, #1
 8001422:	f00b fd15 	bl	800ce50 <rmw_uros_set_custom_transport>

	rcl_allocator_t freeRTOS_allocator =
			rcutils_get_zero_initialized_allocator();
 8001426:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800142a:	4618      	mov	r0, r3
 800142c:	f00b fc2c 	bl	800cc88 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8001430:	4b41      	ldr	r3, [pc, #260]	@ (8001538 <StartDefaultTask+0x130>)
 8001432:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	freeRTOS_allocator.deallocate = microros_deallocate;
 8001436:	4b41      	ldr	r3, [pc, #260]	@ (800153c <StartDefaultTask+0x134>)
 8001438:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	freeRTOS_allocator.reallocate = microros_reallocate;
 800143c:	4b40      	ldr	r3, [pc, #256]	@ (8001540 <StartDefaultTask+0x138>)
 800143e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8001442:	4b40      	ldr	r3, [pc, #256]	@ (8001544 <StartDefaultTask+0x13c>)
 8001444:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001448:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800144c:	4618      	mov	r0, r3
 800144e:	f00b fc29 	bl	800cca4 <rcutils_set_default_allocator>
 8001452:	4603      	mov	r3, r0
 8001454:	f083 0301 	eor.w	r3, r3, #1
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <StartDefaultTask+0x5e>
		printf("Error on default allocators (line %d)\n", __LINE__);
 800145e:	2197      	movs	r1, #151	@ 0x97
 8001460:	4839      	ldr	r0, [pc, #228]	@ (8001548 <StartDefaultTask+0x140>)
 8001462:	f015 ff9d 	bl	80173a0 <iprintf>
	}

	// micro-ROS app
	allocator = rcl_get_default_allocator();
 8001466:	4c39      	ldr	r4, [pc, #228]	@ (800154c <StartDefaultTask+0x144>)
 8001468:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800146c:	4618      	mov	r0, r3
 800146e:	f00b fc37 	bl	800cce0 <rcutils_get_default_allocator>
 8001472:	4625      	mov	r5, r4
 8001474:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8001478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147c:	6823      	ldr	r3, [r4, #0]
 800147e:	602b      	str	r3, [r5, #0]

	//create init_options
	init_options = rcl_get_zero_initialized_init_options();
 8001480:	f00a faf6 	bl	800ba70 <rcl_get_zero_initialized_init_options>
 8001484:	4603      	mov	r3, r0
 8001486:	4a32      	ldr	r2, [pc, #200]	@ (8001550 <StartDefaultTask+0x148>)
 8001488:	6013      	str	r3, [r2, #0]
	RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 800148a:	4b30      	ldr	r3, [pc, #192]	@ (800154c <StartDefaultTask+0x144>)
 800148c:	466c      	mov	r4, sp
 800148e:	f103 020c 	add.w	r2, r3, #12
 8001492:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001496:	e884 0003 	stmia.w	r4, {r0, r1}
 800149a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800149c:	482c      	ldr	r0, [pc, #176]	@ (8001550 <StartDefaultTask+0x148>)
 800149e:	f00a fae9 	bl	800ba74 <rcl_init_options_init>
	RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 26)); //Set Domain ID
 80014a2:	211a      	movs	r1, #26
 80014a4:	482a      	ldr	r0, [pc, #168]	@ (8001550 <StartDefaultTask+0x148>)
 80014a6:	f00a fbe1 	bl	800bc6c <rcl_init_options_set_domain_id>

	rclc_support_init_with_options(
 80014aa:	4b28      	ldr	r3, [pc, #160]	@ (800154c <StartDefaultTask+0x144>)
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	4b28      	ldr	r3, [pc, #160]	@ (8001550 <StartDefaultTask+0x148>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	2100      	movs	r1, #0
 80014b4:	4827      	ldr	r0, [pc, #156]	@ (8001554 <StartDefaultTask+0x14c>)
 80014b6:	f00b fb0b 	bl	800cad0 <rclc_support_init_with_options>
			&init_options,
			&allocator
	);

	//Start up code for check enter
	CalibrateJoystickCenter();
 80014ba:	f000 f90d 	bl	80016d8 <CalibrateJoystickCenter>

	// create node
	rclc_node_init_default(
 80014be:	4b25      	ldr	r3, [pc, #148]	@ (8001554 <StartDefaultTask+0x14c>)
 80014c0:	4a25      	ldr	r2, [pc, #148]	@ (8001558 <StartDefaultTask+0x150>)
 80014c2:	4926      	ldr	r1, [pc, #152]	@ (800155c <StartDefaultTask+0x154>)
 80014c4:	4826      	ldr	r0, [pc, #152]	@ (8001560 <StartDefaultTask+0x158>)
 80014c6:	f00b fb37 	bl	800cb38 <rclc_node_init_default>
			"",
			&support
	); //Node name

	// create cmd_ve; publisher
	rclc_publisher_init_default(
 80014ca:	f008 ffb5 	bl	800a438 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 80014ce:	4602      	mov	r2, r0
 80014d0:	4b24      	ldr	r3, [pc, #144]	@ (8001564 <StartDefaultTask+0x15c>)
 80014d2:	4923      	ldr	r1, [pc, #140]	@ (8001560 <StartDefaultTask+0x158>)
 80014d4:	4824      	ldr	r0, [pc, #144]	@ (8001568 <StartDefaultTask+0x160>)
 80014d6:	f00b fb6b 	bl	800cbb0 <rclc_publisher_init_default>
			ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
			"/cmd_vel"
	);

	// create Timer
	rclc_timer_init_default(
 80014da:	4b24      	ldr	r3, [pc, #144]	@ (800156c <StartDefaultTask+0x164>)
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	4a24      	ldr	r2, [pc, #144]	@ (8001570 <StartDefaultTask+0x168>)
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	491b      	ldr	r1, [pc, #108]	@ (8001554 <StartDefaultTask+0x14c>)
 80014e6:	4823      	ldr	r0, [pc, #140]	@ (8001574 <StartDefaultTask+0x16c>)
 80014e8:	f00b fb96 	bl	800cc18 <rclc_timer_init_default>
			RCL_MS_TO_NS(10),
			timer_callback
	);

	// create executer
	executor = rclc_executor_get_zero_initialized_executor();
 80014ec:	4c22      	ldr	r4, [pc, #136]	@ (8001578 <StartDefaultTask+0x170>)
 80014ee:	463b      	mov	r3, r7
 80014f0:	4618      	mov	r0, r3
 80014f2:	f00b f81b 	bl	800c52c <rclc_executor_get_zero_initialized_executor>
 80014f6:	4620      	mov	r0, r4
 80014f8:	463b      	mov	r3, r7
 80014fa:	2288      	movs	r2, #136	@ 0x88
 80014fc:	4619      	mov	r1, r3
 80014fe:	f016 f904 	bl	801770a <memcpy>
	rclc_executor_init(&executor, &support.context, 1, &allocator);
 8001502:	4b12      	ldr	r3, [pc, #72]	@ (800154c <StartDefaultTask+0x144>)
 8001504:	2201      	movs	r2, #1
 8001506:	4913      	ldr	r1, [pc, #76]	@ (8001554 <StartDefaultTask+0x14c>)
 8001508:	481b      	ldr	r0, [pc, #108]	@ (8001578 <StartDefaultTask+0x170>)
 800150a:	f00b f819 	bl	800c540 <rclc_executor_init>
	rclc_executor_add_timer(&executor, &timer);
 800150e:	4919      	ldr	r1, [pc, #100]	@ (8001574 <StartDefaultTask+0x16c>)
 8001510:	4819      	ldr	r0, [pc, #100]	@ (8001578 <StartDefaultTask+0x170>)
 8001512:	f00b f885 	bl	800c620 <rclc_executor_add_timer>
	rclc_executor_spin(&executor); //ต้องเรียกก่อนถึงจะเริ่มทำงาน
 8001516:	4818      	ldr	r0, [pc, #96]	@ (8001578 <StartDefaultTask+0x170>)
 8001518:	f00b fa98 	bl	800ca4c <rclc_executor_spin>

	for (;;) {
		osDelay(10);
 800151c:	200a      	movs	r0, #10
 800151e:	f006 fabd 	bl	8007a9c <osDelay>
 8001522:	e7fb      	b.n	800151c <StartDefaultTask+0x114>
 8001524:	08001205 	.word	0x08001205
 8001528:	080011a1 	.word	0x080011a1
 800152c:	08001181 	.word	0x08001181
 8001530:	08001155 	.word	0x08001155
 8001534:	20004990 	.word	0x20004990
 8001538:	08001865 	.word	0x08001865
 800153c:	080018a9 	.word	0x080018a9
 8001540:	080018e1 	.word	0x080018e1
 8001544:	0800194d 	.word	0x0800194d
 8001548:	080184dc 	.word	0x080184dc
 800154c:	200046b8 	.word	0x200046b8
 8001550:	20004680 	.word	0x20004680
 8001554:	20004684 	.word	0x20004684
 8001558:	08018504 	.word	0x08018504
 800155c:	08018508 	.word	0x08018508
 8001560:	200046cc 	.word	0x200046cc
 8001564:	08018514 	.word	0x08018514
 8001568:	20004760 	.word	0x20004760
 800156c:	080013e5 	.word	0x080013e5
 8001570:	00989680 	.word	0x00989680
 8001574:	20004798 	.word	0x20004798
 8001578:	200046d8 	.word	0x200046d8

0800157c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001580:	f000 fdd5 	bl	800212e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001584:	f000 f810 	bl	80015a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001588:	f7ff fe90 	bl	80012ac <MX_GPIO_Init>
  MX_DMA_Init();
 800158c:	f7ff fda8 	bl	80010e0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001590:	f000 fc9c 	bl	8001ecc <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001594:	f7ff fa30 	bl	80009f8 <MX_ADC1_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001598:	f006 f9a4 	bl	80078e4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800159c:	f7ff fb3e 	bl	8000c1c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80015a0:	f006 f9c4 	bl	800792c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <main+0x28>

080015a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b094      	sub	sp, #80	@ 0x50
 80015ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ae:	f107 0318 	add.w	r3, r7, #24
 80015b2:	2238      	movs	r2, #56	@ 0x38
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f015 ffde 	bl	8017578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80015ca:	2000      	movs	r0, #0
 80015cc:	f002 ffb4 	bl	8004538 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015d0:	2302      	movs	r3, #2
 80015d2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015da:	2340      	movs	r3, #64	@ 0x40
 80015dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015de:	2302      	movs	r3, #2
 80015e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015e2:	2302      	movs	r3, #2
 80015e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80015e6:	2304      	movs	r3, #4
 80015e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80015ea:	2355      	movs	r3, #85	@ 0x55
 80015ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015ee:	2302      	movs	r3, #2
 80015f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015f2:	2302      	movs	r3, #2
 80015f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015f6:	2302      	movs	r3, #2
 80015f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fa:	f107 0318 	add.w	r3, r7, #24
 80015fe:	4618      	mov	r0, r3
 8001600:	f003 f84e 	bl	80046a0 <HAL_RCC_OscConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800160a:	f000 f925 	bl	8001858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800160e:	230f      	movs	r3, #15
 8001610:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001612:	2303      	movs	r3, #3
 8001614:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2104      	movs	r1, #4
 8001626:	4618      	mov	r0, r3
 8001628:	f003 fb4c 	bl	8004cc4 <HAL_RCC_ClockConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001632:	f000 f911 	bl	8001858 <Error_Handler>
  }
}
 8001636:	bf00      	nop
 8001638:	3750      	adds	r7, #80	@ 0x50
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <ReadADC_AVERAGE>:

/* USER CODE BEGIN 4 */

void ReadADC_AVERAGE() {
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
	uint32_t temp_1 = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
	uint32_t temp_2 = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 200; i++) {
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	e020      	b.n	8001696 <ReadADC_AVERAGE+0x56>
		if (i % 2 == 0) {
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d108      	bne.n	8001670 <ReadADC_AVERAGE+0x30>
			temp_1 += ADC_RawRead[i];
 800165e:	4a1a      	ldr	r2, [pc, #104]	@ (80016c8 <ReadADC_AVERAGE+0x88>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001666:	461a      	mov	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	e00f      	b.n	8001690 <ReadADC_AVERAGE+0x50>
		} else if (i % 2 == 1) {
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	bfb8      	it	lt
 800167a:	425b      	neglt	r3, r3
 800167c:	2b01      	cmp	r3, #1
 800167e:	d107      	bne.n	8001690 <ReadADC_AVERAGE+0x50>
			temp_2 += ADC_RawRead[i];
 8001680:	4a11      	ldr	r2, [pc, #68]	@ (80016c8 <ReadADC_AVERAGE+0x88>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001688:	461a      	mov	r2, r3
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	4413      	add	r3, r2
 800168e:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 200; i++) {
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3301      	adds	r3, #1
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2bc7      	cmp	r3, #199	@ 0xc7
 800169a:	dddb      	ble.n	8001654 <ReadADC_AVERAGE+0x14>
		}
	}
	x_axis = (temp_1 / 100);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4a0b      	ldr	r2, [pc, #44]	@ (80016cc <ReadADC_AVERAGE+0x8c>)
 80016a0:	fba2 2303 	umull	r2, r3, r2, r3
 80016a4:	095b      	lsrs	r3, r3, #5
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <ReadADC_AVERAGE+0x90>)
 80016aa:	801a      	strh	r2, [r3, #0]
	y_axis = (temp_2 / 100);
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4a07      	ldr	r2, [pc, #28]	@ (80016cc <ReadADC_AVERAGE+0x8c>)
 80016b0:	fba2 2303 	umull	r2, r3, r2, r3
 80016b4:	095b      	lsrs	r3, r3, #5
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <ReadADC_AVERAGE+0x94>)
 80016ba:	801a      	strh	r2, [r3, #0]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	2000479c 	.word	0x2000479c
 80016cc:	51eb851f 	.word	0x51eb851f
 80016d0:	2000492c 	.word	0x2000492c
 80016d4:	2000492e 	.word	0x2000492e

080016d8 <CalibrateJoystickCenter>:

void CalibrateJoystickCenter() {
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
	uint32_t temp_1 = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
	uint32_t temp_2 = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 200; i++) {
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	e020      	b.n	800172e <CalibrateJoystickCenter+0x56>
		if (i % 2 == 0) {
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d108      	bne.n	8001708 <CalibrateJoystickCenter+0x30>
			temp_1 += ADC_RawRead[i];
 80016f6:	4a1a      	ldr	r2, [pc, #104]	@ (8001760 <CalibrateJoystickCenter+0x88>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016fe:	461a      	mov	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4413      	add	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	e00f      	b.n	8001728 <CalibrateJoystickCenter+0x50>
		} else if (i % 2 == 1) {
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	bfb8      	it	lt
 8001712:	425b      	neglt	r3, r3
 8001714:	2b01      	cmp	r3, #1
 8001716:	d107      	bne.n	8001728 <CalibrateJoystickCenter+0x50>
			temp_2 += ADC_RawRead[i];
 8001718:	4a11      	ldr	r2, [pc, #68]	@ (8001760 <CalibrateJoystickCenter+0x88>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001720:	461a      	mov	r2, r3
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	4413      	add	r3, r2
 8001726:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 200; i++) {
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3301      	adds	r3, #1
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2bc7      	cmp	r3, #199	@ 0xc7
 8001732:	dddb      	ble.n	80016ec <CalibrateJoystickCenter+0x14>
		}
	}
	center_x = (temp_1 / 100);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4a0b      	ldr	r2, [pc, #44]	@ (8001764 <CalibrateJoystickCenter+0x8c>)
 8001738:	fba2 2303 	umull	r2, r3, r2, r3
 800173c:	095b      	lsrs	r3, r3, #5
 800173e:	b29a      	uxth	r2, r3
 8001740:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <CalibrateJoystickCenter+0x90>)
 8001742:	801a      	strh	r2, [r3, #0]
	center_y = (temp_2 / 100);
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	4a07      	ldr	r2, [pc, #28]	@ (8001764 <CalibrateJoystickCenter+0x8c>)
 8001748:	fba2 2303 	umull	r2, r3, r2, r3
 800174c:	095b      	lsrs	r3, r3, #5
 800174e:	b29a      	uxth	r2, r3
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <CalibrateJoystickCenter+0x94>)
 8001752:	801a      	strh	r2, [r3, #0]
}
 8001754:	bf00      	nop
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	2000479c 	.word	0x2000479c
 8001764:	51eb851f 	.word	0x51eb851f
 8001768:	20004930 	.word	0x20004930
 800176c:	20004932 	.word	0x20004932

08001770 <SentCMDVEL>:

void SentCMDVEL(){
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
	float linear_velocity = (y_axis - 2048) / 2048.0f;  // Normalize -1.0 to 1.0
 8001776:	4b28      	ldr	r3, [pc, #160]	@ (8001818 <SentCMDVEL+0xa8>)
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800177e:	ee07 3a90 	vmov	s15, r3
 8001782:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001786:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800181c <SentCMDVEL+0xac>
 800178a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800178e:	edc7 7a01 	vstr	s15, [r7, #4]
	float angular_velocity = (x_axis - 2048) / 2048.0f; // Normalize -1.0 to 1.0
 8001792:	4b23      	ldr	r3, [pc, #140]	@ (8001820 <SentCMDVEL+0xb0>)
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800179a:	ee07 3a90 	vmov	s15, r3
 800179e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017a2:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800181c <SentCMDVEL+0xac>
 80017a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017aa:	edc7 7a00 	vstr	s15, [r7]

	if (fabs(linear_velocity) < 0.025f) {
 80017ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b2:	eef0 7ae7 	vabs.f32	s15, s15
 80017b6:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001824 <SentCMDVEL+0xb4>
 80017ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c2:	d502      	bpl.n	80017ca <SentCMDVEL+0x5a>
		linear_velocity = 0.0f;
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
	}

	if (fabs(angular_velocity) < 0.015f) {
 80017ca:	edd7 7a00 	vldr	s15, [r7]
 80017ce:	eef0 7ae7 	vabs.f32	s15, s15
 80017d2:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001828 <SentCMDVEL+0xb8>
 80017d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017de:	d502      	bpl.n	80017e6 <SentCMDVEL+0x76>
		angular_velocity = 0.0f;
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	603b      	str	r3, [r7, #0]
	}

	twist_msg.linear.x = linear_velocity;  // Adjust MAX_LINEAR_SPEED as needed
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7fe fee6 	bl	80005b8 <__aeabi_f2d>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	490e      	ldr	r1, [pc, #56]	@ (800182c <SentCMDVEL+0xbc>)
 80017f2:	e9c1 2300 	strd	r2, r3, [r1]
	twist_msg.angular.z = angular_velocity;  // Adjust MAX_ANGULAR_SPEED as needed
 80017f6:	6838      	ldr	r0, [r7, #0]
 80017f8:	f7fe fede 	bl	80005b8 <__aeabi_f2d>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	490a      	ldr	r1, [pc, #40]	@ (800182c <SentCMDVEL+0xbc>)
 8001802:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	RCSOFTCHECK(rcl_publish(&cmdvel_publisher, &twist_msg, NULL));
 8001806:	2200      	movs	r2, #0
 8001808:	4908      	ldr	r1, [pc, #32]	@ (800182c <SentCMDVEL+0xbc>)
 800180a:	4809      	ldr	r0, [pc, #36]	@ (8001830 <SentCMDVEL+0xc0>)
 800180c:	f00a fb00 	bl	800be10 <rcl_publish>

}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	2000492e 	.word	0x2000492e
 800181c:	45000000 	.word	0x45000000
 8001820:	2000492c 	.word	0x2000492c
 8001824:	3ccccccd 	.word	0x3ccccccd
 8001828:	3c75c28f 	.word	0x3c75c28f
 800182c:	20004768 	.word	0x20004768
 8001830:	20004760 	.word	0x20004760

08001834 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a04      	ldr	r2, [pc, #16]	@ (8001854 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d101      	bne.n	800184a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001846:	f000 fc8b 	bl	8002160 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40012c00 	.word	0x40012c00

08001858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800185c:	b672      	cpsid	i
}
 800185e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <Error_Handler+0x8>

08001864 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800186e:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <microros_allocate+0x3c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4413      	add	r3, r2
 8001878:	461a      	mov	r2, r3
 800187a:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <microros_allocate+0x3c>)
 800187c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800187e:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <microros_allocate+0x40>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4413      	add	r3, r2
 8001888:	461a      	mov	r2, r3
 800188a:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <microros_allocate+0x40>)
 800188c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff f9d6 	bl	8000c40 <pvPortMallocMicroROS>
 8001894:	4603      	mov	r3, r0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20004934 	.word	0x20004934
 80018a4:	20004938 	.word	0x20004938

080018a8 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00c      	beq.n	80018d2 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff fae5 	bl	8000e88 <getBlockSize>
 80018be:	4603      	mov	r3, r0
 80018c0:	4a06      	ldr	r2, [pc, #24]	@ (80018dc <microros_deallocate+0x34>)
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	461a      	mov	r2, r3
 80018c8:	4b04      	ldr	r3, [pc, #16]	@ (80018dc <microros_deallocate+0x34>)
 80018ca:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff fa7f 	bl	8000dd0 <vPortFreeMicroROS>
  }
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20004938 	.word	0x20004938

080018e0 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80018ec:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <microros_reallocate+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	4413      	add	r3, r2
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <microros_reallocate+0x64>)
 80018fa:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80018fc:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <microros_reallocate+0x68>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	4413      	add	r3, r2
 8001906:	461a      	mov	r2, r3
 8001908:	4b0f      	ldr	r3, [pc, #60]	@ (8001948 <microros_reallocate+0x68>)
 800190a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d104      	bne.n	800191c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001912:	68b8      	ldr	r0, [r7, #8]
 8001914:	f7ff f994 	bl	8000c40 <pvPortMallocMicroROS>
 8001918:	4603      	mov	r3, r0
 800191a:	e00e      	b.n	800193a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f7ff fab3 	bl	8000e88 <getBlockSize>
 8001922:	4603      	mov	r3, r0
 8001924:	4a08      	ldr	r2, [pc, #32]	@ (8001948 <microros_reallocate+0x68>)
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	461a      	mov	r2, r3
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <microros_reallocate+0x68>)
 800192e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f7ff fac6 	bl	8000ec4 <pvPortReallocMicroROS>
 8001938:	4603      	mov	r3, r0
  }
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20004934 	.word	0x20004934
 8001948:	20004938 	.word	0x20004938

0800194c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	fb02 f303 	mul.w	r3, r2, r3
 8001960:	4a0c      	ldr	r2, [pc, #48]	@ (8001994 <microros_zero_allocate+0x48>)
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	4413      	add	r3, r2
 8001966:	461a      	mov	r2, r3
 8001968:	4b0a      	ldr	r3, [pc, #40]	@ (8001994 <microros_zero_allocate+0x48>)
 800196a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	fb02 f303 	mul.w	r3, r2, r3
 8001974:	4a08      	ldr	r2, [pc, #32]	@ (8001998 <microros_zero_allocate+0x4c>)
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	4413      	add	r3, r2
 800197a:	461a      	mov	r2, r3
 800197c:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <microros_zero_allocate+0x4c>)
 800197e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f7ff facb 	bl	8000f1e <pvPortCallocMicroROS>
 8001988:	4603      	mov	r3, r0
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20004934 	.word	0x20004934
 8001998:	20004938 	.word	0x20004938
 800199c:	00000000 	.word	0x00000000

080019a0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80019a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80019b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019b6:	a320      	add	r3, pc, #128	@ (adr r3, 8001a38 <UTILS_NanosecondsToTimespec+0x98>)
 80019b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019bc:	f7fe fe54 	bl	8000668 <__aeabi_ldivmod>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80019ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019ce:	a31a      	add	r3, pc, #104	@ (adr r3, 8001a38 <UTILS_NanosecondsToTimespec+0x98>)
 80019d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d4:	f7fe fe48 	bl	8000668 <__aeabi_ldivmod>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	da20      	bge.n	8001a26 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	4a11      	ldr	r2, [pc, #68]	@ (8001a30 <UTILS_NanosecondsToTimespec+0x90>)
 80019ea:	fb82 1203 	smull	r1, r2, r2, r3
 80019ee:	1712      	asrs	r2, r2, #28
 80019f0:	17db      	asrs	r3, r3, #31
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	3301      	adds	r3, #1
 80019f6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	6979      	ldr	r1, [r7, #20]
 8001a00:	17c8      	asrs	r0, r1, #31
 8001a02:	460c      	mov	r4, r1
 8001a04:	4605      	mov	r5, r0
 8001a06:	ebb2 0804 	subs.w	r8, r2, r4
 8001a0a:	eb63 0905 	sbc.w	r9, r3, r5
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	4906      	ldr	r1, [pc, #24]	@ (8001a34 <UTILS_NanosecondsToTimespec+0x94>)
 8001a1c:	fb01 f303 	mul.w	r3, r1, r3
 8001a20:	441a      	add	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	609a      	str	r2, [r3, #8]
    }
}
 8001a26:	bf00      	nop
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a30:	44b82fa1 	.word	0x44b82fa1
 8001a34:	3b9aca00 	.word	0x3b9aca00
 8001a38:	3b9aca00 	.word	0x3b9aca00
 8001a3c:	00000000 	.word	0x00000000

08001a40 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a44:	b08e      	sub	sp, #56	@ 0x38
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6278      	str	r0, [r7, #36]	@ 0x24
 8001a4a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001a4c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001a50:	2300      	movs	r3, #0
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001a62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a66:	4618      	mov	r0, r3
 8001a68:	f007 fae4 	bl	8009034 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a6e:	17da      	asrs	r2, r3, #31
 8001a70:	61bb      	str	r3, [r7, #24]
 8001a72:	61fa      	str	r2, [r7, #28]
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	69b9      	ldr	r1, [r7, #24]
 8001a7e:	000b      	movs	r3, r1
 8001a80:	2200      	movs	r2, #0
 8001a82:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a88:	2200      	movs	r2, #0
 8001a8a:	461c      	mov	r4, r3
 8001a8c:	4615      	mov	r5, r2
 8001a8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a92:	1911      	adds	r1, r2, r4
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	416b      	adcs	r3, r5
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001a9e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001aa2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	f04f 0400 	mov.w	r4, #0
 8001aae:	f04f 0500 	mov.w	r5, #0
 8001ab2:	015d      	lsls	r5, r3, #5
 8001ab4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001ab8:	0154      	lsls	r4, r2, #5
 8001aba:	4622      	mov	r2, r4
 8001abc:	462b      	mov	r3, r5
 8001abe:	ebb2 0800 	subs.w	r8, r2, r0
 8001ac2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001ad2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001ad6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001ada:	4690      	mov	r8, r2
 8001adc:	4699      	mov	r9, r3
 8001ade:	eb18 0a00 	adds.w	sl, r8, r0
 8001ae2:	eb49 0b01 	adc.w	fp, r9, r1
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001af2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001af6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001afa:	ebb2 040a 	subs.w	r4, r2, sl
 8001afe:	603c      	str	r4, [r7, #0]
 8001b00:	eb63 030b 	sbc.w	r3, r3, fp
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b0a:	4623      	mov	r3, r4
 8001b0c:	181b      	adds	r3, r3, r0
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	462b      	mov	r3, r5
 8001b12:	eb41 0303 	adc.w	r3, r1, r3
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	6a3a      	ldr	r2, [r7, #32]
 8001b1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b1e:	f7ff ff3f 	bl	80019a0 <UTILS_NanosecondsToTimespec>

    return 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	3738      	adds	r7, #56	@ 0x38
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b36:	4b12      	ldr	r3, [pc, #72]	@ (8001b80 <HAL_MspInit+0x50>)
 8001b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b3a:	4a11      	ldr	r2, [pc, #68]	@ (8001b80 <HAL_MspInit+0x50>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b42:	4b0f      	ldr	r3, [pc, #60]	@ (8001b80 <HAL_MspInit+0x50>)
 8001b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <HAL_MspInit+0x50>)
 8001b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b52:	4a0b      	ldr	r2, [pc, #44]	@ (8001b80 <HAL_MspInit+0x50>)
 8001b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b58:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b5a:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <HAL_MspInit+0x50>)
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	210f      	movs	r1, #15
 8001b6a:	f06f 0001 	mvn.w	r0, #1
 8001b6e:	f001 ffbf 	bl	8003af0 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001b72:	f002 fd85 	bl	8004680 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000

08001b84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08c      	sub	sp, #48	@ 0x30
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b94:	4b2c      	ldr	r3, [pc, #176]	@ (8001c48 <HAL_InitTick+0xc4>)
 8001b96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b98:	4a2b      	ldr	r2, [pc, #172]	@ (8001c48 <HAL_InitTick+0xc4>)
 8001b9a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b9e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ba0:	4b29      	ldr	r3, [pc, #164]	@ (8001c48 <HAL_InitTick+0xc4>)
 8001ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bac:	f107 020c 	add.w	r2, r7, #12
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f003 fa5a 	bl	8005070 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001bbc:	f003 fa42 	bl	8005044 <HAL_RCC_GetPCLK2Freq>
 8001bc0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bc4:	4a21      	ldr	r2, [pc, #132]	@ (8001c4c <HAL_InitTick+0xc8>)
 8001bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bca:	0c9b      	lsrs	r3, r3, #18
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c50 <HAL_InitTick+0xcc>)
 8001bd2:	4a20      	ldr	r2, [pc, #128]	@ (8001c54 <HAL_InitTick+0xd0>)
 8001bd4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c50 <HAL_InitTick+0xcc>)
 8001bd8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001bdc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001bde:	4a1c      	ldr	r2, [pc, #112]	@ (8001c50 <HAL_InitTick+0xcc>)
 8001be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001be4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c50 <HAL_InitTick+0xcc>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bea:	4b19      	ldr	r3, [pc, #100]	@ (8001c50 <HAL_InitTick+0xcc>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001bf0:	4817      	ldr	r0, [pc, #92]	@ (8001c50 <HAL_InitTick+0xcc>)
 8001bf2:	f003 fd03 	bl	80055fc <HAL_TIM_Base_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001bfc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d11b      	bne.n	8001c3c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001c04:	4812      	ldr	r0, [pc, #72]	@ (8001c50 <HAL_InitTick+0xcc>)
 8001c06:	f003 fd5b 	bl	80056c0 <HAL_TIM_Base_Start_IT>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001c10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d111      	bne.n	8001c3c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c18:	2019      	movs	r0, #25
 8001c1a:	f001 ff83 	bl	8003b24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b0f      	cmp	r3, #15
 8001c22:	d808      	bhi.n	8001c36 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001c24:	2200      	movs	r2, #0
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	2019      	movs	r0, #25
 8001c2a:	f001 ff61 	bl	8003af0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <HAL_InitTick+0xd4>)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	e002      	b.n	8001c3c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001c3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3730      	adds	r7, #48	@ 0x30
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	431bde83 	.word	0x431bde83
 8001c50:	2000493c 	.word	0x2000493c
 8001c54:	40012c00 	.word	0x40012c00
 8001c58:	20000008 	.word	0x20000008

08001c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <NMI_Handler+0x4>

08001c64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <HardFault_Handler+0x4>

08001c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <MemManage_Handler+0x4>

08001c74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <BusFault_Handler+0x4>

08001c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c80:	bf00      	nop
 8001c82:	e7fd      	b.n	8001c80 <UsageFault_Handler+0x4>

08001c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001c98:	4802      	ldr	r0, [pc, #8]	@ (8001ca4 <DMA1_Channel1_IRQHandler+0x10>)
 8001c9a:	f002 f934 	bl	8003f06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20004a24 	.word	0x20004a24

08001ca8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001cac:	4802      	ldr	r0, [pc, #8]	@ (8001cb8 <DMA1_Channel2_IRQHandler+0x10>)
 8001cae:	f002 f92a 	bl	8003f06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20004a84 	.word	0x20004a84

08001cbc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cc0:	4802      	ldr	r0, [pc, #8]	@ (8001ccc <DMA1_Channel3_IRQHandler+0x10>)
 8001cc2:	f002 f920 	bl	8003f06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	200002c0 	.word	0x200002c0

08001cd0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001cd4:	4802      	ldr	r0, [pc, #8]	@ (8001ce0 <ADC1_2_IRQHandler+0x10>)
 8001cd6:	f000 fe35 	bl	8002944 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000254 	.word	0x20000254

08001ce4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ce8:	4802      	ldr	r0, [pc, #8]	@ (8001cf4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001cea:	f003 fd61 	bl	80057b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	2000493c 	.word	0x2000493c

08001cf8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001cfc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001d00:	f002 fbf6 	bl	80044f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001d0c:	4802      	ldr	r0, [pc, #8]	@ (8001d18 <LPUART1_IRQHandler+0x10>)
 8001d0e:	f004 f973 	bl	8005ff8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20004990 	.word	0x20004990

08001d1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return 1;
 8001d20:	2301      	movs	r3, #1
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <_kill>:

int _kill(int pid, int sig)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d36:	f015 fcb3 	bl	80176a0 <__errno>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2216      	movs	r2, #22
 8001d3e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <_exit>:

void _exit (int status)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ffe7 	bl	8001d2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d5e:	bf00      	nop
 8001d60:	e7fd      	b.n	8001d5e <_exit+0x12>

08001d62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	e00a      	b.n	8001d8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d74:	f3af 8000 	nop.w
 8001d78:	4601      	mov	r1, r0
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	60ba      	str	r2, [r7, #8]
 8001d80:	b2ca      	uxtb	r2, r1
 8001d82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	3301      	adds	r3, #1
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	dbf0      	blt.n	8001d74 <_read+0x12>
  }

  return len;
 8001d92:	687b      	ldr	r3, [r7, #4]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	e009      	b.n	8001dc2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	60ba      	str	r2, [r7, #8]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	dbf1      	blt.n	8001dae <_write+0x12>
  }
  return len;
 8001dca:	687b      	ldr	r3, [r7, #4]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_close>:

int _close(int file)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dfc:	605a      	str	r2, [r3, #4]
  return 0;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <_isatty>:

int _isatty(int file)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e14:	2301      	movs	r3, #1
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b085      	sub	sp, #20
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e44:	4a14      	ldr	r2, [pc, #80]	@ (8001e98 <_sbrk+0x5c>)
 8001e46:	4b15      	ldr	r3, [pc, #84]	@ (8001e9c <_sbrk+0x60>)
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e50:	4b13      	ldr	r3, [pc, #76]	@ (8001ea0 <_sbrk+0x64>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d102      	bne.n	8001e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e58:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <_sbrk+0x64>)
 8001e5a:	4a12      	ldr	r2, [pc, #72]	@ (8001ea4 <_sbrk+0x68>)
 8001e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ea0 <_sbrk+0x64>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d207      	bcs.n	8001e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e6c:	f015 fc18 	bl	80176a0 <__errno>
 8001e70:	4603      	mov	r3, r0
 8001e72:	220c      	movs	r2, #12
 8001e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e7a:	e009      	b.n	8001e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ea0 <_sbrk+0x64>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e82:	4b07      	ldr	r3, [pc, #28]	@ (8001ea0 <_sbrk+0x64>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	4a05      	ldr	r2, [pc, #20]	@ (8001ea0 <_sbrk+0x64>)
 8001e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20020000 	.word	0x20020000
 8001e9c:	00000400 	.word	0x00000400
 8001ea0:	2000498c 	.word	0x2000498c
 8001ea4:	2000b090 	.word	0x2000b090

08001ea8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001eac:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <SystemInit+0x20>)
 8001eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eb2:	4a05      	ldr	r2, [pc, #20]	@ (8001ec8 <SystemInit+0x20>)
 8001eb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001eb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001ed0:	4b21      	ldr	r3, [pc, #132]	@ (8001f58 <MX_LPUART1_UART_Init+0x8c>)
 8001ed2:	4a22      	ldr	r2, [pc, #136]	@ (8001f5c <MX_LPUART1_UART_Init+0x90>)
 8001ed4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001ed6:	4b20      	ldr	r3, [pc, #128]	@ (8001f58 <MX_LPUART1_UART_Init+0x8c>)
 8001ed8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001edc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ede:	4b1e      	ldr	r3, [pc, #120]	@ (8001f58 <MX_LPUART1_UART_Init+0x8c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f58 <MX_LPUART1_UART_Init+0x8c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001eea:	4b1b      	ldr	r3, [pc, #108]	@ (8001f58 <MX_LPUART1_UART_Init+0x8c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001ef0:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <MX_LPUART1_UART_Init+0x8c>)
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef6:	4b18      	ldr	r3, [pc, #96]	@ (8001f58 <MX_LPUART1_UART_Init+0x8c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001efc:	4b16      	ldr	r3, [pc, #88]	@ (8001f58 <MX_LPUART1_UART_Init+0x8c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f02:	4b15      	ldr	r3, [pc, #84]	@ (8001f58 <MX_LPUART1_UART_Init+0x8c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f08:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <MX_LPUART1_UART_Init+0x8c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001f0e:	4812      	ldr	r0, [pc, #72]	@ (8001f58 <MX_LPUART1_UART_Init+0x8c>)
 8001f10:	f003 fec0 	bl	8005c94 <HAL_UART_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f1a:	f7ff fc9d 	bl	8001858 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f1e:	2100      	movs	r1, #0
 8001f20:	480d      	ldr	r0, [pc, #52]	@ (8001f58 <MX_LPUART1_UART_Init+0x8c>)
 8001f22:	f005 fbd0 	bl	80076c6 <HAL_UARTEx_SetTxFifoThreshold>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001f2c:	f7ff fc94 	bl	8001858 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f30:	2100      	movs	r1, #0
 8001f32:	4809      	ldr	r0, [pc, #36]	@ (8001f58 <MX_LPUART1_UART_Init+0x8c>)
 8001f34:	f005 fc05 	bl	8007742 <HAL_UARTEx_SetRxFifoThreshold>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001f3e:	f7ff fc8b 	bl	8001858 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001f42:	4805      	ldr	r0, [pc, #20]	@ (8001f58 <MX_LPUART1_UART_Init+0x8c>)
 8001f44:	f005 fb86 	bl	8007654 <HAL_UARTEx_DisableFifoMode>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001f4e:	f7ff fc83 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20004990 	.word	0x20004990
 8001f5c:	40008000 	.word	0x40008000

08001f60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b09e      	sub	sp, #120	@ 0x78
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	2254      	movs	r2, #84	@ 0x54
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4618      	mov	r0, r3
 8001f82:	f015 faf9 	bl	8017578 <memset>
  if(uartHandle->Instance==LPUART1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a4e      	ldr	r2, [pc, #312]	@ (80020c4 <HAL_UART_MspInit+0x164>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	f040 8094 	bne.w	80020ba <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001f92:	2320      	movs	r3, #32
 8001f94:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001f96:	2300      	movs	r3, #0
 8001f98:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f9a:	f107 0310 	add.w	r3, r7, #16
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f003 f8de 	bl	8005160 <HAL_RCCEx_PeriphCLKConfig>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001faa:	f7ff fc55 	bl	8001858 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001fae:	4b46      	ldr	r3, [pc, #280]	@ (80020c8 <HAL_UART_MspInit+0x168>)
 8001fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb2:	4a45      	ldr	r2, [pc, #276]	@ (80020c8 <HAL_UART_MspInit+0x168>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001fba:	4b43      	ldr	r3, [pc, #268]	@ (80020c8 <HAL_UART_MspInit+0x168>)
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc6:	4b40      	ldr	r3, [pc, #256]	@ (80020c8 <HAL_UART_MspInit+0x168>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fca:	4a3f      	ldr	r2, [pc, #252]	@ (80020c8 <HAL_UART_MspInit+0x168>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fd2:	4b3d      	ldr	r3, [pc, #244]	@ (80020c8 <HAL_UART_MspInit+0x168>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001fde:	230c      	movs	r3, #12
 8001fe0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	2300      	movs	r3, #0
 8001fec:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001fee:	230c      	movs	r3, #12
 8001ff0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ffc:	f002 f8de 	bl	80041bc <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8002000:	4b32      	ldr	r3, [pc, #200]	@ (80020cc <HAL_UART_MspInit+0x16c>)
 8002002:	4a33      	ldr	r2, [pc, #204]	@ (80020d0 <HAL_UART_MspInit+0x170>)
 8002004:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002006:	4b31      	ldr	r3, [pc, #196]	@ (80020cc <HAL_UART_MspInit+0x16c>)
 8002008:	2222      	movs	r2, #34	@ 0x22
 800200a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800200c:	4b2f      	ldr	r3, [pc, #188]	@ (80020cc <HAL_UART_MspInit+0x16c>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002012:	4b2e      	ldr	r3, [pc, #184]	@ (80020cc <HAL_UART_MspInit+0x16c>)
 8002014:	2200      	movs	r2, #0
 8002016:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002018:	4b2c      	ldr	r3, [pc, #176]	@ (80020cc <HAL_UART_MspInit+0x16c>)
 800201a:	2280      	movs	r2, #128	@ 0x80
 800201c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800201e:	4b2b      	ldr	r3, [pc, #172]	@ (80020cc <HAL_UART_MspInit+0x16c>)
 8002020:	2200      	movs	r2, #0
 8002022:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002024:	4b29      	ldr	r3, [pc, #164]	@ (80020cc <HAL_UART_MspInit+0x16c>)
 8002026:	2200      	movs	r2, #0
 8002028:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800202a:	4b28      	ldr	r3, [pc, #160]	@ (80020cc <HAL_UART_MspInit+0x16c>)
 800202c:	2220      	movs	r2, #32
 800202e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002030:	4b26      	ldr	r3, [pc, #152]	@ (80020cc <HAL_UART_MspInit+0x16c>)
 8002032:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002036:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002038:	4824      	ldr	r0, [pc, #144]	@ (80020cc <HAL_UART_MspInit+0x16c>)
 800203a:	f001 fd81 	bl	8003b40 <HAL_DMA_Init>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8002044:	f7ff fc08 	bl	8001858 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a20      	ldr	r2, [pc, #128]	@ (80020cc <HAL_UART_MspInit+0x16c>)
 800204c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002050:	4a1e      	ldr	r2, [pc, #120]	@ (80020cc <HAL_UART_MspInit+0x16c>)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8002056:	4b1f      	ldr	r3, [pc, #124]	@ (80020d4 <HAL_UART_MspInit+0x174>)
 8002058:	4a1f      	ldr	r2, [pc, #124]	@ (80020d8 <HAL_UART_MspInit+0x178>)
 800205a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800205c:	4b1d      	ldr	r3, [pc, #116]	@ (80020d4 <HAL_UART_MspInit+0x174>)
 800205e:	2223      	movs	r2, #35	@ 0x23
 8002060:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002062:	4b1c      	ldr	r3, [pc, #112]	@ (80020d4 <HAL_UART_MspInit+0x174>)
 8002064:	2210      	movs	r2, #16
 8002066:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002068:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <HAL_UART_MspInit+0x174>)
 800206a:	2200      	movs	r2, #0
 800206c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800206e:	4b19      	ldr	r3, [pc, #100]	@ (80020d4 <HAL_UART_MspInit+0x174>)
 8002070:	2280      	movs	r2, #128	@ 0x80
 8002072:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002074:	4b17      	ldr	r3, [pc, #92]	@ (80020d4 <HAL_UART_MspInit+0x174>)
 8002076:	2200      	movs	r2, #0
 8002078:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800207a:	4b16      	ldr	r3, [pc, #88]	@ (80020d4 <HAL_UART_MspInit+0x174>)
 800207c:	2200      	movs	r2, #0
 800207e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002080:	4b14      	ldr	r3, [pc, #80]	@ (80020d4 <HAL_UART_MspInit+0x174>)
 8002082:	2200      	movs	r2, #0
 8002084:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002086:	4b13      	ldr	r3, [pc, #76]	@ (80020d4 <HAL_UART_MspInit+0x174>)
 8002088:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800208c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800208e:	4811      	ldr	r0, [pc, #68]	@ (80020d4 <HAL_UART_MspInit+0x174>)
 8002090:	f001 fd56 	bl	8003b40 <HAL_DMA_Init>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 800209a:	f7ff fbdd 	bl	8001858 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a0c      	ldr	r2, [pc, #48]	@ (80020d4 <HAL_UART_MspInit+0x174>)
 80020a2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80020a4:	4a0b      	ldr	r2, [pc, #44]	@ (80020d4 <HAL_UART_MspInit+0x174>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2105      	movs	r1, #5
 80020ae:	205b      	movs	r0, #91	@ 0x5b
 80020b0:	f001 fd1e 	bl	8003af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80020b4:	205b      	movs	r0, #91	@ 0x5b
 80020b6:	f001 fd35 	bl	8003b24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80020ba:	bf00      	nop
 80020bc:	3778      	adds	r7, #120	@ 0x78
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40008000 	.word	0x40008000
 80020c8:	40021000 	.word	0x40021000
 80020cc:	20004a24 	.word	0x20004a24
 80020d0:	40020008 	.word	0x40020008
 80020d4:	20004a84 	.word	0x20004a84
 80020d8:	4002001c 	.word	0x4002001c

080020dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020dc:	480d      	ldr	r0, [pc, #52]	@ (8002114 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020de:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020e0:	f7ff fee2 	bl	8001ea8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020e4:	480c      	ldr	r0, [pc, #48]	@ (8002118 <LoopForever+0x6>)
  ldr r1, =_edata
 80020e6:	490d      	ldr	r1, [pc, #52]	@ (800211c <LoopForever+0xa>)
  ldr r2, =_sidata
 80020e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002120 <LoopForever+0xe>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80020ec:	e002      	b.n	80020f4 <LoopCopyDataInit>

080020ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f2:	3304      	adds	r3, #4

080020f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f8:	d3f9      	bcc.n	80020ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002124 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002128 <LoopForever+0x16>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002100:	e001      	b.n	8002106 <LoopFillZerobss>

08002102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002104:	3204      	adds	r2, #4

08002106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002108:	d3fb      	bcc.n	8002102 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800210a:	f015 facf 	bl	80176ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800210e:	f7ff fa35 	bl	800157c <main>

08002112 <LoopForever>:

LoopForever:
    b LoopForever
 8002112:	e7fe      	b.n	8002112 <LoopForever>
  ldr   r0, =_estack
 8002114:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800211c:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8002120:	0801929c 	.word	0x0801929c
  ldr r2, =_sbss
 8002124:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8002128:	2000b090 	.word	0x2000b090

0800212c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800212c:	e7fe      	b.n	800212c <ADC3_IRQHandler>

0800212e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002138:	2003      	movs	r0, #3
 800213a:	f001 fcce 	bl	8003ada <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800213e:	200f      	movs	r0, #15
 8002140:	f7ff fd20 	bl	8001b84 <HAL_InitTick>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	71fb      	strb	r3, [r7, #7]
 800214e:	e001      	b.n	8002154 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002150:	f7ff fcee 	bl	8001b30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002154:	79fb      	ldrb	r3, [r7, #7]

}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002164:	4b05      	ldr	r3, [pc, #20]	@ (800217c <HAL_IncTick+0x1c>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <HAL_IncTick+0x20>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4413      	add	r3, r2
 800216e:	4a03      	ldr	r2, [pc, #12]	@ (800217c <HAL_IncTick+0x1c>)
 8002170:	6013      	str	r3, [r2, #0]
}
 8002172:	bf00      	nop
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	20004ae4 	.word	0x20004ae4
 8002180:	2000000c 	.word	0x2000000c

08002184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return uwTick;
 8002188:	4b03      	ldr	r3, [pc, #12]	@ (8002198 <HAL_GetTick+0x14>)
 800218a:	681b      	ldr	r3, [r3, #0]
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20004ae4 	.word	0x20004ae4

0800219c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	609a      	str	r2, [r3, #8]
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	609a      	str	r2, [r3, #8]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	3360      	adds	r3, #96	@ 0x60
 8002216:	461a      	mov	r2, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b08      	ldr	r3, [pc, #32]	@ (8002248 <LL_ADC_SetOffset+0x44>)
 8002226:	4013      	ands	r3, r2
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	4313      	orrs	r3, r2
 8002234:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800223c:	bf00      	nop
 800223e:	371c      	adds	r7, #28
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	03fff000 	.word	0x03fff000

0800224c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3360      	adds	r3, #96	@ 0x60
 800225a:	461a      	mov	r2, r3
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800226c:	4618      	mov	r0, r3
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002278:	b480      	push	{r7}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	3360      	adds	r3, #96	@ 0x60
 8002288:	461a      	mov	r2, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	431a      	orrs	r2, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022a2:	bf00      	nop
 80022a4:	371c      	adds	r7, #28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b087      	sub	sp, #28
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	3360      	adds	r3, #96	@ 0x60
 80022be:	461a      	mov	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	431a      	orrs	r2, r3
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80022d8:	bf00      	nop
 80022da:	371c      	adds	r7, #28
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	3360      	adds	r3, #96	@ 0x60
 80022f4:	461a      	mov	r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	431a      	orrs	r2, r3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800230e:	bf00      	nop
 8002310:	371c      	adds	r7, #28
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	615a      	str	r2, [r3, #20]
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002366:	b480      	push	{r7}
 8002368:	b087      	sub	sp, #28
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	3330      	adds	r3, #48	@ 0x30
 8002376:	461a      	mov	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	0a1b      	lsrs	r3, r3, #8
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	4413      	add	r3, r2
 8002384:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	211f      	movs	r1, #31
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	401a      	ands	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	0e9b      	lsrs	r3, r3, #26
 800239e:	f003 011f 	and.w	r1, r3, #31
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ac:	431a      	orrs	r2, r3
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023b2:	bf00      	nop
 80023b4:	371c      	adds	r7, #28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ca:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	3314      	adds	r3, #20
 80023f4:	461a      	mov	r2, r3
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	0e5b      	lsrs	r3, r3, #25
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	4413      	add	r3, r2
 8002402:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	0d1b      	lsrs	r3, r3, #20
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	2107      	movs	r1, #7
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	401a      	ands	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	0d1b      	lsrs	r3, r3, #20
 800241e:	f003 031f 	and.w	r3, r3, #31
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	fa01 f303 	lsl.w	r3, r1, r3
 8002428:	431a      	orrs	r2, r3
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800242e:	bf00      	nop
 8002430:	371c      	adds	r7, #28
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002454:	43db      	mvns	r3, r3
 8002456:	401a      	ands	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f003 0318 	and.w	r3, r3, #24
 800245e:	4908      	ldr	r1, [pc, #32]	@ (8002480 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002460:	40d9      	lsrs	r1, r3
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	400b      	ands	r3, r1
 8002466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246a:	431a      	orrs	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002472:	bf00      	nop
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	0007ffff 	.word	0x0007ffff

08002484 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 031f 	and.w	r3, r3, #31
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80024cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6093      	str	r3, [r2, #8]
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024f4:	d101      	bne.n	80024fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002518:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800251c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002540:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002544:	d101      	bne.n	800254a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <LL_ADC_IsEnabled+0x18>
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <LL_ADC_IsEnabled+0x1a>
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b04      	cmp	r3, #4
 8002590:	d101      	bne.n	8002596 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d101      	bne.n	80025bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025b8:	2301      	movs	r3, #1
 80025ba:	e000      	b.n	80025be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b089      	sub	sp, #36	@ 0x24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e1a9      	b.n	800293a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d109      	bne.n	8002608 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7fe fa87 	bl	8000b08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff67 	bl	80024e0 <LL_ADC_IsDeepPowerDownEnabled>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d004      	beq.n	8002622 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff ff4d 	bl	80024bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff ff82 	bl	8002530 <LL_ADC_IsInternalRegulatorEnabled>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d115      	bne.n	800265e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff ff66 	bl	8002508 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800263c:	4b9c      	ldr	r3, [pc, #624]	@ (80028b0 <HAL_ADC_Init+0x2e4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	099b      	lsrs	r3, r3, #6
 8002642:	4a9c      	ldr	r2, [pc, #624]	@ (80028b4 <HAL_ADC_Init+0x2e8>)
 8002644:	fba2 2303 	umull	r2, r3, r2, r3
 8002648:	099b      	lsrs	r3, r3, #6
 800264a:	3301      	adds	r3, #1
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002650:	e002      	b.n	8002658 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	3b01      	subs	r3, #1
 8002656:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f9      	bne.n	8002652 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff ff64 	bl	8002530 <LL_ADC_IsInternalRegulatorEnabled>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10d      	bne.n	800268a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002672:	f043 0210 	orr.w	r2, r3, #16
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800267e:	f043 0201 	orr.w	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff ff75 	bl	800257e <LL_ADC_REG_IsConversionOngoing>
 8002694:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f040 8142 	bne.w	8002928 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f040 813e 	bne.w	8002928 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80026b4:	f043 0202 	orr.w	r2, r3, #2
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff49 	bl	8002558 <LL_ADC_IsEnabled>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d141      	bne.n	8002750 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026d4:	d004      	beq.n	80026e0 <HAL_ADC_Init+0x114>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a77      	ldr	r2, [pc, #476]	@ (80028b8 <HAL_ADC_Init+0x2ec>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d10f      	bne.n	8002700 <HAL_ADC_Init+0x134>
 80026e0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80026e4:	f7ff ff38 	bl	8002558 <LL_ADC_IsEnabled>
 80026e8:	4604      	mov	r4, r0
 80026ea:	4873      	ldr	r0, [pc, #460]	@ (80028b8 <HAL_ADC_Init+0x2ec>)
 80026ec:	f7ff ff34 	bl	8002558 <LL_ADC_IsEnabled>
 80026f0:	4603      	mov	r3, r0
 80026f2:	4323      	orrs	r3, r4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	bf0c      	ite	eq
 80026f8:	2301      	moveq	r3, #1
 80026fa:	2300      	movne	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	e012      	b.n	8002726 <HAL_ADC_Init+0x15a>
 8002700:	486e      	ldr	r0, [pc, #440]	@ (80028bc <HAL_ADC_Init+0x2f0>)
 8002702:	f7ff ff29 	bl	8002558 <LL_ADC_IsEnabled>
 8002706:	4604      	mov	r4, r0
 8002708:	486d      	ldr	r0, [pc, #436]	@ (80028c0 <HAL_ADC_Init+0x2f4>)
 800270a:	f7ff ff25 	bl	8002558 <LL_ADC_IsEnabled>
 800270e:	4603      	mov	r3, r0
 8002710:	431c      	orrs	r4, r3
 8002712:	486c      	ldr	r0, [pc, #432]	@ (80028c4 <HAL_ADC_Init+0x2f8>)
 8002714:	f7ff ff20 	bl	8002558 <LL_ADC_IsEnabled>
 8002718:	4603      	mov	r3, r0
 800271a:	4323      	orrs	r3, r4
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d012      	beq.n	8002750 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002732:	d004      	beq.n	800273e <HAL_ADC_Init+0x172>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a5f      	ldr	r2, [pc, #380]	@ (80028b8 <HAL_ADC_Init+0x2ec>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d101      	bne.n	8002742 <HAL_ADC_Init+0x176>
 800273e:	4a62      	ldr	r2, [pc, #392]	@ (80028c8 <HAL_ADC_Init+0x2fc>)
 8002740:	e000      	b.n	8002744 <HAL_ADC_Init+0x178>
 8002742:	4a62      	ldr	r2, [pc, #392]	@ (80028cc <HAL_ADC_Init+0x300>)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	4619      	mov	r1, r3
 800274a:	4610      	mov	r0, r2
 800274c:	f7ff fd26 	bl	800219c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	7f5b      	ldrb	r3, [r3, #29]
 8002754:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800275a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002760:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002766:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800276e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800277a:	2b01      	cmp	r3, #1
 800277c:	d106      	bne.n	800278c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002782:	3b01      	subs	r3, #1
 8002784:	045b      	lsls	r3, r3, #17
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002790:	2b00      	cmp	r3, #0
 8002792:	d009      	beq.n	80027a8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002798:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	4b48      	ldr	r3, [pc, #288]	@ (80028d0 <HAL_ADC_Init+0x304>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	69b9      	ldr	r1, [r7, #24]
 80027b8:	430b      	orrs	r3, r1
 80027ba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fee4 	bl	80025a4 <LL_ADC_INJ_IsConversionOngoing>
 80027dc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d17f      	bne.n	80028e4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d17c      	bne.n	80028e4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027ee:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80027f6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002806:	f023 0302 	bic.w	r3, r3, #2
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	69b9      	ldr	r1, [r7, #24]
 8002810:	430b      	orrs	r3, r1
 8002812:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d017      	beq.n	800284c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691a      	ldr	r2, [r3, #16]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800282a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002834:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002838:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6911      	ldr	r1, [r2, #16]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	430b      	orrs	r3, r1
 8002846:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800284a:	e013      	b.n	8002874 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800285a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800286c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002870:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800287a:	2b01      	cmp	r3, #1
 800287c:	d12a      	bne.n	80028d4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002888:	f023 0304 	bic.w	r3, r3, #4
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002894:	4311      	orrs	r1, r2
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800289a:	4311      	orrs	r1, r2
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028a0:	430a      	orrs	r2, r1
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	611a      	str	r2, [r3, #16]
 80028ae:	e019      	b.n	80028e4 <HAL_ADC_Init+0x318>
 80028b0:	20000004 	.word	0x20000004
 80028b4:	053e2d63 	.word	0x053e2d63
 80028b8:	50000100 	.word	0x50000100
 80028bc:	50000400 	.word	0x50000400
 80028c0:	50000500 	.word	0x50000500
 80028c4:	50000600 	.word	0x50000600
 80028c8:	50000300 	.word	0x50000300
 80028cc:	50000700 	.word	0x50000700
 80028d0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0201 	bic.w	r2, r2, #1
 80028e2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d10c      	bne.n	8002906 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f2:	f023 010f 	bic.w	r1, r3, #15
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	1e5a      	subs	r2, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	631a      	str	r2, [r3, #48]	@ 0x30
 8002904:	e007      	b.n	8002916 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 020f 	bic.w	r2, r2, #15
 8002914:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291a:	f023 0303 	bic.w	r3, r3, #3
 800291e:	f043 0201 	orr.w	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002926:	e007      	b.n	8002938 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292c:	f043 0210 	orr.w	r2, r3, #16
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002938:	7ffb      	ldrb	r3, [r7, #31]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3724      	adds	r7, #36	@ 0x24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd90      	pop	{r4, r7, pc}
 8002942:	bf00      	nop

08002944 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	@ 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800294c:	2300      	movs	r3, #0
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002968:	d004      	beq.n	8002974 <HAL_ADC_IRQHandler+0x30>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a8e      	ldr	r2, [pc, #568]	@ (8002ba8 <HAL_ADC_IRQHandler+0x264>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d101      	bne.n	8002978 <HAL_ADC_IRQHandler+0x34>
 8002974:	4b8d      	ldr	r3, [pc, #564]	@ (8002bac <HAL_ADC_IRQHandler+0x268>)
 8002976:	e000      	b.n	800297a <HAL_ADC_IRQHandler+0x36>
 8002978:	4b8d      	ldr	r3, [pc, #564]	@ (8002bb0 <HAL_ADC_IRQHandler+0x26c>)
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fd82 	bl	8002484 <LL_ADC_GetMultimode>
 8002980:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d017      	beq.n	80029bc <HAL_ADC_IRQHandler+0x78>
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d012      	beq.n	80029bc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299a:	f003 0310 	and.w	r3, r3, #16
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d105      	bne.n	80029ae <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fed4 	bl	800375c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2202      	movs	r2, #2
 80029ba:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d004      	beq.n	80029d0 <HAL_ADC_IRQHandler+0x8c>
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10b      	bne.n	80029e8 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 8094 	beq.w	8002b04 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 808e 	beq.w	8002b04 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d105      	bne.n	8002a00 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fc9b 	bl	8002340 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d072      	beq.n	8002af6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a64      	ldr	r2, [pc, #400]	@ (8002ba8 <HAL_ADC_IRQHandler+0x264>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d009      	beq.n	8002a2e <HAL_ADC_IRQHandler+0xea>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a65      	ldr	r2, [pc, #404]	@ (8002bb4 <HAL_ADC_IRQHandler+0x270>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d002      	beq.n	8002a2a <HAL_ADC_IRQHandler+0xe6>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	e003      	b.n	8002a32 <HAL_ADC_IRQHandler+0xee>
 8002a2a:	4b63      	ldr	r3, [pc, #396]	@ (8002bb8 <HAL_ADC_IRQHandler+0x274>)
 8002a2c:	e001      	b.n	8002a32 <HAL_ADC_IRQHandler+0xee>
 8002a2e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d008      	beq.n	8002a4c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	2b05      	cmp	r3, #5
 8002a44:	d002      	beq.n	8002a4c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2b09      	cmp	r3, #9
 8002a4a:	d104      	bne.n	8002a56 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	623b      	str	r3, [r7, #32]
 8002a54:	e014      	b.n	8002a80 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a53      	ldr	r2, [pc, #332]	@ (8002ba8 <HAL_ADC_IRQHandler+0x264>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d009      	beq.n	8002a74 <HAL_ADC_IRQHandler+0x130>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a53      	ldr	r2, [pc, #332]	@ (8002bb4 <HAL_ADC_IRQHandler+0x270>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d002      	beq.n	8002a70 <HAL_ADC_IRQHandler+0x12c>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	e003      	b.n	8002a78 <HAL_ADC_IRQHandler+0x134>
 8002a70:	4b51      	ldr	r3, [pc, #324]	@ (8002bb8 <HAL_ADC_IRQHandler+0x274>)
 8002a72:	e001      	b.n	8002a78 <HAL_ADC_IRQHandler+0x134>
 8002a74:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a78:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d135      	bne.n	8002af6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0308 	and.w	r3, r3, #8
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d12e      	bne.n	8002af6 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fd6e 	bl	800257e <LL_ADC_REG_IsConversionOngoing>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d11a      	bne.n	8002ade <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 020c 	bic.w	r2, r2, #12
 8002ab6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002abc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d112      	bne.n	8002af6 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad4:	f043 0201 	orr.w	r2, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002adc:	e00b      	b.n	8002af6 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae2:	f043 0210 	orr.w	r2, r3, #16
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aee:	f043 0201 	orr.w	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f984 	bl	8002e04 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	220c      	movs	r2, #12
 8002b02:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d004      	beq.n	8002b18 <HAL_ADC_IRQHandler+0x1d4>
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10b      	bne.n	8002b30 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 80b3 	beq.w	8002c8a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 80ad 	beq.w	8002c8a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d105      	bne.n	8002b48 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b40:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fc36 	bl	80023be <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002b52:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fbf1 	bl	8002340 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b5e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a10      	ldr	r2, [pc, #64]	@ (8002ba8 <HAL_ADC_IRQHandler+0x264>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d009      	beq.n	8002b7e <HAL_ADC_IRQHandler+0x23a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a11      	ldr	r2, [pc, #68]	@ (8002bb4 <HAL_ADC_IRQHandler+0x270>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d002      	beq.n	8002b7a <HAL_ADC_IRQHandler+0x236>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	e003      	b.n	8002b82 <HAL_ADC_IRQHandler+0x23e>
 8002b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb8 <HAL_ADC_IRQHandler+0x274>)
 8002b7c:	e001      	b.n	8002b82 <HAL_ADC_IRQHandler+0x23e>
 8002b7e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d008      	beq.n	8002b9c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2b06      	cmp	r3, #6
 8002b94:	d002      	beq.n	8002b9c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2b07      	cmp	r3, #7
 8002b9a:	d10f      	bne.n	8002bbc <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	623b      	str	r3, [r7, #32]
 8002ba4:	e01f      	b.n	8002be6 <HAL_ADC_IRQHandler+0x2a2>
 8002ba6:	bf00      	nop
 8002ba8:	50000100 	.word	0x50000100
 8002bac:	50000300 	.word	0x50000300
 8002bb0:	50000700 	.word	0x50000700
 8002bb4:	50000500 	.word	0x50000500
 8002bb8:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a8b      	ldr	r2, [pc, #556]	@ (8002df0 <HAL_ADC_IRQHandler+0x4ac>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d009      	beq.n	8002bda <HAL_ADC_IRQHandler+0x296>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a8a      	ldr	r2, [pc, #552]	@ (8002df4 <HAL_ADC_IRQHandler+0x4b0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d002      	beq.n	8002bd6 <HAL_ADC_IRQHandler+0x292>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	e003      	b.n	8002bde <HAL_ADC_IRQHandler+0x29a>
 8002bd6:	4b88      	ldr	r3, [pc, #544]	@ (8002df8 <HAL_ADC_IRQHandler+0x4b4>)
 8002bd8:	e001      	b.n	8002bde <HAL_ADC_IRQHandler+0x29a>
 8002bda:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002bde:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d047      	beq.n	8002c7c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d007      	beq.n	8002c06 <HAL_ADC_IRQHandler+0x2c2>
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d03f      	beq.n	8002c7c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d13a      	bne.n	8002c7c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c10:	2b40      	cmp	r3, #64	@ 0x40
 8002c12:	d133      	bne.n	8002c7c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d12e      	bne.n	8002c7c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fcbe 	bl	80025a4 <LL_ADC_INJ_IsConversionOngoing>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d11a      	bne.n	8002c64 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002c3c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d112      	bne.n	8002c7c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c5a:	f043 0201 	orr.w	r2, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c62:	e00b      	b.n	8002c7c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c68:	f043 0210 	orr.w	r2, r3, #16
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c74:	f043 0201 	orr.w	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 fd45 	bl	800370c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2260      	movs	r2, #96	@ 0x60
 8002c88:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d011      	beq.n	8002cb8 <HAL_ADC_IRQHandler+0x374>
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00c      	beq.n	8002cb8 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f8b4 	bl	8002e18 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2280      	movs	r2, #128	@ 0x80
 8002cb6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d012      	beq.n	8002ce8 <HAL_ADC_IRQHandler+0x3a4>
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00d      	beq.n	8002ce8 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 fd2b 	bl	8003734 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ce6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d012      	beq.n	8002d18 <HAL_ADC_IRQHandler+0x3d4>
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00d      	beq.n	8002d18 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d00:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 fd1d 	bl	8003748 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d16:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0310 	and.w	r3, r3, #16
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d043      	beq.n	8002daa <HAL_ADC_IRQHandler+0x466>
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d03e      	beq.n	8002daa <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d102      	bne.n	8002d3a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002d34:	2301      	movs	r3, #1
 8002d36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d38:	e021      	b.n	8002d7e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d015      	beq.n	8002d6c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d48:	d004      	beq.n	8002d54 <HAL_ADC_IRQHandler+0x410>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a28      	ldr	r2, [pc, #160]	@ (8002df0 <HAL_ADC_IRQHandler+0x4ac>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d101      	bne.n	8002d58 <HAL_ADC_IRQHandler+0x414>
 8002d54:	4b29      	ldr	r3, [pc, #164]	@ (8002dfc <HAL_ADC_IRQHandler+0x4b8>)
 8002d56:	e000      	b.n	8002d5a <HAL_ADC_IRQHandler+0x416>
 8002d58:	4b29      	ldr	r3, [pc, #164]	@ (8002e00 <HAL_ADC_IRQHandler+0x4bc>)
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fba0 	bl	80024a0 <LL_ADC_GetMultiDMATransfer>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00b      	beq.n	8002d7e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002d66:	2301      	movs	r3, #1
 8002d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d6a:	e008      	b.n	8002d7e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d10e      	bne.n	8002da2 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d88:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d94:	f043 0202 	orr.w	r2, r3, #2
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f845 	bl	8002e2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2210      	movs	r2, #16
 8002da8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d018      	beq.n	8002de6 <HAL_ADC_IRQHandler+0x4a2>
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d013      	beq.n	8002de6 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dce:	f043 0208 	orr.w	r2, r3, #8
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002dde:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 fc9d 	bl	8003720 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002de6:	bf00      	nop
 8002de8:	3728      	adds	r7, #40	@ 0x28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	50000100 	.word	0x50000100
 8002df4:	50000500 	.word	0x50000500
 8002df8:	50000400 	.word	0x50000400
 8002dfc:	50000300 	.word	0x50000300
 8002e00:	50000700 	.word	0x50000700

08002e04 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b0b6      	sub	sp, #216	@ 0xd8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d102      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x24>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	f000 bc13 	b.w	800368a <HAL_ADC_ConfigChannel+0x84a>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff fb84 	bl	800257e <LL_ADC_REG_IsConversionOngoing>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f040 83f3 	bne.w	8003664 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	6859      	ldr	r1, [r3, #4]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	f7ff fa6b 	bl	8002366 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fb72 	bl	800257e <LL_ADC_REG_IsConversionOngoing>
 8002e9a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fb7e 	bl	80025a4 <LL_ADC_INJ_IsConversionOngoing>
 8002ea8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002eac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f040 81d9 	bne.w	8003268 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002eb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f040 81d4 	bne.w	8003268 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ec8:	d10f      	bne.n	8002eea <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	f7ff fa85 	bl	80023e4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff fa19 	bl	800231a <LL_ADC_SetSamplingTimeCommonConfig>
 8002ee8:	e00e      	b.n	8002f08 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	6819      	ldr	r1, [r3, #0]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f7ff fa74 	bl	80023e4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2100      	movs	r1, #0
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff fa09 	bl	800231a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	08db      	lsrs	r3, r3, #3
 8002f14:	f003 0303 	and.w	r3, r3, #3
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d022      	beq.n	8002f70 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6818      	ldr	r0, [r3, #0]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6919      	ldr	r1, [r3, #16]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f3a:	f7ff f963 	bl	8002204 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	6919      	ldr	r1, [r3, #16]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	f7ff f9af 	bl	80022ae <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6818      	ldr	r0, [r3, #0]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d102      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x126>
 8002f60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f64:	e000      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x128>
 8002f66:	2300      	movs	r3, #0
 8002f68:	461a      	mov	r2, r3
 8002f6a:	f7ff f9bb 	bl	80022e4 <LL_ADC_SetOffsetSaturation>
 8002f6e:	e17b      	b.n	8003268 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2100      	movs	r1, #0
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff f968 	bl	800224c <LL_ADC_GetOffsetChannel>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10a      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x15c>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff f95d 	bl	800224c <LL_ADC_GetOffsetChannel>
 8002f92:	4603      	mov	r3, r0
 8002f94:	0e9b      	lsrs	r3, r3, #26
 8002f96:	f003 021f 	and.w	r2, r3, #31
 8002f9a:	e01e      	b.n	8002fda <HAL_ADC_ConfigChannel+0x19a>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff f952 	bl	800224c <LL_ADC_GetOffsetChannel>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002fb2:	fa93 f3a3 	rbit	r3, r3
 8002fb6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002fbe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002fc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002fca:	2320      	movs	r3, #32
 8002fcc:	e004      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002fce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d105      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x1b2>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	0e9b      	lsrs	r3, r3, #26
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	e018      	b.n	8003024 <HAL_ADC_ConfigChannel+0x1e4>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ffe:	fa93 f3a3 	rbit	r3, r3
 8003002:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800300a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800300e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003016:	2320      	movs	r3, #32
 8003018:	e004      	b.n	8003024 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800301a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003024:	429a      	cmp	r2, r3
 8003026:	d106      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2200      	movs	r2, #0
 800302e:	2100      	movs	r1, #0
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff f921 	bl	8002278 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2101      	movs	r1, #1
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff f905 	bl	800224c <LL_ADC_GetOffsetChannel>
 8003042:	4603      	mov	r3, r0
 8003044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10a      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x222>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2101      	movs	r1, #1
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff f8fa 	bl	800224c <LL_ADC_GetOffsetChannel>
 8003058:	4603      	mov	r3, r0
 800305a:	0e9b      	lsrs	r3, r3, #26
 800305c:	f003 021f 	and.w	r2, r3, #31
 8003060:	e01e      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x260>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2101      	movs	r1, #1
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff f8ef 	bl	800224c <LL_ADC_GetOffsetChannel>
 800306e:	4603      	mov	r3, r0
 8003070:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003078:	fa93 f3a3 	rbit	r3, r3
 800307c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003080:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003084:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003088:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003090:	2320      	movs	r3, #32
 8003092:	e004      	b.n	800309e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003094:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003098:	fab3 f383 	clz	r3, r3
 800309c:	b2db      	uxtb	r3, r3
 800309e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d105      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x278>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	0e9b      	lsrs	r3, r3, #26
 80030b2:	f003 031f 	and.w	r3, r3, #31
 80030b6:	e018      	b.n	80030ea <HAL_ADC_ConfigChannel+0x2aa>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80030c4:	fa93 f3a3 	rbit	r3, r3
 80030c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80030cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80030d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80030dc:	2320      	movs	r3, #32
 80030de:	e004      	b.n	80030ea <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80030e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030e4:	fab3 f383 	clz	r3, r3
 80030e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d106      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2200      	movs	r2, #0
 80030f4:	2101      	movs	r1, #1
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff f8be 	bl	8002278 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2102      	movs	r1, #2
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff f8a2 	bl	800224c <LL_ADC_GetOffsetChannel>
 8003108:	4603      	mov	r3, r0
 800310a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10a      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x2e8>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2102      	movs	r1, #2
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff f897 	bl	800224c <LL_ADC_GetOffsetChannel>
 800311e:	4603      	mov	r3, r0
 8003120:	0e9b      	lsrs	r3, r3, #26
 8003122:	f003 021f 	and.w	r2, r3, #31
 8003126:	e01e      	b.n	8003166 <HAL_ADC_ConfigChannel+0x326>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2102      	movs	r1, #2
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff f88c 	bl	800224c <LL_ADC_GetOffsetChannel>
 8003134:	4603      	mov	r3, r0
 8003136:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800313e:	fa93 f3a3 	rbit	r3, r3
 8003142:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003146:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800314a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800314e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003156:	2320      	movs	r3, #32
 8003158:	e004      	b.n	8003164 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800315a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	b2db      	uxtb	r3, r3
 8003164:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316e:	2b00      	cmp	r3, #0
 8003170:	d105      	bne.n	800317e <HAL_ADC_ConfigChannel+0x33e>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	0e9b      	lsrs	r3, r3, #26
 8003178:	f003 031f 	and.w	r3, r3, #31
 800317c:	e016      	b.n	80031ac <HAL_ADC_ConfigChannel+0x36c>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003186:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800318a:	fa93 f3a3 	rbit	r3, r3
 800318e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003190:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003192:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003196:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800319e:	2320      	movs	r3, #32
 80031a0:	e004      	b.n	80031ac <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80031a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031a6:	fab3 f383 	clz	r3, r3
 80031aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d106      	bne.n	80031be <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2200      	movs	r2, #0
 80031b6:	2102      	movs	r1, #2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff f85d 	bl	8002278 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2103      	movs	r1, #3
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff f841 	bl	800224c <LL_ADC_GetOffsetChannel>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10a      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x3aa>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2103      	movs	r1, #3
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff f836 	bl	800224c <LL_ADC_GetOffsetChannel>
 80031e0:	4603      	mov	r3, r0
 80031e2:	0e9b      	lsrs	r3, r3, #26
 80031e4:	f003 021f 	and.w	r2, r3, #31
 80031e8:	e017      	b.n	800321a <HAL_ADC_ConfigChannel+0x3da>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2103      	movs	r1, #3
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff f82b 	bl	800224c <LL_ADC_GetOffsetChannel>
 80031f6:	4603      	mov	r3, r0
 80031f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031fc:	fa93 f3a3 	rbit	r3, r3
 8003200:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003202:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003204:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003206:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800320c:	2320      	movs	r3, #32
 800320e:	e003      	b.n	8003218 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003210:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003212:	fab3 f383 	clz	r3, r3
 8003216:	b2db      	uxtb	r3, r3
 8003218:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003222:	2b00      	cmp	r3, #0
 8003224:	d105      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x3f2>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	0e9b      	lsrs	r3, r3, #26
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	e011      	b.n	8003256 <HAL_ADC_ConfigChannel+0x416>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800323a:	fa93 f3a3 	rbit	r3, r3
 800323e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003240:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003242:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003244:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800324a:	2320      	movs	r3, #32
 800324c:	e003      	b.n	8003256 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800324e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003250:	fab3 f383 	clz	r3, r3
 8003254:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003256:	429a      	cmp	r2, r3
 8003258:	d106      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2200      	movs	r2, #0
 8003260:	2103      	movs	r1, #3
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff f808 	bl	8002278 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff f973 	bl	8002558 <LL_ADC_IsEnabled>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	f040 813d 	bne.w	80034f4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6818      	ldr	r0, [r3, #0]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	6819      	ldr	r1, [r3, #0]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	461a      	mov	r2, r3
 8003288:	f7ff f8d8 	bl	800243c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	4aa2      	ldr	r2, [pc, #648]	@ (800351c <HAL_ADC_ConfigChannel+0x6dc>)
 8003292:	4293      	cmp	r3, r2
 8003294:	f040 812e 	bne.w	80034f4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10b      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x480>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	0e9b      	lsrs	r3, r3, #26
 80032ae:	3301      	adds	r3, #1
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	2b09      	cmp	r3, #9
 80032b6:	bf94      	ite	ls
 80032b8:	2301      	movls	r3, #1
 80032ba:	2300      	movhi	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	e019      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x4b4>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032c8:	fa93 f3a3 	rbit	r3, r3
 80032cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80032ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032d0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80032d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80032d8:	2320      	movs	r3, #32
 80032da:	e003      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80032dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032de:	fab3 f383 	clz	r3, r3
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	3301      	adds	r3, #1
 80032e6:	f003 031f 	and.w	r3, r3, #31
 80032ea:	2b09      	cmp	r3, #9
 80032ec:	bf94      	ite	ls
 80032ee:	2301      	movls	r3, #1
 80032f0:	2300      	movhi	r3, #0
 80032f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d079      	beq.n	80033ec <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003300:	2b00      	cmp	r3, #0
 8003302:	d107      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x4d4>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	0e9b      	lsrs	r3, r3, #26
 800330a:	3301      	adds	r3, #1
 800330c:	069b      	lsls	r3, r3, #26
 800330e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003312:	e015      	b.n	8003340 <HAL_ADC_ConfigChannel+0x500>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800331c:	fa93 f3a3 	rbit	r3, r3
 8003320:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003322:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003324:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800332c:	2320      	movs	r3, #32
 800332e:	e003      	b.n	8003338 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003332:	fab3 f383 	clz	r3, r3
 8003336:	b2db      	uxtb	r3, r3
 8003338:	3301      	adds	r3, #1
 800333a:	069b      	lsls	r3, r3, #26
 800333c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003348:	2b00      	cmp	r3, #0
 800334a:	d109      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x520>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	0e9b      	lsrs	r3, r3, #26
 8003352:	3301      	adds	r3, #1
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	2101      	movs	r1, #1
 800335a:	fa01 f303 	lsl.w	r3, r1, r3
 800335e:	e017      	b.n	8003390 <HAL_ADC_ConfigChannel+0x550>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003366:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003368:	fa93 f3a3 	rbit	r3, r3
 800336c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800336e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003370:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003372:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003378:	2320      	movs	r3, #32
 800337a:	e003      	b.n	8003384 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800337c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800337e:	fab3 f383 	clz	r3, r3
 8003382:	b2db      	uxtb	r3, r3
 8003384:	3301      	adds	r3, #1
 8003386:	f003 031f 	and.w	r3, r3, #31
 800338a:	2101      	movs	r1, #1
 800338c:	fa01 f303 	lsl.w	r3, r1, r3
 8003390:	ea42 0103 	orr.w	r1, r2, r3
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10a      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x576>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	0e9b      	lsrs	r3, r3, #26
 80033a6:	3301      	adds	r3, #1
 80033a8:	f003 021f 	and.w	r2, r3, #31
 80033ac:	4613      	mov	r3, r2
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	4413      	add	r3, r2
 80033b2:	051b      	lsls	r3, r3, #20
 80033b4:	e018      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x5a8>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033be:	fa93 f3a3 	rbit	r3, r3
 80033c2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80033c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80033c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80033ce:	2320      	movs	r3, #32
 80033d0:	e003      	b.n	80033da <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80033d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033d4:	fab3 f383 	clz	r3, r3
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	3301      	adds	r3, #1
 80033dc:	f003 021f 	and.w	r2, r3, #31
 80033e0:	4613      	mov	r3, r2
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	4413      	add	r3, r2
 80033e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033e8:	430b      	orrs	r3, r1
 80033ea:	e07e      	b.n	80034ea <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d107      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x5c8>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	0e9b      	lsrs	r3, r3, #26
 80033fe:	3301      	adds	r3, #1
 8003400:	069b      	lsls	r3, r3, #26
 8003402:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003406:	e015      	b.n	8003434 <HAL_ADC_ConfigChannel+0x5f4>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003410:	fa93 f3a3 	rbit	r3, r3
 8003414:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003418:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800341a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003420:	2320      	movs	r3, #32
 8003422:	e003      	b.n	800342c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	3301      	adds	r3, #1
 800342e:	069b      	lsls	r3, r3, #26
 8003430:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800343c:	2b00      	cmp	r3, #0
 800343e:	d109      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x614>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	0e9b      	lsrs	r3, r3, #26
 8003446:	3301      	adds	r3, #1
 8003448:	f003 031f 	and.w	r3, r3, #31
 800344c:	2101      	movs	r1, #1
 800344e:	fa01 f303 	lsl.w	r3, r1, r3
 8003452:	e017      	b.n	8003484 <HAL_ADC_ConfigChannel+0x644>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	fa93 f3a3 	rbit	r3, r3
 8003460:	61fb      	str	r3, [r7, #28]
  return result;
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800346c:	2320      	movs	r3, #32
 800346e:	e003      	b.n	8003478 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	3301      	adds	r3, #1
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	2101      	movs	r1, #1
 8003480:	fa01 f303 	lsl.w	r3, r1, r3
 8003484:	ea42 0103 	orr.w	r1, r2, r3
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10d      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x670>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	0e9b      	lsrs	r3, r3, #26
 800349a:	3301      	adds	r3, #1
 800349c:	f003 021f 	and.w	r2, r3, #31
 80034a0:	4613      	mov	r3, r2
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	4413      	add	r3, r2
 80034a6:	3b1e      	subs	r3, #30
 80034a8:	051b      	lsls	r3, r3, #20
 80034aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034ae:	e01b      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x6a8>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	fa93 f3a3 	rbit	r3, r3
 80034bc:	613b      	str	r3, [r7, #16]
  return result;
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80034c8:	2320      	movs	r3, #32
 80034ca:	e003      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	fab3 f383 	clz	r3, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	3301      	adds	r3, #1
 80034d6:	f003 021f 	and.w	r2, r3, #31
 80034da:	4613      	mov	r3, r2
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	4413      	add	r3, r2
 80034e0:	3b1e      	subs	r3, #30
 80034e2:	051b      	lsls	r3, r3, #20
 80034e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034e8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034ee:	4619      	mov	r1, r3
 80034f0:	f7fe ff78 	bl	80023e4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4b09      	ldr	r3, [pc, #36]	@ (8003520 <HAL_ADC_ConfigChannel+0x6e0>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80be 	beq.w	800367e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800350a:	d004      	beq.n	8003516 <HAL_ADC_ConfigChannel+0x6d6>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a04      	ldr	r2, [pc, #16]	@ (8003524 <HAL_ADC_ConfigChannel+0x6e4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d10a      	bne.n	800352c <HAL_ADC_ConfigChannel+0x6ec>
 8003516:	4b04      	ldr	r3, [pc, #16]	@ (8003528 <HAL_ADC_ConfigChannel+0x6e8>)
 8003518:	e009      	b.n	800352e <HAL_ADC_ConfigChannel+0x6ee>
 800351a:	bf00      	nop
 800351c:	407f0000 	.word	0x407f0000
 8003520:	80080000 	.word	0x80080000
 8003524:	50000100 	.word	0x50000100
 8003528:	50000300 	.word	0x50000300
 800352c:	4b59      	ldr	r3, [pc, #356]	@ (8003694 <HAL_ADC_ConfigChannel+0x854>)
 800352e:	4618      	mov	r0, r3
 8003530:	f7fe fe5a 	bl	80021e8 <LL_ADC_GetCommonPathInternalCh>
 8003534:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a56      	ldr	r2, [pc, #344]	@ (8003698 <HAL_ADC_ConfigChannel+0x858>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d004      	beq.n	800354c <HAL_ADC_ConfigChannel+0x70c>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a55      	ldr	r2, [pc, #340]	@ (800369c <HAL_ADC_ConfigChannel+0x85c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d13a      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800354c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003550:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d134      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003560:	d005      	beq.n	800356e <HAL_ADC_ConfigChannel+0x72e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a4e      	ldr	r2, [pc, #312]	@ (80036a0 <HAL_ADC_ConfigChannel+0x860>)
 8003568:	4293      	cmp	r3, r2
 800356a:	f040 8085 	bne.w	8003678 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003576:	d004      	beq.n	8003582 <HAL_ADC_ConfigChannel+0x742>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a49      	ldr	r2, [pc, #292]	@ (80036a4 <HAL_ADC_ConfigChannel+0x864>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d101      	bne.n	8003586 <HAL_ADC_ConfigChannel+0x746>
 8003582:	4a49      	ldr	r2, [pc, #292]	@ (80036a8 <HAL_ADC_ConfigChannel+0x868>)
 8003584:	e000      	b.n	8003588 <HAL_ADC_ConfigChannel+0x748>
 8003586:	4a43      	ldr	r2, [pc, #268]	@ (8003694 <HAL_ADC_ConfigChannel+0x854>)
 8003588:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800358c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003590:	4619      	mov	r1, r3
 8003592:	4610      	mov	r0, r2
 8003594:	f7fe fe15 	bl	80021c2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003598:	4b44      	ldr	r3, [pc, #272]	@ (80036ac <HAL_ADC_ConfigChannel+0x86c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	099b      	lsrs	r3, r3, #6
 800359e:	4a44      	ldr	r2, [pc, #272]	@ (80036b0 <HAL_ADC_ConfigChannel+0x870>)
 80035a0:	fba2 2303 	umull	r2, r3, r2, r3
 80035a4:	099b      	lsrs	r3, r3, #6
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	4613      	mov	r3, r2
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035b2:	e002      	b.n	80035ba <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1f9      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035c0:	e05a      	b.n	8003678 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a3b      	ldr	r2, [pc, #236]	@ (80036b4 <HAL_ADC_ConfigChannel+0x874>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d125      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d11f      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a31      	ldr	r2, [pc, #196]	@ (80036a4 <HAL_ADC_ConfigChannel+0x864>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d104      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x7ac>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a34      	ldr	r2, [pc, #208]	@ (80036b8 <HAL_ADC_ConfigChannel+0x878>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d047      	beq.n	800367c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035f4:	d004      	beq.n	8003600 <HAL_ADC_ConfigChannel+0x7c0>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a2a      	ldr	r2, [pc, #168]	@ (80036a4 <HAL_ADC_ConfigChannel+0x864>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d101      	bne.n	8003604 <HAL_ADC_ConfigChannel+0x7c4>
 8003600:	4a29      	ldr	r2, [pc, #164]	@ (80036a8 <HAL_ADC_ConfigChannel+0x868>)
 8003602:	e000      	b.n	8003606 <HAL_ADC_ConfigChannel+0x7c6>
 8003604:	4a23      	ldr	r2, [pc, #140]	@ (8003694 <HAL_ADC_ConfigChannel+0x854>)
 8003606:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800360a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800360e:	4619      	mov	r1, r3
 8003610:	4610      	mov	r0, r2
 8003612:	f7fe fdd6 	bl	80021c2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003616:	e031      	b.n	800367c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a27      	ldr	r2, [pc, #156]	@ (80036bc <HAL_ADC_ConfigChannel+0x87c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d12d      	bne.n	800367e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003622:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d127      	bne.n	800367e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a1c      	ldr	r2, [pc, #112]	@ (80036a4 <HAL_ADC_ConfigChannel+0x864>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d022      	beq.n	800367e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003640:	d004      	beq.n	800364c <HAL_ADC_ConfigChannel+0x80c>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a17      	ldr	r2, [pc, #92]	@ (80036a4 <HAL_ADC_ConfigChannel+0x864>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d101      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x810>
 800364c:	4a16      	ldr	r2, [pc, #88]	@ (80036a8 <HAL_ADC_ConfigChannel+0x868>)
 800364e:	e000      	b.n	8003652 <HAL_ADC_ConfigChannel+0x812>
 8003650:	4a10      	ldr	r2, [pc, #64]	@ (8003694 <HAL_ADC_ConfigChannel+0x854>)
 8003652:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003656:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800365a:	4619      	mov	r1, r3
 800365c:	4610      	mov	r0, r2
 800365e:	f7fe fdb0 	bl	80021c2 <LL_ADC_SetCommonPathInternalCh>
 8003662:	e00c      	b.n	800367e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003668:	f043 0220 	orr.w	r2, r3, #32
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003676:	e002      	b.n	800367e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003678:	bf00      	nop
 800367a:	e000      	b.n	800367e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800367c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003686:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800368a:	4618      	mov	r0, r3
 800368c:	37d8      	adds	r7, #216	@ 0xd8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	50000700 	.word	0x50000700
 8003698:	c3210000 	.word	0xc3210000
 800369c:	90c00010 	.word	0x90c00010
 80036a0:	50000600 	.word	0x50000600
 80036a4:	50000100 	.word	0x50000100
 80036a8:	50000300 	.word	0x50000300
 80036ac:	20000004 	.word	0x20000004
 80036b0:	053e2d63 	.word	0x053e2d63
 80036b4:	c7520000 	.word	0xc7520000
 80036b8:	50000500 	.word	0x50000500
 80036bc:	cb840000 	.word	0xcb840000

080036c0 <LL_ADC_IsEnabled>:
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <LL_ADC_IsEnabled+0x18>
 80036d4:	2301      	movs	r3, #1
 80036d6:	e000      	b.n	80036da <LL_ADC_IsEnabled+0x1a>
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d101      	bne.n	80036fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003770:	b590      	push	{r4, r7, lr}
 8003772:	b0a1      	sub	sp, #132	@ 0x84
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800378a:	2302      	movs	r3, #2
 800378c:	e0e7      	b.n	800395e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003796:	2300      	movs	r3, #0
 8003798:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800379a:	2300      	movs	r3, #0
 800379c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037a6:	d102      	bne.n	80037ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80037a8:	4b6f      	ldr	r3, [pc, #444]	@ (8003968 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	e009      	b.n	80037c2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a6e      	ldr	r2, [pc, #440]	@ (800396c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d102      	bne.n	80037be <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80037b8:	4b6d      	ldr	r3, [pc, #436]	@ (8003970 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80037ba:	60bb      	str	r3, [r7, #8]
 80037bc:	e001      	b.n	80037c2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80037be:	2300      	movs	r3, #0
 80037c0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10b      	bne.n	80037e0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037cc:	f043 0220 	orr.w	r2, r3, #32
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0be      	b.n	800395e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff ff7f 	bl	80036e6 <LL_ADC_REG_IsConversionOngoing>
 80037e8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff ff79 	bl	80036e6 <LL_ADC_REG_IsConversionOngoing>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f040 80a0 	bne.w	800393c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80037fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f040 809c 	bne.w	800393c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800380c:	d004      	beq.n	8003818 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a55      	ldr	r2, [pc, #340]	@ (8003968 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d101      	bne.n	800381c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003818:	4b56      	ldr	r3, [pc, #344]	@ (8003974 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800381a:	e000      	b.n	800381e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800381c:	4b56      	ldr	r3, [pc, #344]	@ (8003978 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800381e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d04b      	beq.n	80038c0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003828:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800383a:	035b      	lsls	r3, r3, #13
 800383c:	430b      	orrs	r3, r1
 800383e:	431a      	orrs	r2, r3
 8003840:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003842:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800384c:	d004      	beq.n	8003858 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a45      	ldr	r2, [pc, #276]	@ (8003968 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d10f      	bne.n	8003878 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003858:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800385c:	f7ff ff30 	bl	80036c0 <LL_ADC_IsEnabled>
 8003860:	4604      	mov	r4, r0
 8003862:	4841      	ldr	r0, [pc, #260]	@ (8003968 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003864:	f7ff ff2c 	bl	80036c0 <LL_ADC_IsEnabled>
 8003868:	4603      	mov	r3, r0
 800386a:	4323      	orrs	r3, r4
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf0c      	ite	eq
 8003870:	2301      	moveq	r3, #1
 8003872:	2300      	movne	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	e012      	b.n	800389e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003878:	483c      	ldr	r0, [pc, #240]	@ (800396c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800387a:	f7ff ff21 	bl	80036c0 <LL_ADC_IsEnabled>
 800387e:	4604      	mov	r4, r0
 8003880:	483b      	ldr	r0, [pc, #236]	@ (8003970 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003882:	f7ff ff1d 	bl	80036c0 <LL_ADC_IsEnabled>
 8003886:	4603      	mov	r3, r0
 8003888:	431c      	orrs	r4, r3
 800388a:	483c      	ldr	r0, [pc, #240]	@ (800397c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800388c:	f7ff ff18 	bl	80036c0 <LL_ADC_IsEnabled>
 8003890:	4603      	mov	r3, r0
 8003892:	4323      	orrs	r3, r4
 8003894:	2b00      	cmp	r3, #0
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d056      	beq.n	8003950 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80038a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80038aa:	f023 030f 	bic.w	r3, r3, #15
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	6811      	ldr	r1, [r2, #0]
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	6892      	ldr	r2, [r2, #8]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	431a      	orrs	r2, r3
 80038ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038bc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038be:	e047      	b.n	8003950 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80038c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038ca:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038d4:	d004      	beq.n	80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a23      	ldr	r2, [pc, #140]	@ (8003968 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d10f      	bne.n	8003900 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80038e0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80038e4:	f7ff feec 	bl	80036c0 <LL_ADC_IsEnabled>
 80038e8:	4604      	mov	r4, r0
 80038ea:	481f      	ldr	r0, [pc, #124]	@ (8003968 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038ec:	f7ff fee8 	bl	80036c0 <LL_ADC_IsEnabled>
 80038f0:	4603      	mov	r3, r0
 80038f2:	4323      	orrs	r3, r4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	bf0c      	ite	eq
 80038f8:	2301      	moveq	r3, #1
 80038fa:	2300      	movne	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	e012      	b.n	8003926 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003900:	481a      	ldr	r0, [pc, #104]	@ (800396c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003902:	f7ff fedd 	bl	80036c0 <LL_ADC_IsEnabled>
 8003906:	4604      	mov	r4, r0
 8003908:	4819      	ldr	r0, [pc, #100]	@ (8003970 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800390a:	f7ff fed9 	bl	80036c0 <LL_ADC_IsEnabled>
 800390e:	4603      	mov	r3, r0
 8003910:	431c      	orrs	r4, r3
 8003912:	481a      	ldr	r0, [pc, #104]	@ (800397c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003914:	f7ff fed4 	bl	80036c0 <LL_ADC_IsEnabled>
 8003918:	4603      	mov	r3, r0
 800391a:	4323      	orrs	r3, r4
 800391c:	2b00      	cmp	r3, #0
 800391e:	bf0c      	ite	eq
 8003920:	2301      	moveq	r3, #1
 8003922:	2300      	movne	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d012      	beq.n	8003950 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800392a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003932:	f023 030f 	bic.w	r3, r3, #15
 8003936:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003938:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800393a:	e009      	b.n	8003950 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003940:	f043 0220 	orr.w	r2, r3, #32
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800394e:	e000      	b.n	8003952 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003950:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800395a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800395e:	4618      	mov	r0, r3
 8003960:	3784      	adds	r7, #132	@ 0x84
 8003962:	46bd      	mov	sp, r7
 8003964:	bd90      	pop	{r4, r7, pc}
 8003966:	bf00      	nop
 8003968:	50000100 	.word	0x50000100
 800396c:	50000400 	.word	0x50000400
 8003970:	50000500 	.word	0x50000500
 8003974:	50000300 	.word	0x50000300
 8003978:	50000700 	.word	0x50000700
 800397c:	50000600 	.word	0x50000600

08003980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003990:	4b0c      	ldr	r3, [pc, #48]	@ (80039c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800399c:	4013      	ands	r3, r2
 800399e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039b2:	4a04      	ldr	r2, [pc, #16]	@ (80039c4 <__NVIC_SetPriorityGrouping+0x44>)
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	60d3      	str	r3, [r2, #12]
}
 80039b8:	bf00      	nop
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039cc:	4b04      	ldr	r3, [pc, #16]	@ (80039e0 <__NVIC_GetPriorityGrouping+0x18>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	0a1b      	lsrs	r3, r3, #8
 80039d2:	f003 0307 	and.w	r3, r3, #7
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	e000ed00 	.word	0xe000ed00

080039e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	db0b      	blt.n	8003a0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039f6:	79fb      	ldrb	r3, [r7, #7]
 80039f8:	f003 021f 	and.w	r2, r3, #31
 80039fc:	4907      	ldr	r1, [pc, #28]	@ (8003a1c <__NVIC_EnableIRQ+0x38>)
 80039fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	2001      	movs	r0, #1
 8003a06:	fa00 f202 	lsl.w	r2, r0, r2
 8003a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	e000e100 	.word	0xe000e100

08003a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	6039      	str	r1, [r7, #0]
 8003a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	db0a      	blt.n	8003a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	490c      	ldr	r1, [pc, #48]	@ (8003a6c <__NVIC_SetPriority+0x4c>)
 8003a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3e:	0112      	lsls	r2, r2, #4
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	440b      	add	r3, r1
 8003a44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a48:	e00a      	b.n	8003a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	4908      	ldr	r1, [pc, #32]	@ (8003a70 <__NVIC_SetPriority+0x50>)
 8003a50:	79fb      	ldrb	r3, [r7, #7]
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	3b04      	subs	r3, #4
 8003a58:	0112      	lsls	r2, r2, #4
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	761a      	strb	r2, [r3, #24]
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	e000e100 	.word	0xe000e100
 8003a70:	e000ed00 	.word	0xe000ed00

08003a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b089      	sub	sp, #36	@ 0x24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f1c3 0307 	rsb	r3, r3, #7
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	bf28      	it	cs
 8003a92:	2304      	movcs	r3, #4
 8003a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	2b06      	cmp	r3, #6
 8003a9c:	d902      	bls.n	8003aa4 <NVIC_EncodePriority+0x30>
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	3b03      	subs	r3, #3
 8003aa2:	e000      	b.n	8003aa6 <NVIC_EncodePriority+0x32>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43da      	mvns	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	401a      	ands	r2, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003abc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac6:	43d9      	mvns	r1, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003acc:	4313      	orrs	r3, r2
         );
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3724      	adds	r7, #36	@ 0x24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff ff4c 	bl	8003980 <__NVIC_SetPriorityGrouping>
}
 8003ae8:	bf00      	nop
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003afe:	f7ff ff63 	bl	80039c8 <__NVIC_GetPriorityGrouping>
 8003b02:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	68b9      	ldr	r1, [r7, #8]
 8003b08:	6978      	ldr	r0, [r7, #20]
 8003b0a:	f7ff ffb3 	bl	8003a74 <NVIC_EncodePriority>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b14:	4611      	mov	r1, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7ff ff82 	bl	8003a20 <__NVIC_SetPriority>
}
 8003b1c:	bf00      	nop
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff ff56 	bl	80039e4 <__NVIC_EnableIRQ>
}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e08d      	b.n	8003c6e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	4b47      	ldr	r3, [pc, #284]	@ (8003c78 <HAL_DMA_Init+0x138>)
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d80f      	bhi.n	8003b7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	4b45      	ldr	r3, [pc, #276]	@ (8003c7c <HAL_DMA_Init+0x13c>)
 8003b66:	4413      	add	r3, r2
 8003b68:	4a45      	ldr	r2, [pc, #276]	@ (8003c80 <HAL_DMA_Init+0x140>)
 8003b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6e:	091b      	lsrs	r3, r3, #4
 8003b70:	009a      	lsls	r2, r3, #2
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a42      	ldr	r2, [pc, #264]	@ (8003c84 <HAL_DMA_Init+0x144>)
 8003b7a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b7c:	e00e      	b.n	8003b9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	4b40      	ldr	r3, [pc, #256]	@ (8003c88 <HAL_DMA_Init+0x148>)
 8003b86:	4413      	add	r3, r2
 8003b88:	4a3d      	ldr	r2, [pc, #244]	@ (8003c80 <HAL_DMA_Init+0x140>)
 8003b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8e:	091b      	lsrs	r3, r3, #4
 8003b90:	009a      	lsls	r2, r3, #2
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a3c      	ldr	r2, [pc, #240]	@ (8003c8c <HAL_DMA_Init+0x14c>)
 8003b9a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003bc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fa82 	bl	80040f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bfc:	d102      	bne.n	8003c04 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c18:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d010      	beq.n	8003c44 <HAL_DMA_Init+0x104>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d80c      	bhi.n	8003c44 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 faa2 	bl	8004174 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c40:	605a      	str	r2, [r3, #4]
 8003c42:	e008      	b.n	8003c56 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40020407 	.word	0x40020407
 8003c7c:	bffdfff8 	.word	0xbffdfff8
 8003c80:	cccccccd 	.word	0xcccccccd
 8003c84:	40020000 	.word	0x40020000
 8003c88:	bffdfbf8 	.word	0xbffdfbf8
 8003c8c:	40020400 	.word	0x40020400

08003c90 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_DMA_Start_IT+0x20>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e066      	b.n	8003d7e <HAL_DMA_Start_IT+0xee>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d155      	bne.n	8003d70 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0201 	bic.w	r2, r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	68b9      	ldr	r1, [r7, #8]
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 f9c7 	bl	800407c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d008      	beq.n	8003d08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f042 020e 	orr.w	r2, r2, #14
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	e00f      	b.n	8003d28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0204 	bic.w	r2, r2, #4
 8003d16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 020a 	orr.w	r2, r2, #10
 8003d26:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d007      	beq.n	8003d46 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d44:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d007      	beq.n	8003d5e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d5c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f042 0201 	orr.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	e005      	b.n	8003d7c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d78:	2302      	movs	r3, #2
 8003d7a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3718      	adds	r7, #24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b085      	sub	sp, #20
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d005      	beq.n	8003daa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2204      	movs	r2, #4
 8003da2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	73fb      	strb	r3, [r7, #15]
 8003da8:	e037      	b.n	8003e1a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 020e 	bic.w	r2, r2, #14
 8003db8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dc8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0201 	bic.w	r2, r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dde:	f003 021f 	and.w	r2, r3, #31
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de6:	2101      	movs	r1, #1
 8003de8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dec:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003df6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00c      	beq.n	8003e1a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e0a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e0e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e18:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d00d      	beq.n	8003e6c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2204      	movs	r2, #4
 8003e54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	73fb      	strb	r3, [r7, #15]
 8003e6a:	e047      	b.n	8003efc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 020e 	bic.w	r2, r2, #14
 8003e7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0201 	bic.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea0:	f003 021f 	and.w	r2, r3, #31
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8003eae:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003eb8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00c      	beq.n	8003edc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ecc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ed0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003eda:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	4798      	blx	r3
    }
  }
  return status;
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b084      	sub	sp, #16
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f22:	f003 031f 	and.w	r3, r3, #31
 8003f26:	2204      	movs	r2, #4
 8003f28:	409a      	lsls	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d026      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x7a>
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d021      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0320 	and.w	r3, r3, #32
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d107      	bne.n	8003f5a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0204 	bic.w	r2, r2, #4
 8003f58:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5e:	f003 021f 	and.w	r2, r3, #31
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f66:	2104      	movs	r1, #4
 8003f68:	fa01 f202 	lsl.w	r2, r1, r2
 8003f6c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d071      	beq.n	800405a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003f7e:	e06c      	b.n	800405a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f84:	f003 031f 	and.w	r3, r3, #31
 8003f88:	2202      	movs	r2, #2
 8003f8a:	409a      	lsls	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d02e      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d029      	beq.n	8003ff2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10b      	bne.n	8003fc4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 020a 	bic.w	r2, r2, #10
 8003fba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc8:	f003 021f 	and.w	r2, r3, #31
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd0:	2102      	movs	r1, #2
 8003fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d038      	beq.n	800405a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003ff0:	e033      	b.n	800405a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff6:	f003 031f 	and.w	r3, r3, #31
 8003ffa:	2208      	movs	r2, #8
 8003ffc:	409a      	lsls	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4013      	ands	r3, r2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d02a      	beq.n	800405c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d025      	beq.n	800405c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 020e 	bic.w	r2, r2, #14
 800401e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004024:	f003 021f 	and.w	r2, r3, #31
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402c:	2101      	movs	r1, #1
 800402e:	fa01 f202 	lsl.w	r2, r1, r2
 8004032:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800404e:	2b00      	cmp	r3, #0
 8004050:	d004      	beq.n	800405c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800405a:	bf00      	nop
 800405c:	bf00      	nop
}
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004070:	4618      	mov	r0, r3
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
 8004088:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004092:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004098:	2b00      	cmp	r3, #0
 800409a:	d004      	beq.n	80040a6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80040a4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040aa:	f003 021f 	and.w	r2, r3, #31
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b2:	2101      	movs	r1, #1
 80040b4:	fa01 f202 	lsl.w	r2, r1, r2
 80040b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2b10      	cmp	r3, #16
 80040c8:	d108      	bne.n	80040dc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80040da:	e007      	b.n	80040ec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	60da      	str	r2, [r3, #12]
}
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	4b16      	ldr	r3, [pc, #88]	@ (8004160 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004108:	429a      	cmp	r2, r3
 800410a:	d802      	bhi.n	8004112 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800410c:	4b15      	ldr	r3, [pc, #84]	@ (8004164 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	e001      	b.n	8004116 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004112:	4b15      	ldr	r3, [pc, #84]	@ (8004168 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004114:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	3b08      	subs	r3, #8
 8004122:	4a12      	ldr	r2, [pc, #72]	@ (800416c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004124:	fba2 2303 	umull	r2, r3, r2, r3
 8004128:	091b      	lsrs	r3, r3, #4
 800412a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004130:	089b      	lsrs	r3, r3, #2
 8004132:	009a      	lsls	r2, r3, #2
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	4413      	add	r3, r2
 8004138:	461a      	mov	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a0b      	ldr	r2, [pc, #44]	@ (8004170 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004142:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f003 031f 	and.w	r3, r3, #31
 800414a:	2201      	movs	r2, #1
 800414c:	409a      	lsls	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004152:	bf00      	nop
 8004154:	371c      	adds	r7, #28
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40020407 	.word	0x40020407
 8004164:	40020800 	.word	0x40020800
 8004168:	40020820 	.word	0x40020820
 800416c:	cccccccd 	.word	0xcccccccd
 8004170:	40020880 	.word	0x40020880

08004174 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	4b0b      	ldr	r3, [pc, #44]	@ (80041b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004188:	4413      	add	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	461a      	mov	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a08      	ldr	r2, [pc, #32]	@ (80041b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004196:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	3b01      	subs	r3, #1
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	2201      	movs	r2, #1
 80041a2:	409a      	lsls	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80041a8:	bf00      	nop
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	1000823f 	.word	0x1000823f
 80041b8:	40020940 	.word	0x40020940

080041bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041ca:	e15a      	b.n	8004482 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	2101      	movs	r1, #1
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	fa01 f303 	lsl.w	r3, r1, r3
 80041d8:	4013      	ands	r3, r2
 80041da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 814c 	beq.w	800447c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f003 0303 	and.w	r3, r3, #3
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d005      	beq.n	80041fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d130      	bne.n	800425e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	2203      	movs	r2, #3
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	43db      	mvns	r3, r3
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4013      	ands	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004232:	2201      	movs	r2, #1
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	43db      	mvns	r3, r3
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4013      	ands	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	091b      	lsrs	r3, r3, #4
 8004248:	f003 0201 	and.w	r2, r3, #1
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	2b03      	cmp	r3, #3
 8004268:	d017      	beq.n	800429a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	2203      	movs	r2, #3
 8004276:	fa02 f303 	lsl.w	r3, r2, r3
 800427a:	43db      	mvns	r3, r3
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4013      	ands	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d123      	bne.n	80042ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	08da      	lsrs	r2, r3, #3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3208      	adds	r2, #8
 80042ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f003 0307 	and.w	r3, r3, #7
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	220f      	movs	r2, #15
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	43db      	mvns	r3, r3
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4013      	ands	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	691a      	ldr	r2, [r3, #16]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	08da      	lsrs	r2, r3, #3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3208      	adds	r2, #8
 80042e8:	6939      	ldr	r1, [r7, #16]
 80042ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	2203      	movs	r2, #3
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	43db      	mvns	r3, r3
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4013      	ands	r3, r2
 8004304:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f003 0203 	and.w	r2, r3, #3
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	fa02 f303 	lsl.w	r3, r2, r3
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4313      	orrs	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 80a6 	beq.w	800447c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004330:	4b5b      	ldr	r3, [pc, #364]	@ (80044a0 <HAL_GPIO_Init+0x2e4>)
 8004332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004334:	4a5a      	ldr	r2, [pc, #360]	@ (80044a0 <HAL_GPIO_Init+0x2e4>)
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	6613      	str	r3, [r2, #96]	@ 0x60
 800433c:	4b58      	ldr	r3, [pc, #352]	@ (80044a0 <HAL_GPIO_Init+0x2e4>)
 800433e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004348:	4a56      	ldr	r2, [pc, #344]	@ (80044a4 <HAL_GPIO_Init+0x2e8>)
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	089b      	lsrs	r3, r3, #2
 800434e:	3302      	adds	r3, #2
 8004350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004354:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f003 0303 	and.w	r3, r3, #3
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	220f      	movs	r2, #15
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	43db      	mvns	r3, r3
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4013      	ands	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004372:	d01f      	beq.n	80043b4 <HAL_GPIO_Init+0x1f8>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a4c      	ldr	r2, [pc, #304]	@ (80044a8 <HAL_GPIO_Init+0x2ec>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d019      	beq.n	80043b0 <HAL_GPIO_Init+0x1f4>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a4b      	ldr	r2, [pc, #300]	@ (80044ac <HAL_GPIO_Init+0x2f0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d013      	beq.n	80043ac <HAL_GPIO_Init+0x1f0>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a4a      	ldr	r2, [pc, #296]	@ (80044b0 <HAL_GPIO_Init+0x2f4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d00d      	beq.n	80043a8 <HAL_GPIO_Init+0x1ec>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a49      	ldr	r2, [pc, #292]	@ (80044b4 <HAL_GPIO_Init+0x2f8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d007      	beq.n	80043a4 <HAL_GPIO_Init+0x1e8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a48      	ldr	r2, [pc, #288]	@ (80044b8 <HAL_GPIO_Init+0x2fc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d101      	bne.n	80043a0 <HAL_GPIO_Init+0x1e4>
 800439c:	2305      	movs	r3, #5
 800439e:	e00a      	b.n	80043b6 <HAL_GPIO_Init+0x1fa>
 80043a0:	2306      	movs	r3, #6
 80043a2:	e008      	b.n	80043b6 <HAL_GPIO_Init+0x1fa>
 80043a4:	2304      	movs	r3, #4
 80043a6:	e006      	b.n	80043b6 <HAL_GPIO_Init+0x1fa>
 80043a8:	2303      	movs	r3, #3
 80043aa:	e004      	b.n	80043b6 <HAL_GPIO_Init+0x1fa>
 80043ac:	2302      	movs	r3, #2
 80043ae:	e002      	b.n	80043b6 <HAL_GPIO_Init+0x1fa>
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <HAL_GPIO_Init+0x1fa>
 80043b4:	2300      	movs	r3, #0
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	f002 0203 	and.w	r2, r2, #3
 80043bc:	0092      	lsls	r2, r2, #2
 80043be:	4093      	lsls	r3, r2
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043c6:	4937      	ldr	r1, [pc, #220]	@ (80044a4 <HAL_GPIO_Init+0x2e8>)
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	089b      	lsrs	r3, r3, #2
 80043cc:	3302      	adds	r3, #2
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043d4:	4b39      	ldr	r3, [pc, #228]	@ (80044bc <HAL_GPIO_Init+0x300>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	43db      	mvns	r3, r3
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4013      	ands	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80043f8:	4a30      	ldr	r2, [pc, #192]	@ (80044bc <HAL_GPIO_Init+0x300>)
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80043fe:	4b2f      	ldr	r3, [pc, #188]	@ (80044bc <HAL_GPIO_Init+0x300>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	43db      	mvns	r3, r3
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4013      	ands	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4313      	orrs	r3, r2
 8004420:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004422:	4a26      	ldr	r2, [pc, #152]	@ (80044bc <HAL_GPIO_Init+0x300>)
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004428:	4b24      	ldr	r3, [pc, #144]	@ (80044bc <HAL_GPIO_Init+0x300>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	43db      	mvns	r3, r3
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4013      	ands	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800444c:	4a1b      	ldr	r2, [pc, #108]	@ (80044bc <HAL_GPIO_Init+0x300>)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004452:	4b1a      	ldr	r3, [pc, #104]	@ (80044bc <HAL_GPIO_Init+0x300>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	43db      	mvns	r3, r3
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4013      	ands	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004476:	4a11      	ldr	r2, [pc, #68]	@ (80044bc <HAL_GPIO_Init+0x300>)
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	3301      	adds	r3, #1
 8004480:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	fa22 f303 	lsr.w	r3, r2, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	f47f ae9d 	bne.w	80041cc <HAL_GPIO_Init+0x10>
  }
}
 8004492:	bf00      	nop
 8004494:	bf00      	nop
 8004496:	371c      	adds	r7, #28
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	40021000 	.word	0x40021000
 80044a4:	40010000 	.word	0x40010000
 80044a8:	48000400 	.word	0x48000400
 80044ac:	48000800 	.word	0x48000800
 80044b0:	48000c00 	.word	0x48000c00
 80044b4:	48001000 	.word	0x48001000
 80044b8:	48001400 	.word	0x48001400
 80044bc:	40010400 	.word	0x40010400

080044c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	460b      	mov	r3, r1
 80044ca:	807b      	strh	r3, [r7, #2]
 80044cc:	4613      	mov	r3, r2
 80044ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044d0:	787b      	ldrb	r3, [r7, #1]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044d6:	887a      	ldrh	r2, [r7, #2]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044dc:	e002      	b.n	80044e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044de:	887a      	ldrh	r2, [r7, #2]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80044fa:	4b08      	ldr	r3, [pc, #32]	@ (800451c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044fc:	695a      	ldr	r2, [r3, #20]
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	4013      	ands	r3, r2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d006      	beq.n	8004514 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004506:	4a05      	ldr	r2, [pc, #20]	@ (800451c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004508:	88fb      	ldrh	r3, [r7, #6]
 800450a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800450c:	88fb      	ldrh	r3, [r7, #6]
 800450e:	4618      	mov	r0, r3
 8004510:	f000 f806 	bl	8004520 <HAL_GPIO_EXTI_Callback>
  }
}
 8004514:	bf00      	nop
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40010400 	.word	0x40010400

08004520 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	4603      	mov	r3, r0
 8004528:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
	...

08004538 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d141      	bne.n	80045ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004546:	4b4b      	ldr	r3, [pc, #300]	@ (8004674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800454e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004552:	d131      	bne.n	80045b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004554:	4b47      	ldr	r3, [pc, #284]	@ (8004674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800455a:	4a46      	ldr	r2, [pc, #280]	@ (8004674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800455c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004560:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004564:	4b43      	ldr	r3, [pc, #268]	@ (8004674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800456c:	4a41      	ldr	r2, [pc, #260]	@ (8004674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800456e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004572:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004574:	4b40      	ldr	r3, [pc, #256]	@ (8004678 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2232      	movs	r2, #50	@ 0x32
 800457a:	fb02 f303 	mul.w	r3, r2, r3
 800457e:	4a3f      	ldr	r2, [pc, #252]	@ (800467c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004580:	fba2 2303 	umull	r2, r3, r2, r3
 8004584:	0c9b      	lsrs	r3, r3, #18
 8004586:	3301      	adds	r3, #1
 8004588:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800458a:	e002      	b.n	8004592 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3b01      	subs	r3, #1
 8004590:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004592:	4b38      	ldr	r3, [pc, #224]	@ (8004674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800459a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800459e:	d102      	bne.n	80045a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1f2      	bne.n	800458c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045a6:	4b33      	ldr	r3, [pc, #204]	@ (8004674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045b2:	d158      	bne.n	8004666 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e057      	b.n	8004668 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045b8:	4b2e      	ldr	r3, [pc, #184]	@ (8004674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045be:	4a2d      	ldr	r2, [pc, #180]	@ (8004674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80045c8:	e04d      	b.n	8004666 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045d0:	d141      	bne.n	8004656 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045d2:	4b28      	ldr	r3, [pc, #160]	@ (8004674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80045da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045de:	d131      	bne.n	8004644 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045e0:	4b24      	ldr	r3, [pc, #144]	@ (8004674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045e6:	4a23      	ldr	r2, [pc, #140]	@ (8004674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045f0:	4b20      	ldr	r3, [pc, #128]	@ (8004674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045f8:	4a1e      	ldr	r2, [pc, #120]	@ (8004674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004600:	4b1d      	ldr	r3, [pc, #116]	@ (8004678 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2232      	movs	r2, #50	@ 0x32
 8004606:	fb02 f303 	mul.w	r3, r2, r3
 800460a:	4a1c      	ldr	r2, [pc, #112]	@ (800467c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800460c:	fba2 2303 	umull	r2, r3, r2, r3
 8004610:	0c9b      	lsrs	r3, r3, #18
 8004612:	3301      	adds	r3, #1
 8004614:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004616:	e002      	b.n	800461e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	3b01      	subs	r3, #1
 800461c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800461e:	4b15      	ldr	r3, [pc, #84]	@ (8004674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800462a:	d102      	bne.n	8004632 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f2      	bne.n	8004618 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004632:	4b10      	ldr	r3, [pc, #64]	@ (8004674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800463a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800463e:	d112      	bne.n	8004666 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e011      	b.n	8004668 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004644:	4b0b      	ldr	r3, [pc, #44]	@ (8004674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800464a:	4a0a      	ldr	r2, [pc, #40]	@ (8004674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800464c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004650:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004654:	e007      	b.n	8004666 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004656:	4b07      	ldr	r3, [pc, #28]	@ (8004674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800465e:	4a05      	ldr	r2, [pc, #20]	@ (8004674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004660:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004664:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	40007000 	.word	0x40007000
 8004678:	20000004 	.word	0x20000004
 800467c:	431bde83 	.word	0x431bde83

08004680 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004684:	4b05      	ldr	r3, [pc, #20]	@ (800469c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	4a04      	ldr	r2, [pc, #16]	@ (800469c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800468a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800468e:	6093      	str	r3, [r2, #8]
}
 8004690:	bf00      	nop
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40007000 	.word	0x40007000

080046a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b088      	sub	sp, #32
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e2fe      	b.n	8004cb0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d075      	beq.n	80047aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046be:	4b97      	ldr	r3, [pc, #604]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 030c 	and.w	r3, r3, #12
 80046c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046c8:	4b94      	ldr	r3, [pc, #592]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f003 0303 	and.w	r3, r3, #3
 80046d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	2b0c      	cmp	r3, #12
 80046d6:	d102      	bne.n	80046de <HAL_RCC_OscConfig+0x3e>
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d002      	beq.n	80046e4 <HAL_RCC_OscConfig+0x44>
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d10b      	bne.n	80046fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e4:	4b8d      	ldr	r3, [pc, #564]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d05b      	beq.n	80047a8 <HAL_RCC_OscConfig+0x108>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d157      	bne.n	80047a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e2d9      	b.n	8004cb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004704:	d106      	bne.n	8004714 <HAL_RCC_OscConfig+0x74>
 8004706:	4b85      	ldr	r3, [pc, #532]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a84      	ldr	r2, [pc, #528]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 800470c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	e01d      	b.n	8004750 <HAL_RCC_OscConfig+0xb0>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800471c:	d10c      	bne.n	8004738 <HAL_RCC_OscConfig+0x98>
 800471e:	4b7f      	ldr	r3, [pc, #508]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a7e      	ldr	r2, [pc, #504]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 8004724:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	4b7c      	ldr	r3, [pc, #496]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a7b      	ldr	r2, [pc, #492]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 8004730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	e00b      	b.n	8004750 <HAL_RCC_OscConfig+0xb0>
 8004738:	4b78      	ldr	r3, [pc, #480]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a77      	ldr	r2, [pc, #476]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 800473e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	4b75      	ldr	r3, [pc, #468]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a74      	ldr	r2, [pc, #464]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 800474a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800474e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d013      	beq.n	8004780 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004758:	f7fd fd14 	bl	8002184 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004760:	f7fd fd10 	bl	8002184 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b64      	cmp	r3, #100	@ 0x64
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e29e      	b.n	8004cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004772:	4b6a      	ldr	r3, [pc, #424]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0f0      	beq.n	8004760 <HAL_RCC_OscConfig+0xc0>
 800477e:	e014      	b.n	80047aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004780:	f7fd fd00 	bl	8002184 <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004788:	f7fd fcfc 	bl	8002184 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b64      	cmp	r3, #100	@ 0x64
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e28a      	b.n	8004cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800479a:	4b60      	ldr	r3, [pc, #384]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f0      	bne.n	8004788 <HAL_RCC_OscConfig+0xe8>
 80047a6:	e000      	b.n	80047aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d075      	beq.n	80048a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047b6:	4b59      	ldr	r3, [pc, #356]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 030c 	and.w	r3, r3, #12
 80047be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047c0:	4b56      	ldr	r3, [pc, #344]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f003 0303 	and.w	r3, r3, #3
 80047c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	2b0c      	cmp	r3, #12
 80047ce:	d102      	bne.n	80047d6 <HAL_RCC_OscConfig+0x136>
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d002      	beq.n	80047dc <HAL_RCC_OscConfig+0x13c>
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d11f      	bne.n	800481c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047dc:	4b4f      	ldr	r3, [pc, #316]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <HAL_RCC_OscConfig+0x154>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e25d      	b.n	8004cb0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f4:	4b49      	ldr	r3, [pc, #292]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	061b      	lsls	r3, r3, #24
 8004802:	4946      	ldr	r1, [pc, #280]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 8004804:	4313      	orrs	r3, r2
 8004806:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004808:	4b45      	ldr	r3, [pc, #276]	@ (8004920 <HAL_RCC_OscConfig+0x280>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f7fd f9b9 	bl	8001b84 <HAL_InitTick>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d043      	beq.n	80048a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e249      	b.n	8004cb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d023      	beq.n	800486c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004824:	4b3d      	ldr	r3, [pc, #244]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a3c      	ldr	r2, [pc, #240]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 800482a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800482e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004830:	f7fd fca8 	bl	8002184 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004838:	f7fd fca4 	bl	8002184 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e232      	b.n	8004cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800484a:	4b34      	ldr	r3, [pc, #208]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f0      	beq.n	8004838 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004856:	4b31      	ldr	r3, [pc, #196]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	061b      	lsls	r3, r3, #24
 8004864:	492d      	ldr	r1, [pc, #180]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 8004866:	4313      	orrs	r3, r2
 8004868:	604b      	str	r3, [r1, #4]
 800486a:	e01a      	b.n	80048a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800486c:	4b2b      	ldr	r3, [pc, #172]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a2a      	ldr	r2, [pc, #168]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 8004872:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fd fc84 	bl	8002184 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004880:	f7fd fc80 	bl	8002184 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e20e      	b.n	8004cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004892:	4b22      	ldr	r3, [pc, #136]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f0      	bne.n	8004880 <HAL_RCC_OscConfig+0x1e0>
 800489e:	e000      	b.n	80048a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d041      	beq.n	8004932 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d01c      	beq.n	80048f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048b6:	4b19      	ldr	r3, [pc, #100]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 80048b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048bc:	4a17      	ldr	r2, [pc, #92]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 80048be:	f043 0301 	orr.w	r3, r3, #1
 80048c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c6:	f7fd fc5d 	bl	8002184 <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ce:	f7fd fc59 	bl	8002184 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e1e7      	b.n	8004cb0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048e0:	4b0e      	ldr	r3, [pc, #56]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 80048e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0ef      	beq.n	80048ce <HAL_RCC_OscConfig+0x22e>
 80048ee:	e020      	b.n	8004932 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048f0:	4b0a      	ldr	r3, [pc, #40]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 80048f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048f6:	4a09      	ldr	r2, [pc, #36]	@ (800491c <HAL_RCC_OscConfig+0x27c>)
 80048f8:	f023 0301 	bic.w	r3, r3, #1
 80048fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004900:	f7fd fc40 	bl	8002184 <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004906:	e00d      	b.n	8004924 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004908:	f7fd fc3c 	bl	8002184 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d906      	bls.n	8004924 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e1ca      	b.n	8004cb0 <HAL_RCC_OscConfig+0x610>
 800491a:	bf00      	nop
 800491c:	40021000 	.word	0x40021000
 8004920:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004924:	4b8c      	ldr	r3, [pc, #560]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 8004926:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1ea      	bne.n	8004908 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 80a6 	beq.w	8004a8c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004940:	2300      	movs	r3, #0
 8004942:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004944:	4b84      	ldr	r3, [pc, #528]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 8004946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_RCC_OscConfig+0x2b4>
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <HAL_RCC_OscConfig+0x2b6>
 8004954:	2300      	movs	r3, #0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00d      	beq.n	8004976 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800495a:	4b7f      	ldr	r3, [pc, #508]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 800495c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800495e:	4a7e      	ldr	r2, [pc, #504]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 8004960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004964:	6593      	str	r3, [r2, #88]	@ 0x58
 8004966:	4b7c      	ldr	r3, [pc, #496]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 8004968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800496a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004972:	2301      	movs	r3, #1
 8004974:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004976:	4b79      	ldr	r3, [pc, #484]	@ (8004b5c <HAL_RCC_OscConfig+0x4bc>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497e:	2b00      	cmp	r3, #0
 8004980:	d118      	bne.n	80049b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004982:	4b76      	ldr	r3, [pc, #472]	@ (8004b5c <HAL_RCC_OscConfig+0x4bc>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a75      	ldr	r2, [pc, #468]	@ (8004b5c <HAL_RCC_OscConfig+0x4bc>)
 8004988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800498c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800498e:	f7fd fbf9 	bl	8002184 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004996:	f7fd fbf5 	bl	8002184 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e183      	b.n	8004cb0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049a8:	4b6c      	ldr	r3, [pc, #432]	@ (8004b5c <HAL_RCC_OscConfig+0x4bc>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0f0      	beq.n	8004996 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d108      	bne.n	80049ce <HAL_RCC_OscConfig+0x32e>
 80049bc:	4b66      	ldr	r3, [pc, #408]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c2:	4a65      	ldr	r2, [pc, #404]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049cc:	e024      	b.n	8004a18 <HAL_RCC_OscConfig+0x378>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2b05      	cmp	r3, #5
 80049d4:	d110      	bne.n	80049f8 <HAL_RCC_OscConfig+0x358>
 80049d6:	4b60      	ldr	r3, [pc, #384]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049dc:	4a5e      	ldr	r2, [pc, #376]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 80049de:	f043 0304 	orr.w	r3, r3, #4
 80049e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049e6:	4b5c      	ldr	r3, [pc, #368]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 80049e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ec:	4a5a      	ldr	r2, [pc, #360]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 80049ee:	f043 0301 	orr.w	r3, r3, #1
 80049f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049f6:	e00f      	b.n	8004a18 <HAL_RCC_OscConfig+0x378>
 80049f8:	4b57      	ldr	r3, [pc, #348]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 80049fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049fe:	4a56      	ldr	r2, [pc, #344]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 8004a00:	f023 0301 	bic.w	r3, r3, #1
 8004a04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a08:	4b53      	ldr	r3, [pc, #332]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 8004a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a0e:	4a52      	ldr	r2, [pc, #328]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 8004a10:	f023 0304 	bic.w	r3, r3, #4
 8004a14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d016      	beq.n	8004a4e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a20:	f7fd fbb0 	bl	8002184 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a26:	e00a      	b.n	8004a3e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a28:	f7fd fbac 	bl	8002184 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e138      	b.n	8004cb0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a3e:	4b46      	ldr	r3, [pc, #280]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 8004a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0ed      	beq.n	8004a28 <HAL_RCC_OscConfig+0x388>
 8004a4c:	e015      	b.n	8004a7a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4e:	f7fd fb99 	bl	8002184 <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a54:	e00a      	b.n	8004a6c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a56:	f7fd fb95 	bl	8002184 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e121      	b.n	8004cb0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a6c:	4b3a      	ldr	r3, [pc, #232]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 8004a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1ed      	bne.n	8004a56 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a7a:	7ffb      	ldrb	r3, [r7, #31]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d105      	bne.n	8004a8c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a80:	4b35      	ldr	r3, [pc, #212]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 8004a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a84:	4a34      	ldr	r2, [pc, #208]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 8004a86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a8a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d03c      	beq.n	8004b12 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d01c      	beq.n	8004ada <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004aa0:	4b2d      	ldr	r3, [pc, #180]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 8004aa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004aa6:	4a2c      	ldr	r2, [pc, #176]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 8004aa8:	f043 0301 	orr.w	r3, r3, #1
 8004aac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab0:	f7fd fb68 	bl	8002184 <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ab6:	e008      	b.n	8004aca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ab8:	f7fd fb64 	bl	8002184 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e0f2      	b.n	8004cb0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004aca:	4b23      	ldr	r3, [pc, #140]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 8004acc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0ef      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x418>
 8004ad8:	e01b      	b.n	8004b12 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ada:	4b1f      	ldr	r3, [pc, #124]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 8004adc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 8004ae2:	f023 0301 	bic.w	r3, r3, #1
 8004ae6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aea:	f7fd fb4b 	bl	8002184 <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004af2:	f7fd fb47 	bl	8002184 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e0d5      	b.n	8004cb0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b04:	4b14      	ldr	r3, [pc, #80]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 8004b06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1ef      	bne.n	8004af2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 80c9 	beq.w	8004cae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 030c 	and.w	r3, r3, #12
 8004b24:	2b0c      	cmp	r3, #12
 8004b26:	f000 8083 	beq.w	8004c30 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d15e      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b32:	4b09      	ldr	r3, [pc, #36]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a08      	ldr	r2, [pc, #32]	@ (8004b58 <HAL_RCC_OscConfig+0x4b8>)
 8004b38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fd fb21 	bl	8002184 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b44:	e00c      	b.n	8004b60 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b46:	f7fd fb1d 	bl	8002184 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d905      	bls.n	8004b60 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e0ab      	b.n	8004cb0 <HAL_RCC_OscConfig+0x610>
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b60:	4b55      	ldr	r3, [pc, #340]	@ (8004cb8 <HAL_RCC_OscConfig+0x618>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1ec      	bne.n	8004b46 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b6c:	4b52      	ldr	r3, [pc, #328]	@ (8004cb8 <HAL_RCC_OscConfig+0x618>)
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	4b52      	ldr	r3, [pc, #328]	@ (8004cbc <HAL_RCC_OscConfig+0x61c>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6a11      	ldr	r1, [r2, #32]
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b7c:	3a01      	subs	r2, #1
 8004b7e:	0112      	lsls	r2, r2, #4
 8004b80:	4311      	orrs	r1, r2
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004b86:	0212      	lsls	r2, r2, #8
 8004b88:	4311      	orrs	r1, r2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b8e:	0852      	lsrs	r2, r2, #1
 8004b90:	3a01      	subs	r2, #1
 8004b92:	0552      	lsls	r2, r2, #21
 8004b94:	4311      	orrs	r1, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b9a:	0852      	lsrs	r2, r2, #1
 8004b9c:	3a01      	subs	r2, #1
 8004b9e:	0652      	lsls	r2, r2, #25
 8004ba0:	4311      	orrs	r1, r2
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ba6:	06d2      	lsls	r2, r2, #27
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	4943      	ldr	r1, [pc, #268]	@ (8004cb8 <HAL_RCC_OscConfig+0x618>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bb0:	4b41      	ldr	r3, [pc, #260]	@ (8004cb8 <HAL_RCC_OscConfig+0x618>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a40      	ldr	r2, [pc, #256]	@ (8004cb8 <HAL_RCC_OscConfig+0x618>)
 8004bb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bbc:	4b3e      	ldr	r3, [pc, #248]	@ (8004cb8 <HAL_RCC_OscConfig+0x618>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	4a3d      	ldr	r2, [pc, #244]	@ (8004cb8 <HAL_RCC_OscConfig+0x618>)
 8004bc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bc6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc8:	f7fd fadc 	bl	8002184 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd0:	f7fd fad8 	bl	8002184 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e066      	b.n	8004cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be2:	4b35      	ldr	r3, [pc, #212]	@ (8004cb8 <HAL_RCC_OscConfig+0x618>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0f0      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x530>
 8004bee:	e05e      	b.n	8004cae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf0:	4b31      	ldr	r3, [pc, #196]	@ (8004cb8 <HAL_RCC_OscConfig+0x618>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a30      	ldr	r2, [pc, #192]	@ (8004cb8 <HAL_RCC_OscConfig+0x618>)
 8004bf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfc:	f7fd fac2 	bl	8002184 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c04:	f7fd fabe 	bl	8002184 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e04c      	b.n	8004cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c16:	4b28      	ldr	r3, [pc, #160]	@ (8004cb8 <HAL_RCC_OscConfig+0x618>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004c22:	4b25      	ldr	r3, [pc, #148]	@ (8004cb8 <HAL_RCC_OscConfig+0x618>)
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	4924      	ldr	r1, [pc, #144]	@ (8004cb8 <HAL_RCC_OscConfig+0x618>)
 8004c28:	4b25      	ldr	r3, [pc, #148]	@ (8004cc0 <HAL_RCC_OscConfig+0x620>)
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	60cb      	str	r3, [r1, #12]
 8004c2e:	e03e      	b.n	8004cae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d101      	bne.n	8004c3c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e039      	b.n	8004cb0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8004cb8 <HAL_RCC_OscConfig+0x618>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f003 0203 	and.w	r2, r3, #3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d12c      	bne.n	8004caa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d123      	bne.n	8004caa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d11b      	bne.n	8004caa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d113      	bne.n	8004caa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8c:	085b      	lsrs	r3, r3, #1
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d109      	bne.n	8004caa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca0:	085b      	lsrs	r3, r3, #1
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d001      	beq.n	8004cae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e000      	b.n	8004cb0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3720      	adds	r7, #32
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	019f800c 	.word	0x019f800c
 8004cc0:	feeefffc 	.word	0xfeeefffc

08004cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e11e      	b.n	8004f1a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cdc:	4b91      	ldr	r3, [pc, #580]	@ (8004f24 <HAL_RCC_ClockConfig+0x260>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 030f 	and.w	r3, r3, #15
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d910      	bls.n	8004d0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cea:	4b8e      	ldr	r3, [pc, #568]	@ (8004f24 <HAL_RCC_ClockConfig+0x260>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f023 020f 	bic.w	r2, r3, #15
 8004cf2:	498c      	ldr	r1, [pc, #560]	@ (8004f24 <HAL_RCC_ClockConfig+0x260>)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfa:	4b8a      	ldr	r3, [pc, #552]	@ (8004f24 <HAL_RCC_ClockConfig+0x260>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d001      	beq.n	8004d0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e106      	b.n	8004f1a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d073      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b03      	cmp	r3, #3
 8004d1e:	d129      	bne.n	8004d74 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d20:	4b81      	ldr	r3, [pc, #516]	@ (8004f28 <HAL_RCC_ClockConfig+0x264>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e0f4      	b.n	8004f1a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004d30:	f000 f9d0 	bl	80050d4 <RCC_GetSysClockFreqFromPLLSource>
 8004d34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	4a7c      	ldr	r2, [pc, #496]	@ (8004f2c <HAL_RCC_ClockConfig+0x268>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d93f      	bls.n	8004dbe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d3e:	4b7a      	ldr	r3, [pc, #488]	@ (8004f28 <HAL_RCC_ClockConfig+0x264>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d033      	beq.n	8004dbe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d12f      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d5e:	4b72      	ldr	r3, [pc, #456]	@ (8004f28 <HAL_RCC_ClockConfig+0x264>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d66:	4a70      	ldr	r2, [pc, #448]	@ (8004f28 <HAL_RCC_ClockConfig+0x264>)
 8004d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d6e:	2380      	movs	r3, #128	@ 0x80
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	e024      	b.n	8004dbe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d107      	bne.n	8004d8c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d7c:	4b6a      	ldr	r3, [pc, #424]	@ (8004f28 <HAL_RCC_ClockConfig+0x264>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d109      	bne.n	8004d9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e0c6      	b.n	8004f1a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d8c:	4b66      	ldr	r3, [pc, #408]	@ (8004f28 <HAL_RCC_ClockConfig+0x264>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e0be      	b.n	8004f1a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004d9c:	f000 f8ce 	bl	8004f3c <HAL_RCC_GetSysClockFreq>
 8004da0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	4a61      	ldr	r2, [pc, #388]	@ (8004f2c <HAL_RCC_ClockConfig+0x268>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d909      	bls.n	8004dbe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004daa:	4b5f      	ldr	r3, [pc, #380]	@ (8004f28 <HAL_RCC_ClockConfig+0x264>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004db2:	4a5d      	ldr	r2, [pc, #372]	@ (8004f28 <HAL_RCC_ClockConfig+0x264>)
 8004db4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004db8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004dba:	2380      	movs	r3, #128	@ 0x80
 8004dbc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004dbe:	4b5a      	ldr	r3, [pc, #360]	@ (8004f28 <HAL_RCC_ClockConfig+0x264>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f023 0203 	bic.w	r2, r3, #3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	4957      	ldr	r1, [pc, #348]	@ (8004f28 <HAL_RCC_ClockConfig+0x264>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dd0:	f7fd f9d8 	bl	8002184 <HAL_GetTick>
 8004dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dd6:	e00a      	b.n	8004dee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dd8:	f7fd f9d4 	bl	8002184 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e095      	b.n	8004f1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dee:	4b4e      	ldr	r3, [pc, #312]	@ (8004f28 <HAL_RCC_ClockConfig+0x264>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 020c 	and.w	r2, r3, #12
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d1eb      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d023      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d005      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e18:	4b43      	ldr	r3, [pc, #268]	@ (8004f28 <HAL_RCC_ClockConfig+0x264>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	4a42      	ldr	r2, [pc, #264]	@ (8004f28 <HAL_RCC_ClockConfig+0x264>)
 8004e1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d007      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004e30:	4b3d      	ldr	r3, [pc, #244]	@ (8004f28 <HAL_RCC_ClockConfig+0x264>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e38:	4a3b      	ldr	r2, [pc, #236]	@ (8004f28 <HAL_RCC_ClockConfig+0x264>)
 8004e3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e40:	4b39      	ldr	r3, [pc, #228]	@ (8004f28 <HAL_RCC_ClockConfig+0x264>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	4936      	ldr	r1, [pc, #216]	@ (8004f28 <HAL_RCC_ClockConfig+0x264>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	608b      	str	r3, [r1, #8]
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2b80      	cmp	r3, #128	@ 0x80
 8004e58:	d105      	bne.n	8004e66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e5a:	4b33      	ldr	r3, [pc, #204]	@ (8004f28 <HAL_RCC_ClockConfig+0x264>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	4a32      	ldr	r2, [pc, #200]	@ (8004f28 <HAL_RCC_ClockConfig+0x264>)
 8004e60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e66:	4b2f      	ldr	r3, [pc, #188]	@ (8004f24 <HAL_RCC_ClockConfig+0x260>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d21d      	bcs.n	8004eb0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e74:	4b2b      	ldr	r3, [pc, #172]	@ (8004f24 <HAL_RCC_ClockConfig+0x260>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f023 020f 	bic.w	r2, r3, #15
 8004e7c:	4929      	ldr	r1, [pc, #164]	@ (8004f24 <HAL_RCC_ClockConfig+0x260>)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e84:	f7fd f97e 	bl	8002184 <HAL_GetTick>
 8004e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8a:	e00a      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e8c:	f7fd f97a 	bl	8002184 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e03b      	b.n	8004f1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea2:	4b20      	ldr	r3, [pc, #128]	@ (8004f24 <HAL_RCC_ClockConfig+0x260>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d1ed      	bne.n	8004e8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d008      	beq.n	8004ece <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8004f28 <HAL_RCC_ClockConfig+0x264>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	4917      	ldr	r1, [pc, #92]	@ (8004f28 <HAL_RCC_ClockConfig+0x264>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d009      	beq.n	8004eee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eda:	4b13      	ldr	r3, [pc, #76]	@ (8004f28 <HAL_RCC_ClockConfig+0x264>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	490f      	ldr	r1, [pc, #60]	@ (8004f28 <HAL_RCC_ClockConfig+0x264>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004eee:	f000 f825 	bl	8004f3c <HAL_RCC_GetSysClockFreq>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8004f28 <HAL_RCC_ClockConfig+0x264>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	091b      	lsrs	r3, r3, #4
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	490c      	ldr	r1, [pc, #48]	@ (8004f30 <HAL_RCC_ClockConfig+0x26c>)
 8004f00:	5ccb      	ldrb	r3, [r1, r3]
 8004f02:	f003 031f 	and.w	r3, r3, #31
 8004f06:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f34 <HAL_RCC_ClockConfig+0x270>)
 8004f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f38 <HAL_RCC_ClockConfig+0x274>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fc fe36 	bl	8001b84 <HAL_InitTick>
 8004f18:	4603      	mov	r3, r0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40022000 	.word	0x40022000
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	04c4b400 	.word	0x04c4b400
 8004f30:	0801857c 	.word	0x0801857c
 8004f34:	20000004 	.word	0x20000004
 8004f38:	20000008 	.word	0x20000008

08004f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f42:	4b2c      	ldr	r3, [pc, #176]	@ (8004ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 030c 	and.w	r3, r3, #12
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d102      	bne.n	8004f54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f50:	613b      	str	r3, [r7, #16]
 8004f52:	e047      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f54:	4b27      	ldr	r3, [pc, #156]	@ (8004ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 030c 	and.w	r3, r3, #12
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d102      	bne.n	8004f66 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f60:	4b26      	ldr	r3, [pc, #152]	@ (8004ffc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f62:	613b      	str	r3, [r7, #16]
 8004f64:	e03e      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004f66:	4b23      	ldr	r3, [pc, #140]	@ (8004ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 030c 	and.w	r3, r3, #12
 8004f6e:	2b0c      	cmp	r3, #12
 8004f70:	d136      	bne.n	8004fe0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f72:	4b20      	ldr	r3, [pc, #128]	@ (8004ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	091b      	lsrs	r3, r3, #4
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	3301      	adds	r3, #1
 8004f88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d10c      	bne.n	8004faa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f90:	4a1a      	ldr	r2, [pc, #104]	@ (8004ffc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f98:	4a16      	ldr	r2, [pc, #88]	@ (8004ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f9a:	68d2      	ldr	r2, [r2, #12]
 8004f9c:	0a12      	lsrs	r2, r2, #8
 8004f9e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004fa2:	fb02 f303 	mul.w	r3, r2, r3
 8004fa6:	617b      	str	r3, [r7, #20]
      break;
 8004fa8:	e00c      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004faa:	4a13      	ldr	r2, [pc, #76]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb2:	4a10      	ldr	r2, [pc, #64]	@ (8004ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fb4:	68d2      	ldr	r2, [r2, #12]
 8004fb6:	0a12      	lsrs	r2, r2, #8
 8004fb8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004fbc:	fb02 f303 	mul.w	r3, r2, r3
 8004fc0:	617b      	str	r3, [r7, #20]
      break;
 8004fc2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	0e5b      	lsrs	r3, r3, #25
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	3301      	adds	r3, #1
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fdc:	613b      	str	r3, [r7, #16]
 8004fde:	e001      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004fe4:	693b      	ldr	r3, [r7, #16]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	371c      	adds	r7, #28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	00f42400 	.word	0x00f42400
 8004ffc:	016e3600 	.word	0x016e3600

08005000 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005004:	4b03      	ldr	r3, [pc, #12]	@ (8005014 <HAL_RCC_GetHCLKFreq+0x14>)
 8005006:	681b      	ldr	r3, [r3, #0]
}
 8005008:	4618      	mov	r0, r3
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	20000004 	.word	0x20000004

08005018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800501c:	f7ff fff0 	bl	8005000 <HAL_RCC_GetHCLKFreq>
 8005020:	4602      	mov	r2, r0
 8005022:	4b06      	ldr	r3, [pc, #24]	@ (800503c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	0a1b      	lsrs	r3, r3, #8
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	4904      	ldr	r1, [pc, #16]	@ (8005040 <HAL_RCC_GetPCLK1Freq+0x28>)
 800502e:	5ccb      	ldrb	r3, [r1, r3]
 8005030:	f003 031f 	and.w	r3, r3, #31
 8005034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005038:	4618      	mov	r0, r3
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40021000 	.word	0x40021000
 8005040:	0801858c 	.word	0x0801858c

08005044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005048:	f7ff ffda 	bl	8005000 <HAL_RCC_GetHCLKFreq>
 800504c:	4602      	mov	r2, r0
 800504e:	4b06      	ldr	r3, [pc, #24]	@ (8005068 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	0adb      	lsrs	r3, r3, #11
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	4904      	ldr	r1, [pc, #16]	@ (800506c <HAL_RCC_GetPCLK2Freq+0x28>)
 800505a:	5ccb      	ldrb	r3, [r1, r3]
 800505c:	f003 031f 	and.w	r3, r3, #31
 8005060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005064:	4618      	mov	r0, r3
 8005066:	bd80      	pop	{r7, pc}
 8005068:	40021000 	.word	0x40021000
 800506c:	0801858c 	.word	0x0801858c

08005070 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	220f      	movs	r2, #15
 800507e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005080:	4b12      	ldr	r3, [pc, #72]	@ (80050cc <HAL_RCC_GetClockConfig+0x5c>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f003 0203 	and.w	r2, r3, #3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800508c:	4b0f      	ldr	r3, [pc, #60]	@ (80050cc <HAL_RCC_GetClockConfig+0x5c>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005098:	4b0c      	ldr	r3, [pc, #48]	@ (80050cc <HAL_RCC_GetClockConfig+0x5c>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80050a4:	4b09      	ldr	r3, [pc, #36]	@ (80050cc <HAL_RCC_GetClockConfig+0x5c>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	08db      	lsrs	r3, r3, #3
 80050aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80050b2:	4b07      	ldr	r3, [pc, #28]	@ (80050d0 <HAL_RCC_GetClockConfig+0x60>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 020f 	and.w	r2, r3, #15
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	601a      	str	r2, [r3, #0]
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40021000 	.word	0x40021000
 80050d0:	40022000 	.word	0x40022000

080050d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050da:	4b1e      	ldr	r3, [pc, #120]	@ (8005154 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005154 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	091b      	lsrs	r3, r3, #4
 80050ea:	f003 030f 	and.w	r3, r3, #15
 80050ee:	3301      	adds	r3, #1
 80050f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b03      	cmp	r3, #3
 80050f6:	d10c      	bne.n	8005112 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050f8:	4a17      	ldr	r2, [pc, #92]	@ (8005158 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005100:	4a14      	ldr	r2, [pc, #80]	@ (8005154 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005102:	68d2      	ldr	r2, [r2, #12]
 8005104:	0a12      	lsrs	r2, r2, #8
 8005106:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800510a:	fb02 f303 	mul.w	r3, r2, r3
 800510e:	617b      	str	r3, [r7, #20]
    break;
 8005110:	e00c      	b.n	800512c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005112:	4a12      	ldr	r2, [pc, #72]	@ (800515c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	fbb2 f3f3 	udiv	r3, r2, r3
 800511a:	4a0e      	ldr	r2, [pc, #56]	@ (8005154 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800511c:	68d2      	ldr	r2, [r2, #12]
 800511e:	0a12      	lsrs	r2, r2, #8
 8005120:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005124:	fb02 f303 	mul.w	r3, r2, r3
 8005128:	617b      	str	r3, [r7, #20]
    break;
 800512a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800512c:	4b09      	ldr	r3, [pc, #36]	@ (8005154 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	0e5b      	lsrs	r3, r3, #25
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	3301      	adds	r3, #1
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	fbb2 f3f3 	udiv	r3, r2, r3
 8005144:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005146:	687b      	ldr	r3, [r7, #4]
}
 8005148:	4618      	mov	r0, r3
 800514a:	371c      	adds	r7, #28
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	40021000 	.word	0x40021000
 8005158:	016e3600 	.word	0x016e3600
 800515c:	00f42400 	.word	0x00f42400

08005160 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005168:	2300      	movs	r3, #0
 800516a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800516c:	2300      	movs	r3, #0
 800516e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 8098 	beq.w	80052ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800517e:	2300      	movs	r3, #0
 8005180:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005182:	4b43      	ldr	r3, [pc, #268]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10d      	bne.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800518e:	4b40      	ldr	r3, [pc, #256]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005192:	4a3f      	ldr	r2, [pc, #252]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005198:	6593      	str	r3, [r2, #88]	@ 0x58
 800519a:	4b3d      	ldr	r3, [pc, #244]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800519c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800519e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051a2:	60bb      	str	r3, [r7, #8]
 80051a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051a6:	2301      	movs	r3, #1
 80051a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051aa:	4b3a      	ldr	r3, [pc, #232]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a39      	ldr	r2, [pc, #228]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80051b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051b6:	f7fc ffe5 	bl	8002184 <HAL_GetTick>
 80051ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051bc:	e009      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051be:	f7fc ffe1 	bl	8002184 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d902      	bls.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	74fb      	strb	r3, [r7, #19]
        break;
 80051d0:	e005      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051d2:	4b30      	ldr	r3, [pc, #192]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0ef      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80051de:	7cfb      	ldrb	r3, [r7, #19]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d159      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051e4:	4b2a      	ldr	r3, [pc, #168]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d01e      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d019      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005200:	4b23      	ldr	r3, [pc, #140]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005206:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800520a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800520c:	4b20      	ldr	r3, [pc, #128]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800520e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005212:	4a1f      	ldr	r2, [pc, #124]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005218:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800521c:	4b1c      	ldr	r3, [pc, #112]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800521e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005222:	4a1b      	ldr	r2, [pc, #108]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005224:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005228:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800522c:	4a18      	ldr	r2, [pc, #96]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d016      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523e:	f7fc ffa1 	bl	8002184 <HAL_GetTick>
 8005242:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005244:	e00b      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005246:	f7fc ff9d 	bl	8002184 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005254:	4293      	cmp	r3, r2
 8005256:	d902      	bls.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	74fb      	strb	r3, [r7, #19]
            break;
 800525c:	e006      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800525e:	4b0c      	ldr	r3, [pc, #48]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0ec      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800526c:	7cfb      	ldrb	r3, [r7, #19]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10b      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005272:	4b07      	ldr	r3, [pc, #28]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005278:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005280:	4903      	ldr	r1, [pc, #12]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005282:	4313      	orrs	r3, r2
 8005284:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005288:	e008      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800528a:	7cfb      	ldrb	r3, [r7, #19]
 800528c:	74bb      	strb	r3, [r7, #18]
 800528e:	e005      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005290:	40021000 	.word	0x40021000
 8005294:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005298:	7cfb      	ldrb	r3, [r7, #19]
 800529a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800529c:	7c7b      	ldrb	r3, [r7, #17]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d105      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052a2:	4ba7      	ldr	r3, [pc, #668]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052a6:	4aa6      	ldr	r2, [pc, #664]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052ba:	4ba1      	ldr	r3, [pc, #644]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052c0:	f023 0203 	bic.w	r2, r3, #3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	499d      	ldr	r1, [pc, #628]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00a      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052dc:	4b98      	ldr	r3, [pc, #608]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e2:	f023 020c 	bic.w	r2, r3, #12
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	4995      	ldr	r1, [pc, #596]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0304 	and.w	r3, r3, #4
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052fe:	4b90      	ldr	r3, [pc, #576]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005304:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	498c      	ldr	r1, [pc, #560]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800530e:	4313      	orrs	r3, r2
 8005310:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0308 	and.w	r3, r3, #8
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00a      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005320:	4b87      	ldr	r3, [pc, #540]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005326:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	4984      	ldr	r1, [pc, #528]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005330:	4313      	orrs	r3, r2
 8005332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0310 	and.w	r3, r3, #16
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005342:	4b7f      	ldr	r3, [pc, #508]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005348:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	497b      	ldr	r1, [pc, #492]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005352:	4313      	orrs	r3, r2
 8005354:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0320 	and.w	r3, r3, #32
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00a      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005364:	4b76      	ldr	r3, [pc, #472]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800536a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	4973      	ldr	r1, [pc, #460]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005374:	4313      	orrs	r3, r2
 8005376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005386:	4b6e      	ldr	r3, [pc, #440]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800538c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	496a      	ldr	r1, [pc, #424]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005396:	4313      	orrs	r3, r2
 8005398:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00a      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053a8:	4b65      	ldr	r3, [pc, #404]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	4962      	ldr	r1, [pc, #392]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053ca:	4b5d      	ldr	r3, [pc, #372]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d8:	4959      	ldr	r1, [pc, #356]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053ec:	4b54      	ldr	r3, [pc, #336]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053f2:	f023 0203 	bic.w	r2, r3, #3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fa:	4951      	ldr	r1, [pc, #324]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800540e:	4b4c      	ldr	r3, [pc, #304]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005414:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541c:	4948      	ldr	r1, [pc, #288]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800542c:	2b00      	cmp	r3, #0
 800542e:	d015      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005430:	4b43      	ldr	r3, [pc, #268]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005436:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543e:	4940      	ldr	r1, [pc, #256]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800544a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800544e:	d105      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005450:	4b3b      	ldr	r3, [pc, #236]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	4a3a      	ldr	r2, [pc, #232]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005456:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800545a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005464:	2b00      	cmp	r3, #0
 8005466:	d015      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005468:	4b35      	ldr	r3, [pc, #212]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800546a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800546e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005476:	4932      	ldr	r1, [pc, #200]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005478:	4313      	orrs	r3, r2
 800547a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005482:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005486:	d105      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005488:	4b2d      	ldr	r3, [pc, #180]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	4a2c      	ldr	r2, [pc, #176]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800548e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005492:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d015      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80054a0:	4b27      	ldr	r3, [pc, #156]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ae:	4924      	ldr	r1, [pc, #144]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054be:	d105      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	4a1e      	ldr	r2, [pc, #120]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d015      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054d8:	4b19      	ldr	r3, [pc, #100]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e6:	4916      	ldr	r1, [pc, #88]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054f6:	d105      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054f8:	4b11      	ldr	r3, [pc, #68]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	4a10      	ldr	r2, [pc, #64]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005502:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d019      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005510:	4b0b      	ldr	r3, [pc, #44]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005516:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800551e:	4908      	ldr	r1, [pc, #32]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005520:	4313      	orrs	r3, r2
 8005522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800552e:	d109      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005530:	4b03      	ldr	r3, [pc, #12]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	4a02      	ldr	r2, [pc, #8]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005536:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800553a:	60d3      	str	r3, [r2, #12]
 800553c:	e002      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800553e:	bf00      	nop
 8005540:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d015      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005550:	4b29      	ldr	r3, [pc, #164]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005556:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800555e:	4926      	ldr	r1, [pc, #152]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005560:	4313      	orrs	r3, r2
 8005562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800556a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800556e:	d105      	bne.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005570:	4b21      	ldr	r3, [pc, #132]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	4a20      	ldr	r2, [pc, #128]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005576:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800557a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d015      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005588:	4b1b      	ldr	r3, [pc, #108]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800558a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005596:	4918      	ldr	r1, [pc, #96]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005598:	4313      	orrs	r3, r2
 800559a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055a6:	d105      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80055a8:	4b13      	ldr	r3, [pc, #76]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	4a12      	ldr	r2, [pc, #72]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055b2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d015      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80055c0:	4b0d      	ldr	r3, [pc, #52]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055ce:	490a      	ldr	r1, [pc, #40]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055de:	d105      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055e0:	4b05      	ldr	r3, [pc, #20]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	4a04      	ldr	r2, [pc, #16]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80055ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3718      	adds	r7, #24
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	40021000 	.word	0x40021000

080055fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e049      	b.n	80056a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d106      	bne.n	8005628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f841 	bl	80056aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	3304      	adds	r3, #4
 8005638:	4619      	mov	r1, r3
 800563a:	4610      	mov	r0, r2
 800563c:	f000 fa30 	bl	8005aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
	...

080056c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d001      	beq.n	80056d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e054      	b.n	8005782 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0201 	orr.w	r2, r2, #1
 80056ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a26      	ldr	r2, [pc, #152]	@ (8005790 <HAL_TIM_Base_Start_IT+0xd0>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d022      	beq.n	8005740 <HAL_TIM_Base_Start_IT+0x80>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005702:	d01d      	beq.n	8005740 <HAL_TIM_Base_Start_IT+0x80>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a22      	ldr	r2, [pc, #136]	@ (8005794 <HAL_TIM_Base_Start_IT+0xd4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d018      	beq.n	8005740 <HAL_TIM_Base_Start_IT+0x80>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a21      	ldr	r2, [pc, #132]	@ (8005798 <HAL_TIM_Base_Start_IT+0xd8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d013      	beq.n	8005740 <HAL_TIM_Base_Start_IT+0x80>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a1f      	ldr	r2, [pc, #124]	@ (800579c <HAL_TIM_Base_Start_IT+0xdc>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00e      	beq.n	8005740 <HAL_TIM_Base_Start_IT+0x80>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a1e      	ldr	r2, [pc, #120]	@ (80057a0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d009      	beq.n	8005740 <HAL_TIM_Base_Start_IT+0x80>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a1c      	ldr	r2, [pc, #112]	@ (80057a4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d004      	beq.n	8005740 <HAL_TIM_Base_Start_IT+0x80>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a1b      	ldr	r2, [pc, #108]	@ (80057a8 <HAL_TIM_Base_Start_IT+0xe8>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d115      	bne.n	800576c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	4b19      	ldr	r3, [pc, #100]	@ (80057ac <HAL_TIM_Base_Start_IT+0xec>)
 8005748:	4013      	ands	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2b06      	cmp	r3, #6
 8005750:	d015      	beq.n	800577e <HAL_TIM_Base_Start_IT+0xbe>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005758:	d011      	beq.n	800577e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f042 0201 	orr.w	r2, r2, #1
 8005768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800576a:	e008      	b.n	800577e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0201 	orr.w	r2, r2, #1
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	e000      	b.n	8005780 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800577e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	40012c00 	.word	0x40012c00
 8005794:	40000400 	.word	0x40000400
 8005798:	40000800 	.word	0x40000800
 800579c:	40000c00 	.word	0x40000c00
 80057a0:	40013400 	.word	0x40013400
 80057a4:	40014000 	.word	0x40014000
 80057a8:	40015000 	.word	0x40015000
 80057ac:	00010007 	.word	0x00010007

080057b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d020      	beq.n	8005814 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d01b      	beq.n	8005814 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f06f 0202 	mvn.w	r2, #2
 80057e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	f003 0303 	and.w	r3, r3, #3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f931 	bl	8005a62 <HAL_TIM_IC_CaptureCallback>
 8005800:	e005      	b.n	800580e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f923 	bl	8005a4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f934 	bl	8005a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f003 0304 	and.w	r3, r3, #4
 800581a:	2b00      	cmp	r3, #0
 800581c:	d020      	beq.n	8005860 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	d01b      	beq.n	8005860 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f06f 0204 	mvn.w	r2, #4
 8005830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2202      	movs	r2, #2
 8005836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f90b 	bl	8005a62 <HAL_TIM_IC_CaptureCallback>
 800584c:	e005      	b.n	800585a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f8fd 	bl	8005a4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 f90e 	bl	8005a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f003 0308 	and.w	r3, r3, #8
 8005866:	2b00      	cmp	r3, #0
 8005868:	d020      	beq.n	80058ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f003 0308 	and.w	r3, r3, #8
 8005870:	2b00      	cmp	r3, #0
 8005872:	d01b      	beq.n	80058ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f06f 0208 	mvn.w	r2, #8
 800587c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2204      	movs	r2, #4
 8005882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f8e5 	bl	8005a62 <HAL_TIM_IC_CaptureCallback>
 8005898:	e005      	b.n	80058a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f8d7 	bl	8005a4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f8e8 	bl	8005a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f003 0310 	and.w	r3, r3, #16
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d020      	beq.n	80058f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f003 0310 	and.w	r3, r3, #16
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d01b      	beq.n	80058f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f06f 0210 	mvn.w	r2, #16
 80058c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2208      	movs	r2, #8
 80058ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f8bf 	bl	8005a62 <HAL_TIM_IC_CaptureCallback>
 80058e4:	e005      	b.n	80058f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f8b1 	bl	8005a4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f8c2 	bl	8005a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00c      	beq.n	800591c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	d007      	beq.n	800591c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f06f 0201 	mvn.w	r2, #1
 8005914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7fb ff8c 	bl	8001834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005922:	2b00      	cmp	r3, #0
 8005924:	d104      	bne.n	8005930 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00c      	beq.n	800594a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005936:	2b00      	cmp	r3, #0
 8005938:	d007      	beq.n	800594a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f969 	bl	8005c1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00c      	beq.n	800596e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800595a:	2b00      	cmp	r3, #0
 800595c:	d007      	beq.n	800596e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f961 	bl	8005c30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00c      	beq.n	8005992 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d007      	beq.n	8005992 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800598a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f87c 	bl	8005a8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	f003 0320 	and.w	r3, r3, #32
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00c      	beq.n	80059b6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f003 0320 	and.w	r3, r3, #32
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d007      	beq.n	80059b6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f06f 0220 	mvn.w	r2, #32
 80059ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f929 	bl	8005c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00c      	beq.n	80059da <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d007      	beq.n	80059da <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80059d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 f935 	bl	8005c44 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00c      	beq.n	80059fe <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d007      	beq.n	80059fe <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80059f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f92d 	bl	8005c58 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00c      	beq.n	8005a22 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d007      	beq.n	8005a22 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f925 	bl	8005c6c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00c      	beq.n	8005a46 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d007      	beq.n	8005a46 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f91d 	bl	8005c80 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a46:	bf00      	nop
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b083      	sub	sp, #12
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b083      	sub	sp, #12
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a6a:	bf00      	nop
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a7e:	bf00      	nop
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b083      	sub	sp, #12
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a92:	bf00      	nop
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
	...

08005aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a4c      	ldr	r2, [pc, #304]	@ (8005be4 <TIM_Base_SetConfig+0x144>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d017      	beq.n	8005ae8 <TIM_Base_SetConfig+0x48>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005abe:	d013      	beq.n	8005ae8 <TIM_Base_SetConfig+0x48>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a49      	ldr	r2, [pc, #292]	@ (8005be8 <TIM_Base_SetConfig+0x148>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00f      	beq.n	8005ae8 <TIM_Base_SetConfig+0x48>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a48      	ldr	r2, [pc, #288]	@ (8005bec <TIM_Base_SetConfig+0x14c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d00b      	beq.n	8005ae8 <TIM_Base_SetConfig+0x48>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a47      	ldr	r2, [pc, #284]	@ (8005bf0 <TIM_Base_SetConfig+0x150>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d007      	beq.n	8005ae8 <TIM_Base_SetConfig+0x48>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a46      	ldr	r2, [pc, #280]	@ (8005bf4 <TIM_Base_SetConfig+0x154>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d003      	beq.n	8005ae8 <TIM_Base_SetConfig+0x48>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a45      	ldr	r2, [pc, #276]	@ (8005bf8 <TIM_Base_SetConfig+0x158>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d108      	bne.n	8005afa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a39      	ldr	r2, [pc, #228]	@ (8005be4 <TIM_Base_SetConfig+0x144>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d023      	beq.n	8005b4a <TIM_Base_SetConfig+0xaa>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b08:	d01f      	beq.n	8005b4a <TIM_Base_SetConfig+0xaa>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a36      	ldr	r2, [pc, #216]	@ (8005be8 <TIM_Base_SetConfig+0x148>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d01b      	beq.n	8005b4a <TIM_Base_SetConfig+0xaa>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a35      	ldr	r2, [pc, #212]	@ (8005bec <TIM_Base_SetConfig+0x14c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d017      	beq.n	8005b4a <TIM_Base_SetConfig+0xaa>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a34      	ldr	r2, [pc, #208]	@ (8005bf0 <TIM_Base_SetConfig+0x150>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d013      	beq.n	8005b4a <TIM_Base_SetConfig+0xaa>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a33      	ldr	r2, [pc, #204]	@ (8005bf4 <TIM_Base_SetConfig+0x154>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d00f      	beq.n	8005b4a <TIM_Base_SetConfig+0xaa>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a33      	ldr	r2, [pc, #204]	@ (8005bfc <TIM_Base_SetConfig+0x15c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d00b      	beq.n	8005b4a <TIM_Base_SetConfig+0xaa>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a32      	ldr	r2, [pc, #200]	@ (8005c00 <TIM_Base_SetConfig+0x160>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d007      	beq.n	8005b4a <TIM_Base_SetConfig+0xaa>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a31      	ldr	r2, [pc, #196]	@ (8005c04 <TIM_Base_SetConfig+0x164>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d003      	beq.n	8005b4a <TIM_Base_SetConfig+0xaa>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a2c      	ldr	r2, [pc, #176]	@ (8005bf8 <TIM_Base_SetConfig+0x158>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d108      	bne.n	8005b5c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a18      	ldr	r2, [pc, #96]	@ (8005be4 <TIM_Base_SetConfig+0x144>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d013      	beq.n	8005bb0 <TIM_Base_SetConfig+0x110>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a1a      	ldr	r2, [pc, #104]	@ (8005bf4 <TIM_Base_SetConfig+0x154>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00f      	beq.n	8005bb0 <TIM_Base_SetConfig+0x110>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a1a      	ldr	r2, [pc, #104]	@ (8005bfc <TIM_Base_SetConfig+0x15c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00b      	beq.n	8005bb0 <TIM_Base_SetConfig+0x110>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a19      	ldr	r2, [pc, #100]	@ (8005c00 <TIM_Base_SetConfig+0x160>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d007      	beq.n	8005bb0 <TIM_Base_SetConfig+0x110>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a18      	ldr	r2, [pc, #96]	@ (8005c04 <TIM_Base_SetConfig+0x164>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d003      	beq.n	8005bb0 <TIM_Base_SetConfig+0x110>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a13      	ldr	r2, [pc, #76]	@ (8005bf8 <TIM_Base_SetConfig+0x158>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d103      	bne.n	8005bb8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	691a      	ldr	r2, [r3, #16]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d105      	bne.n	8005bd6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f023 0201 	bic.w	r2, r3, #1
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	611a      	str	r2, [r3, #16]
  }
}
 8005bd6:	bf00      	nop
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	40012c00 	.word	0x40012c00
 8005be8:	40000400 	.word	0x40000400
 8005bec:	40000800 	.word	0x40000800
 8005bf0:	40000c00 	.word	0x40000c00
 8005bf4:	40013400 	.word	0x40013400
 8005bf8:	40015000 	.word	0x40015000
 8005bfc:	40014000 	.word	0x40014000
 8005c00:	40014400 	.word	0x40014400
 8005c04:	40014800 	.word	0x40014800

08005c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e042      	b.n	8005d2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d106      	bne.n	8005cbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7fc f951 	bl	8001f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2224      	movs	r2, #36	@ 0x24
 8005cc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0201 	bic.w	r2, r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f001 f806 	bl	8006cf0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fd07 	bl	80066f8 <UART_SetConfig>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e01b      	b.n	8005d2c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689a      	ldr	r2, [r3, #8]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f042 0201 	orr.w	r2, r2, #1
 8005d22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f001 f885 	bl	8006e34 <UART_CheckIdleState>
 8005d2a:	4603      	mov	r3, r0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08a      	sub	sp, #40	@ 0x28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d48:	2b20      	cmp	r3, #32
 8005d4a:	d167      	bne.n	8005e1c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <HAL_UART_Transmit_DMA+0x24>
 8005d52:	88fb      	ldrh	r3, [r7, #6]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e060      	b.n	8005e1e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	88fa      	ldrh	r2, [r7, #6]
 8005d66:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	88fa      	ldrh	r2, [r7, #6]
 8005d6e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2221      	movs	r2, #33	@ 0x21
 8005d7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d028      	beq.n	8005ddc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d8e:	4a26      	ldr	r2, [pc, #152]	@ (8005e28 <HAL_UART_Transmit_DMA+0xf4>)
 8005d90:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d96:	4a25      	ldr	r2, [pc, #148]	@ (8005e2c <HAL_UART_Transmit_DMA+0xf8>)
 8005d98:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d9e:	4a24      	ldr	r2, [pc, #144]	@ (8005e30 <HAL_UART_Transmit_DMA+0xfc>)
 8005da0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005da6:	2200      	movs	r2, #0
 8005da8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005db2:	4619      	mov	r1, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3328      	adds	r3, #40	@ 0x28
 8005dba:	461a      	mov	r2, r3
 8005dbc:	88fb      	ldrh	r3, [r7, #6]
 8005dbe:	f7fd ff67 	bl	8003c90 <HAL_DMA_Start_IT>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d009      	beq.n	8005ddc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2210      	movs	r2, #16
 8005dcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e020      	b.n	8005e1e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2240      	movs	r2, #64	@ 0x40
 8005de2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3308      	adds	r3, #8
 8005dea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	e853 3f00 	ldrex	r3, [r3]
 8005df2:	613b      	str	r3, [r7, #16]
   return(result);
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3308      	adds	r3, #8
 8005e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e04:	623a      	str	r2, [r7, #32]
 8005e06:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e08:	69f9      	ldr	r1, [r7, #28]
 8005e0a:	6a3a      	ldr	r2, [r7, #32]
 8005e0c:	e841 2300 	strex	r3, r2, [r1]
 8005e10:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1e5      	bne.n	8005de4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	e000      	b.n	8005e1e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005e1c:	2302      	movs	r3, #2
  }
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3728      	adds	r7, #40	@ 0x28
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	080072ff 	.word	0x080072ff
 8005e2c:	08007399 	.word	0x08007399
 8005e30:	0800751f 	.word	0x0800751f

08005e34 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08a      	sub	sp, #40	@ 0x28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e48:	2b20      	cmp	r3, #32
 8005e4a:	d137      	bne.n	8005ebc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <HAL_UART_Receive_DMA+0x24>
 8005e52:	88fb      	ldrh	r3, [r7, #6]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e030      	b.n	8005ebe <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a18      	ldr	r2, [pc, #96]	@ (8005ec8 <HAL_UART_Receive_DMA+0x94>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d01f      	beq.n	8005eac <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d018      	beq.n	8005eac <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	e853 3f00 	ldrex	r3, [r3]
 8005e86:	613b      	str	r3, [r7, #16]
   return(result);
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	461a      	mov	r2, r3
 8005e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e98:	623b      	str	r3, [r7, #32]
 8005e9a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9c:	69f9      	ldr	r1, [r7, #28]
 8005e9e:	6a3a      	ldr	r2, [r7, #32]
 8005ea0:	e841 2300 	strex	r3, r2, [r1]
 8005ea4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1e6      	bne.n	8005e7a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005eac:	88fb      	ldrh	r3, [r7, #6]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	68b9      	ldr	r1, [r7, #8]
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f001 f8d6 	bl	8007064 <UART_Start_Receive_DMA>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	e000      	b.n	8005ebe <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ebc:	2302      	movs	r3, #2
  }
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3728      	adds	r7, #40	@ 0x28
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	40008000 	.word	0x40008000

08005ecc <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b090      	sub	sp, #64	@ 0x40
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ee2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eee:	2b80      	cmp	r3, #128	@ 0x80
 8005ef0:	d139      	bne.n	8005f66 <HAL_UART_DMAStop+0x9a>
 8005ef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ef4:	2b21      	cmp	r3, #33	@ 0x21
 8005ef6:	d136      	bne.n	8005f66 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3308      	adds	r3, #8
 8005efe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	e853 3f00 	ldrex	r3, [r3]
 8005f06:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3308      	adds	r3, #8
 8005f16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f20:	e841 2300 	strex	r3, r2, [r1]
 8005f24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1e5      	bne.n	8005ef8 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d015      	beq.n	8005f60 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fd ff24 	bl	8003d86 <HAL_DMA_Abort>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00d      	beq.n	8005f60 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fe f88b 	bl	8004064 <HAL_DMA_GetError>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b20      	cmp	r3, #32
 8005f52:	d105      	bne.n	8005f60 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2210      	movs	r2, #16
 8005f58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e047      	b.n	8005ff0 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f001 f925 	bl	80071b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f70:	2b40      	cmp	r3, #64	@ 0x40
 8005f72:	d13c      	bne.n	8005fee <HAL_UART_DMAStop+0x122>
 8005f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f76:	2b22      	cmp	r3, #34	@ 0x22
 8005f78:	d139      	bne.n	8005fee <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3308      	adds	r3, #8
 8005f80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	e853 3f00 	ldrex	r3, [r3]
 8005f88:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f90:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	3308      	adds	r3, #8
 8005f98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f9a:	61ba      	str	r2, [r7, #24]
 8005f9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9e:	6979      	ldr	r1, [r7, #20]
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1e5      	bne.n	8005f7a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d017      	beq.n	8005fe8 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7fd fee1 	bl	8003d86 <HAL_DMA_Abort>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00e      	beq.n	8005fe8 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7fe f847 	bl	8004064 <HAL_DMA_GetError>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b20      	cmp	r3, #32
 8005fda:	d105      	bne.n	8005fe8 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2210      	movs	r2, #16
 8005fe0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e003      	b.n	8005ff0 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f001 f922 	bl	8007232 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3740      	adds	r7, #64	@ 0x40
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b0ba      	sub	sp, #232	@ 0xe8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800601e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006022:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006026:	4013      	ands	r3, r2
 8006028:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800602c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006030:	2b00      	cmp	r3, #0
 8006032:	d11b      	bne.n	800606c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006038:	f003 0320 	and.w	r3, r3, #32
 800603c:	2b00      	cmp	r3, #0
 800603e:	d015      	beq.n	800606c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006044:	f003 0320 	and.w	r3, r3, #32
 8006048:	2b00      	cmp	r3, #0
 800604a:	d105      	bne.n	8006058 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800604c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d009      	beq.n	800606c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 8300 	beq.w	8006662 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	4798      	blx	r3
      }
      return;
 800606a:	e2fa      	b.n	8006662 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800606c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006070:	2b00      	cmp	r3, #0
 8006072:	f000 8123 	beq.w	80062bc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006076:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800607a:	4b8d      	ldr	r3, [pc, #564]	@ (80062b0 <HAL_UART_IRQHandler+0x2b8>)
 800607c:	4013      	ands	r3, r2
 800607e:	2b00      	cmp	r3, #0
 8006080:	d106      	bne.n	8006090 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006082:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006086:	4b8b      	ldr	r3, [pc, #556]	@ (80062b4 <HAL_UART_IRQHandler+0x2bc>)
 8006088:	4013      	ands	r3, r2
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 8116 	beq.w	80062bc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b00      	cmp	r3, #0
 800609a:	d011      	beq.n	80060c0 <HAL_UART_IRQHandler+0xc8>
 800609c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00b      	beq.n	80060c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2201      	movs	r2, #1
 80060ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060b6:	f043 0201 	orr.w	r2, r3, #1
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d011      	beq.n	80060f0 <HAL_UART_IRQHandler+0xf8>
 80060cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00b      	beq.n	80060f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2202      	movs	r2, #2
 80060de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e6:	f043 0204 	orr.w	r2, r3, #4
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060f4:	f003 0304 	and.w	r3, r3, #4
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d011      	beq.n	8006120 <HAL_UART_IRQHandler+0x128>
 80060fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00b      	beq.n	8006120 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2204      	movs	r2, #4
 800610e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006116:	f043 0202 	orr.w	r2, r3, #2
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006124:	f003 0308 	and.w	r3, r3, #8
 8006128:	2b00      	cmp	r3, #0
 800612a:	d017      	beq.n	800615c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800612c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006130:	f003 0320 	and.w	r3, r3, #32
 8006134:	2b00      	cmp	r3, #0
 8006136:	d105      	bne.n	8006144 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006138:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800613c:	4b5c      	ldr	r3, [pc, #368]	@ (80062b0 <HAL_UART_IRQHandler+0x2b8>)
 800613e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00b      	beq.n	800615c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2208      	movs	r2, #8
 800614a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006152:	f043 0208 	orr.w	r2, r3, #8
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800615c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006164:	2b00      	cmp	r3, #0
 8006166:	d012      	beq.n	800618e <HAL_UART_IRQHandler+0x196>
 8006168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800616c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00c      	beq.n	800618e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800617c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006184:	f043 0220 	orr.w	r2, r3, #32
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 8266 	beq.w	8006666 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800619a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800619e:	f003 0320 	and.w	r3, r3, #32
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d013      	beq.n	80061ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80061a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061aa:	f003 0320 	and.w	r3, r3, #32
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d105      	bne.n	80061be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80061b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d007      	beq.n	80061ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061e2:	2b40      	cmp	r3, #64	@ 0x40
 80061e4:	d005      	beq.n	80061f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d054      	beq.n	800629c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f001 f81d 	bl	8007232 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006202:	2b40      	cmp	r3, #64	@ 0x40
 8006204:	d146      	bne.n	8006294 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3308      	adds	r3, #8
 800620c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006210:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800621c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006224:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3308      	adds	r3, #8
 800622e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006232:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006236:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800623e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006242:	e841 2300 	strex	r3, r2, [r1]
 8006246:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800624a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1d9      	bne.n	8006206 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006258:	2b00      	cmp	r3, #0
 800625a:	d017      	beq.n	800628c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006262:	4a15      	ldr	r2, [pc, #84]	@ (80062b8 <HAL_UART_IRQHandler+0x2c0>)
 8006264:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800626c:	4618      	mov	r0, r3
 800626e:	f7fd fde3 	bl	8003e38 <HAL_DMA_Abort_IT>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d019      	beq.n	80062ac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800627e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006286:	4610      	mov	r0, r2
 8006288:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800628a:	e00f      	b.n	80062ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fa1d 	bl	80066cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006292:	e00b      	b.n	80062ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fa19 	bl	80066cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800629a:	e007      	b.n	80062ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 fa15 	bl	80066cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80062aa:	e1dc      	b.n	8006666 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ac:	bf00      	nop
    return;
 80062ae:	e1da      	b.n	8006666 <HAL_UART_IRQHandler+0x66e>
 80062b0:	10000001 	.word	0x10000001
 80062b4:	04000120 	.word	0x04000120
 80062b8:	0800759f 	.word	0x0800759f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	f040 8170 	bne.w	80065a6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80062c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ca:	f003 0310 	and.w	r3, r3, #16
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 8169 	beq.w	80065a6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80062d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062d8:	f003 0310 	and.w	r3, r3, #16
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 8162 	beq.w	80065a6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2210      	movs	r2, #16
 80062e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f4:	2b40      	cmp	r3, #64	@ 0x40
 80062f6:	f040 80d8 	bne.w	80064aa <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006308:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 80af 	beq.w	8006470 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006318:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800631c:	429a      	cmp	r2, r3
 800631e:	f080 80a7 	bcs.w	8006470 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006328:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0320 	and.w	r3, r3, #32
 800633a:	2b00      	cmp	r3, #0
 800633c:	f040 8087 	bne.w	800644e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006348:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800634c:	e853 3f00 	ldrex	r3, [r3]
 8006350:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006354:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800635c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	461a      	mov	r2, r3
 8006366:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800636a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800636e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006372:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006376:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800637a:	e841 2300 	strex	r3, r2, [r1]
 800637e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006382:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1da      	bne.n	8006340 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3308      	adds	r3, #8
 8006390:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800639a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800639c:	f023 0301 	bic.w	r3, r3, #1
 80063a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3308      	adds	r3, #8
 80063aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80063ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80063b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80063b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80063ba:	e841 2300 	strex	r3, r2, [r1]
 80063be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80063c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1e1      	bne.n	800638a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3308      	adds	r3, #8
 80063cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063d0:	e853 3f00 	ldrex	r3, [r3]
 80063d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80063d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3308      	adds	r3, #8
 80063e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80063ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80063ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80063f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80063f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e3      	bne.n	80063c6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2220      	movs	r2, #32
 8006402:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006414:	e853 3f00 	ldrex	r3, [r3]
 8006418:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800641a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800641c:	f023 0310 	bic.w	r3, r3, #16
 8006420:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	461a      	mov	r2, r3
 800642a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800642e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006430:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006432:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006434:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006436:	e841 2300 	strex	r3, r2, [r1]
 800643a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800643c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1e4      	bne.n	800640c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006448:	4618      	mov	r0, r3
 800644a:	f7fd fc9c 	bl	8003d86 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2202      	movs	r2, #2
 8006452:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006460:	b29b      	uxth	r3, r3
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	b29b      	uxth	r3, r3
 8006466:	4619      	mov	r1, r3
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f939 	bl	80066e0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800646e:	e0fc      	b.n	800666a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006476:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800647a:	429a      	cmp	r2, r3
 800647c:	f040 80f5 	bne.w	800666a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0320 	and.w	r3, r3, #32
 800648e:	2b20      	cmp	r3, #32
 8006490:	f040 80eb 	bne.w	800666a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2202      	movs	r2, #2
 8006498:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80064a0:	4619      	mov	r1, r3
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f91c 	bl	80066e0 <HAL_UARTEx_RxEventCallback>
      return;
 80064a8:	e0df      	b.n	800666a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 80d1 	beq.w	800666e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80064cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 80cc 	beq.w	800666e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064de:	e853 3f00 	ldrex	r3, [r3]
 80064e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80064f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80064fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006500:	e841 2300 	strex	r3, r2, [r1]
 8006504:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1e4      	bne.n	80064d6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3308      	adds	r3, #8
 8006512:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006516:	e853 3f00 	ldrex	r3, [r3]
 800651a:	623b      	str	r3, [r7, #32]
   return(result);
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006522:	f023 0301 	bic.w	r3, r3, #1
 8006526:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3308      	adds	r3, #8
 8006530:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006534:	633a      	str	r2, [r7, #48]	@ 0x30
 8006536:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006538:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800653a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800653c:	e841 2300 	strex	r3, r2, [r1]
 8006540:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1e1      	bne.n	800650c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2220      	movs	r2, #32
 800654c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	e853 3f00 	ldrex	r3, [r3]
 8006568:	60fb      	str	r3, [r7, #12]
   return(result);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f023 0310 	bic.w	r3, r3, #16
 8006570:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	461a      	mov	r2, r3
 800657a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800657e:	61fb      	str	r3, [r7, #28]
 8006580:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006582:	69b9      	ldr	r1, [r7, #24]
 8006584:	69fa      	ldr	r2, [r7, #28]
 8006586:	e841 2300 	strex	r3, r2, [r1]
 800658a:	617b      	str	r3, [r7, #20]
   return(result);
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1e4      	bne.n	800655c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2202      	movs	r2, #2
 8006596:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800659c:	4619      	mov	r1, r3
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f89e 	bl	80066e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065a4:	e063      	b.n	800666e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80065a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00e      	beq.n	80065d0 <HAL_UART_IRQHandler+0x5d8>
 80065b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d008      	beq.n	80065d0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80065c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f001 f825 	bl	8007618 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065ce:	e051      	b.n	8006674 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80065d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d014      	beq.n	8006606 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80065dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d105      	bne.n	80065f4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80065e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d008      	beq.n	8006606 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d03a      	beq.n	8006672 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	4798      	blx	r3
    }
    return;
 8006604:	e035      	b.n	8006672 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800660a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800660e:	2b00      	cmp	r3, #0
 8006610:	d009      	beq.n	8006626 <HAL_UART_IRQHandler+0x62e>
 8006612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 ffcf 	bl	80075c2 <UART_EndTransmit_IT>
    return;
 8006624:	e026      	b.n	8006674 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800662a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d009      	beq.n	8006646 <HAL_UART_IRQHandler+0x64e>
 8006632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006636:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fffe 	bl	8007640 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006644:	e016      	b.n	8006674 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800664a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d010      	beq.n	8006674 <HAL_UART_IRQHandler+0x67c>
 8006652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006656:	2b00      	cmp	r3, #0
 8006658:	da0c      	bge.n	8006674 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 ffe6 	bl	800762c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006660:	e008      	b.n	8006674 <HAL_UART_IRQHandler+0x67c>
      return;
 8006662:	bf00      	nop
 8006664:	e006      	b.n	8006674 <HAL_UART_IRQHandler+0x67c>
    return;
 8006666:	bf00      	nop
 8006668:	e004      	b.n	8006674 <HAL_UART_IRQHandler+0x67c>
      return;
 800666a:	bf00      	nop
 800666c:	e002      	b.n	8006674 <HAL_UART_IRQHandler+0x67c>
      return;
 800666e:	bf00      	nop
 8006670:	e000      	b.n	8006674 <HAL_UART_IRQHandler+0x67c>
    return;
 8006672:	bf00      	nop
  }
}
 8006674:	37e8      	adds	r7, #232	@ 0xe8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop

0800667c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066fc:	b08c      	sub	sp, #48	@ 0x30
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006702:	2300      	movs	r3, #0
 8006704:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	689a      	ldr	r2, [r3, #8]
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	431a      	orrs	r2, r3
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	431a      	orrs	r2, r3
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	69db      	ldr	r3, [r3, #28]
 800671c:	4313      	orrs	r3, r2
 800671e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	4baa      	ldr	r3, [pc, #680]	@ (80069d0 <UART_SetConfig+0x2d8>)
 8006728:	4013      	ands	r3, r2
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	6812      	ldr	r2, [r2, #0]
 800672e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006730:	430b      	orrs	r3, r1
 8006732:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	68da      	ldr	r2, [r3, #12]
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	430a      	orrs	r2, r1
 8006748:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a9f      	ldr	r2, [pc, #636]	@ (80069d4 <UART_SetConfig+0x2dc>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d004      	beq.n	8006764 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006760:	4313      	orrs	r3, r2
 8006762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800676e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	6812      	ldr	r2, [r2, #0]
 8006776:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006778:	430b      	orrs	r3, r1
 800677a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006782:	f023 010f 	bic.w	r1, r3, #15
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	430a      	orrs	r2, r1
 8006790:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a90      	ldr	r2, [pc, #576]	@ (80069d8 <UART_SetConfig+0x2e0>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d125      	bne.n	80067e8 <UART_SetConfig+0xf0>
 800679c:	4b8f      	ldr	r3, [pc, #572]	@ (80069dc <UART_SetConfig+0x2e4>)
 800679e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067a2:	f003 0303 	and.w	r3, r3, #3
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d81a      	bhi.n	80067e0 <UART_SetConfig+0xe8>
 80067aa:	a201      	add	r2, pc, #4	@ (adr r2, 80067b0 <UART_SetConfig+0xb8>)
 80067ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b0:	080067c1 	.word	0x080067c1
 80067b4:	080067d1 	.word	0x080067d1
 80067b8:	080067c9 	.word	0x080067c9
 80067bc:	080067d9 	.word	0x080067d9
 80067c0:	2301      	movs	r3, #1
 80067c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067c6:	e116      	b.n	80069f6 <UART_SetConfig+0x2fe>
 80067c8:	2302      	movs	r3, #2
 80067ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ce:	e112      	b.n	80069f6 <UART_SetConfig+0x2fe>
 80067d0:	2304      	movs	r3, #4
 80067d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067d6:	e10e      	b.n	80069f6 <UART_SetConfig+0x2fe>
 80067d8:	2308      	movs	r3, #8
 80067da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067de:	e10a      	b.n	80069f6 <UART_SetConfig+0x2fe>
 80067e0:	2310      	movs	r3, #16
 80067e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067e6:	e106      	b.n	80069f6 <UART_SetConfig+0x2fe>
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a7c      	ldr	r2, [pc, #496]	@ (80069e0 <UART_SetConfig+0x2e8>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d138      	bne.n	8006864 <UART_SetConfig+0x16c>
 80067f2:	4b7a      	ldr	r3, [pc, #488]	@ (80069dc <UART_SetConfig+0x2e4>)
 80067f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067f8:	f003 030c 	and.w	r3, r3, #12
 80067fc:	2b0c      	cmp	r3, #12
 80067fe:	d82d      	bhi.n	800685c <UART_SetConfig+0x164>
 8006800:	a201      	add	r2, pc, #4	@ (adr r2, 8006808 <UART_SetConfig+0x110>)
 8006802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006806:	bf00      	nop
 8006808:	0800683d 	.word	0x0800683d
 800680c:	0800685d 	.word	0x0800685d
 8006810:	0800685d 	.word	0x0800685d
 8006814:	0800685d 	.word	0x0800685d
 8006818:	0800684d 	.word	0x0800684d
 800681c:	0800685d 	.word	0x0800685d
 8006820:	0800685d 	.word	0x0800685d
 8006824:	0800685d 	.word	0x0800685d
 8006828:	08006845 	.word	0x08006845
 800682c:	0800685d 	.word	0x0800685d
 8006830:	0800685d 	.word	0x0800685d
 8006834:	0800685d 	.word	0x0800685d
 8006838:	08006855 	.word	0x08006855
 800683c:	2300      	movs	r3, #0
 800683e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006842:	e0d8      	b.n	80069f6 <UART_SetConfig+0x2fe>
 8006844:	2302      	movs	r3, #2
 8006846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800684a:	e0d4      	b.n	80069f6 <UART_SetConfig+0x2fe>
 800684c:	2304      	movs	r3, #4
 800684e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006852:	e0d0      	b.n	80069f6 <UART_SetConfig+0x2fe>
 8006854:	2308      	movs	r3, #8
 8006856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800685a:	e0cc      	b.n	80069f6 <UART_SetConfig+0x2fe>
 800685c:	2310      	movs	r3, #16
 800685e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006862:	e0c8      	b.n	80069f6 <UART_SetConfig+0x2fe>
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a5e      	ldr	r2, [pc, #376]	@ (80069e4 <UART_SetConfig+0x2ec>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d125      	bne.n	80068ba <UART_SetConfig+0x1c2>
 800686e:	4b5b      	ldr	r3, [pc, #364]	@ (80069dc <UART_SetConfig+0x2e4>)
 8006870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006874:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006878:	2b30      	cmp	r3, #48	@ 0x30
 800687a:	d016      	beq.n	80068aa <UART_SetConfig+0x1b2>
 800687c:	2b30      	cmp	r3, #48	@ 0x30
 800687e:	d818      	bhi.n	80068b2 <UART_SetConfig+0x1ba>
 8006880:	2b20      	cmp	r3, #32
 8006882:	d00a      	beq.n	800689a <UART_SetConfig+0x1a2>
 8006884:	2b20      	cmp	r3, #32
 8006886:	d814      	bhi.n	80068b2 <UART_SetConfig+0x1ba>
 8006888:	2b00      	cmp	r3, #0
 800688a:	d002      	beq.n	8006892 <UART_SetConfig+0x19a>
 800688c:	2b10      	cmp	r3, #16
 800688e:	d008      	beq.n	80068a2 <UART_SetConfig+0x1aa>
 8006890:	e00f      	b.n	80068b2 <UART_SetConfig+0x1ba>
 8006892:	2300      	movs	r3, #0
 8006894:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006898:	e0ad      	b.n	80069f6 <UART_SetConfig+0x2fe>
 800689a:	2302      	movs	r3, #2
 800689c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068a0:	e0a9      	b.n	80069f6 <UART_SetConfig+0x2fe>
 80068a2:	2304      	movs	r3, #4
 80068a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068a8:	e0a5      	b.n	80069f6 <UART_SetConfig+0x2fe>
 80068aa:	2308      	movs	r3, #8
 80068ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068b0:	e0a1      	b.n	80069f6 <UART_SetConfig+0x2fe>
 80068b2:	2310      	movs	r3, #16
 80068b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068b8:	e09d      	b.n	80069f6 <UART_SetConfig+0x2fe>
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a4a      	ldr	r2, [pc, #296]	@ (80069e8 <UART_SetConfig+0x2f0>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d125      	bne.n	8006910 <UART_SetConfig+0x218>
 80068c4:	4b45      	ldr	r3, [pc, #276]	@ (80069dc <UART_SetConfig+0x2e4>)
 80068c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80068ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80068d0:	d016      	beq.n	8006900 <UART_SetConfig+0x208>
 80068d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80068d4:	d818      	bhi.n	8006908 <UART_SetConfig+0x210>
 80068d6:	2b80      	cmp	r3, #128	@ 0x80
 80068d8:	d00a      	beq.n	80068f0 <UART_SetConfig+0x1f8>
 80068da:	2b80      	cmp	r3, #128	@ 0x80
 80068dc:	d814      	bhi.n	8006908 <UART_SetConfig+0x210>
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d002      	beq.n	80068e8 <UART_SetConfig+0x1f0>
 80068e2:	2b40      	cmp	r3, #64	@ 0x40
 80068e4:	d008      	beq.n	80068f8 <UART_SetConfig+0x200>
 80068e6:	e00f      	b.n	8006908 <UART_SetConfig+0x210>
 80068e8:	2300      	movs	r3, #0
 80068ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ee:	e082      	b.n	80069f6 <UART_SetConfig+0x2fe>
 80068f0:	2302      	movs	r3, #2
 80068f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068f6:	e07e      	b.n	80069f6 <UART_SetConfig+0x2fe>
 80068f8:	2304      	movs	r3, #4
 80068fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068fe:	e07a      	b.n	80069f6 <UART_SetConfig+0x2fe>
 8006900:	2308      	movs	r3, #8
 8006902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006906:	e076      	b.n	80069f6 <UART_SetConfig+0x2fe>
 8006908:	2310      	movs	r3, #16
 800690a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800690e:	e072      	b.n	80069f6 <UART_SetConfig+0x2fe>
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a35      	ldr	r2, [pc, #212]	@ (80069ec <UART_SetConfig+0x2f4>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d12a      	bne.n	8006970 <UART_SetConfig+0x278>
 800691a:	4b30      	ldr	r3, [pc, #192]	@ (80069dc <UART_SetConfig+0x2e4>)
 800691c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006920:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006924:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006928:	d01a      	beq.n	8006960 <UART_SetConfig+0x268>
 800692a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800692e:	d81b      	bhi.n	8006968 <UART_SetConfig+0x270>
 8006930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006934:	d00c      	beq.n	8006950 <UART_SetConfig+0x258>
 8006936:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800693a:	d815      	bhi.n	8006968 <UART_SetConfig+0x270>
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <UART_SetConfig+0x250>
 8006940:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006944:	d008      	beq.n	8006958 <UART_SetConfig+0x260>
 8006946:	e00f      	b.n	8006968 <UART_SetConfig+0x270>
 8006948:	2300      	movs	r3, #0
 800694a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800694e:	e052      	b.n	80069f6 <UART_SetConfig+0x2fe>
 8006950:	2302      	movs	r3, #2
 8006952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006956:	e04e      	b.n	80069f6 <UART_SetConfig+0x2fe>
 8006958:	2304      	movs	r3, #4
 800695a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800695e:	e04a      	b.n	80069f6 <UART_SetConfig+0x2fe>
 8006960:	2308      	movs	r3, #8
 8006962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006966:	e046      	b.n	80069f6 <UART_SetConfig+0x2fe>
 8006968:	2310      	movs	r3, #16
 800696a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800696e:	e042      	b.n	80069f6 <UART_SetConfig+0x2fe>
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a17      	ldr	r2, [pc, #92]	@ (80069d4 <UART_SetConfig+0x2dc>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d13a      	bne.n	80069f0 <UART_SetConfig+0x2f8>
 800697a:	4b18      	ldr	r3, [pc, #96]	@ (80069dc <UART_SetConfig+0x2e4>)
 800697c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006980:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006984:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006988:	d01a      	beq.n	80069c0 <UART_SetConfig+0x2c8>
 800698a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800698e:	d81b      	bhi.n	80069c8 <UART_SetConfig+0x2d0>
 8006990:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006994:	d00c      	beq.n	80069b0 <UART_SetConfig+0x2b8>
 8006996:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800699a:	d815      	bhi.n	80069c8 <UART_SetConfig+0x2d0>
 800699c:	2b00      	cmp	r3, #0
 800699e:	d003      	beq.n	80069a8 <UART_SetConfig+0x2b0>
 80069a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069a4:	d008      	beq.n	80069b8 <UART_SetConfig+0x2c0>
 80069a6:	e00f      	b.n	80069c8 <UART_SetConfig+0x2d0>
 80069a8:	2300      	movs	r3, #0
 80069aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ae:	e022      	b.n	80069f6 <UART_SetConfig+0x2fe>
 80069b0:	2302      	movs	r3, #2
 80069b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069b6:	e01e      	b.n	80069f6 <UART_SetConfig+0x2fe>
 80069b8:	2304      	movs	r3, #4
 80069ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069be:	e01a      	b.n	80069f6 <UART_SetConfig+0x2fe>
 80069c0:	2308      	movs	r3, #8
 80069c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069c6:	e016      	b.n	80069f6 <UART_SetConfig+0x2fe>
 80069c8:	2310      	movs	r3, #16
 80069ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ce:	e012      	b.n	80069f6 <UART_SetConfig+0x2fe>
 80069d0:	cfff69f3 	.word	0xcfff69f3
 80069d4:	40008000 	.word	0x40008000
 80069d8:	40013800 	.word	0x40013800
 80069dc:	40021000 	.word	0x40021000
 80069e0:	40004400 	.word	0x40004400
 80069e4:	40004800 	.word	0x40004800
 80069e8:	40004c00 	.word	0x40004c00
 80069ec:	40005000 	.word	0x40005000
 80069f0:	2310      	movs	r3, #16
 80069f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4aae      	ldr	r2, [pc, #696]	@ (8006cb4 <UART_SetConfig+0x5bc>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	f040 8097 	bne.w	8006b30 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a06:	2b08      	cmp	r3, #8
 8006a08:	d823      	bhi.n	8006a52 <UART_SetConfig+0x35a>
 8006a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a10 <UART_SetConfig+0x318>)
 8006a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a10:	08006a35 	.word	0x08006a35
 8006a14:	08006a53 	.word	0x08006a53
 8006a18:	08006a3d 	.word	0x08006a3d
 8006a1c:	08006a53 	.word	0x08006a53
 8006a20:	08006a43 	.word	0x08006a43
 8006a24:	08006a53 	.word	0x08006a53
 8006a28:	08006a53 	.word	0x08006a53
 8006a2c:	08006a53 	.word	0x08006a53
 8006a30:	08006a4b 	.word	0x08006a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a34:	f7fe faf0 	bl	8005018 <HAL_RCC_GetPCLK1Freq>
 8006a38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a3a:	e010      	b.n	8006a5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a3c:	4b9e      	ldr	r3, [pc, #632]	@ (8006cb8 <UART_SetConfig+0x5c0>)
 8006a3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a40:	e00d      	b.n	8006a5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a42:	f7fe fa7b 	bl	8004f3c <HAL_RCC_GetSysClockFreq>
 8006a46:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a48:	e009      	b.n	8006a5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a50:	e005      	b.n	8006a5e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006a52:	2300      	movs	r3, #0
 8006a54:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006a5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 8130 	beq.w	8006cc6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a6a:	4a94      	ldr	r2, [pc, #592]	@ (8006cbc <UART_SetConfig+0x5c4>)
 8006a6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a70:	461a      	mov	r2, r3
 8006a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a74:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a78:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	005b      	lsls	r3, r3, #1
 8006a82:	4413      	add	r3, r2
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d305      	bcc.n	8006a96 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a90:	69ba      	ldr	r2, [r7, #24]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d903      	bls.n	8006a9e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a9c:	e113      	b.n	8006cc6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	60bb      	str	r3, [r7, #8]
 8006aa4:	60fa      	str	r2, [r7, #12]
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aaa:	4a84      	ldr	r2, [pc, #528]	@ (8006cbc <UART_SetConfig+0x5c4>)
 8006aac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	603b      	str	r3, [r7, #0]
 8006ab6:	607a      	str	r2, [r7, #4]
 8006ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006abc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ac0:	f7f9 fe22 	bl	8000708 <__aeabi_uldivmod>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	4610      	mov	r0, r2
 8006aca:	4619      	mov	r1, r3
 8006acc:	f04f 0200 	mov.w	r2, #0
 8006ad0:	f04f 0300 	mov.w	r3, #0
 8006ad4:	020b      	lsls	r3, r1, #8
 8006ad6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ada:	0202      	lsls	r2, r0, #8
 8006adc:	6979      	ldr	r1, [r7, #20]
 8006ade:	6849      	ldr	r1, [r1, #4]
 8006ae0:	0849      	lsrs	r1, r1, #1
 8006ae2:	2000      	movs	r0, #0
 8006ae4:	460c      	mov	r4, r1
 8006ae6:	4605      	mov	r5, r0
 8006ae8:	eb12 0804 	adds.w	r8, r2, r4
 8006aec:	eb43 0905 	adc.w	r9, r3, r5
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	469a      	mov	sl, r3
 8006af8:	4693      	mov	fp, r2
 8006afa:	4652      	mov	r2, sl
 8006afc:	465b      	mov	r3, fp
 8006afe:	4640      	mov	r0, r8
 8006b00:	4649      	mov	r1, r9
 8006b02:	f7f9 fe01 	bl	8000708 <__aeabi_uldivmod>
 8006b06:	4602      	mov	r2, r0
 8006b08:	460b      	mov	r3, r1
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b14:	d308      	bcc.n	8006b28 <UART_SetConfig+0x430>
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b1c:	d204      	bcs.n	8006b28 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6a3a      	ldr	r2, [r7, #32]
 8006b24:	60da      	str	r2, [r3, #12]
 8006b26:	e0ce      	b.n	8006cc6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b2e:	e0ca      	b.n	8006cc6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b38:	d166      	bne.n	8006c08 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006b3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b3e:	2b08      	cmp	r3, #8
 8006b40:	d827      	bhi.n	8006b92 <UART_SetConfig+0x49a>
 8006b42:	a201      	add	r2, pc, #4	@ (adr r2, 8006b48 <UART_SetConfig+0x450>)
 8006b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b48:	08006b6d 	.word	0x08006b6d
 8006b4c:	08006b75 	.word	0x08006b75
 8006b50:	08006b7d 	.word	0x08006b7d
 8006b54:	08006b93 	.word	0x08006b93
 8006b58:	08006b83 	.word	0x08006b83
 8006b5c:	08006b93 	.word	0x08006b93
 8006b60:	08006b93 	.word	0x08006b93
 8006b64:	08006b93 	.word	0x08006b93
 8006b68:	08006b8b 	.word	0x08006b8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b6c:	f7fe fa54 	bl	8005018 <HAL_RCC_GetPCLK1Freq>
 8006b70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b72:	e014      	b.n	8006b9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b74:	f7fe fa66 	bl	8005044 <HAL_RCC_GetPCLK2Freq>
 8006b78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b7a:	e010      	b.n	8006b9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b7c:	4b4e      	ldr	r3, [pc, #312]	@ (8006cb8 <UART_SetConfig+0x5c0>)
 8006b7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b80:	e00d      	b.n	8006b9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b82:	f7fe f9db 	bl	8004f3c <HAL_RCC_GetSysClockFreq>
 8006b86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b88:	e009      	b.n	8006b9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b90:	e005      	b.n	8006b9e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006b9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 8090 	beq.w	8006cc6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006baa:	4a44      	ldr	r2, [pc, #272]	@ (8006cbc <UART_SetConfig+0x5c4>)
 8006bac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bb8:	005a      	lsls	r2, r3, #1
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	085b      	lsrs	r3, r3, #1
 8006bc0:	441a      	add	r2, r3
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	2b0f      	cmp	r3, #15
 8006bd0:	d916      	bls.n	8006c00 <UART_SetConfig+0x508>
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bd8:	d212      	bcs.n	8006c00 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	f023 030f 	bic.w	r3, r3, #15
 8006be2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	085b      	lsrs	r3, r3, #1
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	f003 0307 	and.w	r3, r3, #7
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	8bfb      	ldrh	r3, [r7, #30]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	8bfa      	ldrh	r2, [r7, #30]
 8006bfc:	60da      	str	r2, [r3, #12]
 8006bfe:	e062      	b.n	8006cc6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c06:	e05e      	b.n	8006cc6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c08:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c0c:	2b08      	cmp	r3, #8
 8006c0e:	d828      	bhi.n	8006c62 <UART_SetConfig+0x56a>
 8006c10:	a201      	add	r2, pc, #4	@ (adr r2, 8006c18 <UART_SetConfig+0x520>)
 8006c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c16:	bf00      	nop
 8006c18:	08006c3d 	.word	0x08006c3d
 8006c1c:	08006c45 	.word	0x08006c45
 8006c20:	08006c4d 	.word	0x08006c4d
 8006c24:	08006c63 	.word	0x08006c63
 8006c28:	08006c53 	.word	0x08006c53
 8006c2c:	08006c63 	.word	0x08006c63
 8006c30:	08006c63 	.word	0x08006c63
 8006c34:	08006c63 	.word	0x08006c63
 8006c38:	08006c5b 	.word	0x08006c5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c3c:	f7fe f9ec 	bl	8005018 <HAL_RCC_GetPCLK1Freq>
 8006c40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c42:	e014      	b.n	8006c6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c44:	f7fe f9fe 	bl	8005044 <HAL_RCC_GetPCLK2Freq>
 8006c48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c4a:	e010      	b.n	8006c6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8006cb8 <UART_SetConfig+0x5c0>)
 8006c4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c50:	e00d      	b.n	8006c6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c52:	f7fe f973 	bl	8004f3c <HAL_RCC_GetSysClockFreq>
 8006c56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c58:	e009      	b.n	8006c6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c60:	e005      	b.n	8006c6e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006c62:	2300      	movs	r3, #0
 8006c64:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c6c:	bf00      	nop
    }

    if (pclk != 0U)
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d028      	beq.n	8006cc6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c78:	4a10      	ldr	r2, [pc, #64]	@ (8006cbc <UART_SetConfig+0x5c4>)
 8006c7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c82:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	085b      	lsrs	r3, r3, #1
 8006c8c:	441a      	add	r2, r3
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c96:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	2b0f      	cmp	r3, #15
 8006c9c:	d910      	bls.n	8006cc0 <UART_SetConfig+0x5c8>
 8006c9e:	6a3b      	ldr	r3, [r7, #32]
 8006ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ca4:	d20c      	bcs.n	8006cc0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	60da      	str	r2, [r3, #12]
 8006cb0:	e009      	b.n	8006cc6 <UART_SetConfig+0x5ce>
 8006cb2:	bf00      	nop
 8006cb4:	40008000 	.word	0x40008000
 8006cb8:	00f42400 	.word	0x00f42400
 8006cbc:	08018594 	.word	0x08018594
      }
      else
      {
        ret = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006ce2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3730      	adds	r7, #48	@ 0x30
 8006cea:	46bd      	mov	sp, r7
 8006cec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006cf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cfc:	f003 0308 	and.w	r3, r3, #8
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00a      	beq.n	8006d1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00a      	beq.n	8006d3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d40:	f003 0302 	and.w	r3, r3, #2
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00a      	beq.n	8006d5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d62:	f003 0304 	and.w	r3, r3, #4
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00a      	beq.n	8006d80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d84:	f003 0310 	and.w	r3, r3, #16
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00a      	beq.n	8006da2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da6:	f003 0320 	and.w	r3, r3, #32
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00a      	beq.n	8006dc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d01a      	beq.n	8006e06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dee:	d10a      	bne.n	8006e06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00a      	beq.n	8006e28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	430a      	orrs	r2, r1
 8006e26:	605a      	str	r2, [r3, #4]
  }
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b098      	sub	sp, #96	@ 0x60
 8006e38:	af02      	add	r7, sp, #8
 8006e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e44:	f7fb f99e 	bl	8002184 <HAL_GetTick>
 8006e48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0308 	and.w	r3, r3, #8
 8006e54:	2b08      	cmp	r3, #8
 8006e56:	d12f      	bne.n	8006eb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e60:	2200      	movs	r2, #0
 8006e62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f88e 	bl	8006f88 <UART_WaitOnFlagUntilTimeout>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d022      	beq.n	8006eb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e7a:	e853 3f00 	ldrex	r3, [r3]
 8006e7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e86:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e90:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e92:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e98:	e841 2300 	strex	r3, r2, [r1]
 8006e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1e6      	bne.n	8006e72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e063      	b.n	8006f80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0304 	and.w	r3, r3, #4
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	d149      	bne.n	8006f5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ec6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f857 	bl	8006f88 <UART_WaitOnFlagUntilTimeout>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d03c      	beq.n	8006f5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee8:	e853 3f00 	ldrex	r3, [r3]
 8006eec:	623b      	str	r3, [r7, #32]
   return(result);
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ef4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	461a      	mov	r2, r3
 8006efc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006efe:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f00:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f06:	e841 2300 	strex	r3, r2, [r1]
 8006f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1e6      	bne.n	8006ee0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3308      	adds	r3, #8
 8006f18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	e853 3f00 	ldrex	r3, [r3]
 8006f20:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f023 0301 	bic.w	r3, r3, #1
 8006f28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3308      	adds	r3, #8
 8006f30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f32:	61fa      	str	r2, [r7, #28]
 8006f34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f36:	69b9      	ldr	r1, [r7, #24]
 8006f38:	69fa      	ldr	r2, [r7, #28]
 8006f3a:	e841 2300 	strex	r3, r2, [r1]
 8006f3e:	617b      	str	r3, [r7, #20]
   return(result);
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1e5      	bne.n	8006f12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2220      	movs	r2, #32
 8006f4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e012      	b.n	8006f80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2220      	movs	r2, #32
 8006f5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2220      	movs	r2, #32
 8006f66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3758      	adds	r7, #88	@ 0x58
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	603b      	str	r3, [r7, #0]
 8006f94:	4613      	mov	r3, r2
 8006f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f98:	e04f      	b.n	800703a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fa0:	d04b      	beq.n	800703a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fa2:	f7fb f8ef 	bl	8002184 <HAL_GetTick>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d302      	bcc.n	8006fb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d101      	bne.n	8006fbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e04e      	b.n	800705a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0304 	and.w	r3, r3, #4
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d037      	beq.n	800703a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	2b80      	cmp	r3, #128	@ 0x80
 8006fce:	d034      	beq.n	800703a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2b40      	cmp	r3, #64	@ 0x40
 8006fd4:	d031      	beq.n	800703a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	f003 0308 	and.w	r3, r3, #8
 8006fe0:	2b08      	cmp	r3, #8
 8006fe2:	d110      	bne.n	8007006 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2208      	movs	r2, #8
 8006fea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 f920 	bl	8007232 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2208      	movs	r2, #8
 8006ff6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e029      	b.n	800705a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	69db      	ldr	r3, [r3, #28]
 800700c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007010:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007014:	d111      	bne.n	800703a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800701e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 f906 	bl	8007232 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2220      	movs	r2, #32
 800702a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e00f      	b.n	800705a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69da      	ldr	r2, [r3, #28]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	4013      	ands	r3, r2
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	429a      	cmp	r2, r3
 8007048:	bf0c      	ite	eq
 800704a:	2301      	moveq	r3, #1
 800704c:	2300      	movne	r3, #0
 800704e:	b2db      	uxtb	r3, r3
 8007050:	461a      	mov	r2, r3
 8007052:	79fb      	ldrb	r3, [r7, #7]
 8007054:	429a      	cmp	r2, r3
 8007056:	d0a0      	beq.n	8006f9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
	...

08007064 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b096      	sub	sp, #88	@ 0x58
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	4613      	mov	r3, r2
 8007070:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	88fa      	ldrh	r2, [r7, #6]
 800707c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2222      	movs	r2, #34	@ 0x22
 800708c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007096:	2b00      	cmp	r3, #0
 8007098:	d02d      	beq.n	80070f6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070a0:	4a40      	ldr	r2, [pc, #256]	@ (80071a4 <UART_Start_Receive_DMA+0x140>)
 80070a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070aa:	4a3f      	ldr	r2, [pc, #252]	@ (80071a8 <UART_Start_Receive_DMA+0x144>)
 80070ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070b4:	4a3d      	ldr	r2, [pc, #244]	@ (80071ac <UART_Start_Receive_DMA+0x148>)
 80070b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070be:	2200      	movs	r2, #0
 80070c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3324      	adds	r3, #36	@ 0x24
 80070ce:	4619      	mov	r1, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070d4:	461a      	mov	r2, r3
 80070d6:	88fb      	ldrh	r3, [r7, #6]
 80070d8:	f7fc fdda 	bl	8003c90 <HAL_DMA_Start_IT>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d009      	beq.n	80070f6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2210      	movs	r2, #16
 80070e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2220      	movs	r2, #32
 80070ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e051      	b.n	800719a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d018      	beq.n	8007130 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007106:	e853 3f00 	ldrex	r3, [r3]
 800710a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800710c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007112:	657b      	str	r3, [r7, #84]	@ 0x54
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	461a      	mov	r2, r3
 800711a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800711c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800711e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007120:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007122:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007124:	e841 2300 	strex	r3, r2, [r1]
 8007128:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800712a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1e6      	bne.n	80070fe <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	3308      	adds	r3, #8
 8007136:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713a:	e853 3f00 	ldrex	r3, [r3]
 800713e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007142:	f043 0301 	orr.w	r3, r3, #1
 8007146:	653b      	str	r3, [r7, #80]	@ 0x50
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	3308      	adds	r3, #8
 800714e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007150:	637a      	str	r2, [r7, #52]	@ 0x34
 8007152:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007154:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007156:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007158:	e841 2300 	strex	r3, r2, [r1]
 800715c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800715e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1e5      	bne.n	8007130 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	3308      	adds	r3, #8
 800716a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	e853 3f00 	ldrex	r3, [r3]
 8007172:	613b      	str	r3, [r7, #16]
   return(result);
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800717a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	3308      	adds	r3, #8
 8007182:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007184:	623a      	str	r2, [r7, #32]
 8007186:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007188:	69f9      	ldr	r1, [r7, #28]
 800718a:	6a3a      	ldr	r2, [r7, #32]
 800718c:	e841 2300 	strex	r3, r2, [r1]
 8007190:	61bb      	str	r3, [r7, #24]
   return(result);
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1e5      	bne.n	8007164 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3758      	adds	r7, #88	@ 0x58
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	080073b5 	.word	0x080073b5
 80071a8:	080074e1 	.word	0x080074e1
 80071ac:	0800751f 	.word	0x0800751f

080071b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b08f      	sub	sp, #60	@ 0x3c
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	e853 3f00 	ldrex	r3, [r3]
 80071c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80071cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	461a      	mov	r2, r3
 80071d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071d8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071de:	e841 2300 	strex	r3, r2, [r1]
 80071e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1e6      	bne.n	80071b8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3308      	adds	r3, #8
 80071f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	e853 3f00 	ldrex	r3, [r3]
 80071f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007200:	633b      	str	r3, [r7, #48]	@ 0x30
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3308      	adds	r3, #8
 8007208:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800720a:	61ba      	str	r2, [r7, #24]
 800720c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720e:	6979      	ldr	r1, [r7, #20]
 8007210:	69ba      	ldr	r2, [r7, #24]
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	613b      	str	r3, [r7, #16]
   return(result);
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1e5      	bne.n	80071ea <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2220      	movs	r2, #32
 8007222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007226:	bf00      	nop
 8007228:	373c      	adds	r7, #60	@ 0x3c
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007232:	b480      	push	{r7}
 8007234:	b095      	sub	sp, #84	@ 0x54
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007242:	e853 3f00 	ldrex	r3, [r3]
 8007246:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800724e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	461a      	mov	r2, r3
 8007256:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007258:	643b      	str	r3, [r7, #64]	@ 0x40
 800725a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800725e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007260:	e841 2300 	strex	r3, r2, [r1]
 8007264:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1e6      	bne.n	800723a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	3308      	adds	r3, #8
 8007272:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	e853 3f00 	ldrex	r3, [r3]
 800727a:	61fb      	str	r3, [r7, #28]
   return(result);
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007282:	f023 0301 	bic.w	r3, r3, #1
 8007286:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3308      	adds	r3, #8
 800728e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007290:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007292:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007294:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007296:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007298:	e841 2300 	strex	r3, r2, [r1]
 800729c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800729e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1e3      	bne.n	800726c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d118      	bne.n	80072de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	e853 3f00 	ldrex	r3, [r3]
 80072b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	f023 0310 	bic.w	r3, r3, #16
 80072c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	461a      	mov	r2, r3
 80072c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072ca:	61bb      	str	r3, [r7, #24]
 80072cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ce:	6979      	ldr	r1, [r7, #20]
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	e841 2300 	strex	r3, r2, [r1]
 80072d6:	613b      	str	r3, [r7, #16]
   return(result);
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1e6      	bne.n	80072ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80072f2:	bf00      	nop
 80072f4:	3754      	adds	r7, #84	@ 0x54
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b090      	sub	sp, #64	@ 0x40
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800730a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 0320 	and.w	r3, r3, #32
 8007316:	2b00      	cmp	r3, #0
 8007318:	d137      	bne.n	800738a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800731a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800731c:	2200      	movs	r2, #0
 800731e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	3308      	adds	r3, #8
 8007328:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732c:	e853 3f00 	ldrex	r3, [r3]
 8007330:	623b      	str	r3, [r7, #32]
   return(result);
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007338:	63bb      	str	r3, [r7, #56]	@ 0x38
 800733a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3308      	adds	r3, #8
 8007340:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007342:	633a      	str	r2, [r7, #48]	@ 0x30
 8007344:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007346:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007348:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800734a:	e841 2300 	strex	r3, r2, [r1]
 800734e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1e5      	bne.n	8007322 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	e853 3f00 	ldrex	r3, [r3]
 8007362:	60fb      	str	r3, [r7, #12]
   return(result);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800736a:	637b      	str	r3, [r7, #52]	@ 0x34
 800736c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	461a      	mov	r2, r3
 8007372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007374:	61fb      	str	r3, [r7, #28]
 8007376:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007378:	69b9      	ldr	r1, [r7, #24]
 800737a:	69fa      	ldr	r2, [r7, #28]
 800737c:	e841 2300 	strex	r3, r2, [r1]
 8007380:	617b      	str	r3, [r7, #20]
   return(result);
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e6      	bne.n	8007356 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007388:	e002      	b.n	8007390 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800738a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800738c:	f7ff f976 	bl	800667c <HAL_UART_TxCpltCallback>
}
 8007390:	bf00      	nop
 8007392:	3740      	adds	r7, #64	@ 0x40
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f7ff f972 	bl	8006690 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073ac:	bf00      	nop
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b09c      	sub	sp, #112	@ 0x70
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0320 	and.w	r3, r3, #32
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d171      	bne.n	80074b4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80073d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073e0:	e853 3f00 	ldrex	r3, [r3]
 80073e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80073e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80073ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	461a      	mov	r2, r3
 80073f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80073f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80073fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073fe:	e841 2300 	strex	r3, r2, [r1]
 8007402:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007404:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1e6      	bne.n	80073d8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3308      	adds	r3, #8
 8007410:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007414:	e853 3f00 	ldrex	r3, [r3]
 8007418:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800741a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800741c:	f023 0301 	bic.w	r3, r3, #1
 8007420:	667b      	str	r3, [r7, #100]	@ 0x64
 8007422:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3308      	adds	r3, #8
 8007428:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800742a:	647a      	str	r2, [r7, #68]	@ 0x44
 800742c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007430:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007432:	e841 2300 	strex	r3, r2, [r1]
 8007436:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1e5      	bne.n	800740a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800743e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	3308      	adds	r3, #8
 8007444:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007448:	e853 3f00 	ldrex	r3, [r3]
 800744c:	623b      	str	r3, [r7, #32]
   return(result);
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007454:	663b      	str	r3, [r7, #96]	@ 0x60
 8007456:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3308      	adds	r3, #8
 800745c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800745e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007460:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007462:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007464:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007466:	e841 2300 	strex	r3, r2, [r1]
 800746a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800746c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1e5      	bne.n	800743e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007472:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007474:	2220      	movs	r2, #32
 8007476:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800747a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800747c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800747e:	2b01      	cmp	r3, #1
 8007480:	d118      	bne.n	80074b4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007482:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	e853 3f00 	ldrex	r3, [r3]
 800748e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f023 0310 	bic.w	r3, r3, #16
 8007496:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007498:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	461a      	mov	r2, r3
 800749e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074a0:	61fb      	str	r3, [r7, #28]
 80074a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a4:	69b9      	ldr	r1, [r7, #24]
 80074a6:	69fa      	ldr	r2, [r7, #28]
 80074a8:	e841 2300 	strex	r3, r2, [r1]
 80074ac:	617b      	str	r3, [r7, #20]
   return(result);
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1e6      	bne.n	8007482 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074b6:	2200      	movs	r2, #0
 80074b8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d107      	bne.n	80074d2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80074c8:	4619      	mov	r1, r3
 80074ca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80074cc:	f7ff f908 	bl	80066e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80074d0:	e002      	b.n	80074d8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80074d2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80074d4:	f7ff f8e6 	bl	80066a4 <HAL_UART_RxCpltCallback>
}
 80074d8:	bf00      	nop
 80074da:	3770      	adds	r7, #112	@ 0x70
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ec:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2201      	movs	r2, #1
 80074f2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d109      	bne.n	8007510 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007502:	085b      	lsrs	r3, r3, #1
 8007504:	b29b      	uxth	r3, r3
 8007506:	4619      	mov	r1, r3
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f7ff f8e9 	bl	80066e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800750e:	e002      	b.n	8007516 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f7ff f8d1 	bl	80066b8 <HAL_UART_RxHalfCpltCallback>
}
 8007516:	bf00      	nop
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b086      	sub	sp, #24
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800752a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007532:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800753a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007546:	2b80      	cmp	r3, #128	@ 0x80
 8007548:	d109      	bne.n	800755e <UART_DMAError+0x40>
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	2b21      	cmp	r3, #33	@ 0x21
 800754e:	d106      	bne.n	800755e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	2200      	movs	r2, #0
 8007554:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007558:	6978      	ldr	r0, [r7, #20]
 800755a:	f7ff fe29 	bl	80071b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007568:	2b40      	cmp	r3, #64	@ 0x40
 800756a:	d109      	bne.n	8007580 <UART_DMAError+0x62>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2b22      	cmp	r3, #34	@ 0x22
 8007570:	d106      	bne.n	8007580 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2200      	movs	r2, #0
 8007576:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800757a:	6978      	ldr	r0, [r7, #20]
 800757c:	f7ff fe59 	bl	8007232 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007586:	f043 0210 	orr.w	r2, r3, #16
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007590:	6978      	ldr	r0, [r7, #20]
 8007592:	f7ff f89b 	bl	80066cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007596:	bf00      	nop
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b084      	sub	sp, #16
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f7ff f889 	bl	80066cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075ba:	bf00      	nop
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b088      	sub	sp, #32
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	e853 3f00 	ldrex	r3, [r3]
 80075d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075de:	61fb      	str	r3, [r7, #28]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	461a      	mov	r2, r3
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	61bb      	str	r3, [r7, #24]
 80075ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ec:	6979      	ldr	r1, [r7, #20]
 80075ee:	69ba      	ldr	r2, [r7, #24]
 80075f0:	e841 2300 	strex	r3, r2, [r1]
 80075f4:	613b      	str	r3, [r7, #16]
   return(result);
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1e6      	bne.n	80075ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2220      	movs	r2, #32
 8007600:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7ff f836 	bl	800667c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007610:	bf00      	nop
 8007612:	3720      	adds	r7, #32
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007662:	2b01      	cmp	r3, #1
 8007664:	d101      	bne.n	800766a <HAL_UARTEx_DisableFifoMode+0x16>
 8007666:	2302      	movs	r3, #2
 8007668:	e027      	b.n	80076ba <HAL_UARTEx_DisableFifoMode+0x66>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2224      	movs	r2, #36	@ 0x24
 8007676:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f022 0201 	bic.w	r2, r2, #1
 8007690:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007698:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2220      	movs	r2, #32
 80076ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d101      	bne.n	80076de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80076da:	2302      	movs	r3, #2
 80076dc:	e02d      	b.n	800773a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2224      	movs	r2, #36	@ 0x24
 80076ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f022 0201 	bic.w	r2, r2, #1
 8007704:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f850 	bl	80077c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2220      	movs	r2, #32
 800772c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b084      	sub	sp, #16
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007752:	2b01      	cmp	r3, #1
 8007754:	d101      	bne.n	800775a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007756:	2302      	movs	r3, #2
 8007758:	e02d      	b.n	80077b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2224      	movs	r2, #36	@ 0x24
 8007766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f022 0201 	bic.w	r2, r2, #1
 8007780:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	430a      	orrs	r2, r1
 8007794:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f812 	bl	80077c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2220      	movs	r2, #32
 80077a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
	...

080077c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d108      	bne.n	80077e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80077e0:	e031      	b.n	8007846 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80077e2:	2308      	movs	r3, #8
 80077e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80077e6:	2308      	movs	r3, #8
 80077e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	0e5b      	lsrs	r3, r3, #25
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	f003 0307 	and.w	r3, r3, #7
 80077f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	0f5b      	lsrs	r3, r3, #29
 8007802:	b2db      	uxtb	r3, r3
 8007804:	f003 0307 	and.w	r3, r3, #7
 8007808:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800780a:	7bbb      	ldrb	r3, [r7, #14]
 800780c:	7b3a      	ldrb	r2, [r7, #12]
 800780e:	4911      	ldr	r1, [pc, #68]	@ (8007854 <UARTEx_SetNbDataToProcess+0x94>)
 8007810:	5c8a      	ldrb	r2, [r1, r2]
 8007812:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007816:	7b3a      	ldrb	r2, [r7, #12]
 8007818:	490f      	ldr	r1, [pc, #60]	@ (8007858 <UARTEx_SetNbDataToProcess+0x98>)
 800781a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800781c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007820:	b29a      	uxth	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007828:	7bfb      	ldrb	r3, [r7, #15]
 800782a:	7b7a      	ldrb	r2, [r7, #13]
 800782c:	4909      	ldr	r1, [pc, #36]	@ (8007854 <UARTEx_SetNbDataToProcess+0x94>)
 800782e:	5c8a      	ldrb	r2, [r1, r2]
 8007830:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007834:	7b7a      	ldrb	r2, [r7, #13]
 8007836:	4908      	ldr	r1, [pc, #32]	@ (8007858 <UARTEx_SetNbDataToProcess+0x98>)
 8007838:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800783a:	fb93 f3f2 	sdiv	r3, r3, r2
 800783e:	b29a      	uxth	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007846:	bf00      	nop
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	080185ac 	.word	0x080185ac
 8007858:	080185b4 	.word	0x080185b4

0800785c <__NVIC_SetPriority>:
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	4603      	mov	r3, r0
 8007864:	6039      	str	r1, [r7, #0]
 8007866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800786c:	2b00      	cmp	r3, #0
 800786e:	db0a      	blt.n	8007886 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	b2da      	uxtb	r2, r3
 8007874:	490c      	ldr	r1, [pc, #48]	@ (80078a8 <__NVIC_SetPriority+0x4c>)
 8007876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800787a:	0112      	lsls	r2, r2, #4
 800787c:	b2d2      	uxtb	r2, r2
 800787e:	440b      	add	r3, r1
 8007880:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007884:	e00a      	b.n	800789c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	b2da      	uxtb	r2, r3
 800788a:	4908      	ldr	r1, [pc, #32]	@ (80078ac <__NVIC_SetPriority+0x50>)
 800788c:	79fb      	ldrb	r3, [r7, #7]
 800788e:	f003 030f 	and.w	r3, r3, #15
 8007892:	3b04      	subs	r3, #4
 8007894:	0112      	lsls	r2, r2, #4
 8007896:	b2d2      	uxtb	r2, r2
 8007898:	440b      	add	r3, r1
 800789a:	761a      	strb	r2, [r3, #24]
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	e000e100 	.word	0xe000e100
 80078ac:	e000ed00 	.word	0xe000ed00

080078b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80078b0:	b580      	push	{r7, lr}
 80078b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80078b4:	4b05      	ldr	r3, [pc, #20]	@ (80078cc <SysTick_Handler+0x1c>)
 80078b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80078b8:	f001 fd40 	bl	800933c <xTaskGetSchedulerState>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d001      	beq.n	80078c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80078c2:	f002 fb39 	bl	8009f38 <xPortSysTickHandler>
  }
}
 80078c6:	bf00      	nop
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	e000e010 	.word	0xe000e010

080078d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80078d0:	b580      	push	{r7, lr}
 80078d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80078d4:	2100      	movs	r1, #0
 80078d6:	f06f 0004 	mvn.w	r0, #4
 80078da:	f7ff ffbf 	bl	800785c <__NVIC_SetPriority>
#endif
}
 80078de:	bf00      	nop
 80078e0:	bd80      	pop	{r7, pc}
	...

080078e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078ea:	f3ef 8305 	mrs	r3, IPSR
 80078ee:	603b      	str	r3, [r7, #0]
  return(result);
 80078f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80078f6:	f06f 0305 	mvn.w	r3, #5
 80078fa:	607b      	str	r3, [r7, #4]
 80078fc:	e00c      	b.n	8007918 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80078fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007928 <osKernelInitialize+0x44>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d105      	bne.n	8007912 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007906:	4b08      	ldr	r3, [pc, #32]	@ (8007928 <osKernelInitialize+0x44>)
 8007908:	2201      	movs	r2, #1
 800790a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800790c:	2300      	movs	r3, #0
 800790e:	607b      	str	r3, [r7, #4]
 8007910:	e002      	b.n	8007918 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007912:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007916:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007918:	687b      	ldr	r3, [r7, #4]
}
 800791a:	4618      	mov	r0, r3
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	20004ae8 	.word	0x20004ae8

0800792c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007932:	f3ef 8305 	mrs	r3, IPSR
 8007936:	603b      	str	r3, [r7, #0]
  return(result);
 8007938:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800793a:	2b00      	cmp	r3, #0
 800793c:	d003      	beq.n	8007946 <osKernelStart+0x1a>
    stat = osErrorISR;
 800793e:	f06f 0305 	mvn.w	r3, #5
 8007942:	607b      	str	r3, [r7, #4]
 8007944:	e010      	b.n	8007968 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007946:	4b0b      	ldr	r3, [pc, #44]	@ (8007974 <osKernelStart+0x48>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d109      	bne.n	8007962 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800794e:	f7ff ffbf 	bl	80078d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007952:	4b08      	ldr	r3, [pc, #32]	@ (8007974 <osKernelStart+0x48>)
 8007954:	2202      	movs	r2, #2
 8007956:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007958:	f001 f87a 	bl	8008a50 <vTaskStartScheduler>
      stat = osOK;
 800795c:	2300      	movs	r3, #0
 800795e:	607b      	str	r3, [r7, #4]
 8007960:	e002      	b.n	8007968 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007962:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007966:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007968:	687b      	ldr	r3, [r7, #4]
}
 800796a:	4618      	mov	r0, r3
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	20004ae8 	.word	0x20004ae8

08007978 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007978:	b580      	push	{r7, lr}
 800797a:	b08e      	sub	sp, #56	@ 0x38
 800797c:	af04      	add	r7, sp, #16
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007984:	2300      	movs	r3, #0
 8007986:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007988:	f3ef 8305 	mrs	r3, IPSR
 800798c:	617b      	str	r3, [r7, #20]
  return(result);
 800798e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007990:	2b00      	cmp	r3, #0
 8007992:	d17e      	bne.n	8007a92 <osThreadNew+0x11a>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d07b      	beq.n	8007a92 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800799a:	2380      	movs	r3, #128	@ 0x80
 800799c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800799e:	2318      	movs	r3, #24
 80079a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80079a2:	2300      	movs	r3, #0
 80079a4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80079a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80079aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d045      	beq.n	8007a3e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d002      	beq.n	80079c0 <osThreadNew+0x48>
        name = attr->name;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d002      	beq.n	80079ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d008      	beq.n	80079e6 <osThreadNew+0x6e>
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	2b38      	cmp	r3, #56	@ 0x38
 80079d8:	d805      	bhi.n	80079e6 <osThreadNew+0x6e>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <osThreadNew+0x72>
        return (NULL);
 80079e6:	2300      	movs	r3, #0
 80079e8:	e054      	b.n	8007a94 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d003      	beq.n	80079fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	089b      	lsrs	r3, r3, #2
 80079f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00e      	beq.n	8007a20 <osThreadNew+0xa8>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	2b5b      	cmp	r3, #91	@ 0x5b
 8007a08:	d90a      	bls.n	8007a20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d006      	beq.n	8007a20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d002      	beq.n	8007a20 <osThreadNew+0xa8>
        mem = 1;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	61bb      	str	r3, [r7, #24]
 8007a1e:	e010      	b.n	8007a42 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10c      	bne.n	8007a42 <osThreadNew+0xca>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d108      	bne.n	8007a42 <osThreadNew+0xca>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d104      	bne.n	8007a42 <osThreadNew+0xca>
          mem = 0;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	61bb      	str	r3, [r7, #24]
 8007a3c:	e001      	b.n	8007a42 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d110      	bne.n	8007a6a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a50:	9202      	str	r2, [sp, #8]
 8007a52:	9301      	str	r3, [sp, #4]
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	6a3a      	ldr	r2, [r7, #32]
 8007a5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 fe1a 	bl	8008698 <xTaskCreateStatic>
 8007a64:	4603      	mov	r3, r0
 8007a66:	613b      	str	r3, [r7, #16]
 8007a68:	e013      	b.n	8007a92 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d110      	bne.n	8007a92 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a70:	6a3b      	ldr	r3, [r7, #32]
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	f107 0310 	add.w	r3, r7, #16
 8007a78:	9301      	str	r3, [sp, #4]
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f000 fe68 	bl	8008758 <xTaskCreate>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d001      	beq.n	8007a92 <osThreadNew+0x11a>
            hTask = NULL;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a92:	693b      	ldr	r3, [r7, #16]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3728      	adds	r7, #40	@ 0x28
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007aa4:	f3ef 8305 	mrs	r3, IPSR
 8007aa8:	60bb      	str	r3, [r7, #8]
  return(result);
 8007aaa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d003      	beq.n	8007ab8 <osDelay+0x1c>
    stat = osErrorISR;
 8007ab0:	f06f 0305 	mvn.w	r3, #5
 8007ab4:	60fb      	str	r3, [r7, #12]
 8007ab6:	e007      	b.n	8007ac8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 ff8e 	bl	80089e4 <vTaskDelay>
    }
  }

  return (stat);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
	...

08007ad4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	4a07      	ldr	r2, [pc, #28]	@ (8007b00 <vApplicationGetIdleTaskMemory+0x2c>)
 8007ae4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	4a06      	ldr	r2, [pc, #24]	@ (8007b04 <vApplicationGetIdleTaskMemory+0x30>)
 8007aea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2280      	movs	r2, #128	@ 0x80
 8007af0:	601a      	str	r2, [r3, #0]
}
 8007af2:	bf00      	nop
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	20004aec 	.word	0x20004aec
 8007b04:	20004b48 	.word	0x20004b48

08007b08 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4a07      	ldr	r2, [pc, #28]	@ (8007b34 <vApplicationGetTimerTaskMemory+0x2c>)
 8007b18:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	4a06      	ldr	r2, [pc, #24]	@ (8007b38 <vApplicationGetTimerTaskMemory+0x30>)
 8007b1e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b26:	601a      	str	r2, [r3, #0]
}
 8007b28:	bf00      	nop
 8007b2a:	3714      	adds	r7, #20
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	20004d48 	.word	0x20004d48
 8007b38:	20004da4 	.word	0x20004da4

08007b3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f103 0208 	add.w	r2, r3, #8
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f103 0208 	add.w	r2, r3, #8
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f103 0208 	add.w	r2, r3, #8
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b8a:	bf00      	nop
 8007b8c:	370c      	adds	r7, #12
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr

08007b96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b96:	b480      	push	{r7}
 8007b98:	b085      	sub	sp, #20
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	689a      	ldr	r2, [r3, #8]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	683a      	ldr	r2, [r7, #0]
 8007bba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	601a      	str	r2, [r3, #0]
}
 8007bd2:	bf00      	nop
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr

08007bde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bde:	b480      	push	{r7}
 8007be0:	b085      	sub	sp, #20
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
 8007be6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bf4:	d103      	bne.n	8007bfe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	60fb      	str	r3, [r7, #12]
 8007bfc:	e00c      	b.n	8007c18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	3308      	adds	r3, #8
 8007c02:	60fb      	str	r3, [r7, #12]
 8007c04:	e002      	b.n	8007c0c <vListInsert+0x2e>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	60fb      	str	r3, [r7, #12]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d2f6      	bcs.n	8007c06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	685a      	ldr	r2, [r3, #4]
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	683a      	ldr	r2, [r7, #0]
 8007c26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	1c5a      	adds	r2, r3, #1
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	601a      	str	r2, [r3, #0]
}
 8007c44:	bf00      	nop
 8007c46:	3714      	adds	r7, #20
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	6892      	ldr	r2, [r2, #8]
 8007c66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	6852      	ldr	r2, [r2, #4]
 8007c70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d103      	bne.n	8007c84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	689a      	ldr	r2, [r3, #8]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	1e5a      	subs	r2, r3, #1
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3714      	adds	r7, #20
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10b      	bne.n	8007cd0 <xQueueGenericReset+0x2c>
	__asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	60bb      	str	r3, [r7, #8]
}
 8007cca:	bf00      	nop
 8007ccc:	bf00      	nop
 8007cce:	e7fd      	b.n	8007ccc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007cd0:	f002 f8a2 	bl	8009e18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cdc:	68f9      	ldr	r1, [r7, #12]
 8007cde:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007ce0:	fb01 f303 	mul.w	r3, r1, r3
 8007ce4:	441a      	add	r2, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d00:	3b01      	subs	r3, #1
 8007d02:	68f9      	ldr	r1, [r7, #12]
 8007d04:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007d06:	fb01 f303 	mul.w	r3, r1, r3
 8007d0a:	441a      	add	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	22ff      	movs	r2, #255	@ 0xff
 8007d14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	22ff      	movs	r2, #255	@ 0xff
 8007d1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d114      	bne.n	8007d50 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d01a      	beq.n	8007d64 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	3310      	adds	r3, #16
 8007d32:	4618      	mov	r0, r3
 8007d34:	f001 f91a 	bl	8008f6c <xTaskRemoveFromEventList>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d012      	beq.n	8007d64 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d74 <xQueueGenericReset+0xd0>)
 8007d40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d44:	601a      	str	r2, [r3, #0]
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	f3bf 8f6f 	isb	sy
 8007d4e:	e009      	b.n	8007d64 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	3310      	adds	r3, #16
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7ff fef1 	bl	8007b3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	3324      	adds	r3, #36	@ 0x24
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7ff feec 	bl	8007b3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d64:	f002 f88a 	bl	8009e7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d68:	2301      	movs	r3, #1
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	e000ed04 	.word	0xe000ed04

08007d78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b08e      	sub	sp, #56	@ 0x38
 8007d7c:	af02      	add	r7, sp, #8
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	607a      	str	r2, [r7, #4]
 8007d84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10b      	bne.n	8007da4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d90:	f383 8811 	msr	BASEPRI, r3
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007d9e:	bf00      	nop
 8007da0:	bf00      	nop
 8007da2:	e7fd      	b.n	8007da0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10b      	bne.n	8007dc2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007dbc:	bf00      	nop
 8007dbe:	bf00      	nop
 8007dc0:	e7fd      	b.n	8007dbe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d002      	beq.n	8007dce <xQueueGenericCreateStatic+0x56>
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d001      	beq.n	8007dd2 <xQueueGenericCreateStatic+0x5a>
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e000      	b.n	8007dd4 <xQueueGenericCreateStatic+0x5c>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10b      	bne.n	8007df0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ddc:	f383 8811 	msr	BASEPRI, r3
 8007de0:	f3bf 8f6f 	isb	sy
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	623b      	str	r3, [r7, #32]
}
 8007dea:	bf00      	nop
 8007dec:	bf00      	nop
 8007dee:	e7fd      	b.n	8007dec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d102      	bne.n	8007dfc <xQueueGenericCreateStatic+0x84>
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d101      	bne.n	8007e00 <xQueueGenericCreateStatic+0x88>
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e000      	b.n	8007e02 <xQueueGenericCreateStatic+0x8a>
 8007e00:	2300      	movs	r3, #0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10b      	bne.n	8007e1e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e0a:	f383 8811 	msr	BASEPRI, r3
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	f3bf 8f4f 	dsb	sy
 8007e16:	61fb      	str	r3, [r7, #28]
}
 8007e18:	bf00      	nop
 8007e1a:	bf00      	nop
 8007e1c:	e7fd      	b.n	8007e1a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e1e:	2350      	movs	r3, #80	@ 0x50
 8007e20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	2b50      	cmp	r3, #80	@ 0x50
 8007e26:	d00b      	beq.n	8007e40 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e2c:	f383 8811 	msr	BASEPRI, r3
 8007e30:	f3bf 8f6f 	isb	sy
 8007e34:	f3bf 8f4f 	dsb	sy
 8007e38:	61bb      	str	r3, [r7, #24]
}
 8007e3a:	bf00      	nop
 8007e3c:	bf00      	nop
 8007e3e:	e7fd      	b.n	8007e3c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e40:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00d      	beq.n	8007e68 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e54:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	68b9      	ldr	r1, [r7, #8]
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f000 f805 	bl	8007e72 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3730      	adds	r7, #48	@ 0x30
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b084      	sub	sp, #16
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	60f8      	str	r0, [r7, #12]
 8007e7a:	60b9      	str	r1, [r7, #8]
 8007e7c:	607a      	str	r2, [r7, #4]
 8007e7e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d103      	bne.n	8007e8e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	69ba      	ldr	r2, [r7, #24]
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	e002      	b.n	8007e94 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	69b8      	ldr	r0, [r7, #24]
 8007ea4:	f7ff fefe 	bl	8007ca4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	78fa      	ldrb	r2, [r7, #3]
 8007eac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007eb0:	bf00      	nop
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b08e      	sub	sp, #56	@ 0x38
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	607a      	str	r2, [r7, #4]
 8007ec4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10b      	bne.n	8007eec <xQueueGenericSend+0x34>
	__asm volatile
 8007ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed8:	f383 8811 	msr	BASEPRI, r3
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	f3bf 8f4f 	dsb	sy
 8007ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007ee6:	bf00      	nop
 8007ee8:	bf00      	nop
 8007eea:	e7fd      	b.n	8007ee8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d103      	bne.n	8007efa <xQueueGenericSend+0x42>
 8007ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <xQueueGenericSend+0x46>
 8007efa:	2301      	movs	r3, #1
 8007efc:	e000      	b.n	8007f00 <xQueueGenericSend+0x48>
 8007efe:	2300      	movs	r3, #0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10b      	bne.n	8007f1c <xQueueGenericSend+0x64>
	__asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007f16:	bf00      	nop
 8007f18:	bf00      	nop
 8007f1a:	e7fd      	b.n	8007f18 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d103      	bne.n	8007f2a <xQueueGenericSend+0x72>
 8007f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d101      	bne.n	8007f2e <xQueueGenericSend+0x76>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e000      	b.n	8007f30 <xQueueGenericSend+0x78>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10b      	bne.n	8007f4c <xQueueGenericSend+0x94>
	__asm volatile
 8007f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f38:	f383 8811 	msr	BASEPRI, r3
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	623b      	str	r3, [r7, #32]
}
 8007f46:	bf00      	nop
 8007f48:	bf00      	nop
 8007f4a:	e7fd      	b.n	8007f48 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f4c:	f001 f9f6 	bl	800933c <xTaskGetSchedulerState>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d102      	bne.n	8007f5c <xQueueGenericSend+0xa4>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d101      	bne.n	8007f60 <xQueueGenericSend+0xa8>
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e000      	b.n	8007f62 <xQueueGenericSend+0xaa>
 8007f60:	2300      	movs	r3, #0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10b      	bne.n	8007f7e <xQueueGenericSend+0xc6>
	__asm volatile
 8007f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	61fb      	str	r3, [r7, #28]
}
 8007f78:	bf00      	nop
 8007f7a:	bf00      	nop
 8007f7c:	e7fd      	b.n	8007f7a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f7e:	f001 ff4b 	bl	8009e18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d302      	bcc.n	8007f94 <xQueueGenericSend+0xdc>
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d129      	bne.n	8007fe8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	68b9      	ldr	r1, [r7, #8]
 8007f98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f9a:	f000 fa0f 	bl	80083bc <prvCopyDataToQueue>
 8007f9e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d010      	beq.n	8007fca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007faa:	3324      	adds	r3, #36	@ 0x24
 8007fac:	4618      	mov	r0, r3
 8007fae:	f000 ffdd 	bl	8008f6c <xTaskRemoveFromEventList>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d013      	beq.n	8007fe0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007fb8:	4b3f      	ldr	r3, [pc, #252]	@ (80080b8 <xQueueGenericSend+0x200>)
 8007fba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fbe:	601a      	str	r2, [r3, #0]
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	e00a      	b.n	8007fe0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d007      	beq.n	8007fe0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007fd0:	4b39      	ldr	r3, [pc, #228]	@ (80080b8 <xQueueGenericSend+0x200>)
 8007fd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007fe0:	f001 ff4c 	bl	8009e7c <vPortExitCritical>
				return pdPASS;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e063      	b.n	80080b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d103      	bne.n	8007ff6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fee:	f001 ff45 	bl	8009e7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	e05c      	b.n	80080b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d106      	bne.n	800800a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ffc:	f107 0314 	add.w	r3, r7, #20
 8008000:	4618      	mov	r0, r3
 8008002:	f001 f83f 	bl	8009084 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008006:	2301      	movs	r3, #1
 8008008:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800800a:	f001 ff37 	bl	8009e7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800800e:	f000 fd87 	bl	8008b20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008012:	f001 ff01 	bl	8009e18 <vPortEnterCritical>
 8008016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008018:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800801c:	b25b      	sxtb	r3, r3
 800801e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008022:	d103      	bne.n	800802c <xQueueGenericSend+0x174>
 8008024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008026:	2200      	movs	r2, #0
 8008028:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800802c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008032:	b25b      	sxtb	r3, r3
 8008034:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008038:	d103      	bne.n	8008042 <xQueueGenericSend+0x18a>
 800803a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803c:	2200      	movs	r2, #0
 800803e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008042:	f001 ff1b 	bl	8009e7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008046:	1d3a      	adds	r2, r7, #4
 8008048:	f107 0314 	add.w	r3, r7, #20
 800804c:	4611      	mov	r1, r2
 800804e:	4618      	mov	r0, r3
 8008050:	f001 f82e 	bl	80090b0 <xTaskCheckForTimeOut>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d124      	bne.n	80080a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800805a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800805c:	f000 faa6 	bl	80085ac <prvIsQueueFull>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d018      	beq.n	8008098 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008068:	3310      	adds	r3, #16
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	4611      	mov	r1, r2
 800806e:	4618      	mov	r0, r3
 8008070:	f000 ff2a 	bl	8008ec8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008074:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008076:	f000 fa31 	bl	80084dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800807a:	f000 fd5f 	bl	8008b3c <xTaskResumeAll>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	f47f af7c 	bne.w	8007f7e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008086:	4b0c      	ldr	r3, [pc, #48]	@ (80080b8 <xQueueGenericSend+0x200>)
 8008088:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	e772      	b.n	8007f7e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008098:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800809a:	f000 fa1f 	bl	80084dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800809e:	f000 fd4d 	bl	8008b3c <xTaskResumeAll>
 80080a2:	e76c      	b.n	8007f7e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80080a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080a6:	f000 fa19 	bl	80084dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080aa:	f000 fd47 	bl	8008b3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80080ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3738      	adds	r7, #56	@ 0x38
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	e000ed04 	.word	0xe000ed04

080080bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b090      	sub	sp, #64	@ 0x40
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]
 80080c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80080ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10b      	bne.n	80080ec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80080d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80080e6:	bf00      	nop
 80080e8:	bf00      	nop
 80080ea:	e7fd      	b.n	80080e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d103      	bne.n	80080fa <xQueueGenericSendFromISR+0x3e>
 80080f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <xQueueGenericSendFromISR+0x42>
 80080fa:	2301      	movs	r3, #1
 80080fc:	e000      	b.n	8008100 <xQueueGenericSendFromISR+0x44>
 80080fe:	2300      	movs	r3, #0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10b      	bne.n	800811c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008116:	bf00      	nop
 8008118:	bf00      	nop
 800811a:	e7fd      	b.n	8008118 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	2b02      	cmp	r3, #2
 8008120:	d103      	bne.n	800812a <xQueueGenericSendFromISR+0x6e>
 8008122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008126:	2b01      	cmp	r3, #1
 8008128:	d101      	bne.n	800812e <xQueueGenericSendFromISR+0x72>
 800812a:	2301      	movs	r3, #1
 800812c:	e000      	b.n	8008130 <xQueueGenericSendFromISR+0x74>
 800812e:	2300      	movs	r3, #0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10b      	bne.n	800814c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	623b      	str	r3, [r7, #32]
}
 8008146:	bf00      	nop
 8008148:	bf00      	nop
 800814a:	e7fd      	b.n	8008148 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800814c:	f001 ff44 	bl	8009fd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008150:	f3ef 8211 	mrs	r2, BASEPRI
 8008154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008158:	f383 8811 	msr	BASEPRI, r3
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	61fa      	str	r2, [r7, #28]
 8008166:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008168:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800816a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800816c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800816e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008174:	429a      	cmp	r2, r3
 8008176:	d302      	bcc.n	800817e <xQueueGenericSendFromISR+0xc2>
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	2b02      	cmp	r3, #2
 800817c:	d12f      	bne.n	80081de <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800817e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008180:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008184:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800818a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800818c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	68b9      	ldr	r1, [r7, #8]
 8008192:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008194:	f000 f912 	bl	80083bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008198:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800819c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081a0:	d112      	bne.n	80081c8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d016      	beq.n	80081d8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ac:	3324      	adds	r3, #36	@ 0x24
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 fedc 	bl	8008f6c <xTaskRemoveFromEventList>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00e      	beq.n	80081d8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00b      	beq.n	80081d8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	e007      	b.n	80081d8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80081cc:	3301      	adds	r3, #1
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	b25a      	sxtb	r2, r3
 80081d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80081d8:	2301      	movs	r3, #1
 80081da:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80081dc:	e001      	b.n	80081e2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081de:	2300      	movs	r3, #0
 80081e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081e4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80081ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3740      	adds	r7, #64	@ 0x40
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b08c      	sub	sp, #48	@ 0x30
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008204:	2300      	movs	r3, #0
 8008206:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800820c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10b      	bne.n	800822a <xQueueReceive+0x32>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	623b      	str	r3, [r7, #32]
}
 8008224:	bf00      	nop
 8008226:	bf00      	nop
 8008228:	e7fd      	b.n	8008226 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d103      	bne.n	8008238 <xQueueReceive+0x40>
 8008230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008234:	2b00      	cmp	r3, #0
 8008236:	d101      	bne.n	800823c <xQueueReceive+0x44>
 8008238:	2301      	movs	r3, #1
 800823a:	e000      	b.n	800823e <xQueueReceive+0x46>
 800823c:	2300      	movs	r3, #0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d10b      	bne.n	800825a <xQueueReceive+0x62>
	__asm volatile
 8008242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008246:	f383 8811 	msr	BASEPRI, r3
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	61fb      	str	r3, [r7, #28]
}
 8008254:	bf00      	nop
 8008256:	bf00      	nop
 8008258:	e7fd      	b.n	8008256 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800825a:	f001 f86f 	bl	800933c <xTaskGetSchedulerState>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d102      	bne.n	800826a <xQueueReceive+0x72>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <xQueueReceive+0x76>
 800826a:	2301      	movs	r3, #1
 800826c:	e000      	b.n	8008270 <xQueueReceive+0x78>
 800826e:	2300      	movs	r3, #0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10b      	bne.n	800828c <xQueueReceive+0x94>
	__asm volatile
 8008274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008278:	f383 8811 	msr	BASEPRI, r3
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	61bb      	str	r3, [r7, #24]
}
 8008286:	bf00      	nop
 8008288:	bf00      	nop
 800828a:	e7fd      	b.n	8008288 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800828c:	f001 fdc4 	bl	8009e18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008294:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008298:	2b00      	cmp	r3, #0
 800829a:	d01f      	beq.n	80082dc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800829c:	68b9      	ldr	r1, [r7, #8]
 800829e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082a0:	f000 f8f6 	bl	8008490 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a6:	1e5a      	subs	r2, r3, #1
 80082a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082aa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00f      	beq.n	80082d4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b6:	3310      	adds	r3, #16
 80082b8:	4618      	mov	r0, r3
 80082ba:	f000 fe57 	bl	8008f6c <xTaskRemoveFromEventList>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d007      	beq.n	80082d4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082c4:	4b3c      	ldr	r3, [pc, #240]	@ (80083b8 <xQueueReceive+0x1c0>)
 80082c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082ca:	601a      	str	r2, [r3, #0]
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082d4:	f001 fdd2 	bl	8009e7c <vPortExitCritical>
				return pdPASS;
 80082d8:	2301      	movs	r3, #1
 80082da:	e069      	b.n	80083b0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d103      	bne.n	80082ea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082e2:	f001 fdcb 	bl	8009e7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082e6:	2300      	movs	r3, #0
 80082e8:	e062      	b.n	80083b0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d106      	bne.n	80082fe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082f0:	f107 0310 	add.w	r3, r7, #16
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 fec5 	bl	8009084 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082fa:	2301      	movs	r3, #1
 80082fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082fe:	f001 fdbd 	bl	8009e7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008302:	f000 fc0d 	bl	8008b20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008306:	f001 fd87 	bl	8009e18 <vPortEnterCritical>
 800830a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800830c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008310:	b25b      	sxtb	r3, r3
 8008312:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008316:	d103      	bne.n	8008320 <xQueueReceive+0x128>
 8008318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800831a:	2200      	movs	r2, #0
 800831c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008322:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008326:	b25b      	sxtb	r3, r3
 8008328:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800832c:	d103      	bne.n	8008336 <xQueueReceive+0x13e>
 800832e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008330:	2200      	movs	r2, #0
 8008332:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008336:	f001 fda1 	bl	8009e7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800833a:	1d3a      	adds	r2, r7, #4
 800833c:	f107 0310 	add.w	r3, r7, #16
 8008340:	4611      	mov	r1, r2
 8008342:	4618      	mov	r0, r3
 8008344:	f000 feb4 	bl	80090b0 <xTaskCheckForTimeOut>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d123      	bne.n	8008396 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800834e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008350:	f000 f916 	bl	8008580 <prvIsQueueEmpty>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d017      	beq.n	800838a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800835a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835c:	3324      	adds	r3, #36	@ 0x24
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	4611      	mov	r1, r2
 8008362:	4618      	mov	r0, r3
 8008364:	f000 fdb0 	bl	8008ec8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008368:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800836a:	f000 f8b7 	bl	80084dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800836e:	f000 fbe5 	bl	8008b3c <xTaskResumeAll>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d189      	bne.n	800828c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008378:	4b0f      	ldr	r3, [pc, #60]	@ (80083b8 <xQueueReceive+0x1c0>)
 800837a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	f3bf 8f6f 	isb	sy
 8008388:	e780      	b.n	800828c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800838a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800838c:	f000 f8a6 	bl	80084dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008390:	f000 fbd4 	bl	8008b3c <xTaskResumeAll>
 8008394:	e77a      	b.n	800828c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008396:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008398:	f000 f8a0 	bl	80084dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800839c:	f000 fbce 	bl	8008b3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083a2:	f000 f8ed 	bl	8008580 <prvIsQueueEmpty>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f43f af6f 	beq.w	800828c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3730      	adds	r7, #48	@ 0x30
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	e000ed04 	.word	0xe000ed04

080083bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80083c8:	2300      	movs	r3, #0
 80083ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10d      	bne.n	80083f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d14d      	bne.n	800847e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 ffc6 	bl	8009378 <xTaskPriorityDisinherit>
 80083ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	609a      	str	r2, [r3, #8]
 80083f4:	e043      	b.n	800847e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d119      	bne.n	8008430 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6858      	ldr	r0, [r3, #4]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008404:	461a      	mov	r2, r3
 8008406:	68b9      	ldr	r1, [r7, #8]
 8008408:	f00f f97f 	bl	801770a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	685a      	ldr	r2, [r3, #4]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008414:	441a      	add	r2, r3
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	685a      	ldr	r2, [r3, #4]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	429a      	cmp	r2, r3
 8008424:	d32b      	bcc.n	800847e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	605a      	str	r2, [r3, #4]
 800842e:	e026      	b.n	800847e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	68d8      	ldr	r0, [r3, #12]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008438:	461a      	mov	r2, r3
 800843a:	68b9      	ldr	r1, [r7, #8]
 800843c:	f00f f965 	bl	801770a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	68da      	ldr	r2, [r3, #12]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008448:	425b      	negs	r3, r3
 800844a:	441a      	add	r2, r3
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	68da      	ldr	r2, [r3, #12]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	429a      	cmp	r2, r3
 800845a:	d207      	bcs.n	800846c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	689a      	ldr	r2, [r3, #8]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008464:	425b      	negs	r3, r3
 8008466:	441a      	add	r2, r3
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b02      	cmp	r3, #2
 8008470:	d105      	bne.n	800847e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	3b01      	subs	r3, #1
 800847c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	1c5a      	adds	r2, r3, #1
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008486:	697b      	ldr	r3, [r7, #20]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3718      	adds	r7, #24
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d018      	beq.n	80084d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	68da      	ldr	r2, [r3, #12]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084aa:	441a      	add	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	68da      	ldr	r2, [r3, #12]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d303      	bcc.n	80084c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	68d9      	ldr	r1, [r3, #12]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084cc:	461a      	mov	r2, r3
 80084ce:	6838      	ldr	r0, [r7, #0]
 80084d0:	f00f f91b 	bl	801770a <memcpy>
	}
}
 80084d4:	bf00      	nop
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084e4:	f001 fc98 	bl	8009e18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084f0:	e011      	b.n	8008516 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d012      	beq.n	8008520 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	3324      	adds	r3, #36	@ 0x24
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 fd34 	bl	8008f6c <xTaskRemoveFromEventList>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d001      	beq.n	800850e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800850a:	f000 fe35 	bl	8009178 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	3b01      	subs	r3, #1
 8008512:	b2db      	uxtb	r3, r3
 8008514:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800851a:	2b00      	cmp	r3, #0
 800851c:	dce9      	bgt.n	80084f2 <prvUnlockQueue+0x16>
 800851e:	e000      	b.n	8008522 <prvUnlockQueue+0x46>
					break;
 8008520:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	22ff      	movs	r2, #255	@ 0xff
 8008526:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800852a:	f001 fca7 	bl	8009e7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800852e:	f001 fc73 	bl	8009e18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008538:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800853a:	e011      	b.n	8008560 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d012      	beq.n	800856a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	3310      	adds	r3, #16
 8008548:	4618      	mov	r0, r3
 800854a:	f000 fd0f 	bl	8008f6c <xTaskRemoveFromEventList>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d001      	beq.n	8008558 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008554:	f000 fe10 	bl	8009178 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008558:	7bbb      	ldrb	r3, [r7, #14]
 800855a:	3b01      	subs	r3, #1
 800855c:	b2db      	uxtb	r3, r3
 800855e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008560:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008564:	2b00      	cmp	r3, #0
 8008566:	dce9      	bgt.n	800853c <prvUnlockQueue+0x60>
 8008568:	e000      	b.n	800856c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800856a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	22ff      	movs	r2, #255	@ 0xff
 8008570:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008574:	f001 fc82 	bl	8009e7c <vPortExitCritical>
}
 8008578:	bf00      	nop
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008588:	f001 fc46 	bl	8009e18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008590:	2b00      	cmp	r3, #0
 8008592:	d102      	bne.n	800859a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008594:	2301      	movs	r3, #1
 8008596:	60fb      	str	r3, [r7, #12]
 8008598:	e001      	b.n	800859e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800859a:	2300      	movs	r3, #0
 800859c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800859e:	f001 fc6d 	bl	8009e7c <vPortExitCritical>

	return xReturn;
 80085a2:	68fb      	ldr	r3, [r7, #12]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085b4:	f001 fc30 	bl	8009e18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d102      	bne.n	80085ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80085c4:	2301      	movs	r3, #1
 80085c6:	60fb      	str	r3, [r7, #12]
 80085c8:	e001      	b.n	80085ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80085ca:	2300      	movs	r3, #0
 80085cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085ce:	f001 fc55 	bl	8009e7c <vPortExitCritical>

	return xReturn;
 80085d2:	68fb      	ldr	r3, [r7, #12]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085e6:	2300      	movs	r3, #0
 80085e8:	60fb      	str	r3, [r7, #12]
 80085ea:	e014      	b.n	8008616 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80085ec:	4a0f      	ldr	r2, [pc, #60]	@ (800862c <vQueueAddToRegistry+0x50>)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10b      	bne.n	8008610 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80085f8:	490c      	ldr	r1, [pc, #48]	@ (800862c <vQueueAddToRegistry+0x50>)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	683a      	ldr	r2, [r7, #0]
 80085fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008602:	4a0a      	ldr	r2, [pc, #40]	@ (800862c <vQueueAddToRegistry+0x50>)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	00db      	lsls	r3, r3, #3
 8008608:	4413      	add	r3, r2
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800860e:	e006      	b.n	800861e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	3301      	adds	r3, #1
 8008614:	60fb      	str	r3, [r7, #12]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2b07      	cmp	r3, #7
 800861a:	d9e7      	bls.n	80085ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800861c:	bf00      	nop
 800861e:	bf00      	nop
 8008620:	3714      	adds	r7, #20
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	200051a4 	.word	0x200051a4

08008630 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008640:	f001 fbea 	bl	8009e18 <vPortEnterCritical>
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800864a:	b25b      	sxtb	r3, r3
 800864c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008650:	d103      	bne.n	800865a <vQueueWaitForMessageRestricted+0x2a>
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008660:	b25b      	sxtb	r3, r3
 8008662:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008666:	d103      	bne.n	8008670 <vQueueWaitForMessageRestricted+0x40>
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008670:	f001 fc04 	bl	8009e7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008678:	2b00      	cmp	r3, #0
 800867a:	d106      	bne.n	800868a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	3324      	adds	r3, #36	@ 0x24
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	68b9      	ldr	r1, [r7, #8]
 8008684:	4618      	mov	r0, r3
 8008686:	f000 fc45 	bl	8008f14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800868a:	6978      	ldr	r0, [r7, #20]
 800868c:	f7ff ff26 	bl	80084dc <prvUnlockQueue>
	}
 8008690:	bf00      	nop
 8008692:	3718      	adds	r7, #24
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008698:	b580      	push	{r7, lr}
 800869a:	b08e      	sub	sp, #56	@ 0x38
 800869c:	af04      	add	r7, sp, #16
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	607a      	str	r2, [r7, #4]
 80086a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80086a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10b      	bne.n	80086c4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80086ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b0:	f383 8811 	msr	BASEPRI, r3
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	623b      	str	r3, [r7, #32]
}
 80086be:	bf00      	nop
 80086c0:	bf00      	nop
 80086c2:	e7fd      	b.n	80086c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80086c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10b      	bne.n	80086e2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80086ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ce:	f383 8811 	msr	BASEPRI, r3
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	61fb      	str	r3, [r7, #28]
}
 80086dc:	bf00      	nop
 80086de:	bf00      	nop
 80086e0:	e7fd      	b.n	80086de <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80086e2:	235c      	movs	r3, #92	@ 0x5c
 80086e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	2b5c      	cmp	r3, #92	@ 0x5c
 80086ea:	d00b      	beq.n	8008704 <xTaskCreateStatic+0x6c>
	__asm volatile
 80086ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f0:	f383 8811 	msr	BASEPRI, r3
 80086f4:	f3bf 8f6f 	isb	sy
 80086f8:	f3bf 8f4f 	dsb	sy
 80086fc:	61bb      	str	r3, [r7, #24]
}
 80086fe:	bf00      	nop
 8008700:	bf00      	nop
 8008702:	e7fd      	b.n	8008700 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008704:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008708:	2b00      	cmp	r3, #0
 800870a:	d01e      	beq.n	800874a <xTaskCreateStatic+0xb2>
 800870c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800870e:	2b00      	cmp	r3, #0
 8008710:	d01b      	beq.n	800874a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008714:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008718:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800871a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800871c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871e:	2202      	movs	r2, #2
 8008720:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008724:	2300      	movs	r3, #0
 8008726:	9303      	str	r3, [sp, #12]
 8008728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872a:	9302      	str	r3, [sp, #8]
 800872c:	f107 0314 	add.w	r3, r7, #20
 8008730:	9301      	str	r3, [sp, #4]
 8008732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	68b9      	ldr	r1, [r7, #8]
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 f850 	bl	80087e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008742:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008744:	f000 f8de 	bl	8008904 <prvAddNewTaskToReadyList>
 8008748:	e001      	b.n	800874e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800874a:	2300      	movs	r3, #0
 800874c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800874e:	697b      	ldr	r3, [r7, #20]
	}
 8008750:	4618      	mov	r0, r3
 8008752:	3728      	adds	r7, #40	@ 0x28
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008758:	b580      	push	{r7, lr}
 800875a:	b08c      	sub	sp, #48	@ 0x30
 800875c:	af04      	add	r7, sp, #16
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	603b      	str	r3, [r7, #0]
 8008764:	4613      	mov	r3, r2
 8008766:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008768:	88fb      	ldrh	r3, [r7, #6]
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4618      	mov	r0, r3
 800876e:	f001 fc75 	bl	800a05c <pvPortMalloc>
 8008772:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00e      	beq.n	8008798 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800877a:	205c      	movs	r0, #92	@ 0x5c
 800877c:	f001 fc6e 	bl	800a05c <pvPortMalloc>
 8008780:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d003      	beq.n	8008790 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	631a      	str	r2, [r3, #48]	@ 0x30
 800878e:	e005      	b.n	800879c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008790:	6978      	ldr	r0, [r7, #20]
 8008792:	f001 fd31 	bl	800a1f8 <vPortFree>
 8008796:	e001      	b.n	800879c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008798:	2300      	movs	r3, #0
 800879a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d017      	beq.n	80087d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087aa:	88fa      	ldrh	r2, [r7, #6]
 80087ac:	2300      	movs	r3, #0
 80087ae:	9303      	str	r3, [sp, #12]
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	9302      	str	r3, [sp, #8]
 80087b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087b6:	9301      	str	r3, [sp, #4]
 80087b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ba:	9300      	str	r3, [sp, #0]
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	68b9      	ldr	r1, [r7, #8]
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 f80e 	bl	80087e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087c6:	69f8      	ldr	r0, [r7, #28]
 80087c8:	f000 f89c 	bl	8008904 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087cc:	2301      	movs	r3, #1
 80087ce:	61bb      	str	r3, [r7, #24]
 80087d0:	e002      	b.n	80087d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80087d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087d8:	69bb      	ldr	r3, [r7, #24]
	}
 80087da:	4618      	mov	r0, r3
 80087dc:	3720      	adds	r7, #32
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b088      	sub	sp, #32
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	60f8      	str	r0, [r7, #12]
 80087ea:	60b9      	str	r1, [r7, #8]
 80087ec:	607a      	str	r2, [r7, #4]
 80087ee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80087f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	461a      	mov	r2, r3
 80087fa:	21a5      	movs	r1, #165	@ 0xa5
 80087fc:	f00e febc 	bl	8017578 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008802:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800880a:	3b01      	subs	r3, #1
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	4413      	add	r3, r2
 8008810:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	f023 0307 	bic.w	r3, r3, #7
 8008818:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	f003 0307 	and.w	r3, r3, #7
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00b      	beq.n	800883c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008828:	f383 8811 	msr	BASEPRI, r3
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	617b      	str	r3, [r7, #20]
}
 8008836:	bf00      	nop
 8008838:	bf00      	nop
 800883a:	e7fd      	b.n	8008838 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d01f      	beq.n	8008882 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008842:	2300      	movs	r3, #0
 8008844:	61fb      	str	r3, [r7, #28]
 8008846:	e012      	b.n	800886e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	4413      	add	r3, r2
 800884e:	7819      	ldrb	r1, [r3, #0]
 8008850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	4413      	add	r3, r2
 8008856:	3334      	adds	r3, #52	@ 0x34
 8008858:	460a      	mov	r2, r1
 800885a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800885c:	68ba      	ldr	r2, [r7, #8]
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	4413      	add	r3, r2
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d006      	beq.n	8008876 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	3301      	adds	r3, #1
 800886c:	61fb      	str	r3, [r7, #28]
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	2b0f      	cmp	r3, #15
 8008872:	d9e9      	bls.n	8008848 <prvInitialiseNewTask+0x66>
 8008874:	e000      	b.n	8008878 <prvInitialiseNewTask+0x96>
			{
				break;
 8008876:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887a:	2200      	movs	r2, #0
 800887c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008880:	e003      	b.n	800888a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008884:	2200      	movs	r2, #0
 8008886:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800888a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800888c:	2b37      	cmp	r3, #55	@ 0x37
 800888e:	d901      	bls.n	8008894 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008890:	2337      	movs	r3, #55	@ 0x37
 8008892:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008896:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008898:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800889a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800889e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80088a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a2:	2200      	movs	r2, #0
 80088a4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a8:	3304      	adds	r3, #4
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7ff f966 	bl	8007b7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b2:	3318      	adds	r3, #24
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7ff f961 	bl	8007b7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80088ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80088c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088ce:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80088d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d2:	2200      	movs	r2, #0
 80088d4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	68f9      	ldr	r1, [r7, #12]
 80088e2:	69b8      	ldr	r0, [r7, #24]
 80088e4:	f001 f966 	bl	8009bb4 <pxPortInitialiseStack>
 80088e8:	4602      	mov	r2, r0
 80088ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80088ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d002      	beq.n	80088fa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80088f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088fa:	bf00      	nop
 80088fc:	3720      	adds	r7, #32
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
	...

08008904 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800890c:	f001 fa84 	bl	8009e18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008910:	4b2d      	ldr	r3, [pc, #180]	@ (80089c8 <prvAddNewTaskToReadyList+0xc4>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	3301      	adds	r3, #1
 8008916:	4a2c      	ldr	r2, [pc, #176]	@ (80089c8 <prvAddNewTaskToReadyList+0xc4>)
 8008918:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800891a:	4b2c      	ldr	r3, [pc, #176]	@ (80089cc <prvAddNewTaskToReadyList+0xc8>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d109      	bne.n	8008936 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008922:	4a2a      	ldr	r2, [pc, #168]	@ (80089cc <prvAddNewTaskToReadyList+0xc8>)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008928:	4b27      	ldr	r3, [pc, #156]	@ (80089c8 <prvAddNewTaskToReadyList+0xc4>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d110      	bne.n	8008952 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008930:	f000 fc46 	bl	80091c0 <prvInitialiseTaskLists>
 8008934:	e00d      	b.n	8008952 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008936:	4b26      	ldr	r3, [pc, #152]	@ (80089d0 <prvAddNewTaskToReadyList+0xcc>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d109      	bne.n	8008952 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800893e:	4b23      	ldr	r3, [pc, #140]	@ (80089cc <prvAddNewTaskToReadyList+0xc8>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008948:	429a      	cmp	r2, r3
 800894a:	d802      	bhi.n	8008952 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800894c:	4a1f      	ldr	r2, [pc, #124]	@ (80089cc <prvAddNewTaskToReadyList+0xc8>)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008952:	4b20      	ldr	r3, [pc, #128]	@ (80089d4 <prvAddNewTaskToReadyList+0xd0>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	3301      	adds	r3, #1
 8008958:	4a1e      	ldr	r2, [pc, #120]	@ (80089d4 <prvAddNewTaskToReadyList+0xd0>)
 800895a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800895c:	4b1d      	ldr	r3, [pc, #116]	@ (80089d4 <prvAddNewTaskToReadyList+0xd0>)
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008968:	4b1b      	ldr	r3, [pc, #108]	@ (80089d8 <prvAddNewTaskToReadyList+0xd4>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	429a      	cmp	r2, r3
 800896e:	d903      	bls.n	8008978 <prvAddNewTaskToReadyList+0x74>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008974:	4a18      	ldr	r2, [pc, #96]	@ (80089d8 <prvAddNewTaskToReadyList+0xd4>)
 8008976:	6013      	str	r3, [r2, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800897c:	4613      	mov	r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	4413      	add	r3, r2
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	4a15      	ldr	r2, [pc, #84]	@ (80089dc <prvAddNewTaskToReadyList+0xd8>)
 8008986:	441a      	add	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	3304      	adds	r3, #4
 800898c:	4619      	mov	r1, r3
 800898e:	4610      	mov	r0, r2
 8008990:	f7ff f901 	bl	8007b96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008994:	f001 fa72 	bl	8009e7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008998:	4b0d      	ldr	r3, [pc, #52]	@ (80089d0 <prvAddNewTaskToReadyList+0xcc>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00e      	beq.n	80089be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089a0:	4b0a      	ldr	r3, [pc, #40]	@ (80089cc <prvAddNewTaskToReadyList+0xc8>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d207      	bcs.n	80089be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80089ae:	4b0c      	ldr	r3, [pc, #48]	@ (80089e0 <prvAddNewTaskToReadyList+0xdc>)
 80089b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089b4:	601a      	str	r2, [r3, #0]
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089be:	bf00      	nop
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	200056b8 	.word	0x200056b8
 80089cc:	200051e4 	.word	0x200051e4
 80089d0:	200056c4 	.word	0x200056c4
 80089d4:	200056d4 	.word	0x200056d4
 80089d8:	200056c0 	.word	0x200056c0
 80089dc:	200051e8 	.word	0x200051e8
 80089e0:	e000ed04 	.word	0xe000ed04

080089e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80089ec:	2300      	movs	r3, #0
 80089ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d018      	beq.n	8008a28 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80089f6:	4b14      	ldr	r3, [pc, #80]	@ (8008a48 <vTaskDelay+0x64>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00b      	beq.n	8008a16 <vTaskDelay+0x32>
	__asm volatile
 80089fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	60bb      	str	r3, [r7, #8]
}
 8008a10:	bf00      	nop
 8008a12:	bf00      	nop
 8008a14:	e7fd      	b.n	8008a12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008a16:	f000 f883 	bl	8008b20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 fd1b 	bl	8009458 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a22:	f000 f88b 	bl	8008b3c <xTaskResumeAll>
 8008a26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d107      	bne.n	8008a3e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008a2e:	4b07      	ldr	r3, [pc, #28]	@ (8008a4c <vTaskDelay+0x68>)
 8008a30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a34:	601a      	str	r2, [r3, #0]
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a3e:	bf00      	nop
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	200056e0 	.word	0x200056e0
 8008a4c:	e000ed04 	.word	0xe000ed04

08008a50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b08a      	sub	sp, #40	@ 0x28
 8008a54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a56:	2300      	movs	r3, #0
 8008a58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a5e:	463a      	mov	r2, r7
 8008a60:	1d39      	adds	r1, r7, #4
 8008a62:	f107 0308 	add.w	r3, r7, #8
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7ff f834 	bl	8007ad4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a6c:	6839      	ldr	r1, [r7, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	9202      	str	r2, [sp, #8]
 8008a74:	9301      	str	r3, [sp, #4]
 8008a76:	2300      	movs	r3, #0
 8008a78:	9300      	str	r3, [sp, #0]
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	460a      	mov	r2, r1
 8008a7e:	4922      	ldr	r1, [pc, #136]	@ (8008b08 <vTaskStartScheduler+0xb8>)
 8008a80:	4822      	ldr	r0, [pc, #136]	@ (8008b0c <vTaskStartScheduler+0xbc>)
 8008a82:	f7ff fe09 	bl	8008698 <xTaskCreateStatic>
 8008a86:	4603      	mov	r3, r0
 8008a88:	4a21      	ldr	r2, [pc, #132]	@ (8008b10 <vTaskStartScheduler+0xc0>)
 8008a8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a8c:	4b20      	ldr	r3, [pc, #128]	@ (8008b10 <vTaskStartScheduler+0xc0>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a94:	2301      	movs	r3, #1
 8008a96:	617b      	str	r3, [r7, #20]
 8008a98:	e001      	b.n	8008a9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d102      	bne.n	8008aaa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008aa4:	f000 fd2c 	bl	8009500 <xTimerCreateTimerTask>
 8008aa8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d116      	bne.n	8008ade <vTaskStartScheduler+0x8e>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	613b      	str	r3, [r7, #16]
}
 8008ac2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ac4:	4b13      	ldr	r3, [pc, #76]	@ (8008b14 <vTaskStartScheduler+0xc4>)
 8008ac6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008aca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008acc:	4b12      	ldr	r3, [pc, #72]	@ (8008b18 <vTaskStartScheduler+0xc8>)
 8008ace:	2201      	movs	r2, #1
 8008ad0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ad2:	4b12      	ldr	r3, [pc, #72]	@ (8008b1c <vTaskStartScheduler+0xcc>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ad8:	f001 f8fa 	bl	8009cd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008adc:	e00f      	b.n	8008afe <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ae4:	d10b      	bne.n	8008afe <vTaskStartScheduler+0xae>
	__asm volatile
 8008ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aea:	f383 8811 	msr	BASEPRI, r3
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	60fb      	str	r3, [r7, #12]
}
 8008af8:	bf00      	nop
 8008afa:	bf00      	nop
 8008afc:	e7fd      	b.n	8008afa <vTaskStartScheduler+0xaa>
}
 8008afe:	bf00      	nop
 8008b00:	3718      	adds	r7, #24
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	08018520 	.word	0x08018520
 8008b0c:	08009191 	.word	0x08009191
 8008b10:	200056dc 	.word	0x200056dc
 8008b14:	200056d8 	.word	0x200056d8
 8008b18:	200056c4 	.word	0x200056c4
 8008b1c:	200056bc 	.word	0x200056bc

08008b20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b20:	b480      	push	{r7}
 8008b22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008b24:	4b04      	ldr	r3, [pc, #16]	@ (8008b38 <vTaskSuspendAll+0x18>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	4a03      	ldr	r2, [pc, #12]	@ (8008b38 <vTaskSuspendAll+0x18>)
 8008b2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008b2e:	bf00      	nop
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr
 8008b38:	200056e0 	.word	0x200056e0

08008b3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b42:	2300      	movs	r3, #0
 8008b44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b46:	2300      	movs	r3, #0
 8008b48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b4a:	4b42      	ldr	r3, [pc, #264]	@ (8008c54 <xTaskResumeAll+0x118>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10b      	bne.n	8008b6a <xTaskResumeAll+0x2e>
	__asm volatile
 8008b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	603b      	str	r3, [r7, #0]
}
 8008b64:	bf00      	nop
 8008b66:	bf00      	nop
 8008b68:	e7fd      	b.n	8008b66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b6a:	f001 f955 	bl	8009e18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b6e:	4b39      	ldr	r3, [pc, #228]	@ (8008c54 <xTaskResumeAll+0x118>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	3b01      	subs	r3, #1
 8008b74:	4a37      	ldr	r2, [pc, #220]	@ (8008c54 <xTaskResumeAll+0x118>)
 8008b76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b78:	4b36      	ldr	r3, [pc, #216]	@ (8008c54 <xTaskResumeAll+0x118>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d162      	bne.n	8008c46 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b80:	4b35      	ldr	r3, [pc, #212]	@ (8008c58 <xTaskResumeAll+0x11c>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d05e      	beq.n	8008c46 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b88:	e02f      	b.n	8008bea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b8a:	4b34      	ldr	r3, [pc, #208]	@ (8008c5c <xTaskResumeAll+0x120>)
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	3318      	adds	r3, #24
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7ff f85a 	bl	8007c50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7ff f855 	bl	8007c50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008baa:	4b2d      	ldr	r3, [pc, #180]	@ (8008c60 <xTaskResumeAll+0x124>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d903      	bls.n	8008bba <xTaskResumeAll+0x7e>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb6:	4a2a      	ldr	r2, [pc, #168]	@ (8008c60 <xTaskResumeAll+0x124>)
 8008bb8:	6013      	str	r3, [r2, #0]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4a27      	ldr	r2, [pc, #156]	@ (8008c64 <xTaskResumeAll+0x128>)
 8008bc8:	441a      	add	r2, r3
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3304      	adds	r3, #4
 8008bce:	4619      	mov	r1, r3
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	f7fe ffe0 	bl	8007b96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bda:	4b23      	ldr	r3, [pc, #140]	@ (8008c68 <xTaskResumeAll+0x12c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d302      	bcc.n	8008bea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008be4:	4b21      	ldr	r3, [pc, #132]	@ (8008c6c <xTaskResumeAll+0x130>)
 8008be6:	2201      	movs	r2, #1
 8008be8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bea:	4b1c      	ldr	r3, [pc, #112]	@ (8008c5c <xTaskResumeAll+0x120>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1cb      	bne.n	8008b8a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d001      	beq.n	8008bfc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008bf8:	f000 fb80 	bl	80092fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8008c70 <xTaskResumeAll+0x134>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d010      	beq.n	8008c2a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c08:	f000 f846 	bl	8008c98 <xTaskIncrementTick>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d002      	beq.n	8008c18 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008c12:	4b16      	ldr	r3, [pc, #88]	@ (8008c6c <xTaskResumeAll+0x130>)
 8008c14:	2201      	movs	r2, #1
 8008c16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1f1      	bne.n	8008c08 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008c24:	4b12      	ldr	r3, [pc, #72]	@ (8008c70 <xTaskResumeAll+0x134>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c2a:	4b10      	ldr	r3, [pc, #64]	@ (8008c6c <xTaskResumeAll+0x130>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d009      	beq.n	8008c46 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c32:	2301      	movs	r3, #1
 8008c34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c36:	4b0f      	ldr	r3, [pc, #60]	@ (8008c74 <xTaskResumeAll+0x138>)
 8008c38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c3c:	601a      	str	r2, [r3, #0]
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c46:	f001 f919 	bl	8009e7c <vPortExitCritical>

	return xAlreadyYielded;
 8008c4a:	68bb      	ldr	r3, [r7, #8]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	200056e0 	.word	0x200056e0
 8008c58:	200056b8 	.word	0x200056b8
 8008c5c:	20005678 	.word	0x20005678
 8008c60:	200056c0 	.word	0x200056c0
 8008c64:	200051e8 	.word	0x200051e8
 8008c68:	200051e4 	.word	0x200051e4
 8008c6c:	200056cc 	.word	0x200056cc
 8008c70:	200056c8 	.word	0x200056c8
 8008c74:	e000ed04 	.word	0xe000ed04

08008c78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008c7e:	4b05      	ldr	r3, [pc, #20]	@ (8008c94 <xTaskGetTickCount+0x1c>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008c84:	687b      	ldr	r3, [r7, #4]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	370c      	adds	r7, #12
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	200056bc 	.word	0x200056bc

08008c98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b086      	sub	sp, #24
 8008c9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ca2:	4b4f      	ldr	r3, [pc, #316]	@ (8008de0 <xTaskIncrementTick+0x148>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f040 8090 	bne.w	8008dcc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008cac:	4b4d      	ldr	r3, [pc, #308]	@ (8008de4 <xTaskIncrementTick+0x14c>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008cb4:	4a4b      	ldr	r2, [pc, #300]	@ (8008de4 <xTaskIncrementTick+0x14c>)
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d121      	bne.n	8008d04 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008cc0:	4b49      	ldr	r3, [pc, #292]	@ (8008de8 <xTaskIncrementTick+0x150>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00b      	beq.n	8008ce2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cce:	f383 8811 	msr	BASEPRI, r3
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	f3bf 8f4f 	dsb	sy
 8008cda:	603b      	str	r3, [r7, #0]
}
 8008cdc:	bf00      	nop
 8008cde:	bf00      	nop
 8008ce0:	e7fd      	b.n	8008cde <xTaskIncrementTick+0x46>
 8008ce2:	4b41      	ldr	r3, [pc, #260]	@ (8008de8 <xTaskIncrementTick+0x150>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	60fb      	str	r3, [r7, #12]
 8008ce8:	4b40      	ldr	r3, [pc, #256]	@ (8008dec <xTaskIncrementTick+0x154>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a3e      	ldr	r2, [pc, #248]	@ (8008de8 <xTaskIncrementTick+0x150>)
 8008cee:	6013      	str	r3, [r2, #0]
 8008cf0:	4a3e      	ldr	r2, [pc, #248]	@ (8008dec <xTaskIncrementTick+0x154>)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6013      	str	r3, [r2, #0]
 8008cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8008df0 <xTaskIncrementTick+0x158>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	4a3c      	ldr	r2, [pc, #240]	@ (8008df0 <xTaskIncrementTick+0x158>)
 8008cfe:	6013      	str	r3, [r2, #0]
 8008d00:	f000 fafc 	bl	80092fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d04:	4b3b      	ldr	r3, [pc, #236]	@ (8008df4 <xTaskIncrementTick+0x15c>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d349      	bcc.n	8008da2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d0e:	4b36      	ldr	r3, [pc, #216]	@ (8008de8 <xTaskIncrementTick+0x150>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d104      	bne.n	8008d22 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d18:	4b36      	ldr	r3, [pc, #216]	@ (8008df4 <xTaskIncrementTick+0x15c>)
 8008d1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d1e:	601a      	str	r2, [r3, #0]
					break;
 8008d20:	e03f      	b.n	8008da2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d22:	4b31      	ldr	r3, [pc, #196]	@ (8008de8 <xTaskIncrementTick+0x150>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d32:	693a      	ldr	r2, [r7, #16]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d203      	bcs.n	8008d42 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d3a:	4a2e      	ldr	r2, [pc, #184]	@ (8008df4 <xTaskIncrementTick+0x15c>)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d40:	e02f      	b.n	8008da2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	3304      	adds	r3, #4
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7fe ff82 	bl	8007c50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d004      	beq.n	8008d5e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	3318      	adds	r3, #24
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7fe ff79 	bl	8007c50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d62:	4b25      	ldr	r3, [pc, #148]	@ (8008df8 <xTaskIncrementTick+0x160>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d903      	bls.n	8008d72 <xTaskIncrementTick+0xda>
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d6e:	4a22      	ldr	r2, [pc, #136]	@ (8008df8 <xTaskIncrementTick+0x160>)
 8008d70:	6013      	str	r3, [r2, #0]
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d76:	4613      	mov	r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	4a1f      	ldr	r2, [pc, #124]	@ (8008dfc <xTaskIncrementTick+0x164>)
 8008d80:	441a      	add	r2, r3
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	3304      	adds	r3, #4
 8008d86:	4619      	mov	r1, r3
 8008d88:	4610      	mov	r0, r2
 8008d8a:	f7fe ff04 	bl	8007b96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d92:	4b1b      	ldr	r3, [pc, #108]	@ (8008e00 <xTaskIncrementTick+0x168>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d3b8      	bcc.n	8008d0e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008da0:	e7b5      	b.n	8008d0e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008da2:	4b17      	ldr	r3, [pc, #92]	@ (8008e00 <xTaskIncrementTick+0x168>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008da8:	4914      	ldr	r1, [pc, #80]	@ (8008dfc <xTaskIncrementTick+0x164>)
 8008daa:	4613      	mov	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	4413      	add	r3, r2
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	440b      	add	r3, r1
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d901      	bls.n	8008dbe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008dbe:	4b11      	ldr	r3, [pc, #68]	@ (8008e04 <xTaskIncrementTick+0x16c>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d007      	beq.n	8008dd6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	617b      	str	r3, [r7, #20]
 8008dca:	e004      	b.n	8008dd6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8008e08 <xTaskIncrementTick+0x170>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	4a0d      	ldr	r2, [pc, #52]	@ (8008e08 <xTaskIncrementTick+0x170>)
 8008dd4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008dd6:	697b      	ldr	r3, [r7, #20]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3718      	adds	r7, #24
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	200056e0 	.word	0x200056e0
 8008de4:	200056bc 	.word	0x200056bc
 8008de8:	20005670 	.word	0x20005670
 8008dec:	20005674 	.word	0x20005674
 8008df0:	200056d0 	.word	0x200056d0
 8008df4:	200056d8 	.word	0x200056d8
 8008df8:	200056c0 	.word	0x200056c0
 8008dfc:	200051e8 	.word	0x200051e8
 8008e00:	200051e4 	.word	0x200051e4
 8008e04:	200056cc 	.word	0x200056cc
 8008e08:	200056c8 	.word	0x200056c8

08008e0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e12:	4b28      	ldr	r3, [pc, #160]	@ (8008eb4 <vTaskSwitchContext+0xa8>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d003      	beq.n	8008e22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e1a:	4b27      	ldr	r3, [pc, #156]	@ (8008eb8 <vTaskSwitchContext+0xac>)
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e20:	e042      	b.n	8008ea8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008e22:	4b25      	ldr	r3, [pc, #148]	@ (8008eb8 <vTaskSwitchContext+0xac>)
 8008e24:	2200      	movs	r2, #0
 8008e26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e28:	4b24      	ldr	r3, [pc, #144]	@ (8008ebc <vTaskSwitchContext+0xb0>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	60fb      	str	r3, [r7, #12]
 8008e2e:	e011      	b.n	8008e54 <vTaskSwitchContext+0x48>
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d10b      	bne.n	8008e4e <vTaskSwitchContext+0x42>
	__asm volatile
 8008e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e3a:	f383 8811 	msr	BASEPRI, r3
 8008e3e:	f3bf 8f6f 	isb	sy
 8008e42:	f3bf 8f4f 	dsb	sy
 8008e46:	607b      	str	r3, [r7, #4]
}
 8008e48:	bf00      	nop
 8008e4a:	bf00      	nop
 8008e4c:	e7fd      	b.n	8008e4a <vTaskSwitchContext+0x3e>
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	3b01      	subs	r3, #1
 8008e52:	60fb      	str	r3, [r7, #12]
 8008e54:	491a      	ldr	r1, [pc, #104]	@ (8008ec0 <vTaskSwitchContext+0xb4>)
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	4613      	mov	r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	4413      	add	r3, r2
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	440b      	add	r3, r1
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d0e3      	beq.n	8008e30 <vTaskSwitchContext+0x24>
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4a13      	ldr	r2, [pc, #76]	@ (8008ec0 <vTaskSwitchContext+0xb4>)
 8008e74:	4413      	add	r3, r2
 8008e76:	60bb      	str	r3, [r7, #8]
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	685a      	ldr	r2, [r3, #4]
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	605a      	str	r2, [r3, #4]
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	685a      	ldr	r2, [r3, #4]
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	3308      	adds	r3, #8
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d104      	bne.n	8008e98 <vTaskSwitchContext+0x8c>
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	685a      	ldr	r2, [r3, #4]
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	605a      	str	r2, [r3, #4]
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	4a09      	ldr	r2, [pc, #36]	@ (8008ec4 <vTaskSwitchContext+0xb8>)
 8008ea0:	6013      	str	r3, [r2, #0]
 8008ea2:	4a06      	ldr	r2, [pc, #24]	@ (8008ebc <vTaskSwitchContext+0xb0>)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6013      	str	r3, [r2, #0]
}
 8008ea8:	bf00      	nop
 8008eaa:	3714      	adds	r7, #20
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr
 8008eb4:	200056e0 	.word	0x200056e0
 8008eb8:	200056cc 	.word	0x200056cc
 8008ebc:	200056c0 	.word	0x200056c0
 8008ec0:	200051e8 	.word	0x200051e8
 8008ec4:	200051e4 	.word	0x200051e4

08008ec8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d10b      	bne.n	8008ef0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008edc:	f383 8811 	msr	BASEPRI, r3
 8008ee0:	f3bf 8f6f 	isb	sy
 8008ee4:	f3bf 8f4f 	dsb	sy
 8008ee8:	60fb      	str	r3, [r7, #12]
}
 8008eea:	bf00      	nop
 8008eec:	bf00      	nop
 8008eee:	e7fd      	b.n	8008eec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ef0:	4b07      	ldr	r3, [pc, #28]	@ (8008f10 <vTaskPlaceOnEventList+0x48>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	3318      	adds	r3, #24
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7fe fe70 	bl	8007bde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008efe:	2101      	movs	r1, #1
 8008f00:	6838      	ldr	r0, [r7, #0]
 8008f02:	f000 faa9 	bl	8009458 <prvAddCurrentTaskToDelayedList>
}
 8008f06:	bf00      	nop
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	200051e4 	.word	0x200051e4

08008f14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d10b      	bne.n	8008f3e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f2a:	f383 8811 	msr	BASEPRI, r3
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	617b      	str	r3, [r7, #20]
}
 8008f38:	bf00      	nop
 8008f3a:	bf00      	nop
 8008f3c:	e7fd      	b.n	8008f3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8008f68 <vTaskPlaceOnEventListRestricted+0x54>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3318      	adds	r3, #24
 8008f44:	4619      	mov	r1, r3
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f7fe fe25 	bl	8007b96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d002      	beq.n	8008f58 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008f52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f56:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008f58:	6879      	ldr	r1, [r7, #4]
 8008f5a:	68b8      	ldr	r0, [r7, #8]
 8008f5c:	f000 fa7c 	bl	8009458 <prvAddCurrentTaskToDelayedList>
	}
 8008f60:	bf00      	nop
 8008f62:	3718      	adds	r7, #24
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	200051e4 	.word	0x200051e4

08008f6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d10b      	bne.n	8008f9a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	60fb      	str	r3, [r7, #12]
}
 8008f94:	bf00      	nop
 8008f96:	bf00      	nop
 8008f98:	e7fd      	b.n	8008f96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	3318      	adds	r3, #24
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fe fe56 	bl	8007c50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800901c <xTaskRemoveFromEventList+0xb0>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d11d      	bne.n	8008fe8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	3304      	adds	r3, #4
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7fe fe4d 	bl	8007c50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fba:	4b19      	ldr	r3, [pc, #100]	@ (8009020 <xTaskRemoveFromEventList+0xb4>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d903      	bls.n	8008fca <xTaskRemoveFromEventList+0x5e>
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fc6:	4a16      	ldr	r2, [pc, #88]	@ (8009020 <xTaskRemoveFromEventList+0xb4>)
 8008fc8:	6013      	str	r3, [r2, #0]
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fce:	4613      	mov	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4413      	add	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4a13      	ldr	r2, [pc, #76]	@ (8009024 <xTaskRemoveFromEventList+0xb8>)
 8008fd8:	441a      	add	r2, r3
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	3304      	adds	r3, #4
 8008fde:	4619      	mov	r1, r3
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	f7fe fdd8 	bl	8007b96 <vListInsertEnd>
 8008fe6:	e005      	b.n	8008ff4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	3318      	adds	r3, #24
 8008fec:	4619      	mov	r1, r3
 8008fee:	480e      	ldr	r0, [pc, #56]	@ (8009028 <xTaskRemoveFromEventList+0xbc>)
 8008ff0:	f7fe fdd1 	bl	8007b96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800902c <xTaskRemoveFromEventList+0xc0>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d905      	bls.n	800900e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009002:	2301      	movs	r3, #1
 8009004:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009006:	4b0a      	ldr	r3, [pc, #40]	@ (8009030 <xTaskRemoveFromEventList+0xc4>)
 8009008:	2201      	movs	r2, #1
 800900a:	601a      	str	r2, [r3, #0]
 800900c:	e001      	b.n	8009012 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800900e:	2300      	movs	r3, #0
 8009010:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009012:	697b      	ldr	r3, [r7, #20]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3718      	adds	r7, #24
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	200056e0 	.word	0x200056e0
 8009020:	200056c0 	.word	0x200056c0
 8009024:	200051e8 	.word	0x200051e8
 8009028:	20005678 	.word	0x20005678
 800902c:	200051e4 	.word	0x200051e4
 8009030:	200056cc 	.word	0x200056cc

08009034 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10b      	bne.n	800905a <vTaskSetTimeOutState+0x26>
	__asm volatile
 8009042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009046:	f383 8811 	msr	BASEPRI, r3
 800904a:	f3bf 8f6f 	isb	sy
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	60fb      	str	r3, [r7, #12]
}
 8009054:	bf00      	nop
 8009056:	bf00      	nop
 8009058:	e7fd      	b.n	8009056 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800905a:	f000 fedd 	bl	8009e18 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800905e:	4b07      	ldr	r3, [pc, #28]	@ (800907c <vTaskSetTimeOutState+0x48>)
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009066:	4b06      	ldr	r3, [pc, #24]	@ (8009080 <vTaskSetTimeOutState+0x4c>)
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800906e:	f000 ff05 	bl	8009e7c <vPortExitCritical>
}
 8009072:	bf00      	nop
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	200056d0 	.word	0x200056d0
 8009080:	200056bc 	.word	0x200056bc

08009084 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800908c:	4b06      	ldr	r3, [pc, #24]	@ (80090a8 <vTaskInternalSetTimeOutState+0x24>)
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009094:	4b05      	ldr	r3, [pc, #20]	@ (80090ac <vTaskInternalSetTimeOutState+0x28>)
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	605a      	str	r2, [r3, #4]
}
 800909c:	bf00      	nop
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr
 80090a8:	200056d0 	.word	0x200056d0
 80090ac:	200056bc 	.word	0x200056bc

080090b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b088      	sub	sp, #32
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d10b      	bne.n	80090d8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80090c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	613b      	str	r3, [r7, #16]
}
 80090d2:	bf00      	nop
 80090d4:	bf00      	nop
 80090d6:	e7fd      	b.n	80090d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10b      	bne.n	80090f6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80090de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	60fb      	str	r3, [r7, #12]
}
 80090f0:	bf00      	nop
 80090f2:	bf00      	nop
 80090f4:	e7fd      	b.n	80090f2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80090f6:	f000 fe8f 	bl	8009e18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80090fa:	4b1d      	ldr	r3, [pc, #116]	@ (8009170 <xTaskCheckForTimeOut+0xc0>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	69ba      	ldr	r2, [r7, #24]
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009112:	d102      	bne.n	800911a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009114:	2300      	movs	r3, #0
 8009116:	61fb      	str	r3, [r7, #28]
 8009118:	e023      	b.n	8009162 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	4b15      	ldr	r3, [pc, #84]	@ (8009174 <xTaskCheckForTimeOut+0xc4>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	429a      	cmp	r2, r3
 8009124:	d007      	beq.n	8009136 <xTaskCheckForTimeOut+0x86>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	69ba      	ldr	r2, [r7, #24]
 800912c:	429a      	cmp	r2, r3
 800912e:	d302      	bcc.n	8009136 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009130:	2301      	movs	r3, #1
 8009132:	61fb      	str	r3, [r7, #28]
 8009134:	e015      	b.n	8009162 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	697a      	ldr	r2, [r7, #20]
 800913c:	429a      	cmp	r2, r3
 800913e:	d20b      	bcs.n	8009158 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	1ad2      	subs	r2, r2, r3
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f7ff ff99 	bl	8009084 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009152:	2300      	movs	r3, #0
 8009154:	61fb      	str	r3, [r7, #28]
 8009156:	e004      	b.n	8009162 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	2200      	movs	r2, #0
 800915c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800915e:	2301      	movs	r3, #1
 8009160:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009162:	f000 fe8b 	bl	8009e7c <vPortExitCritical>

	return xReturn;
 8009166:	69fb      	ldr	r3, [r7, #28]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3720      	adds	r7, #32
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	200056bc 	.word	0x200056bc
 8009174:	200056d0 	.word	0x200056d0

08009178 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009178:	b480      	push	{r7}
 800917a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800917c:	4b03      	ldr	r3, [pc, #12]	@ (800918c <vTaskMissedYield+0x14>)
 800917e:	2201      	movs	r2, #1
 8009180:	601a      	str	r2, [r3, #0]
}
 8009182:	bf00      	nop
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr
 800918c:	200056cc 	.word	0x200056cc

08009190 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009198:	f000 f852 	bl	8009240 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800919c:	4b06      	ldr	r3, [pc, #24]	@ (80091b8 <prvIdleTask+0x28>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d9f9      	bls.n	8009198 <prvIdleTask+0x8>
			{
				taskYIELD();
 80091a4:	4b05      	ldr	r3, [pc, #20]	@ (80091bc <prvIdleTask+0x2c>)
 80091a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091aa:	601a      	str	r2, [r3, #0]
 80091ac:	f3bf 8f4f 	dsb	sy
 80091b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80091b4:	e7f0      	b.n	8009198 <prvIdleTask+0x8>
 80091b6:	bf00      	nop
 80091b8:	200051e8 	.word	0x200051e8
 80091bc:	e000ed04 	.word	0xe000ed04

080091c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091c6:	2300      	movs	r3, #0
 80091c8:	607b      	str	r3, [r7, #4]
 80091ca:	e00c      	b.n	80091e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	4613      	mov	r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4413      	add	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	4a12      	ldr	r2, [pc, #72]	@ (8009220 <prvInitialiseTaskLists+0x60>)
 80091d8:	4413      	add	r3, r2
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fe fcae 	bl	8007b3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	3301      	adds	r3, #1
 80091e4:	607b      	str	r3, [r7, #4]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2b37      	cmp	r3, #55	@ 0x37
 80091ea:	d9ef      	bls.n	80091cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80091ec:	480d      	ldr	r0, [pc, #52]	@ (8009224 <prvInitialiseTaskLists+0x64>)
 80091ee:	f7fe fca5 	bl	8007b3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80091f2:	480d      	ldr	r0, [pc, #52]	@ (8009228 <prvInitialiseTaskLists+0x68>)
 80091f4:	f7fe fca2 	bl	8007b3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80091f8:	480c      	ldr	r0, [pc, #48]	@ (800922c <prvInitialiseTaskLists+0x6c>)
 80091fa:	f7fe fc9f 	bl	8007b3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80091fe:	480c      	ldr	r0, [pc, #48]	@ (8009230 <prvInitialiseTaskLists+0x70>)
 8009200:	f7fe fc9c 	bl	8007b3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009204:	480b      	ldr	r0, [pc, #44]	@ (8009234 <prvInitialiseTaskLists+0x74>)
 8009206:	f7fe fc99 	bl	8007b3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800920a:	4b0b      	ldr	r3, [pc, #44]	@ (8009238 <prvInitialiseTaskLists+0x78>)
 800920c:	4a05      	ldr	r2, [pc, #20]	@ (8009224 <prvInitialiseTaskLists+0x64>)
 800920e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009210:	4b0a      	ldr	r3, [pc, #40]	@ (800923c <prvInitialiseTaskLists+0x7c>)
 8009212:	4a05      	ldr	r2, [pc, #20]	@ (8009228 <prvInitialiseTaskLists+0x68>)
 8009214:	601a      	str	r2, [r3, #0]
}
 8009216:	bf00      	nop
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	200051e8 	.word	0x200051e8
 8009224:	20005648 	.word	0x20005648
 8009228:	2000565c 	.word	0x2000565c
 800922c:	20005678 	.word	0x20005678
 8009230:	2000568c 	.word	0x2000568c
 8009234:	200056a4 	.word	0x200056a4
 8009238:	20005670 	.word	0x20005670
 800923c:	20005674 	.word	0x20005674

08009240 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009246:	e019      	b.n	800927c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009248:	f000 fde6 	bl	8009e18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800924c:	4b10      	ldr	r3, [pc, #64]	@ (8009290 <prvCheckTasksWaitingTermination+0x50>)
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	3304      	adds	r3, #4
 8009258:	4618      	mov	r0, r3
 800925a:	f7fe fcf9 	bl	8007c50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800925e:	4b0d      	ldr	r3, [pc, #52]	@ (8009294 <prvCheckTasksWaitingTermination+0x54>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	3b01      	subs	r3, #1
 8009264:	4a0b      	ldr	r2, [pc, #44]	@ (8009294 <prvCheckTasksWaitingTermination+0x54>)
 8009266:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009268:	4b0b      	ldr	r3, [pc, #44]	@ (8009298 <prvCheckTasksWaitingTermination+0x58>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	3b01      	subs	r3, #1
 800926e:	4a0a      	ldr	r2, [pc, #40]	@ (8009298 <prvCheckTasksWaitingTermination+0x58>)
 8009270:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009272:	f000 fe03 	bl	8009e7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 f810 	bl	800929c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800927c:	4b06      	ldr	r3, [pc, #24]	@ (8009298 <prvCheckTasksWaitingTermination+0x58>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1e1      	bne.n	8009248 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009284:	bf00      	nop
 8009286:	bf00      	nop
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	2000568c 	.word	0x2000568c
 8009294:	200056b8 	.word	0x200056b8
 8009298:	200056a0 	.word	0x200056a0

0800929c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d108      	bne.n	80092c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 ffa0 	bl	800a1f8 <vPortFree>
				vPortFree( pxTCB );
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 ff9d 	bl	800a1f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80092be:	e019      	b.n	80092f4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d103      	bne.n	80092d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 ff94 	bl	800a1f8 <vPortFree>
	}
 80092d0:	e010      	b.n	80092f4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d00b      	beq.n	80092f4 <prvDeleteTCB+0x58>
	__asm volatile
 80092dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e0:	f383 8811 	msr	BASEPRI, r3
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	f3bf 8f4f 	dsb	sy
 80092ec:	60fb      	str	r3, [r7, #12]
}
 80092ee:	bf00      	nop
 80092f0:	bf00      	nop
 80092f2:	e7fd      	b.n	80092f0 <prvDeleteTCB+0x54>
	}
 80092f4:	bf00      	nop
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009302:	4b0c      	ldr	r3, [pc, #48]	@ (8009334 <prvResetNextTaskUnblockTime+0x38>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d104      	bne.n	8009316 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800930c:	4b0a      	ldr	r3, [pc, #40]	@ (8009338 <prvResetNextTaskUnblockTime+0x3c>)
 800930e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009312:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009314:	e008      	b.n	8009328 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009316:	4b07      	ldr	r3, [pc, #28]	@ (8009334 <prvResetNextTaskUnblockTime+0x38>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	4a04      	ldr	r2, [pc, #16]	@ (8009338 <prvResetNextTaskUnblockTime+0x3c>)
 8009326:	6013      	str	r3, [r2, #0]
}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr
 8009334:	20005670 	.word	0x20005670
 8009338:	200056d8 	.word	0x200056d8

0800933c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009342:	4b0b      	ldr	r3, [pc, #44]	@ (8009370 <xTaskGetSchedulerState+0x34>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d102      	bne.n	8009350 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800934a:	2301      	movs	r3, #1
 800934c:	607b      	str	r3, [r7, #4]
 800934e:	e008      	b.n	8009362 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009350:	4b08      	ldr	r3, [pc, #32]	@ (8009374 <xTaskGetSchedulerState+0x38>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d102      	bne.n	800935e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009358:	2302      	movs	r3, #2
 800935a:	607b      	str	r3, [r7, #4]
 800935c:	e001      	b.n	8009362 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800935e:	2300      	movs	r3, #0
 8009360:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009362:	687b      	ldr	r3, [r7, #4]
	}
 8009364:	4618      	mov	r0, r3
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr
 8009370:	200056c4 	.word	0x200056c4
 8009374:	200056e0 	.word	0x200056e0

08009378 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009384:	2300      	movs	r3, #0
 8009386:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d058      	beq.n	8009440 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800938e:	4b2f      	ldr	r3, [pc, #188]	@ (800944c <xTaskPriorityDisinherit+0xd4>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	693a      	ldr	r2, [r7, #16]
 8009394:	429a      	cmp	r2, r3
 8009396:	d00b      	beq.n	80093b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800939c:	f383 8811 	msr	BASEPRI, r3
 80093a0:	f3bf 8f6f 	isb	sy
 80093a4:	f3bf 8f4f 	dsb	sy
 80093a8:	60fb      	str	r3, [r7, #12]
}
 80093aa:	bf00      	nop
 80093ac:	bf00      	nop
 80093ae:	e7fd      	b.n	80093ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d10b      	bne.n	80093d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80093b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093bc:	f383 8811 	msr	BASEPRI, r3
 80093c0:	f3bf 8f6f 	isb	sy
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	60bb      	str	r3, [r7, #8]
}
 80093ca:	bf00      	nop
 80093cc:	bf00      	nop
 80093ce:	e7fd      	b.n	80093cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093d4:	1e5a      	subs	r2, r3, #1
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d02c      	beq.n	8009440 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d128      	bne.n	8009440 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	3304      	adds	r3, #4
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fe fc2c 	bl	8007c50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009404:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009410:	4b0f      	ldr	r3, [pc, #60]	@ (8009450 <xTaskPriorityDisinherit+0xd8>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	429a      	cmp	r2, r3
 8009416:	d903      	bls.n	8009420 <xTaskPriorityDisinherit+0xa8>
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800941c:	4a0c      	ldr	r2, [pc, #48]	@ (8009450 <xTaskPriorityDisinherit+0xd8>)
 800941e:	6013      	str	r3, [r2, #0]
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009424:	4613      	mov	r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	4413      	add	r3, r2
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	4a09      	ldr	r2, [pc, #36]	@ (8009454 <xTaskPriorityDisinherit+0xdc>)
 800942e:	441a      	add	r2, r3
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	3304      	adds	r3, #4
 8009434:	4619      	mov	r1, r3
 8009436:	4610      	mov	r0, r2
 8009438:	f7fe fbad 	bl	8007b96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800943c:	2301      	movs	r3, #1
 800943e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009440:	697b      	ldr	r3, [r7, #20]
	}
 8009442:	4618      	mov	r0, r3
 8009444:	3718      	adds	r7, #24
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	200051e4 	.word	0x200051e4
 8009450:	200056c0 	.word	0x200056c0
 8009454:	200051e8 	.word	0x200051e8

08009458 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009462:	4b21      	ldr	r3, [pc, #132]	@ (80094e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009468:	4b20      	ldr	r3, [pc, #128]	@ (80094ec <prvAddCurrentTaskToDelayedList+0x94>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3304      	adds	r3, #4
 800946e:	4618      	mov	r0, r3
 8009470:	f7fe fbee 	bl	8007c50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800947a:	d10a      	bne.n	8009492 <prvAddCurrentTaskToDelayedList+0x3a>
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d007      	beq.n	8009492 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009482:	4b1a      	ldr	r3, [pc, #104]	@ (80094ec <prvAddCurrentTaskToDelayedList+0x94>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	3304      	adds	r3, #4
 8009488:	4619      	mov	r1, r3
 800948a:	4819      	ldr	r0, [pc, #100]	@ (80094f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800948c:	f7fe fb83 	bl	8007b96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009490:	e026      	b.n	80094e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4413      	add	r3, r2
 8009498:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800949a:	4b14      	ldr	r3, [pc, #80]	@ (80094ec <prvAddCurrentTaskToDelayedList+0x94>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68ba      	ldr	r2, [r7, #8]
 80094a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d209      	bcs.n	80094be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094aa:	4b12      	ldr	r3, [pc, #72]	@ (80094f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	4b0f      	ldr	r3, [pc, #60]	@ (80094ec <prvAddCurrentTaskToDelayedList+0x94>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	3304      	adds	r3, #4
 80094b4:	4619      	mov	r1, r3
 80094b6:	4610      	mov	r0, r2
 80094b8:	f7fe fb91 	bl	8007bde <vListInsert>
}
 80094bc:	e010      	b.n	80094e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094be:	4b0e      	ldr	r3, [pc, #56]	@ (80094f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	4b0a      	ldr	r3, [pc, #40]	@ (80094ec <prvAddCurrentTaskToDelayedList+0x94>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	3304      	adds	r3, #4
 80094c8:	4619      	mov	r1, r3
 80094ca:	4610      	mov	r0, r2
 80094cc:	f7fe fb87 	bl	8007bde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80094d0:	4b0a      	ldr	r3, [pc, #40]	@ (80094fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68ba      	ldr	r2, [r7, #8]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d202      	bcs.n	80094e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80094da:	4a08      	ldr	r2, [pc, #32]	@ (80094fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	6013      	str	r3, [r2, #0]
}
 80094e0:	bf00      	nop
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	200056bc 	.word	0x200056bc
 80094ec:	200051e4 	.word	0x200051e4
 80094f0:	200056a4 	.word	0x200056a4
 80094f4:	20005674 	.word	0x20005674
 80094f8:	20005670 	.word	0x20005670
 80094fc:	200056d8 	.word	0x200056d8

08009500 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b08a      	sub	sp, #40	@ 0x28
 8009504:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009506:	2300      	movs	r3, #0
 8009508:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800950a:	f000 fb13 	bl	8009b34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800950e:	4b1d      	ldr	r3, [pc, #116]	@ (8009584 <xTimerCreateTimerTask+0x84>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d021      	beq.n	800955a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009516:	2300      	movs	r3, #0
 8009518:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800951a:	2300      	movs	r3, #0
 800951c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800951e:	1d3a      	adds	r2, r7, #4
 8009520:	f107 0108 	add.w	r1, r7, #8
 8009524:	f107 030c 	add.w	r3, r7, #12
 8009528:	4618      	mov	r0, r3
 800952a:	f7fe faed 	bl	8007b08 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800952e:	6879      	ldr	r1, [r7, #4]
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	9202      	str	r2, [sp, #8]
 8009536:	9301      	str	r3, [sp, #4]
 8009538:	2302      	movs	r3, #2
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	2300      	movs	r3, #0
 800953e:	460a      	mov	r2, r1
 8009540:	4911      	ldr	r1, [pc, #68]	@ (8009588 <xTimerCreateTimerTask+0x88>)
 8009542:	4812      	ldr	r0, [pc, #72]	@ (800958c <xTimerCreateTimerTask+0x8c>)
 8009544:	f7ff f8a8 	bl	8008698 <xTaskCreateStatic>
 8009548:	4603      	mov	r3, r0
 800954a:	4a11      	ldr	r2, [pc, #68]	@ (8009590 <xTimerCreateTimerTask+0x90>)
 800954c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800954e:	4b10      	ldr	r3, [pc, #64]	@ (8009590 <xTimerCreateTimerTask+0x90>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d001      	beq.n	800955a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009556:	2301      	movs	r3, #1
 8009558:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10b      	bne.n	8009578 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	613b      	str	r3, [r7, #16]
}
 8009572:	bf00      	nop
 8009574:	bf00      	nop
 8009576:	e7fd      	b.n	8009574 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009578:	697b      	ldr	r3, [r7, #20]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3718      	adds	r7, #24
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	20005714 	.word	0x20005714
 8009588:	08018528 	.word	0x08018528
 800958c:	080096cd 	.word	0x080096cd
 8009590:	20005718 	.word	0x20005718

08009594 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b08a      	sub	sp, #40	@ 0x28
 8009598:	af00      	add	r7, sp, #0
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	60b9      	str	r1, [r7, #8]
 800959e:	607a      	str	r2, [r7, #4]
 80095a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80095a2:	2300      	movs	r3, #0
 80095a4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10b      	bne.n	80095c4 <xTimerGenericCommand+0x30>
	__asm volatile
 80095ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b0:	f383 8811 	msr	BASEPRI, r3
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	623b      	str	r3, [r7, #32]
}
 80095be:	bf00      	nop
 80095c0:	bf00      	nop
 80095c2:	e7fd      	b.n	80095c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80095c4:	4b19      	ldr	r3, [pc, #100]	@ (800962c <xTimerGenericCommand+0x98>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d02a      	beq.n	8009622 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	2b05      	cmp	r3, #5
 80095dc:	dc18      	bgt.n	8009610 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80095de:	f7ff fead 	bl	800933c <xTaskGetSchedulerState>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b02      	cmp	r3, #2
 80095e6:	d109      	bne.n	80095fc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80095e8:	4b10      	ldr	r3, [pc, #64]	@ (800962c <xTimerGenericCommand+0x98>)
 80095ea:	6818      	ldr	r0, [r3, #0]
 80095ec:	f107 0110 	add.w	r1, r7, #16
 80095f0:	2300      	movs	r3, #0
 80095f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095f4:	f7fe fc60 	bl	8007eb8 <xQueueGenericSend>
 80095f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80095fa:	e012      	b.n	8009622 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80095fc:	4b0b      	ldr	r3, [pc, #44]	@ (800962c <xTimerGenericCommand+0x98>)
 80095fe:	6818      	ldr	r0, [r3, #0]
 8009600:	f107 0110 	add.w	r1, r7, #16
 8009604:	2300      	movs	r3, #0
 8009606:	2200      	movs	r2, #0
 8009608:	f7fe fc56 	bl	8007eb8 <xQueueGenericSend>
 800960c:	6278      	str	r0, [r7, #36]	@ 0x24
 800960e:	e008      	b.n	8009622 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009610:	4b06      	ldr	r3, [pc, #24]	@ (800962c <xTimerGenericCommand+0x98>)
 8009612:	6818      	ldr	r0, [r3, #0]
 8009614:	f107 0110 	add.w	r1, r7, #16
 8009618:	2300      	movs	r3, #0
 800961a:	683a      	ldr	r2, [r7, #0]
 800961c:	f7fe fd4e 	bl	80080bc <xQueueGenericSendFromISR>
 8009620:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009624:	4618      	mov	r0, r3
 8009626:	3728      	adds	r7, #40	@ 0x28
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	20005714 	.word	0x20005714

08009630 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b088      	sub	sp, #32
 8009634:	af02      	add	r7, sp, #8
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800963a:	4b23      	ldr	r3, [pc, #140]	@ (80096c8 <prvProcessExpiredTimer+0x98>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	3304      	adds	r3, #4
 8009648:	4618      	mov	r0, r3
 800964a:	f7fe fb01 	bl	8007c50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009654:	f003 0304 	and.w	r3, r3, #4
 8009658:	2b00      	cmp	r3, #0
 800965a:	d023      	beq.n	80096a4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	699a      	ldr	r2, [r3, #24]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	18d1      	adds	r1, r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	683a      	ldr	r2, [r7, #0]
 8009668:	6978      	ldr	r0, [r7, #20]
 800966a:	f000 f8d5 	bl	8009818 <prvInsertTimerInActiveList>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d020      	beq.n	80096b6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009674:	2300      	movs	r3, #0
 8009676:	9300      	str	r3, [sp, #0]
 8009678:	2300      	movs	r3, #0
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	2100      	movs	r1, #0
 800967e:	6978      	ldr	r0, [r7, #20]
 8009680:	f7ff ff88 	bl	8009594 <xTimerGenericCommand>
 8009684:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d114      	bne.n	80096b6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800968c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009690:	f383 8811 	msr	BASEPRI, r3
 8009694:	f3bf 8f6f 	isb	sy
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	60fb      	str	r3, [r7, #12]
}
 800969e:	bf00      	nop
 80096a0:	bf00      	nop
 80096a2:	e7fd      	b.n	80096a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096aa:	f023 0301 	bic.w	r3, r3, #1
 80096ae:	b2da      	uxtb	r2, r3
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	6a1b      	ldr	r3, [r3, #32]
 80096ba:	6978      	ldr	r0, [r7, #20]
 80096bc:	4798      	blx	r3
}
 80096be:	bf00      	nop
 80096c0:	3718      	adds	r7, #24
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	2000570c 	.word	0x2000570c

080096cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096d4:	f107 0308 	add.w	r3, r7, #8
 80096d8:	4618      	mov	r0, r3
 80096da:	f000 f859 	bl	8009790 <prvGetNextExpireTime>
 80096de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	4619      	mov	r1, r3
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f000 f805 	bl	80096f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80096ea:	f000 f8d7 	bl	800989c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096ee:	bf00      	nop
 80096f0:	e7f0      	b.n	80096d4 <prvTimerTask+0x8>
	...

080096f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80096fe:	f7ff fa0f 	bl	8008b20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009702:	f107 0308 	add.w	r3, r7, #8
 8009706:	4618      	mov	r0, r3
 8009708:	f000 f866 	bl	80097d8 <prvSampleTimeNow>
 800970c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d130      	bne.n	8009776 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d10a      	bne.n	8009730 <prvProcessTimerOrBlockTask+0x3c>
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	429a      	cmp	r2, r3
 8009720:	d806      	bhi.n	8009730 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009722:	f7ff fa0b 	bl	8008b3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009726:	68f9      	ldr	r1, [r7, #12]
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f7ff ff81 	bl	8009630 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800972e:	e024      	b.n	800977a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d008      	beq.n	8009748 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009736:	4b13      	ldr	r3, [pc, #76]	@ (8009784 <prvProcessTimerOrBlockTask+0x90>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d101      	bne.n	8009744 <prvProcessTimerOrBlockTask+0x50>
 8009740:	2301      	movs	r3, #1
 8009742:	e000      	b.n	8009746 <prvProcessTimerOrBlockTask+0x52>
 8009744:	2300      	movs	r3, #0
 8009746:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009748:	4b0f      	ldr	r3, [pc, #60]	@ (8009788 <prvProcessTimerOrBlockTask+0x94>)
 800974a:	6818      	ldr	r0, [r3, #0]
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	683a      	ldr	r2, [r7, #0]
 8009754:	4619      	mov	r1, r3
 8009756:	f7fe ff6b 	bl	8008630 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800975a:	f7ff f9ef 	bl	8008b3c <xTaskResumeAll>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d10a      	bne.n	800977a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009764:	4b09      	ldr	r3, [pc, #36]	@ (800978c <prvProcessTimerOrBlockTask+0x98>)
 8009766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800976a:	601a      	str	r2, [r3, #0]
 800976c:	f3bf 8f4f 	dsb	sy
 8009770:	f3bf 8f6f 	isb	sy
}
 8009774:	e001      	b.n	800977a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009776:	f7ff f9e1 	bl	8008b3c <xTaskResumeAll>
}
 800977a:	bf00      	nop
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	20005710 	.word	0x20005710
 8009788:	20005714 	.word	0x20005714
 800978c:	e000ed04 	.word	0xe000ed04

08009790 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009790:	b480      	push	{r7}
 8009792:	b085      	sub	sp, #20
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009798:	4b0e      	ldr	r3, [pc, #56]	@ (80097d4 <prvGetNextExpireTime+0x44>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d101      	bne.n	80097a6 <prvGetNextExpireTime+0x16>
 80097a2:	2201      	movs	r2, #1
 80097a4:	e000      	b.n	80097a8 <prvGetNextExpireTime+0x18>
 80097a6:	2200      	movs	r2, #0
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d105      	bne.n	80097c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097b4:	4b07      	ldr	r3, [pc, #28]	@ (80097d4 <prvGetNextExpireTime+0x44>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	60fb      	str	r3, [r7, #12]
 80097be:	e001      	b.n	80097c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80097c0:	2300      	movs	r3, #0
 80097c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80097c4:	68fb      	ldr	r3, [r7, #12]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3714      	adds	r7, #20
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	2000570c 	.word	0x2000570c

080097d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80097e0:	f7ff fa4a 	bl	8008c78 <xTaskGetTickCount>
 80097e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80097e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009814 <prvSampleTimeNow+0x3c>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	68fa      	ldr	r2, [r7, #12]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d205      	bcs.n	80097fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80097f0:	f000 f93a 	bl	8009a68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	601a      	str	r2, [r3, #0]
 80097fa:	e002      	b.n	8009802 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009802:	4a04      	ldr	r2, [pc, #16]	@ (8009814 <prvSampleTimeNow+0x3c>)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009808:	68fb      	ldr	r3, [r7, #12]
}
 800980a:	4618      	mov	r0, r3
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	2000571c 	.word	0x2000571c

08009818 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b086      	sub	sp, #24
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
 8009824:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009826:	2300      	movs	r3, #0
 8009828:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	68ba      	ldr	r2, [r7, #8]
 800982e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009836:	68ba      	ldr	r2, [r7, #8]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	429a      	cmp	r2, r3
 800983c:	d812      	bhi.n	8009864 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	1ad2      	subs	r2, r2, r3
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	429a      	cmp	r2, r3
 800984a:	d302      	bcc.n	8009852 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800984c:	2301      	movs	r3, #1
 800984e:	617b      	str	r3, [r7, #20]
 8009850:	e01b      	b.n	800988a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009852:	4b10      	ldr	r3, [pc, #64]	@ (8009894 <prvInsertTimerInActiveList+0x7c>)
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	3304      	adds	r3, #4
 800985a:	4619      	mov	r1, r3
 800985c:	4610      	mov	r0, r2
 800985e:	f7fe f9be 	bl	8007bde <vListInsert>
 8009862:	e012      	b.n	800988a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	429a      	cmp	r2, r3
 800986a:	d206      	bcs.n	800987a <prvInsertTimerInActiveList+0x62>
 800986c:	68ba      	ldr	r2, [r7, #8]
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	429a      	cmp	r2, r3
 8009872:	d302      	bcc.n	800987a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009874:	2301      	movs	r3, #1
 8009876:	617b      	str	r3, [r7, #20]
 8009878:	e007      	b.n	800988a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800987a:	4b07      	ldr	r3, [pc, #28]	@ (8009898 <prvInsertTimerInActiveList+0x80>)
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	3304      	adds	r3, #4
 8009882:	4619      	mov	r1, r3
 8009884:	4610      	mov	r0, r2
 8009886:	f7fe f9aa 	bl	8007bde <vListInsert>
		}
	}

	return xProcessTimerNow;
 800988a:	697b      	ldr	r3, [r7, #20]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3718      	adds	r7, #24
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	20005710 	.word	0x20005710
 8009898:	2000570c 	.word	0x2000570c

0800989c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b08e      	sub	sp, #56	@ 0x38
 80098a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098a2:	e0ce      	b.n	8009a42 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	da19      	bge.n	80098de <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80098aa:	1d3b      	adds	r3, r7, #4
 80098ac:	3304      	adds	r3, #4
 80098ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80098b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d10b      	bne.n	80098ce <prvProcessReceivedCommands+0x32>
	__asm volatile
 80098b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ba:	f383 8811 	msr	BASEPRI, r3
 80098be:	f3bf 8f6f 	isb	sy
 80098c2:	f3bf 8f4f 	dsb	sy
 80098c6:	61fb      	str	r3, [r7, #28]
}
 80098c8:	bf00      	nop
 80098ca:	bf00      	nop
 80098cc:	e7fd      	b.n	80098ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80098ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098d4:	6850      	ldr	r0, [r2, #4]
 80098d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098d8:	6892      	ldr	r2, [r2, #8]
 80098da:	4611      	mov	r1, r2
 80098dc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f2c0 80ae 	blt.w	8009a42 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80098ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ec:	695b      	ldr	r3, [r3, #20]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d004      	beq.n	80098fc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f4:	3304      	adds	r3, #4
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7fe f9aa 	bl	8007c50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098fc:	463b      	mov	r3, r7
 80098fe:	4618      	mov	r0, r3
 8009900:	f7ff ff6a 	bl	80097d8 <prvSampleTimeNow>
 8009904:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2b09      	cmp	r3, #9
 800990a:	f200 8097 	bhi.w	8009a3c <prvProcessReceivedCommands+0x1a0>
 800990e:	a201      	add	r2, pc, #4	@ (adr r2, 8009914 <prvProcessReceivedCommands+0x78>)
 8009910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009914:	0800993d 	.word	0x0800993d
 8009918:	0800993d 	.word	0x0800993d
 800991c:	0800993d 	.word	0x0800993d
 8009920:	080099b3 	.word	0x080099b3
 8009924:	080099c7 	.word	0x080099c7
 8009928:	08009a13 	.word	0x08009a13
 800992c:	0800993d 	.word	0x0800993d
 8009930:	0800993d 	.word	0x0800993d
 8009934:	080099b3 	.word	0x080099b3
 8009938:	080099c7 	.word	0x080099c7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800993c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800993e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009942:	f043 0301 	orr.w	r3, r3, #1
 8009946:	b2da      	uxtb	r2, r3
 8009948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800994a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009952:	699b      	ldr	r3, [r3, #24]
 8009954:	18d1      	adds	r1, r2, r3
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800995a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800995c:	f7ff ff5c 	bl	8009818 <prvInsertTimerInActiveList>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d06c      	beq.n	8009a40 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009968:	6a1b      	ldr	r3, [r3, #32]
 800996a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800996c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800996e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009970:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009974:	f003 0304 	and.w	r3, r3, #4
 8009978:	2b00      	cmp	r3, #0
 800997a:	d061      	beq.n	8009a40 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009980:	699b      	ldr	r3, [r3, #24]
 8009982:	441a      	add	r2, r3
 8009984:	2300      	movs	r3, #0
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	2300      	movs	r3, #0
 800998a:	2100      	movs	r1, #0
 800998c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800998e:	f7ff fe01 	bl	8009594 <xTimerGenericCommand>
 8009992:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009994:	6a3b      	ldr	r3, [r7, #32]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d152      	bne.n	8009a40 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800999a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800999e:	f383 8811 	msr	BASEPRI, r3
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	f3bf 8f4f 	dsb	sy
 80099aa:	61bb      	str	r3, [r7, #24]
}
 80099ac:	bf00      	nop
 80099ae:	bf00      	nop
 80099b0:	e7fd      	b.n	80099ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099b8:	f023 0301 	bic.w	r3, r3, #1
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80099c4:	e03d      	b.n	8009a42 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099cc:	f043 0301 	orr.w	r3, r3, #1
 80099d0:	b2da      	uxtb	r2, r3
 80099d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099dc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80099de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e0:	699b      	ldr	r3, [r3, #24]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d10b      	bne.n	80099fe <prvProcessReceivedCommands+0x162>
	__asm volatile
 80099e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ea:	f383 8811 	msr	BASEPRI, r3
 80099ee:	f3bf 8f6f 	isb	sy
 80099f2:	f3bf 8f4f 	dsb	sy
 80099f6:	617b      	str	r3, [r7, #20]
}
 80099f8:	bf00      	nop
 80099fa:	bf00      	nop
 80099fc:	e7fd      	b.n	80099fa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80099fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a00:	699a      	ldr	r2, [r3, #24]
 8009a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a04:	18d1      	adds	r1, r2, r3
 8009a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a0c:	f7ff ff04 	bl	8009818 <prvInsertTimerInActiveList>
					break;
 8009a10:	e017      	b.n	8009a42 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a18:	f003 0302 	and.w	r3, r3, #2
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d103      	bne.n	8009a28 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009a20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a22:	f000 fbe9 	bl	800a1f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a26:	e00c      	b.n	8009a42 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a2e:	f023 0301 	bic.w	r3, r3, #1
 8009a32:	b2da      	uxtb	r2, r3
 8009a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009a3a:	e002      	b.n	8009a42 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009a3c:	bf00      	nop
 8009a3e:	e000      	b.n	8009a42 <prvProcessReceivedCommands+0x1a6>
					break;
 8009a40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a42:	4b08      	ldr	r3, [pc, #32]	@ (8009a64 <prvProcessReceivedCommands+0x1c8>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	1d39      	adds	r1, r7, #4
 8009a48:	2200      	movs	r2, #0
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7fe fbd4 	bl	80081f8 <xQueueReceive>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	f47f af26 	bne.w	80098a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009a58:	bf00      	nop
 8009a5a:	bf00      	nop
 8009a5c:	3730      	adds	r7, #48	@ 0x30
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	20005714 	.word	0x20005714

08009a68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b088      	sub	sp, #32
 8009a6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a6e:	e049      	b.n	8009b04 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a70:	4b2e      	ldr	r3, [pc, #184]	@ (8009b2c <prvSwitchTimerLists+0xc4>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8009b2c <prvSwitchTimerLists+0xc4>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	3304      	adds	r3, #4
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7fe f8e1 	bl	8007c50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6a1b      	ldr	r3, [r3, #32]
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a9c:	f003 0304 	and.w	r3, r3, #4
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d02f      	beq.n	8009b04 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	699b      	ldr	r3, [r3, #24]
 8009aa8:	693a      	ldr	r2, [r7, #16]
 8009aaa:	4413      	add	r3, r2
 8009aac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009aae:	68ba      	ldr	r2, [r7, #8]
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d90e      	bls.n	8009ad4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	68ba      	ldr	r2, [r7, #8]
 8009aba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8009b2c <prvSwitchTimerLists+0xc4>)
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	3304      	adds	r3, #4
 8009aca:	4619      	mov	r1, r3
 8009acc:	4610      	mov	r0, r2
 8009ace:	f7fe f886 	bl	8007bde <vListInsert>
 8009ad2:	e017      	b.n	8009b04 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	9300      	str	r3, [sp, #0]
 8009ad8:	2300      	movs	r3, #0
 8009ada:	693a      	ldr	r2, [r7, #16]
 8009adc:	2100      	movs	r1, #0
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f7ff fd58 	bl	8009594 <xTimerGenericCommand>
 8009ae4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d10b      	bne.n	8009b04 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af0:	f383 8811 	msr	BASEPRI, r3
 8009af4:	f3bf 8f6f 	isb	sy
 8009af8:	f3bf 8f4f 	dsb	sy
 8009afc:	603b      	str	r3, [r7, #0]
}
 8009afe:	bf00      	nop
 8009b00:	bf00      	nop
 8009b02:	e7fd      	b.n	8009b00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b04:	4b09      	ldr	r3, [pc, #36]	@ (8009b2c <prvSwitchTimerLists+0xc4>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1b0      	bne.n	8009a70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009b0e:	4b07      	ldr	r3, [pc, #28]	@ (8009b2c <prvSwitchTimerLists+0xc4>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009b14:	4b06      	ldr	r3, [pc, #24]	@ (8009b30 <prvSwitchTimerLists+0xc8>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a04      	ldr	r2, [pc, #16]	@ (8009b2c <prvSwitchTimerLists+0xc4>)
 8009b1a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b1c:	4a04      	ldr	r2, [pc, #16]	@ (8009b30 <prvSwitchTimerLists+0xc8>)
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	6013      	str	r3, [r2, #0]
}
 8009b22:	bf00      	nop
 8009b24:	3718      	adds	r7, #24
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	2000570c 	.word	0x2000570c
 8009b30:	20005710 	.word	0x20005710

08009b34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b3a:	f000 f96d 	bl	8009e18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b3e:	4b15      	ldr	r3, [pc, #84]	@ (8009b94 <prvCheckForValidListAndQueue+0x60>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d120      	bne.n	8009b88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b46:	4814      	ldr	r0, [pc, #80]	@ (8009b98 <prvCheckForValidListAndQueue+0x64>)
 8009b48:	f7fd fff8 	bl	8007b3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b4c:	4813      	ldr	r0, [pc, #76]	@ (8009b9c <prvCheckForValidListAndQueue+0x68>)
 8009b4e:	f7fd fff5 	bl	8007b3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b52:	4b13      	ldr	r3, [pc, #76]	@ (8009ba0 <prvCheckForValidListAndQueue+0x6c>)
 8009b54:	4a10      	ldr	r2, [pc, #64]	@ (8009b98 <prvCheckForValidListAndQueue+0x64>)
 8009b56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b58:	4b12      	ldr	r3, [pc, #72]	@ (8009ba4 <prvCheckForValidListAndQueue+0x70>)
 8009b5a:	4a10      	ldr	r2, [pc, #64]	@ (8009b9c <prvCheckForValidListAndQueue+0x68>)
 8009b5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b5e:	2300      	movs	r3, #0
 8009b60:	9300      	str	r3, [sp, #0]
 8009b62:	4b11      	ldr	r3, [pc, #68]	@ (8009ba8 <prvCheckForValidListAndQueue+0x74>)
 8009b64:	4a11      	ldr	r2, [pc, #68]	@ (8009bac <prvCheckForValidListAndQueue+0x78>)
 8009b66:	2110      	movs	r1, #16
 8009b68:	200a      	movs	r0, #10
 8009b6a:	f7fe f905 	bl	8007d78 <xQueueGenericCreateStatic>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	4a08      	ldr	r2, [pc, #32]	@ (8009b94 <prvCheckForValidListAndQueue+0x60>)
 8009b72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009b74:	4b07      	ldr	r3, [pc, #28]	@ (8009b94 <prvCheckForValidListAndQueue+0x60>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d005      	beq.n	8009b88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b7c:	4b05      	ldr	r3, [pc, #20]	@ (8009b94 <prvCheckForValidListAndQueue+0x60>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	490b      	ldr	r1, [pc, #44]	@ (8009bb0 <prvCheckForValidListAndQueue+0x7c>)
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7fe fd2a 	bl	80085dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b88:	f000 f978 	bl	8009e7c <vPortExitCritical>
}
 8009b8c:	bf00      	nop
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	20005714 	.word	0x20005714
 8009b98:	200056e4 	.word	0x200056e4
 8009b9c:	200056f8 	.word	0x200056f8
 8009ba0:	2000570c 	.word	0x2000570c
 8009ba4:	20005710 	.word	0x20005710
 8009ba8:	200057c0 	.word	0x200057c0
 8009bac:	20005720 	.word	0x20005720
 8009bb0:	08018530 	.word	0x08018530

08009bb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	3b04      	subs	r3, #4
 8009bc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009bcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	3b04      	subs	r3, #4
 8009bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	f023 0201 	bic.w	r2, r3, #1
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	3b04      	subs	r3, #4
 8009be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009be4:	4a0c      	ldr	r2, [pc, #48]	@ (8009c18 <pxPortInitialiseStack+0x64>)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	3b14      	subs	r3, #20
 8009bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	3b04      	subs	r3, #4
 8009bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f06f 0202 	mvn.w	r2, #2
 8009c02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	3b20      	subs	r3, #32
 8009c08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3714      	adds	r7, #20
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr
 8009c18:	08009c1d 	.word	0x08009c1d

08009c1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b085      	sub	sp, #20
 8009c20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009c22:	2300      	movs	r3, #0
 8009c24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c26:	4b13      	ldr	r3, [pc, #76]	@ (8009c74 <prvTaskExitError+0x58>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c2e:	d00b      	beq.n	8009c48 <prvTaskExitError+0x2c>
	__asm volatile
 8009c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c34:	f383 8811 	msr	BASEPRI, r3
 8009c38:	f3bf 8f6f 	isb	sy
 8009c3c:	f3bf 8f4f 	dsb	sy
 8009c40:	60fb      	str	r3, [r7, #12]
}
 8009c42:	bf00      	nop
 8009c44:	bf00      	nop
 8009c46:	e7fd      	b.n	8009c44 <prvTaskExitError+0x28>
	__asm volatile
 8009c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c4c:	f383 8811 	msr	BASEPRI, r3
 8009c50:	f3bf 8f6f 	isb	sy
 8009c54:	f3bf 8f4f 	dsb	sy
 8009c58:	60bb      	str	r3, [r7, #8]
}
 8009c5a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c5c:	bf00      	nop
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d0fc      	beq.n	8009c5e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c64:	bf00      	nop
 8009c66:	bf00      	nop
 8009c68:	3714      	adds	r7, #20
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	20000010 	.word	0x20000010
	...

08009c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c80:	4b07      	ldr	r3, [pc, #28]	@ (8009ca0 <pxCurrentTCBConst2>)
 8009c82:	6819      	ldr	r1, [r3, #0]
 8009c84:	6808      	ldr	r0, [r1, #0]
 8009c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c8a:	f380 8809 	msr	PSP, r0
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	f04f 0000 	mov.w	r0, #0
 8009c96:	f380 8811 	msr	BASEPRI, r0
 8009c9a:	4770      	bx	lr
 8009c9c:	f3af 8000 	nop.w

08009ca0 <pxCurrentTCBConst2>:
 8009ca0:	200051e4 	.word	0x200051e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ca4:	bf00      	nop
 8009ca6:	bf00      	nop

08009ca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009ca8:	4808      	ldr	r0, [pc, #32]	@ (8009ccc <prvPortStartFirstTask+0x24>)
 8009caa:	6800      	ldr	r0, [r0, #0]
 8009cac:	6800      	ldr	r0, [r0, #0]
 8009cae:	f380 8808 	msr	MSP, r0
 8009cb2:	f04f 0000 	mov.w	r0, #0
 8009cb6:	f380 8814 	msr	CONTROL, r0
 8009cba:	b662      	cpsie	i
 8009cbc:	b661      	cpsie	f
 8009cbe:	f3bf 8f4f 	dsb	sy
 8009cc2:	f3bf 8f6f 	isb	sy
 8009cc6:	df00      	svc	0
 8009cc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009cca:	bf00      	nop
 8009ccc:	e000ed08 	.word	0xe000ed08

08009cd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b086      	sub	sp, #24
 8009cd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009cd6:	4b47      	ldr	r3, [pc, #284]	@ (8009df4 <xPortStartScheduler+0x124>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a47      	ldr	r2, [pc, #284]	@ (8009df8 <xPortStartScheduler+0x128>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d10b      	bne.n	8009cf8 <xPortStartScheduler+0x28>
	__asm volatile
 8009ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	613b      	str	r3, [r7, #16]
}
 8009cf2:	bf00      	nop
 8009cf4:	bf00      	nop
 8009cf6:	e7fd      	b.n	8009cf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009cf8:	4b3e      	ldr	r3, [pc, #248]	@ (8009df4 <xPortStartScheduler+0x124>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a3f      	ldr	r2, [pc, #252]	@ (8009dfc <xPortStartScheduler+0x12c>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d10b      	bne.n	8009d1a <xPortStartScheduler+0x4a>
	__asm volatile
 8009d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d06:	f383 8811 	msr	BASEPRI, r3
 8009d0a:	f3bf 8f6f 	isb	sy
 8009d0e:	f3bf 8f4f 	dsb	sy
 8009d12:	60fb      	str	r3, [r7, #12]
}
 8009d14:	bf00      	nop
 8009d16:	bf00      	nop
 8009d18:	e7fd      	b.n	8009d16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d1a:	4b39      	ldr	r3, [pc, #228]	@ (8009e00 <xPortStartScheduler+0x130>)
 8009d1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	22ff      	movs	r2, #255	@ 0xff
 8009d2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d34:	78fb      	ldrb	r3, [r7, #3]
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009d3c:	b2da      	uxtb	r2, r3
 8009d3e:	4b31      	ldr	r3, [pc, #196]	@ (8009e04 <xPortStartScheduler+0x134>)
 8009d40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d42:	4b31      	ldr	r3, [pc, #196]	@ (8009e08 <xPortStartScheduler+0x138>)
 8009d44:	2207      	movs	r2, #7
 8009d46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d48:	e009      	b.n	8009d5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009d4a:	4b2f      	ldr	r3, [pc, #188]	@ (8009e08 <xPortStartScheduler+0x138>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	4a2d      	ldr	r2, [pc, #180]	@ (8009e08 <xPortStartScheduler+0x138>)
 8009d52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d54:	78fb      	ldrb	r3, [r7, #3]
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	005b      	lsls	r3, r3, #1
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d5e:	78fb      	ldrb	r3, [r7, #3]
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d66:	2b80      	cmp	r3, #128	@ 0x80
 8009d68:	d0ef      	beq.n	8009d4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d6a:	4b27      	ldr	r3, [pc, #156]	@ (8009e08 <xPortStartScheduler+0x138>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f1c3 0307 	rsb	r3, r3, #7
 8009d72:	2b04      	cmp	r3, #4
 8009d74:	d00b      	beq.n	8009d8e <xPortStartScheduler+0xbe>
	__asm volatile
 8009d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d7a:	f383 8811 	msr	BASEPRI, r3
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	f3bf 8f4f 	dsb	sy
 8009d86:	60bb      	str	r3, [r7, #8]
}
 8009d88:	bf00      	nop
 8009d8a:	bf00      	nop
 8009d8c:	e7fd      	b.n	8009d8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8009e08 <xPortStartScheduler+0x138>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	021b      	lsls	r3, r3, #8
 8009d94:	4a1c      	ldr	r2, [pc, #112]	@ (8009e08 <xPortStartScheduler+0x138>)
 8009d96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d98:	4b1b      	ldr	r3, [pc, #108]	@ (8009e08 <xPortStartScheduler+0x138>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009da0:	4a19      	ldr	r2, [pc, #100]	@ (8009e08 <xPortStartScheduler+0x138>)
 8009da2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	b2da      	uxtb	r2, r3
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009dac:	4b17      	ldr	r3, [pc, #92]	@ (8009e0c <xPortStartScheduler+0x13c>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a16      	ldr	r2, [pc, #88]	@ (8009e0c <xPortStartScheduler+0x13c>)
 8009db2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009db6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009db8:	4b14      	ldr	r3, [pc, #80]	@ (8009e0c <xPortStartScheduler+0x13c>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a13      	ldr	r2, [pc, #76]	@ (8009e0c <xPortStartScheduler+0x13c>)
 8009dbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009dc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009dc4:	f000 f8da 	bl	8009f7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009dc8:	4b11      	ldr	r3, [pc, #68]	@ (8009e10 <xPortStartScheduler+0x140>)
 8009dca:	2200      	movs	r2, #0
 8009dcc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009dce:	f000 f8f9 	bl	8009fc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009dd2:	4b10      	ldr	r3, [pc, #64]	@ (8009e14 <xPortStartScheduler+0x144>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a0f      	ldr	r2, [pc, #60]	@ (8009e14 <xPortStartScheduler+0x144>)
 8009dd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009ddc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009dde:	f7ff ff63 	bl	8009ca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009de2:	f7ff f813 	bl	8008e0c <vTaskSwitchContext>
	prvTaskExitError();
 8009de6:	f7ff ff19 	bl	8009c1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009dea:	2300      	movs	r3, #0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3718      	adds	r7, #24
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	e000ed00 	.word	0xe000ed00
 8009df8:	410fc271 	.word	0x410fc271
 8009dfc:	410fc270 	.word	0x410fc270
 8009e00:	e000e400 	.word	0xe000e400
 8009e04:	20005810 	.word	0x20005810
 8009e08:	20005814 	.word	0x20005814
 8009e0c:	e000ed20 	.word	0xe000ed20
 8009e10:	20000010 	.word	0x20000010
 8009e14:	e000ef34 	.word	0xe000ef34

08009e18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	607b      	str	r3, [r7, #4]
}
 8009e30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e32:	4b10      	ldr	r3, [pc, #64]	@ (8009e74 <vPortEnterCritical+0x5c>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	3301      	adds	r3, #1
 8009e38:	4a0e      	ldr	r2, [pc, #56]	@ (8009e74 <vPortEnterCritical+0x5c>)
 8009e3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8009e74 <vPortEnterCritical+0x5c>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d110      	bne.n	8009e66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e44:	4b0c      	ldr	r3, [pc, #48]	@ (8009e78 <vPortEnterCritical+0x60>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00b      	beq.n	8009e66 <vPortEnterCritical+0x4e>
	__asm volatile
 8009e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e52:	f383 8811 	msr	BASEPRI, r3
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	603b      	str	r3, [r7, #0]
}
 8009e60:	bf00      	nop
 8009e62:	bf00      	nop
 8009e64:	e7fd      	b.n	8009e62 <vPortEnterCritical+0x4a>
	}
}
 8009e66:	bf00      	nop
 8009e68:	370c      	adds	r7, #12
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	20000010 	.word	0x20000010
 8009e78:	e000ed04 	.word	0xe000ed04

08009e7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e82:	4b12      	ldr	r3, [pc, #72]	@ (8009ecc <vPortExitCritical+0x50>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d10b      	bne.n	8009ea2 <vPortExitCritical+0x26>
	__asm volatile
 8009e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	607b      	str	r3, [r7, #4]
}
 8009e9c:	bf00      	nop
 8009e9e:	bf00      	nop
 8009ea0:	e7fd      	b.n	8009e9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8009ecc <vPortExitCritical+0x50>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	4a08      	ldr	r2, [pc, #32]	@ (8009ecc <vPortExitCritical+0x50>)
 8009eaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009eac:	4b07      	ldr	r3, [pc, #28]	@ (8009ecc <vPortExitCritical+0x50>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d105      	bne.n	8009ec0 <vPortExitCritical+0x44>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	f383 8811 	msr	BASEPRI, r3
}
 8009ebe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ec0:	bf00      	nop
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr
 8009ecc:	20000010 	.word	0x20000010

08009ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ed0:	f3ef 8009 	mrs	r0, PSP
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	4b15      	ldr	r3, [pc, #84]	@ (8009f30 <pxCurrentTCBConst>)
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	f01e 0f10 	tst.w	lr, #16
 8009ee0:	bf08      	it	eq
 8009ee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eea:	6010      	str	r0, [r2, #0]
 8009eec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ef0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009ef4:	f380 8811 	msr	BASEPRI, r0
 8009ef8:	f3bf 8f4f 	dsb	sy
 8009efc:	f3bf 8f6f 	isb	sy
 8009f00:	f7fe ff84 	bl	8008e0c <vTaskSwitchContext>
 8009f04:	f04f 0000 	mov.w	r0, #0
 8009f08:	f380 8811 	msr	BASEPRI, r0
 8009f0c:	bc09      	pop	{r0, r3}
 8009f0e:	6819      	ldr	r1, [r3, #0]
 8009f10:	6808      	ldr	r0, [r1, #0]
 8009f12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f16:	f01e 0f10 	tst.w	lr, #16
 8009f1a:	bf08      	it	eq
 8009f1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f20:	f380 8809 	msr	PSP, r0
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	f3af 8000 	nop.w

08009f30 <pxCurrentTCBConst>:
 8009f30:	200051e4 	.word	0x200051e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f34:	bf00      	nop
 8009f36:	bf00      	nop

08009f38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f42:	f383 8811 	msr	BASEPRI, r3
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	607b      	str	r3, [r7, #4]
}
 8009f50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f52:	f7fe fea1 	bl	8008c98 <xTaskIncrementTick>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d003      	beq.n	8009f64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f5c:	4b06      	ldr	r3, [pc, #24]	@ (8009f78 <xPortSysTickHandler+0x40>)
 8009f5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f62:	601a      	str	r2, [r3, #0]
 8009f64:	2300      	movs	r3, #0
 8009f66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	f383 8811 	msr	BASEPRI, r3
}
 8009f6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f70:	bf00      	nop
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	e000ed04 	.word	0xe000ed04

08009f7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f80:	4b0b      	ldr	r3, [pc, #44]	@ (8009fb0 <vPortSetupTimerInterrupt+0x34>)
 8009f82:	2200      	movs	r2, #0
 8009f84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f86:	4b0b      	ldr	r3, [pc, #44]	@ (8009fb4 <vPortSetupTimerInterrupt+0x38>)
 8009f88:	2200      	movs	r2, #0
 8009f8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8009fb8 <vPortSetupTimerInterrupt+0x3c>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a0a      	ldr	r2, [pc, #40]	@ (8009fbc <vPortSetupTimerInterrupt+0x40>)
 8009f92:	fba2 2303 	umull	r2, r3, r2, r3
 8009f96:	099b      	lsrs	r3, r3, #6
 8009f98:	4a09      	ldr	r2, [pc, #36]	@ (8009fc0 <vPortSetupTimerInterrupt+0x44>)
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009f9e:	4b04      	ldr	r3, [pc, #16]	@ (8009fb0 <vPortSetupTimerInterrupt+0x34>)
 8009fa0:	2207      	movs	r2, #7
 8009fa2:	601a      	str	r2, [r3, #0]
}
 8009fa4:	bf00      	nop
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop
 8009fb0:	e000e010 	.word	0xe000e010
 8009fb4:	e000e018 	.word	0xe000e018
 8009fb8:	20000004 	.word	0x20000004
 8009fbc:	10624dd3 	.word	0x10624dd3
 8009fc0:	e000e014 	.word	0xe000e014

08009fc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009fc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009fd4 <vPortEnableVFP+0x10>
 8009fc8:	6801      	ldr	r1, [r0, #0]
 8009fca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009fce:	6001      	str	r1, [r0, #0]
 8009fd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009fd2:	bf00      	nop
 8009fd4:	e000ed88 	.word	0xe000ed88

08009fd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009fd8:	b480      	push	{r7}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009fde:	f3ef 8305 	mrs	r3, IPSR
 8009fe2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2b0f      	cmp	r3, #15
 8009fe8:	d915      	bls.n	800a016 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009fea:	4a18      	ldr	r2, [pc, #96]	@ (800a04c <vPortValidateInterruptPriority+0x74>)
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	4413      	add	r3, r2
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009ff4:	4b16      	ldr	r3, [pc, #88]	@ (800a050 <vPortValidateInterruptPriority+0x78>)
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	7afa      	ldrb	r2, [r7, #11]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d20b      	bcs.n	800a016 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	607b      	str	r3, [r7, #4]
}
 800a010:	bf00      	nop
 800a012:	bf00      	nop
 800a014:	e7fd      	b.n	800a012 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a016:	4b0f      	ldr	r3, [pc, #60]	@ (800a054 <vPortValidateInterruptPriority+0x7c>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a01e:	4b0e      	ldr	r3, [pc, #56]	@ (800a058 <vPortValidateInterruptPriority+0x80>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	429a      	cmp	r2, r3
 800a024:	d90b      	bls.n	800a03e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a02a:	f383 8811 	msr	BASEPRI, r3
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	f3bf 8f4f 	dsb	sy
 800a036:	603b      	str	r3, [r7, #0]
}
 800a038:	bf00      	nop
 800a03a:	bf00      	nop
 800a03c:	e7fd      	b.n	800a03a <vPortValidateInterruptPriority+0x62>
	}
 800a03e:	bf00      	nop
 800a040:	3714      	adds	r7, #20
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	e000e3f0 	.word	0xe000e3f0
 800a050:	20005810 	.word	0x20005810
 800a054:	e000ed0c 	.word	0xe000ed0c
 800a058:	20005814 	.word	0x20005814

0800a05c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b08a      	sub	sp, #40	@ 0x28
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a064:	2300      	movs	r3, #0
 800a066:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a068:	f7fe fd5a 	bl	8008b20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a06c:	4b5c      	ldr	r3, [pc, #368]	@ (800a1e0 <pvPortMalloc+0x184>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d101      	bne.n	800a078 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a074:	f000 f924 	bl	800a2c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a078:	4b5a      	ldr	r3, [pc, #360]	@ (800a1e4 <pvPortMalloc+0x188>)
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	4013      	ands	r3, r2
 800a080:	2b00      	cmp	r3, #0
 800a082:	f040 8095 	bne.w	800a1b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d01e      	beq.n	800a0ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a08c:	2208      	movs	r2, #8
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4413      	add	r3, r2
 800a092:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f003 0307 	and.w	r3, r3, #7
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d015      	beq.n	800a0ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f023 0307 	bic.w	r3, r3, #7
 800a0a4:	3308      	adds	r3, #8
 800a0a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f003 0307 	and.w	r3, r3, #7
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00b      	beq.n	800a0ca <pvPortMalloc+0x6e>
	__asm volatile
 800a0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b6:	f383 8811 	msr	BASEPRI, r3
 800a0ba:	f3bf 8f6f 	isb	sy
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	617b      	str	r3, [r7, #20]
}
 800a0c4:	bf00      	nop
 800a0c6:	bf00      	nop
 800a0c8:	e7fd      	b.n	800a0c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d06f      	beq.n	800a1b0 <pvPortMalloc+0x154>
 800a0d0:	4b45      	ldr	r3, [pc, #276]	@ (800a1e8 <pvPortMalloc+0x18c>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d86a      	bhi.n	800a1b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a0da:	4b44      	ldr	r3, [pc, #272]	@ (800a1ec <pvPortMalloc+0x190>)
 800a0dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a0de:	4b43      	ldr	r3, [pc, #268]	@ (800a1ec <pvPortMalloc+0x190>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0e4:	e004      	b.n	800a0f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d903      	bls.n	800a102 <pvPortMalloc+0xa6>
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d1f1      	bne.n	800a0e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a102:	4b37      	ldr	r3, [pc, #220]	@ (800a1e0 <pvPortMalloc+0x184>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a108:	429a      	cmp	r2, r3
 800a10a:	d051      	beq.n	800a1b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a10c:	6a3b      	ldr	r3, [r7, #32]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2208      	movs	r2, #8
 800a112:	4413      	add	r3, r2
 800a114:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	6a3b      	ldr	r3, [r7, #32]
 800a11c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a120:	685a      	ldr	r2, [r3, #4]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	1ad2      	subs	r2, r2, r3
 800a126:	2308      	movs	r3, #8
 800a128:	005b      	lsls	r3, r3, #1
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d920      	bls.n	800a170 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a12e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4413      	add	r3, r2
 800a134:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a136:	69bb      	ldr	r3, [r7, #24]
 800a138:	f003 0307 	and.w	r3, r3, #7
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d00b      	beq.n	800a158 <pvPortMalloc+0xfc>
	__asm volatile
 800a140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a144:	f383 8811 	msr	BASEPRI, r3
 800a148:	f3bf 8f6f 	isb	sy
 800a14c:	f3bf 8f4f 	dsb	sy
 800a150:	613b      	str	r3, [r7, #16]
}
 800a152:	bf00      	nop
 800a154:	bf00      	nop
 800a156:	e7fd      	b.n	800a154 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a15a:	685a      	ldr	r2, [r3, #4]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	1ad2      	subs	r2, r2, r3
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a16a:	69b8      	ldr	r0, [r7, #24]
 800a16c:	f000 f90a 	bl	800a384 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a170:	4b1d      	ldr	r3, [pc, #116]	@ (800a1e8 <pvPortMalloc+0x18c>)
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	4a1b      	ldr	r2, [pc, #108]	@ (800a1e8 <pvPortMalloc+0x18c>)
 800a17c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a17e:	4b1a      	ldr	r3, [pc, #104]	@ (800a1e8 <pvPortMalloc+0x18c>)
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	4b1b      	ldr	r3, [pc, #108]	@ (800a1f0 <pvPortMalloc+0x194>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	429a      	cmp	r2, r3
 800a188:	d203      	bcs.n	800a192 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a18a:	4b17      	ldr	r3, [pc, #92]	@ (800a1e8 <pvPortMalloc+0x18c>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a18      	ldr	r2, [pc, #96]	@ (800a1f0 <pvPortMalloc+0x194>)
 800a190:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a194:	685a      	ldr	r2, [r3, #4]
 800a196:	4b13      	ldr	r3, [pc, #76]	@ (800a1e4 <pvPortMalloc+0x188>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	431a      	orrs	r2, r3
 800a19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a19e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a1a6:	4b13      	ldr	r3, [pc, #76]	@ (800a1f4 <pvPortMalloc+0x198>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	4a11      	ldr	r2, [pc, #68]	@ (800a1f4 <pvPortMalloc+0x198>)
 800a1ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a1b0:	f7fe fcc4 	bl	8008b3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	f003 0307 	and.w	r3, r3, #7
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00b      	beq.n	800a1d6 <pvPortMalloc+0x17a>
	__asm volatile
 800a1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c2:	f383 8811 	msr	BASEPRI, r3
 800a1c6:	f3bf 8f6f 	isb	sy
 800a1ca:	f3bf 8f4f 	dsb	sy
 800a1ce:	60fb      	str	r3, [r7, #12]
}
 800a1d0:	bf00      	nop
 800a1d2:	bf00      	nop
 800a1d4:	e7fd      	b.n	800a1d2 <pvPortMalloc+0x176>
	return pvReturn;
 800a1d6:	69fb      	ldr	r3, [r7, #28]
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3728      	adds	r7, #40	@ 0x28
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	20006420 	.word	0x20006420
 800a1e4:	20006434 	.word	0x20006434
 800a1e8:	20006424 	.word	0x20006424
 800a1ec:	20006418 	.word	0x20006418
 800a1f0:	20006428 	.word	0x20006428
 800a1f4:	2000642c 	.word	0x2000642c

0800a1f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b086      	sub	sp, #24
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d04f      	beq.n	800a2aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a20a:	2308      	movs	r3, #8
 800a20c:	425b      	negs	r3, r3
 800a20e:	697a      	ldr	r2, [r7, #20]
 800a210:	4413      	add	r3, r2
 800a212:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	685a      	ldr	r2, [r3, #4]
 800a21c:	4b25      	ldr	r3, [pc, #148]	@ (800a2b4 <vPortFree+0xbc>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4013      	ands	r3, r2
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10b      	bne.n	800a23e <vPortFree+0x46>
	__asm volatile
 800a226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a22a:	f383 8811 	msr	BASEPRI, r3
 800a22e:	f3bf 8f6f 	isb	sy
 800a232:	f3bf 8f4f 	dsb	sy
 800a236:	60fb      	str	r3, [r7, #12]
}
 800a238:	bf00      	nop
 800a23a:	bf00      	nop
 800a23c:	e7fd      	b.n	800a23a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d00b      	beq.n	800a25e <vPortFree+0x66>
	__asm volatile
 800a246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a24a:	f383 8811 	msr	BASEPRI, r3
 800a24e:	f3bf 8f6f 	isb	sy
 800a252:	f3bf 8f4f 	dsb	sy
 800a256:	60bb      	str	r3, [r7, #8]
}
 800a258:	bf00      	nop
 800a25a:	bf00      	nop
 800a25c:	e7fd      	b.n	800a25a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	685a      	ldr	r2, [r3, #4]
 800a262:	4b14      	ldr	r3, [pc, #80]	@ (800a2b4 <vPortFree+0xbc>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4013      	ands	r3, r2
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d01e      	beq.n	800a2aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d11a      	bne.n	800a2aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	685a      	ldr	r2, [r3, #4]
 800a278:	4b0e      	ldr	r3, [pc, #56]	@ (800a2b4 <vPortFree+0xbc>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	43db      	mvns	r3, r3
 800a27e:	401a      	ands	r2, r3
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a284:	f7fe fc4c 	bl	8008b20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	685a      	ldr	r2, [r3, #4]
 800a28c:	4b0a      	ldr	r3, [pc, #40]	@ (800a2b8 <vPortFree+0xc0>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4413      	add	r3, r2
 800a292:	4a09      	ldr	r2, [pc, #36]	@ (800a2b8 <vPortFree+0xc0>)
 800a294:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a296:	6938      	ldr	r0, [r7, #16]
 800a298:	f000 f874 	bl	800a384 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a29c:	4b07      	ldr	r3, [pc, #28]	@ (800a2bc <vPortFree+0xc4>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	4a06      	ldr	r2, [pc, #24]	@ (800a2bc <vPortFree+0xc4>)
 800a2a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a2a6:	f7fe fc49 	bl	8008b3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a2aa:	bf00      	nop
 800a2ac:	3718      	adds	r7, #24
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	20006434 	.word	0x20006434
 800a2b8:	20006424 	.word	0x20006424
 800a2bc:	20006430 	.word	0x20006430

0800a2c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a2c6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a2ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a2cc:	4b27      	ldr	r3, [pc, #156]	@ (800a36c <prvHeapInit+0xac>)
 800a2ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f003 0307 	and.w	r3, r3, #7
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d00c      	beq.n	800a2f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	3307      	adds	r3, #7
 800a2de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f023 0307 	bic.w	r3, r3, #7
 800a2e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	1ad3      	subs	r3, r2, r3
 800a2ee:	4a1f      	ldr	r2, [pc, #124]	@ (800a36c <prvHeapInit+0xac>)
 800a2f0:	4413      	add	r3, r2
 800a2f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a2f8:	4a1d      	ldr	r2, [pc, #116]	@ (800a370 <prvHeapInit+0xb0>)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a2fe:	4b1c      	ldr	r3, [pc, #112]	@ (800a370 <prvHeapInit+0xb0>)
 800a300:	2200      	movs	r2, #0
 800a302:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	68ba      	ldr	r2, [r7, #8]
 800a308:	4413      	add	r3, r2
 800a30a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a30c:	2208      	movs	r2, #8
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	1a9b      	subs	r3, r3, r2
 800a312:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f023 0307 	bic.w	r3, r3, #7
 800a31a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	4a15      	ldr	r2, [pc, #84]	@ (800a374 <prvHeapInit+0xb4>)
 800a320:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a322:	4b14      	ldr	r3, [pc, #80]	@ (800a374 <prvHeapInit+0xb4>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2200      	movs	r2, #0
 800a328:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a32a:	4b12      	ldr	r3, [pc, #72]	@ (800a374 <prvHeapInit+0xb4>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2200      	movs	r2, #0
 800a330:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	1ad2      	subs	r2, r2, r3
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a340:	4b0c      	ldr	r3, [pc, #48]	@ (800a374 <prvHeapInit+0xb4>)
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	4a0a      	ldr	r2, [pc, #40]	@ (800a378 <prvHeapInit+0xb8>)
 800a34e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	4a09      	ldr	r2, [pc, #36]	@ (800a37c <prvHeapInit+0xbc>)
 800a356:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a358:	4b09      	ldr	r3, [pc, #36]	@ (800a380 <prvHeapInit+0xc0>)
 800a35a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a35e:	601a      	str	r2, [r3, #0]
}
 800a360:	bf00      	nop
 800a362:	3714      	adds	r7, #20
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr
 800a36c:	20005818 	.word	0x20005818
 800a370:	20006418 	.word	0x20006418
 800a374:	20006420 	.word	0x20006420
 800a378:	20006428 	.word	0x20006428
 800a37c:	20006424 	.word	0x20006424
 800a380:	20006434 	.word	0x20006434

0800a384 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a38c:	4b28      	ldr	r3, [pc, #160]	@ (800a430 <prvInsertBlockIntoFreeList+0xac>)
 800a38e:	60fb      	str	r3, [r7, #12]
 800a390:	e002      	b.n	800a398 <prvInsertBlockIntoFreeList+0x14>
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	60fb      	str	r3, [r7, #12]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d8f7      	bhi.n	800a392 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	68ba      	ldr	r2, [r7, #8]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d108      	bne.n	800a3c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	685a      	ldr	r2, [r3, #4]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	441a      	add	r2, r3
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	68ba      	ldr	r2, [r7, #8]
 800a3d0:	441a      	add	r2, r3
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d118      	bne.n	800a40c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	4b15      	ldr	r3, [pc, #84]	@ (800a434 <prvInsertBlockIntoFreeList+0xb0>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d00d      	beq.n	800a402 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	685a      	ldr	r2, [r3, #4]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	441a      	add	r2, r3
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	601a      	str	r2, [r3, #0]
 800a400:	e008      	b.n	800a414 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a402:	4b0c      	ldr	r3, [pc, #48]	@ (800a434 <prvInsertBlockIntoFreeList+0xb0>)
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	601a      	str	r2, [r3, #0]
 800a40a:	e003      	b.n	800a414 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a414:	68fa      	ldr	r2, [r7, #12]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d002      	beq.n	800a422 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a422:	bf00      	nop
 800a424:	3714      	adds	r7, #20
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop
 800a430:	20006418 	.word	0x20006418
 800a434:	20006420 	.word	0x20006420

0800a438 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a438:	4b04      	ldr	r3, [pc, #16]	@ (800a44c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	b10a      	cbz	r2, 800a442 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800a43e:	4803      	ldr	r0, [pc, #12]	@ (800a44c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a440:	4770      	bx	lr
 800a442:	4a03      	ldr	r2, [pc, #12]	@ (800a450 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800a444:	4801      	ldr	r0, [pc, #4]	@ (800a44c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a446:	6812      	ldr	r2, [r2, #0]
 800a448:	601a      	str	r2, [r3, #0]
 800a44a:	4770      	bx	lr
 800a44c:	2000001c 	.word	0x2000001c
 800a450:	200001d0 	.word	0x200001d0

0800a454 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a454:	4a02      	ldr	r2, [pc, #8]	@ (800a460 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800a456:	4b03      	ldr	r3, [pc, #12]	@ (800a464 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800a458:	6812      	ldr	r2, [r2, #0]
 800a45a:	601a      	str	r2, [r3, #0]
 800a45c:	4770      	bx	lr
 800a45e:	bf00      	nop
 800a460:	200001d0 	.word	0x200001d0
 800a464:	2000001c 	.word	0x2000001c

0800a468 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800a468:	f003 be7c 	b.w	800e164 <geometry_msgs__msg__Twist__init>

0800a46c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800a46c:	f003 be9e 	b.w	800e1ac <geometry_msgs__msg__Twist__fini>

0800a470 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a470:	b510      	push	{r4, lr}
 800a472:	f000 f819 	bl	800a4a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a476:	4c07      	ldr	r4, [pc, #28]	@ (800a494 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800a478:	60e0      	str	r0, [r4, #12]
 800a47a:	f000 f815 	bl	800a4a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a47e:	4b06      	ldr	r3, [pc, #24]	@ (800a498 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a480:	64a0      	str	r0, [r4, #72]	@ 0x48
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	b10a      	cbz	r2, 800a48a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800a486:	4804      	ldr	r0, [pc, #16]	@ (800a498 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a488:	bd10      	pop	{r4, pc}
 800a48a:	4a04      	ldr	r2, [pc, #16]	@ (800a49c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800a48c:	4802      	ldr	r0, [pc, #8]	@ (800a498 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a48e:	6812      	ldr	r2, [r2, #0]
 800a490:	601a      	str	r2, [r3, #0]
 800a492:	bd10      	pop	{r4, pc}
 800a494:	20000028 	.word	0x20000028
 800a498:	200000a0 	.word	0x200000a0
 800a49c:	200001d4 	.word	0x200001d4

0800a4a0 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800a4a0:	f003 be90 	b.w	800e1c4 <geometry_msgs__msg__Vector3__init>

0800a4a4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800a4a4:	f003 be92 	b.w	800e1cc <geometry_msgs__msg__Vector3__fini>

0800a4a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a4a8:	4b04      	ldr	r3, [pc, #16]	@ (800a4bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	b10a      	cbz	r2, 800a4b2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800a4ae:	4803      	ldr	r0, [pc, #12]	@ (800a4bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a4b0:	4770      	bx	lr
 800a4b2:	4a03      	ldr	r2, [pc, #12]	@ (800a4c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800a4b4:	4801      	ldr	r0, [pc, #4]	@ (800a4bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a4b6:	6812      	ldr	r2, [r2, #0]
 800a4b8:	601a      	str	r2, [r3, #0]
 800a4ba:	4770      	bx	lr
 800a4bc:	20000160 	.word	0x20000160
 800a4c0:	200001d4 	.word	0x200001d4

0800a4c4 <get_serialized_size_geometry_msgs__msg__Twist>:
 800a4c4:	b570      	push	{r4, r5, r6, lr}
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	b148      	cbz	r0, 800a4de <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800a4ca:	460d      	mov	r5, r1
 800a4cc:	f000 f860 	bl	800a590 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a4d0:	4606      	mov	r6, r0
 800a4d2:	1829      	adds	r1, r5, r0
 800a4d4:	f104 0018 	add.w	r0, r4, #24
 800a4d8:	f000 f85a 	bl	800a590 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a4dc:	4430      	add	r0, r6
 800a4de:	bd70      	pop	{r4, r5, r6, pc}

0800a4e0 <_Twist__cdr_deserialize>:
 800a4e0:	b570      	push	{r4, r5, r6, lr}
 800a4e2:	460c      	mov	r4, r1
 800a4e4:	b189      	cbz	r1, 800a50a <_Twist__cdr_deserialize+0x2a>
 800a4e6:	4605      	mov	r5, r0
 800a4e8:	f000 f8de 	bl	800a6a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a4ec:	6843      	ldr	r3, [r0, #4]
 800a4ee:	4621      	mov	r1, r4
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	4798      	blx	r3
 800a4f6:	f000 f8d7 	bl	800a6a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a4fa:	6843      	ldr	r3, [r0, #4]
 800a4fc:	f104 0118 	add.w	r1, r4, #24
 800a500:	4628      	mov	r0, r5
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a508:	4718      	bx	r3
 800a50a:	4608      	mov	r0, r1
 800a50c:	bd70      	pop	{r4, r5, r6, pc}
 800a50e:	bf00      	nop

0800a510 <_Twist__cdr_serialize>:
 800a510:	b510      	push	{r4, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	9101      	str	r1, [sp, #4]
 800a516:	b190      	cbz	r0, 800a53e <_Twist__cdr_serialize+0x2e>
 800a518:	4604      	mov	r4, r0
 800a51a:	f000 f8c5 	bl	800a6a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a51e:	6843      	ldr	r3, [r0, #4]
 800a520:	9901      	ldr	r1, [sp, #4]
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	4620      	mov	r0, r4
 800a526:	4798      	blx	r3
 800a528:	f000 f8be 	bl	800a6a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a52c:	6843      	ldr	r3, [r0, #4]
 800a52e:	9901      	ldr	r1, [sp, #4]
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	f104 0018 	add.w	r0, r4, #24
 800a536:	b002      	add	sp, #8
 800a538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a53c:	4718      	bx	r3
 800a53e:	b002      	add	sp, #8
 800a540:	bd10      	pop	{r4, pc}
 800a542:	bf00      	nop

0800a544 <_Twist__get_serialized_size>:
 800a544:	b538      	push	{r3, r4, r5, lr}
 800a546:	4604      	mov	r4, r0
 800a548:	b148      	cbz	r0, 800a55e <_Twist__get_serialized_size+0x1a>
 800a54a:	2100      	movs	r1, #0
 800a54c:	f000 f820 	bl	800a590 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a550:	4605      	mov	r5, r0
 800a552:	4601      	mov	r1, r0
 800a554:	f104 0018 	add.w	r0, r4, #24
 800a558:	f000 f81a 	bl	800a590 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a55c:	4428      	add	r0, r5
 800a55e:	bd38      	pop	{r3, r4, r5, pc}

0800a560 <_Twist__max_serialized_size>:
 800a560:	b510      	push	{r4, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	2301      	movs	r3, #1
 800a566:	2100      	movs	r1, #0
 800a568:	f10d 0007 	add.w	r0, sp, #7
 800a56c:	f88d 3007 	strb.w	r3, [sp, #7]
 800a570:	f000 f87e 	bl	800a670 <max_serialized_size_geometry_msgs__msg__Vector3>
 800a574:	4604      	mov	r4, r0
 800a576:	4601      	mov	r1, r0
 800a578:	f10d 0007 	add.w	r0, sp, #7
 800a57c:	f000 f878 	bl	800a670 <max_serialized_size_geometry_msgs__msg__Vector3>
 800a580:	4420      	add	r0, r4
 800a582:	b002      	add	sp, #8
 800a584:	bd10      	pop	{r4, pc}
 800a586:	bf00      	nop

0800a588 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a588:	4800      	ldr	r0, [pc, #0]	@ (800a58c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800a58a:	4770      	bx	lr
 800a58c:	2000016c 	.word	0x2000016c

0800a590 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800a590:	b1b8      	cbz	r0, 800a5c2 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800a592:	b538      	push	{r3, r4, r5, lr}
 800a594:	460d      	mov	r5, r1
 800a596:	4628      	mov	r0, r5
 800a598:	2108      	movs	r1, #8
 800a59a:	f001 f9fd 	bl	800b998 <ucdr_alignment>
 800a59e:	f105 0308 	add.w	r3, r5, #8
 800a5a2:	181c      	adds	r4, r3, r0
 800a5a4:	2108      	movs	r1, #8
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	f001 f9f6 	bl	800b998 <ucdr_alignment>
 800a5ac:	3008      	adds	r0, #8
 800a5ae:	4404      	add	r4, r0
 800a5b0:	2108      	movs	r1, #8
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	f001 f9f0 	bl	800b998 <ucdr_alignment>
 800a5b8:	f1c5 0508 	rsb	r5, r5, #8
 800a5bc:	4428      	add	r0, r5
 800a5be:	4420      	add	r0, r4
 800a5c0:	bd38      	pop	{r3, r4, r5, pc}
 800a5c2:	4770      	bx	lr

0800a5c4 <_Vector3__cdr_deserialize>:
 800a5c4:	b538      	push	{r3, r4, r5, lr}
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	b171      	cbz	r1, 800a5e8 <_Vector3__cdr_deserialize+0x24>
 800a5ca:	4605      	mov	r5, r0
 800a5cc:	f001 f8c6 	bl	800b75c <ucdr_deserialize_double>
 800a5d0:	f104 0108 	add.w	r1, r4, #8
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	f001 f8c1 	bl	800b75c <ucdr_deserialize_double>
 800a5da:	f104 0110 	add.w	r1, r4, #16
 800a5de:	4628      	mov	r0, r5
 800a5e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5e4:	f001 b8ba 	b.w	800b75c <ucdr_deserialize_double>
 800a5e8:	4608      	mov	r0, r1
 800a5ea:	bd38      	pop	{r3, r4, r5, pc}

0800a5ec <_Vector3__cdr_serialize>:
 800a5ec:	b198      	cbz	r0, 800a616 <_Vector3__cdr_serialize+0x2a>
 800a5ee:	b538      	push	{r3, r4, r5, lr}
 800a5f0:	ed90 0b00 	vldr	d0, [r0]
 800a5f4:	460d      	mov	r5, r1
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	4608      	mov	r0, r1
 800a5fa:	f000 ffdf 	bl	800b5bc <ucdr_serialize_double>
 800a5fe:	ed94 0b02 	vldr	d0, [r4, #8]
 800a602:	4628      	mov	r0, r5
 800a604:	f000 ffda 	bl	800b5bc <ucdr_serialize_double>
 800a608:	ed94 0b04 	vldr	d0, [r4, #16]
 800a60c:	4628      	mov	r0, r5
 800a60e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a612:	f000 bfd3 	b.w	800b5bc <ucdr_serialize_double>
 800a616:	4770      	bx	lr

0800a618 <_Vector3__get_serialized_size>:
 800a618:	b198      	cbz	r0, 800a642 <_Vector3__get_serialized_size+0x2a>
 800a61a:	b510      	push	{r4, lr}
 800a61c:	2108      	movs	r1, #8
 800a61e:	2000      	movs	r0, #0
 800a620:	f001 f9ba 	bl	800b998 <ucdr_alignment>
 800a624:	f100 0408 	add.w	r4, r0, #8
 800a628:	2108      	movs	r1, #8
 800a62a:	4620      	mov	r0, r4
 800a62c:	f001 f9b4 	bl	800b998 <ucdr_alignment>
 800a630:	3008      	adds	r0, #8
 800a632:	4404      	add	r4, r0
 800a634:	2108      	movs	r1, #8
 800a636:	4620      	mov	r0, r4
 800a638:	f001 f9ae 	bl	800b998 <ucdr_alignment>
 800a63c:	3008      	adds	r0, #8
 800a63e:	4420      	add	r0, r4
 800a640:	bd10      	pop	{r4, pc}
 800a642:	4770      	bx	lr

0800a644 <_Vector3__max_serialized_size>:
 800a644:	b538      	push	{r3, r4, r5, lr}
 800a646:	2108      	movs	r1, #8
 800a648:	2000      	movs	r0, #0
 800a64a:	f001 f9a5 	bl	800b998 <ucdr_alignment>
 800a64e:	f100 0508 	add.w	r5, r0, #8
 800a652:	2108      	movs	r1, #8
 800a654:	4628      	mov	r0, r5
 800a656:	f001 f99f 	bl	800b998 <ucdr_alignment>
 800a65a:	f100 0408 	add.w	r4, r0, #8
 800a65e:	442c      	add	r4, r5
 800a660:	2108      	movs	r1, #8
 800a662:	4620      	mov	r0, r4
 800a664:	f001 f998 	bl	800b998 <ucdr_alignment>
 800a668:	3008      	adds	r0, #8
 800a66a:	4420      	add	r0, r4
 800a66c:	bd38      	pop	{r3, r4, r5, pc}
 800a66e:	bf00      	nop

0800a670 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800a670:	b570      	push	{r4, r5, r6, lr}
 800a672:	2301      	movs	r3, #1
 800a674:	460c      	mov	r4, r1
 800a676:	7003      	strb	r3, [r0, #0]
 800a678:	2108      	movs	r1, #8
 800a67a:	4620      	mov	r0, r4
 800a67c:	f001 f98c 	bl	800b998 <ucdr_alignment>
 800a680:	f104 0508 	add.w	r5, r4, #8
 800a684:	1946      	adds	r6, r0, r5
 800a686:	2108      	movs	r1, #8
 800a688:	4630      	mov	r0, r6
 800a68a:	f001 f985 	bl	800b998 <ucdr_alignment>
 800a68e:	f100 0508 	add.w	r5, r0, #8
 800a692:	4435      	add	r5, r6
 800a694:	2108      	movs	r1, #8
 800a696:	4628      	mov	r0, r5
 800a698:	f001 f97e 	bl	800b998 <ucdr_alignment>
 800a69c:	f1c4 0408 	rsb	r4, r4, #8
 800a6a0:	4420      	add	r0, r4
 800a6a2:	4428      	add	r0, r5
 800a6a4:	bd70      	pop	{r4, r5, r6, pc}
 800a6a6:	bf00      	nop

0800a6a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a6a8:	4800      	ldr	r0, [pc, #0]	@ (800a6ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800a6aa:	4770      	bx	lr
 800a6ac:	20000194 	.word	0x20000194

0800a6b0 <ucdr_serialize_bool>:
 800a6b0:	b538      	push	{r3, r4, r5, lr}
 800a6b2:	460d      	mov	r5, r1
 800a6b4:	2101      	movs	r1, #1
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	f001 f922 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800a6bc:	b148      	cbz	r0, 800a6d2 <ucdr_serialize_bool+0x22>
 800a6be:	68a3      	ldr	r3, [r4, #8]
 800a6c0:	701d      	strb	r5, [r3, #0]
 800a6c2:	68a2      	ldr	r2, [r4, #8]
 800a6c4:	6923      	ldr	r3, [r4, #16]
 800a6c6:	2101      	movs	r1, #1
 800a6c8:	440a      	add	r2, r1
 800a6ca:	440b      	add	r3, r1
 800a6cc:	60a2      	str	r2, [r4, #8]
 800a6ce:	6123      	str	r3, [r4, #16]
 800a6d0:	7561      	strb	r1, [r4, #21]
 800a6d2:	7da0      	ldrb	r0, [r4, #22]
 800a6d4:	f080 0001 	eor.w	r0, r0, #1
 800a6d8:	bd38      	pop	{r3, r4, r5, pc}
 800a6da:	bf00      	nop

0800a6dc <ucdr_deserialize_bool>:
 800a6dc:	b538      	push	{r3, r4, r5, lr}
 800a6de:	460d      	mov	r5, r1
 800a6e0:	2101      	movs	r1, #1
 800a6e2:	4604      	mov	r4, r0
 800a6e4:	f001 f90c 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800a6e8:	b160      	cbz	r0, 800a704 <ucdr_deserialize_bool+0x28>
 800a6ea:	68a2      	ldr	r2, [r4, #8]
 800a6ec:	6923      	ldr	r3, [r4, #16]
 800a6ee:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a6f2:	3900      	subs	r1, #0
 800a6f4:	bf18      	it	ne
 800a6f6:	2101      	movne	r1, #1
 800a6f8:	7029      	strb	r1, [r5, #0]
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	2101      	movs	r1, #1
 800a6fe:	60a2      	str	r2, [r4, #8]
 800a700:	6123      	str	r3, [r4, #16]
 800a702:	7561      	strb	r1, [r4, #21]
 800a704:	7da0      	ldrb	r0, [r4, #22]
 800a706:	f080 0001 	eor.w	r0, r0, #1
 800a70a:	bd38      	pop	{r3, r4, r5, pc}

0800a70c <ucdr_serialize_uint8_t>:
 800a70c:	b538      	push	{r3, r4, r5, lr}
 800a70e:	460d      	mov	r5, r1
 800a710:	2101      	movs	r1, #1
 800a712:	4604      	mov	r4, r0
 800a714:	f001 f8f4 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800a718:	b148      	cbz	r0, 800a72e <ucdr_serialize_uint8_t+0x22>
 800a71a:	68a3      	ldr	r3, [r4, #8]
 800a71c:	701d      	strb	r5, [r3, #0]
 800a71e:	68a2      	ldr	r2, [r4, #8]
 800a720:	6923      	ldr	r3, [r4, #16]
 800a722:	2101      	movs	r1, #1
 800a724:	440a      	add	r2, r1
 800a726:	440b      	add	r3, r1
 800a728:	60a2      	str	r2, [r4, #8]
 800a72a:	6123      	str	r3, [r4, #16]
 800a72c:	7561      	strb	r1, [r4, #21]
 800a72e:	7da0      	ldrb	r0, [r4, #22]
 800a730:	f080 0001 	eor.w	r0, r0, #1
 800a734:	bd38      	pop	{r3, r4, r5, pc}
 800a736:	bf00      	nop

0800a738 <ucdr_deserialize_uint8_t>:
 800a738:	b538      	push	{r3, r4, r5, lr}
 800a73a:	460d      	mov	r5, r1
 800a73c:	2101      	movs	r1, #1
 800a73e:	4604      	mov	r4, r0
 800a740:	f001 f8de 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800a744:	b150      	cbz	r0, 800a75c <ucdr_deserialize_uint8_t+0x24>
 800a746:	68a3      	ldr	r3, [r4, #8]
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	702b      	strb	r3, [r5, #0]
 800a74c:	68a2      	ldr	r2, [r4, #8]
 800a74e:	6923      	ldr	r3, [r4, #16]
 800a750:	2101      	movs	r1, #1
 800a752:	440a      	add	r2, r1
 800a754:	440b      	add	r3, r1
 800a756:	60a2      	str	r2, [r4, #8]
 800a758:	6123      	str	r3, [r4, #16]
 800a75a:	7561      	strb	r1, [r4, #21]
 800a75c:	7da0      	ldrb	r0, [r4, #22]
 800a75e:	f080 0001 	eor.w	r0, r0, #1
 800a762:	bd38      	pop	{r3, r4, r5, pc}

0800a764 <ucdr_serialize_uint16_t>:
 800a764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a768:	b082      	sub	sp, #8
 800a76a:	460b      	mov	r3, r1
 800a76c:	2102      	movs	r1, #2
 800a76e:	4604      	mov	r4, r0
 800a770:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a774:	f001 f918 	bl	800b9a8 <ucdr_buffer_alignment>
 800a778:	4601      	mov	r1, r0
 800a77a:	4620      	mov	r0, r4
 800a77c:	7d67      	ldrb	r7, [r4, #21]
 800a77e:	f001 f957 	bl	800ba30 <ucdr_advance_buffer>
 800a782:	2102      	movs	r1, #2
 800a784:	4620      	mov	r0, r4
 800a786:	f001 f8af 	bl	800b8e8 <ucdr_check_buffer_available_for>
 800a78a:	bb78      	cbnz	r0, 800a7ec <ucdr_serialize_uint16_t+0x88>
 800a78c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a790:	42ab      	cmp	r3, r5
 800a792:	d926      	bls.n	800a7e2 <ucdr_serialize_uint16_t+0x7e>
 800a794:	1b5e      	subs	r6, r3, r5
 800a796:	60a3      	str	r3, [r4, #8]
 800a798:	6923      	ldr	r3, [r4, #16]
 800a79a:	f1c6 0802 	rsb	r8, r6, #2
 800a79e:	4433      	add	r3, r6
 800a7a0:	6123      	str	r3, [r4, #16]
 800a7a2:	4641      	mov	r1, r8
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	f001 f8ab 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800a7aa:	2800      	cmp	r0, #0
 800a7ac:	d03b      	beq.n	800a826 <ucdr_serialize_uint16_t+0xc2>
 800a7ae:	7d23      	ldrb	r3, [r4, #20]
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d04a      	beq.n	800a84a <ucdr_serialize_uint16_t+0xe6>
 800a7b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a7b8:	702b      	strb	r3, [r5, #0]
 800a7ba:	2e00      	cmp	r6, #0
 800a7bc:	d040      	beq.n	800a840 <ucdr_serialize_uint16_t+0xdc>
 800a7be:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a7c2:	706b      	strb	r3, [r5, #1]
 800a7c4:	6923      	ldr	r3, [r4, #16]
 800a7c6:	68a2      	ldr	r2, [r4, #8]
 800a7c8:	7da0      	ldrb	r0, [r4, #22]
 800a7ca:	3302      	adds	r3, #2
 800a7cc:	1b9e      	subs	r6, r3, r6
 800a7ce:	4442      	add	r2, r8
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	f080 0001 	eor.w	r0, r0, #1
 800a7d6:	60a2      	str	r2, [r4, #8]
 800a7d8:	6126      	str	r6, [r4, #16]
 800a7da:	7563      	strb	r3, [r4, #21]
 800a7dc:	b002      	add	sp, #8
 800a7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7e2:	2102      	movs	r1, #2
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f001 f88b 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800a7ea:	b190      	cbz	r0, 800a812 <ucdr_serialize_uint16_t+0xae>
 800a7ec:	7d23      	ldrb	r3, [r4, #20]
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	68a3      	ldr	r3, [r4, #8]
 800a7f2:	d014      	beq.n	800a81e <ucdr_serialize_uint16_t+0xba>
 800a7f4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a7f8:	701a      	strb	r2, [r3, #0]
 800a7fa:	68a3      	ldr	r3, [r4, #8]
 800a7fc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a800:	705a      	strb	r2, [r3, #1]
 800a802:	68a2      	ldr	r2, [r4, #8]
 800a804:	6923      	ldr	r3, [r4, #16]
 800a806:	3202      	adds	r2, #2
 800a808:	3302      	adds	r3, #2
 800a80a:	2102      	movs	r1, #2
 800a80c:	60a2      	str	r2, [r4, #8]
 800a80e:	6123      	str	r3, [r4, #16]
 800a810:	7561      	strb	r1, [r4, #21]
 800a812:	7da0      	ldrb	r0, [r4, #22]
 800a814:	f080 0001 	eor.w	r0, r0, #1
 800a818:	b002      	add	sp, #8
 800a81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a81e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a822:	801a      	strh	r2, [r3, #0]
 800a824:	e7ed      	b.n	800a802 <ucdr_serialize_uint16_t+0x9e>
 800a826:	68a2      	ldr	r2, [r4, #8]
 800a828:	6923      	ldr	r3, [r4, #16]
 800a82a:	7da0      	ldrb	r0, [r4, #22]
 800a82c:	7567      	strb	r7, [r4, #21]
 800a82e:	1b92      	subs	r2, r2, r6
 800a830:	1b9b      	subs	r3, r3, r6
 800a832:	f080 0001 	eor.w	r0, r0, #1
 800a836:	60a2      	str	r2, [r4, #8]
 800a838:	6123      	str	r3, [r4, #16]
 800a83a:	b002      	add	sp, #8
 800a83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a840:	68a3      	ldr	r3, [r4, #8]
 800a842:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a846:	701a      	strb	r2, [r3, #0]
 800a848:	e7bc      	b.n	800a7c4 <ucdr_serialize_uint16_t+0x60>
 800a84a:	4628      	mov	r0, r5
 800a84c:	f10d 0506 	add.w	r5, sp, #6
 800a850:	4629      	mov	r1, r5
 800a852:	4632      	mov	r2, r6
 800a854:	f00c ff59 	bl	801770a <memcpy>
 800a858:	68a0      	ldr	r0, [r4, #8]
 800a85a:	4642      	mov	r2, r8
 800a85c:	19a9      	adds	r1, r5, r6
 800a85e:	f00c ff54 	bl	801770a <memcpy>
 800a862:	e7af      	b.n	800a7c4 <ucdr_serialize_uint16_t+0x60>

0800a864 <ucdr_serialize_endian_uint16_t>:
 800a864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a868:	b083      	sub	sp, #12
 800a86a:	460d      	mov	r5, r1
 800a86c:	2102      	movs	r1, #2
 800a86e:	4604      	mov	r4, r0
 800a870:	f8ad 2006 	strh.w	r2, [sp, #6]
 800a874:	f001 f898 	bl	800b9a8 <ucdr_buffer_alignment>
 800a878:	4601      	mov	r1, r0
 800a87a:	4620      	mov	r0, r4
 800a87c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a880:	f001 f8d6 	bl	800ba30 <ucdr_advance_buffer>
 800a884:	2102      	movs	r1, #2
 800a886:	4620      	mov	r0, r4
 800a888:	f001 f82e 	bl	800b8e8 <ucdr_check_buffer_available_for>
 800a88c:	bb70      	cbnz	r0, 800a8ec <ucdr_serialize_endian_uint16_t+0x88>
 800a88e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a892:	42be      	cmp	r6, r7
 800a894:	d925      	bls.n	800a8e2 <ucdr_serialize_endian_uint16_t+0x7e>
 800a896:	6923      	ldr	r3, [r4, #16]
 800a898:	60a6      	str	r6, [r4, #8]
 800a89a:	1bf6      	subs	r6, r6, r7
 800a89c:	4433      	add	r3, r6
 800a89e:	f1c6 0902 	rsb	r9, r6, #2
 800a8a2:	6123      	str	r3, [r4, #16]
 800a8a4:	4649      	mov	r1, r9
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f001 f82a 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	d039      	beq.n	800a924 <ucdr_serialize_endian_uint16_t+0xc0>
 800a8b0:	2d01      	cmp	r5, #1
 800a8b2:	d04a      	beq.n	800a94a <ucdr_serialize_endian_uint16_t+0xe6>
 800a8b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a8b8:	703b      	strb	r3, [r7, #0]
 800a8ba:	2e00      	cmp	r6, #0
 800a8bc:	d040      	beq.n	800a940 <ucdr_serialize_endian_uint16_t+0xdc>
 800a8be:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a8c2:	707b      	strb	r3, [r7, #1]
 800a8c4:	6923      	ldr	r3, [r4, #16]
 800a8c6:	68a2      	ldr	r2, [r4, #8]
 800a8c8:	7da0      	ldrb	r0, [r4, #22]
 800a8ca:	3302      	adds	r3, #2
 800a8cc:	444a      	add	r2, r9
 800a8ce:	1b9b      	subs	r3, r3, r6
 800a8d0:	2102      	movs	r1, #2
 800a8d2:	f080 0001 	eor.w	r0, r0, #1
 800a8d6:	60a2      	str	r2, [r4, #8]
 800a8d8:	6123      	str	r3, [r4, #16]
 800a8da:	7561      	strb	r1, [r4, #21]
 800a8dc:	b003      	add	sp, #12
 800a8de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8e2:	2102      	movs	r1, #2
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f001 f80b 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800a8ea:	b188      	cbz	r0, 800a910 <ucdr_serialize_endian_uint16_t+0xac>
 800a8ec:	2d01      	cmp	r5, #1
 800a8ee:	68a3      	ldr	r3, [r4, #8]
 800a8f0:	d014      	beq.n	800a91c <ucdr_serialize_endian_uint16_t+0xb8>
 800a8f2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a8f6:	701a      	strb	r2, [r3, #0]
 800a8f8:	68a3      	ldr	r3, [r4, #8]
 800a8fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a8fe:	705a      	strb	r2, [r3, #1]
 800a900:	68a2      	ldr	r2, [r4, #8]
 800a902:	6923      	ldr	r3, [r4, #16]
 800a904:	3202      	adds	r2, #2
 800a906:	3302      	adds	r3, #2
 800a908:	2102      	movs	r1, #2
 800a90a:	60a2      	str	r2, [r4, #8]
 800a90c:	6123      	str	r3, [r4, #16]
 800a90e:	7561      	strb	r1, [r4, #21]
 800a910:	7da0      	ldrb	r0, [r4, #22]
 800a912:	f080 0001 	eor.w	r0, r0, #1
 800a916:	b003      	add	sp, #12
 800a918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a91c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a920:	801a      	strh	r2, [r3, #0]
 800a922:	e7ed      	b.n	800a900 <ucdr_serialize_endian_uint16_t+0x9c>
 800a924:	68a2      	ldr	r2, [r4, #8]
 800a926:	6923      	ldr	r3, [r4, #16]
 800a928:	7da0      	ldrb	r0, [r4, #22]
 800a92a:	f884 8015 	strb.w	r8, [r4, #21]
 800a92e:	1b92      	subs	r2, r2, r6
 800a930:	1b9b      	subs	r3, r3, r6
 800a932:	f080 0001 	eor.w	r0, r0, #1
 800a936:	60a2      	str	r2, [r4, #8]
 800a938:	6123      	str	r3, [r4, #16]
 800a93a:	b003      	add	sp, #12
 800a93c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a940:	68a3      	ldr	r3, [r4, #8]
 800a942:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a946:	701a      	strb	r2, [r3, #0]
 800a948:	e7bc      	b.n	800a8c4 <ucdr_serialize_endian_uint16_t+0x60>
 800a94a:	f10d 0506 	add.w	r5, sp, #6
 800a94e:	4629      	mov	r1, r5
 800a950:	4632      	mov	r2, r6
 800a952:	4638      	mov	r0, r7
 800a954:	f00c fed9 	bl	801770a <memcpy>
 800a958:	68a0      	ldr	r0, [r4, #8]
 800a95a:	464a      	mov	r2, r9
 800a95c:	19a9      	adds	r1, r5, r6
 800a95e:	f00c fed4 	bl	801770a <memcpy>
 800a962:	e7af      	b.n	800a8c4 <ucdr_serialize_endian_uint16_t+0x60>

0800a964 <ucdr_deserialize_uint16_t>:
 800a964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a968:	460d      	mov	r5, r1
 800a96a:	2102      	movs	r1, #2
 800a96c:	4604      	mov	r4, r0
 800a96e:	f001 f81b 	bl	800b9a8 <ucdr_buffer_alignment>
 800a972:	4601      	mov	r1, r0
 800a974:	4620      	mov	r0, r4
 800a976:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a97a:	f001 f859 	bl	800ba30 <ucdr_advance_buffer>
 800a97e:	2102      	movs	r1, #2
 800a980:	4620      	mov	r0, r4
 800a982:	f000 ffb1 	bl	800b8e8 <ucdr_check_buffer_available_for>
 800a986:	bb60      	cbnz	r0, 800a9e2 <ucdr_deserialize_uint16_t+0x7e>
 800a988:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a98c:	42be      	cmp	r6, r7
 800a98e:	d923      	bls.n	800a9d8 <ucdr_deserialize_uint16_t+0x74>
 800a990:	6923      	ldr	r3, [r4, #16]
 800a992:	60a6      	str	r6, [r4, #8]
 800a994:	1bf6      	subs	r6, r6, r7
 800a996:	4433      	add	r3, r6
 800a998:	f1c6 0902 	rsb	r9, r6, #2
 800a99c:	6123      	str	r3, [r4, #16]
 800a99e:	4649      	mov	r1, r9
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	f000 ffad 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	d034      	beq.n	800aa14 <ucdr_deserialize_uint16_t+0xb0>
 800a9aa:	7d23      	ldrb	r3, [r4, #20]
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d042      	beq.n	800aa36 <ucdr_deserialize_uint16_t+0xd2>
 800a9b0:	787b      	ldrb	r3, [r7, #1]
 800a9b2:	702b      	strb	r3, [r5, #0]
 800a9b4:	2e00      	cmp	r6, #0
 800a9b6:	d03a      	beq.n	800aa2e <ucdr_deserialize_uint16_t+0xca>
 800a9b8:	783b      	ldrb	r3, [r7, #0]
 800a9ba:	706b      	strb	r3, [r5, #1]
 800a9bc:	6923      	ldr	r3, [r4, #16]
 800a9be:	68a2      	ldr	r2, [r4, #8]
 800a9c0:	7da0      	ldrb	r0, [r4, #22]
 800a9c2:	2102      	movs	r1, #2
 800a9c4:	3302      	adds	r3, #2
 800a9c6:	444a      	add	r2, r9
 800a9c8:	1b9b      	subs	r3, r3, r6
 800a9ca:	7561      	strb	r1, [r4, #21]
 800a9cc:	60a2      	str	r2, [r4, #8]
 800a9ce:	6123      	str	r3, [r4, #16]
 800a9d0:	f080 0001 	eor.w	r0, r0, #1
 800a9d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9d8:	2102      	movs	r1, #2
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f000 ff90 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800a9e0:	b180      	cbz	r0, 800aa04 <ucdr_deserialize_uint16_t+0xa0>
 800a9e2:	7d23      	ldrb	r3, [r4, #20]
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	68a3      	ldr	r3, [r4, #8]
 800a9e8:	d011      	beq.n	800aa0e <ucdr_deserialize_uint16_t+0xaa>
 800a9ea:	785b      	ldrb	r3, [r3, #1]
 800a9ec:	702b      	strb	r3, [r5, #0]
 800a9ee:	68a3      	ldr	r3, [r4, #8]
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	706b      	strb	r3, [r5, #1]
 800a9f4:	68a2      	ldr	r2, [r4, #8]
 800a9f6:	6923      	ldr	r3, [r4, #16]
 800a9f8:	3202      	adds	r2, #2
 800a9fa:	3302      	adds	r3, #2
 800a9fc:	2102      	movs	r1, #2
 800a9fe:	60a2      	str	r2, [r4, #8]
 800aa00:	6123      	str	r3, [r4, #16]
 800aa02:	7561      	strb	r1, [r4, #21]
 800aa04:	7da0      	ldrb	r0, [r4, #22]
 800aa06:	f080 0001 	eor.w	r0, r0, #1
 800aa0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa0e:	881b      	ldrh	r3, [r3, #0]
 800aa10:	802b      	strh	r3, [r5, #0]
 800aa12:	e7ef      	b.n	800a9f4 <ucdr_deserialize_uint16_t+0x90>
 800aa14:	68a2      	ldr	r2, [r4, #8]
 800aa16:	6923      	ldr	r3, [r4, #16]
 800aa18:	7da0      	ldrb	r0, [r4, #22]
 800aa1a:	f884 8015 	strb.w	r8, [r4, #21]
 800aa1e:	1b92      	subs	r2, r2, r6
 800aa20:	1b9b      	subs	r3, r3, r6
 800aa22:	60a2      	str	r2, [r4, #8]
 800aa24:	6123      	str	r3, [r4, #16]
 800aa26:	f080 0001 	eor.w	r0, r0, #1
 800aa2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa2e:	68a3      	ldr	r3, [r4, #8]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	706b      	strb	r3, [r5, #1]
 800aa34:	e7c2      	b.n	800a9bc <ucdr_deserialize_uint16_t+0x58>
 800aa36:	4639      	mov	r1, r7
 800aa38:	4632      	mov	r2, r6
 800aa3a:	4628      	mov	r0, r5
 800aa3c:	f00c fe65 	bl	801770a <memcpy>
 800aa40:	68a1      	ldr	r1, [r4, #8]
 800aa42:	464a      	mov	r2, r9
 800aa44:	19a8      	adds	r0, r5, r6
 800aa46:	f00c fe60 	bl	801770a <memcpy>
 800aa4a:	e7b7      	b.n	800a9bc <ucdr_deserialize_uint16_t+0x58>

0800aa4c <ucdr_deserialize_endian_uint16_t>:
 800aa4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa50:	460e      	mov	r6, r1
 800aa52:	2102      	movs	r1, #2
 800aa54:	4604      	mov	r4, r0
 800aa56:	4615      	mov	r5, r2
 800aa58:	f000 ffa6 	bl	800b9a8 <ucdr_buffer_alignment>
 800aa5c:	4601      	mov	r1, r0
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f894 9015 	ldrb.w	r9, [r4, #21]
 800aa64:	f000 ffe4 	bl	800ba30 <ucdr_advance_buffer>
 800aa68:	2102      	movs	r1, #2
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	f000 ff3c 	bl	800b8e8 <ucdr_check_buffer_available_for>
 800aa70:	bb70      	cbnz	r0, 800aad0 <ucdr_deserialize_endian_uint16_t+0x84>
 800aa72:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800aa76:	4547      	cmp	r7, r8
 800aa78:	d925      	bls.n	800aac6 <ucdr_deserialize_endian_uint16_t+0x7a>
 800aa7a:	6923      	ldr	r3, [r4, #16]
 800aa7c:	60a7      	str	r7, [r4, #8]
 800aa7e:	eba7 0708 	sub.w	r7, r7, r8
 800aa82:	443b      	add	r3, r7
 800aa84:	f1c7 0a02 	rsb	sl, r7, #2
 800aa88:	6123      	str	r3, [r4, #16]
 800aa8a:	4651      	mov	r1, sl
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	f000 ff37 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800aa92:	2800      	cmp	r0, #0
 800aa94:	d034      	beq.n	800ab00 <ucdr_deserialize_endian_uint16_t+0xb4>
 800aa96:	2e01      	cmp	r6, #1
 800aa98:	d043      	beq.n	800ab22 <ucdr_deserialize_endian_uint16_t+0xd6>
 800aa9a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800aa9e:	702b      	strb	r3, [r5, #0]
 800aaa0:	2f00      	cmp	r7, #0
 800aaa2:	d03a      	beq.n	800ab1a <ucdr_deserialize_endian_uint16_t+0xce>
 800aaa4:	f898 3000 	ldrb.w	r3, [r8]
 800aaa8:	706b      	strb	r3, [r5, #1]
 800aaaa:	6923      	ldr	r3, [r4, #16]
 800aaac:	68a2      	ldr	r2, [r4, #8]
 800aaae:	7da0      	ldrb	r0, [r4, #22]
 800aab0:	2102      	movs	r1, #2
 800aab2:	3302      	adds	r3, #2
 800aab4:	4452      	add	r2, sl
 800aab6:	1bdb      	subs	r3, r3, r7
 800aab8:	7561      	strb	r1, [r4, #21]
 800aaba:	60a2      	str	r2, [r4, #8]
 800aabc:	6123      	str	r3, [r4, #16]
 800aabe:	f080 0001 	eor.w	r0, r0, #1
 800aac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aac6:	2102      	movs	r1, #2
 800aac8:	4620      	mov	r0, r4
 800aaca:	f000 ff19 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800aace:	b178      	cbz	r0, 800aaf0 <ucdr_deserialize_endian_uint16_t+0xa4>
 800aad0:	2e01      	cmp	r6, #1
 800aad2:	68a3      	ldr	r3, [r4, #8]
 800aad4:	d011      	beq.n	800aafa <ucdr_deserialize_endian_uint16_t+0xae>
 800aad6:	785b      	ldrb	r3, [r3, #1]
 800aad8:	702b      	strb	r3, [r5, #0]
 800aada:	68a3      	ldr	r3, [r4, #8]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	706b      	strb	r3, [r5, #1]
 800aae0:	68a2      	ldr	r2, [r4, #8]
 800aae2:	6923      	ldr	r3, [r4, #16]
 800aae4:	3202      	adds	r2, #2
 800aae6:	3302      	adds	r3, #2
 800aae8:	2102      	movs	r1, #2
 800aaea:	60a2      	str	r2, [r4, #8]
 800aaec:	6123      	str	r3, [r4, #16]
 800aaee:	7561      	strb	r1, [r4, #21]
 800aaf0:	7da0      	ldrb	r0, [r4, #22]
 800aaf2:	f080 0001 	eor.w	r0, r0, #1
 800aaf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aafa:	881b      	ldrh	r3, [r3, #0]
 800aafc:	802b      	strh	r3, [r5, #0]
 800aafe:	e7ef      	b.n	800aae0 <ucdr_deserialize_endian_uint16_t+0x94>
 800ab00:	68a2      	ldr	r2, [r4, #8]
 800ab02:	6923      	ldr	r3, [r4, #16]
 800ab04:	7da0      	ldrb	r0, [r4, #22]
 800ab06:	f884 9015 	strb.w	r9, [r4, #21]
 800ab0a:	1bd2      	subs	r2, r2, r7
 800ab0c:	1bdb      	subs	r3, r3, r7
 800ab0e:	60a2      	str	r2, [r4, #8]
 800ab10:	6123      	str	r3, [r4, #16]
 800ab12:	f080 0001 	eor.w	r0, r0, #1
 800ab16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab1a:	68a3      	ldr	r3, [r4, #8]
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	706b      	strb	r3, [r5, #1]
 800ab20:	e7c3      	b.n	800aaaa <ucdr_deserialize_endian_uint16_t+0x5e>
 800ab22:	4641      	mov	r1, r8
 800ab24:	463a      	mov	r2, r7
 800ab26:	4628      	mov	r0, r5
 800ab28:	f00c fdef 	bl	801770a <memcpy>
 800ab2c:	68a1      	ldr	r1, [r4, #8]
 800ab2e:	4652      	mov	r2, sl
 800ab30:	19e8      	adds	r0, r5, r7
 800ab32:	f00c fdea 	bl	801770a <memcpy>
 800ab36:	e7b8      	b.n	800aaaa <ucdr_deserialize_endian_uint16_t+0x5e>

0800ab38 <ucdr_serialize_uint32_t>:
 800ab38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab3c:	b082      	sub	sp, #8
 800ab3e:	4604      	mov	r4, r0
 800ab40:	9101      	str	r1, [sp, #4]
 800ab42:	2104      	movs	r1, #4
 800ab44:	f000 ff30 	bl	800b9a8 <ucdr_buffer_alignment>
 800ab48:	4601      	mov	r1, r0
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	7d67      	ldrb	r7, [r4, #21]
 800ab4e:	f000 ff6f 	bl	800ba30 <ucdr_advance_buffer>
 800ab52:	2104      	movs	r1, #4
 800ab54:	4620      	mov	r0, r4
 800ab56:	f000 fec7 	bl	800b8e8 <ucdr_check_buffer_available_for>
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	d139      	bne.n	800abd2 <ucdr_serialize_uint32_t+0x9a>
 800ab5e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ab62:	42ab      	cmp	r3, r5
 800ab64:	d930      	bls.n	800abc8 <ucdr_serialize_uint32_t+0x90>
 800ab66:	1b5e      	subs	r6, r3, r5
 800ab68:	60a3      	str	r3, [r4, #8]
 800ab6a:	6923      	ldr	r3, [r4, #16]
 800ab6c:	f1c6 0804 	rsb	r8, r6, #4
 800ab70:	4433      	add	r3, r6
 800ab72:	6123      	str	r3, [r4, #16]
 800ab74:	4641      	mov	r1, r8
 800ab76:	4620      	mov	r0, r4
 800ab78:	f000 fec2 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	d04c      	beq.n	800ac1a <ucdr_serialize_uint32_t+0xe2>
 800ab80:	7d23      	ldrb	r3, [r4, #20]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d063      	beq.n	800ac4e <ucdr_serialize_uint32_t+0x116>
 800ab86:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ab8a:	702b      	strb	r3, [r5, #0]
 800ab8c:	2e00      	cmp	r6, #0
 800ab8e:	d051      	beq.n	800ac34 <ucdr_serialize_uint32_t+0xfc>
 800ab90:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ab94:	706b      	strb	r3, [r5, #1]
 800ab96:	2e01      	cmp	r6, #1
 800ab98:	d050      	beq.n	800ac3c <ucdr_serialize_uint32_t+0x104>
 800ab9a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ab9e:	70ab      	strb	r3, [r5, #2]
 800aba0:	2e02      	cmp	r6, #2
 800aba2:	d04f      	beq.n	800ac44 <ucdr_serialize_uint32_t+0x10c>
 800aba4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800aba8:	70eb      	strb	r3, [r5, #3]
 800abaa:	6923      	ldr	r3, [r4, #16]
 800abac:	68a2      	ldr	r2, [r4, #8]
 800abae:	7da0      	ldrb	r0, [r4, #22]
 800abb0:	3304      	adds	r3, #4
 800abb2:	1b9e      	subs	r6, r3, r6
 800abb4:	4442      	add	r2, r8
 800abb6:	2304      	movs	r3, #4
 800abb8:	f080 0001 	eor.w	r0, r0, #1
 800abbc:	60a2      	str	r2, [r4, #8]
 800abbe:	6126      	str	r6, [r4, #16]
 800abc0:	7563      	strb	r3, [r4, #21]
 800abc2:	b002      	add	sp, #8
 800abc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abc8:	2104      	movs	r1, #4
 800abca:	4620      	mov	r0, r4
 800abcc:	f000 fe98 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800abd0:	b1d0      	cbz	r0, 800ac08 <ucdr_serialize_uint32_t+0xd0>
 800abd2:	7d23      	ldrb	r3, [r4, #20]
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	68a3      	ldr	r3, [r4, #8]
 800abd8:	d01c      	beq.n	800ac14 <ucdr_serialize_uint32_t+0xdc>
 800abda:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800abde:	701a      	strb	r2, [r3, #0]
 800abe0:	68a3      	ldr	r3, [r4, #8]
 800abe2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800abe6:	705a      	strb	r2, [r3, #1]
 800abe8:	68a3      	ldr	r3, [r4, #8]
 800abea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800abee:	709a      	strb	r2, [r3, #2]
 800abf0:	68a3      	ldr	r3, [r4, #8]
 800abf2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800abf6:	70da      	strb	r2, [r3, #3]
 800abf8:	68a2      	ldr	r2, [r4, #8]
 800abfa:	6923      	ldr	r3, [r4, #16]
 800abfc:	3204      	adds	r2, #4
 800abfe:	3304      	adds	r3, #4
 800ac00:	2104      	movs	r1, #4
 800ac02:	60a2      	str	r2, [r4, #8]
 800ac04:	6123      	str	r3, [r4, #16]
 800ac06:	7561      	strb	r1, [r4, #21]
 800ac08:	7da0      	ldrb	r0, [r4, #22]
 800ac0a:	f080 0001 	eor.w	r0, r0, #1
 800ac0e:	b002      	add	sp, #8
 800ac10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac14:	9a01      	ldr	r2, [sp, #4]
 800ac16:	601a      	str	r2, [r3, #0]
 800ac18:	e7ee      	b.n	800abf8 <ucdr_serialize_uint32_t+0xc0>
 800ac1a:	68a2      	ldr	r2, [r4, #8]
 800ac1c:	6923      	ldr	r3, [r4, #16]
 800ac1e:	7da0      	ldrb	r0, [r4, #22]
 800ac20:	7567      	strb	r7, [r4, #21]
 800ac22:	1b92      	subs	r2, r2, r6
 800ac24:	1b9b      	subs	r3, r3, r6
 800ac26:	f080 0001 	eor.w	r0, r0, #1
 800ac2a:	60a2      	str	r2, [r4, #8]
 800ac2c:	6123      	str	r3, [r4, #16]
 800ac2e:	b002      	add	sp, #8
 800ac30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac34:	68a3      	ldr	r3, [r4, #8]
 800ac36:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ac3a:	701a      	strb	r2, [r3, #0]
 800ac3c:	68a3      	ldr	r3, [r4, #8]
 800ac3e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ac42:	701a      	strb	r2, [r3, #0]
 800ac44:	68a3      	ldr	r3, [r4, #8]
 800ac46:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ac4a:	701a      	strb	r2, [r3, #0]
 800ac4c:	e7ad      	b.n	800abaa <ucdr_serialize_uint32_t+0x72>
 800ac4e:	4628      	mov	r0, r5
 800ac50:	ad01      	add	r5, sp, #4
 800ac52:	4629      	mov	r1, r5
 800ac54:	4632      	mov	r2, r6
 800ac56:	f00c fd58 	bl	801770a <memcpy>
 800ac5a:	68a0      	ldr	r0, [r4, #8]
 800ac5c:	4642      	mov	r2, r8
 800ac5e:	19a9      	adds	r1, r5, r6
 800ac60:	f00c fd53 	bl	801770a <memcpy>
 800ac64:	e7a1      	b.n	800abaa <ucdr_serialize_uint32_t+0x72>
 800ac66:	bf00      	nop

0800ac68 <ucdr_serialize_endian_uint32_t>:
 800ac68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac6c:	b083      	sub	sp, #12
 800ac6e:	460d      	mov	r5, r1
 800ac70:	2104      	movs	r1, #4
 800ac72:	4604      	mov	r4, r0
 800ac74:	9201      	str	r2, [sp, #4]
 800ac76:	f000 fe97 	bl	800b9a8 <ucdr_buffer_alignment>
 800ac7a:	4601      	mov	r1, r0
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ac82:	f000 fed5 	bl	800ba30 <ucdr_advance_buffer>
 800ac86:	2104      	movs	r1, #4
 800ac88:	4620      	mov	r0, r4
 800ac8a:	f000 fe2d 	bl	800b8e8 <ucdr_check_buffer_available_for>
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	d138      	bne.n	800ad04 <ucdr_serialize_endian_uint32_t+0x9c>
 800ac92:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ac96:	42b7      	cmp	r7, r6
 800ac98:	d92f      	bls.n	800acfa <ucdr_serialize_endian_uint32_t+0x92>
 800ac9a:	6923      	ldr	r3, [r4, #16]
 800ac9c:	60a7      	str	r7, [r4, #8]
 800ac9e:	1bbf      	subs	r7, r7, r6
 800aca0:	443b      	add	r3, r7
 800aca2:	f1c7 0904 	rsb	r9, r7, #4
 800aca6:	6123      	str	r3, [r4, #16]
 800aca8:	4649      	mov	r1, r9
 800acaa:	4620      	mov	r0, r4
 800acac:	f000 fe28 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800acb0:	2800      	cmp	r0, #0
 800acb2:	d04a      	beq.n	800ad4a <ucdr_serialize_endian_uint32_t+0xe2>
 800acb4:	2d01      	cmp	r5, #1
 800acb6:	d063      	beq.n	800ad80 <ucdr_serialize_endian_uint32_t+0x118>
 800acb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800acbc:	7033      	strb	r3, [r6, #0]
 800acbe:	2f00      	cmp	r7, #0
 800acc0:	d051      	beq.n	800ad66 <ucdr_serialize_endian_uint32_t+0xfe>
 800acc2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800acc6:	7073      	strb	r3, [r6, #1]
 800acc8:	2f01      	cmp	r7, #1
 800acca:	d050      	beq.n	800ad6e <ucdr_serialize_endian_uint32_t+0x106>
 800accc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800acd0:	70b3      	strb	r3, [r6, #2]
 800acd2:	2f02      	cmp	r7, #2
 800acd4:	d04f      	beq.n	800ad76 <ucdr_serialize_endian_uint32_t+0x10e>
 800acd6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800acda:	70f3      	strb	r3, [r6, #3]
 800acdc:	6923      	ldr	r3, [r4, #16]
 800acde:	68a2      	ldr	r2, [r4, #8]
 800ace0:	7da0      	ldrb	r0, [r4, #22]
 800ace2:	3304      	adds	r3, #4
 800ace4:	444a      	add	r2, r9
 800ace6:	1bdb      	subs	r3, r3, r7
 800ace8:	2104      	movs	r1, #4
 800acea:	f080 0001 	eor.w	r0, r0, #1
 800acee:	60a2      	str	r2, [r4, #8]
 800acf0:	6123      	str	r3, [r4, #16]
 800acf2:	7561      	strb	r1, [r4, #21]
 800acf4:	b003      	add	sp, #12
 800acf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acfa:	2104      	movs	r1, #4
 800acfc:	4620      	mov	r0, r4
 800acfe:	f000 fdff 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800ad02:	b1c8      	cbz	r0, 800ad38 <ucdr_serialize_endian_uint32_t+0xd0>
 800ad04:	2d01      	cmp	r5, #1
 800ad06:	68a3      	ldr	r3, [r4, #8]
 800ad08:	d01c      	beq.n	800ad44 <ucdr_serialize_endian_uint32_t+0xdc>
 800ad0a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ad0e:	701a      	strb	r2, [r3, #0]
 800ad10:	68a3      	ldr	r3, [r4, #8]
 800ad12:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ad16:	705a      	strb	r2, [r3, #1]
 800ad18:	68a3      	ldr	r3, [r4, #8]
 800ad1a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ad1e:	709a      	strb	r2, [r3, #2]
 800ad20:	68a3      	ldr	r3, [r4, #8]
 800ad22:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ad26:	70da      	strb	r2, [r3, #3]
 800ad28:	68a2      	ldr	r2, [r4, #8]
 800ad2a:	6923      	ldr	r3, [r4, #16]
 800ad2c:	3204      	adds	r2, #4
 800ad2e:	3304      	adds	r3, #4
 800ad30:	2104      	movs	r1, #4
 800ad32:	60a2      	str	r2, [r4, #8]
 800ad34:	6123      	str	r3, [r4, #16]
 800ad36:	7561      	strb	r1, [r4, #21]
 800ad38:	7da0      	ldrb	r0, [r4, #22]
 800ad3a:	f080 0001 	eor.w	r0, r0, #1
 800ad3e:	b003      	add	sp, #12
 800ad40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad44:	9a01      	ldr	r2, [sp, #4]
 800ad46:	601a      	str	r2, [r3, #0]
 800ad48:	e7ee      	b.n	800ad28 <ucdr_serialize_endian_uint32_t+0xc0>
 800ad4a:	68a2      	ldr	r2, [r4, #8]
 800ad4c:	6923      	ldr	r3, [r4, #16]
 800ad4e:	7da0      	ldrb	r0, [r4, #22]
 800ad50:	f884 8015 	strb.w	r8, [r4, #21]
 800ad54:	1bd2      	subs	r2, r2, r7
 800ad56:	1bdb      	subs	r3, r3, r7
 800ad58:	f080 0001 	eor.w	r0, r0, #1
 800ad5c:	60a2      	str	r2, [r4, #8]
 800ad5e:	6123      	str	r3, [r4, #16]
 800ad60:	b003      	add	sp, #12
 800ad62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad66:	68a3      	ldr	r3, [r4, #8]
 800ad68:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ad6c:	701a      	strb	r2, [r3, #0]
 800ad6e:	68a3      	ldr	r3, [r4, #8]
 800ad70:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ad74:	701a      	strb	r2, [r3, #0]
 800ad76:	68a3      	ldr	r3, [r4, #8]
 800ad78:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ad7c:	701a      	strb	r2, [r3, #0]
 800ad7e:	e7ad      	b.n	800acdc <ucdr_serialize_endian_uint32_t+0x74>
 800ad80:	ad01      	add	r5, sp, #4
 800ad82:	4629      	mov	r1, r5
 800ad84:	463a      	mov	r2, r7
 800ad86:	4630      	mov	r0, r6
 800ad88:	f00c fcbf 	bl	801770a <memcpy>
 800ad8c:	68a0      	ldr	r0, [r4, #8]
 800ad8e:	464a      	mov	r2, r9
 800ad90:	19e9      	adds	r1, r5, r7
 800ad92:	f00c fcba 	bl	801770a <memcpy>
 800ad96:	e7a1      	b.n	800acdc <ucdr_serialize_endian_uint32_t+0x74>

0800ad98 <ucdr_deserialize_uint32_t>:
 800ad98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad9c:	460d      	mov	r5, r1
 800ad9e:	2104      	movs	r1, #4
 800ada0:	4604      	mov	r4, r0
 800ada2:	f000 fe01 	bl	800b9a8 <ucdr_buffer_alignment>
 800ada6:	4601      	mov	r1, r0
 800ada8:	4620      	mov	r0, r4
 800adaa:	f894 8015 	ldrb.w	r8, [r4, #21]
 800adae:	f000 fe3f 	bl	800ba30 <ucdr_advance_buffer>
 800adb2:	2104      	movs	r1, #4
 800adb4:	4620      	mov	r0, r4
 800adb6:	f000 fd97 	bl	800b8e8 <ucdr_check_buffer_available_for>
 800adba:	2800      	cmp	r0, #0
 800adbc:	d138      	bne.n	800ae30 <ucdr_deserialize_uint32_t+0x98>
 800adbe:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800adc2:	42b7      	cmp	r7, r6
 800adc4:	d92f      	bls.n	800ae26 <ucdr_deserialize_uint32_t+0x8e>
 800adc6:	6923      	ldr	r3, [r4, #16]
 800adc8:	60a7      	str	r7, [r4, #8]
 800adca:	1bbf      	subs	r7, r7, r6
 800adcc:	443b      	add	r3, r7
 800adce:	f1c7 0904 	rsb	r9, r7, #4
 800add2:	6123      	str	r3, [r4, #16]
 800add4:	4649      	mov	r1, r9
 800add6:	4620      	mov	r0, r4
 800add8:	f000 fd92 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800addc:	2800      	cmp	r0, #0
 800adde:	d046      	beq.n	800ae6e <ucdr_deserialize_uint32_t+0xd6>
 800ade0:	7d23      	ldrb	r3, [r4, #20]
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d05c      	beq.n	800aea0 <ucdr_deserialize_uint32_t+0x108>
 800ade6:	78f3      	ldrb	r3, [r6, #3]
 800ade8:	702b      	strb	r3, [r5, #0]
 800adea:	2f00      	cmp	r7, #0
 800adec:	d04c      	beq.n	800ae88 <ucdr_deserialize_uint32_t+0xf0>
 800adee:	78b3      	ldrb	r3, [r6, #2]
 800adf0:	706b      	strb	r3, [r5, #1]
 800adf2:	2f01      	cmp	r7, #1
 800adf4:	f105 0302 	add.w	r3, r5, #2
 800adf8:	d04a      	beq.n	800ae90 <ucdr_deserialize_uint32_t+0xf8>
 800adfa:	7873      	ldrb	r3, [r6, #1]
 800adfc:	70ab      	strb	r3, [r5, #2]
 800adfe:	2f02      	cmp	r7, #2
 800ae00:	f105 0303 	add.w	r3, r5, #3
 800ae04:	d048      	beq.n	800ae98 <ucdr_deserialize_uint32_t+0x100>
 800ae06:	7833      	ldrb	r3, [r6, #0]
 800ae08:	70eb      	strb	r3, [r5, #3]
 800ae0a:	6923      	ldr	r3, [r4, #16]
 800ae0c:	68a2      	ldr	r2, [r4, #8]
 800ae0e:	7da0      	ldrb	r0, [r4, #22]
 800ae10:	2104      	movs	r1, #4
 800ae12:	3304      	adds	r3, #4
 800ae14:	444a      	add	r2, r9
 800ae16:	1bdb      	subs	r3, r3, r7
 800ae18:	7561      	strb	r1, [r4, #21]
 800ae1a:	60a2      	str	r2, [r4, #8]
 800ae1c:	6123      	str	r3, [r4, #16]
 800ae1e:	f080 0001 	eor.w	r0, r0, #1
 800ae22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae26:	2104      	movs	r1, #4
 800ae28:	4620      	mov	r0, r4
 800ae2a:	f000 fd69 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800ae2e:	b1b0      	cbz	r0, 800ae5e <ucdr_deserialize_uint32_t+0xc6>
 800ae30:	7d23      	ldrb	r3, [r4, #20]
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	68a3      	ldr	r3, [r4, #8]
 800ae36:	d017      	beq.n	800ae68 <ucdr_deserialize_uint32_t+0xd0>
 800ae38:	78db      	ldrb	r3, [r3, #3]
 800ae3a:	702b      	strb	r3, [r5, #0]
 800ae3c:	68a3      	ldr	r3, [r4, #8]
 800ae3e:	789b      	ldrb	r3, [r3, #2]
 800ae40:	706b      	strb	r3, [r5, #1]
 800ae42:	68a3      	ldr	r3, [r4, #8]
 800ae44:	785b      	ldrb	r3, [r3, #1]
 800ae46:	70ab      	strb	r3, [r5, #2]
 800ae48:	68a3      	ldr	r3, [r4, #8]
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	70eb      	strb	r3, [r5, #3]
 800ae4e:	68a2      	ldr	r2, [r4, #8]
 800ae50:	6923      	ldr	r3, [r4, #16]
 800ae52:	3204      	adds	r2, #4
 800ae54:	3304      	adds	r3, #4
 800ae56:	2104      	movs	r1, #4
 800ae58:	60a2      	str	r2, [r4, #8]
 800ae5a:	6123      	str	r3, [r4, #16]
 800ae5c:	7561      	strb	r1, [r4, #21]
 800ae5e:	7da0      	ldrb	r0, [r4, #22]
 800ae60:	f080 0001 	eor.w	r0, r0, #1
 800ae64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	602b      	str	r3, [r5, #0]
 800ae6c:	e7ef      	b.n	800ae4e <ucdr_deserialize_uint32_t+0xb6>
 800ae6e:	68a2      	ldr	r2, [r4, #8]
 800ae70:	6923      	ldr	r3, [r4, #16]
 800ae72:	7da0      	ldrb	r0, [r4, #22]
 800ae74:	f884 8015 	strb.w	r8, [r4, #21]
 800ae78:	1bd2      	subs	r2, r2, r7
 800ae7a:	1bdb      	subs	r3, r3, r7
 800ae7c:	60a2      	str	r2, [r4, #8]
 800ae7e:	6123      	str	r3, [r4, #16]
 800ae80:	f080 0001 	eor.w	r0, r0, #1
 800ae84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae88:	68a3      	ldr	r3, [r4, #8]
 800ae8a:	789b      	ldrb	r3, [r3, #2]
 800ae8c:	706b      	strb	r3, [r5, #1]
 800ae8e:	1cab      	adds	r3, r5, #2
 800ae90:	68a2      	ldr	r2, [r4, #8]
 800ae92:	7852      	ldrb	r2, [r2, #1]
 800ae94:	f803 2b01 	strb.w	r2, [r3], #1
 800ae98:	68a2      	ldr	r2, [r4, #8]
 800ae9a:	7812      	ldrb	r2, [r2, #0]
 800ae9c:	701a      	strb	r2, [r3, #0]
 800ae9e:	e7b4      	b.n	800ae0a <ucdr_deserialize_uint32_t+0x72>
 800aea0:	4631      	mov	r1, r6
 800aea2:	463a      	mov	r2, r7
 800aea4:	4628      	mov	r0, r5
 800aea6:	f00c fc30 	bl	801770a <memcpy>
 800aeaa:	68a1      	ldr	r1, [r4, #8]
 800aeac:	464a      	mov	r2, r9
 800aeae:	19e8      	adds	r0, r5, r7
 800aeb0:	f00c fc2b 	bl	801770a <memcpy>
 800aeb4:	e7a9      	b.n	800ae0a <ucdr_deserialize_uint32_t+0x72>
 800aeb6:	bf00      	nop

0800aeb8 <ucdr_deserialize_endian_uint32_t>:
 800aeb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aebc:	460e      	mov	r6, r1
 800aebe:	2104      	movs	r1, #4
 800aec0:	4604      	mov	r4, r0
 800aec2:	4615      	mov	r5, r2
 800aec4:	f000 fd70 	bl	800b9a8 <ucdr_buffer_alignment>
 800aec8:	4601      	mov	r1, r0
 800aeca:	4620      	mov	r0, r4
 800aecc:	f894 9015 	ldrb.w	r9, [r4, #21]
 800aed0:	f000 fdae 	bl	800ba30 <ucdr_advance_buffer>
 800aed4:	2104      	movs	r1, #4
 800aed6:	4620      	mov	r0, r4
 800aed8:	f000 fd06 	bl	800b8e8 <ucdr_check_buffer_available_for>
 800aedc:	2800      	cmp	r0, #0
 800aede:	d13c      	bne.n	800af5a <ucdr_deserialize_endian_uint32_t+0xa2>
 800aee0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800aee4:	42bb      	cmp	r3, r7
 800aee6:	d933      	bls.n	800af50 <ucdr_deserialize_endian_uint32_t+0x98>
 800aee8:	eba3 0807 	sub.w	r8, r3, r7
 800aeec:	60a3      	str	r3, [r4, #8]
 800aeee:	6923      	ldr	r3, [r4, #16]
 800aef0:	f1c8 0a04 	rsb	sl, r8, #4
 800aef4:	4443      	add	r3, r8
 800aef6:	6123      	str	r3, [r4, #16]
 800aef8:	4651      	mov	r1, sl
 800aefa:	4620      	mov	r0, r4
 800aefc:	f000 fd00 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800af00:	2800      	cmp	r0, #0
 800af02:	d048      	beq.n	800af96 <ucdr_deserialize_endian_uint32_t+0xde>
 800af04:	2e01      	cmp	r6, #1
 800af06:	d061      	beq.n	800afcc <ucdr_deserialize_endian_uint32_t+0x114>
 800af08:	78fb      	ldrb	r3, [r7, #3]
 800af0a:	702b      	strb	r3, [r5, #0]
 800af0c:	f1b8 0f00 	cmp.w	r8, #0
 800af10:	d050      	beq.n	800afb4 <ucdr_deserialize_endian_uint32_t+0xfc>
 800af12:	78bb      	ldrb	r3, [r7, #2]
 800af14:	706b      	strb	r3, [r5, #1]
 800af16:	f1b8 0f01 	cmp.w	r8, #1
 800af1a:	f105 0302 	add.w	r3, r5, #2
 800af1e:	d04d      	beq.n	800afbc <ucdr_deserialize_endian_uint32_t+0x104>
 800af20:	787b      	ldrb	r3, [r7, #1]
 800af22:	70ab      	strb	r3, [r5, #2]
 800af24:	f1b8 0f02 	cmp.w	r8, #2
 800af28:	f105 0303 	add.w	r3, r5, #3
 800af2c:	d04a      	beq.n	800afc4 <ucdr_deserialize_endian_uint32_t+0x10c>
 800af2e:	783b      	ldrb	r3, [r7, #0]
 800af30:	70eb      	strb	r3, [r5, #3]
 800af32:	6923      	ldr	r3, [r4, #16]
 800af34:	68a2      	ldr	r2, [r4, #8]
 800af36:	7da0      	ldrb	r0, [r4, #22]
 800af38:	2104      	movs	r1, #4
 800af3a:	3304      	adds	r3, #4
 800af3c:	4452      	add	r2, sl
 800af3e:	eba3 0308 	sub.w	r3, r3, r8
 800af42:	7561      	strb	r1, [r4, #21]
 800af44:	60a2      	str	r2, [r4, #8]
 800af46:	6123      	str	r3, [r4, #16]
 800af48:	f080 0001 	eor.w	r0, r0, #1
 800af4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af50:	2104      	movs	r1, #4
 800af52:	4620      	mov	r0, r4
 800af54:	f000 fcd4 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800af58:	b1a8      	cbz	r0, 800af86 <ucdr_deserialize_endian_uint32_t+0xce>
 800af5a:	2e01      	cmp	r6, #1
 800af5c:	68a3      	ldr	r3, [r4, #8]
 800af5e:	d017      	beq.n	800af90 <ucdr_deserialize_endian_uint32_t+0xd8>
 800af60:	78db      	ldrb	r3, [r3, #3]
 800af62:	702b      	strb	r3, [r5, #0]
 800af64:	68a3      	ldr	r3, [r4, #8]
 800af66:	789b      	ldrb	r3, [r3, #2]
 800af68:	706b      	strb	r3, [r5, #1]
 800af6a:	68a3      	ldr	r3, [r4, #8]
 800af6c:	785b      	ldrb	r3, [r3, #1]
 800af6e:	70ab      	strb	r3, [r5, #2]
 800af70:	68a3      	ldr	r3, [r4, #8]
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	70eb      	strb	r3, [r5, #3]
 800af76:	68a2      	ldr	r2, [r4, #8]
 800af78:	6923      	ldr	r3, [r4, #16]
 800af7a:	3204      	adds	r2, #4
 800af7c:	3304      	adds	r3, #4
 800af7e:	2104      	movs	r1, #4
 800af80:	60a2      	str	r2, [r4, #8]
 800af82:	6123      	str	r3, [r4, #16]
 800af84:	7561      	strb	r1, [r4, #21]
 800af86:	7da0      	ldrb	r0, [r4, #22]
 800af88:	f080 0001 	eor.w	r0, r0, #1
 800af8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	602b      	str	r3, [r5, #0]
 800af94:	e7ef      	b.n	800af76 <ucdr_deserialize_endian_uint32_t+0xbe>
 800af96:	68a2      	ldr	r2, [r4, #8]
 800af98:	6923      	ldr	r3, [r4, #16]
 800af9a:	7da0      	ldrb	r0, [r4, #22]
 800af9c:	f884 9015 	strb.w	r9, [r4, #21]
 800afa0:	eba2 0208 	sub.w	r2, r2, r8
 800afa4:	eba3 0308 	sub.w	r3, r3, r8
 800afa8:	60a2      	str	r2, [r4, #8]
 800afaa:	6123      	str	r3, [r4, #16]
 800afac:	f080 0001 	eor.w	r0, r0, #1
 800afb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afb4:	68a3      	ldr	r3, [r4, #8]
 800afb6:	789b      	ldrb	r3, [r3, #2]
 800afb8:	706b      	strb	r3, [r5, #1]
 800afba:	1cab      	adds	r3, r5, #2
 800afbc:	68a2      	ldr	r2, [r4, #8]
 800afbe:	7852      	ldrb	r2, [r2, #1]
 800afc0:	f803 2b01 	strb.w	r2, [r3], #1
 800afc4:	68a2      	ldr	r2, [r4, #8]
 800afc6:	7812      	ldrb	r2, [r2, #0]
 800afc8:	701a      	strb	r2, [r3, #0]
 800afca:	e7b2      	b.n	800af32 <ucdr_deserialize_endian_uint32_t+0x7a>
 800afcc:	4639      	mov	r1, r7
 800afce:	4642      	mov	r2, r8
 800afd0:	4628      	mov	r0, r5
 800afd2:	f00c fb9a 	bl	801770a <memcpy>
 800afd6:	68a1      	ldr	r1, [r4, #8]
 800afd8:	4652      	mov	r2, sl
 800afda:	eb05 0008 	add.w	r0, r5, r8
 800afde:	f00c fb94 	bl	801770a <memcpy>
 800afe2:	e7a6      	b.n	800af32 <ucdr_deserialize_endian_uint32_t+0x7a>

0800afe4 <ucdr_serialize_uint64_t>:
 800afe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afe8:	2108      	movs	r1, #8
 800afea:	b082      	sub	sp, #8
 800afec:	4604      	mov	r4, r0
 800afee:	e9cd 2300 	strd	r2, r3, [sp]
 800aff2:	f000 fcd9 	bl	800b9a8 <ucdr_buffer_alignment>
 800aff6:	4601      	mov	r1, r0
 800aff8:	4620      	mov	r0, r4
 800affa:	7d67      	ldrb	r7, [r4, #21]
 800affc:	f000 fd18 	bl	800ba30 <ucdr_advance_buffer>
 800b000:	2108      	movs	r1, #8
 800b002:	4620      	mov	r0, r4
 800b004:	f000 fc70 	bl	800b8e8 <ucdr_check_buffer_available_for>
 800b008:	2800      	cmp	r0, #0
 800b00a:	d14e      	bne.n	800b0aa <ucdr_serialize_uint64_t+0xc6>
 800b00c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b010:	42ab      	cmp	r3, r5
 800b012:	d945      	bls.n	800b0a0 <ucdr_serialize_uint64_t+0xbc>
 800b014:	1b5e      	subs	r6, r3, r5
 800b016:	60a3      	str	r3, [r4, #8]
 800b018:	6923      	ldr	r3, [r4, #16]
 800b01a:	f1c6 0808 	rsb	r8, r6, #8
 800b01e:	4433      	add	r3, r6
 800b020:	6123      	str	r3, [r4, #16]
 800b022:	4641      	mov	r1, r8
 800b024:	4620      	mov	r0, r4
 800b026:	f000 fc6b 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800b02a:	2800      	cmp	r0, #0
 800b02c:	d074      	beq.n	800b118 <ucdr_serialize_uint64_t+0x134>
 800b02e:	7d23      	ldrb	r3, [r4, #20]
 800b030:	2b01      	cmp	r3, #1
 800b032:	f000 809b 	beq.w	800b16c <ucdr_serialize_uint64_t+0x188>
 800b036:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b03a:	702b      	strb	r3, [r5, #0]
 800b03c:	2e00      	cmp	r6, #0
 800b03e:	d078      	beq.n	800b132 <ucdr_serialize_uint64_t+0x14e>
 800b040:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b044:	706b      	strb	r3, [r5, #1]
 800b046:	2e01      	cmp	r6, #1
 800b048:	d077      	beq.n	800b13a <ucdr_serialize_uint64_t+0x156>
 800b04a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b04e:	70ab      	strb	r3, [r5, #2]
 800b050:	2e02      	cmp	r6, #2
 800b052:	d076      	beq.n	800b142 <ucdr_serialize_uint64_t+0x15e>
 800b054:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b058:	70eb      	strb	r3, [r5, #3]
 800b05a:	2e03      	cmp	r6, #3
 800b05c:	d075      	beq.n	800b14a <ucdr_serialize_uint64_t+0x166>
 800b05e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b062:	712b      	strb	r3, [r5, #4]
 800b064:	2e04      	cmp	r6, #4
 800b066:	d074      	beq.n	800b152 <ucdr_serialize_uint64_t+0x16e>
 800b068:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b06c:	716b      	strb	r3, [r5, #5]
 800b06e:	2e05      	cmp	r6, #5
 800b070:	d073      	beq.n	800b15a <ucdr_serialize_uint64_t+0x176>
 800b072:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b076:	71ab      	strb	r3, [r5, #6]
 800b078:	2e06      	cmp	r6, #6
 800b07a:	d072      	beq.n	800b162 <ucdr_serialize_uint64_t+0x17e>
 800b07c:	f89d 3000 	ldrb.w	r3, [sp]
 800b080:	71eb      	strb	r3, [r5, #7]
 800b082:	6923      	ldr	r3, [r4, #16]
 800b084:	68a2      	ldr	r2, [r4, #8]
 800b086:	7da0      	ldrb	r0, [r4, #22]
 800b088:	3308      	adds	r3, #8
 800b08a:	1b9e      	subs	r6, r3, r6
 800b08c:	4442      	add	r2, r8
 800b08e:	2308      	movs	r3, #8
 800b090:	f080 0001 	eor.w	r0, r0, #1
 800b094:	60a2      	str	r2, [r4, #8]
 800b096:	6126      	str	r6, [r4, #16]
 800b098:	7563      	strb	r3, [r4, #21]
 800b09a:	b002      	add	sp, #8
 800b09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a0:	2108      	movs	r1, #8
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f000 fc2c 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800b0a8:	b350      	cbz	r0, 800b100 <ucdr_serialize_uint64_t+0x11c>
 800b0aa:	7d23      	ldrb	r3, [r4, #20]
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d02d      	beq.n	800b10c <ucdr_serialize_uint64_t+0x128>
 800b0b0:	68a3      	ldr	r3, [r4, #8]
 800b0b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b0b6:	701a      	strb	r2, [r3, #0]
 800b0b8:	68a3      	ldr	r3, [r4, #8]
 800b0ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b0be:	705a      	strb	r2, [r3, #1]
 800b0c0:	68a3      	ldr	r3, [r4, #8]
 800b0c2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b0c6:	709a      	strb	r2, [r3, #2]
 800b0c8:	68a3      	ldr	r3, [r4, #8]
 800b0ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b0ce:	70da      	strb	r2, [r3, #3]
 800b0d0:	68a3      	ldr	r3, [r4, #8]
 800b0d2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b0d6:	711a      	strb	r2, [r3, #4]
 800b0d8:	68a3      	ldr	r3, [r4, #8]
 800b0da:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b0de:	715a      	strb	r2, [r3, #5]
 800b0e0:	68a3      	ldr	r3, [r4, #8]
 800b0e2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b0e6:	719a      	strb	r2, [r3, #6]
 800b0e8:	68a3      	ldr	r3, [r4, #8]
 800b0ea:	f89d 2000 	ldrb.w	r2, [sp]
 800b0ee:	71da      	strb	r2, [r3, #7]
 800b0f0:	68a2      	ldr	r2, [r4, #8]
 800b0f2:	6923      	ldr	r3, [r4, #16]
 800b0f4:	3208      	adds	r2, #8
 800b0f6:	3308      	adds	r3, #8
 800b0f8:	2108      	movs	r1, #8
 800b0fa:	60a2      	str	r2, [r4, #8]
 800b0fc:	6123      	str	r3, [r4, #16]
 800b0fe:	7561      	strb	r1, [r4, #21]
 800b100:	7da0      	ldrb	r0, [r4, #22]
 800b102:	f080 0001 	eor.w	r0, r0, #1
 800b106:	b002      	add	sp, #8
 800b108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b10c:	466b      	mov	r3, sp
 800b10e:	cb03      	ldmia	r3!, {r0, r1}
 800b110:	68a3      	ldr	r3, [r4, #8]
 800b112:	6018      	str	r0, [r3, #0]
 800b114:	6059      	str	r1, [r3, #4]
 800b116:	e7eb      	b.n	800b0f0 <ucdr_serialize_uint64_t+0x10c>
 800b118:	68a2      	ldr	r2, [r4, #8]
 800b11a:	6923      	ldr	r3, [r4, #16]
 800b11c:	7da0      	ldrb	r0, [r4, #22]
 800b11e:	7567      	strb	r7, [r4, #21]
 800b120:	1b92      	subs	r2, r2, r6
 800b122:	1b9b      	subs	r3, r3, r6
 800b124:	f080 0001 	eor.w	r0, r0, #1
 800b128:	60a2      	str	r2, [r4, #8]
 800b12a:	6123      	str	r3, [r4, #16]
 800b12c:	b002      	add	sp, #8
 800b12e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b132:	68a3      	ldr	r3, [r4, #8]
 800b134:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b138:	701a      	strb	r2, [r3, #0]
 800b13a:	68a3      	ldr	r3, [r4, #8]
 800b13c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b140:	701a      	strb	r2, [r3, #0]
 800b142:	68a3      	ldr	r3, [r4, #8]
 800b144:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b148:	701a      	strb	r2, [r3, #0]
 800b14a:	68a3      	ldr	r3, [r4, #8]
 800b14c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b150:	701a      	strb	r2, [r3, #0]
 800b152:	68a3      	ldr	r3, [r4, #8]
 800b154:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b158:	701a      	strb	r2, [r3, #0]
 800b15a:	68a3      	ldr	r3, [r4, #8]
 800b15c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b160:	701a      	strb	r2, [r3, #0]
 800b162:	68a3      	ldr	r3, [r4, #8]
 800b164:	f89d 2000 	ldrb.w	r2, [sp]
 800b168:	701a      	strb	r2, [r3, #0]
 800b16a:	e78a      	b.n	800b082 <ucdr_serialize_uint64_t+0x9e>
 800b16c:	4628      	mov	r0, r5
 800b16e:	466d      	mov	r5, sp
 800b170:	4629      	mov	r1, r5
 800b172:	4632      	mov	r2, r6
 800b174:	f00c fac9 	bl	801770a <memcpy>
 800b178:	68a0      	ldr	r0, [r4, #8]
 800b17a:	4642      	mov	r2, r8
 800b17c:	19a9      	adds	r1, r5, r6
 800b17e:	f00c fac4 	bl	801770a <memcpy>
 800b182:	e77e      	b.n	800b082 <ucdr_serialize_uint64_t+0x9e>

0800b184 <ucdr_serialize_int16_t>:
 800b184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b188:	b082      	sub	sp, #8
 800b18a:	460b      	mov	r3, r1
 800b18c:	2102      	movs	r1, #2
 800b18e:	4604      	mov	r4, r0
 800b190:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b194:	f000 fc08 	bl	800b9a8 <ucdr_buffer_alignment>
 800b198:	4601      	mov	r1, r0
 800b19a:	4620      	mov	r0, r4
 800b19c:	7d67      	ldrb	r7, [r4, #21]
 800b19e:	f000 fc47 	bl	800ba30 <ucdr_advance_buffer>
 800b1a2:	2102      	movs	r1, #2
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	f000 fb9f 	bl	800b8e8 <ucdr_check_buffer_available_for>
 800b1aa:	bb78      	cbnz	r0, 800b20c <ucdr_serialize_int16_t+0x88>
 800b1ac:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b1b0:	42ab      	cmp	r3, r5
 800b1b2:	d926      	bls.n	800b202 <ucdr_serialize_int16_t+0x7e>
 800b1b4:	1b5e      	subs	r6, r3, r5
 800b1b6:	60a3      	str	r3, [r4, #8]
 800b1b8:	6923      	ldr	r3, [r4, #16]
 800b1ba:	f1c6 0802 	rsb	r8, r6, #2
 800b1be:	4433      	add	r3, r6
 800b1c0:	6123      	str	r3, [r4, #16]
 800b1c2:	4641      	mov	r1, r8
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	f000 fb9b 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	d03b      	beq.n	800b246 <ucdr_serialize_int16_t+0xc2>
 800b1ce:	7d23      	ldrb	r3, [r4, #20]
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d04a      	beq.n	800b26a <ucdr_serialize_int16_t+0xe6>
 800b1d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b1d8:	702b      	strb	r3, [r5, #0]
 800b1da:	2e00      	cmp	r6, #0
 800b1dc:	d040      	beq.n	800b260 <ucdr_serialize_int16_t+0xdc>
 800b1de:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b1e2:	706b      	strb	r3, [r5, #1]
 800b1e4:	6923      	ldr	r3, [r4, #16]
 800b1e6:	68a2      	ldr	r2, [r4, #8]
 800b1e8:	7da0      	ldrb	r0, [r4, #22]
 800b1ea:	3302      	adds	r3, #2
 800b1ec:	1b9e      	subs	r6, r3, r6
 800b1ee:	4442      	add	r2, r8
 800b1f0:	2302      	movs	r3, #2
 800b1f2:	f080 0001 	eor.w	r0, r0, #1
 800b1f6:	60a2      	str	r2, [r4, #8]
 800b1f8:	6126      	str	r6, [r4, #16]
 800b1fa:	7563      	strb	r3, [r4, #21]
 800b1fc:	b002      	add	sp, #8
 800b1fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b202:	2102      	movs	r1, #2
 800b204:	4620      	mov	r0, r4
 800b206:	f000 fb7b 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800b20a:	b190      	cbz	r0, 800b232 <ucdr_serialize_int16_t+0xae>
 800b20c:	7d23      	ldrb	r3, [r4, #20]
 800b20e:	2b01      	cmp	r3, #1
 800b210:	68a3      	ldr	r3, [r4, #8]
 800b212:	d014      	beq.n	800b23e <ucdr_serialize_int16_t+0xba>
 800b214:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b218:	701a      	strb	r2, [r3, #0]
 800b21a:	68a3      	ldr	r3, [r4, #8]
 800b21c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b220:	705a      	strb	r2, [r3, #1]
 800b222:	68a2      	ldr	r2, [r4, #8]
 800b224:	6923      	ldr	r3, [r4, #16]
 800b226:	3202      	adds	r2, #2
 800b228:	3302      	adds	r3, #2
 800b22a:	2102      	movs	r1, #2
 800b22c:	60a2      	str	r2, [r4, #8]
 800b22e:	6123      	str	r3, [r4, #16]
 800b230:	7561      	strb	r1, [r4, #21]
 800b232:	7da0      	ldrb	r0, [r4, #22]
 800b234:	f080 0001 	eor.w	r0, r0, #1
 800b238:	b002      	add	sp, #8
 800b23a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b23e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b242:	801a      	strh	r2, [r3, #0]
 800b244:	e7ed      	b.n	800b222 <ucdr_serialize_int16_t+0x9e>
 800b246:	68a2      	ldr	r2, [r4, #8]
 800b248:	6923      	ldr	r3, [r4, #16]
 800b24a:	7da0      	ldrb	r0, [r4, #22]
 800b24c:	7567      	strb	r7, [r4, #21]
 800b24e:	1b92      	subs	r2, r2, r6
 800b250:	1b9b      	subs	r3, r3, r6
 800b252:	f080 0001 	eor.w	r0, r0, #1
 800b256:	60a2      	str	r2, [r4, #8]
 800b258:	6123      	str	r3, [r4, #16]
 800b25a:	b002      	add	sp, #8
 800b25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b260:	68a3      	ldr	r3, [r4, #8]
 800b262:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b266:	701a      	strb	r2, [r3, #0]
 800b268:	e7bc      	b.n	800b1e4 <ucdr_serialize_int16_t+0x60>
 800b26a:	4628      	mov	r0, r5
 800b26c:	f10d 0506 	add.w	r5, sp, #6
 800b270:	4629      	mov	r1, r5
 800b272:	4632      	mov	r2, r6
 800b274:	f00c fa49 	bl	801770a <memcpy>
 800b278:	68a0      	ldr	r0, [r4, #8]
 800b27a:	4642      	mov	r2, r8
 800b27c:	19a9      	adds	r1, r5, r6
 800b27e:	f00c fa44 	bl	801770a <memcpy>
 800b282:	e7af      	b.n	800b1e4 <ucdr_serialize_int16_t+0x60>

0800b284 <ucdr_deserialize_int16_t>:
 800b284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b288:	460d      	mov	r5, r1
 800b28a:	2102      	movs	r1, #2
 800b28c:	4604      	mov	r4, r0
 800b28e:	f000 fb8b 	bl	800b9a8 <ucdr_buffer_alignment>
 800b292:	4601      	mov	r1, r0
 800b294:	4620      	mov	r0, r4
 800b296:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b29a:	f000 fbc9 	bl	800ba30 <ucdr_advance_buffer>
 800b29e:	2102      	movs	r1, #2
 800b2a0:	4620      	mov	r0, r4
 800b2a2:	f000 fb21 	bl	800b8e8 <ucdr_check_buffer_available_for>
 800b2a6:	bb60      	cbnz	r0, 800b302 <ucdr_deserialize_int16_t+0x7e>
 800b2a8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b2ac:	42be      	cmp	r6, r7
 800b2ae:	d923      	bls.n	800b2f8 <ucdr_deserialize_int16_t+0x74>
 800b2b0:	6923      	ldr	r3, [r4, #16]
 800b2b2:	60a6      	str	r6, [r4, #8]
 800b2b4:	1bf6      	subs	r6, r6, r7
 800b2b6:	4433      	add	r3, r6
 800b2b8:	f1c6 0902 	rsb	r9, r6, #2
 800b2bc:	6123      	str	r3, [r4, #16]
 800b2be:	4649      	mov	r1, r9
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	f000 fb1d 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	d034      	beq.n	800b334 <ucdr_deserialize_int16_t+0xb0>
 800b2ca:	7d23      	ldrb	r3, [r4, #20]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d042      	beq.n	800b356 <ucdr_deserialize_int16_t+0xd2>
 800b2d0:	787b      	ldrb	r3, [r7, #1]
 800b2d2:	702b      	strb	r3, [r5, #0]
 800b2d4:	2e00      	cmp	r6, #0
 800b2d6:	d03a      	beq.n	800b34e <ucdr_deserialize_int16_t+0xca>
 800b2d8:	783b      	ldrb	r3, [r7, #0]
 800b2da:	706b      	strb	r3, [r5, #1]
 800b2dc:	6923      	ldr	r3, [r4, #16]
 800b2de:	68a2      	ldr	r2, [r4, #8]
 800b2e0:	7da0      	ldrb	r0, [r4, #22]
 800b2e2:	2102      	movs	r1, #2
 800b2e4:	3302      	adds	r3, #2
 800b2e6:	444a      	add	r2, r9
 800b2e8:	1b9b      	subs	r3, r3, r6
 800b2ea:	7561      	strb	r1, [r4, #21]
 800b2ec:	60a2      	str	r2, [r4, #8]
 800b2ee:	6123      	str	r3, [r4, #16]
 800b2f0:	f080 0001 	eor.w	r0, r0, #1
 800b2f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2f8:	2102      	movs	r1, #2
 800b2fa:	4620      	mov	r0, r4
 800b2fc:	f000 fb00 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800b300:	b180      	cbz	r0, 800b324 <ucdr_deserialize_int16_t+0xa0>
 800b302:	7d23      	ldrb	r3, [r4, #20]
 800b304:	2b01      	cmp	r3, #1
 800b306:	68a3      	ldr	r3, [r4, #8]
 800b308:	d011      	beq.n	800b32e <ucdr_deserialize_int16_t+0xaa>
 800b30a:	785b      	ldrb	r3, [r3, #1]
 800b30c:	702b      	strb	r3, [r5, #0]
 800b30e:	68a3      	ldr	r3, [r4, #8]
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	706b      	strb	r3, [r5, #1]
 800b314:	68a2      	ldr	r2, [r4, #8]
 800b316:	6923      	ldr	r3, [r4, #16]
 800b318:	3202      	adds	r2, #2
 800b31a:	3302      	adds	r3, #2
 800b31c:	2102      	movs	r1, #2
 800b31e:	60a2      	str	r2, [r4, #8]
 800b320:	6123      	str	r3, [r4, #16]
 800b322:	7561      	strb	r1, [r4, #21]
 800b324:	7da0      	ldrb	r0, [r4, #22]
 800b326:	f080 0001 	eor.w	r0, r0, #1
 800b32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b32e:	881b      	ldrh	r3, [r3, #0]
 800b330:	802b      	strh	r3, [r5, #0]
 800b332:	e7ef      	b.n	800b314 <ucdr_deserialize_int16_t+0x90>
 800b334:	68a2      	ldr	r2, [r4, #8]
 800b336:	6923      	ldr	r3, [r4, #16]
 800b338:	7da0      	ldrb	r0, [r4, #22]
 800b33a:	f884 8015 	strb.w	r8, [r4, #21]
 800b33e:	1b92      	subs	r2, r2, r6
 800b340:	1b9b      	subs	r3, r3, r6
 800b342:	60a2      	str	r2, [r4, #8]
 800b344:	6123      	str	r3, [r4, #16]
 800b346:	f080 0001 	eor.w	r0, r0, #1
 800b34a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b34e:	68a3      	ldr	r3, [r4, #8]
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	706b      	strb	r3, [r5, #1]
 800b354:	e7c2      	b.n	800b2dc <ucdr_deserialize_int16_t+0x58>
 800b356:	4639      	mov	r1, r7
 800b358:	4632      	mov	r2, r6
 800b35a:	4628      	mov	r0, r5
 800b35c:	f00c f9d5 	bl	801770a <memcpy>
 800b360:	68a1      	ldr	r1, [r4, #8]
 800b362:	464a      	mov	r2, r9
 800b364:	19a8      	adds	r0, r5, r6
 800b366:	f00c f9d0 	bl	801770a <memcpy>
 800b36a:	e7b7      	b.n	800b2dc <ucdr_deserialize_int16_t+0x58>

0800b36c <ucdr_serialize_int32_t>:
 800b36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b370:	b082      	sub	sp, #8
 800b372:	4604      	mov	r4, r0
 800b374:	9101      	str	r1, [sp, #4]
 800b376:	2104      	movs	r1, #4
 800b378:	f000 fb16 	bl	800b9a8 <ucdr_buffer_alignment>
 800b37c:	4601      	mov	r1, r0
 800b37e:	4620      	mov	r0, r4
 800b380:	7d67      	ldrb	r7, [r4, #21]
 800b382:	f000 fb55 	bl	800ba30 <ucdr_advance_buffer>
 800b386:	2104      	movs	r1, #4
 800b388:	4620      	mov	r0, r4
 800b38a:	f000 faad 	bl	800b8e8 <ucdr_check_buffer_available_for>
 800b38e:	2800      	cmp	r0, #0
 800b390:	d139      	bne.n	800b406 <ucdr_serialize_int32_t+0x9a>
 800b392:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b396:	42ab      	cmp	r3, r5
 800b398:	d930      	bls.n	800b3fc <ucdr_serialize_int32_t+0x90>
 800b39a:	1b5e      	subs	r6, r3, r5
 800b39c:	60a3      	str	r3, [r4, #8]
 800b39e:	6923      	ldr	r3, [r4, #16]
 800b3a0:	f1c6 0804 	rsb	r8, r6, #4
 800b3a4:	4433      	add	r3, r6
 800b3a6:	6123      	str	r3, [r4, #16]
 800b3a8:	4641      	mov	r1, r8
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	f000 faa8 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	d04c      	beq.n	800b44e <ucdr_serialize_int32_t+0xe2>
 800b3b4:	7d23      	ldrb	r3, [r4, #20]
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	d063      	beq.n	800b482 <ucdr_serialize_int32_t+0x116>
 800b3ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b3be:	702b      	strb	r3, [r5, #0]
 800b3c0:	2e00      	cmp	r6, #0
 800b3c2:	d051      	beq.n	800b468 <ucdr_serialize_int32_t+0xfc>
 800b3c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b3c8:	706b      	strb	r3, [r5, #1]
 800b3ca:	2e01      	cmp	r6, #1
 800b3cc:	d050      	beq.n	800b470 <ucdr_serialize_int32_t+0x104>
 800b3ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b3d2:	70ab      	strb	r3, [r5, #2]
 800b3d4:	2e02      	cmp	r6, #2
 800b3d6:	d04f      	beq.n	800b478 <ucdr_serialize_int32_t+0x10c>
 800b3d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b3dc:	70eb      	strb	r3, [r5, #3]
 800b3de:	6923      	ldr	r3, [r4, #16]
 800b3e0:	68a2      	ldr	r2, [r4, #8]
 800b3e2:	7da0      	ldrb	r0, [r4, #22]
 800b3e4:	3304      	adds	r3, #4
 800b3e6:	1b9e      	subs	r6, r3, r6
 800b3e8:	4442      	add	r2, r8
 800b3ea:	2304      	movs	r3, #4
 800b3ec:	f080 0001 	eor.w	r0, r0, #1
 800b3f0:	60a2      	str	r2, [r4, #8]
 800b3f2:	6126      	str	r6, [r4, #16]
 800b3f4:	7563      	strb	r3, [r4, #21]
 800b3f6:	b002      	add	sp, #8
 800b3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3fc:	2104      	movs	r1, #4
 800b3fe:	4620      	mov	r0, r4
 800b400:	f000 fa7e 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800b404:	b1d0      	cbz	r0, 800b43c <ucdr_serialize_int32_t+0xd0>
 800b406:	7d23      	ldrb	r3, [r4, #20]
 800b408:	2b01      	cmp	r3, #1
 800b40a:	68a3      	ldr	r3, [r4, #8]
 800b40c:	d01c      	beq.n	800b448 <ucdr_serialize_int32_t+0xdc>
 800b40e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b412:	701a      	strb	r2, [r3, #0]
 800b414:	68a3      	ldr	r3, [r4, #8]
 800b416:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b41a:	705a      	strb	r2, [r3, #1]
 800b41c:	68a3      	ldr	r3, [r4, #8]
 800b41e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b422:	709a      	strb	r2, [r3, #2]
 800b424:	68a3      	ldr	r3, [r4, #8]
 800b426:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b42a:	70da      	strb	r2, [r3, #3]
 800b42c:	68a2      	ldr	r2, [r4, #8]
 800b42e:	6923      	ldr	r3, [r4, #16]
 800b430:	3204      	adds	r2, #4
 800b432:	3304      	adds	r3, #4
 800b434:	2104      	movs	r1, #4
 800b436:	60a2      	str	r2, [r4, #8]
 800b438:	6123      	str	r3, [r4, #16]
 800b43a:	7561      	strb	r1, [r4, #21]
 800b43c:	7da0      	ldrb	r0, [r4, #22]
 800b43e:	f080 0001 	eor.w	r0, r0, #1
 800b442:	b002      	add	sp, #8
 800b444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b448:	9a01      	ldr	r2, [sp, #4]
 800b44a:	601a      	str	r2, [r3, #0]
 800b44c:	e7ee      	b.n	800b42c <ucdr_serialize_int32_t+0xc0>
 800b44e:	68a2      	ldr	r2, [r4, #8]
 800b450:	6923      	ldr	r3, [r4, #16]
 800b452:	7da0      	ldrb	r0, [r4, #22]
 800b454:	7567      	strb	r7, [r4, #21]
 800b456:	1b92      	subs	r2, r2, r6
 800b458:	1b9b      	subs	r3, r3, r6
 800b45a:	f080 0001 	eor.w	r0, r0, #1
 800b45e:	60a2      	str	r2, [r4, #8]
 800b460:	6123      	str	r3, [r4, #16]
 800b462:	b002      	add	sp, #8
 800b464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b468:	68a3      	ldr	r3, [r4, #8]
 800b46a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b46e:	701a      	strb	r2, [r3, #0]
 800b470:	68a3      	ldr	r3, [r4, #8]
 800b472:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b476:	701a      	strb	r2, [r3, #0]
 800b478:	68a3      	ldr	r3, [r4, #8]
 800b47a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b47e:	701a      	strb	r2, [r3, #0]
 800b480:	e7ad      	b.n	800b3de <ucdr_serialize_int32_t+0x72>
 800b482:	4628      	mov	r0, r5
 800b484:	ad01      	add	r5, sp, #4
 800b486:	4629      	mov	r1, r5
 800b488:	4632      	mov	r2, r6
 800b48a:	f00c f93e 	bl	801770a <memcpy>
 800b48e:	68a0      	ldr	r0, [r4, #8]
 800b490:	4642      	mov	r2, r8
 800b492:	19a9      	adds	r1, r5, r6
 800b494:	f00c f939 	bl	801770a <memcpy>
 800b498:	e7a1      	b.n	800b3de <ucdr_serialize_int32_t+0x72>
 800b49a:	bf00      	nop

0800b49c <ucdr_deserialize_int32_t>:
 800b49c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4a0:	460d      	mov	r5, r1
 800b4a2:	2104      	movs	r1, #4
 800b4a4:	4604      	mov	r4, r0
 800b4a6:	f000 fa7f 	bl	800b9a8 <ucdr_buffer_alignment>
 800b4aa:	4601      	mov	r1, r0
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b4b2:	f000 fabd 	bl	800ba30 <ucdr_advance_buffer>
 800b4b6:	2104      	movs	r1, #4
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f000 fa15 	bl	800b8e8 <ucdr_check_buffer_available_for>
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	d138      	bne.n	800b534 <ucdr_deserialize_int32_t+0x98>
 800b4c2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b4c6:	42b7      	cmp	r7, r6
 800b4c8:	d92f      	bls.n	800b52a <ucdr_deserialize_int32_t+0x8e>
 800b4ca:	6923      	ldr	r3, [r4, #16]
 800b4cc:	60a7      	str	r7, [r4, #8]
 800b4ce:	1bbf      	subs	r7, r7, r6
 800b4d0:	443b      	add	r3, r7
 800b4d2:	f1c7 0904 	rsb	r9, r7, #4
 800b4d6:	6123      	str	r3, [r4, #16]
 800b4d8:	4649      	mov	r1, r9
 800b4da:	4620      	mov	r0, r4
 800b4dc:	f000 fa10 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	d046      	beq.n	800b572 <ucdr_deserialize_int32_t+0xd6>
 800b4e4:	7d23      	ldrb	r3, [r4, #20]
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d05c      	beq.n	800b5a4 <ucdr_deserialize_int32_t+0x108>
 800b4ea:	78f3      	ldrb	r3, [r6, #3]
 800b4ec:	702b      	strb	r3, [r5, #0]
 800b4ee:	2f00      	cmp	r7, #0
 800b4f0:	d04c      	beq.n	800b58c <ucdr_deserialize_int32_t+0xf0>
 800b4f2:	78b3      	ldrb	r3, [r6, #2]
 800b4f4:	706b      	strb	r3, [r5, #1]
 800b4f6:	2f01      	cmp	r7, #1
 800b4f8:	f105 0302 	add.w	r3, r5, #2
 800b4fc:	d04a      	beq.n	800b594 <ucdr_deserialize_int32_t+0xf8>
 800b4fe:	7873      	ldrb	r3, [r6, #1]
 800b500:	70ab      	strb	r3, [r5, #2]
 800b502:	2f02      	cmp	r7, #2
 800b504:	f105 0303 	add.w	r3, r5, #3
 800b508:	d048      	beq.n	800b59c <ucdr_deserialize_int32_t+0x100>
 800b50a:	7833      	ldrb	r3, [r6, #0]
 800b50c:	70eb      	strb	r3, [r5, #3]
 800b50e:	6923      	ldr	r3, [r4, #16]
 800b510:	68a2      	ldr	r2, [r4, #8]
 800b512:	7da0      	ldrb	r0, [r4, #22]
 800b514:	2104      	movs	r1, #4
 800b516:	3304      	adds	r3, #4
 800b518:	444a      	add	r2, r9
 800b51a:	1bdb      	subs	r3, r3, r7
 800b51c:	7561      	strb	r1, [r4, #21]
 800b51e:	60a2      	str	r2, [r4, #8]
 800b520:	6123      	str	r3, [r4, #16]
 800b522:	f080 0001 	eor.w	r0, r0, #1
 800b526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b52a:	2104      	movs	r1, #4
 800b52c:	4620      	mov	r0, r4
 800b52e:	f000 f9e7 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800b532:	b1b0      	cbz	r0, 800b562 <ucdr_deserialize_int32_t+0xc6>
 800b534:	7d23      	ldrb	r3, [r4, #20]
 800b536:	2b01      	cmp	r3, #1
 800b538:	68a3      	ldr	r3, [r4, #8]
 800b53a:	d017      	beq.n	800b56c <ucdr_deserialize_int32_t+0xd0>
 800b53c:	78db      	ldrb	r3, [r3, #3]
 800b53e:	702b      	strb	r3, [r5, #0]
 800b540:	68a3      	ldr	r3, [r4, #8]
 800b542:	789b      	ldrb	r3, [r3, #2]
 800b544:	706b      	strb	r3, [r5, #1]
 800b546:	68a3      	ldr	r3, [r4, #8]
 800b548:	785b      	ldrb	r3, [r3, #1]
 800b54a:	70ab      	strb	r3, [r5, #2]
 800b54c:	68a3      	ldr	r3, [r4, #8]
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	70eb      	strb	r3, [r5, #3]
 800b552:	68a2      	ldr	r2, [r4, #8]
 800b554:	6923      	ldr	r3, [r4, #16]
 800b556:	3204      	adds	r2, #4
 800b558:	3304      	adds	r3, #4
 800b55a:	2104      	movs	r1, #4
 800b55c:	60a2      	str	r2, [r4, #8]
 800b55e:	6123      	str	r3, [r4, #16]
 800b560:	7561      	strb	r1, [r4, #21]
 800b562:	7da0      	ldrb	r0, [r4, #22]
 800b564:	f080 0001 	eor.w	r0, r0, #1
 800b568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	602b      	str	r3, [r5, #0]
 800b570:	e7ef      	b.n	800b552 <ucdr_deserialize_int32_t+0xb6>
 800b572:	68a2      	ldr	r2, [r4, #8]
 800b574:	6923      	ldr	r3, [r4, #16]
 800b576:	7da0      	ldrb	r0, [r4, #22]
 800b578:	f884 8015 	strb.w	r8, [r4, #21]
 800b57c:	1bd2      	subs	r2, r2, r7
 800b57e:	1bdb      	subs	r3, r3, r7
 800b580:	60a2      	str	r2, [r4, #8]
 800b582:	6123      	str	r3, [r4, #16]
 800b584:	f080 0001 	eor.w	r0, r0, #1
 800b588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b58c:	68a3      	ldr	r3, [r4, #8]
 800b58e:	789b      	ldrb	r3, [r3, #2]
 800b590:	706b      	strb	r3, [r5, #1]
 800b592:	1cab      	adds	r3, r5, #2
 800b594:	68a2      	ldr	r2, [r4, #8]
 800b596:	7852      	ldrb	r2, [r2, #1]
 800b598:	f803 2b01 	strb.w	r2, [r3], #1
 800b59c:	68a2      	ldr	r2, [r4, #8]
 800b59e:	7812      	ldrb	r2, [r2, #0]
 800b5a0:	701a      	strb	r2, [r3, #0]
 800b5a2:	e7b4      	b.n	800b50e <ucdr_deserialize_int32_t+0x72>
 800b5a4:	4631      	mov	r1, r6
 800b5a6:	463a      	mov	r2, r7
 800b5a8:	4628      	mov	r0, r5
 800b5aa:	f00c f8ae 	bl	801770a <memcpy>
 800b5ae:	68a1      	ldr	r1, [r4, #8]
 800b5b0:	464a      	mov	r2, r9
 800b5b2:	19e8      	adds	r0, r5, r7
 800b5b4:	f00c f8a9 	bl	801770a <memcpy>
 800b5b8:	e7a9      	b.n	800b50e <ucdr_deserialize_int32_t+0x72>
 800b5ba:	bf00      	nop

0800b5bc <ucdr_serialize_double>:
 800b5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c0:	2108      	movs	r1, #8
 800b5c2:	b082      	sub	sp, #8
 800b5c4:	4604      	mov	r4, r0
 800b5c6:	ed8d 0b00 	vstr	d0, [sp]
 800b5ca:	f000 f9ed 	bl	800b9a8 <ucdr_buffer_alignment>
 800b5ce:	4601      	mov	r1, r0
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	7d67      	ldrb	r7, [r4, #21]
 800b5d4:	f000 fa2c 	bl	800ba30 <ucdr_advance_buffer>
 800b5d8:	2108      	movs	r1, #8
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f000 f984 	bl	800b8e8 <ucdr_check_buffer_available_for>
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	d14e      	bne.n	800b682 <ucdr_serialize_double+0xc6>
 800b5e4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b5e8:	42ab      	cmp	r3, r5
 800b5ea:	d945      	bls.n	800b678 <ucdr_serialize_double+0xbc>
 800b5ec:	1b5e      	subs	r6, r3, r5
 800b5ee:	60a3      	str	r3, [r4, #8]
 800b5f0:	6923      	ldr	r3, [r4, #16]
 800b5f2:	f1c6 0808 	rsb	r8, r6, #8
 800b5f6:	4433      	add	r3, r6
 800b5f8:	6123      	str	r3, [r4, #16]
 800b5fa:	4641      	mov	r1, r8
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	f000 f97f 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800b602:	2800      	cmp	r0, #0
 800b604:	d074      	beq.n	800b6f0 <ucdr_serialize_double+0x134>
 800b606:	7d23      	ldrb	r3, [r4, #20]
 800b608:	2b01      	cmp	r3, #1
 800b60a:	f000 809b 	beq.w	800b744 <ucdr_serialize_double+0x188>
 800b60e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b612:	702b      	strb	r3, [r5, #0]
 800b614:	2e00      	cmp	r6, #0
 800b616:	d078      	beq.n	800b70a <ucdr_serialize_double+0x14e>
 800b618:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b61c:	706b      	strb	r3, [r5, #1]
 800b61e:	2e01      	cmp	r6, #1
 800b620:	d077      	beq.n	800b712 <ucdr_serialize_double+0x156>
 800b622:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b626:	70ab      	strb	r3, [r5, #2]
 800b628:	2e02      	cmp	r6, #2
 800b62a:	d076      	beq.n	800b71a <ucdr_serialize_double+0x15e>
 800b62c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b630:	70eb      	strb	r3, [r5, #3]
 800b632:	2e03      	cmp	r6, #3
 800b634:	d075      	beq.n	800b722 <ucdr_serialize_double+0x166>
 800b636:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b63a:	712b      	strb	r3, [r5, #4]
 800b63c:	2e04      	cmp	r6, #4
 800b63e:	d074      	beq.n	800b72a <ucdr_serialize_double+0x16e>
 800b640:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b644:	716b      	strb	r3, [r5, #5]
 800b646:	2e05      	cmp	r6, #5
 800b648:	d073      	beq.n	800b732 <ucdr_serialize_double+0x176>
 800b64a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b64e:	71ab      	strb	r3, [r5, #6]
 800b650:	2e06      	cmp	r6, #6
 800b652:	d072      	beq.n	800b73a <ucdr_serialize_double+0x17e>
 800b654:	f89d 3000 	ldrb.w	r3, [sp]
 800b658:	71eb      	strb	r3, [r5, #7]
 800b65a:	6923      	ldr	r3, [r4, #16]
 800b65c:	68a2      	ldr	r2, [r4, #8]
 800b65e:	7da0      	ldrb	r0, [r4, #22]
 800b660:	3308      	adds	r3, #8
 800b662:	1b9e      	subs	r6, r3, r6
 800b664:	4442      	add	r2, r8
 800b666:	2308      	movs	r3, #8
 800b668:	f080 0001 	eor.w	r0, r0, #1
 800b66c:	60a2      	str	r2, [r4, #8]
 800b66e:	6126      	str	r6, [r4, #16]
 800b670:	7563      	strb	r3, [r4, #21]
 800b672:	b002      	add	sp, #8
 800b674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b678:	2108      	movs	r1, #8
 800b67a:	4620      	mov	r0, r4
 800b67c:	f000 f940 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800b680:	b350      	cbz	r0, 800b6d8 <ucdr_serialize_double+0x11c>
 800b682:	7d23      	ldrb	r3, [r4, #20]
 800b684:	2b01      	cmp	r3, #1
 800b686:	d02d      	beq.n	800b6e4 <ucdr_serialize_double+0x128>
 800b688:	68a3      	ldr	r3, [r4, #8]
 800b68a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b68e:	701a      	strb	r2, [r3, #0]
 800b690:	68a3      	ldr	r3, [r4, #8]
 800b692:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b696:	705a      	strb	r2, [r3, #1]
 800b698:	68a3      	ldr	r3, [r4, #8]
 800b69a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b69e:	709a      	strb	r2, [r3, #2]
 800b6a0:	68a3      	ldr	r3, [r4, #8]
 800b6a2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b6a6:	70da      	strb	r2, [r3, #3]
 800b6a8:	68a3      	ldr	r3, [r4, #8]
 800b6aa:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b6ae:	711a      	strb	r2, [r3, #4]
 800b6b0:	68a3      	ldr	r3, [r4, #8]
 800b6b2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b6b6:	715a      	strb	r2, [r3, #5]
 800b6b8:	68a3      	ldr	r3, [r4, #8]
 800b6ba:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b6be:	719a      	strb	r2, [r3, #6]
 800b6c0:	68a3      	ldr	r3, [r4, #8]
 800b6c2:	f89d 2000 	ldrb.w	r2, [sp]
 800b6c6:	71da      	strb	r2, [r3, #7]
 800b6c8:	68a2      	ldr	r2, [r4, #8]
 800b6ca:	6923      	ldr	r3, [r4, #16]
 800b6cc:	3208      	adds	r2, #8
 800b6ce:	3308      	adds	r3, #8
 800b6d0:	2108      	movs	r1, #8
 800b6d2:	60a2      	str	r2, [r4, #8]
 800b6d4:	6123      	str	r3, [r4, #16]
 800b6d6:	7561      	strb	r1, [r4, #21]
 800b6d8:	7da0      	ldrb	r0, [r4, #22]
 800b6da:	f080 0001 	eor.w	r0, r0, #1
 800b6de:	b002      	add	sp, #8
 800b6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6e4:	466b      	mov	r3, sp
 800b6e6:	cb03      	ldmia	r3!, {r0, r1}
 800b6e8:	68a3      	ldr	r3, [r4, #8]
 800b6ea:	6018      	str	r0, [r3, #0]
 800b6ec:	6059      	str	r1, [r3, #4]
 800b6ee:	e7eb      	b.n	800b6c8 <ucdr_serialize_double+0x10c>
 800b6f0:	68a2      	ldr	r2, [r4, #8]
 800b6f2:	6923      	ldr	r3, [r4, #16]
 800b6f4:	7da0      	ldrb	r0, [r4, #22]
 800b6f6:	7567      	strb	r7, [r4, #21]
 800b6f8:	1b92      	subs	r2, r2, r6
 800b6fa:	1b9b      	subs	r3, r3, r6
 800b6fc:	f080 0001 	eor.w	r0, r0, #1
 800b700:	60a2      	str	r2, [r4, #8]
 800b702:	6123      	str	r3, [r4, #16]
 800b704:	b002      	add	sp, #8
 800b706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b70a:	68a3      	ldr	r3, [r4, #8]
 800b70c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b710:	701a      	strb	r2, [r3, #0]
 800b712:	68a3      	ldr	r3, [r4, #8]
 800b714:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b718:	701a      	strb	r2, [r3, #0]
 800b71a:	68a3      	ldr	r3, [r4, #8]
 800b71c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b720:	701a      	strb	r2, [r3, #0]
 800b722:	68a3      	ldr	r3, [r4, #8]
 800b724:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b728:	701a      	strb	r2, [r3, #0]
 800b72a:	68a3      	ldr	r3, [r4, #8]
 800b72c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b730:	701a      	strb	r2, [r3, #0]
 800b732:	68a3      	ldr	r3, [r4, #8]
 800b734:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b738:	701a      	strb	r2, [r3, #0]
 800b73a:	68a3      	ldr	r3, [r4, #8]
 800b73c:	f89d 2000 	ldrb.w	r2, [sp]
 800b740:	701a      	strb	r2, [r3, #0]
 800b742:	e78a      	b.n	800b65a <ucdr_serialize_double+0x9e>
 800b744:	4628      	mov	r0, r5
 800b746:	466d      	mov	r5, sp
 800b748:	4629      	mov	r1, r5
 800b74a:	4632      	mov	r2, r6
 800b74c:	f00b ffdd 	bl	801770a <memcpy>
 800b750:	68a0      	ldr	r0, [r4, #8]
 800b752:	4642      	mov	r2, r8
 800b754:	19a9      	adds	r1, r5, r6
 800b756:	f00b ffd8 	bl	801770a <memcpy>
 800b75a:	e77e      	b.n	800b65a <ucdr_serialize_double+0x9e>

0800b75c <ucdr_deserialize_double>:
 800b75c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b760:	460d      	mov	r5, r1
 800b762:	2108      	movs	r1, #8
 800b764:	4604      	mov	r4, r0
 800b766:	f000 f91f 	bl	800b9a8 <ucdr_buffer_alignment>
 800b76a:	4601      	mov	r1, r0
 800b76c:	4620      	mov	r0, r4
 800b76e:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b772:	f000 f95d 	bl	800ba30 <ucdr_advance_buffer>
 800b776:	2108      	movs	r1, #8
 800b778:	4620      	mov	r0, r4
 800b77a:	f000 f8b5 	bl	800b8e8 <ucdr_check_buffer_available_for>
 800b77e:	2800      	cmp	r0, #0
 800b780:	d151      	bne.n	800b826 <ucdr_deserialize_double+0xca>
 800b782:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b786:	42be      	cmp	r6, r7
 800b788:	d948      	bls.n	800b81c <ucdr_deserialize_double+0xc0>
 800b78a:	6923      	ldr	r3, [r4, #16]
 800b78c:	60a6      	str	r6, [r4, #8]
 800b78e:	1bf6      	subs	r6, r6, r7
 800b790:	4433      	add	r3, r6
 800b792:	f1c6 0808 	rsb	r8, r6, #8
 800b796:	6123      	str	r3, [r4, #16]
 800b798:	4641      	mov	r1, r8
 800b79a:	4620      	mov	r0, r4
 800b79c:	f000 f8b0 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	d06d      	beq.n	800b880 <ucdr_deserialize_double+0x124>
 800b7a4:	7d23      	ldrb	r3, [r4, #20]
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	f000 8093 	beq.w	800b8d2 <ucdr_deserialize_double+0x176>
 800b7ac:	79fb      	ldrb	r3, [r7, #7]
 800b7ae:	702b      	strb	r3, [r5, #0]
 800b7b0:	2e00      	cmp	r6, #0
 800b7b2:	d072      	beq.n	800b89a <ucdr_deserialize_double+0x13e>
 800b7b4:	79bb      	ldrb	r3, [r7, #6]
 800b7b6:	706b      	strb	r3, [r5, #1]
 800b7b8:	2e01      	cmp	r6, #1
 800b7ba:	f105 0302 	add.w	r3, r5, #2
 800b7be:	d070      	beq.n	800b8a2 <ucdr_deserialize_double+0x146>
 800b7c0:	797b      	ldrb	r3, [r7, #5]
 800b7c2:	70ab      	strb	r3, [r5, #2]
 800b7c4:	2e02      	cmp	r6, #2
 800b7c6:	f105 0303 	add.w	r3, r5, #3
 800b7ca:	d06e      	beq.n	800b8aa <ucdr_deserialize_double+0x14e>
 800b7cc:	793b      	ldrb	r3, [r7, #4]
 800b7ce:	70eb      	strb	r3, [r5, #3]
 800b7d0:	2e03      	cmp	r6, #3
 800b7d2:	f105 0304 	add.w	r3, r5, #4
 800b7d6:	d06c      	beq.n	800b8b2 <ucdr_deserialize_double+0x156>
 800b7d8:	78fb      	ldrb	r3, [r7, #3]
 800b7da:	712b      	strb	r3, [r5, #4]
 800b7dc:	2e04      	cmp	r6, #4
 800b7de:	f105 0305 	add.w	r3, r5, #5
 800b7e2:	d06a      	beq.n	800b8ba <ucdr_deserialize_double+0x15e>
 800b7e4:	78bb      	ldrb	r3, [r7, #2]
 800b7e6:	716b      	strb	r3, [r5, #5]
 800b7e8:	2e05      	cmp	r6, #5
 800b7ea:	f105 0306 	add.w	r3, r5, #6
 800b7ee:	d068      	beq.n	800b8c2 <ucdr_deserialize_double+0x166>
 800b7f0:	787b      	ldrb	r3, [r7, #1]
 800b7f2:	71ab      	strb	r3, [r5, #6]
 800b7f4:	2e06      	cmp	r6, #6
 800b7f6:	f105 0307 	add.w	r3, r5, #7
 800b7fa:	d066      	beq.n	800b8ca <ucdr_deserialize_double+0x16e>
 800b7fc:	783b      	ldrb	r3, [r7, #0]
 800b7fe:	71eb      	strb	r3, [r5, #7]
 800b800:	6923      	ldr	r3, [r4, #16]
 800b802:	68a2      	ldr	r2, [r4, #8]
 800b804:	7da0      	ldrb	r0, [r4, #22]
 800b806:	3308      	adds	r3, #8
 800b808:	1b9e      	subs	r6, r3, r6
 800b80a:	2308      	movs	r3, #8
 800b80c:	4442      	add	r2, r8
 800b80e:	7563      	strb	r3, [r4, #21]
 800b810:	60a2      	str	r2, [r4, #8]
 800b812:	6126      	str	r6, [r4, #16]
 800b814:	f080 0001 	eor.w	r0, r0, #1
 800b818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b81c:	2108      	movs	r1, #8
 800b81e:	4620      	mov	r0, r4
 800b820:	f000 f86e 	bl	800b900 <ucdr_check_final_buffer_behavior>
 800b824:	b310      	cbz	r0, 800b86c <ucdr_deserialize_double+0x110>
 800b826:	7d23      	ldrb	r3, [r4, #20]
 800b828:	2b01      	cmp	r3, #1
 800b82a:	68a3      	ldr	r3, [r4, #8]
 800b82c:	d023      	beq.n	800b876 <ucdr_deserialize_double+0x11a>
 800b82e:	79db      	ldrb	r3, [r3, #7]
 800b830:	702b      	strb	r3, [r5, #0]
 800b832:	68a3      	ldr	r3, [r4, #8]
 800b834:	799b      	ldrb	r3, [r3, #6]
 800b836:	706b      	strb	r3, [r5, #1]
 800b838:	68a3      	ldr	r3, [r4, #8]
 800b83a:	795b      	ldrb	r3, [r3, #5]
 800b83c:	70ab      	strb	r3, [r5, #2]
 800b83e:	68a3      	ldr	r3, [r4, #8]
 800b840:	791b      	ldrb	r3, [r3, #4]
 800b842:	70eb      	strb	r3, [r5, #3]
 800b844:	68a3      	ldr	r3, [r4, #8]
 800b846:	78db      	ldrb	r3, [r3, #3]
 800b848:	712b      	strb	r3, [r5, #4]
 800b84a:	68a3      	ldr	r3, [r4, #8]
 800b84c:	789b      	ldrb	r3, [r3, #2]
 800b84e:	716b      	strb	r3, [r5, #5]
 800b850:	68a3      	ldr	r3, [r4, #8]
 800b852:	785b      	ldrb	r3, [r3, #1]
 800b854:	71ab      	strb	r3, [r5, #6]
 800b856:	68a3      	ldr	r3, [r4, #8]
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	71eb      	strb	r3, [r5, #7]
 800b85c:	68a2      	ldr	r2, [r4, #8]
 800b85e:	6923      	ldr	r3, [r4, #16]
 800b860:	3208      	adds	r2, #8
 800b862:	3308      	adds	r3, #8
 800b864:	2108      	movs	r1, #8
 800b866:	60a2      	str	r2, [r4, #8]
 800b868:	6123      	str	r3, [r4, #16]
 800b86a:	7561      	strb	r1, [r4, #21]
 800b86c:	7da0      	ldrb	r0, [r4, #22]
 800b86e:	f080 0001 	eor.w	r0, r0, #1
 800b872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	606b      	str	r3, [r5, #4]
 800b87c:	602a      	str	r2, [r5, #0]
 800b87e:	e7ed      	b.n	800b85c <ucdr_deserialize_double+0x100>
 800b880:	68a2      	ldr	r2, [r4, #8]
 800b882:	6923      	ldr	r3, [r4, #16]
 800b884:	7da0      	ldrb	r0, [r4, #22]
 800b886:	f884 9015 	strb.w	r9, [r4, #21]
 800b88a:	1b92      	subs	r2, r2, r6
 800b88c:	1b9b      	subs	r3, r3, r6
 800b88e:	60a2      	str	r2, [r4, #8]
 800b890:	6123      	str	r3, [r4, #16]
 800b892:	f080 0001 	eor.w	r0, r0, #1
 800b896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b89a:	68a3      	ldr	r3, [r4, #8]
 800b89c:	799b      	ldrb	r3, [r3, #6]
 800b89e:	706b      	strb	r3, [r5, #1]
 800b8a0:	1cab      	adds	r3, r5, #2
 800b8a2:	68a2      	ldr	r2, [r4, #8]
 800b8a4:	7952      	ldrb	r2, [r2, #5]
 800b8a6:	f803 2b01 	strb.w	r2, [r3], #1
 800b8aa:	68a2      	ldr	r2, [r4, #8]
 800b8ac:	7912      	ldrb	r2, [r2, #4]
 800b8ae:	f803 2b01 	strb.w	r2, [r3], #1
 800b8b2:	68a2      	ldr	r2, [r4, #8]
 800b8b4:	78d2      	ldrb	r2, [r2, #3]
 800b8b6:	f803 2b01 	strb.w	r2, [r3], #1
 800b8ba:	68a2      	ldr	r2, [r4, #8]
 800b8bc:	7892      	ldrb	r2, [r2, #2]
 800b8be:	f803 2b01 	strb.w	r2, [r3], #1
 800b8c2:	68a2      	ldr	r2, [r4, #8]
 800b8c4:	7852      	ldrb	r2, [r2, #1]
 800b8c6:	f803 2b01 	strb.w	r2, [r3], #1
 800b8ca:	68a2      	ldr	r2, [r4, #8]
 800b8cc:	7812      	ldrb	r2, [r2, #0]
 800b8ce:	701a      	strb	r2, [r3, #0]
 800b8d0:	e796      	b.n	800b800 <ucdr_deserialize_double+0xa4>
 800b8d2:	4639      	mov	r1, r7
 800b8d4:	4632      	mov	r2, r6
 800b8d6:	4628      	mov	r0, r5
 800b8d8:	f00b ff17 	bl	801770a <memcpy>
 800b8dc:	68a1      	ldr	r1, [r4, #8]
 800b8de:	4642      	mov	r2, r8
 800b8e0:	19a8      	adds	r0, r5, r6
 800b8e2:	f00b ff12 	bl	801770a <memcpy>
 800b8e6:	e78b      	b.n	800b800 <ucdr_deserialize_double+0xa4>

0800b8e8 <ucdr_check_buffer_available_for>:
 800b8e8:	7d83      	ldrb	r3, [r0, #22]
 800b8ea:	b93b      	cbnz	r3, 800b8fc <ucdr_check_buffer_available_for+0x14>
 800b8ec:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800b8f0:	4419      	add	r1, r3
 800b8f2:	4288      	cmp	r0, r1
 800b8f4:	bf34      	ite	cc
 800b8f6:	2000      	movcc	r0, #0
 800b8f8:	2001      	movcs	r0, #1
 800b8fa:	4770      	bx	lr
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	4770      	bx	lr

0800b900 <ucdr_check_final_buffer_behavior>:
 800b900:	7d83      	ldrb	r3, [r0, #22]
 800b902:	b943      	cbnz	r3, 800b916 <ucdr_check_final_buffer_behavior+0x16>
 800b904:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800b908:	4291      	cmp	r1, r2
 800b90a:	b510      	push	{r4, lr}
 800b90c:	4604      	mov	r4, r0
 800b90e:	d205      	bcs.n	800b91c <ucdr_check_final_buffer_behavior+0x1c>
 800b910:	2301      	movs	r3, #1
 800b912:	4618      	mov	r0, r3
 800b914:	bd10      	pop	{r4, pc}
 800b916:	2300      	movs	r3, #0
 800b918:	4618      	mov	r0, r3
 800b91a:	4770      	bx	lr
 800b91c:	6982      	ldr	r2, [r0, #24]
 800b91e:	b13a      	cbz	r2, 800b930 <ucdr_check_final_buffer_behavior+0x30>
 800b920:	69c1      	ldr	r1, [r0, #28]
 800b922:	4790      	blx	r2
 800b924:	f080 0301 	eor.w	r3, r0, #1
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	75a0      	strb	r0, [r4, #22]
 800b92c:	4618      	mov	r0, r3
 800b92e:	bd10      	pop	{r4, pc}
 800b930:	2001      	movs	r0, #1
 800b932:	75a0      	strb	r0, [r4, #22]
 800b934:	e7fa      	b.n	800b92c <ucdr_check_final_buffer_behavior+0x2c>
 800b936:	bf00      	nop

0800b938 <ucdr_set_on_full_buffer_callback>:
 800b938:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop

0800b940 <ucdr_init_buffer_origin_offset_endian>:
 800b940:	b410      	push	{r4}
 800b942:	9c01      	ldr	r4, [sp, #4]
 800b944:	6001      	str	r1, [r0, #0]
 800b946:	440a      	add	r2, r1
 800b948:	6042      	str	r2, [r0, #4]
 800b94a:	190a      	adds	r2, r1, r4
 800b94c:	441c      	add	r4, r3
 800b94e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800b952:	6082      	str	r2, [r0, #8]
 800b954:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b958:	7503      	strb	r3, [r0, #20]
 800b95a:	2200      	movs	r2, #0
 800b95c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800b960:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b964:	7542      	strb	r2, [r0, #21]
 800b966:	7582      	strb	r2, [r0, #22]
 800b968:	4770      	bx	lr
 800b96a:	bf00      	nop

0800b96c <ucdr_init_buffer_origin_offset>:
 800b96c:	b510      	push	{r4, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	9c04      	ldr	r4, [sp, #16]
 800b972:	9400      	str	r4, [sp, #0]
 800b974:	2401      	movs	r4, #1
 800b976:	9401      	str	r4, [sp, #4]
 800b978:	f7ff ffe2 	bl	800b940 <ucdr_init_buffer_origin_offset_endian>
 800b97c:	b002      	add	sp, #8
 800b97e:	bd10      	pop	{r4, pc}

0800b980 <ucdr_init_buffer_origin>:
 800b980:	b510      	push	{r4, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	2400      	movs	r4, #0
 800b986:	9400      	str	r4, [sp, #0]
 800b988:	f7ff fff0 	bl	800b96c <ucdr_init_buffer_origin_offset>
 800b98c:	b002      	add	sp, #8
 800b98e:	bd10      	pop	{r4, pc}

0800b990 <ucdr_init_buffer>:
 800b990:	2300      	movs	r3, #0
 800b992:	f7ff bff5 	b.w	800b980 <ucdr_init_buffer_origin>
 800b996:	bf00      	nop

0800b998 <ucdr_alignment>:
 800b998:	fbb0 f3f1 	udiv	r3, r0, r1
 800b99c:	fb03 0011 	mls	r0, r3, r1, r0
 800b9a0:	1a08      	subs	r0, r1, r0
 800b9a2:	3901      	subs	r1, #1
 800b9a4:	4008      	ands	r0, r1
 800b9a6:	4770      	bx	lr

0800b9a8 <ucdr_buffer_alignment>:
 800b9a8:	7d43      	ldrb	r3, [r0, #21]
 800b9aa:	428b      	cmp	r3, r1
 800b9ac:	d208      	bcs.n	800b9c0 <ucdr_buffer_alignment+0x18>
 800b9ae:	6900      	ldr	r0, [r0, #16]
 800b9b0:	fbb0 f3f1 	udiv	r3, r0, r1
 800b9b4:	fb01 0013 	mls	r0, r1, r3, r0
 800b9b8:	1a08      	subs	r0, r1, r0
 800b9ba:	3901      	subs	r1, #1
 800b9bc:	4008      	ands	r0, r1
 800b9be:	4770      	bx	lr
 800b9c0:	2000      	movs	r0, #0
 800b9c2:	4770      	bx	lr

0800b9c4 <ucdr_align_to>:
 800b9c4:	b538      	push	{r3, r4, r5, lr}
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	460d      	mov	r5, r1
 800b9ca:	f7ff ffed 	bl	800b9a8 <ucdr_buffer_alignment>
 800b9ce:	68a3      	ldr	r3, [r4, #8]
 800b9d0:	6921      	ldr	r1, [r4, #16]
 800b9d2:	7565      	strb	r5, [r4, #21]
 800b9d4:	181a      	adds	r2, r3, r0
 800b9d6:	6863      	ldr	r3, [r4, #4]
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	4408      	add	r0, r1
 800b9dc:	bf28      	it	cs
 800b9de:	4613      	movcs	r3, r2
 800b9e0:	6120      	str	r0, [r4, #16]
 800b9e2:	60a3      	str	r3, [r4, #8]
 800b9e4:	bd38      	pop	{r3, r4, r5, pc}
 800b9e6:	bf00      	nop

0800b9e8 <ucdr_buffer_length>:
 800b9e8:	6882      	ldr	r2, [r0, #8]
 800b9ea:	6800      	ldr	r0, [r0, #0]
 800b9ec:	1a10      	subs	r0, r2, r0
 800b9ee:	4770      	bx	lr

0800b9f0 <ucdr_buffer_remaining>:
 800b9f0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800b9f4:	1a10      	subs	r0, r2, r0
 800b9f6:	4770      	bx	lr

0800b9f8 <ucdr_check_final_buffer_behavior_array>:
 800b9f8:	b538      	push	{r3, r4, r5, lr}
 800b9fa:	7d83      	ldrb	r3, [r0, #22]
 800b9fc:	b963      	cbnz	r3, 800ba18 <ucdr_check_final_buffer_behavior_array+0x20>
 800b9fe:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	4604      	mov	r4, r0
 800ba06:	460d      	mov	r5, r1
 800ba08:	d308      	bcc.n	800ba1c <ucdr_check_final_buffer_behavior_array+0x24>
 800ba0a:	b139      	cbz	r1, 800ba1c <ucdr_check_final_buffer_behavior_array+0x24>
 800ba0c:	6983      	ldr	r3, [r0, #24]
 800ba0e:	b163      	cbz	r3, 800ba2a <ucdr_check_final_buffer_behavior_array+0x32>
 800ba10:	69c1      	ldr	r1, [r0, #28]
 800ba12:	4798      	blx	r3
 800ba14:	75a0      	strb	r0, [r4, #22]
 800ba16:	b108      	cbz	r0, 800ba1c <ucdr_check_final_buffer_behavior_array+0x24>
 800ba18:	2000      	movs	r0, #0
 800ba1a:	bd38      	pop	{r3, r4, r5, pc}
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	f7ff ffe7 	bl	800b9f0 <ucdr_buffer_remaining>
 800ba22:	42a8      	cmp	r0, r5
 800ba24:	bf28      	it	cs
 800ba26:	4628      	movcs	r0, r5
 800ba28:	bd38      	pop	{r3, r4, r5, pc}
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	7583      	strb	r3, [r0, #22]
 800ba2e:	e7f3      	b.n	800ba18 <ucdr_check_final_buffer_behavior_array+0x20>

0800ba30 <ucdr_advance_buffer>:
 800ba30:	b538      	push	{r3, r4, r5, lr}
 800ba32:	4604      	mov	r4, r0
 800ba34:	460d      	mov	r5, r1
 800ba36:	f7ff ff57 	bl	800b8e8 <ucdr_check_buffer_available_for>
 800ba3a:	b178      	cbz	r0, 800ba5c <ucdr_advance_buffer+0x2c>
 800ba3c:	6923      	ldr	r3, [r4, #16]
 800ba3e:	68a2      	ldr	r2, [r4, #8]
 800ba40:	442b      	add	r3, r5
 800ba42:	6123      	str	r3, [r4, #16]
 800ba44:	2301      	movs	r3, #1
 800ba46:	442a      	add	r2, r5
 800ba48:	7563      	strb	r3, [r4, #21]
 800ba4a:	60a2      	str	r2, [r4, #8]
 800ba4c:	bd38      	pop	{r3, r4, r5, pc}
 800ba4e:	68a2      	ldr	r2, [r4, #8]
 800ba50:	6923      	ldr	r3, [r4, #16]
 800ba52:	4402      	add	r2, r0
 800ba54:	4403      	add	r3, r0
 800ba56:	1a2d      	subs	r5, r5, r0
 800ba58:	60a2      	str	r2, [r4, #8]
 800ba5a:	6123      	str	r3, [r4, #16]
 800ba5c:	4629      	mov	r1, r5
 800ba5e:	2201      	movs	r2, #1
 800ba60:	4620      	mov	r0, r4
 800ba62:	f7ff ffc9 	bl	800b9f8 <ucdr_check_final_buffer_behavior_array>
 800ba66:	2800      	cmp	r0, #0
 800ba68:	d1f1      	bne.n	800ba4e <ucdr_advance_buffer+0x1e>
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	7563      	strb	r3, [r4, #21]
 800ba6e:	bd38      	pop	{r3, r4, r5, pc}

0800ba70 <rcl_get_zero_initialized_init_options>:
 800ba70:	2000      	movs	r0, #0
 800ba72:	4770      	bx	lr

0800ba74 <rcl_init_options_init>:
 800ba74:	b084      	sub	sp, #16
 800ba76:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba78:	b097      	sub	sp, #92	@ 0x5c
 800ba7a:	ae1d      	add	r6, sp, #116	@ 0x74
 800ba7c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800ba80:	2800      	cmp	r0, #0
 800ba82:	d058      	beq.n	800bb36 <rcl_init_options_init+0xc2>
 800ba84:	6803      	ldr	r3, [r0, #0]
 800ba86:	4605      	mov	r5, r0
 800ba88:	b133      	cbz	r3, 800ba98 <rcl_init_options_init+0x24>
 800ba8a:	2464      	movs	r4, #100	@ 0x64
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	b017      	add	sp, #92	@ 0x5c
 800ba90:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ba94:	b004      	add	sp, #16
 800ba96:	4770      	bx	lr
 800ba98:	4630      	mov	r0, r6
 800ba9a:	f001 f92f 	bl	800ccfc <rcutils_allocator_is_valid>
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	d049      	beq.n	800bb36 <rcl_init_options_init+0xc2>
 800baa2:	46b4      	mov	ip, r6
 800baa4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800baa8:	ac11      	add	r4, sp, #68	@ 0x44
 800baaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800baac:	f8dc 3000 	ldr.w	r3, [ip]
 800bab0:	6023      	str	r3, [r4, #0]
 800bab2:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800bab4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bab6:	2050      	movs	r0, #80	@ 0x50
 800bab8:	4798      	blx	r3
 800baba:	4604      	mov	r4, r0
 800babc:	6028      	str	r0, [r5, #0]
 800babe:	2800      	cmp	r0, #0
 800bac0:	d03b      	beq.n	800bb3a <rcl_init_options_init+0xc6>
 800bac2:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800bac6:	4686      	mov	lr, r0
 800bac8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bacc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bad0:	f8dc 3000 	ldr.w	r3, [ip]
 800bad4:	f8ce 3000 	str.w	r3, [lr]
 800bad8:	a802      	add	r0, sp, #8
 800bada:	f001 f9a1 	bl	800ce20 <rmw_get_zero_initialized_init_options>
 800bade:	f10d 0e08 	add.w	lr, sp, #8
 800bae2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bae6:	f104 0c18 	add.w	ip, r4, #24
 800baea:	682f      	ldr	r7, [r5, #0]
 800baec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800baf0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800baf4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800baf8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bafc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bb00:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800bb04:	ac20      	add	r4, sp, #128	@ 0x80
 800bb06:	e88c 0003 	stmia.w	ip, {r0, r1}
 800bb0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bb0e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800bb12:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800bb16:	f107 0018 	add.w	r0, r7, #24
 800bb1a:	f001 f9af 	bl	800ce7c <rmw_init_options_init>
 800bb1e:	4604      	mov	r4, r0
 800bb20:	2800      	cmp	r0, #0
 800bb22:	d0b3      	beq.n	800ba8c <rcl_init_options_init+0x18>
 800bb24:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800bb26:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800bb28:	6828      	ldr	r0, [r5, #0]
 800bb2a:	4798      	blx	r3
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	f005 ff19 	bl	8011964 <rcl_convert_rmw_ret_to_rcl_ret>
 800bb32:	4604      	mov	r4, r0
 800bb34:	e7aa      	b.n	800ba8c <rcl_init_options_init+0x18>
 800bb36:	240b      	movs	r4, #11
 800bb38:	e7a8      	b.n	800ba8c <rcl_init_options_init+0x18>
 800bb3a:	240a      	movs	r4, #10
 800bb3c:	e7a6      	b.n	800ba8c <rcl_init_options_init+0x18>
 800bb3e:	bf00      	nop

0800bb40 <rcl_init_options_fini>:
 800bb40:	b530      	push	{r4, r5, lr}
 800bb42:	b087      	sub	sp, #28
 800bb44:	b1f0      	cbz	r0, 800bb84 <rcl_init_options_fini+0x44>
 800bb46:	6803      	ldr	r3, [r0, #0]
 800bb48:	4604      	mov	r4, r0
 800bb4a:	b1db      	cbz	r3, 800bb84 <rcl_init_options_fini+0x44>
 800bb4c:	469c      	mov	ip, r3
 800bb4e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bb52:	f10d 0e04 	add.w	lr, sp, #4
 800bb56:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bb5a:	f8dc 3000 	ldr.w	r3, [ip]
 800bb5e:	f8ce 3000 	str.w	r3, [lr]
 800bb62:	a801      	add	r0, sp, #4
 800bb64:	f001 f8ca 	bl	800ccfc <rcutils_allocator_is_valid>
 800bb68:	b160      	cbz	r0, 800bb84 <rcl_init_options_fini+0x44>
 800bb6a:	6820      	ldr	r0, [r4, #0]
 800bb6c:	3018      	adds	r0, #24
 800bb6e:	f001 fa35 	bl	800cfdc <rmw_init_options_fini>
 800bb72:	4605      	mov	r5, r0
 800bb74:	b950      	cbnz	r0, 800bb8c <rcl_init_options_fini+0x4c>
 800bb76:	6820      	ldr	r0, [r4, #0]
 800bb78:	9b02      	ldr	r3, [sp, #8]
 800bb7a:	9905      	ldr	r1, [sp, #20]
 800bb7c:	4798      	blx	r3
 800bb7e:	4628      	mov	r0, r5
 800bb80:	b007      	add	sp, #28
 800bb82:	bd30      	pop	{r4, r5, pc}
 800bb84:	250b      	movs	r5, #11
 800bb86:	4628      	mov	r0, r5
 800bb88:	b007      	add	sp, #28
 800bb8a:	bd30      	pop	{r4, r5, pc}
 800bb8c:	f005 feea 	bl	8011964 <rcl_convert_rmw_ret_to_rcl_ret>
 800bb90:	4605      	mov	r5, r0
 800bb92:	e7f8      	b.n	800bb86 <rcl_init_options_fini+0x46>

0800bb94 <rcl_init_options_copy>:
 800bb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb98:	b094      	sub	sp, #80	@ 0x50
 800bb9a:	2800      	cmp	r0, #0
 800bb9c:	d058      	beq.n	800bc50 <rcl_init_options_copy+0xbc>
 800bb9e:	4604      	mov	r4, r0
 800bba0:	6800      	ldr	r0, [r0, #0]
 800bba2:	2800      	cmp	r0, #0
 800bba4:	d054      	beq.n	800bc50 <rcl_init_options_copy+0xbc>
 800bba6:	460e      	mov	r6, r1
 800bba8:	f001 f8a8 	bl	800ccfc <rcutils_allocator_is_valid>
 800bbac:	2800      	cmp	r0, #0
 800bbae:	d04f      	beq.n	800bc50 <rcl_init_options_copy+0xbc>
 800bbb0:	2e00      	cmp	r6, #0
 800bbb2:	d04d      	beq.n	800bc50 <rcl_init_options_copy+0xbc>
 800bbb4:	6833      	ldr	r3, [r6, #0]
 800bbb6:	b123      	cbz	r3, 800bbc2 <rcl_init_options_copy+0x2e>
 800bbb8:	2464      	movs	r4, #100	@ 0x64
 800bbba:	4620      	mov	r0, r4
 800bbbc:	b014      	add	sp, #80	@ 0x50
 800bbbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbc2:	6827      	ldr	r7, [r4, #0]
 800bbc4:	46bc      	mov	ip, r7
 800bbc6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bbca:	ad0f      	add	r5, sp, #60	@ 0x3c
 800bbcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bbce:	f8dc 3000 	ldr.w	r3, [ip]
 800bbd2:	f8d7 8000 	ldr.w	r8, [r7]
 800bbd6:	602b      	str	r3, [r5, #0]
 800bbd8:	4619      	mov	r1, r3
 800bbda:	2050      	movs	r0, #80	@ 0x50
 800bbdc:	47c0      	blx	r8
 800bbde:	4605      	mov	r5, r0
 800bbe0:	6030      	str	r0, [r6, #0]
 800bbe2:	b3d0      	cbz	r0, 800bc5a <rcl_init_options_copy+0xc6>
 800bbe4:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800bbe8:	4686      	mov	lr, r0
 800bbea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bbee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bbf2:	f8dc 3000 	ldr.w	r3, [ip]
 800bbf6:	f8ce 3000 	str.w	r3, [lr]
 800bbfa:	4668      	mov	r0, sp
 800bbfc:	f001 f910 	bl	800ce20 <rmw_get_zero_initialized_init_options>
 800bc00:	46ee      	mov	lr, sp
 800bc02:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bc06:	f105 0c18 	add.w	ip, r5, #24
 800bc0a:	6824      	ldr	r4, [r4, #0]
 800bc0c:	6835      	ldr	r5, [r6, #0]
 800bc0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bc12:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bc16:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bc1a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bc1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bc22:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800bc26:	e88c 0003 	stmia.w	ip, {r0, r1}
 800bc2a:	f104 0018 	add.w	r0, r4, #24
 800bc2e:	f105 0118 	add.w	r1, r5, #24
 800bc32:	f001 f98b 	bl	800cf4c <rmw_init_options_copy>
 800bc36:	4604      	mov	r4, r0
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	d0be      	beq.n	800bbba <rcl_init_options_copy+0x26>
 800bc3c:	f001 f86c 	bl	800cd18 <rcutils_get_error_string>
 800bc40:	f001 f882 	bl	800cd48 <rcutils_reset_error>
 800bc44:	4630      	mov	r0, r6
 800bc46:	f7ff ff7b 	bl	800bb40 <rcl_init_options_fini>
 800bc4a:	b140      	cbz	r0, 800bc5e <rcl_init_options_copy+0xca>
 800bc4c:	4604      	mov	r4, r0
 800bc4e:	e7b4      	b.n	800bbba <rcl_init_options_copy+0x26>
 800bc50:	240b      	movs	r4, #11
 800bc52:	4620      	mov	r0, r4
 800bc54:	b014      	add	sp, #80	@ 0x50
 800bc56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc5a:	240a      	movs	r4, #10
 800bc5c:	e7ad      	b.n	800bbba <rcl_init_options_copy+0x26>
 800bc5e:	4620      	mov	r0, r4
 800bc60:	b014      	add	sp, #80	@ 0x50
 800bc62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc66:	f005 be7d 	b.w	8011964 <rcl_convert_rmw_ret_to_rcl_ret>
 800bc6a:	bf00      	nop

0800bc6c <rcl_init_options_set_domain_id>:
 800bc6c:	b120      	cbz	r0, 800bc78 <rcl_init_options_set_domain_id+0xc>
 800bc6e:	6803      	ldr	r3, [r0, #0]
 800bc70:	b113      	cbz	r3, 800bc78 <rcl_init_options_set_domain_id+0xc>
 800bc72:	6259      	str	r1, [r3, #36]	@ 0x24
 800bc74:	2000      	movs	r0, #0
 800bc76:	4770      	bx	lr
 800bc78:	200b      	movs	r0, #11
 800bc7a:	4770      	bx	lr

0800bc7c <rcl_get_zero_initialized_publisher>:
 800bc7c:	4b01      	ldr	r3, [pc, #4]	@ (800bc84 <rcl_get_zero_initialized_publisher+0x8>)
 800bc7e:	6818      	ldr	r0, [r3, #0]
 800bc80:	4770      	bx	lr
 800bc82:	bf00      	nop
 800bc84:	0801877c 	.word	0x0801877c

0800bc88 <rcl_publisher_init>:
 800bc88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc8c:	b088      	sub	sp, #32
 800bc8e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800bc90:	2d00      	cmp	r5, #0
 800bc92:	d069      	beq.n	800bd68 <rcl_publisher_init+0xe0>
 800bc94:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800bc98:	4604      	mov	r4, r0
 800bc9a:	4648      	mov	r0, r9
 800bc9c:	460e      	mov	r6, r1
 800bc9e:	4690      	mov	r8, r2
 800bca0:	461f      	mov	r7, r3
 800bca2:	f001 f82b 	bl	800ccfc <rcutils_allocator_is_valid>
 800bca6:	2800      	cmp	r0, #0
 800bca8:	d05e      	beq.n	800bd68 <rcl_publisher_init+0xe0>
 800bcaa:	2c00      	cmp	r4, #0
 800bcac:	d05c      	beq.n	800bd68 <rcl_publisher_init+0xe0>
 800bcae:	f8d4 a000 	ldr.w	sl, [r4]
 800bcb2:	f1ba 0f00 	cmp.w	sl, #0
 800bcb6:	d004      	beq.n	800bcc2 <rcl_publisher_init+0x3a>
 800bcb8:	2764      	movs	r7, #100	@ 0x64
 800bcba:	4638      	mov	r0, r7
 800bcbc:	b008      	add	sp, #32
 800bcbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcc2:	4630      	mov	r0, r6
 800bcc4:	f006 f948 	bl	8011f58 <rcl_node_is_valid>
 800bcc8:	2800      	cmp	r0, #0
 800bcca:	d052      	beq.n	800bd72 <rcl_publisher_init+0xea>
 800bccc:	f1b8 0f00 	cmp.w	r8, #0
 800bcd0:	d04a      	beq.n	800bd68 <rcl_publisher_init+0xe0>
 800bcd2:	2f00      	cmp	r7, #0
 800bcd4:	d048      	beq.n	800bd68 <rcl_publisher_init+0xe0>
 800bcd6:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800bcda:	aa07      	add	r2, sp, #28
 800bcdc:	9205      	str	r2, [sp, #20]
 800bcde:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800bce2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bce6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800bcea:	f8cd a01c 	str.w	sl, [sp, #28]
 800bcee:	4639      	mov	r1, r7
 800bcf0:	e899 000c 	ldmia.w	r9, {r2, r3}
 800bcf4:	4630      	mov	r0, r6
 800bcf6:	f006 f983 	bl	8012000 <rcl_node_resolve_name>
 800bcfa:	4607      	mov	r7, r0
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	d14f      	bne.n	800bda0 <rcl_publisher_init+0x118>
 800bd00:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800bd02:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800bd04:	20c8      	movs	r0, #200	@ 0xc8
 800bd06:	4798      	blx	r3
 800bd08:	6020      	str	r0, [r4, #0]
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	d04e      	beq.n	800bdac <rcl_publisher_init+0x124>
 800bd0e:	4630      	mov	r0, r6
 800bd10:	f006 f944 	bl	8011f9c <rcl_node_get_rmw_handle>
 800bd14:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800bd18:	9300      	str	r3, [sp, #0]
 800bd1a:	9a07      	ldr	r2, [sp, #28]
 800bd1c:	6827      	ldr	r7, [r4, #0]
 800bd1e:	462b      	mov	r3, r5
 800bd20:	4641      	mov	r1, r8
 800bd22:	f001 fc83 	bl	800d62c <rmw_create_publisher>
 800bd26:	6823      	ldr	r3, [r4, #0]
 800bd28:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800bd2c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800bd30:	b370      	cbz	r0, 800bd90 <rcl_publisher_init+0x108>
 800bd32:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800bd36:	f001 fd57 	bl	800d7e8 <rmw_publisher_get_actual_qos>
 800bd3a:	6823      	ldr	r3, [r4, #0]
 800bd3c:	4607      	mov	r7, r0
 800bd3e:	b9d0      	cbnz	r0, 800bd76 <rcl_publisher_init+0xee>
 800bd40:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800bd44:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800bd48:	4629      	mov	r1, r5
 800bd4a:	2270      	movs	r2, #112	@ 0x70
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f00b fcdc 	bl	801770a <memcpy>
 800bd52:	6832      	ldr	r2, [r6, #0]
 800bd54:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800bd58:	9807      	ldr	r0, [sp, #28]
 800bd5a:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800bd5c:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800bd5e:	4798      	blx	r3
 800bd60:	4638      	mov	r0, r7
 800bd62:	b008      	add	sp, #32
 800bd64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd68:	270b      	movs	r7, #11
 800bd6a:	4638      	mov	r0, r7
 800bd6c:	b008      	add	sp, #32
 800bd6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd72:	27c8      	movs	r7, #200	@ 0xc8
 800bd74:	e7a1      	b.n	800bcba <rcl_publisher_init+0x32>
 800bd76:	b18b      	cbz	r3, 800bd9c <rcl_publisher_init+0x114>
 800bd78:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800bd7c:	b142      	cbz	r2, 800bd90 <rcl_publisher_init+0x108>
 800bd7e:	4630      	mov	r0, r6
 800bd80:	f006 f90c 	bl	8011f9c <rcl_node_get_rmw_handle>
 800bd84:	6823      	ldr	r3, [r4, #0]
 800bd86:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800bd8a:	f001 fd3d 	bl	800d808 <rmw_destroy_publisher>
 800bd8e:	6823      	ldr	r3, [r4, #0]
 800bd90:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800bd92:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800bd94:	4618      	mov	r0, r3
 800bd96:	4790      	blx	r2
 800bd98:	2300      	movs	r3, #0
 800bd9a:	6023      	str	r3, [r4, #0]
 800bd9c:	2701      	movs	r7, #1
 800bd9e:	e7db      	b.n	800bd58 <rcl_publisher_init+0xd0>
 800bda0:	2867      	cmp	r0, #103	@ 0x67
 800bda2:	d0d9      	beq.n	800bd58 <rcl_publisher_init+0xd0>
 800bda4:	2869      	cmp	r0, #105	@ 0x69
 800bda6:	d003      	beq.n	800bdb0 <rcl_publisher_init+0x128>
 800bda8:	280a      	cmp	r0, #10
 800bdaa:	d1f7      	bne.n	800bd9c <rcl_publisher_init+0x114>
 800bdac:	270a      	movs	r7, #10
 800bdae:	e7d3      	b.n	800bd58 <rcl_publisher_init+0xd0>
 800bdb0:	2767      	movs	r7, #103	@ 0x67
 800bdb2:	e7d1      	b.n	800bd58 <rcl_publisher_init+0xd0>

0800bdb4 <rcl_publisher_get_default_options>:
 800bdb4:	b570      	push	{r4, r5, r6, lr}
 800bdb6:	4d14      	ldr	r5, [pc, #80]	@ (800be08 <rcl_publisher_get_default_options+0x54>)
 800bdb8:	4914      	ldr	r1, [pc, #80]	@ (800be0c <rcl_publisher_get_default_options+0x58>)
 800bdba:	b088      	sub	sp, #32
 800bdbc:	4604      	mov	r4, r0
 800bdbe:	2250      	movs	r2, #80	@ 0x50
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	f00b fca2 	bl	801770a <memcpy>
 800bdc6:	a802      	add	r0, sp, #8
 800bdc8:	f000 ff8a 	bl	800cce0 <rcutils_get_default_allocator>
 800bdcc:	f10d 0c08 	add.w	ip, sp, #8
 800bdd0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bdd4:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800bdd8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bddc:	466e      	mov	r6, sp
 800bdde:	f8dc 3000 	ldr.w	r3, [ip]
 800bde2:	f8ce 3000 	str.w	r3, [lr]
 800bde6:	4630      	mov	r0, r6
 800bde8:	f001 f82a 	bl	800ce40 <rmw_get_default_publisher_options>
 800bdec:	e896 0003 	ldmia.w	r6, {r0, r1}
 800bdf0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800bdf4:	e883 0003 	stmia.w	r3, {r0, r1}
 800bdf8:	2270      	movs	r2, #112	@ 0x70
 800bdfa:	4629      	mov	r1, r5
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	f00b fc84 	bl	801770a <memcpy>
 800be02:	4620      	mov	r0, r4
 800be04:	b008      	add	sp, #32
 800be06:	bd70      	pop	{r4, r5, r6, pc}
 800be08:	20006438 	.word	0x20006438
 800be0c:	08018780 	.word	0x08018780

0800be10 <rcl_publish>:
 800be10:	b1f8      	cbz	r0, 800be52 <rcl_publish+0x42>
 800be12:	6803      	ldr	r3, [r0, #0]
 800be14:	b570      	push	{r4, r5, r6, lr}
 800be16:	4604      	mov	r4, r0
 800be18:	b1b3      	cbz	r3, 800be48 <rcl_publish+0x38>
 800be1a:	4616      	mov	r6, r2
 800be1c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800be20:	b192      	cbz	r2, 800be48 <rcl_publish+0x38>
 800be22:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800be26:	460d      	mov	r5, r1
 800be28:	f005 fdba 	bl	80119a0 <rcl_context_is_valid>
 800be2c:	b160      	cbz	r0, 800be48 <rcl_publish+0x38>
 800be2e:	6823      	ldr	r3, [r4, #0]
 800be30:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800be34:	b140      	cbz	r0, 800be48 <rcl_publish+0x38>
 800be36:	b155      	cbz	r5, 800be4e <rcl_publish+0x3e>
 800be38:	4632      	mov	r2, r6
 800be3a:	4629      	mov	r1, r5
 800be3c:	f001 fb96 	bl	800d56c <rmw_publish>
 800be40:	3800      	subs	r0, #0
 800be42:	bf18      	it	ne
 800be44:	2001      	movne	r0, #1
 800be46:	bd70      	pop	{r4, r5, r6, pc}
 800be48:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800be4c:	bd70      	pop	{r4, r5, r6, pc}
 800be4e:	200b      	movs	r0, #11
 800be50:	bd70      	pop	{r4, r5, r6, pc}
 800be52:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800be56:	4770      	bx	lr

0800be58 <rcl_publisher_is_valid>:
 800be58:	b1a0      	cbz	r0, 800be84 <rcl_publisher_is_valid+0x2c>
 800be5a:	6803      	ldr	r3, [r0, #0]
 800be5c:	b510      	push	{r4, lr}
 800be5e:	4604      	mov	r4, r0
 800be60:	b173      	cbz	r3, 800be80 <rcl_publisher_is_valid+0x28>
 800be62:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800be66:	b15a      	cbz	r2, 800be80 <rcl_publisher_is_valid+0x28>
 800be68:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800be6c:	f005 fd98 	bl	80119a0 <rcl_context_is_valid>
 800be70:	b130      	cbz	r0, 800be80 <rcl_publisher_is_valid+0x28>
 800be72:	6823      	ldr	r3, [r4, #0]
 800be74:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800be78:	3800      	subs	r0, #0
 800be7a:	bf18      	it	ne
 800be7c:	2001      	movne	r0, #1
 800be7e:	bd10      	pop	{r4, pc}
 800be80:	2000      	movs	r0, #0
 800be82:	bd10      	pop	{r4, pc}
 800be84:	2000      	movs	r0, #0
 800be86:	4770      	bx	lr

0800be88 <rcl_publisher_is_valid_except_context>:
 800be88:	b130      	cbz	r0, 800be98 <rcl_publisher_is_valid_except_context+0x10>
 800be8a:	6800      	ldr	r0, [r0, #0]
 800be8c:	b120      	cbz	r0, 800be98 <rcl_publisher_is_valid_except_context+0x10>
 800be8e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800be92:	3800      	subs	r0, #0
 800be94:	bf18      	it	ne
 800be96:	2001      	movne	r0, #1
 800be98:	4770      	bx	lr
 800be9a:	bf00      	nop

0800be9c <_rclc_check_for_new_data>:
 800be9c:	2800      	cmp	r0, #0
 800be9e:	d046      	beq.n	800bf2e <_rclc_check_for_new_data+0x92>
 800bea0:	b510      	push	{r4, lr}
 800bea2:	7802      	ldrb	r2, [r0, #0]
 800bea4:	b084      	sub	sp, #16
 800bea6:	4603      	mov	r3, r0
 800bea8:	2a0a      	cmp	r2, #10
 800beaa:	d842      	bhi.n	800bf32 <_rclc_check_for_new_data+0x96>
 800beac:	e8df f002 	tbb	[pc, r2]
 800beb0:	14181212 	.word	0x14181212
 800beb4:	06060614 	.word	0x06060614
 800beb8:	2e1a      	.short	0x2e1a
 800beba:	16          	.byte	0x16
 800bebb:	00          	.byte	0x00
 800bebc:	6a0a      	ldr	r2, [r1, #32]
 800bebe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800bec0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800bec4:	2000      	movs	r0, #0
 800bec6:	1a12      	subs	r2, r2, r0
 800bec8:	bf18      	it	ne
 800beca:	2201      	movne	r2, #1
 800becc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800bed0:	b004      	add	sp, #16
 800bed2:	bd10      	pop	{r4, pc}
 800bed4:	680a      	ldr	r2, [r1, #0]
 800bed6:	e7f2      	b.n	800bebe <_rclc_check_for_new_data+0x22>
 800bed8:	698a      	ldr	r2, [r1, #24]
 800beda:	e7f0      	b.n	800bebe <_rclc_check_for_new_data+0x22>
 800bedc:	688a      	ldr	r2, [r1, #8]
 800bede:	e7ee      	b.n	800bebe <_rclc_check_for_new_data+0x22>
 800bee0:	690a      	ldr	r2, [r1, #16]
 800bee2:	e7ec      	b.n	800bebe <_rclc_check_for_new_data+0x22>
 800bee4:	685c      	ldr	r4, [r3, #4]
 800bee6:	4608      	mov	r0, r1
 800bee8:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800beec:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800bef0:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800bef4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800bef8:	9300      	str	r3, [sp, #0]
 800befa:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800befe:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800bf02:	f104 0110 	add.w	r1, r4, #16
 800bf06:	f007 fe77 	bl	8013bf8 <rcl_action_client_wait_set_get_entities_ready>
 800bf0a:	e7e1      	b.n	800bed0 <_rclc_check_for_new_data+0x34>
 800bf0c:	685c      	ldr	r4, [r3, #4]
 800bf0e:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800bf12:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800bf16:	e9cd 3200 	strd	r3, r2, [sp]
 800bf1a:	4608      	mov	r0, r1
 800bf1c:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800bf20:	f104 0220 	add.w	r2, r4, #32
 800bf24:	f104 0110 	add.w	r1, r4, #16
 800bf28:	f008 f87e 	bl	8014028 <rcl_action_server_wait_set_get_entities_ready>
 800bf2c:	e7d0      	b.n	800bed0 <_rclc_check_for_new_data+0x34>
 800bf2e:	200b      	movs	r0, #11
 800bf30:	4770      	bx	lr
 800bf32:	2001      	movs	r0, #1
 800bf34:	e7cc      	b.n	800bed0 <_rclc_check_for_new_data+0x34>
 800bf36:	bf00      	nop

0800bf38 <_rclc_take_new_data>:
 800bf38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf3a:	b09b      	sub	sp, #108	@ 0x6c
 800bf3c:	2800      	cmp	r0, #0
 800bf3e:	f000 8088 	beq.w	800c052 <_rclc_take_new_data+0x11a>
 800bf42:	7803      	ldrb	r3, [r0, #0]
 800bf44:	4604      	mov	r4, r0
 800bf46:	2b0a      	cmp	r3, #10
 800bf48:	f200 8167 	bhi.w	800c21a <_rclc_take_new_data+0x2e2>
 800bf4c:	e8df f003 	tbb	[pc, r3]
 800bf50:	44152d2d 	.word	0x44152d2d
 800bf54:	19191944 	.word	0x19191944
 800bf58:	065a      	.short	0x065a
 800bf5a:	15          	.byte	0x15
 800bf5b:	00          	.byte	0x00
 800bf5c:	6840      	ldr	r0, [r0, #4]
 800bf5e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	f040 80b2 	bne.w	800c0cc <_rclc_take_new_data+0x194>
 800bf68:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	f040 80e4 	bne.w	800c13a <_rclc_take_new_data+0x202>
 800bf72:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d16f      	bne.n	800c05a <_rclc_take_new_data+0x122>
 800bf7a:	2500      	movs	r5, #0
 800bf7c:	4628      	mov	r0, r5
 800bf7e:	b01b      	add	sp, #108	@ 0x6c
 800bf80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf82:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bf84:	6a0b      	ldr	r3, [r1, #32]
 800bf86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d0f5      	beq.n	800bf7a <_rclc_take_new_data+0x42>
 800bf8e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800bf92:	f104 0110 	add.w	r1, r4, #16
 800bf96:	f006 f9dd 	bl	8012354 <rcl_take_request>
 800bf9a:	4605      	mov	r5, r0
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	d0ec      	beq.n	800bf7a <_rclc_take_new_data+0x42>
 800bfa0:	f240 2359 	movw	r3, #601	@ 0x259
 800bfa4:	4298      	cmp	r0, r3
 800bfa6:	d013      	beq.n	800bfd0 <_rclc_take_new_data+0x98>
 800bfa8:	e029      	b.n	800bffe <_rclc_take_new_data+0xc6>
 800bfaa:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bfac:	680b      	ldr	r3, [r1, #0]
 800bfae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d0e1      	beq.n	800bf7a <_rclc_take_new_data+0x42>
 800bfb6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800bfba:	2300      	movs	r3, #0
 800bfbc:	aa0a      	add	r2, sp, #40	@ 0x28
 800bfbe:	f006 fa2b 	bl	8012418 <rcl_take>
 800bfc2:	4605      	mov	r5, r0
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	d0d9      	beq.n	800bf7c <_rclc_take_new_data+0x44>
 800bfc8:	f240 1391 	movw	r3, #401	@ 0x191
 800bfcc:	4298      	cmp	r0, r3
 800bfce:	d116      	bne.n	800bffe <_rclc_take_new_data+0xc6>
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800bfd6:	e7d1      	b.n	800bf7c <_rclc_take_new_data+0x44>
 800bfd8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bfda:	698b      	ldr	r3, [r1, #24]
 800bfdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d0ca      	beq.n	800bf7a <_rclc_take_new_data+0x42>
 800bfe4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800bfe8:	f104 0110 	add.w	r1, r4, #16
 800bfec:	f005 fc68 	bl	80118c0 <rcl_take_response>
 800bff0:	4605      	mov	r5, r0
 800bff2:	2800      	cmp	r0, #0
 800bff4:	d0c1      	beq.n	800bf7a <_rclc_take_new_data+0x42>
 800bff6:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800bffa:	4298      	cmp	r0, r3
 800bffc:	d0be      	beq.n	800bf7c <_rclc_take_new_data+0x44>
 800bffe:	f000 fea3 	bl	800cd48 <rcutils_reset_error>
 800c002:	e7bb      	b.n	800bf7c <_rclc_take_new_data+0x44>
 800c004:	6840      	ldr	r0, [r0, #4]
 800c006:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d17d      	bne.n	800c10a <_rclc_take_new_data+0x1d2>
 800c00e:	69c3      	ldr	r3, [r0, #28]
 800c010:	b11b      	cbz	r3, 800c01a <_rclc_take_new_data+0xe2>
 800c012:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c016:	2b00      	cmp	r3, #0
 800c018:	d144      	bne.n	800c0a4 <_rclc_take_new_data+0x16c>
 800c01a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c01e:	2b00      	cmp	r3, #0
 800c020:	f040 80ac 	bne.w	800c17c <_rclc_take_new_data+0x244>
 800c024:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d0a6      	beq.n	800bf7a <_rclc_take_new_data+0x42>
 800c02c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800c02e:	a90a      	add	r1, sp, #40	@ 0x28
 800c030:	3010      	adds	r0, #16
 800c032:	f007 fcb9 	bl	80139a8 <rcl_action_take_result_response>
 800c036:	4605      	mov	r5, r0
 800c038:	2800      	cmp	r0, #0
 800c03a:	d1e0      	bne.n	800bffe <_rclc_take_new_data+0xc6>
 800c03c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c040:	6860      	ldr	r0, [r4, #4]
 800c042:	f008 f915 	bl	8014270 <rclc_action_find_handle_by_result_request_sequence_number>
 800c046:	2800      	cmp	r0, #0
 800c048:	d098      	beq.n	800bf7c <_rclc_take_new_data+0x44>
 800c04a:	2301      	movs	r3, #1
 800c04c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800c050:	e794      	b.n	800bf7c <_rclc_take_new_data+0x44>
 800c052:	250b      	movs	r5, #11
 800c054:	4628      	mov	r0, r5
 800c056:	b01b      	add	sp, #108	@ 0x6c
 800c058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c05a:	ae04      	add	r6, sp, #16
 800c05c:	aa0a      	add	r2, sp, #40	@ 0x28
 800c05e:	3010      	adds	r0, #16
 800c060:	4631      	mov	r1, r6
 800c062:	f007 ff15 	bl	8013e90 <rcl_action_take_cancel_request>
 800c066:	4605      	mov	r5, r0
 800c068:	2800      	cmp	r0, #0
 800c06a:	d1c8      	bne.n	800bffe <_rclc_take_new_data+0xc6>
 800c06c:	6860      	ldr	r0, [r4, #4]
 800c06e:	a90a      	add	r1, sp, #40	@ 0x28
 800c070:	f008 f8bc 	bl	80141ec <rclc_action_find_goal_handle_by_uuid>
 800c074:	4607      	mov	r7, r0
 800c076:	2800      	cmp	r0, #0
 800c078:	f000 80bb 	beq.w	800c1f2 <_rclc_take_new_data+0x2ba>
 800c07c:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800c080:	2101      	movs	r1, #1
 800c082:	f008 f83d 	bl	8014100 <rcl_action_transition_goal_state>
 800c086:	2803      	cmp	r0, #3
 800c088:	4684      	mov	ip, r0
 800c08a:	f040 80a7 	bne.w	800c1dc <_rclc_take_new_data+0x2a4>
 800c08e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c090:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800c094:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c096:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c09a:	e884 0003 	stmia.w	r4, {r0, r1}
 800c09e:	f887 c008 	strb.w	ip, [r7, #8]
 800c0a2:	e76b      	b.n	800bf7c <_rclc_take_new_data+0x44>
 800c0a4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c0a6:	3010      	adds	r0, #16
 800c0a8:	f007 fcfe 	bl	8013aa8 <rcl_action_take_feedback>
 800c0ac:	4605      	mov	r5, r0
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	d1a5      	bne.n	800bffe <_rclc_take_new_data+0xc6>
 800c0b2:	6860      	ldr	r0, [r4, #4]
 800c0b4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c0b6:	f008 f899 	bl	80141ec <rclc_action_find_goal_handle_by_uuid>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	f000 80a3 	beq.w	800c208 <_rclc_take_new_data+0x2d0>
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	6860      	ldr	r0, [r4, #4]
 800c0c6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800c0ca:	e7a6      	b.n	800c01a <_rclc_take_new_data+0xe2>
 800c0cc:	f008 f868 	bl	80141a0 <rclc_action_take_goal_handle>
 800c0d0:	4606      	mov	r6, r0
 800c0d2:	6860      	ldr	r0, [r4, #4]
 800c0d4:	2e00      	cmp	r6, #0
 800c0d6:	f43f af47 	beq.w	800bf68 <_rclc_take_new_data+0x30>
 800c0da:	6070      	str	r0, [r6, #4]
 800c0dc:	69f2      	ldr	r2, [r6, #28]
 800c0de:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800c0e2:	3010      	adds	r0, #16
 800c0e4:	f007 fe1c 	bl	8013d20 <rcl_action_take_goal_request>
 800c0e8:	4605      	mov	r5, r0
 800c0ea:	2800      	cmp	r0, #0
 800c0ec:	f040 808e 	bne.w	800c20c <_rclc_take_new_data+0x2d4>
 800c0f0:	69f7      	ldr	r7, [r6, #28]
 800c0f2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c0f4:	7235      	strb	r5, [r6, #8]
 800c0f6:	f8c6 0009 	str.w	r0, [r6, #9]
 800c0fa:	f8c6 100d 	str.w	r1, [r6, #13]
 800c0fe:	6860      	ldr	r0, [r4, #4]
 800c100:	f8c6 2011 	str.w	r2, [r6, #17]
 800c104:	f8c6 3015 	str.w	r3, [r6, #21]
 800c108:	e72e      	b.n	800bf68 <_rclc_take_new_data+0x30>
 800c10a:	aa04      	add	r2, sp, #16
 800c10c:	a90a      	add	r1, sp, #40	@ 0x28
 800c10e:	3010      	adds	r0, #16
 800c110:	f007 fbd2 	bl	80138b8 <rcl_action_take_goal_response>
 800c114:	4605      	mov	r5, r0
 800c116:	2800      	cmp	r0, #0
 800c118:	f47f af71 	bne.w	800bffe <_rclc_take_new_data+0xc6>
 800c11c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c120:	6860      	ldr	r0, [r4, #4]
 800c122:	f008 f893 	bl	801424c <rclc_action_find_handle_by_goal_request_sequence_number>
 800c126:	b130      	cbz	r0, 800c136 <_rclc_take_new_data+0x1fe>
 800c128:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c12c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c130:	2201      	movs	r2, #1
 800c132:	f880 2020 	strb.w	r2, [r0, #32]
 800c136:	6860      	ldr	r0, [r4, #4]
 800c138:	e769      	b.n	800c00e <_rclc_take_new_data+0xd6>
 800c13a:	aa04      	add	r2, sp, #16
 800c13c:	3010      	adds	r0, #16
 800c13e:	a90a      	add	r1, sp, #40	@ 0x28
 800c140:	f007 fe66 	bl	8013e10 <rcl_action_take_result_request>
 800c144:	4605      	mov	r5, r0
 800c146:	2800      	cmp	r0, #0
 800c148:	f47f af59 	bne.w	800bffe <_rclc_take_new_data+0xc6>
 800c14c:	6860      	ldr	r0, [r4, #4]
 800c14e:	a904      	add	r1, sp, #16
 800c150:	f008 f84c 	bl	80141ec <rclc_action_find_goal_handle_by_uuid>
 800c154:	4607      	mov	r7, r0
 800c156:	b160      	cbz	r0, 800c172 <_rclc_take_new_data+0x23a>
 800c158:	ad0a      	add	r5, sp, #40	@ 0x28
 800c15a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800c15e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c160:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c162:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c166:	f04f 0c02 	mov.w	ip, #2
 800c16a:	e886 0003 	stmia.w	r6, {r0, r1}
 800c16e:	f887 c008 	strb.w	ip, [r7, #8]
 800c172:	6860      	ldr	r0, [r4, #4]
 800c174:	2300      	movs	r3, #0
 800c176:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800c17a:	e6fa      	b.n	800bf72 <_rclc_take_new_data+0x3a>
 800c17c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800c180:	a90a      	add	r1, sp, #40	@ 0x28
 800c182:	3010      	adds	r0, #16
 800c184:	f007 fc50 	bl	8013a28 <rcl_action_take_cancel_response>
 800c188:	4605      	mov	r5, r0
 800c18a:	2800      	cmp	r0, #0
 800c18c:	f47f af37 	bne.w	800bffe <_rclc_take_new_data+0xc6>
 800c190:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c194:	6860      	ldr	r0, [r4, #4]
 800c196:	f008 f87d 	bl	8014294 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800c19a:	4606      	mov	r6, r0
 800c19c:	6860      	ldr	r0, [r4, #4]
 800c19e:	2e00      	cmp	r6, #0
 800c1a0:	f43f af40 	beq.w	800c024 <_rclc_take_new_data+0xec>
 800c1a4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c1a6:	2701      	movs	r7, #1
 800c1a8:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	f43f af3a 	beq.w	800c024 <_rclc_take_new_data+0xec>
 800c1b0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c1b2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c1b6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c1ba:	f008 f817 	bl	80141ec <rclc_action_find_goal_handle_by_uuid>
 800c1be:	b138      	cbz	r0, 800c1d0 <_rclc_take_new_data+0x298>
 800c1c0:	6860      	ldr	r0, [r4, #4]
 800c1c2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c1c4:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800c1c8:	3501      	adds	r5, #1
 800c1ca:	42ab      	cmp	r3, r5
 800c1cc:	d8f0      	bhi.n	800c1b0 <_rclc_take_new_data+0x278>
 800c1ce:	e729      	b.n	800c024 <_rclc_take_new_data+0xec>
 800c1d0:	6860      	ldr	r0, [r4, #4]
 800c1d2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c1d4:	3501      	adds	r5, #1
 800c1d6:	42ab      	cmp	r3, r5
 800c1d8:	d8ea      	bhi.n	800c1b0 <_rclc_take_new_data+0x278>
 800c1da:	e723      	b.n	800c024 <_rclc_take_new_data+0xec>
 800c1dc:	ab06      	add	r3, sp, #24
 800c1de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c1e0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c1e4:	2103      	movs	r1, #3
 800c1e6:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c1ea:	6860      	ldr	r0, [r4, #4]
 800c1ec:	f008 f8c8 	bl	8014380 <rclc_action_server_goal_cancel_reject>
 800c1f0:	e6c4      	b.n	800bf7c <_rclc_take_new_data+0x44>
 800c1f2:	ab06      	add	r3, sp, #24
 800c1f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c1f6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c1fa:	2102      	movs	r1, #2
 800c1fc:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c200:	6860      	ldr	r0, [r4, #4]
 800c202:	f008 f8bd 	bl	8014380 <rclc_action_server_goal_cancel_reject>
 800c206:	e6b9      	b.n	800bf7c <_rclc_take_new_data+0x44>
 800c208:	6860      	ldr	r0, [r4, #4]
 800c20a:	e706      	b.n	800c01a <_rclc_take_new_data+0xe2>
 800c20c:	6860      	ldr	r0, [r4, #4]
 800c20e:	4631      	mov	r1, r6
 800c210:	f007 ffd6 	bl	80141c0 <rclc_action_remove_used_goal_handle>
 800c214:	f000 fd98 	bl	800cd48 <rcutils_reset_error>
 800c218:	e6b0      	b.n	800bf7c <_rclc_take_new_data+0x44>
 800c21a:	2501      	movs	r5, #1
 800c21c:	e6ae      	b.n	800bf7c <_rclc_take_new_data+0x44>
 800c21e:	bf00      	nop

0800c220 <_rclc_execute.part.0>:
 800c220:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c222:	7803      	ldrb	r3, [r0, #0]
 800c224:	b087      	sub	sp, #28
 800c226:	4604      	mov	r4, r0
 800c228:	2b0a      	cmp	r3, #10
 800c22a:	f200 8136 	bhi.w	800c49a <_rclc_execute.part.0+0x27a>
 800c22e:	e8df f003 	tbb	[pc, r3]
 800c232:	435e      	.short	0x435e
 800c234:	06a1664f 	.word	0x06a1664f
 800c238:	6c1e0606 	.word	0x6c1e0606
 800c23c:	59          	.byte	0x59
 800c23d:	00          	.byte	0x00
 800c23e:	2b06      	cmp	r3, #6
 800c240:	f000 8122 	beq.w	800c488 <_rclc_execute.part.0+0x268>
 800c244:	2b07      	cmp	r3, #7
 800c246:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c248:	f040 8118 	bne.w	800c47c <_rclc_execute.part.0+0x25c>
 800c24c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800c250:	6880      	ldr	r0, [r0, #8]
 800c252:	4798      	blx	r3
 800c254:	f104 0110 	add.w	r1, r4, #16
 800c258:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c25a:	6860      	ldr	r0, [r4, #4]
 800c25c:	f006 f8ba 	bl	80123d4 <rcl_send_response>
 800c260:	2800      	cmp	r0, #0
 800c262:	d033      	beq.n	800c2cc <_rclc_execute.part.0+0xac>
 800c264:	9005      	str	r0, [sp, #20]
 800c266:	f000 fd6f 	bl	800cd48 <rcutils_reset_error>
 800c26a:	9805      	ldr	r0, [sp, #20]
 800c26c:	e02e      	b.n	800c2cc <_rclc_execute.part.0+0xac>
 800c26e:	6840      	ldr	r0, [r0, #4]
 800c270:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c274:	2b00      	cmp	r3, #0
 800c276:	f000 8086 	beq.w	800c386 <_rclc_execute.part.0+0x166>
 800c27a:	2600      	movs	r6, #0
 800c27c:	2701      	movs	r7, #1
 800c27e:	e004      	b.n	800c28a <_rclc_execute.part.0+0x6a>
 800c280:	f007 ff68 	bl	8014154 <rclc_action_send_result_request>
 800c284:	b998      	cbnz	r0, 800c2ae <_rclc_execute.part.0+0x8e>
 800c286:	722f      	strb	r7, [r5, #8]
 800c288:	6860      	ldr	r0, [r4, #4]
 800c28a:	f008 f815 	bl	80142b8 <rclc_action_find_first_handle_with_goal_response>
 800c28e:	4605      	mov	r5, r0
 800c290:	2800      	cmp	r0, #0
 800c292:	d077      	beq.n	800c384 <_rclc_execute.part.0+0x164>
 800c294:	6863      	ldr	r3, [r4, #4]
 800c296:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c298:	699b      	ldr	r3, [r3, #24]
 800c29a:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800c29e:	f885 6020 	strb.w	r6, [r5, #32]
 800c2a2:	4798      	blx	r3
 800c2a4:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800c2a8:	4628      	mov	r0, r5
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d1e8      	bne.n	800c280 <_rclc_execute.part.0+0x60>
 800c2ae:	6860      	ldr	r0, [r4, #4]
 800c2b0:	4629      	mov	r1, r5
 800c2b2:	f007 ff85 	bl	80141c0 <rclc_action_remove_used_goal_handle>
 800c2b6:	e7e7      	b.n	800c288 <_rclc_execute.part.0+0x68>
 800c2b8:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c2bc:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800c2c0:	2d00      	cmp	r5, #0
 800c2c2:	f000 80c9 	beq.w	800c458 <_rclc_execute.part.0+0x238>
 800c2c6:	6880      	ldr	r0, [r0, #8]
 800c2c8:	4798      	blx	r3
 800c2ca:	2000      	movs	r0, #0
 800c2cc:	b007      	add	sp, #28
 800c2ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2d0:	6840      	ldr	r0, [r0, #4]
 800c2d2:	f006 fbaf 	bl	8012a34 <rcl_timer_call>
 800c2d6:	f240 3321 	movw	r3, #801	@ 0x321
 800c2da:	4298      	cmp	r0, r3
 800c2dc:	d004      	beq.n	800c2e8 <_rclc_execute.part.0+0xc8>
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	d0f4      	beq.n	800c2cc <_rclc_execute.part.0+0xac>
 800c2e2:	e7bf      	b.n	800c264 <_rclc_execute.part.0+0x44>
 800c2e4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c2e6:	4798      	blx	r3
 800c2e8:	2000      	movs	r0, #0
 800c2ea:	b007      	add	sp, #28
 800c2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2ee:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c2f2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c2f4:	b925      	cbnz	r5, 800c300 <_rclc_execute.part.0+0xe0>
 800c2f6:	4628      	mov	r0, r5
 800c2f8:	4798      	blx	r3
 800c2fa:	4628      	mov	r0, r5
 800c2fc:	e7e6      	b.n	800c2cc <_rclc_execute.part.0+0xac>
 800c2fe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c300:	68a0      	ldr	r0, [r4, #8]
 800c302:	4798      	blx	r3
 800c304:	2000      	movs	r0, #0
 800c306:	b007      	add	sp, #28
 800c308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c30a:	6840      	ldr	r0, [r0, #4]
 800c30c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800c310:	bb3b      	cbnz	r3, 800c362 <_rclc_execute.part.0+0x142>
 800c312:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d07b      	beq.n	800c412 <_rclc_execute.part.0+0x1f2>
 800c31a:	f640 0634 	movw	r6, #2100	@ 0x834
 800c31e:	2701      	movs	r7, #1
 800c320:	e007      	b.n	800c332 <_rclc_execute.part.0+0x112>
 800c322:	4628      	mov	r0, r5
 800c324:	f007 ffe0 	bl	80142e8 <rclc_action_server_response_goal_request>
 800c328:	6860      	ldr	r0, [r4, #4]
 800c32a:	4629      	mov	r1, r5
 800c32c:	f007 ff48 	bl	80141c0 <rclc_action_remove_used_goal_handle>
 800c330:	6860      	ldr	r0, [r4, #4]
 800c332:	2100      	movs	r1, #0
 800c334:	f007 ff72 	bl	801421c <rclc_action_find_first_handle_by_status>
 800c338:	4605      	mov	r5, r0
 800c33a:	2800      	cmp	r0, #0
 800c33c:	d066      	beq.n	800c40c <_rclc_execute.part.0+0x1ec>
 800c33e:	6863      	ldr	r3, [r4, #4]
 800c340:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c342:	699b      	ldr	r3, [r3, #24]
 800c344:	4798      	blx	r3
 800c346:	42b0      	cmp	r0, r6
 800c348:	f04f 0100 	mov.w	r1, #0
 800c34c:	d1e9      	bne.n	800c322 <_rclc_execute.part.0+0x102>
 800c34e:	2101      	movs	r1, #1
 800c350:	4628      	mov	r0, r5
 800c352:	f007 ffc9 	bl	80142e8 <rclc_action_server_response_goal_request>
 800c356:	722f      	strb	r7, [r5, #8]
 800c358:	e7ea      	b.n	800c330 <_rclc_execute.part.0+0x110>
 800c35a:	6848      	ldr	r0, [r1, #4]
 800c35c:	f007 ff30 	bl	80141c0 <rclc_action_remove_used_goal_handle>
 800c360:	6860      	ldr	r0, [r4, #4]
 800c362:	f007 ff67 	bl	8014234 <rclc_action_find_first_terminated_handle>
 800c366:	4601      	mov	r1, r0
 800c368:	2800      	cmp	r0, #0
 800c36a:	d1f6      	bne.n	800c35a <_rclc_execute.part.0+0x13a>
 800c36c:	6860      	ldr	r0, [r4, #4]
 800c36e:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800c372:	e7ce      	b.n	800c312 <_rclc_execute.part.0+0xf2>
 800c374:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c376:	6880      	ldr	r0, [r0, #8]
 800c378:	f104 0110 	add.w	r1, r4, #16
 800c37c:	4798      	blx	r3
 800c37e:	2000      	movs	r0, #0
 800c380:	b007      	add	sp, #28
 800c382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c384:	6860      	ldr	r0, [r4, #4]
 800c386:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c38a:	b18b      	cbz	r3, 800c3b0 <_rclc_execute.part.0+0x190>
 800c38c:	68c5      	ldr	r5, [r0, #12]
 800c38e:	b32d      	cbz	r5, 800c3dc <_rclc_execute.part.0+0x1bc>
 800c390:	2600      	movs	r6, #0
 800c392:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800c396:	b143      	cbz	r3, 800c3aa <_rclc_execute.part.0+0x18a>
 800c398:	69c3      	ldr	r3, [r0, #28]
 800c39a:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800c39e:	b123      	cbz	r3, 800c3aa <_rclc_execute.part.0+0x18a>
 800c3a0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c3a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c3a4:	4628      	mov	r0, r5
 800c3a6:	4798      	blx	r3
 800c3a8:	6860      	ldr	r0, [r4, #4]
 800c3aa:	682d      	ldr	r5, [r5, #0]
 800c3ac:	2d00      	cmp	r5, #0
 800c3ae:	d1f0      	bne.n	800c392 <_rclc_execute.part.0+0x172>
 800c3b0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c3b4:	b193      	cbz	r3, 800c3dc <_rclc_execute.part.0+0x1bc>
 800c3b6:	68c5      	ldr	r5, [r0, #12]
 800c3b8:	b185      	cbz	r5, 800c3dc <_rclc_execute.part.0+0x1bc>
 800c3ba:	2600      	movs	r6, #0
 800c3bc:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800c3c0:	b14b      	cbz	r3, 800c3d6 <_rclc_execute.part.0+0x1b6>
 800c3c2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c3c4:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800c3c8:	b12b      	cbz	r3, 800c3d6 <_rclc_execute.part.0+0x1b6>
 800c3ca:	4628      	mov	r0, r5
 800c3cc:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800c3d0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c3d2:	4798      	blx	r3
 800c3d4:	6860      	ldr	r0, [r4, #4]
 800c3d6:	682d      	ldr	r5, [r5, #0]
 800c3d8:	2d00      	cmp	r5, #0
 800c3da:	d1ef      	bne.n	800c3bc <_rclc_execute.part.0+0x19c>
 800c3dc:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d081      	beq.n	800c2e8 <_rclc_execute.part.0+0xc8>
 800c3e4:	2700      	movs	r7, #0
 800c3e6:	e00b      	b.n	800c400 <_rclc_execute.part.0+0x1e0>
 800c3e8:	6863      	ldr	r3, [r4, #4]
 800c3ea:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c3ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c3ee:	6a1e      	ldr	r6, [r3, #32]
 800c3f0:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800c3f4:	47b0      	blx	r6
 800c3f6:	6860      	ldr	r0, [r4, #4]
 800c3f8:	4629      	mov	r1, r5
 800c3fa:	f007 fee1 	bl	80141c0 <rclc_action_remove_used_goal_handle>
 800c3fe:	6860      	ldr	r0, [r4, #4]
 800c400:	f007 ff66 	bl	80142d0 <rclc_action_find_first_handle_with_result_response>
 800c404:	4605      	mov	r5, r0
 800c406:	2800      	cmp	r0, #0
 800c408:	d1ee      	bne.n	800c3e8 <_rclc_execute.part.0+0x1c8>
 800c40a:	e76d      	b.n	800c2e8 <_rclc_execute.part.0+0xc8>
 800c40c:	6860      	ldr	r0, [r4, #4]
 800c40e:	f880 5020 	strb.w	r5, [r0, #32]
 800c412:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c416:	2b00      	cmp	r3, #0
 800c418:	f43f af66 	beq.w	800c2e8 <_rclc_execute.part.0+0xc8>
 800c41c:	68c5      	ldr	r5, [r0, #12]
 800c41e:	b1b5      	cbz	r5, 800c44e <_rclc_execute.part.0+0x22e>
 800c420:	2602      	movs	r6, #2
 800c422:	e001      	b.n	800c428 <_rclc_execute.part.0+0x208>
 800c424:	682d      	ldr	r5, [r5, #0]
 800c426:	b195      	cbz	r5, 800c44e <_rclc_execute.part.0+0x22e>
 800c428:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800c42c:	2b03      	cmp	r3, #3
 800c42e:	d1f9      	bne.n	800c424 <_rclc_execute.part.0+0x204>
 800c430:	69c3      	ldr	r3, [r0, #28]
 800c432:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c434:	4628      	mov	r0, r5
 800c436:	4798      	blx	r3
 800c438:	4603      	mov	r3, r0
 800c43a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800c43e:	4628      	mov	r0, r5
 800c440:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800c444:	b163      	cbz	r3, 800c460 <_rclc_execute.part.0+0x240>
 800c446:	f007 ff6f 	bl	8014328 <rclc_action_server_goal_cancel_accept>
 800c44a:	6860      	ldr	r0, [r4, #4]
 800c44c:	e7ea      	b.n	800c424 <_rclc_execute.part.0+0x204>
 800c44e:	2300      	movs	r3, #0
 800c450:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c454:	4618      	mov	r0, r3
 800c456:	e739      	b.n	800c2cc <_rclc_execute.part.0+0xac>
 800c458:	4628      	mov	r0, r5
 800c45a:	4798      	blx	r3
 800c45c:	4628      	mov	r0, r5
 800c45e:	e735      	b.n	800c2cc <_rclc_execute.part.0+0xac>
 800c460:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800c462:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c466:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800c46a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c46e:	6860      	ldr	r0, [r4, #4]
 800c470:	2101      	movs	r1, #1
 800c472:	f007 ff85 	bl	8014380 <rclc_action_server_goal_cancel_reject>
 800c476:	722e      	strb	r6, [r5, #8]
 800c478:	6860      	ldr	r0, [r4, #4]
 800c47a:	e7d3      	b.n	800c424 <_rclc_execute.part.0+0x204>
 800c47c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c47e:	6880      	ldr	r0, [r0, #8]
 800c480:	4798      	blx	r3
 800c482:	f104 0110 	add.w	r1, r4, #16
 800c486:	e6e7      	b.n	800c258 <_rclc_execute.part.0+0x38>
 800c488:	f100 0110 	add.w	r1, r0, #16
 800c48c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c48e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800c490:	6880      	ldr	r0, [r0, #8]
 800c492:	9105      	str	r1, [sp, #20]
 800c494:	4798      	blx	r3
 800c496:	9905      	ldr	r1, [sp, #20]
 800c498:	e6de      	b.n	800c258 <_rclc_execute.part.0+0x38>
 800c49a:	2001      	movs	r0, #1
 800c49c:	e716      	b.n	800c2cc <_rclc_execute.part.0+0xac>
 800c49e:	bf00      	nop

0800c4a0 <rclc_executor_trigger_any>:
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	d03f      	beq.n	800c524 <rclc_executor_trigger_any+0x84>
 800c4a4:	2900      	cmp	r1, #0
 800c4a6:	d03e      	beq.n	800c526 <rclc_executor_trigger_any+0x86>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	d037      	beq.n	800c524 <rclc_executor_trigger_any+0x84>
 800c4b4:	b430      	push	{r4, r5}
 800c4b6:	f893 c000 	ldrb.w	ip, [r3]
 800c4ba:	f1bc 0f08 	cmp.w	ip, #8
 800c4be:	d11e      	bne.n	800c4fe <rclc_executor_trigger_any+0x5e>
 800c4c0:	685c      	ldr	r4, [r3, #4]
 800c4c2:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800c4c4:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800c4c8:	d105      	bne.n	800c4d6 <rclc_executor_trigger_any+0x36>
 800c4ca:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800c4ce:	b910      	cbnz	r0, 800c4d6 <rclc_executor_trigger_any+0x36>
 800c4d0:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800c4d4:	b128      	cbz	r0, 800c4e2 <rclc_executor_trigger_any+0x42>
 800c4d6:	bc30      	pop	{r4, r5}
 800c4d8:	4770      	bx	lr
 800c4da:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	d1f9      	bne.n	800c4d6 <rclc_executor_trigger_any+0x36>
 800c4e2:	3201      	adds	r2, #1
 800c4e4:	4291      	cmp	r1, r2
 800c4e6:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c4ea:	d018      	beq.n	800c51e <rclc_executor_trigger_any+0x7e>
 800c4ec:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800c4f0:	2800      	cmp	r0, #0
 800c4f2:	d0f0      	beq.n	800c4d6 <rclc_executor_trigger_any+0x36>
 800c4f4:	f893 c000 	ldrb.w	ip, [r3]
 800c4f8:	f1bc 0f08 	cmp.w	ip, #8
 800c4fc:	d0e0      	beq.n	800c4c0 <rclc_executor_trigger_any+0x20>
 800c4fe:	f1bc 0f09 	cmp.w	ip, #9
 800c502:	d1ea      	bne.n	800c4da <rclc_executor_trigger_any+0x3a>
 800c504:	685c      	ldr	r4, [r3, #4]
 800c506:	6a25      	ldr	r5, [r4, #32]
 800c508:	2d00      	cmp	r5, #0
 800c50a:	d1e4      	bne.n	800c4d6 <rclc_executor_trigger_any+0x36>
 800c50c:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800c510:	2800      	cmp	r0, #0
 800c512:	d1e0      	bne.n	800c4d6 <rclc_executor_trigger_any+0x36>
 800c514:	3201      	adds	r2, #1
 800c516:	4291      	cmp	r1, r2
 800c518:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c51c:	d1e6      	bne.n	800c4ec <rclc_executor_trigger_any+0x4c>
 800c51e:	2000      	movs	r0, #0
 800c520:	bc30      	pop	{r4, r5}
 800c522:	4770      	bx	lr
 800c524:	4770      	bx	lr
 800c526:	4608      	mov	r0, r1
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop

0800c52c <rclc_executor_get_zero_initialized_executor>:
 800c52c:	b510      	push	{r4, lr}
 800c52e:	4903      	ldr	r1, [pc, #12]	@ (800c53c <rclc_executor_get_zero_initialized_executor+0x10>)
 800c530:	4604      	mov	r4, r0
 800c532:	2288      	movs	r2, #136	@ 0x88
 800c534:	f00b f8e9 	bl	801770a <memcpy>
 800c538:	4620      	mov	r0, r4
 800c53a:	bd10      	pop	{r4, pc}
 800c53c:	080187d0 	.word	0x080187d0

0800c540 <rclc_executor_init>:
 800c540:	2800      	cmp	r0, #0
 800c542:	d05f      	beq.n	800c604 <rclc_executor_init+0xc4>
 800c544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c548:	460c      	mov	r4, r1
 800c54a:	b0b0      	sub	sp, #192	@ 0xc0
 800c54c:	2900      	cmp	r1, #0
 800c54e:	d051      	beq.n	800c5f4 <rclc_executor_init+0xb4>
 800c550:	4605      	mov	r5, r0
 800c552:	4618      	mov	r0, r3
 800c554:	4616      	mov	r6, r2
 800c556:	461f      	mov	r7, r3
 800c558:	f000 fbd0 	bl	800ccfc <rcutils_allocator_is_valid>
 800c55c:	2800      	cmp	r0, #0
 800c55e:	d049      	beq.n	800c5f4 <rclc_executor_init+0xb4>
 800c560:	2e00      	cmp	r6, #0
 800c562:	d047      	beq.n	800c5f4 <rclc_executor_init+0xb4>
 800c564:	492c      	ldr	r1, [pc, #176]	@ (800c618 <rclc_executor_init+0xd8>)
 800c566:	2288      	movs	r2, #136	@ 0x88
 800c568:	a80e      	add	r0, sp, #56	@ 0x38
 800c56a:	f00b f8ce 	bl	801770a <memcpy>
 800c56e:	a90e      	add	r1, sp, #56	@ 0x38
 800c570:	2288      	movs	r2, #136	@ 0x88
 800c572:	4628      	mov	r0, r5
 800c574:	f00b f8c9 	bl	801770a <memcpy>
 800c578:	602c      	str	r4, [r5, #0]
 800c57a:	4668      	mov	r0, sp
 800c57c:	60ae      	str	r6, [r5, #8]
 800c57e:	466c      	mov	r4, sp
 800c580:	f006 fbca 	bl	8012d18 <rcl_get_zero_initialized_wait_set>
 800c584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c586:	f105 0c14 	add.w	ip, r5, #20
 800c58a:	f8d7 8000 	ldr.w	r8, [r7]
 800c58e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c594:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c598:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c59a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c59e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800c610 <rclc_executor_init+0xd0>
 800c5a2:	6823      	ldr	r3, [r4, #0]
 800c5a4:	f8cc 3000 	str.w	r3, [ip]
 800c5a8:	6939      	ldr	r1, [r7, #16]
 800c5aa:	612f      	str	r7, [r5, #16]
 800c5ac:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800c5b0:	01b0      	lsls	r0, r6, #6
 800c5b2:	47c0      	blx	r8
 800c5b4:	6068      	str	r0, [r5, #4]
 800c5b6:	b338      	cbz	r0, 800c608 <rclc_executor_init+0xc8>
 800c5b8:	2400      	movs	r4, #0
 800c5ba:	e000      	b.n	800c5be <rclc_executor_init+0x7e>
 800c5bc:	6868      	ldr	r0, [r5, #4]
 800c5be:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800c5c2:	4631      	mov	r1, r6
 800c5c4:	3401      	adds	r4, #1
 800c5c6:	f000 fa6b 	bl	800caa0 <rclc_executor_handle_init>
 800c5ca:	42a6      	cmp	r6, r4
 800c5cc:	d1f6      	bne.n	800c5bc <rclc_executor_init+0x7c>
 800c5ce:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800c5d2:	f000 fa59 	bl	800ca88 <rclc_executor_handle_counters_zero_init>
 800c5d6:	4a11      	ldr	r2, [pc, #68]	@ (800c61c <rclc_executor_init+0xdc>)
 800c5d8:	686b      	ldr	r3, [r5, #4]
 800c5da:	2000      	movs	r0, #0
 800c5dc:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800c5e0:	b163      	cbz	r3, 800c5fc <rclc_executor_init+0xbc>
 800c5e2:	692b      	ldr	r3, [r5, #16]
 800c5e4:	b153      	cbz	r3, 800c5fc <rclc_executor_init+0xbc>
 800c5e6:	68ab      	ldr	r3, [r5, #8]
 800c5e8:	b143      	cbz	r3, 800c5fc <rclc_executor_init+0xbc>
 800c5ea:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800c5ee:	b030      	add	sp, #192	@ 0xc0
 800c5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5f4:	200b      	movs	r0, #11
 800c5f6:	b030      	add	sp, #192	@ 0xc0
 800c5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	b030      	add	sp, #192	@ 0xc0
 800c600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c604:	200b      	movs	r0, #11
 800c606:	4770      	bx	lr
 800c608:	200a      	movs	r0, #10
 800c60a:	e7f4      	b.n	800c5f6 <rclc_executor_init+0xb6>
 800c60c:	f3af 8000 	nop.w
 800c610:	3b9aca00 	.word	0x3b9aca00
 800c614:	00000000 	.word	0x00000000
 800c618:	080187d0 	.word	0x080187d0
 800c61c:	0800c4a1 	.word	0x0800c4a1

0800c620 <rclc_executor_add_timer>:
 800c620:	b300      	cbz	r0, 800c664 <rclc_executor_add_timer+0x44>
 800c622:	b1f9      	cbz	r1, 800c664 <rclc_executor_add_timer+0x44>
 800c624:	b538      	push	{r3, r4, r5, lr}
 800c626:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800c62a:	4293      	cmp	r3, r2
 800c62c:	4604      	mov	r4, r0
 800c62e:	d301      	bcc.n	800c634 <rclc_executor_add_timer+0x14>
 800c630:	2001      	movs	r0, #1
 800c632:	bd38      	pop	{r3, r4, r5, pc}
 800c634:	6840      	ldr	r0, [r0, #4]
 800c636:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800c63a:	019d      	lsls	r5, r3, #6
 800c63c:	6051      	str	r1, [r2, #4]
 800c63e:	2102      	movs	r1, #2
 800c640:	5341      	strh	r1, [r0, r5]
 800c642:	3301      	adds	r3, #1
 800c644:	2000      	movs	r0, #0
 800c646:	2101      	movs	r1, #1
 800c648:	f104 0514 	add.w	r5, r4, #20
 800c64c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800c64e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800c650:	4628      	mov	r0, r5
 800c652:	60e3      	str	r3, [r4, #12]
 800c654:	f006 fb74 	bl	8012d40 <rcl_wait_set_is_valid>
 800c658:	b930      	cbnz	r0, 800c668 <rclc_executor_add_timer+0x48>
 800c65a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800c65c:	3301      	adds	r3, #1
 800c65e:	2000      	movs	r0, #0
 800c660:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800c662:	bd38      	pop	{r3, r4, r5, pc}
 800c664:	200b      	movs	r0, #11
 800c666:	4770      	bx	lr
 800c668:	4628      	mov	r0, r5
 800c66a:	f006 fb6f 	bl	8012d4c <rcl_wait_set_fini>
 800c66e:	2800      	cmp	r0, #0
 800c670:	d0f3      	beq.n	800c65a <rclc_executor_add_timer+0x3a>
 800c672:	bd38      	pop	{r3, r4, r5, pc}

0800c674 <rclc_executor_prepare>:
 800c674:	2800      	cmp	r0, #0
 800c676:	d044      	beq.n	800c702 <rclc_executor_prepare+0x8e>
 800c678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c67a:	f100 0514 	add.w	r5, r0, #20
 800c67e:	b09b      	sub	sp, #108	@ 0x6c
 800c680:	4604      	mov	r4, r0
 800c682:	4628      	mov	r0, r5
 800c684:	f006 fb5c 	bl	8012d40 <rcl_wait_set_is_valid>
 800c688:	b110      	cbz	r0, 800c690 <rclc_executor_prepare+0x1c>
 800c68a:	2000      	movs	r0, #0
 800c68c:	b01b      	add	sp, #108	@ 0x6c
 800c68e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c690:	4628      	mov	r0, r5
 800c692:	f006 fb5b 	bl	8012d4c <rcl_wait_set_fini>
 800c696:	2800      	cmp	r0, #0
 800c698:	d130      	bne.n	800c6fc <rclc_executor_prepare+0x88>
 800c69a:	a80c      	add	r0, sp, #48	@ 0x30
 800c69c:	f006 fb3c 	bl	8012d18 <rcl_get_zero_initialized_wait_set>
 800c6a0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800c6a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c6a8:	46ae      	mov	lr, r5
 800c6aa:	6927      	ldr	r7, [r4, #16]
 800c6ac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c6b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c6b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c6b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c6bc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c6c0:	f8dc 3000 	ldr.w	r3, [ip]
 800c6c4:	f8ce 3000 	str.w	r3, [lr]
 800c6c8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c6ca:	ae04      	add	r6, sp, #16
 800c6cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	6822      	ldr	r2, [r4, #0]
 800c6d2:	6033      	str	r3, [r6, #0]
 800c6d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c6d6:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800c6d8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800c6dc:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800c6e0:	e9cd 2100 	strd	r2, r1, [sp]
 800c6e4:	4628      	mov	r0, r5
 800c6e6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800c6e8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c6ea:	f006 fe2d 	bl	8013348 <rcl_wait_set_init>
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	d0cc      	beq.n	800c68c <rclc_executor_prepare+0x18>
 800c6f2:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c6f4:	f000 fb28 	bl	800cd48 <rcutils_reset_error>
 800c6f8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c6fa:	e7c7      	b.n	800c68c <rclc_executor_prepare+0x18>
 800c6fc:	f000 fb24 	bl	800cd48 <rcutils_reset_error>
 800c700:	e7cb      	b.n	800c69a <rclc_executor_prepare+0x26>
 800c702:	200b      	movs	r0, #11
 800c704:	4770      	bx	lr
 800c706:	bf00      	nop

0800c708 <rclc_executor_spin_some.part.0>:
 800c708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c70c:	f100 0614 	add.w	r6, r0, #20
 800c710:	b083      	sub	sp, #12
 800c712:	4691      	mov	r9, r2
 800c714:	4698      	mov	r8, r3
 800c716:	4605      	mov	r5, r0
 800c718:	f7ff ffac 	bl	800c674 <rclc_executor_prepare>
 800c71c:	4630      	mov	r0, r6
 800c71e:	f006 fbe1 	bl	8012ee4 <rcl_wait_set_clear>
 800c722:	4607      	mov	r7, r0
 800c724:	2800      	cmp	r0, #0
 800c726:	f040 80ed 	bne.w	800c904 <rclc_executor_spin_some.part.0+0x1fc>
 800c72a:	68ab      	ldr	r3, [r5, #8]
 800c72c:	4604      	mov	r4, r0
 800c72e:	b303      	cbz	r3, 800c772 <rclc_executor_spin_some.part.0+0x6a>
 800c730:	6869      	ldr	r1, [r5, #4]
 800c732:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800c736:	01a2      	lsls	r2, r4, #6
 800c738:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800c73c:	b1cb      	cbz	r3, 800c772 <rclc_executor_spin_some.part.0+0x6a>
 800c73e:	5c8b      	ldrb	r3, [r1, r2]
 800c740:	2b0a      	cmp	r3, #10
 800c742:	f200 80d8 	bhi.w	800c8f6 <rclc_executor_spin_some.part.0+0x1ee>
 800c746:	e8df f003 	tbb	[pc, r3]
 800c74a:	9c9c      	.short	0x9c9c
 800c74c:	068c8ca7 	.word	0x068c8ca7
 800c750:	bdc90606 	.word	0xbdc90606
 800c754:	b2          	.byte	0xb2
 800c755:	00          	.byte	0x00
 800c756:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c75a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c75e:	4630      	mov	r0, r6
 800c760:	f006 ff08 	bl	8013574 <rcl_wait_set_add_service>
 800c764:	2800      	cmp	r0, #0
 800c766:	f040 8086 	bne.w	800c876 <rclc_executor_spin_some.part.0+0x16e>
 800c76a:	68ab      	ldr	r3, [r5, #8]
 800c76c:	3401      	adds	r4, #1
 800c76e:	429c      	cmp	r4, r3
 800c770:	d3de      	bcc.n	800c730 <rclc_executor_spin_some.part.0+0x28>
 800c772:	4643      	mov	r3, r8
 800c774:	464a      	mov	r2, r9
 800c776:	4630      	mov	r0, r6
 800c778:	f006 ff2a 	bl	80135d0 <rcl_wait>
 800c77c:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800c780:	2b00      	cmp	r3, #0
 800c782:	f000 80c7 	beq.w	800c914 <rclc_executor_spin_some.part.0+0x20c>
 800c786:	2b01      	cmp	r3, #1
 800c788:	f040 80b5 	bne.w	800c8f6 <rclc_executor_spin_some.part.0+0x1ee>
 800c78c:	68ab      	ldr	r3, [r5, #8]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	f000 8159 	beq.w	800ca46 <rclc_executor_spin_some.part.0+0x33e>
 800c794:	2400      	movs	r4, #0
 800c796:	46a0      	mov	r8, r4
 800c798:	f240 1991 	movw	r9, #401	@ 0x191
 800c79c:	e00a      	b.n	800c7b4 <rclc_executor_spin_some.part.0+0xac>
 800c79e:	f7ff fb7d 	bl	800be9c <_rclc_check_for_new_data>
 800c7a2:	4604      	mov	r4, r0
 800c7a4:	b110      	cbz	r0, 800c7ac <rclc_executor_spin_some.part.0+0xa4>
 800c7a6:	4548      	cmp	r0, r9
 800c7a8:	f040 80b2 	bne.w	800c910 <rclc_executor_spin_some.part.0+0x208>
 800c7ac:	68ab      	ldr	r3, [r5, #8]
 800c7ae:	4598      	cmp	r8, r3
 800c7b0:	f080 8126 	bcs.w	800ca00 <rclc_executor_spin_some.part.0+0x2f8>
 800c7b4:	686a      	ldr	r2, [r5, #4]
 800c7b6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800c7ba:	4631      	mov	r1, r6
 800c7bc:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800c7c0:	f108 0801 	add.w	r8, r8, #1
 800c7c4:	f1bc 0f00 	cmp.w	ip, #0
 800c7c8:	d1e9      	bne.n	800c79e <rclc_executor_spin_some.part.0+0x96>
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	4610      	mov	r0, r2
 800c7ce:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800c7d2:	4798      	blx	r3
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	f000 809b 	beq.w	800c910 <rclc_executor_spin_some.part.0+0x208>
 800c7da:	68ab      	ldr	r3, [r5, #8]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	f000 8097 	beq.w	800c910 <rclc_executor_spin_some.part.0+0x208>
 800c7e2:	f04f 0800 	mov.w	r8, #0
 800c7e6:	f240 1991 	movw	r9, #401	@ 0x191
 800c7ea:	e009      	b.n	800c800 <rclc_executor_spin_some.part.0+0xf8>
 800c7ec:	f7ff fba4 	bl	800bf38 <_rclc_take_new_data>
 800c7f0:	4604      	mov	r4, r0
 800c7f2:	b110      	cbz	r0, 800c7fa <rclc_executor_spin_some.part.0+0xf2>
 800c7f4:	4548      	cmp	r0, r9
 800c7f6:	f040 808b 	bne.w	800c910 <rclc_executor_spin_some.part.0+0x208>
 800c7fa:	68ab      	ldr	r3, [r5, #8]
 800c7fc:	4598      	cmp	r8, r3
 800c7fe:	d209      	bcs.n	800c814 <rclc_executor_spin_some.part.0+0x10c>
 800c800:	6868      	ldr	r0, [r5, #4]
 800c802:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800c806:	4631      	mov	r1, r6
 800c808:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800c80c:	f108 0801 	add.w	r8, r8, #1
 800c810:	2a00      	cmp	r2, #0
 800c812:	d1eb      	bne.n	800c7ec <rclc_executor_spin_some.part.0+0xe4>
 800c814:	2600      	movs	r6, #0
 800c816:	b97b      	cbnz	r3, 800c838 <rclc_executor_spin_some.part.0+0x130>
 800c818:	e07a      	b.n	800c910 <rclc_executor_spin_some.part.0+0x208>
 800c81a:	f812 200c 	ldrb.w	r2, [r2, ip]
 800c81e:	2a08      	cmp	r2, #8
 800c820:	f000 80fd 	beq.w	800ca1e <rclc_executor_spin_some.part.0+0x316>
 800c824:	2a09      	cmp	r2, #9
 800c826:	f000 80ef 	beq.w	800ca08 <rclc_executor_spin_some.part.0+0x300>
 800c82a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800c82e:	b98a      	cbnz	r2, 800c854 <rclc_executor_spin_some.part.0+0x14c>
 800c830:	3601      	adds	r6, #1
 800c832:	429e      	cmp	r6, r3
 800c834:	d262      	bcs.n	800c8fc <rclc_executor_spin_some.part.0+0x1f4>
 800c836:	2400      	movs	r4, #0
 800c838:	686a      	ldr	r2, [r5, #4]
 800c83a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800c83e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800c842:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800c846:	2900      	cmp	r1, #0
 800c848:	d062      	beq.n	800c910 <rclc_executor_spin_some.part.0+0x208>
 800c84a:	7841      	ldrb	r1, [r0, #1]
 800c84c:	2900      	cmp	r1, #0
 800c84e:	d0e4      	beq.n	800c81a <rclc_executor_spin_some.part.0+0x112>
 800c850:	2901      	cmp	r1, #1
 800c852:	d1ed      	bne.n	800c830 <rclc_executor_spin_some.part.0+0x128>
 800c854:	f7ff fce4 	bl	800c220 <_rclc_execute.part.0>
 800c858:	2800      	cmp	r0, #0
 800c85a:	f040 80b6 	bne.w	800c9ca <rclc_executor_spin_some.part.0+0x2c2>
 800c85e:	68ab      	ldr	r3, [r5, #8]
 800c860:	e7e6      	b.n	800c830 <rclc_executor_spin_some.part.0+0x128>
 800c862:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c866:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c86a:	4630      	mov	r0, r6
 800c86c:	f006 fe56 	bl	801351c <rcl_wait_set_add_client>
 800c870:	2800      	cmp	r0, #0
 800c872:	f43f af7a 	beq.w	800c76a <rclc_executor_spin_some.part.0+0x62>
 800c876:	9001      	str	r0, [sp, #4]
 800c878:	f000 fa66 	bl	800cd48 <rcutils_reset_error>
 800c87c:	9801      	ldr	r0, [sp, #4]
 800c87e:	4607      	mov	r7, r0
 800c880:	e03c      	b.n	800c8fc <rclc_executor_spin_some.part.0+0x1f4>
 800c882:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c886:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c88a:	4630      	mov	r0, r6
 800c88c:	f006 fafe 	bl	8012e8c <rcl_wait_set_add_subscription>
 800c890:	2800      	cmp	r0, #0
 800c892:	f43f af6a 	beq.w	800c76a <rclc_executor_spin_some.part.0+0x62>
 800c896:	e7ee      	b.n	800c876 <rclc_executor_spin_some.part.0+0x16e>
 800c898:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c89c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	f006 fe0b 	bl	80134bc <rcl_wait_set_add_timer>
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	f43f af5f 	beq.w	800c76a <rclc_executor_spin_some.part.0+0x62>
 800c8ac:	e7e3      	b.n	800c876 <rclc_executor_spin_some.part.0+0x16e>
 800c8ae:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c8b2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c8b6:	4630      	mov	r0, r6
 800c8b8:	f006 fdd4 	bl	8013464 <rcl_wait_set_add_guard_condition>
 800c8bc:	2800      	cmp	r0, #0
 800c8be:	f43f af54 	beq.w	800c76a <rclc_executor_spin_some.part.0+0x62>
 800c8c2:	e7d8      	b.n	800c876 <rclc_executor_spin_some.part.0+0x16e>
 800c8c4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c8c8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c8cc:	3110      	adds	r1, #16
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	f007 fb56 	bl	8013f80 <rcl_action_wait_set_add_action_server>
 800c8d4:	2800      	cmp	r0, #0
 800c8d6:	f43f af48 	beq.w	800c76a <rclc_executor_spin_some.part.0+0x62>
 800c8da:	e7cc      	b.n	800c876 <rclc_executor_spin_some.part.0+0x16e>
 800c8dc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c8e0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c8e4:	3110      	adds	r1, #16
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	4630      	mov	r0, r6
 800c8ea:	f007 f921 	bl	8013b30 <rcl_action_wait_set_add_action_client>
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	f43f af3b 	beq.w	800c76a <rclc_executor_spin_some.part.0+0x62>
 800c8f4:	e7bf      	b.n	800c876 <rclc_executor_spin_some.part.0+0x16e>
 800c8f6:	f000 fa27 	bl	800cd48 <rcutils_reset_error>
 800c8fa:	2701      	movs	r7, #1
 800c8fc:	4638      	mov	r0, r7
 800c8fe:	b003      	add	sp, #12
 800c900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c904:	f000 fa20 	bl	800cd48 <rcutils_reset_error>
 800c908:	4638      	mov	r0, r7
 800c90a:	b003      	add	sp, #12
 800c90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c910:	4627      	mov	r7, r4
 800c912:	e7f3      	b.n	800c8fc <rclc_executor_spin_some.part.0+0x1f4>
 800c914:	68ab      	ldr	r3, [r5, #8]
 800c916:	2b00      	cmp	r3, #0
 800c918:	f000 8092 	beq.w	800ca40 <rclc_executor_spin_some.part.0+0x338>
 800c91c:	2400      	movs	r4, #0
 800c91e:	46a0      	mov	r8, r4
 800c920:	f240 1991 	movw	r9, #401	@ 0x191
 800c924:	e008      	b.n	800c938 <rclc_executor_spin_some.part.0+0x230>
 800c926:	f7ff fab9 	bl	800be9c <_rclc_check_for_new_data>
 800c92a:	4604      	mov	r4, r0
 800c92c:	b108      	cbz	r0, 800c932 <rclc_executor_spin_some.part.0+0x22a>
 800c92e:	4548      	cmp	r0, r9
 800c930:	d1ee      	bne.n	800c910 <rclc_executor_spin_some.part.0+0x208>
 800c932:	68ab      	ldr	r3, [r5, #8]
 800c934:	4598      	cmp	r8, r3
 800c936:	d265      	bcs.n	800ca04 <rclc_executor_spin_some.part.0+0x2fc>
 800c938:	686a      	ldr	r2, [r5, #4]
 800c93a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800c93e:	4631      	mov	r1, r6
 800c940:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800c944:	f108 0801 	add.w	r8, r8, #1
 800c948:	f1bc 0f00 	cmp.w	ip, #0
 800c94c:	d1eb      	bne.n	800c926 <rclc_executor_spin_some.part.0+0x21e>
 800c94e:	4619      	mov	r1, r3
 800c950:	4610      	mov	r0, r2
 800c952:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800c956:	4798      	blx	r3
 800c958:	2800      	cmp	r0, #0
 800c95a:	d0d9      	beq.n	800c910 <rclc_executor_spin_some.part.0+0x208>
 800c95c:	68ab      	ldr	r3, [r5, #8]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d0d6      	beq.n	800c910 <rclc_executor_spin_some.part.0+0x208>
 800c962:	f04f 0800 	mov.w	r8, #0
 800c966:	f240 1991 	movw	r9, #401	@ 0x191
 800c96a:	f240 2a59 	movw	sl, #601	@ 0x259
 800c96e:	e00e      	b.n	800c98e <rclc_executor_spin_some.part.0+0x286>
 800c970:	f813 300b 	ldrb.w	r3, [r3, fp]
 800c974:	2b08      	cmp	r3, #8
 800c976:	d033      	beq.n	800c9e0 <rclc_executor_spin_some.part.0+0x2d8>
 800c978:	2b09      	cmp	r3, #9
 800c97a:	d028      	beq.n	800c9ce <rclc_executor_spin_some.part.0+0x2c6>
 800c97c:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800c980:	b9fb      	cbnz	r3, 800c9c2 <rclc_executor_spin_some.part.0+0x2ba>
 800c982:	68ab      	ldr	r3, [r5, #8]
 800c984:	f108 0801 	add.w	r8, r8, #1
 800c988:	4598      	cmp	r8, r3
 800c98a:	d2b7      	bcs.n	800c8fc <rclc_executor_spin_some.part.0+0x1f4>
 800c98c:	2400      	movs	r4, #0
 800c98e:	6868      	ldr	r0, [r5, #4]
 800c990:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800c994:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800c998:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d0b7      	beq.n	800c910 <rclc_executor_spin_some.part.0+0x208>
 800c9a0:	4631      	mov	r1, r6
 800c9a2:	f7ff fac9 	bl	800bf38 <_rclc_take_new_data>
 800c9a6:	b118      	cbz	r0, 800c9b0 <rclc_executor_spin_some.part.0+0x2a8>
 800c9a8:	4548      	cmp	r0, r9
 800c9aa:	d001      	beq.n	800c9b0 <rclc_executor_spin_some.part.0+0x2a8>
 800c9ac:	4550      	cmp	r0, sl
 800c9ae:	d10c      	bne.n	800c9ca <rclc_executor_spin_some.part.0+0x2c2>
 800c9b0:	686b      	ldr	r3, [r5, #4]
 800c9b2:	eb13 000b 	adds.w	r0, r3, fp
 800c9b6:	d021      	beq.n	800c9fc <rclc_executor_spin_some.part.0+0x2f4>
 800c9b8:	7842      	ldrb	r2, [r0, #1]
 800c9ba:	2a00      	cmp	r2, #0
 800c9bc:	d0d8      	beq.n	800c970 <rclc_executor_spin_some.part.0+0x268>
 800c9be:	2a01      	cmp	r2, #1
 800c9c0:	d1df      	bne.n	800c982 <rclc_executor_spin_some.part.0+0x27a>
 800c9c2:	f7ff fc2d 	bl	800c220 <_rclc_execute.part.0>
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	d0db      	beq.n	800c982 <rclc_executor_spin_some.part.0+0x27a>
 800c9ca:	4607      	mov	r7, r0
 800c9cc:	e796      	b.n	800c8fc <rclc_executor_spin_some.part.0+0x1f4>
 800c9ce:	6843      	ldr	r3, [r0, #4]
 800c9d0:	6a1a      	ldr	r2, [r3, #32]
 800c9d2:	2a00      	cmp	r2, #0
 800c9d4:	d1f5      	bne.n	800c9c2 <rclc_executor_spin_some.part.0+0x2ba>
 800c9d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d0d1      	beq.n	800c982 <rclc_executor_spin_some.part.0+0x27a>
 800c9de:	e7f0      	b.n	800c9c2 <rclc_executor_spin_some.part.0+0x2ba>
 800c9e0:	6843      	ldr	r3, [r0, #4]
 800c9e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c9e4:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800c9e8:	d1eb      	bne.n	800c9c2 <rclc_executor_spin_some.part.0+0x2ba>
 800c9ea:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c9ee:	2a00      	cmp	r2, #0
 800c9f0:	d1e7      	bne.n	800c9c2 <rclc_executor_spin_some.part.0+0x2ba>
 800c9f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d0c3      	beq.n	800c982 <rclc_executor_spin_some.part.0+0x27a>
 800c9fa:	e7e2      	b.n	800c9c2 <rclc_executor_spin_some.part.0+0x2ba>
 800c9fc:	270b      	movs	r7, #11
 800c9fe:	e77d      	b.n	800c8fc <rclc_executor_spin_some.part.0+0x1f4>
 800ca00:	686a      	ldr	r2, [r5, #4]
 800ca02:	e6e2      	b.n	800c7ca <rclc_executor_spin_some.part.0+0xc2>
 800ca04:	686a      	ldr	r2, [r5, #4]
 800ca06:	e7a2      	b.n	800c94e <rclc_executor_spin_some.part.0+0x246>
 800ca08:	6842      	ldr	r2, [r0, #4]
 800ca0a:	6a11      	ldr	r1, [r2, #32]
 800ca0c:	2900      	cmp	r1, #0
 800ca0e:	f47f af21 	bne.w	800c854 <rclc_executor_spin_some.part.0+0x14c>
 800ca12:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800ca16:	2a00      	cmp	r2, #0
 800ca18:	f43f af0a 	beq.w	800c830 <rclc_executor_spin_some.part.0+0x128>
 800ca1c:	e71a      	b.n	800c854 <rclc_executor_spin_some.part.0+0x14c>
 800ca1e:	6842      	ldr	r2, [r0, #4]
 800ca20:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800ca22:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800ca26:	f47f af15 	bne.w	800c854 <rclc_executor_spin_some.part.0+0x14c>
 800ca2a:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800ca2e:	2900      	cmp	r1, #0
 800ca30:	f47f af10 	bne.w	800c854 <rclc_executor_spin_some.part.0+0x14c>
 800ca34:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800ca38:	2a00      	cmp	r2, #0
 800ca3a:	f43f aef9 	beq.w	800c830 <rclc_executor_spin_some.part.0+0x128>
 800ca3e:	e709      	b.n	800c854 <rclc_executor_spin_some.part.0+0x14c>
 800ca40:	686a      	ldr	r2, [r5, #4]
 800ca42:	461c      	mov	r4, r3
 800ca44:	e783      	b.n	800c94e <rclc_executor_spin_some.part.0+0x246>
 800ca46:	686a      	ldr	r2, [r5, #4]
 800ca48:	461c      	mov	r4, r3
 800ca4a:	e6be      	b.n	800c7ca <rclc_executor_spin_some.part.0+0xc2>

0800ca4c <rclc_executor_spin>:
 800ca4c:	b1d0      	cbz	r0, 800ca84 <rclc_executor_spin+0x38>
 800ca4e:	b510      	push	{r4, lr}
 800ca50:	4604      	mov	r4, r0
 800ca52:	b082      	sub	sp, #8
 800ca54:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800ca58:	6820      	ldr	r0, [r4, #0]
 800ca5a:	e9cd 2300 	strd	r2, r3, [sp]
 800ca5e:	f004 ff9f 	bl	80119a0 <rcl_context_is_valid>
 800ca62:	4601      	mov	r1, r0
 800ca64:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca68:	4620      	mov	r0, r4
 800ca6a:	b131      	cbz	r1, 800ca7a <rclc_executor_spin+0x2e>
 800ca6c:	f7ff fe4c 	bl	800c708 <rclc_executor_spin_some.part.0>
 800ca70:	f030 0302 	bics.w	r3, r0, #2
 800ca74:	d0ee      	beq.n	800ca54 <rclc_executor_spin+0x8>
 800ca76:	b002      	add	sp, #8
 800ca78:	bd10      	pop	{r4, pc}
 800ca7a:	f000 f965 	bl	800cd48 <rcutils_reset_error>
 800ca7e:	2001      	movs	r0, #1
 800ca80:	b002      	add	sp, #8
 800ca82:	bd10      	pop	{r4, pc}
 800ca84:	200b      	movs	r0, #11
 800ca86:	4770      	bx	lr

0800ca88 <rclc_executor_handle_counters_zero_init>:
 800ca88:	b130      	cbz	r0, 800ca98 <rclc_executor_handle_counters_zero_init+0x10>
 800ca8a:	b508      	push	{r3, lr}
 800ca8c:	2220      	movs	r2, #32
 800ca8e:	2100      	movs	r1, #0
 800ca90:	f00a fd72 	bl	8017578 <memset>
 800ca94:	2000      	movs	r0, #0
 800ca96:	bd08      	pop	{r3, pc}
 800ca98:	200b      	movs	r0, #11
 800ca9a:	4770      	bx	lr
 800ca9c:	0000      	movs	r0, r0
	...

0800caa0 <rclc_executor_handle_init>:
 800caa0:	b168      	cbz	r0, 800cabe <rclc_executor_handle_init+0x1e>
 800caa2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800cac8 <rclc_executor_handle_init+0x28>
 800caa6:	2300      	movs	r3, #0
 800caa8:	220b      	movs	r2, #11
 800caaa:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800caae:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800cab2:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800cab6:	8002      	strh	r2, [r0, #0]
 800cab8:	8703      	strh	r3, [r0, #56]	@ 0x38
 800caba:	4618      	mov	r0, r3
 800cabc:	4770      	bx	lr
 800cabe:	200b      	movs	r0, #11
 800cac0:	4770      	bx	lr
 800cac2:	bf00      	nop
 800cac4:	f3af 8000 	nop.w
	...

0800cad0 <rclc_support_init_with_options>:
 800cad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cad4:	b083      	sub	sp, #12
 800cad6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cad8:	b340      	cbz	r0, 800cb2c <rclc_support_init_with_options+0x5c>
 800cada:	461d      	mov	r5, r3
 800cadc:	b333      	cbz	r3, 800cb2c <rclc_support_init_with_options+0x5c>
 800cade:	b32e      	cbz	r6, 800cb2c <rclc_support_init_with_options+0x5c>
 800cae0:	46e9      	mov	r9, sp
 800cae2:	4604      	mov	r4, r0
 800cae4:	4648      	mov	r0, r9
 800cae6:	460f      	mov	r7, r1
 800cae8:	4690      	mov	r8, r2
 800caea:	f004 ff4f 	bl	801198c <rcl_get_zero_initialized_context>
 800caee:	e899 0003 	ldmia.w	r9, {r0, r1}
 800caf2:	462a      	mov	r2, r5
 800caf4:	e884 0003 	stmia.w	r4, {r0, r1}
 800caf8:	4623      	mov	r3, r4
 800cafa:	4641      	mov	r1, r8
 800cafc:	4638      	mov	r0, r7
 800cafe:	f004 ffb5 	bl	8011a6c <rcl_init>
 800cb02:	4605      	mov	r5, r0
 800cb04:	b960      	cbnz	r0, 800cb20 <rclc_support_init_with_options+0x50>
 800cb06:	60a6      	str	r6, [r4, #8]
 800cb08:	4632      	mov	r2, r6
 800cb0a:	f104 010c 	add.w	r1, r4, #12
 800cb0e:	2003      	movs	r0, #3
 800cb10:	f005 fd02 	bl	8012518 <rcl_clock_init>
 800cb14:	4605      	mov	r5, r0
 800cb16:	b918      	cbnz	r0, 800cb20 <rclc_support_init_with_options+0x50>
 800cb18:	4628      	mov	r0, r5
 800cb1a:	b003      	add	sp, #12
 800cb1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb20:	f000 f912 	bl	800cd48 <rcutils_reset_error>
 800cb24:	4628      	mov	r0, r5
 800cb26:	b003      	add	sp, #12
 800cb28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb2c:	250b      	movs	r5, #11
 800cb2e:	4628      	mov	r0, r5
 800cb30:	b003      	add	sp, #12
 800cb32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb36:	bf00      	nop

0800cb38 <rclc_node_init_default>:
 800cb38:	b3b8      	cbz	r0, 800cbaa <rclc_node_init_default+0x72>
 800cb3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb3e:	460d      	mov	r5, r1
 800cb40:	b0a1      	sub	sp, #132	@ 0x84
 800cb42:	b329      	cbz	r1, 800cb90 <rclc_node_init_default+0x58>
 800cb44:	4616      	mov	r6, r2
 800cb46:	b31a      	cbz	r2, 800cb90 <rclc_node_init_default+0x58>
 800cb48:	461f      	mov	r7, r3
 800cb4a:	b30b      	cbz	r3, 800cb90 <rclc_node_init_default+0x58>
 800cb4c:	f10d 0810 	add.w	r8, sp, #16
 800cb50:	4604      	mov	r4, r0
 800cb52:	4640      	mov	r0, r8
 800cb54:	f005 f8b0 	bl	8011cb8 <rcl_get_zero_initialized_node>
 800cb58:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cb5c:	f10d 0918 	add.w	r9, sp, #24
 800cb60:	e884 0003 	stmia.w	r4, {r0, r1}
 800cb64:	4648      	mov	r0, r9
 800cb66:	f005 fa1f 	bl	8011fa8 <rcl_node_get_default_options>
 800cb6a:	4640      	mov	r0, r8
 800cb6c:	f005 f8a4 	bl	8011cb8 <rcl_get_zero_initialized_node>
 800cb70:	f8cd 9000 	str.w	r9, [sp]
 800cb74:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cb78:	463b      	mov	r3, r7
 800cb7a:	e884 0003 	stmia.w	r4, {r0, r1}
 800cb7e:	4632      	mov	r2, r6
 800cb80:	4629      	mov	r1, r5
 800cb82:	4620      	mov	r0, r4
 800cb84:	f005 f8a2 	bl	8011ccc <rcl_node_init>
 800cb88:	b930      	cbnz	r0, 800cb98 <rclc_node_init_default+0x60>
 800cb8a:	b021      	add	sp, #132	@ 0x84
 800cb8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb90:	200b      	movs	r0, #11
 800cb92:	b021      	add	sp, #132	@ 0x84
 800cb94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb98:	9003      	str	r0, [sp, #12]
 800cb9a:	f000 f8d5 	bl	800cd48 <rcutils_reset_error>
 800cb9e:	f000 f8d3 	bl	800cd48 <rcutils_reset_error>
 800cba2:	9803      	ldr	r0, [sp, #12]
 800cba4:	b021      	add	sp, #132	@ 0x84
 800cba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbaa:	200b      	movs	r0, #11
 800cbac:	4770      	bx	lr
 800cbae:	bf00      	nop

0800cbb0 <rclc_publisher_init_default>:
 800cbb0:	b368      	cbz	r0, 800cc0e <rclc_publisher_init_default+0x5e>
 800cbb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbb6:	460d      	mov	r5, r1
 800cbb8:	b0a0      	sub	sp, #128	@ 0x80
 800cbba:	b321      	cbz	r1, 800cc06 <rclc_publisher_init_default+0x56>
 800cbbc:	4616      	mov	r6, r2
 800cbbe:	b312      	cbz	r2, 800cc06 <rclc_publisher_init_default+0x56>
 800cbc0:	461f      	mov	r7, r3
 800cbc2:	b303      	cbz	r3, 800cc06 <rclc_publisher_init_default+0x56>
 800cbc4:	4604      	mov	r4, r0
 800cbc6:	f7ff f859 	bl	800bc7c <rcl_get_zero_initialized_publisher>
 800cbca:	f10d 0810 	add.w	r8, sp, #16
 800cbce:	6020      	str	r0, [r4, #0]
 800cbd0:	4640      	mov	r0, r8
 800cbd2:	f7ff f8ef 	bl	800bdb4 <rcl_publisher_get_default_options>
 800cbd6:	490f      	ldr	r1, [pc, #60]	@ (800cc14 <rclc_publisher_init_default+0x64>)
 800cbd8:	2250      	movs	r2, #80	@ 0x50
 800cbda:	4640      	mov	r0, r8
 800cbdc:	f00a fd95 	bl	801770a <memcpy>
 800cbe0:	f8cd 8000 	str.w	r8, [sp]
 800cbe4:	463b      	mov	r3, r7
 800cbe6:	4632      	mov	r2, r6
 800cbe8:	4629      	mov	r1, r5
 800cbea:	4620      	mov	r0, r4
 800cbec:	f7ff f84c 	bl	800bc88 <rcl_publisher_init>
 800cbf0:	b910      	cbnz	r0, 800cbf8 <rclc_publisher_init_default+0x48>
 800cbf2:	b020      	add	sp, #128	@ 0x80
 800cbf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbf8:	9003      	str	r0, [sp, #12]
 800cbfa:	f000 f8a5 	bl	800cd48 <rcutils_reset_error>
 800cbfe:	9803      	ldr	r0, [sp, #12]
 800cc00:	b020      	add	sp, #128	@ 0x80
 800cc02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc06:	200b      	movs	r0, #11
 800cc08:	b020      	add	sp, #128	@ 0x80
 800cc0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc0e:	200b      	movs	r0, #11
 800cc10:	4770      	bx	lr
 800cc12:	bf00      	nop
 800cc14:	08018858 	.word	0x08018858

0800cc18 <rclc_timer_init_default>:
 800cc18:	b360      	cbz	r0, 800cc74 <rclc_timer_init_default+0x5c>
 800cc1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc1e:	460e      	mov	r6, r1
 800cc20:	b08a      	sub	sp, #40	@ 0x28
 800cc22:	b319      	cbz	r1, 800cc6c <rclc_timer_init_default+0x54>
 800cc24:	4690      	mov	r8, r2
 800cc26:	461f      	mov	r7, r3
 800cc28:	4605      	mov	r5, r0
 800cc2a:	f005 fe53 	bl	80128d4 <rcl_get_zero_initialized_timer>
 800cc2e:	68b4      	ldr	r4, [r6, #8]
 800cc30:	6028      	str	r0, [r5, #0]
 800cc32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc34:	f10d 0c0c 	add.w	ip, sp, #12
 800cc38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cc3c:	6823      	ldr	r3, [r4, #0]
 800cc3e:	f8cc 3000 	str.w	r3, [ip]
 800cc42:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cc44:	9302      	str	r3, [sp, #8]
 800cc46:	e9cd 8700 	strd	r8, r7, [sp]
 800cc4a:	4628      	mov	r0, r5
 800cc4c:	4632      	mov	r2, r6
 800cc4e:	f106 010c 	add.w	r1, r6, #12
 800cc52:	f005 fe45 	bl	80128e0 <rcl_timer_init>
 800cc56:	b910      	cbnz	r0, 800cc5e <rclc_timer_init_default+0x46>
 800cc58:	b00a      	add	sp, #40	@ 0x28
 800cc5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc5e:	9009      	str	r0, [sp, #36]	@ 0x24
 800cc60:	f000 f872 	bl	800cd48 <rcutils_reset_error>
 800cc64:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc66:	b00a      	add	sp, #40	@ 0x28
 800cc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc6c:	200b      	movs	r0, #11
 800cc6e:	b00a      	add	sp, #40	@ 0x28
 800cc70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc74:	200b      	movs	r0, #11
 800cc76:	4770      	bx	lr

0800cc78 <__default_zero_allocate>:
 800cc78:	f00a b894 	b.w	8016da4 <calloc>

0800cc7c <__default_reallocate>:
 800cc7c:	f00a ba20 	b.w	80170c0 <realloc>

0800cc80 <__default_deallocate>:
 800cc80:	f00a b8fc 	b.w	8016e7c <free>

0800cc84 <__default_allocate>:
 800cc84:	f00a b8f2 	b.w	8016e6c <malloc>

0800cc88 <rcutils_get_zero_initialized_allocator>:
 800cc88:	b510      	push	{r4, lr}
 800cc8a:	4c05      	ldr	r4, [pc, #20]	@ (800cca0 <rcutils_get_zero_initialized_allocator+0x18>)
 800cc8c:	4686      	mov	lr, r0
 800cc8e:	4684      	mov	ip, r0
 800cc90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cc96:	6823      	ldr	r3, [r4, #0]
 800cc98:	f8cc 3000 	str.w	r3, [ip]
 800cc9c:	4670      	mov	r0, lr
 800cc9e:	bd10      	pop	{r4, pc}
 800cca0:	080188a8 	.word	0x080188a8

0800cca4 <rcutils_set_default_allocator>:
 800cca4:	b1a8      	cbz	r0, 800ccd2 <rcutils_set_default_allocator+0x2e>
 800cca6:	6802      	ldr	r2, [r0, #0]
 800cca8:	b1a2      	cbz	r2, 800ccd4 <rcutils_set_default_allocator+0x30>
 800ccaa:	6841      	ldr	r1, [r0, #4]
 800ccac:	b1a1      	cbz	r1, 800ccd8 <rcutils_set_default_allocator+0x34>
 800ccae:	b410      	push	{r4}
 800ccb0:	68c4      	ldr	r4, [r0, #12]
 800ccb2:	b164      	cbz	r4, 800ccce <rcutils_set_default_allocator+0x2a>
 800ccb4:	6880      	ldr	r0, [r0, #8]
 800ccb6:	b138      	cbz	r0, 800ccc8 <rcutils_set_default_allocator+0x24>
 800ccb8:	4b08      	ldr	r3, [pc, #32]	@ (800ccdc <rcutils_set_default_allocator+0x38>)
 800ccba:	601a      	str	r2, [r3, #0]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800ccc2:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800ccc6:	2001      	movs	r0, #1
 800ccc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cccc:	4770      	bx	lr
 800ccce:	4620      	mov	r0, r4
 800ccd0:	e7fa      	b.n	800ccc8 <rcutils_set_default_allocator+0x24>
 800ccd2:	4770      	bx	lr
 800ccd4:	4610      	mov	r0, r2
 800ccd6:	4770      	bx	lr
 800ccd8:	4608      	mov	r0, r1
 800ccda:	4770      	bx	lr
 800ccdc:	200001bc 	.word	0x200001bc

0800cce0 <rcutils_get_default_allocator>:
 800cce0:	b510      	push	{r4, lr}
 800cce2:	4c05      	ldr	r4, [pc, #20]	@ (800ccf8 <rcutils_get_default_allocator+0x18>)
 800cce4:	4686      	mov	lr, r0
 800cce6:	4684      	mov	ip, r0
 800cce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ccea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ccee:	6823      	ldr	r3, [r4, #0]
 800ccf0:	f8cc 3000 	str.w	r3, [ip]
 800ccf4:	4670      	mov	r0, lr
 800ccf6:	bd10      	pop	{r4, pc}
 800ccf8:	200001bc 	.word	0x200001bc

0800ccfc <rcutils_allocator_is_valid>:
 800ccfc:	b158      	cbz	r0, 800cd16 <rcutils_allocator_is_valid+0x1a>
 800ccfe:	6803      	ldr	r3, [r0, #0]
 800cd00:	b143      	cbz	r3, 800cd14 <rcutils_allocator_is_valid+0x18>
 800cd02:	6843      	ldr	r3, [r0, #4]
 800cd04:	b133      	cbz	r3, 800cd14 <rcutils_allocator_is_valid+0x18>
 800cd06:	68c3      	ldr	r3, [r0, #12]
 800cd08:	b123      	cbz	r3, 800cd14 <rcutils_allocator_is_valid+0x18>
 800cd0a:	6880      	ldr	r0, [r0, #8]
 800cd0c:	3800      	subs	r0, #0
 800cd0e:	bf18      	it	ne
 800cd10:	2001      	movne	r0, #1
 800cd12:	4770      	bx	lr
 800cd14:	4618      	mov	r0, r3
 800cd16:	4770      	bx	lr

0800cd18 <rcutils_get_error_string>:
 800cd18:	4b06      	ldr	r3, [pc, #24]	@ (800cd34 <rcutils_get_error_string+0x1c>)
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	b13b      	cbz	r3, 800cd2e <rcutils_get_error_string+0x16>
 800cd1e:	4b06      	ldr	r3, [pc, #24]	@ (800cd38 <rcutils_get_error_string+0x20>)
 800cd20:	781a      	ldrb	r2, [r3, #0]
 800cd22:	b90a      	cbnz	r2, 800cd28 <rcutils_get_error_string+0x10>
 800cd24:	2201      	movs	r2, #1
 800cd26:	701a      	strb	r2, [r3, #0]
 800cd28:	4b04      	ldr	r3, [pc, #16]	@ (800cd3c <rcutils_get_error_string+0x24>)
 800cd2a:	7818      	ldrb	r0, [r3, #0]
 800cd2c:	4770      	bx	lr
 800cd2e:	4b04      	ldr	r3, [pc, #16]	@ (800cd40 <rcutils_get_error_string+0x28>)
 800cd30:	7818      	ldrb	r0, [r3, #0]
 800cd32:	4770      	bx	lr
 800cd34:	200064a8 	.word	0x200064a8
 800cd38:	200064c1 	.word	0x200064c1
 800cd3c:	200064c0 	.word	0x200064c0
 800cd40:	080188bc 	.word	0x080188bc
 800cd44:	00000000 	.word	0x00000000

0800cd48 <rcutils_reset_error>:
 800cd48:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800cd68 <rcutils_reset_error+0x20>
 800cd4c:	4a08      	ldr	r2, [pc, #32]	@ (800cd70 <rcutils_reset_error+0x28>)
 800cd4e:	4809      	ldr	r0, [pc, #36]	@ (800cd74 <rcutils_reset_error+0x2c>)
 800cd50:	4909      	ldr	r1, [pc, #36]	@ (800cd78 <rcutils_reset_error+0x30>)
 800cd52:	2300      	movs	r3, #0
 800cd54:	8013      	strh	r3, [r2, #0]
 800cd56:	ed82 7b02 	vstr	d7, [r2, #8]
 800cd5a:	4a08      	ldr	r2, [pc, #32]	@ (800cd7c <rcutils_reset_error+0x34>)
 800cd5c:	7003      	strb	r3, [r0, #0]
 800cd5e:	700b      	strb	r3, [r1, #0]
 800cd60:	7013      	strb	r3, [r2, #0]
 800cd62:	4770      	bx	lr
 800cd64:	f3af 8000 	nop.w
	...
 800cd70:	200064b0 	.word	0x200064b0
 800cd74:	200064c1 	.word	0x200064c1
 800cd78:	200064c0 	.word	0x200064c0
 800cd7c:	200064a8 	.word	0x200064a8

0800cd80 <rcutils_system_time_now>:
 800cd80:	b308      	cbz	r0, 800cdc6 <rcutils_system_time_now+0x46>
 800cd82:	b570      	push	{r4, r5, r6, lr}
 800cd84:	b084      	sub	sp, #16
 800cd86:	4604      	mov	r4, r0
 800cd88:	4669      	mov	r1, sp
 800cd8a:	2001      	movs	r0, #1
 800cd8c:	f7f4 fe58 	bl	8001a40 <clock_gettime>
 800cd90:	e9dd 3500 	ldrd	r3, r5, [sp]
 800cd94:	2d00      	cmp	r5, #0
 800cd96:	db13      	blt.n	800cdc0 <rcutils_system_time_now+0x40>
 800cd98:	9902      	ldr	r1, [sp, #8]
 800cd9a:	2900      	cmp	r1, #0
 800cd9c:	db0d      	blt.n	800cdba <rcutils_system_time_now+0x3a>
 800cd9e:	4e0b      	ldr	r6, [pc, #44]	@ (800cdcc <rcutils_system_time_now+0x4c>)
 800cda0:	fba3 3206 	umull	r3, r2, r3, r6
 800cda4:	185b      	adds	r3, r3, r1
 800cda6:	fb06 2205 	mla	r2, r6, r5, r2
 800cdaa:	f04f 0000 	mov.w	r0, #0
 800cdae:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800cdb2:	e9c4 3200 	strd	r3, r2, [r4]
 800cdb6:	b004      	add	sp, #16
 800cdb8:	bd70      	pop	{r4, r5, r6, pc}
 800cdba:	ea53 0205 	orrs.w	r2, r3, r5
 800cdbe:	d1ee      	bne.n	800cd9e <rcutils_system_time_now+0x1e>
 800cdc0:	2002      	movs	r0, #2
 800cdc2:	b004      	add	sp, #16
 800cdc4:	bd70      	pop	{r4, r5, r6, pc}
 800cdc6:	200b      	movs	r0, #11
 800cdc8:	4770      	bx	lr
 800cdca:	bf00      	nop
 800cdcc:	3b9aca00 	.word	0x3b9aca00

0800cdd0 <rcutils_steady_time_now>:
 800cdd0:	b308      	cbz	r0, 800ce16 <rcutils_steady_time_now+0x46>
 800cdd2:	b570      	push	{r4, r5, r6, lr}
 800cdd4:	b084      	sub	sp, #16
 800cdd6:	4604      	mov	r4, r0
 800cdd8:	4669      	mov	r1, sp
 800cdda:	2000      	movs	r0, #0
 800cddc:	f7f4 fe30 	bl	8001a40 <clock_gettime>
 800cde0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800cde4:	2d00      	cmp	r5, #0
 800cde6:	db13      	blt.n	800ce10 <rcutils_steady_time_now+0x40>
 800cde8:	9902      	ldr	r1, [sp, #8]
 800cdea:	2900      	cmp	r1, #0
 800cdec:	db0d      	blt.n	800ce0a <rcutils_steady_time_now+0x3a>
 800cdee:	4e0b      	ldr	r6, [pc, #44]	@ (800ce1c <rcutils_steady_time_now+0x4c>)
 800cdf0:	fba3 3206 	umull	r3, r2, r3, r6
 800cdf4:	185b      	adds	r3, r3, r1
 800cdf6:	fb06 2205 	mla	r2, r6, r5, r2
 800cdfa:	f04f 0000 	mov.w	r0, #0
 800cdfe:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800ce02:	e9c4 3200 	strd	r3, r2, [r4]
 800ce06:	b004      	add	sp, #16
 800ce08:	bd70      	pop	{r4, r5, r6, pc}
 800ce0a:	ea53 0205 	orrs.w	r2, r3, r5
 800ce0e:	d1ee      	bne.n	800cdee <rcutils_steady_time_now+0x1e>
 800ce10:	2002      	movs	r0, #2
 800ce12:	b004      	add	sp, #16
 800ce14:	bd70      	pop	{r4, r5, r6, pc}
 800ce16:	200b      	movs	r0, #11
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop
 800ce1c:	3b9aca00 	.word	0x3b9aca00

0800ce20 <rmw_get_zero_initialized_init_options>:
 800ce20:	b510      	push	{r4, lr}
 800ce22:	2238      	movs	r2, #56	@ 0x38
 800ce24:	4604      	mov	r4, r0
 800ce26:	2100      	movs	r1, #0
 800ce28:	f00a fba6 	bl	8017578 <memset>
 800ce2c:	f104 0010 	add.w	r0, r4, #16
 800ce30:	f000 f80a 	bl	800ce48 <rmw_get_default_security_options>
 800ce34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ce38:	60e3      	str	r3, [r4, #12]
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	bd10      	pop	{r4, pc}
 800ce3e:	bf00      	nop

0800ce40 <rmw_get_default_publisher_options>:
 800ce40:	2200      	movs	r2, #0
 800ce42:	6002      	str	r2, [r0, #0]
 800ce44:	7102      	strb	r2, [r0, #4]
 800ce46:	4770      	bx	lr

0800ce48 <rmw_get_default_security_options>:
 800ce48:	2200      	movs	r2, #0
 800ce4a:	7002      	strb	r2, [r0, #0]
 800ce4c:	6042      	str	r2, [r0, #4]
 800ce4e:	4770      	bx	lr

0800ce50 <rmw_uros_set_custom_transport>:
 800ce50:	b470      	push	{r4, r5, r6}
 800ce52:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800ce56:	b162      	cbz	r2, 800ce72 <rmw_uros_set_custom_transport+0x22>
 800ce58:	b15b      	cbz	r3, 800ce72 <rmw_uros_set_custom_transport+0x22>
 800ce5a:	b155      	cbz	r5, 800ce72 <rmw_uros_set_custom_transport+0x22>
 800ce5c:	b14e      	cbz	r6, 800ce72 <rmw_uros_set_custom_transport+0x22>
 800ce5e:	4c06      	ldr	r4, [pc, #24]	@ (800ce78 <rmw_uros_set_custom_transport+0x28>)
 800ce60:	7020      	strb	r0, [r4, #0]
 800ce62:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800ce66:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ce6a:	6166      	str	r6, [r4, #20]
 800ce6c:	2000      	movs	r0, #0
 800ce6e:	bc70      	pop	{r4, r5, r6}
 800ce70:	4770      	bx	lr
 800ce72:	200b      	movs	r0, #11
 800ce74:	bc70      	pop	{r4, r5, r6}
 800ce76:	4770      	bx	lr
 800ce78:	200064c4 	.word	0x200064c4

0800ce7c <rmw_init_options_init>:
 800ce7c:	b084      	sub	sp, #16
 800ce7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce80:	b083      	sub	sp, #12
 800ce82:	ad09      	add	r5, sp, #36	@ 0x24
 800ce84:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800ce88:	b130      	cbz	r0, 800ce98 <rmw_init_options_init+0x1c>
 800ce8a:	4604      	mov	r4, r0
 800ce8c:	4628      	mov	r0, r5
 800ce8e:	f7ff ff35 	bl	800ccfc <rcutils_allocator_is_valid>
 800ce92:	b108      	cbz	r0, 800ce98 <rmw_init_options_init+0x1c>
 800ce94:	68a6      	ldr	r6, [r4, #8]
 800ce96:	b12e      	cbz	r6, 800cea4 <rmw_init_options_init+0x28>
 800ce98:	200b      	movs	r0, #11
 800ce9a:	b003      	add	sp, #12
 800ce9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cea0:	b004      	add	sp, #16
 800cea2:	4770      	bx	lr
 800cea4:	2200      	movs	r2, #0
 800cea6:	2300      	movs	r3, #0
 800cea8:	e9c4 2300 	strd	r2, r3, [r4]
 800ceac:	4b22      	ldr	r3, [pc, #136]	@ (800cf38 <rmw_init_options_init+0xbc>)
 800ceae:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800cf48 <rmw_init_options_init+0xcc>
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	60a3      	str	r3, [r4, #8]
 800ceb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ceb8:	f104 0c20 	add.w	ip, r4, #32
 800cebc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cec0:	466f      	mov	r7, sp
 800cec2:	682b      	ldr	r3, [r5, #0]
 800cec4:	f8cc 3000 	str.w	r3, [ip]
 800cec8:	4638      	mov	r0, r7
 800ceca:	f8c4 e01c 	str.w	lr, [r4, #28]
 800cece:	60e6      	str	r6, [r4, #12]
 800ced0:	f7ff ffba 	bl	800ce48 <rmw_get_default_security_options>
 800ced4:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ced8:	f104 0310 	add.w	r3, r4, #16
 800cedc:	e883 0003 	stmia.w	r3, {r0, r1}
 800cee0:	2203      	movs	r2, #3
 800cee2:	4816      	ldr	r0, [pc, #88]	@ (800cf3c <rmw_init_options_init+0xc0>)
 800cee4:	4916      	ldr	r1, [pc, #88]	@ (800cf40 <rmw_init_options_init+0xc4>)
 800cee6:	7626      	strb	r6, [r4, #24]
 800cee8:	f000 fe9c 	bl	800dc24 <rmw_uxrce_init_init_options_impl_memory>
 800ceec:	4813      	ldr	r0, [pc, #76]	@ (800cf3c <rmw_init_options_init+0xc0>)
 800ceee:	f008 f87b 	bl	8014fe8 <get_memory>
 800cef2:	b1f0      	cbz	r0, 800cf32 <rmw_init_options_init+0xb6>
 800cef4:	4a13      	ldr	r2, [pc, #76]	@ (800cf44 <rmw_init_options_init+0xc8>)
 800cef6:	6883      	ldr	r3, [r0, #8]
 800cef8:	6851      	ldr	r1, [r2, #4]
 800cefa:	7810      	ldrb	r0, [r2, #0]
 800cefc:	6363      	str	r3, [r4, #52]	@ 0x34
 800cefe:	7418      	strb	r0, [r3, #16]
 800cf00:	6159      	str	r1, [r3, #20]
 800cf02:	68d1      	ldr	r1, [r2, #12]
 800cf04:	61d9      	str	r1, [r3, #28]
 800cf06:	6911      	ldr	r1, [r2, #16]
 800cf08:	6219      	str	r1, [r3, #32]
 800cf0a:	6951      	ldr	r1, [r2, #20]
 800cf0c:	6892      	ldr	r2, [r2, #8]
 800cf0e:	619a      	str	r2, [r3, #24]
 800cf10:	6259      	str	r1, [r3, #36]	@ 0x24
 800cf12:	f003 fb5b 	bl	80105cc <uxr_nanos>
 800cf16:	f00a f867 	bl	8016fe8 <srand>
 800cf1a:	f00a f893 	bl	8017044 <rand>
 800cf1e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cf20:	6298      	str	r0, [r3, #40]	@ 0x28
 800cf22:	2800      	cmp	r0, #0
 800cf24:	d0f9      	beq.n	800cf1a <rmw_init_options_init+0x9e>
 800cf26:	2000      	movs	r0, #0
 800cf28:	b003      	add	sp, #12
 800cf2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cf2e:	b004      	add	sp, #16
 800cf30:	4770      	bx	lr
 800cf32:	2001      	movs	r0, #1
 800cf34:	e7b1      	b.n	800ce9a <rmw_init_options_init+0x1e>
 800cf36:	bf00      	nop
 800cf38:	08019068 	.word	0x08019068
 800cf3c:	2000addc 	.word	0x2000addc
 800cf40:	20006678 	.word	0x20006678
 800cf44:	200064c4 	.word	0x200064c4
 800cf48:	080188c0 	.word	0x080188c0

0800cf4c <rmw_init_options_copy>:
 800cf4c:	b570      	push	{r4, r5, r6, lr}
 800cf4e:	b158      	cbz	r0, 800cf68 <rmw_init_options_copy+0x1c>
 800cf50:	460d      	mov	r5, r1
 800cf52:	b149      	cbz	r1, 800cf68 <rmw_init_options_copy+0x1c>
 800cf54:	4604      	mov	r4, r0
 800cf56:	6880      	ldr	r0, [r0, #8]
 800cf58:	b120      	cbz	r0, 800cf64 <rmw_init_options_copy+0x18>
 800cf5a:	4b1e      	ldr	r3, [pc, #120]	@ (800cfd4 <rmw_init_options_copy+0x88>)
 800cf5c:	6819      	ldr	r1, [r3, #0]
 800cf5e:	f7f3 f95f 	bl	8000220 <strcmp>
 800cf62:	bb90      	cbnz	r0, 800cfca <rmw_init_options_copy+0x7e>
 800cf64:	68ab      	ldr	r3, [r5, #8]
 800cf66:	b113      	cbz	r3, 800cf6e <rmw_init_options_copy+0x22>
 800cf68:	250b      	movs	r5, #11
 800cf6a:	4628      	mov	r0, r5
 800cf6c:	bd70      	pop	{r4, r5, r6, pc}
 800cf6e:	4623      	mov	r3, r4
 800cf70:	462a      	mov	r2, r5
 800cf72:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800cf76:	f8d3 c000 	ldr.w	ip, [r3]
 800cf7a:	6858      	ldr	r0, [r3, #4]
 800cf7c:	6899      	ldr	r1, [r3, #8]
 800cf7e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800cf82:	f8c2 e00c 	str.w	lr, [r2, #12]
 800cf86:	3310      	adds	r3, #16
 800cf88:	42b3      	cmp	r3, r6
 800cf8a:	f8c2 c000 	str.w	ip, [r2]
 800cf8e:	6050      	str	r0, [r2, #4]
 800cf90:	6091      	str	r1, [r2, #8]
 800cf92:	f102 0210 	add.w	r2, r2, #16
 800cf96:	d1ee      	bne.n	800cf76 <rmw_init_options_copy+0x2a>
 800cf98:	6819      	ldr	r1, [r3, #0]
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	480e      	ldr	r0, [pc, #56]	@ (800cfd8 <rmw_init_options_copy+0x8c>)
 800cf9e:	6053      	str	r3, [r2, #4]
 800cfa0:	6011      	str	r1, [r2, #0]
 800cfa2:	f008 f821 	bl	8014fe8 <get_memory>
 800cfa6:	b198      	cbz	r0, 800cfd0 <rmw_init_options_copy+0x84>
 800cfa8:	6883      	ldr	r3, [r0, #8]
 800cfaa:	636b      	str	r3, [r5, #52]	@ 0x34
 800cfac:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800cfae:	f102 0c10 	add.w	ip, r2, #16
 800cfb2:	f103 0410 	add.w	r4, r3, #16
 800cfb6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cfba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cfbc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800cfc0:	2500      	movs	r5, #0
 800cfc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cfc6:	4628      	mov	r0, r5
 800cfc8:	bd70      	pop	{r4, r5, r6, pc}
 800cfca:	250c      	movs	r5, #12
 800cfcc:	4628      	mov	r0, r5
 800cfce:	bd70      	pop	{r4, r5, r6, pc}
 800cfd0:	2501      	movs	r5, #1
 800cfd2:	e7ca      	b.n	800cf6a <rmw_init_options_copy+0x1e>
 800cfd4:	08019068 	.word	0x08019068
 800cfd8:	2000addc 	.word	0x2000addc

0800cfdc <rmw_init_options_fini>:
 800cfdc:	2800      	cmp	r0, #0
 800cfde:	d03d      	beq.n	800d05c <rmw_init_options_fini+0x80>
 800cfe0:	b510      	push	{r4, lr}
 800cfe2:	4604      	mov	r4, r0
 800cfe4:	b08e      	sub	sp, #56	@ 0x38
 800cfe6:	3020      	adds	r0, #32
 800cfe8:	f7ff fe88 	bl	800ccfc <rcutils_allocator_is_valid>
 800cfec:	b360      	cbz	r0, 800d048 <rmw_init_options_fini+0x6c>
 800cfee:	68a0      	ldr	r0, [r4, #8]
 800cff0:	b120      	cbz	r0, 800cffc <rmw_init_options_fini+0x20>
 800cff2:	4b1c      	ldr	r3, [pc, #112]	@ (800d064 <rmw_init_options_fini+0x88>)
 800cff4:	6819      	ldr	r1, [r3, #0]
 800cff6:	f7f3 f913 	bl	8000220 <strcmp>
 800cffa:	bb68      	cbnz	r0, 800d058 <rmw_init_options_fini+0x7c>
 800cffc:	4b1a      	ldr	r3, [pc, #104]	@ (800d068 <rmw_init_options_fini+0x8c>)
 800cffe:	6819      	ldr	r1, [r3, #0]
 800d000:	b331      	cbz	r1, 800d050 <rmw_init_options_fini+0x74>
 800d002:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d004:	e001      	b.n	800d00a <rmw_init_options_fini+0x2e>
 800d006:	6849      	ldr	r1, [r1, #4]
 800d008:	b311      	cbz	r1, 800d050 <rmw_init_options_fini+0x74>
 800d00a:	688b      	ldr	r3, [r1, #8]
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d1fa      	bne.n	800d006 <rmw_init_options_fini+0x2a>
 800d010:	4815      	ldr	r0, [pc, #84]	@ (800d068 <rmw_init_options_fini+0x8c>)
 800d012:	f007 fff9 	bl	8015008 <put_memory>
 800d016:	4668      	mov	r0, sp
 800d018:	f7ff ff02 	bl	800ce20 <rmw_get_zero_initialized_init_options>
 800d01c:	46ee      	mov	lr, sp
 800d01e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d022:	46a4      	mov	ip, r4
 800d024:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d028:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d02c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d030:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d034:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d038:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d03c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d040:	2300      	movs	r3, #0
 800d042:	4618      	mov	r0, r3
 800d044:	b00e      	add	sp, #56	@ 0x38
 800d046:	bd10      	pop	{r4, pc}
 800d048:	230b      	movs	r3, #11
 800d04a:	4618      	mov	r0, r3
 800d04c:	b00e      	add	sp, #56	@ 0x38
 800d04e:	bd10      	pop	{r4, pc}
 800d050:	2301      	movs	r3, #1
 800d052:	4618      	mov	r0, r3
 800d054:	b00e      	add	sp, #56	@ 0x38
 800d056:	bd10      	pop	{r4, pc}
 800d058:	230c      	movs	r3, #12
 800d05a:	e7f2      	b.n	800d042 <rmw_init_options_fini+0x66>
 800d05c:	230b      	movs	r3, #11
 800d05e:	4618      	mov	r0, r3
 800d060:	4770      	bx	lr
 800d062:	bf00      	nop
 800d064:	08019068 	.word	0x08019068
 800d068:	2000addc 	.word	0x2000addc

0800d06c <rmw_init>:
 800d06c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d070:	b083      	sub	sp, #12
 800d072:	2800      	cmp	r0, #0
 800d074:	f000 80d3 	beq.w	800d21e <rmw_init+0x1b2>
 800d078:	460e      	mov	r6, r1
 800d07a:	2900      	cmp	r1, #0
 800d07c:	f000 80cf 	beq.w	800d21e <rmw_init+0x1b2>
 800d080:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d082:	4605      	mov	r5, r0
 800d084:	2b00      	cmp	r3, #0
 800d086:	f000 80ca 	beq.w	800d21e <rmw_init+0x1b2>
 800d08a:	4b78      	ldr	r3, [pc, #480]	@ (800d26c <rmw_init+0x200>)
 800d08c:	6880      	ldr	r0, [r0, #8]
 800d08e:	681f      	ldr	r7, [r3, #0]
 800d090:	b128      	cbz	r0, 800d09e <rmw_init+0x32>
 800d092:	4639      	mov	r1, r7
 800d094:	f7f3 f8c4 	bl	8000220 <strcmp>
 800d098:	2800      	cmp	r0, #0
 800d09a:	f040 80ca 	bne.w	800d232 <rmw_init+0x1c6>
 800d09e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d0a2:	4c73      	ldr	r4, [pc, #460]	@ (800d270 <rmw_init+0x204>)
 800d0a4:	4973      	ldr	r1, [pc, #460]	@ (800d274 <rmw_init+0x208>)
 800d0a6:	4874      	ldr	r0, [pc, #464]	@ (800d278 <rmw_init+0x20c>)
 800d0a8:	60b7      	str	r7, [r6, #8]
 800d0aa:	e9c6 2300 	strd	r2, r3, [r6]
 800d0ae:	68eb      	ldr	r3, [r5, #12]
 800d0b0:	64b3      	str	r3, [r6, #72]	@ 0x48
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	f000 fd56 	bl	800db64 <rmw_uxrce_init_session_memory>
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	4970      	ldr	r1, [pc, #448]	@ (800d27c <rmw_init+0x210>)
 800d0bc:	2204      	movs	r2, #4
 800d0be:	f000 fd91 	bl	800dbe4 <rmw_uxrce_init_static_input_buffer_memory>
 800d0c2:	f04f 0800 	mov.w	r8, #0
 800d0c6:	486c      	ldr	r0, [pc, #432]	@ (800d278 <rmw_init+0x20c>)
 800d0c8:	f884 800d 	strb.w	r8, [r4, #13]
 800d0cc:	f007 ff8c 	bl	8014fe8 <get_memory>
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	f000 80a9 	beq.w	800d228 <rmw_init+0x1bc>
 800d0d6:	6884      	ldr	r4, [r0, #8]
 800d0d8:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800d0da:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800d0dc:	f890 c010 	ldrb.w	ip, [r0, #16]
 800d0e0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800d0e4:	9101      	str	r1, [sp, #4]
 800d0e6:	6a00      	ldr	r0, [r0, #32]
 800d0e8:	9000      	str	r0, [sp, #0]
 800d0ea:	f104 0910 	add.w	r9, r4, #16
 800d0ee:	4661      	mov	r1, ip
 800d0f0:	4648      	mov	r0, r9
 800d0f2:	f001 fa43 	bl	800e57c <uxr_set_custom_transport_callbacks>
 800d0f6:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800d0fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d0fe:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800d102:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800d106:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800d10a:	495d      	ldr	r1, [pc, #372]	@ (800d280 <rmw_init+0x214>)
 800d10c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800d110:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800d114:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800d118:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800d11c:	4859      	ldr	r0, [pc, #356]	@ (800d284 <rmw_init+0x218>)
 800d11e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800d122:	2201      	movs	r2, #1
 800d124:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800d126:	f000 fcfd 	bl	800db24 <rmw_uxrce_init_node_memory>
 800d12a:	4957      	ldr	r1, [pc, #348]	@ (800d288 <rmw_init+0x21c>)
 800d12c:	4857      	ldr	r0, [pc, #348]	@ (800d28c <rmw_init+0x220>)
 800d12e:	2205      	movs	r2, #5
 800d130:	f000 fcd8 	bl	800dae4 <rmw_uxrce_init_subscription_memory>
 800d134:	4956      	ldr	r1, [pc, #344]	@ (800d290 <rmw_init+0x224>)
 800d136:	4857      	ldr	r0, [pc, #348]	@ (800d294 <rmw_init+0x228>)
 800d138:	220a      	movs	r2, #10
 800d13a:	f000 fcb3 	bl	800daa4 <rmw_uxrce_init_publisher_memory>
 800d13e:	4956      	ldr	r1, [pc, #344]	@ (800d298 <rmw_init+0x22c>)
 800d140:	4856      	ldr	r0, [pc, #344]	@ (800d29c <rmw_init+0x230>)
 800d142:	2201      	movs	r2, #1
 800d144:	f000 fc6e 	bl	800da24 <rmw_uxrce_init_service_memory>
 800d148:	4955      	ldr	r1, [pc, #340]	@ (800d2a0 <rmw_init+0x234>)
 800d14a:	4856      	ldr	r0, [pc, #344]	@ (800d2a4 <rmw_init+0x238>)
 800d14c:	2201      	movs	r2, #1
 800d14e:	f000 fc89 	bl	800da64 <rmw_uxrce_init_client_memory>
 800d152:	4955      	ldr	r1, [pc, #340]	@ (800d2a8 <rmw_init+0x23c>)
 800d154:	4855      	ldr	r0, [pc, #340]	@ (800d2ac <rmw_init+0x240>)
 800d156:	220f      	movs	r2, #15
 800d158:	f000 fd24 	bl	800dba4 <rmw_uxrce_init_topic_memory>
 800d15c:	4954      	ldr	r1, [pc, #336]	@ (800d2b0 <rmw_init+0x244>)
 800d15e:	4855      	ldr	r0, [pc, #340]	@ (800d2b4 <rmw_init+0x248>)
 800d160:	2203      	movs	r2, #3
 800d162:	f000 fd5f 	bl	800dc24 <rmw_uxrce_init_init_options_impl_memory>
 800d166:	4954      	ldr	r1, [pc, #336]	@ (800d2b8 <rmw_init+0x24c>)
 800d168:	4854      	ldr	r0, [pc, #336]	@ (800d2bc <rmw_init+0x250>)
 800d16a:	2204      	movs	r2, #4
 800d16c:	f000 fd7a 	bl	800dc64 <rmw_uxrce_init_wait_set_memory>
 800d170:	4953      	ldr	r1, [pc, #332]	@ (800d2c0 <rmw_init+0x254>)
 800d172:	4854      	ldr	r0, [pc, #336]	@ (800d2c4 <rmw_init+0x258>)
 800d174:	2204      	movs	r2, #4
 800d176:	f000 fd95 	bl	800dca4 <rmw_uxrce_init_guard_condition_memory>
 800d17a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800d17c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800d17e:	4642      	mov	r2, r8
 800d180:	f000 fc38 	bl	800d9f4 <rmw_uxrce_transport_init>
 800d184:	4607      	mov	r7, r0
 800d186:	2800      	cmp	r0, #0
 800d188:	d158      	bne.n	800d23c <rmw_init+0x1d0>
 800d18a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800d18c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800d190:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d192:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800d196:	4628      	mov	r0, r5
 800d198:	f001 fbea 	bl	800e970 <uxr_init_session>
 800d19c:	494a      	ldr	r1, [pc, #296]	@ (800d2c8 <rmw_init+0x25c>)
 800d19e:	4622      	mov	r2, r4
 800d1a0:	4628      	mov	r0, r5
 800d1a2:	f001 fc09 	bl	800e9b8 <uxr_set_topic_callback>
 800d1a6:	4949      	ldr	r1, [pc, #292]	@ (800d2cc <rmw_init+0x260>)
 800d1a8:	463a      	mov	r2, r7
 800d1aa:	4628      	mov	r0, r5
 800d1ac:	f001 fc00 	bl	800e9b0 <uxr_set_status_callback>
 800d1b0:	4947      	ldr	r1, [pc, #284]	@ (800d2d0 <rmw_init+0x264>)
 800d1b2:	463a      	mov	r2, r7
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	f001 fc03 	bl	800e9c0 <uxr_set_request_callback>
 800d1ba:	4946      	ldr	r1, [pc, #280]	@ (800d2d4 <rmw_init+0x268>)
 800d1bc:	463a      	mov	r2, r7
 800d1be:	4628      	mov	r0, r5
 800d1c0:	f001 fc02 	bl	800e9c8 <uxr_set_reply_callback>
 800d1c4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d1c8:	2304      	movs	r3, #4
 800d1ca:	0092      	lsls	r2, r2, #2
 800d1cc:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800d1d0:	4628      	mov	r0, r5
 800d1d2:	f001 fc37 	bl	800ea44 <uxr_create_input_reliable_stream>
 800d1d6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d1da:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800d1de:	0092      	lsls	r2, r2, #2
 800d1e0:	2304      	movs	r3, #4
 800d1e2:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800d1e6:	4628      	mov	r0, r5
 800d1e8:	f001 fc04 	bl	800e9f4 <uxr_create_output_reliable_stream>
 800d1ec:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800d1f0:	4628      	mov	r0, r5
 800d1f2:	f001 fc21 	bl	800ea38 <uxr_create_input_best_effort_stream>
 800d1f6:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800d1fa:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800d1fe:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d202:	3114      	adds	r1, #20
 800d204:	4628      	mov	r0, r5
 800d206:	f001 fbe3 	bl	800e9d0 <uxr_create_output_best_effort_stream>
 800d20a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800d20e:	4628      	mov	r0, r5
 800d210:	f002 f96e 	bl	800f4f0 <uxr_create_session>
 800d214:	b1f8      	cbz	r0, 800d256 <rmw_init+0x1ea>
 800d216:	4638      	mov	r0, r7
 800d218:	b003      	add	sp, #12
 800d21a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d21e:	270b      	movs	r7, #11
 800d220:	4638      	mov	r0, r7
 800d222:	b003      	add	sp, #12
 800d224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d228:	2701      	movs	r7, #1
 800d22a:	4638      	mov	r0, r7
 800d22c:	b003      	add	sp, #12
 800d22e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d232:	270c      	movs	r7, #12
 800d234:	4638      	mov	r0, r7
 800d236:	b003      	add	sp, #12
 800d238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d23c:	4648      	mov	r0, r9
 800d23e:	f001 f9df 	bl	800e600 <uxr_close_custom_transport>
 800d242:	480d      	ldr	r0, [pc, #52]	@ (800d278 <rmw_init+0x20c>)
 800d244:	4621      	mov	r1, r4
 800d246:	f007 fedf 	bl	8015008 <put_memory>
 800d24a:	4638      	mov	r0, r7
 800d24c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800d250:	b003      	add	sp, #12
 800d252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d256:	4648      	mov	r0, r9
 800d258:	f001 f9d2 	bl	800e600 <uxr_close_custom_transport>
 800d25c:	4806      	ldr	r0, [pc, #24]	@ (800d278 <rmw_init+0x20c>)
 800d25e:	4621      	mov	r1, r4
 800d260:	f007 fed2 	bl	8015008 <put_memory>
 800d264:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800d266:	2701      	movs	r7, #1
 800d268:	e7d5      	b.n	800d216 <rmw_init+0x1aa>
 800d26a:	bf00      	nop
 800d26c:	08019068 	.word	0x08019068
 800d270:	2000ae2c 	.word	0x2000ae2c
 800d274:	200070d8 	.word	0x200070d8
 800d278:	2000ae1c 	.word	0x2000ae1c
 800d27c:	20008680 	.word	0x20008680
 800d280:	200066fc 	.word	0x200066fc
 800d284:	2000adec 	.word	0x2000adec
 800d288:	2000a780 	.word	0x2000a780
 800d28c:	2000ae3c 	.word	0x2000ae3c
 800d290:	200067a0 	.word	0x200067a0
 800d294:	2000adfc 	.word	0x2000adfc
 800d298:	20007010 	.word	0x20007010
 800d29c:	2000ae0c 	.word	0x2000ae0c
 800d2a0:	20006530 	.word	0x20006530
 800d2a4:	2000651c 	.word	0x2000651c
 800d2a8:	2000abb8 	.word	0x2000abb8
 800d2ac:	2000ae4c 	.word	0x2000ae4c
 800d2b0:	20006678 	.word	0x20006678
 800d2b4:	2000addc 	.word	0x2000addc
 800d2b8:	2000ad5c 	.word	0x2000ad5c
 800d2bc:	2000ae5c 	.word	0x2000ae5c
 800d2c0:	200065f8 	.word	0x200065f8
 800d2c4:	2000adcc 	.word	0x2000adcc
 800d2c8:	08014e21 	.word	0x08014e21
 800d2cc:	08014e19 	.word	0x08014e19
 800d2d0:	08014eb9 	.word	0x08014eb9
 800d2d4:	08014f55 	.word	0x08014f55

0800d2d8 <rmw_context_fini>:
 800d2d8:	4b17      	ldr	r3, [pc, #92]	@ (800d338 <rmw_context_fini+0x60>)
 800d2da:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800d2dc:	b570      	push	{r4, r5, r6, lr}
 800d2de:	681c      	ldr	r4, [r3, #0]
 800d2e0:	4605      	mov	r5, r0
 800d2e2:	b334      	cbz	r4, 800d332 <rmw_context_fini+0x5a>
 800d2e4:	2600      	movs	r6, #0
 800d2e6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800d2ea:	6902      	ldr	r2, [r0, #16]
 800d2ec:	428a      	cmp	r2, r1
 800d2ee:	d018      	beq.n	800d322 <rmw_context_fini+0x4a>
 800d2f0:	2c00      	cmp	r4, #0
 800d2f2:	d1f8      	bne.n	800d2e6 <rmw_context_fini+0xe>
 800d2f4:	b189      	cbz	r1, 800d31a <rmw_context_fini+0x42>
 800d2f6:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800d2fa:	789b      	ldrb	r3, [r3, #2]
 800d2fc:	2b01      	cmp	r3, #1
 800d2fe:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800d302:	bf14      	ite	ne
 800d304:	210a      	movne	r1, #10
 800d306:	2100      	moveq	r1, #0
 800d308:	f002 f8ca 	bl	800f4a0 <uxr_delete_session_retries>
 800d30c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d30e:	f000 fce9 	bl	800dce4 <rmw_uxrce_fini_session_memory>
 800d312:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d314:	3010      	adds	r0, #16
 800d316:	f001 f973 	bl	800e600 <uxr_close_custom_transport>
 800d31a:	2300      	movs	r3, #0
 800d31c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800d31e:	4630      	mov	r0, r6
 800d320:	bd70      	pop	{r4, r5, r6, pc}
 800d322:	3018      	adds	r0, #24
 800d324:	f000 f89c 	bl	800d460 <rmw_destroy_node>
 800d328:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d32a:	4606      	mov	r6, r0
 800d32c:	2c00      	cmp	r4, #0
 800d32e:	d1da      	bne.n	800d2e6 <rmw_context_fini+0xe>
 800d330:	e7e0      	b.n	800d2f4 <rmw_context_fini+0x1c>
 800d332:	4626      	mov	r6, r4
 800d334:	e7de      	b.n	800d2f4 <rmw_context_fini+0x1c>
 800d336:	bf00      	nop
 800d338:	2000adec 	.word	0x2000adec

0800d33c <create_node>:
 800d33c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d340:	b083      	sub	sp, #12
 800d342:	2b00      	cmp	r3, #0
 800d344:	d05f      	beq.n	800d406 <create_node+0xca>
 800d346:	4606      	mov	r6, r0
 800d348:	4835      	ldr	r0, [pc, #212]	@ (800d420 <create_node+0xe4>)
 800d34a:	460f      	mov	r7, r1
 800d34c:	4690      	mov	r8, r2
 800d34e:	461d      	mov	r5, r3
 800d350:	f007 fe4a 	bl	8014fe8 <get_memory>
 800d354:	2800      	cmp	r0, #0
 800d356:	d056      	beq.n	800d406 <create_node+0xca>
 800d358:	6884      	ldr	r4, [r0, #8]
 800d35a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800d35c:	6123      	str	r3, [r4, #16]
 800d35e:	f007 feab 	bl	80150b8 <rmw_get_implementation_identifier>
 800d362:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800d366:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800d36a:	f8c4 9020 	str.w	r9, [r4, #32]
 800d36e:	4630      	mov	r0, r6
 800d370:	f7f2 ff60 	bl	8000234 <strlen>
 800d374:	1c42      	adds	r2, r0, #1
 800d376:	2a3c      	cmp	r2, #60	@ 0x3c
 800d378:	f104 0518 	add.w	r5, r4, #24
 800d37c:	d840      	bhi.n	800d400 <create_node+0xc4>
 800d37e:	4648      	mov	r0, r9
 800d380:	4631      	mov	r1, r6
 800d382:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800d386:	f00a f9c0 	bl	801770a <memcpy>
 800d38a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800d38e:	4638      	mov	r0, r7
 800d390:	f7f2 ff50 	bl	8000234 <strlen>
 800d394:	1c42      	adds	r2, r0, #1
 800d396:	2a3c      	cmp	r2, #60	@ 0x3c
 800d398:	d832      	bhi.n	800d400 <create_node+0xc4>
 800d39a:	4639      	mov	r1, r7
 800d39c:	4648      	mov	r0, r9
 800d39e:	f00a f9b4 	bl	801770a <memcpy>
 800d3a2:	6923      	ldr	r3, [r4, #16]
 800d3a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d3a8:	2101      	movs	r1, #1
 800d3aa:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800d3ae:	1842      	adds	r2, r0, r1
 800d3b0:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800d3b4:	f001 f928 	bl	800e608 <uxr_object_id>
 800d3b8:	6160      	str	r0, [r4, #20]
 800d3ba:	783b      	ldrb	r3, [r7, #0]
 800d3bc:	2b2f      	cmp	r3, #47	@ 0x2f
 800d3be:	d127      	bne.n	800d410 <create_node+0xd4>
 800d3c0:	787b      	ldrb	r3, [r7, #1]
 800d3c2:	bb2b      	cbnz	r3, 800d410 <create_node+0xd4>
 800d3c4:	4a17      	ldr	r2, [pc, #92]	@ (800d424 <create_node+0xe8>)
 800d3c6:	4818      	ldr	r0, [pc, #96]	@ (800d428 <create_node+0xec>)
 800d3c8:	4633      	mov	r3, r6
 800d3ca:	213c      	movs	r1, #60	@ 0x3c
 800d3cc:	f009 fffa 	bl	80173c4 <sniprintf>
 800d3d0:	6920      	ldr	r0, [r4, #16]
 800d3d2:	4915      	ldr	r1, [pc, #84]	@ (800d428 <create_node+0xec>)
 800d3d4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800d3d8:	9100      	str	r1, [sp, #0]
 800d3da:	2106      	movs	r1, #6
 800d3dc:	9101      	str	r1, [sp, #4]
 800d3de:	6811      	ldr	r1, [r2, #0]
 800d3e0:	6962      	ldr	r2, [r4, #20]
 800d3e2:	fa1f f388 	uxth.w	r3, r8
 800d3e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d3ea:	f000 ff3d 	bl	800e268 <uxr_buffer_create_participant_bin>
 800d3ee:	4602      	mov	r2, r0
 800d3f0:	6920      	ldr	r0, [r4, #16]
 800d3f2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d3f6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d3fa:	f000 fdeb 	bl	800dfd4 <run_xrce_session>
 800d3fe:	b918      	cbnz	r0, 800d408 <create_node+0xcc>
 800d400:	4628      	mov	r0, r5
 800d402:	f000 fc75 	bl	800dcf0 <rmw_uxrce_fini_node_memory>
 800d406:	2500      	movs	r5, #0
 800d408:	4628      	mov	r0, r5
 800d40a:	b003      	add	sp, #12
 800d40c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d410:	4a06      	ldr	r2, [pc, #24]	@ (800d42c <create_node+0xf0>)
 800d412:	9600      	str	r6, [sp, #0]
 800d414:	463b      	mov	r3, r7
 800d416:	213c      	movs	r1, #60	@ 0x3c
 800d418:	4803      	ldr	r0, [pc, #12]	@ (800d428 <create_node+0xec>)
 800d41a:	f009 ffd3 	bl	80173c4 <sniprintf>
 800d41e:	e7d7      	b.n	800d3d0 <create_node+0x94>
 800d420:	2000adec 	.word	0x2000adec
 800d424:	080188dc 	.word	0x080188dc
 800d428:	200064e0 	.word	0x200064e0
 800d42c:	080188c4 	.word	0x080188c4

0800d430 <rmw_create_node>:
 800d430:	b199      	cbz	r1, 800d45a <rmw_create_node+0x2a>
 800d432:	780b      	ldrb	r3, [r1, #0]
 800d434:	468c      	mov	ip, r1
 800d436:	b183      	cbz	r3, 800d45a <rmw_create_node+0x2a>
 800d438:	b410      	push	{r4}
 800d43a:	4614      	mov	r4, r2
 800d43c:	b14a      	cbz	r2, 800d452 <rmw_create_node+0x22>
 800d43e:	7813      	ldrb	r3, [r2, #0]
 800d440:	b13b      	cbz	r3, 800d452 <rmw_create_node+0x22>
 800d442:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800d444:	4603      	mov	r3, r0
 800d446:	4621      	mov	r1, r4
 800d448:	4660      	mov	r0, ip
 800d44a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d44e:	f7ff bf75 	b.w	800d33c <create_node>
 800d452:	2000      	movs	r0, #0
 800d454:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d458:	4770      	bx	lr
 800d45a:	2000      	movs	r0, #0
 800d45c:	4770      	bx	lr
 800d45e:	bf00      	nop

0800d460 <rmw_destroy_node>:
 800d460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d462:	b328      	cbz	r0, 800d4b0 <rmw_destroy_node+0x50>
 800d464:	4607      	mov	r7, r0
 800d466:	6800      	ldr	r0, [r0, #0]
 800d468:	b120      	cbz	r0, 800d474 <rmw_destroy_node+0x14>
 800d46a:	4b36      	ldr	r3, [pc, #216]	@ (800d544 <rmw_destroy_node+0xe4>)
 800d46c:	6819      	ldr	r1, [r3, #0]
 800d46e:	f7f2 fed7 	bl	8000220 <strcmp>
 800d472:	b9e8      	cbnz	r0, 800d4b0 <rmw_destroy_node+0x50>
 800d474:	687d      	ldr	r5, [r7, #4]
 800d476:	b1dd      	cbz	r5, 800d4b0 <rmw_destroy_node+0x50>
 800d478:	4b33      	ldr	r3, [pc, #204]	@ (800d548 <rmw_destroy_node+0xe8>)
 800d47a:	681c      	ldr	r4, [r3, #0]
 800d47c:	2c00      	cmp	r4, #0
 800d47e:	d05f      	beq.n	800d540 <rmw_destroy_node+0xe0>
 800d480:	2600      	movs	r6, #0
 800d482:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d486:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800d48a:	429d      	cmp	r5, r3
 800d48c:	d013      	beq.n	800d4b6 <rmw_destroy_node+0x56>
 800d48e:	2c00      	cmp	r4, #0
 800d490:	d1f7      	bne.n	800d482 <rmw_destroy_node+0x22>
 800d492:	4b2e      	ldr	r3, [pc, #184]	@ (800d54c <rmw_destroy_node+0xec>)
 800d494:	681c      	ldr	r4, [r3, #0]
 800d496:	b1c4      	cbz	r4, 800d4ca <rmw_destroy_node+0x6a>
 800d498:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d49c:	6a0b      	ldr	r3, [r1, #32]
 800d49e:	429d      	cmp	r5, r3
 800d4a0:	d1f9      	bne.n	800d496 <rmw_destroy_node+0x36>
 800d4a2:	317c      	adds	r1, #124	@ 0x7c
 800d4a4:	4638      	mov	r0, r7
 800d4a6:	f000 fa45 	bl	800d934 <rmw_destroy_subscription>
 800d4aa:	2801      	cmp	r0, #1
 800d4ac:	4606      	mov	r6, r0
 800d4ae:	d1f2      	bne.n	800d496 <rmw_destroy_node+0x36>
 800d4b0:	2601      	movs	r6, #1
 800d4b2:	4630      	mov	r0, r6
 800d4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4b6:	3184      	adds	r1, #132	@ 0x84
 800d4b8:	4638      	mov	r0, r7
 800d4ba:	f000 f9a5 	bl	800d808 <rmw_destroy_publisher>
 800d4be:	2801      	cmp	r0, #1
 800d4c0:	4606      	mov	r6, r0
 800d4c2:	d0f5      	beq.n	800d4b0 <rmw_destroy_node+0x50>
 800d4c4:	2c00      	cmp	r4, #0
 800d4c6:	d1dc      	bne.n	800d482 <rmw_destroy_node+0x22>
 800d4c8:	e7e3      	b.n	800d492 <rmw_destroy_node+0x32>
 800d4ca:	4b21      	ldr	r3, [pc, #132]	@ (800d550 <rmw_destroy_node+0xf0>)
 800d4cc:	681c      	ldr	r4, [r3, #0]
 800d4ce:	b16c      	cbz	r4, 800d4ec <rmw_destroy_node+0x8c>
 800d4d0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d4d4:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800d4d6:	429d      	cmp	r5, r3
 800d4d8:	d1f9      	bne.n	800d4ce <rmw_destroy_node+0x6e>
 800d4da:	317c      	adds	r1, #124	@ 0x7c
 800d4dc:	4638      	mov	r0, r7
 800d4de:	f000 f9e5 	bl	800d8ac <rmw_destroy_service>
 800d4e2:	2801      	cmp	r0, #1
 800d4e4:	4606      	mov	r6, r0
 800d4e6:	d0e3      	beq.n	800d4b0 <rmw_destroy_node+0x50>
 800d4e8:	2c00      	cmp	r4, #0
 800d4ea:	d1f1      	bne.n	800d4d0 <rmw_destroy_node+0x70>
 800d4ec:	4b19      	ldr	r3, [pc, #100]	@ (800d554 <rmw_destroy_node+0xf4>)
 800d4ee:	681c      	ldr	r4, [r3, #0]
 800d4f0:	b16c      	cbz	r4, 800d50e <rmw_destroy_node+0xae>
 800d4f2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d4f6:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800d4f8:	429d      	cmp	r5, r3
 800d4fa:	d1f9      	bne.n	800d4f0 <rmw_destroy_node+0x90>
 800d4fc:	317c      	adds	r1, #124	@ 0x7c
 800d4fe:	4638      	mov	r0, r7
 800d500:	f007 fd96 	bl	8015030 <rmw_destroy_client>
 800d504:	2801      	cmp	r0, #1
 800d506:	4606      	mov	r6, r0
 800d508:	d0d2      	beq.n	800d4b0 <rmw_destroy_node+0x50>
 800d50a:	2c00      	cmp	r4, #0
 800d50c:	d1f1      	bne.n	800d4f2 <rmw_destroy_node+0x92>
 800d50e:	6928      	ldr	r0, [r5, #16]
 800d510:	696a      	ldr	r2, [r5, #20]
 800d512:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d516:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d51a:	6819      	ldr	r1, [r3, #0]
 800d51c:	f000 fe58 	bl	800e1d0 <uxr_buffer_delete_entity>
 800d520:	4602      	mov	r2, r0
 800d522:	6928      	ldr	r0, [r5, #16]
 800d524:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d528:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d52c:	f000 fd52 	bl	800dfd4 <run_xrce_session>
 800d530:	2800      	cmp	r0, #0
 800d532:	bf08      	it	eq
 800d534:	2602      	moveq	r6, #2
 800d536:	4638      	mov	r0, r7
 800d538:	f000 fbda 	bl	800dcf0 <rmw_uxrce_fini_node_memory>
 800d53c:	4630      	mov	r0, r6
 800d53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d540:	4626      	mov	r6, r4
 800d542:	e7a6      	b.n	800d492 <rmw_destroy_node+0x32>
 800d544:	08019068 	.word	0x08019068
 800d548:	2000adfc 	.word	0x2000adfc
 800d54c:	2000ae3c 	.word	0x2000ae3c
 800d550:	2000ae0c 	.word	0x2000ae0c
 800d554:	2000651c 	.word	0x2000651c

0800d558 <rmw_node_get_graph_guard_condition>:
 800d558:	6843      	ldr	r3, [r0, #4]
 800d55a:	6918      	ldr	r0, [r3, #16]
 800d55c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800d560:	4770      	bx	lr
 800d562:	bf00      	nop

0800d564 <flush_session>:
 800d564:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800d566:	f001 be53 	b.w	800f210 <uxr_run_session_until_confirm_delivery>
 800d56a:	bf00      	nop

0800d56c <rmw_publish>:
 800d56c:	2800      	cmp	r0, #0
 800d56e:	d053      	beq.n	800d618 <rmw_publish+0xac>
 800d570:	b570      	push	{r4, r5, r6, lr}
 800d572:	460d      	mov	r5, r1
 800d574:	b08e      	sub	sp, #56	@ 0x38
 800d576:	2900      	cmp	r1, #0
 800d578:	d04b      	beq.n	800d612 <rmw_publish+0xa6>
 800d57a:	4604      	mov	r4, r0
 800d57c:	6800      	ldr	r0, [r0, #0]
 800d57e:	f000 fda9 	bl	800e0d4 <is_uxrce_rmw_identifier_valid>
 800d582:	2800      	cmp	r0, #0
 800d584:	d045      	beq.n	800d612 <rmw_publish+0xa6>
 800d586:	6866      	ldr	r6, [r4, #4]
 800d588:	2e00      	cmp	r6, #0
 800d58a:	d042      	beq.n	800d612 <rmw_publish+0xa6>
 800d58c:	69b4      	ldr	r4, [r6, #24]
 800d58e:	4628      	mov	r0, r5
 800d590:	6923      	ldr	r3, [r4, #16]
 800d592:	4798      	blx	r3
 800d594:	69f3      	ldr	r3, [r6, #28]
 800d596:	9005      	str	r0, [sp, #20]
 800d598:	b113      	cbz	r3, 800d5a0 <rmw_publish+0x34>
 800d59a:	a805      	add	r0, sp, #20
 800d59c:	4798      	blx	r3
 800d59e:	9805      	ldr	r0, [sp, #20]
 800d5a0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800d5a4:	691b      	ldr	r3, [r3, #16]
 800d5a6:	9000      	str	r0, [sp, #0]
 800d5a8:	6972      	ldr	r2, [r6, #20]
 800d5aa:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800d5ac:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800d5b0:	ab06      	add	r3, sp, #24
 800d5b2:	f003 f8ab 	bl	801070c <uxr_prepare_output_stream>
 800d5b6:	b1d8      	cbz	r0, 800d5f0 <rmw_publish+0x84>
 800d5b8:	68a3      	ldr	r3, [r4, #8]
 800d5ba:	a906      	add	r1, sp, #24
 800d5bc:	4628      	mov	r0, r5
 800d5be:	4798      	blx	r3
 800d5c0:	6a33      	ldr	r3, [r6, #32]
 800d5c2:	4604      	mov	r4, r0
 800d5c4:	b10b      	cbz	r3, 800d5ca <rmw_publish+0x5e>
 800d5c6:	a806      	add	r0, sp, #24
 800d5c8:	4798      	blx	r3
 800d5ca:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800d5ce:	2b01      	cmp	r3, #1
 800d5d0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800d5d4:	d022      	beq.n	800d61c <rmw_publish+0xb0>
 800d5d6:	6918      	ldr	r0, [r3, #16]
 800d5d8:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800d5da:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d5de:	f001 fe17 	bl	800f210 <uxr_run_session_until_confirm_delivery>
 800d5e2:	4020      	ands	r0, r4
 800d5e4:	b2c4      	uxtb	r4, r0
 800d5e6:	f084 0001 	eor.w	r0, r4, #1
 800d5ea:	b2c0      	uxtb	r0, r0
 800d5ec:	b00e      	add	sp, #56	@ 0x38
 800d5ee:	bd70      	pop	{r4, r5, r6, pc}
 800d5f0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800d5f4:	6918      	ldr	r0, [r3, #16]
 800d5f6:	9b05      	ldr	r3, [sp, #20]
 800d5f8:	9300      	str	r3, [sp, #0]
 800d5fa:	4b0b      	ldr	r3, [pc, #44]	@ (800d628 <rmw_publish+0xbc>)
 800d5fc:	9301      	str	r3, [sp, #4]
 800d5fe:	9602      	str	r6, [sp, #8]
 800d600:	6972      	ldr	r2, [r6, #20]
 800d602:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800d604:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d608:	ab06      	add	r3, sp, #24
 800d60a:	f003 f8af 	bl	801076c <uxr_prepare_output_stream_fragmented>
 800d60e:	2800      	cmp	r0, #0
 800d610:	d1d2      	bne.n	800d5b8 <rmw_publish+0x4c>
 800d612:	2001      	movs	r0, #1
 800d614:	b00e      	add	sp, #56	@ 0x38
 800d616:	bd70      	pop	{r4, r5, r6, pc}
 800d618:	2001      	movs	r0, #1
 800d61a:	4770      	bx	lr
 800d61c:	6918      	ldr	r0, [r3, #16]
 800d61e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d622:	f001 fa35 	bl	800ea90 <uxr_flash_output_streams>
 800d626:	e7de      	b.n	800d5e6 <rmw_publish+0x7a>
 800d628:	0800d565 	.word	0x0800d565

0800d62c <rmw_create_publisher>:
 800d62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d630:	b087      	sub	sp, #28
 800d632:	2800      	cmp	r0, #0
 800d634:	f000 80cc 	beq.w	800d7d0 <rmw_create_publisher+0x1a4>
 800d638:	460e      	mov	r6, r1
 800d63a:	2900      	cmp	r1, #0
 800d63c:	f000 80c8 	beq.w	800d7d0 <rmw_create_publisher+0x1a4>
 800d640:	4604      	mov	r4, r0
 800d642:	6800      	ldr	r0, [r0, #0]
 800d644:	4615      	mov	r5, r2
 800d646:	4698      	mov	r8, r3
 800d648:	f000 fd44 	bl	800e0d4 <is_uxrce_rmw_identifier_valid>
 800d64c:	2800      	cmp	r0, #0
 800d64e:	f000 80bf 	beq.w	800d7d0 <rmw_create_publisher+0x1a4>
 800d652:	2d00      	cmp	r5, #0
 800d654:	f000 80bc 	beq.w	800d7d0 <rmw_create_publisher+0x1a4>
 800d658:	782b      	ldrb	r3, [r5, #0]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	f000 80b8 	beq.w	800d7d0 <rmw_create_publisher+0x1a4>
 800d660:	f1b8 0f00 	cmp.w	r8, #0
 800d664:	f000 80b4 	beq.w	800d7d0 <rmw_create_publisher+0x1a4>
 800d668:	485c      	ldr	r0, [pc, #368]	@ (800d7dc <rmw_create_publisher+0x1b0>)
 800d66a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800d66e:	f007 fcbb 	bl	8014fe8 <get_memory>
 800d672:	2800      	cmp	r0, #0
 800d674:	f000 80ac 	beq.w	800d7d0 <rmw_create_publisher+0x1a4>
 800d678:	6884      	ldr	r4, [r0, #8]
 800d67a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800d67e:	f007 fd1b 	bl	80150b8 <rmw_get_implementation_identifier>
 800d682:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800d686:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800d68a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800d68e:	4628      	mov	r0, r5
 800d690:	f7f2 fdd0 	bl	8000234 <strlen>
 800d694:	3001      	adds	r0, #1
 800d696:	283c      	cmp	r0, #60	@ 0x3c
 800d698:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800d69c:	f200 8091 	bhi.w	800d7c2 <rmw_create_publisher+0x196>
 800d6a0:	4a4f      	ldr	r2, [pc, #316]	@ (800d7e0 <rmw_create_publisher+0x1b4>)
 800d6a2:	462b      	mov	r3, r5
 800d6a4:	213c      	movs	r1, #60	@ 0x3c
 800d6a6:	4650      	mov	r0, sl
 800d6a8:	f009 fe8c 	bl	80173c4 <sniprintf>
 800d6ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d6b0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800d6b2:	4641      	mov	r1, r8
 800d6b4:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800d6b8:	2250      	movs	r2, #80	@ 0x50
 800d6ba:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800d6be:	f00a f824 	bl	801770a <memcpy>
 800d6c2:	f898 3008 	ldrb.w	r3, [r8, #8]
 800d6c6:	4947      	ldr	r1, [pc, #284]	@ (800d7e4 <rmw_create_publisher+0x1b8>)
 800d6c8:	2b02      	cmp	r3, #2
 800d6ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d6ce:	bf0c      	ite	eq
 800d6d0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800d6d4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800d6d8:	67a3      	str	r3, [r4, #120]	@ 0x78
 800d6da:	2300      	movs	r3, #0
 800d6dc:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800d6e0:	4630      	mov	r0, r6
 800d6e2:	f000 fd05 	bl	800e0f0 <get_message_typesupport_handle>
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	d06b      	beq.n	800d7c2 <rmw_create_publisher+0x196>
 800d6ea:	6842      	ldr	r2, [r0, #4]
 800d6ec:	61a2      	str	r2, [r4, #24]
 800d6ee:	2a00      	cmp	r2, #0
 800d6f0:	d067      	beq.n	800d7c2 <rmw_create_publisher+0x196>
 800d6f2:	4629      	mov	r1, r5
 800d6f4:	4643      	mov	r3, r8
 800d6f6:	4648      	mov	r0, r9
 800d6f8:	f007 fce4 	bl	80150c4 <create_topic>
 800d6fc:	6260      	str	r0, [r4, #36]	@ 0x24
 800d6fe:	2800      	cmp	r0, #0
 800d700:	d063      	beq.n	800d7ca <rmw_create_publisher+0x19e>
 800d702:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d706:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d70a:	2103      	movs	r1, #3
 800d70c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800d710:	1c42      	adds	r2, r0, #1
 800d712:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800d716:	f000 ff77 	bl	800e608 <uxr_object_id>
 800d71a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800d71e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d722:	6120      	str	r0, [r4, #16]
 800d724:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800d728:	6910      	ldr	r0, [r2, #16]
 800d72a:	2506      	movs	r5, #6
 800d72c:	9500      	str	r5, [sp, #0]
 800d72e:	6819      	ldr	r1, [r3, #0]
 800d730:	6922      	ldr	r2, [r4, #16]
 800d732:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800d736:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d73a:	f000 fdfd 	bl	800e338 <uxr_buffer_create_publisher_bin>
 800d73e:	4602      	mov	r2, r0
 800d740:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d744:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d748:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d74c:	f000 fc42 	bl	800dfd4 <run_xrce_session>
 800d750:	b3b8      	cbz	r0, 800d7c2 <rmw_create_publisher+0x196>
 800d752:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d756:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d75a:	2105      	movs	r1, #5
 800d75c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800d760:	1c42      	adds	r2, r0, #1
 800d762:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800d766:	f000 ff4f 	bl	800e608 <uxr_object_id>
 800d76a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d76e:	6160      	str	r0, [r4, #20]
 800d770:	691e      	ldr	r6, [r3, #16]
 800d772:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d776:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800d77a:	f10d 0a10 	add.w	sl, sp, #16
 800d77e:	4641      	mov	r1, r8
 800d780:	4650      	mov	r0, sl
 800d782:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800d786:	f000 fc41 	bl	800e00c <convert_qos_profile>
 800d78a:	9503      	str	r5, [sp, #12]
 800d78c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800d790:	9001      	str	r0, [sp, #4]
 800d792:	f8ad 1008 	strh.w	r1, [sp, #8]
 800d796:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d79a:	9300      	str	r3, [sp, #0]
 800d79c:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800d7a0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800d7a4:	f8d8 1000 	ldr.w	r1, [r8]
 800d7a8:	4630      	mov	r0, r6
 800d7aa:	f000 fdf5 	bl	800e398 <uxr_buffer_create_datawriter_bin>
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d7b4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d7b8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d7bc:	f000 fc0a 	bl	800dfd4 <run_xrce_session>
 800d7c0:	b938      	cbnz	r0, 800d7d2 <rmw_create_publisher+0x1a6>
 800d7c2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800d7c4:	b108      	cbz	r0, 800d7ca <rmw_create_publisher+0x19e>
 800d7c6:	f000 fb03 	bl	800ddd0 <rmw_uxrce_fini_topic_memory>
 800d7ca:	4638      	mov	r0, r7
 800d7cc:	f000 faa8 	bl	800dd20 <rmw_uxrce_fini_publisher_memory>
 800d7d0:	2700      	movs	r7, #0
 800d7d2:	4638      	mov	r0, r7
 800d7d4:	b007      	add	sp, #28
 800d7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7da:	bf00      	nop
 800d7dc:	2000adfc 	.word	0x2000adfc
 800d7e0:	080188dc 	.word	0x080188dc
 800d7e4:	080186b0 	.word	0x080186b0

0800d7e8 <rmw_publisher_get_actual_qos>:
 800d7e8:	b150      	cbz	r0, 800d800 <rmw_publisher_get_actual_qos+0x18>
 800d7ea:	b508      	push	{r3, lr}
 800d7ec:	460b      	mov	r3, r1
 800d7ee:	b149      	cbz	r1, 800d804 <rmw_publisher_get_actual_qos+0x1c>
 800d7f0:	6841      	ldr	r1, [r0, #4]
 800d7f2:	2250      	movs	r2, #80	@ 0x50
 800d7f4:	3128      	adds	r1, #40	@ 0x28
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f009 ff87 	bl	801770a <memcpy>
 800d7fc:	2000      	movs	r0, #0
 800d7fe:	bd08      	pop	{r3, pc}
 800d800:	200b      	movs	r0, #11
 800d802:	4770      	bx	lr
 800d804:	200b      	movs	r0, #11
 800d806:	bd08      	pop	{r3, pc}

0800d808 <rmw_destroy_publisher>:
 800d808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d80a:	b128      	cbz	r0, 800d818 <rmw_destroy_publisher+0x10>
 800d80c:	4604      	mov	r4, r0
 800d80e:	6800      	ldr	r0, [r0, #0]
 800d810:	460d      	mov	r5, r1
 800d812:	f000 fc5f 	bl	800e0d4 <is_uxrce_rmw_identifier_valid>
 800d816:	b910      	cbnz	r0, 800d81e <rmw_destroy_publisher+0x16>
 800d818:	2401      	movs	r4, #1
 800d81a:	4620      	mov	r0, r4
 800d81c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d81e:	6863      	ldr	r3, [r4, #4]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d0f9      	beq.n	800d818 <rmw_destroy_publisher+0x10>
 800d824:	2d00      	cmp	r5, #0
 800d826:	d0f7      	beq.n	800d818 <rmw_destroy_publisher+0x10>
 800d828:	6828      	ldr	r0, [r5, #0]
 800d82a:	f000 fc53 	bl	800e0d4 <is_uxrce_rmw_identifier_valid>
 800d82e:	2800      	cmp	r0, #0
 800d830:	d0f2      	beq.n	800d818 <rmw_destroy_publisher+0x10>
 800d832:	686c      	ldr	r4, [r5, #4]
 800d834:	2c00      	cmp	r4, #0
 800d836:	d0ef      	beq.n	800d818 <rmw_destroy_publisher+0x10>
 800d838:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800d83a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800d83e:	f007 fc91 	bl	8015164 <destroy_topic>
 800d842:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d846:	6962      	ldr	r2, [r4, #20]
 800d848:	6918      	ldr	r0, [r3, #16]
 800d84a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d84e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d852:	6819      	ldr	r1, [r3, #0]
 800d854:	f000 fcbc 	bl	800e1d0 <uxr_buffer_delete_entity>
 800d858:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d85c:	6922      	ldr	r2, [r4, #16]
 800d85e:	691b      	ldr	r3, [r3, #16]
 800d860:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800d864:	4604      	mov	r4, r0
 800d866:	6809      	ldr	r1, [r1, #0]
 800d868:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800d86c:	f000 fcb0 	bl	800e1d0 <uxr_buffer_delete_entity>
 800d870:	693e      	ldr	r6, [r7, #16]
 800d872:	4622      	mov	r2, r4
 800d874:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800d878:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800d87c:	4604      	mov	r4, r0
 800d87e:	4630      	mov	r0, r6
 800d880:	f000 fba8 	bl	800dfd4 <run_xrce_session>
 800d884:	693e      	ldr	r6, [r7, #16]
 800d886:	4622      	mov	r2, r4
 800d888:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800d88c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800d890:	4604      	mov	r4, r0
 800d892:	4630      	mov	r0, r6
 800d894:	f000 fb9e 	bl	800dfd4 <run_xrce_session>
 800d898:	b12c      	cbz	r4, 800d8a6 <rmw_destroy_publisher+0x9e>
 800d89a:	b120      	cbz	r0, 800d8a6 <rmw_destroy_publisher+0x9e>
 800d89c:	2400      	movs	r4, #0
 800d89e:	4628      	mov	r0, r5
 800d8a0:	f000 fa3e 	bl	800dd20 <rmw_uxrce_fini_publisher_memory>
 800d8a4:	e7b9      	b.n	800d81a <rmw_destroy_publisher+0x12>
 800d8a6:	2402      	movs	r4, #2
 800d8a8:	e7f9      	b.n	800d89e <rmw_destroy_publisher+0x96>
 800d8aa:	bf00      	nop

0800d8ac <rmw_destroy_service>:
 800d8ac:	b570      	push	{r4, r5, r6, lr}
 800d8ae:	b128      	cbz	r0, 800d8bc <rmw_destroy_service+0x10>
 800d8b0:	4604      	mov	r4, r0
 800d8b2:	6800      	ldr	r0, [r0, #0]
 800d8b4:	460d      	mov	r5, r1
 800d8b6:	f000 fc0d 	bl	800e0d4 <is_uxrce_rmw_identifier_valid>
 800d8ba:	b910      	cbnz	r0, 800d8c2 <rmw_destroy_service+0x16>
 800d8bc:	2401      	movs	r4, #1
 800d8be:	4620      	mov	r0, r4
 800d8c0:	bd70      	pop	{r4, r5, r6, pc}
 800d8c2:	6863      	ldr	r3, [r4, #4]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d0f9      	beq.n	800d8bc <rmw_destroy_service+0x10>
 800d8c8:	2d00      	cmp	r5, #0
 800d8ca:	d0f7      	beq.n	800d8bc <rmw_destroy_service+0x10>
 800d8cc:	6828      	ldr	r0, [r5, #0]
 800d8ce:	f000 fc01 	bl	800e0d4 <is_uxrce_rmw_identifier_valid>
 800d8d2:	2800      	cmp	r0, #0
 800d8d4:	d0f2      	beq.n	800d8bc <rmw_destroy_service+0x10>
 800d8d6:	686e      	ldr	r6, [r5, #4]
 800d8d8:	2e00      	cmp	r6, #0
 800d8da:	d0ef      	beq.n	800d8bc <rmw_destroy_service+0x10>
 800d8dc:	6864      	ldr	r4, [r4, #4]
 800d8de:	6932      	ldr	r2, [r6, #16]
 800d8e0:	6920      	ldr	r0, [r4, #16]
 800d8e2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d8e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d8ea:	6819      	ldr	r1, [r3, #0]
 800d8ec:	f000 febc 	bl	800e668 <uxr_buffer_cancel_data>
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	6920      	ldr	r0, [r4, #16]
 800d8f4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d8f8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d8fc:	f000 fb6a 	bl	800dfd4 <run_xrce_session>
 800d900:	6920      	ldr	r0, [r4, #16]
 800d902:	6932      	ldr	r2, [r6, #16]
 800d904:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d908:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d90c:	6819      	ldr	r1, [r3, #0]
 800d90e:	f000 fc5f 	bl	800e1d0 <uxr_buffer_delete_entity>
 800d912:	4602      	mov	r2, r0
 800d914:	6920      	ldr	r0, [r4, #16]
 800d916:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d91a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d91e:	f000 fb59 	bl	800dfd4 <run_xrce_session>
 800d922:	2800      	cmp	r0, #0
 800d924:	4628      	mov	r0, r5
 800d926:	bf14      	ite	ne
 800d928:	2400      	movne	r4, #0
 800d92a:	2402      	moveq	r4, #2
 800d92c:	f000 fa24 	bl	800dd78 <rmw_uxrce_fini_service_memory>
 800d930:	e7c5      	b.n	800d8be <rmw_destroy_service+0x12>
 800d932:	bf00      	nop

0800d934 <rmw_destroy_subscription>:
 800d934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d936:	b128      	cbz	r0, 800d944 <rmw_destroy_subscription+0x10>
 800d938:	4604      	mov	r4, r0
 800d93a:	6800      	ldr	r0, [r0, #0]
 800d93c:	460d      	mov	r5, r1
 800d93e:	f000 fbc9 	bl	800e0d4 <is_uxrce_rmw_identifier_valid>
 800d942:	b910      	cbnz	r0, 800d94a <rmw_destroy_subscription+0x16>
 800d944:	2401      	movs	r4, #1
 800d946:	4620      	mov	r0, r4
 800d948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d94a:	6863      	ldr	r3, [r4, #4]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d0f9      	beq.n	800d944 <rmw_destroy_subscription+0x10>
 800d950:	2d00      	cmp	r5, #0
 800d952:	d0f7      	beq.n	800d944 <rmw_destroy_subscription+0x10>
 800d954:	6828      	ldr	r0, [r5, #0]
 800d956:	f000 fbbd 	bl	800e0d4 <is_uxrce_rmw_identifier_valid>
 800d95a:	2800      	cmp	r0, #0
 800d95c:	d0f2      	beq.n	800d944 <rmw_destroy_subscription+0x10>
 800d95e:	686c      	ldr	r4, [r5, #4]
 800d960:	2c00      	cmp	r4, #0
 800d962:	d0ef      	beq.n	800d944 <rmw_destroy_subscription+0x10>
 800d964:	6a26      	ldr	r6, [r4, #32]
 800d966:	6962      	ldr	r2, [r4, #20]
 800d968:	6930      	ldr	r0, [r6, #16]
 800d96a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d96e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d972:	6819      	ldr	r1, [r3, #0]
 800d974:	f000 fe78 	bl	800e668 <uxr_buffer_cancel_data>
 800d978:	4602      	mov	r2, r0
 800d97a:	6930      	ldr	r0, [r6, #16]
 800d97c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d980:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d984:	f000 fb26 	bl	800dfd4 <run_xrce_session>
 800d988:	69e0      	ldr	r0, [r4, #28]
 800d98a:	f007 fbeb 	bl	8015164 <destroy_topic>
 800d98e:	6a23      	ldr	r3, [r4, #32]
 800d990:	6962      	ldr	r2, [r4, #20]
 800d992:	6918      	ldr	r0, [r3, #16]
 800d994:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d998:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d99c:	6819      	ldr	r1, [r3, #0]
 800d99e:	f000 fc17 	bl	800e1d0 <uxr_buffer_delete_entity>
 800d9a2:	6a23      	ldr	r3, [r4, #32]
 800d9a4:	6922      	ldr	r2, [r4, #16]
 800d9a6:	691b      	ldr	r3, [r3, #16]
 800d9a8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800d9ac:	4604      	mov	r4, r0
 800d9ae:	6809      	ldr	r1, [r1, #0]
 800d9b0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800d9b4:	f000 fc0c 	bl	800e1d0 <uxr_buffer_delete_entity>
 800d9b8:	6937      	ldr	r7, [r6, #16]
 800d9ba:	4622      	mov	r2, r4
 800d9bc:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800d9c0:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800d9c4:	4604      	mov	r4, r0
 800d9c6:	4638      	mov	r0, r7
 800d9c8:	f000 fb04 	bl	800dfd4 <run_xrce_session>
 800d9cc:	6936      	ldr	r6, [r6, #16]
 800d9ce:	4622      	mov	r2, r4
 800d9d0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800d9d4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800d9d8:	4604      	mov	r4, r0
 800d9da:	4630      	mov	r0, r6
 800d9dc:	f000 fafa 	bl	800dfd4 <run_xrce_session>
 800d9e0:	b12c      	cbz	r4, 800d9ee <rmw_destroy_subscription+0xba>
 800d9e2:	b120      	cbz	r0, 800d9ee <rmw_destroy_subscription+0xba>
 800d9e4:	2400      	movs	r4, #0
 800d9e6:	4628      	mov	r0, r5
 800d9e8:	f000 f9b0 	bl	800dd4c <rmw_uxrce_fini_subscription_memory>
 800d9ec:	e7ab      	b.n	800d946 <rmw_destroy_subscription+0x12>
 800d9ee:	2402      	movs	r4, #2
 800d9f0:	e7f9      	b.n	800d9e6 <rmw_destroy_subscription+0xb2>
 800d9f2:	bf00      	nop

0800d9f4 <rmw_uxrce_transport_init>:
 800d9f4:	b508      	push	{r3, lr}
 800d9f6:	b108      	cbz	r0, 800d9fc <rmw_uxrce_transport_init+0x8>
 800d9f8:	f100 0210 	add.w	r2, r0, #16
 800d9fc:	b139      	cbz	r1, 800da0e <rmw_uxrce_transport_init+0x1a>
 800d9fe:	6949      	ldr	r1, [r1, #20]
 800da00:	4610      	mov	r0, r2
 800da02:	f000 fdc9 	bl	800e598 <uxr_init_custom_transport>
 800da06:	f080 0001 	eor.w	r0, r0, #1
 800da0a:	b2c0      	uxtb	r0, r0
 800da0c:	bd08      	pop	{r3, pc}
 800da0e:	4b04      	ldr	r3, [pc, #16]	@ (800da20 <rmw_uxrce_transport_init+0x2c>)
 800da10:	4610      	mov	r0, r2
 800da12:	6859      	ldr	r1, [r3, #4]
 800da14:	f000 fdc0 	bl	800e598 <uxr_init_custom_transport>
 800da18:	f080 0001 	eor.w	r0, r0, #1
 800da1c:	b2c0      	uxtb	r0, r0
 800da1e:	bd08      	pop	{r3, pc}
 800da20:	200064c4 	.word	0x200064c4

0800da24 <rmw_uxrce_init_service_memory>:
 800da24:	b1e2      	cbz	r2, 800da60 <rmw_uxrce_init_service_memory+0x3c>
 800da26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da2a:	7b05      	ldrb	r5, [r0, #12]
 800da2c:	4606      	mov	r6, r0
 800da2e:	b9ad      	cbnz	r5, 800da5c <rmw_uxrce_init_service_memory+0x38>
 800da30:	23c8      	movs	r3, #200	@ 0xc8
 800da32:	e9c0 5500 	strd	r5, r5, [r0]
 800da36:	6083      	str	r3, [r0, #8]
 800da38:	f240 1301 	movw	r3, #257	@ 0x101
 800da3c:	4617      	mov	r7, r2
 800da3e:	8183      	strh	r3, [r0, #12]
 800da40:	460c      	mov	r4, r1
 800da42:	46a8      	mov	r8, r5
 800da44:	4621      	mov	r1, r4
 800da46:	4630      	mov	r0, r6
 800da48:	3501      	adds	r5, #1
 800da4a:	f007 fadd 	bl	8015008 <put_memory>
 800da4e:	42af      	cmp	r7, r5
 800da50:	60a4      	str	r4, [r4, #8]
 800da52:	f884 800c 	strb.w	r8, [r4, #12]
 800da56:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800da5a:	d1f3      	bne.n	800da44 <rmw_uxrce_init_service_memory+0x20>
 800da5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da60:	4770      	bx	lr
 800da62:	bf00      	nop

0800da64 <rmw_uxrce_init_client_memory>:
 800da64:	b1e2      	cbz	r2, 800daa0 <rmw_uxrce_init_client_memory+0x3c>
 800da66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da6a:	7b05      	ldrb	r5, [r0, #12]
 800da6c:	4606      	mov	r6, r0
 800da6e:	b9ad      	cbnz	r5, 800da9c <rmw_uxrce_init_client_memory+0x38>
 800da70:	23c8      	movs	r3, #200	@ 0xc8
 800da72:	e9c0 5500 	strd	r5, r5, [r0]
 800da76:	6083      	str	r3, [r0, #8]
 800da78:	f240 1301 	movw	r3, #257	@ 0x101
 800da7c:	4617      	mov	r7, r2
 800da7e:	8183      	strh	r3, [r0, #12]
 800da80:	460c      	mov	r4, r1
 800da82:	46a8      	mov	r8, r5
 800da84:	4621      	mov	r1, r4
 800da86:	4630      	mov	r0, r6
 800da88:	3501      	adds	r5, #1
 800da8a:	f007 fabd 	bl	8015008 <put_memory>
 800da8e:	42af      	cmp	r7, r5
 800da90:	60a4      	str	r4, [r4, #8]
 800da92:	f884 800c 	strb.w	r8, [r4, #12]
 800da96:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800da9a:	d1f3      	bne.n	800da84 <rmw_uxrce_init_client_memory+0x20>
 800da9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daa0:	4770      	bx	lr
 800daa2:	bf00      	nop

0800daa4 <rmw_uxrce_init_publisher_memory>:
 800daa4:	b1e2      	cbz	r2, 800dae0 <rmw_uxrce_init_publisher_memory+0x3c>
 800daa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daaa:	7b05      	ldrb	r5, [r0, #12]
 800daac:	4606      	mov	r6, r0
 800daae:	b9ad      	cbnz	r5, 800dadc <rmw_uxrce_init_publisher_memory+0x38>
 800dab0:	23d8      	movs	r3, #216	@ 0xd8
 800dab2:	e9c0 5500 	strd	r5, r5, [r0]
 800dab6:	6083      	str	r3, [r0, #8]
 800dab8:	f240 1301 	movw	r3, #257	@ 0x101
 800dabc:	4617      	mov	r7, r2
 800dabe:	8183      	strh	r3, [r0, #12]
 800dac0:	460c      	mov	r4, r1
 800dac2:	46a8      	mov	r8, r5
 800dac4:	4621      	mov	r1, r4
 800dac6:	4630      	mov	r0, r6
 800dac8:	3501      	adds	r5, #1
 800daca:	f007 fa9d 	bl	8015008 <put_memory>
 800dace:	42af      	cmp	r7, r5
 800dad0:	60a4      	str	r4, [r4, #8]
 800dad2:	f884 800c 	strb.w	r8, [r4, #12]
 800dad6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800dada:	d1f3      	bne.n	800dac4 <rmw_uxrce_init_publisher_memory+0x20>
 800dadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dae0:	4770      	bx	lr
 800dae2:	bf00      	nop

0800dae4 <rmw_uxrce_init_subscription_memory>:
 800dae4:	b1e2      	cbz	r2, 800db20 <rmw_uxrce_init_subscription_memory+0x3c>
 800dae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daea:	7b05      	ldrb	r5, [r0, #12]
 800daec:	4606      	mov	r6, r0
 800daee:	b9ad      	cbnz	r5, 800db1c <rmw_uxrce_init_subscription_memory+0x38>
 800daf0:	23d8      	movs	r3, #216	@ 0xd8
 800daf2:	e9c0 5500 	strd	r5, r5, [r0]
 800daf6:	6083      	str	r3, [r0, #8]
 800daf8:	f240 1301 	movw	r3, #257	@ 0x101
 800dafc:	4617      	mov	r7, r2
 800dafe:	8183      	strh	r3, [r0, #12]
 800db00:	460c      	mov	r4, r1
 800db02:	46a8      	mov	r8, r5
 800db04:	4621      	mov	r1, r4
 800db06:	4630      	mov	r0, r6
 800db08:	3501      	adds	r5, #1
 800db0a:	f007 fa7d 	bl	8015008 <put_memory>
 800db0e:	42af      	cmp	r7, r5
 800db10:	60a4      	str	r4, [r4, #8]
 800db12:	f884 800c 	strb.w	r8, [r4, #12]
 800db16:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800db1a:	d1f3      	bne.n	800db04 <rmw_uxrce_init_subscription_memory+0x20>
 800db1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db20:	4770      	bx	lr
 800db22:	bf00      	nop

0800db24 <rmw_uxrce_init_node_memory>:
 800db24:	b1e2      	cbz	r2, 800db60 <rmw_uxrce_init_node_memory+0x3c>
 800db26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db2a:	7b05      	ldrb	r5, [r0, #12]
 800db2c:	4606      	mov	r6, r0
 800db2e:	b9ad      	cbnz	r5, 800db5c <rmw_uxrce_init_node_memory+0x38>
 800db30:	23a4      	movs	r3, #164	@ 0xa4
 800db32:	e9c0 5500 	strd	r5, r5, [r0]
 800db36:	6083      	str	r3, [r0, #8]
 800db38:	f240 1301 	movw	r3, #257	@ 0x101
 800db3c:	4617      	mov	r7, r2
 800db3e:	8183      	strh	r3, [r0, #12]
 800db40:	460c      	mov	r4, r1
 800db42:	46a8      	mov	r8, r5
 800db44:	4621      	mov	r1, r4
 800db46:	4630      	mov	r0, r6
 800db48:	3501      	adds	r5, #1
 800db4a:	f007 fa5d 	bl	8015008 <put_memory>
 800db4e:	42af      	cmp	r7, r5
 800db50:	60a4      	str	r4, [r4, #8]
 800db52:	f884 800c 	strb.w	r8, [r4, #12]
 800db56:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800db5a:	d1f3      	bne.n	800db44 <rmw_uxrce_init_node_memory+0x20>
 800db5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db60:	4770      	bx	lr
 800db62:	bf00      	nop

0800db64 <rmw_uxrce_init_session_memory>:
 800db64:	b1ea      	cbz	r2, 800dba2 <rmw_uxrce_init_session_memory+0x3e>
 800db66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db6a:	7b05      	ldrb	r5, [r0, #12]
 800db6c:	4606      	mov	r6, r0
 800db6e:	b9b5      	cbnz	r5, 800db9e <rmw_uxrce_init_session_memory+0x3a>
 800db70:	e9c0 5500 	strd	r5, r5, [r0]
 800db74:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800db78:	f240 1301 	movw	r3, #257	@ 0x101
 800db7c:	4617      	mov	r7, r2
 800db7e:	f8c0 8008 	str.w	r8, [r0, #8]
 800db82:	460c      	mov	r4, r1
 800db84:	8183      	strh	r3, [r0, #12]
 800db86:	46a9      	mov	r9, r5
 800db88:	4621      	mov	r1, r4
 800db8a:	4630      	mov	r0, r6
 800db8c:	3501      	adds	r5, #1
 800db8e:	f007 fa3b 	bl	8015008 <put_memory>
 800db92:	42af      	cmp	r7, r5
 800db94:	60a4      	str	r4, [r4, #8]
 800db96:	f884 900c 	strb.w	r9, [r4, #12]
 800db9a:	4444      	add	r4, r8
 800db9c:	d1f4      	bne.n	800db88 <rmw_uxrce_init_session_memory+0x24>
 800db9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dba2:	4770      	bx	lr

0800dba4 <rmw_uxrce_init_topic_memory>:
 800dba4:	b1e2      	cbz	r2, 800dbe0 <rmw_uxrce_init_topic_memory+0x3c>
 800dba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbaa:	7b05      	ldrb	r5, [r0, #12]
 800dbac:	4606      	mov	r6, r0
 800dbae:	b9ad      	cbnz	r5, 800dbdc <rmw_uxrce_init_topic_memory+0x38>
 800dbb0:	231c      	movs	r3, #28
 800dbb2:	e9c0 5500 	strd	r5, r5, [r0]
 800dbb6:	6083      	str	r3, [r0, #8]
 800dbb8:	f240 1301 	movw	r3, #257	@ 0x101
 800dbbc:	4617      	mov	r7, r2
 800dbbe:	8183      	strh	r3, [r0, #12]
 800dbc0:	460c      	mov	r4, r1
 800dbc2:	46a8      	mov	r8, r5
 800dbc4:	4621      	mov	r1, r4
 800dbc6:	4630      	mov	r0, r6
 800dbc8:	3501      	adds	r5, #1
 800dbca:	f007 fa1d 	bl	8015008 <put_memory>
 800dbce:	42af      	cmp	r7, r5
 800dbd0:	60a4      	str	r4, [r4, #8]
 800dbd2:	f884 800c 	strb.w	r8, [r4, #12]
 800dbd6:	f104 041c 	add.w	r4, r4, #28
 800dbda:	d1f3      	bne.n	800dbc4 <rmw_uxrce_init_topic_memory+0x20>
 800dbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbe0:	4770      	bx	lr
 800dbe2:	bf00      	nop

0800dbe4 <rmw_uxrce_init_static_input_buffer_memory>:
 800dbe4:	b1ea      	cbz	r2, 800dc22 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800dbe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbea:	7b05      	ldrb	r5, [r0, #12]
 800dbec:	4606      	mov	r6, r0
 800dbee:	b9b5      	cbnz	r5, 800dc1e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800dbf0:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800dbf4:	e9c0 5500 	strd	r5, r5, [r0]
 800dbf8:	6083      	str	r3, [r0, #8]
 800dbfa:	f240 1301 	movw	r3, #257	@ 0x101
 800dbfe:	4617      	mov	r7, r2
 800dc00:	8183      	strh	r3, [r0, #12]
 800dc02:	460c      	mov	r4, r1
 800dc04:	46a8      	mov	r8, r5
 800dc06:	4621      	mov	r1, r4
 800dc08:	4630      	mov	r0, r6
 800dc0a:	3501      	adds	r5, #1
 800dc0c:	f007 f9fc 	bl	8015008 <put_memory>
 800dc10:	42af      	cmp	r7, r5
 800dc12:	60a4      	str	r4, [r4, #8]
 800dc14:	f884 800c 	strb.w	r8, [r4, #12]
 800dc18:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800dc1c:	d1f3      	bne.n	800dc06 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800dc1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc22:	4770      	bx	lr

0800dc24 <rmw_uxrce_init_init_options_impl_memory>:
 800dc24:	b1e2      	cbz	r2, 800dc60 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800dc26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc2a:	7b05      	ldrb	r5, [r0, #12]
 800dc2c:	4606      	mov	r6, r0
 800dc2e:	b9ad      	cbnz	r5, 800dc5c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800dc30:	232c      	movs	r3, #44	@ 0x2c
 800dc32:	e9c0 5500 	strd	r5, r5, [r0]
 800dc36:	6083      	str	r3, [r0, #8]
 800dc38:	f240 1301 	movw	r3, #257	@ 0x101
 800dc3c:	4617      	mov	r7, r2
 800dc3e:	8183      	strh	r3, [r0, #12]
 800dc40:	460c      	mov	r4, r1
 800dc42:	46a8      	mov	r8, r5
 800dc44:	4621      	mov	r1, r4
 800dc46:	4630      	mov	r0, r6
 800dc48:	3501      	adds	r5, #1
 800dc4a:	f007 f9dd 	bl	8015008 <put_memory>
 800dc4e:	42af      	cmp	r7, r5
 800dc50:	60a4      	str	r4, [r4, #8]
 800dc52:	f884 800c 	strb.w	r8, [r4, #12]
 800dc56:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800dc5a:	d1f3      	bne.n	800dc44 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800dc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc60:	4770      	bx	lr
 800dc62:	bf00      	nop

0800dc64 <rmw_uxrce_init_wait_set_memory>:
 800dc64:	b1e2      	cbz	r2, 800dca0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800dc66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc6a:	7b05      	ldrb	r5, [r0, #12]
 800dc6c:	4606      	mov	r6, r0
 800dc6e:	b9ad      	cbnz	r5, 800dc9c <rmw_uxrce_init_wait_set_memory+0x38>
 800dc70:	231c      	movs	r3, #28
 800dc72:	e9c0 5500 	strd	r5, r5, [r0]
 800dc76:	6083      	str	r3, [r0, #8]
 800dc78:	f240 1301 	movw	r3, #257	@ 0x101
 800dc7c:	4617      	mov	r7, r2
 800dc7e:	8183      	strh	r3, [r0, #12]
 800dc80:	460c      	mov	r4, r1
 800dc82:	46a8      	mov	r8, r5
 800dc84:	4621      	mov	r1, r4
 800dc86:	4630      	mov	r0, r6
 800dc88:	3501      	adds	r5, #1
 800dc8a:	f007 f9bd 	bl	8015008 <put_memory>
 800dc8e:	42af      	cmp	r7, r5
 800dc90:	60a4      	str	r4, [r4, #8]
 800dc92:	f884 800c 	strb.w	r8, [r4, #12]
 800dc96:	f104 041c 	add.w	r4, r4, #28
 800dc9a:	d1f3      	bne.n	800dc84 <rmw_uxrce_init_wait_set_memory+0x20>
 800dc9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dca0:	4770      	bx	lr
 800dca2:	bf00      	nop

0800dca4 <rmw_uxrce_init_guard_condition_memory>:
 800dca4:	b1e2      	cbz	r2, 800dce0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800dca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcaa:	7b05      	ldrb	r5, [r0, #12]
 800dcac:	4606      	mov	r6, r0
 800dcae:	b9ad      	cbnz	r5, 800dcdc <rmw_uxrce_init_guard_condition_memory+0x38>
 800dcb0:	2320      	movs	r3, #32
 800dcb2:	e9c0 5500 	strd	r5, r5, [r0]
 800dcb6:	6083      	str	r3, [r0, #8]
 800dcb8:	f240 1301 	movw	r3, #257	@ 0x101
 800dcbc:	4617      	mov	r7, r2
 800dcbe:	8183      	strh	r3, [r0, #12]
 800dcc0:	460c      	mov	r4, r1
 800dcc2:	46a8      	mov	r8, r5
 800dcc4:	4621      	mov	r1, r4
 800dcc6:	4630      	mov	r0, r6
 800dcc8:	3501      	adds	r5, #1
 800dcca:	f007 f99d 	bl	8015008 <put_memory>
 800dcce:	42af      	cmp	r7, r5
 800dcd0:	60a4      	str	r4, [r4, #8]
 800dcd2:	f884 800c 	strb.w	r8, [r4, #12]
 800dcd6:	f104 0420 	add.w	r4, r4, #32
 800dcda:	d1f3      	bne.n	800dcc4 <rmw_uxrce_init_guard_condition_memory+0x20>
 800dcdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dce0:	4770      	bx	lr
 800dce2:	bf00      	nop

0800dce4 <rmw_uxrce_fini_session_memory>:
 800dce4:	4601      	mov	r1, r0
 800dce6:	4801      	ldr	r0, [pc, #4]	@ (800dcec <rmw_uxrce_fini_session_memory+0x8>)
 800dce8:	f007 b98e 	b.w	8015008 <put_memory>
 800dcec:	2000ae1c 	.word	0x2000ae1c

0800dcf0 <rmw_uxrce_fini_node_memory>:
 800dcf0:	b538      	push	{r3, r4, r5, lr}
 800dcf2:	4604      	mov	r4, r0
 800dcf4:	6800      	ldr	r0, [r0, #0]
 800dcf6:	b128      	cbz	r0, 800dd04 <rmw_uxrce_fini_node_memory+0x14>
 800dcf8:	4b07      	ldr	r3, [pc, #28]	@ (800dd18 <rmw_uxrce_fini_node_memory+0x28>)
 800dcfa:	6819      	ldr	r1, [r3, #0]
 800dcfc:	f7f2 fa90 	bl	8000220 <strcmp>
 800dd00:	b940      	cbnz	r0, 800dd14 <rmw_uxrce_fini_node_memory+0x24>
 800dd02:	6020      	str	r0, [r4, #0]
 800dd04:	6861      	ldr	r1, [r4, #4]
 800dd06:	b129      	cbz	r1, 800dd14 <rmw_uxrce_fini_node_memory+0x24>
 800dd08:	2500      	movs	r5, #0
 800dd0a:	4804      	ldr	r0, [pc, #16]	@ (800dd1c <rmw_uxrce_fini_node_memory+0x2c>)
 800dd0c:	610d      	str	r5, [r1, #16]
 800dd0e:	f007 f97b 	bl	8015008 <put_memory>
 800dd12:	6065      	str	r5, [r4, #4]
 800dd14:	bd38      	pop	{r3, r4, r5, pc}
 800dd16:	bf00      	nop
 800dd18:	08019068 	.word	0x08019068
 800dd1c:	2000adec 	.word	0x2000adec

0800dd20 <rmw_uxrce_fini_publisher_memory>:
 800dd20:	b510      	push	{r4, lr}
 800dd22:	4604      	mov	r4, r0
 800dd24:	6800      	ldr	r0, [r0, #0]
 800dd26:	b128      	cbz	r0, 800dd34 <rmw_uxrce_fini_publisher_memory+0x14>
 800dd28:	4b06      	ldr	r3, [pc, #24]	@ (800dd44 <rmw_uxrce_fini_publisher_memory+0x24>)
 800dd2a:	6819      	ldr	r1, [r3, #0]
 800dd2c:	f7f2 fa78 	bl	8000220 <strcmp>
 800dd30:	b938      	cbnz	r0, 800dd42 <rmw_uxrce_fini_publisher_memory+0x22>
 800dd32:	6020      	str	r0, [r4, #0]
 800dd34:	6861      	ldr	r1, [r4, #4]
 800dd36:	b121      	cbz	r1, 800dd42 <rmw_uxrce_fini_publisher_memory+0x22>
 800dd38:	4803      	ldr	r0, [pc, #12]	@ (800dd48 <rmw_uxrce_fini_publisher_memory+0x28>)
 800dd3a:	f007 f965 	bl	8015008 <put_memory>
 800dd3e:	2300      	movs	r3, #0
 800dd40:	6063      	str	r3, [r4, #4]
 800dd42:	bd10      	pop	{r4, pc}
 800dd44:	08019068 	.word	0x08019068
 800dd48:	2000adfc 	.word	0x2000adfc

0800dd4c <rmw_uxrce_fini_subscription_memory>:
 800dd4c:	b510      	push	{r4, lr}
 800dd4e:	4604      	mov	r4, r0
 800dd50:	6800      	ldr	r0, [r0, #0]
 800dd52:	b128      	cbz	r0, 800dd60 <rmw_uxrce_fini_subscription_memory+0x14>
 800dd54:	4b06      	ldr	r3, [pc, #24]	@ (800dd70 <rmw_uxrce_fini_subscription_memory+0x24>)
 800dd56:	6819      	ldr	r1, [r3, #0]
 800dd58:	f7f2 fa62 	bl	8000220 <strcmp>
 800dd5c:	b938      	cbnz	r0, 800dd6e <rmw_uxrce_fini_subscription_memory+0x22>
 800dd5e:	6020      	str	r0, [r4, #0]
 800dd60:	6861      	ldr	r1, [r4, #4]
 800dd62:	b121      	cbz	r1, 800dd6e <rmw_uxrce_fini_subscription_memory+0x22>
 800dd64:	4803      	ldr	r0, [pc, #12]	@ (800dd74 <rmw_uxrce_fini_subscription_memory+0x28>)
 800dd66:	f007 f94f 	bl	8015008 <put_memory>
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	6063      	str	r3, [r4, #4]
 800dd6e:	bd10      	pop	{r4, pc}
 800dd70:	08019068 	.word	0x08019068
 800dd74:	2000ae3c 	.word	0x2000ae3c

0800dd78 <rmw_uxrce_fini_service_memory>:
 800dd78:	b510      	push	{r4, lr}
 800dd7a:	4604      	mov	r4, r0
 800dd7c:	6800      	ldr	r0, [r0, #0]
 800dd7e:	b128      	cbz	r0, 800dd8c <rmw_uxrce_fini_service_memory+0x14>
 800dd80:	4b06      	ldr	r3, [pc, #24]	@ (800dd9c <rmw_uxrce_fini_service_memory+0x24>)
 800dd82:	6819      	ldr	r1, [r3, #0]
 800dd84:	f7f2 fa4c 	bl	8000220 <strcmp>
 800dd88:	b938      	cbnz	r0, 800dd9a <rmw_uxrce_fini_service_memory+0x22>
 800dd8a:	6020      	str	r0, [r4, #0]
 800dd8c:	6861      	ldr	r1, [r4, #4]
 800dd8e:	b121      	cbz	r1, 800dd9a <rmw_uxrce_fini_service_memory+0x22>
 800dd90:	4803      	ldr	r0, [pc, #12]	@ (800dda0 <rmw_uxrce_fini_service_memory+0x28>)
 800dd92:	f007 f939 	bl	8015008 <put_memory>
 800dd96:	2300      	movs	r3, #0
 800dd98:	6063      	str	r3, [r4, #4]
 800dd9a:	bd10      	pop	{r4, pc}
 800dd9c:	08019068 	.word	0x08019068
 800dda0:	2000ae0c 	.word	0x2000ae0c

0800dda4 <rmw_uxrce_fini_client_memory>:
 800dda4:	b510      	push	{r4, lr}
 800dda6:	4604      	mov	r4, r0
 800dda8:	6800      	ldr	r0, [r0, #0]
 800ddaa:	b128      	cbz	r0, 800ddb8 <rmw_uxrce_fini_client_memory+0x14>
 800ddac:	4b06      	ldr	r3, [pc, #24]	@ (800ddc8 <rmw_uxrce_fini_client_memory+0x24>)
 800ddae:	6819      	ldr	r1, [r3, #0]
 800ddb0:	f7f2 fa36 	bl	8000220 <strcmp>
 800ddb4:	b938      	cbnz	r0, 800ddc6 <rmw_uxrce_fini_client_memory+0x22>
 800ddb6:	6020      	str	r0, [r4, #0]
 800ddb8:	6861      	ldr	r1, [r4, #4]
 800ddba:	b121      	cbz	r1, 800ddc6 <rmw_uxrce_fini_client_memory+0x22>
 800ddbc:	4803      	ldr	r0, [pc, #12]	@ (800ddcc <rmw_uxrce_fini_client_memory+0x28>)
 800ddbe:	f007 f923 	bl	8015008 <put_memory>
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	6063      	str	r3, [r4, #4]
 800ddc6:	bd10      	pop	{r4, pc}
 800ddc8:	08019068 	.word	0x08019068
 800ddcc:	2000651c 	.word	0x2000651c

0800ddd0 <rmw_uxrce_fini_topic_memory>:
 800ddd0:	b510      	push	{r4, lr}
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	4621      	mov	r1, r4
 800ddd6:	4803      	ldr	r0, [pc, #12]	@ (800dde4 <rmw_uxrce_fini_topic_memory+0x14>)
 800ddd8:	f007 f916 	bl	8015008 <put_memory>
 800dddc:	2300      	movs	r3, #0
 800ddde:	61a3      	str	r3, [r4, #24]
 800dde0:	bd10      	pop	{r4, pc}
 800dde2:	bf00      	nop
 800dde4:	2000ae4c 	.word	0x2000ae4c

0800dde8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800dde8:	b082      	sub	sp, #8
 800ddea:	b530      	push	{r4, r5, lr}
 800ddec:	4925      	ldr	r1, [pc, #148]	@ (800de84 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ddee:	680d      	ldr	r5, [r1, #0]
 800ddf0:	ac03      	add	r4, sp, #12
 800ddf2:	e884 000c 	stmia.w	r4, {r2, r3}
 800ddf6:	461c      	mov	r4, r3
 800ddf8:	2d00      	cmp	r5, #0
 800ddfa:	d041      	beq.n	800de80 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800ddfc:	462b      	mov	r3, r5
 800ddfe:	2100      	movs	r1, #0
 800de00:	689a      	ldr	r2, [r3, #8]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800de08:	4290      	cmp	r0, r2
 800de0a:	bf08      	it	eq
 800de0c:	3101      	addeq	r1, #1
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d1f6      	bne.n	800de00 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800de12:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800de16:	2b02      	cmp	r3, #2
 800de18:	d029      	beq.n	800de6e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800de1a:	d907      	bls.n	800de2c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800de1c:	2b03      	cmp	r3, #3
 800de1e:	d005      	beq.n	800de2c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800de20:	2100      	movs	r1, #0
 800de22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de26:	4608      	mov	r0, r1
 800de28:	b002      	add	sp, #8
 800de2a:	4770      	bx	lr
 800de2c:	b314      	cbz	r4, 800de74 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800de2e:	428c      	cmp	r4, r1
 800de30:	d820      	bhi.n	800de74 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800de32:	2d00      	cmp	r5, #0
 800de34:	d0f4      	beq.n	800de20 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800de36:	2100      	movs	r1, #0
 800de38:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800de3c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800de40:	e002      	b.n	800de48 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800de42:	686d      	ldr	r5, [r5, #4]
 800de44:	2d00      	cmp	r5, #0
 800de46:	d0ec      	beq.n	800de22 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800de48:	68ab      	ldr	r3, [r5, #8]
 800de4a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800de4e:	4290      	cmp	r0, r2
 800de50:	d1f7      	bne.n	800de42 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800de52:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800de56:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800de5a:	4562      	cmp	r2, ip
 800de5c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800de60:	eb73 0e04 	sbcs.w	lr, r3, r4
 800de64:	daed      	bge.n	800de42 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800de66:	4694      	mov	ip, r2
 800de68:	461c      	mov	r4, r3
 800de6a:	4629      	mov	r1, r5
 800de6c:	e7e9      	b.n	800de42 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800de6e:	b10c      	cbz	r4, 800de74 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800de70:	428c      	cmp	r4, r1
 800de72:	d9d5      	bls.n	800de20 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800de74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de78:	4802      	ldr	r0, [pc, #8]	@ (800de84 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800de7a:	b002      	add	sp, #8
 800de7c:	f007 b8b4 	b.w	8014fe8 <get_memory>
 800de80:	4629      	mov	r1, r5
 800de82:	e7c6      	b.n	800de12 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800de84:	2000ae2c 	.word	0x2000ae2c

0800de88 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800de88:	4b11      	ldr	r3, [pc, #68]	@ (800ded0 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	b530      	push	{r4, r5, lr}
 800de8e:	b1e3      	cbz	r3, 800deca <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800de90:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800de94:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800de98:	2400      	movs	r4, #0
 800de9a:	e001      	b.n	800dea0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	b193      	cbz	r3, 800dec6 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800dea0:	689a      	ldr	r2, [r3, #8]
 800dea2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800dea6:	4288      	cmp	r0, r1
 800dea8:	d1f8      	bne.n	800de9c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800deaa:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800deae:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800deb2:	4571      	cmp	r1, lr
 800deb4:	eb72 050c 	sbcs.w	r5, r2, ip
 800deb8:	daf0      	bge.n	800de9c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800deba:	461c      	mov	r4, r3
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	468e      	mov	lr, r1
 800dec0:	4694      	mov	ip, r2
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d1ec      	bne.n	800dea0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800dec6:	4620      	mov	r0, r4
 800dec8:	bd30      	pop	{r4, r5, pc}
 800deca:	461c      	mov	r4, r3
 800decc:	4620      	mov	r0, r4
 800dece:	bd30      	pop	{r4, r5, pc}
 800ded0:	2000ae2c 	.word	0x2000ae2c
 800ded4:	00000000 	.word	0x00000000

0800ded8 <rmw_uxrce_clean_expired_static_input_buffer>:
 800ded8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dedc:	4b3c      	ldr	r3, [pc, #240]	@ (800dfd0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800dede:	ed2d 8b06 	vpush	{d8-d10}
 800dee2:	681f      	ldr	r7, [r3, #0]
 800dee4:	b08d      	sub	sp, #52	@ 0x34
 800dee6:	f007 fc9b 	bl	8015820 <rmw_uros_epoch_nanos>
 800deea:	2f00      	cmp	r7, #0
 800deec:	d05d      	beq.n	800dfaa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800deee:	46b8      	mov	r8, r7
 800def0:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800dfb8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800def4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800def8:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800defc:	2b04      	cmp	r3, #4
 800defe:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800dfc0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800df02:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800dfc8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800df06:	4681      	mov	r9, r0
 800df08:	468a      	mov	sl, r1
 800df0a:	ac04      	add	r4, sp, #16
 800df0c:	d03f      	beq.n	800df8e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800df0e:	2b05      	cmp	r3, #5
 800df10:	d044      	beq.n	800df9c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800df12:	2b03      	cmp	r3, #3
 800df14:	d03b      	beq.n	800df8e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800df16:	ed8d 8b04 	vstr	d8, [sp, #16]
 800df1a:	ed8d ab06 	vstr	d10, [sp, #24]
 800df1e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800df22:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800df26:	ab08      	add	r3, sp, #32
 800df28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df2a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800df2e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800df32:	f006 fda5 	bl	8014a80 <rmw_time_equal>
 800df36:	b118      	cbz	r0, 800df40 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800df38:	ed8d 9b04 	vstr	d9, [sp, #16]
 800df3c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800df40:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800df44:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800df48:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800df4c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800df50:	f006 fdea 	bl	8014b28 <rmw_time_total_nsec>
 800df54:	1830      	adds	r0, r6, r0
 800df56:	eb47 0101 	adc.w	r1, r7, r1
 800df5a:	4548      	cmp	r0, r9
 800df5c:	eb71 030a 	sbcs.w	r3, r1, sl
 800df60:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800df64:	db05      	blt.n	800df72 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800df66:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800df6a:	4591      	cmp	r9, r2
 800df6c:	eb7a 0303 	sbcs.w	r3, sl, r3
 800df70:	da03      	bge.n	800df7a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800df72:	4817      	ldr	r0, [pc, #92]	@ (800dfd0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800df74:	4641      	mov	r1, r8
 800df76:	f007 f847 	bl	8015008 <put_memory>
 800df7a:	f1bb 0f00 	cmp.w	fp, #0
 800df7e:	d014      	beq.n	800dfaa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800df80:	46d8      	mov	r8, fp
 800df82:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800df86:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800df8a:	2b04      	cmp	r3, #4
 800df8c:	d1bf      	bne.n	800df0e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800df8e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800df92:	3340      	adds	r3, #64	@ 0x40
 800df94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800df9a:	e7c0      	b.n	800df1e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800df9c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800dfa0:	3348      	adds	r3, #72	@ 0x48
 800dfa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dfa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800dfa8:	e7b9      	b.n	800df1e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800dfaa:	b00d      	add	sp, #52	@ 0x34
 800dfac:	ecbd 8b06 	vpop	{d8-d10}
 800dfb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfb4:	f3af 8000 	nop.w
	...
 800dfc0:	00000001 	.word	0x00000001
 800dfc4:	00000000 	.word	0x00000000
 800dfc8:	0000001e 	.word	0x0000001e
 800dfcc:	00000000 	.word	0x00000000
 800dfd0:	2000ae2c 	.word	0x2000ae2c

0800dfd4 <run_xrce_session>:
 800dfd4:	b510      	push	{r4, lr}
 800dfd6:	788c      	ldrb	r4, [r1, #2]
 800dfd8:	b086      	sub	sp, #24
 800dfda:	2c01      	cmp	r4, #1
 800dfdc:	f8ad 200e 	strh.w	r2, [sp, #14]
 800dfe0:	d00c      	beq.n	800dffc <run_xrce_session+0x28>
 800dfe2:	4619      	mov	r1, r3
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	9300      	str	r3, [sp, #0]
 800dfe8:	f10d 020e 	add.w	r2, sp, #14
 800dfec:	f10d 0317 	add.w	r3, sp, #23
 800dff0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dff4:	f001 f932 	bl	800f25c <uxr_run_session_until_all_status>
 800dff8:	b006      	add	sp, #24
 800dffa:	bd10      	pop	{r4, pc}
 800dffc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e000:	f000 fd46 	bl	800ea90 <uxr_flash_output_streams>
 800e004:	4620      	mov	r0, r4
 800e006:	b006      	add	sp, #24
 800e008:	bd10      	pop	{r4, pc}
 800e00a:	bf00      	nop

0800e00c <convert_qos_profile>:
 800e00c:	7a4a      	ldrb	r2, [r1, #9]
 800e00e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800e012:	2a02      	cmp	r2, #2
 800e014:	bf18      	it	ne
 800e016:	2200      	movne	r2, #0
 800e018:	7002      	strb	r2, [r0, #0]
 800e01a:	780a      	ldrb	r2, [r1, #0]
 800e01c:	8889      	ldrh	r1, [r1, #4]
 800e01e:	8081      	strh	r1, [r0, #4]
 800e020:	f1ac 0c02 	sub.w	ip, ip, #2
 800e024:	f1a2 0202 	sub.w	r2, r2, #2
 800e028:	fabc fc8c 	clz	ip, ip
 800e02c:	fab2 f282 	clz	r2, r2
 800e030:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800e034:	0952      	lsrs	r2, r2, #5
 800e036:	f880 c001 	strb.w	ip, [r0, #1]
 800e03a:	7082      	strb	r2, [r0, #2]
 800e03c:	4770      	bx	lr
 800e03e:	bf00      	nop

0800e040 <generate_type_name>:
 800e040:	b530      	push	{r4, r5, lr}
 800e042:	2300      	movs	r3, #0
 800e044:	700b      	strb	r3, [r1, #0]
 800e046:	6803      	ldr	r3, [r0, #0]
 800e048:	b087      	sub	sp, #28
 800e04a:	4614      	mov	r4, r2
 800e04c:	b1d3      	cbz	r3, 800e084 <generate_type_name+0x44>
 800e04e:	4a0f      	ldr	r2, [pc, #60]	@ (800e08c <generate_type_name+0x4c>)
 800e050:	4615      	mov	r5, r2
 800e052:	9203      	str	r2, [sp, #12]
 800e054:	9500      	str	r5, [sp, #0]
 800e056:	6842      	ldr	r2, [r0, #4]
 800e058:	480d      	ldr	r0, [pc, #52]	@ (800e090 <generate_type_name+0x50>)
 800e05a:	9001      	str	r0, [sp, #4]
 800e05c:	4608      	mov	r0, r1
 800e05e:	490d      	ldr	r1, [pc, #52]	@ (800e094 <generate_type_name+0x54>)
 800e060:	9204      	str	r2, [sp, #16]
 800e062:	9105      	str	r1, [sp, #20]
 800e064:	9102      	str	r1, [sp, #8]
 800e066:	4a0c      	ldr	r2, [pc, #48]	@ (800e098 <generate_type_name+0x58>)
 800e068:	4621      	mov	r1, r4
 800e06a:	f009 f9ab 	bl	80173c4 <sniprintf>
 800e06e:	2800      	cmp	r0, #0
 800e070:	db05      	blt.n	800e07e <generate_type_name+0x3e>
 800e072:	4284      	cmp	r4, r0
 800e074:	bfd4      	ite	le
 800e076:	2000      	movle	r0, #0
 800e078:	2001      	movgt	r0, #1
 800e07a:	b007      	add	sp, #28
 800e07c:	bd30      	pop	{r4, r5, pc}
 800e07e:	2000      	movs	r0, #0
 800e080:	b007      	add	sp, #28
 800e082:	bd30      	pop	{r4, r5, pc}
 800e084:	4b05      	ldr	r3, [pc, #20]	@ (800e09c <generate_type_name+0x5c>)
 800e086:	4a01      	ldr	r2, [pc, #4]	@ (800e08c <generate_type_name+0x4c>)
 800e088:	461d      	mov	r5, r3
 800e08a:	e7e2      	b.n	800e052 <generate_type_name+0x12>
 800e08c:	080188cc 	.word	0x080188cc
 800e090:	080188e4 	.word	0x080188e4
 800e094:	080188e0 	.word	0x080188e0
 800e098:	080188d0 	.word	0x080188d0
 800e09c:	08018e40 	.word	0x08018e40

0800e0a0 <generate_topic_name>:
 800e0a0:	b510      	push	{r4, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	4614      	mov	r4, r2
 800e0a6:	9000      	str	r0, [sp, #0]
 800e0a8:	4b08      	ldr	r3, [pc, #32]	@ (800e0cc <generate_topic_name+0x2c>)
 800e0aa:	4a09      	ldr	r2, [pc, #36]	@ (800e0d0 <generate_topic_name+0x30>)
 800e0ac:	4608      	mov	r0, r1
 800e0ae:	4621      	mov	r1, r4
 800e0b0:	f009 f988 	bl	80173c4 <sniprintf>
 800e0b4:	2800      	cmp	r0, #0
 800e0b6:	db05      	blt.n	800e0c4 <generate_topic_name+0x24>
 800e0b8:	4284      	cmp	r4, r0
 800e0ba:	bfd4      	ite	le
 800e0bc:	2000      	movle	r0, #0
 800e0be:	2001      	movgt	r0, #1
 800e0c0:	b002      	add	sp, #8
 800e0c2:	bd10      	pop	{r4, pc}
 800e0c4:	2000      	movs	r0, #0
 800e0c6:	b002      	add	sp, #8
 800e0c8:	bd10      	pop	{r4, pc}
 800e0ca:	bf00      	nop
 800e0cc:	080188f0 	.word	0x080188f0
 800e0d0:	080188e8 	.word	0x080188e8

0800e0d4 <is_uxrce_rmw_identifier_valid>:
 800e0d4:	b510      	push	{r4, lr}
 800e0d6:	4604      	mov	r4, r0
 800e0d8:	b140      	cbz	r0, 800e0ec <is_uxrce_rmw_identifier_valid+0x18>
 800e0da:	f006 ffed 	bl	80150b8 <rmw_get_implementation_identifier>
 800e0de:	4601      	mov	r1, r0
 800e0e0:	4620      	mov	r0, r4
 800e0e2:	f7f2 f89d 	bl	8000220 <strcmp>
 800e0e6:	fab0 f080 	clz	r0, r0
 800e0ea:	0940      	lsrs	r0, r0, #5
 800e0ec:	bd10      	pop	{r4, pc}
 800e0ee:	bf00      	nop

0800e0f0 <get_message_typesupport_handle>:
 800e0f0:	6883      	ldr	r3, [r0, #8]
 800e0f2:	4718      	bx	r3

0800e0f4 <get_message_typesupport_handle_function>:
 800e0f4:	b510      	push	{r4, lr}
 800e0f6:	4604      	mov	r4, r0
 800e0f8:	6800      	ldr	r0, [r0, #0]
 800e0fa:	f7f2 f891 	bl	8000220 <strcmp>
 800e0fe:	2800      	cmp	r0, #0
 800e100:	bf0c      	ite	eq
 800e102:	4620      	moveq	r0, r4
 800e104:	2000      	movne	r0, #0
 800e106:	bd10      	pop	{r4, pc}

0800e108 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800e108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e10c:	6805      	ldr	r5, [r0, #0]
 800e10e:	4604      	mov	r4, r0
 800e110:	4628      	mov	r0, r5
 800e112:	460e      	mov	r6, r1
 800e114:	f7f2 f884 	bl	8000220 <strcmp>
 800e118:	b1c8      	cbz	r0, 800e14e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800e11a:	4b11      	ldr	r3, [pc, #68]	@ (800e160 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	429d      	cmp	r5, r3
 800e120:	d112      	bne.n	800e148 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e122:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e126:	f8d8 4000 	ldr.w	r4, [r8]
 800e12a:	b16c      	cbz	r4, 800e148 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e12c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e130:	2700      	movs	r7, #0
 800e132:	3d04      	subs	r5, #4
 800e134:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800e138:	4631      	mov	r1, r6
 800e13a:	f7f2 f871 	bl	8000220 <strcmp>
 800e13e:	00bb      	lsls	r3, r7, #2
 800e140:	b140      	cbz	r0, 800e154 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800e142:	3701      	adds	r7, #1
 800e144:	42bc      	cmp	r4, r7
 800e146:	d1f5      	bne.n	800e134 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800e148:	2000      	movs	r0, #0
 800e14a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e14e:	4620      	mov	r0, r4
 800e150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e154:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e158:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e15c:	58d3      	ldr	r3, [r2, r3]
 800e15e:	4718      	bx	r3
 800e160:	200001d0 	.word	0x200001d0

0800e164 <geometry_msgs__msg__Twist__init>:
 800e164:	b570      	push	{r4, r5, r6, lr}
 800e166:	4605      	mov	r5, r0
 800e168:	b1a8      	cbz	r0, 800e196 <geometry_msgs__msg__Twist__init+0x32>
 800e16a:	f000 f82b 	bl	800e1c4 <geometry_msgs__msg__Vector3__init>
 800e16e:	4604      	mov	r4, r0
 800e170:	b140      	cbz	r0, 800e184 <geometry_msgs__msg__Twist__init+0x20>
 800e172:	f105 0618 	add.w	r6, r5, #24
 800e176:	4630      	mov	r0, r6
 800e178:	f000 f824 	bl	800e1c4 <geometry_msgs__msg__Vector3__init>
 800e17c:	4604      	mov	r4, r0
 800e17e:	b168      	cbz	r0, 800e19c <geometry_msgs__msg__Twist__init+0x38>
 800e180:	4620      	mov	r0, r4
 800e182:	bd70      	pop	{r4, r5, r6, pc}
 800e184:	4628      	mov	r0, r5
 800e186:	f000 f821 	bl	800e1cc <geometry_msgs__msg__Vector3__fini>
 800e18a:	f105 0018 	add.w	r0, r5, #24
 800e18e:	f000 f81d 	bl	800e1cc <geometry_msgs__msg__Vector3__fini>
 800e192:	4620      	mov	r0, r4
 800e194:	bd70      	pop	{r4, r5, r6, pc}
 800e196:	4604      	mov	r4, r0
 800e198:	4620      	mov	r0, r4
 800e19a:	bd70      	pop	{r4, r5, r6, pc}
 800e19c:	4628      	mov	r0, r5
 800e19e:	f000 f815 	bl	800e1cc <geometry_msgs__msg__Vector3__fini>
 800e1a2:	4630      	mov	r0, r6
 800e1a4:	f000 f812 	bl	800e1cc <geometry_msgs__msg__Vector3__fini>
 800e1a8:	e7ea      	b.n	800e180 <geometry_msgs__msg__Twist__init+0x1c>
 800e1aa:	bf00      	nop

0800e1ac <geometry_msgs__msg__Twist__fini>:
 800e1ac:	b148      	cbz	r0, 800e1c2 <geometry_msgs__msg__Twist__fini+0x16>
 800e1ae:	b510      	push	{r4, lr}
 800e1b0:	4604      	mov	r4, r0
 800e1b2:	f000 f80b 	bl	800e1cc <geometry_msgs__msg__Vector3__fini>
 800e1b6:	f104 0018 	add.w	r0, r4, #24
 800e1ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1be:	f000 b805 	b.w	800e1cc <geometry_msgs__msg__Vector3__fini>
 800e1c2:	4770      	bx	lr

0800e1c4 <geometry_msgs__msg__Vector3__init>:
 800e1c4:	3800      	subs	r0, #0
 800e1c6:	bf18      	it	ne
 800e1c8:	2001      	movne	r0, #1
 800e1ca:	4770      	bx	lr

0800e1cc <geometry_msgs__msg__Vector3__fini>:
 800e1cc:	4770      	bx	lr
 800e1ce:	bf00      	nop

0800e1d0 <uxr_buffer_delete_entity>:
 800e1d0:	b510      	push	{r4, lr}
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	b08e      	sub	sp, #56	@ 0x38
 800e1d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e1da:	2303      	movs	r3, #3
 800e1dc:	9300      	str	r3, [sp, #0]
 800e1de:	2204      	movs	r2, #4
 800e1e0:	ab06      	add	r3, sp, #24
 800e1e2:	4604      	mov	r4, r0
 800e1e4:	9103      	str	r1, [sp, #12]
 800e1e6:	f001 fa61 	bl	800f6ac <uxr_prepare_stream_to_write_submessage>
 800e1ea:	b918      	cbnz	r0, 800e1f4 <uxr_buffer_delete_entity+0x24>
 800e1ec:	4604      	mov	r4, r0
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	b00e      	add	sp, #56	@ 0x38
 800e1f2:	bd10      	pop	{r4, pc}
 800e1f4:	9902      	ldr	r1, [sp, #8]
 800e1f6:	aa05      	add	r2, sp, #20
 800e1f8:	4620      	mov	r0, r4
 800e1fa:	f001 fb8d 	bl	800f918 <uxr_init_base_object_request>
 800e1fe:	a905      	add	r1, sp, #20
 800e200:	4604      	mov	r4, r0
 800e202:	a806      	add	r0, sp, #24
 800e204:	f003 f984 	bl	8011510 <uxr_serialize_DELETE_Payload>
 800e208:	4620      	mov	r0, r4
 800e20a:	b00e      	add	sp, #56	@ 0x38
 800e20c:	bd10      	pop	{r4, pc}
 800e20e:	bf00      	nop

0800e210 <uxr_common_create_entity>:
 800e210:	b510      	push	{r4, lr}
 800e212:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e216:	b08c      	sub	sp, #48	@ 0x30
 800e218:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e21c:	f1bc 0f01 	cmp.w	ip, #1
 800e220:	bf0c      	ite	eq
 800e222:	f003 0201 	andeq.w	r2, r3, #1
 800e226:	2200      	movne	r2, #0
 800e228:	330e      	adds	r3, #14
 800e22a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800e22e:	9101      	str	r1, [sp, #4]
 800e230:	441a      	add	r2, r3
 800e232:	2301      	movs	r3, #1
 800e234:	9300      	str	r3, [sp, #0]
 800e236:	9903      	ldr	r1, [sp, #12]
 800e238:	ab04      	add	r3, sp, #16
 800e23a:	b292      	uxth	r2, r2
 800e23c:	4604      	mov	r4, r0
 800e23e:	f001 fa35 	bl	800f6ac <uxr_prepare_stream_to_write_submessage>
 800e242:	b918      	cbnz	r0, 800e24c <uxr_common_create_entity+0x3c>
 800e244:	4604      	mov	r4, r0
 800e246:	4620      	mov	r0, r4
 800e248:	b00c      	add	sp, #48	@ 0x30
 800e24a:	bd10      	pop	{r4, pc}
 800e24c:	9902      	ldr	r1, [sp, #8]
 800e24e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e250:	4620      	mov	r0, r4
 800e252:	f001 fb61 	bl	800f918 <uxr_init_base_object_request>
 800e256:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e258:	4604      	mov	r4, r0
 800e25a:	a804      	add	r0, sp, #16
 800e25c:	f003 f8b4 	bl	80113c8 <uxr_serialize_CREATE_Payload>
 800e260:	4620      	mov	r0, r4
 800e262:	b00c      	add	sp, #48	@ 0x30
 800e264:	bd10      	pop	{r4, pc}
 800e266:	bf00      	nop

0800e268 <uxr_buffer_create_participant_bin>:
 800e268:	b570      	push	{r4, r5, r6, lr}
 800e26a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800e26e:	ac11      	add	r4, sp, #68	@ 0x44
 800e270:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800e274:	2303      	movs	r3, #3
 800e276:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e27a:	7223      	strb	r3, [r4, #8]
 800e27c:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800e27e:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800e282:	2201      	movs	r2, #1
 800e284:	2100      	movs	r1, #0
 800e286:	4605      	mov	r5, r0
 800e288:	7122      	strb	r2, [r4, #4]
 800e28a:	f88d 1014 	strb.w	r1, [sp, #20]
 800e28e:	b1cb      	cbz	r3, 800e2c4 <uxr_buffer_create_participant_bin+0x5c>
 800e290:	f88d 201c 	strb.w	r2, [sp, #28]
 800e294:	9308      	str	r3, [sp, #32]
 800e296:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e29a:	a915      	add	r1, sp, #84	@ 0x54
 800e29c:	a809      	add	r0, sp, #36	@ 0x24
 800e29e:	f7fd fb77 	bl	800b990 <ucdr_init_buffer>
 800e2a2:	a905      	add	r1, sp, #20
 800e2a4:	a809      	add	r0, sp, #36	@ 0x24
 800e2a6:	f002 fd5d 	bl	8010d64 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800e2aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e2ac:	9600      	str	r6, [sp, #0]
 800e2ae:	9401      	str	r4, [sp, #4]
 800e2b0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e2b4:	60e3      	str	r3, [r4, #12]
 800e2b6:	4628      	mov	r0, r5
 800e2b8:	b29b      	uxth	r3, r3
 800e2ba:	f7ff ffa9 	bl	800e210 <uxr_common_create_entity>
 800e2be:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800e2c2:	bd70      	pop	{r4, r5, r6, pc}
 800e2c4:	f88d 301c 	strb.w	r3, [sp, #28]
 800e2c8:	e7e5      	b.n	800e296 <uxr_buffer_create_participant_bin+0x2e>
 800e2ca:	bf00      	nop

0800e2cc <uxr_buffer_create_topic_bin>:
 800e2cc:	b570      	push	{r4, r5, r6, lr}
 800e2ce:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800e2d2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e2d6:	9105      	str	r1, [sp, #20]
 800e2d8:	4605      	mov	r5, r0
 800e2da:	a997      	add	r1, sp, #604	@ 0x25c
 800e2dc:	4618      	mov	r0, r3
 800e2de:	2302      	movs	r3, #2
 800e2e0:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800e2e4:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800e2e8:	f000 f9b0 	bl	800e64c <uxr_object_id_to_raw>
 800e2ec:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800e2ee:	9306      	str	r3, [sp, #24]
 800e2f0:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800e2f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e2f4:	2303      	movs	r3, #3
 800e2f6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e300:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e304:	a917      	add	r1, sp, #92	@ 0x5c
 800e306:	2300      	movs	r3, #0
 800e308:	a80b      	add	r0, sp, #44	@ 0x2c
 800e30a:	f88d 301c 	strb.w	r3, [sp, #28]
 800e30e:	f7fd fb3f 	bl	800b990 <ucdr_init_buffer>
 800e312:	a906      	add	r1, sp, #24
 800e314:	a80b      	add	r0, sp, #44	@ 0x2c
 800e316:	f002 fd47 	bl	8010da8 <uxr_serialize_OBJK_Topic_Binary>
 800e31a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e31c:	9316      	str	r3, [sp, #88]	@ 0x58
 800e31e:	ac13      	add	r4, sp, #76	@ 0x4c
 800e320:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e324:	9600      	str	r6, [sp, #0]
 800e326:	9401      	str	r4, [sp, #4]
 800e328:	b29b      	uxth	r3, r3
 800e32a:	4628      	mov	r0, r5
 800e32c:	f7ff ff70 	bl	800e210 <uxr_common_create_entity>
 800e330:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800e334:	bd70      	pop	{r4, r5, r6, pc}
 800e336:	bf00      	nop

0800e338 <uxr_buffer_create_publisher_bin>:
 800e338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e33a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800e33e:	4605      	mov	r5, r0
 800e340:	9105      	str	r1, [sp, #20]
 800e342:	4618      	mov	r0, r3
 800e344:	2603      	movs	r6, #3
 800e346:	a992      	add	r1, sp, #584	@ 0x248
 800e348:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e34c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800e350:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800e354:	f000 f97a 	bl	800e64c <uxr_object_id_to_raw>
 800e358:	2300      	movs	r3, #0
 800e35a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e35e:	a912      	add	r1, sp, #72	@ 0x48
 800e360:	a806      	add	r0, sp, #24
 800e362:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800e366:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800e36a:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800e36e:	f7fd fb0f 	bl	800b990 <ucdr_init_buffer>
 800e372:	a993      	add	r1, sp, #588	@ 0x24c
 800e374:	a806      	add	r0, sp, #24
 800e376:	f002 fdcb 	bl	8010f10 <uxr_serialize_OBJK_Publisher_Binary>
 800e37a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e37c:	9311      	str	r3, [sp, #68]	@ 0x44
 800e37e:	ac0e      	add	r4, sp, #56	@ 0x38
 800e380:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e384:	9700      	str	r7, [sp, #0]
 800e386:	9401      	str	r4, [sp, #4]
 800e388:	b29b      	uxth	r3, r3
 800e38a:	4628      	mov	r0, r5
 800e38c:	f7ff ff40 	bl	800e210 <uxr_common_create_entity>
 800e390:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800e394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e396:	bf00      	nop

0800e398 <uxr_buffer_create_datawriter_bin>:
 800e398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e39c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800e3a0:	ac1d      	add	r4, sp, #116	@ 0x74
 800e3a2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e3a6:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800e3aa:	9105      	str	r1, [sp, #20]
 800e3ac:	4606      	mov	r6, r0
 800e3ae:	a9a1      	add	r1, sp, #644	@ 0x284
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	2305      	movs	r3, #5
 800e3b4:	7123      	strb	r3, [r4, #4]
 800e3b6:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800e3ba:	2703      	movs	r7, #3
 800e3bc:	f000 f946 	bl	800e64c <uxr_object_id_to_raw>
 800e3c0:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800e3c2:	7227      	strb	r7, [r4, #8]
 800e3c4:	a90e      	add	r1, sp, #56	@ 0x38
 800e3c6:	f000 f941 	bl	800e64c <uxr_object_id_to_raw>
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800e3d0:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800e3d4:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800e3d8:	3d00      	subs	r5, #0
 800e3da:	bf18      	it	ne
 800e3dc:	2501      	movne	r5, #1
 800e3de:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800e3e2:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800e3e6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800e3ea:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800e3f4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800e3f8:	bb8a      	cbnz	r2, 800e45e <uxr_buffer_create_datawriter_bin+0xc6>
 800e3fa:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e3fe:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800e402:	f04f 0c13 	mov.w	ip, #19
 800e406:	250b      	movs	r5, #11
 800e408:	2221      	movs	r2, #33	@ 0x21
 800e40a:	2111      	movs	r1, #17
 800e40c:	2009      	movs	r0, #9
 800e40e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800e412:	b923      	cbnz	r3, 800e41e <uxr_buffer_create_datawriter_bin+0x86>
 800e414:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800e418:	4672      	mov	r2, lr
 800e41a:	4661      	mov	r1, ip
 800e41c:	4628      	mov	r0, r5
 800e41e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800e422:	2b01      	cmp	r3, #1
 800e424:	d025      	beq.n	800e472 <uxr_buffer_create_datawriter_bin+0xda>
 800e426:	2b03      	cmp	r3, #3
 800e428:	d029      	beq.n	800e47e <uxr_buffer_create_datawriter_bin+0xe6>
 800e42a:	b32b      	cbz	r3, 800e478 <uxr_buffer_create_datawriter_bin+0xe0>
 800e42c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e430:	a921      	add	r1, sp, #132	@ 0x84
 800e432:	a806      	add	r0, sp, #24
 800e434:	f7fd faac 	bl	800b990 <ucdr_init_buffer>
 800e438:	a90e      	add	r1, sp, #56	@ 0x38
 800e43a:	a806      	add	r0, sp, #24
 800e43c:	f002 fdde 	bl	8010ffc <uxr_serialize_OBJK_DataWriter_Binary>
 800e440:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e442:	f8cd 8000 	str.w	r8, [sp]
 800e446:	9401      	str	r4, [sp, #4]
 800e448:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e44c:	60e3      	str	r3, [r4, #12]
 800e44e:	4630      	mov	r0, r6
 800e450:	b29b      	uxth	r3, r3
 800e452:	f7ff fedd 	bl	800e210 <uxr_common_create_entity>
 800e456:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800e45a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e45e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800e462:	f04f 0c12 	mov.w	ip, #18
 800e466:	250a      	movs	r5, #10
 800e468:	2220      	movs	r2, #32
 800e46a:	2110      	movs	r1, #16
 800e46c:	2008      	movs	r0, #8
 800e46e:	2702      	movs	r7, #2
 800e470:	e7cd      	b.n	800e40e <uxr_buffer_create_datawriter_bin+0x76>
 800e472:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800e476:	e7d9      	b.n	800e42c <uxr_buffer_create_datawriter_bin+0x94>
 800e478:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800e47c:	e7d6      	b.n	800e42c <uxr_buffer_create_datawriter_bin+0x94>
 800e47e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800e482:	e7d3      	b.n	800e42c <uxr_buffer_create_datawriter_bin+0x94>

0800e484 <get_custom_error>:
 800e484:	4b01      	ldr	r3, [pc, #4]	@ (800e48c <get_custom_error+0x8>)
 800e486:	7818      	ldrb	r0, [r3, #0]
 800e488:	4770      	bx	lr
 800e48a:	bf00      	nop
 800e48c:	2000ae6c 	.word	0x2000ae6c

0800e490 <recv_custom_msg>:
 800e490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e494:	4693      	mov	fp, r2
 800e496:	b089      	sub	sp, #36	@ 0x24
 800e498:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800e49c:	9305      	str	r3, [sp, #20]
 800e49e:	468a      	mov	sl, r1
 800e4a0:	2100      	movs	r1, #0
 800e4a2:	4604      	mov	r4, r0
 800e4a4:	f88d 101e 	strb.w	r1, [sp, #30]
 800e4a8:	b322      	cbz	r2, 800e4f4 <recv_custom_msg+0x64>
 800e4aa:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800e4ae:	f10d 081f 	add.w	r8, sp, #31
 800e4b2:	af05      	add	r7, sp, #20
 800e4b4:	f10d 061e 	add.w	r6, sp, #30
 800e4b8:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800e4bc:	e002      	b.n	800e4c4 <recv_custom_msg+0x34>
 800e4be:	9b05      	ldr	r3, [sp, #20]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	dd0f      	ble.n	800e4e4 <recv_custom_msg+0x54>
 800e4c4:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800e4c8:	4623      	mov	r3, r4
 800e4ca:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800e4ce:	e9cd 5600 	strd	r5, r6, [sp]
 800e4d2:	4622      	mov	r2, r4
 800e4d4:	4648      	mov	r0, r9
 800e4d6:	f001 fc4d 	bl	800fd74 <uxr_read_framed_msg>
 800e4da:	2800      	cmp	r0, #0
 800e4dc:	d0ef      	beq.n	800e4be <recv_custom_msg+0x2e>
 800e4de:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e4e2:	b1b3      	cbz	r3, 800e512 <recv_custom_msg+0x82>
 800e4e4:	4b0f      	ldr	r3, [pc, #60]	@ (800e524 <recv_custom_msg+0x94>)
 800e4e6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800e4ea:	701a      	strb	r2, [r3, #0]
 800e4ec:	2000      	movs	r0, #0
 800e4ee:	b009      	add	sp, #36	@ 0x24
 800e4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4f4:	f10d 021f 	add.w	r2, sp, #31
 800e4f8:	9200      	str	r2, [sp, #0]
 800e4fa:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800e4fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e502:	4601      	mov	r1, r0
 800e504:	47a8      	blx	r5
 800e506:	2800      	cmp	r0, #0
 800e508:	d0ec      	beq.n	800e4e4 <recv_custom_msg+0x54>
 800e50a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d1e8      	bne.n	800e4e4 <recv_custom_msg+0x54>
 800e512:	f8cb 0000 	str.w	r0, [fp]
 800e516:	2001      	movs	r0, #1
 800e518:	f8ca 4000 	str.w	r4, [sl]
 800e51c:	b009      	add	sp, #36	@ 0x24
 800e51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e522:	bf00      	nop
 800e524:	2000ae6c 	.word	0x2000ae6c

0800e528 <send_custom_msg>:
 800e528:	b530      	push	{r4, r5, lr}
 800e52a:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800e52e:	b087      	sub	sp, #28
 800e530:	4615      	mov	r5, r2
 800e532:	b974      	cbnz	r4, 800e552 <send_custom_msg+0x2a>
 800e534:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800e538:	f10d 0317 	add.w	r3, sp, #23
 800e53c:	47a0      	blx	r4
 800e53e:	b108      	cbz	r0, 800e544 <send_custom_msg+0x1c>
 800e540:	42a8      	cmp	r0, r5
 800e542:	d015      	beq.n	800e570 <send_custom_msg+0x48>
 800e544:	4b0c      	ldr	r3, [pc, #48]	@ (800e578 <send_custom_msg+0x50>)
 800e546:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800e54a:	701a      	strb	r2, [r3, #0]
 800e54c:	2000      	movs	r0, #0
 800e54e:	b007      	add	sp, #28
 800e550:	bd30      	pop	{r4, r5, pc}
 800e552:	460b      	mov	r3, r1
 800e554:	2200      	movs	r2, #0
 800e556:	f10d 0117 	add.w	r1, sp, #23
 800e55a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800e55e:	4602      	mov	r2, r0
 800e560:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800e564:	9500      	str	r5, [sp, #0]
 800e566:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800e56a:	f001 fa0b 	bl	800f984 <uxr_write_framed_msg>
 800e56e:	e7e6      	b.n	800e53e <send_custom_msg+0x16>
 800e570:	2001      	movs	r0, #1
 800e572:	b007      	add	sp, #28
 800e574:	bd30      	pop	{r4, r5, pc}
 800e576:	bf00      	nop
 800e578:	2000ae6c 	.word	0x2000ae6c

0800e57c <uxr_set_custom_transport_callbacks>:
 800e57c:	b410      	push	{r4}
 800e57e:	9c01      	ldr	r4, [sp, #4]
 800e580:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800e584:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800e588:	9b02      	ldr	r3, [sp, #8]
 800e58a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800e58e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e592:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800e596:	4770      	bx	lr

0800e598 <uxr_init_custom_transport>:
 800e598:	b538      	push	{r3, r4, r5, lr}
 800e59a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800e59e:	b303      	cbz	r3, 800e5e2 <uxr_init_custom_transport+0x4a>
 800e5a0:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800e5a4:	4604      	mov	r4, r0
 800e5a6:	b1e2      	cbz	r2, 800e5e2 <uxr_init_custom_transport+0x4a>
 800e5a8:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800e5ac:	b1ca      	cbz	r2, 800e5e2 <uxr_init_custom_transport+0x4a>
 800e5ae:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800e5b2:	b1b2      	cbz	r2, 800e5e2 <uxr_init_custom_transport+0x4a>
 800e5b4:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800e5b8:	4798      	blx	r3
 800e5ba:	4605      	mov	r5, r0
 800e5bc:	b188      	cbz	r0, 800e5e2 <uxr_init_custom_transport+0x4a>
 800e5be:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800e5c2:	b98b      	cbnz	r3, 800e5e8 <uxr_init_custom_transport+0x50>
 800e5c4:	490b      	ldr	r1, [pc, #44]	@ (800e5f4 <uxr_init_custom_transport+0x5c>)
 800e5c6:	4b0c      	ldr	r3, [pc, #48]	@ (800e5f8 <uxr_init_custom_transport+0x60>)
 800e5c8:	4a0c      	ldr	r2, [pc, #48]	@ (800e5fc <uxr_init_custom_transport+0x64>)
 800e5ca:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800e5ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e5d2:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800e5d6:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800e5da:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800e5de:	4628      	mov	r0, r5
 800e5e0:	bd38      	pop	{r3, r4, r5, pc}
 800e5e2:	2500      	movs	r5, #0
 800e5e4:	4628      	mov	r0, r5
 800e5e6:	bd38      	pop	{r3, r4, r5, pc}
 800e5e8:	2100      	movs	r1, #0
 800e5ea:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800e5ee:	f001 f9c3 	bl	800f978 <uxr_init_framing_io>
 800e5f2:	e7e7      	b.n	800e5c4 <uxr_init_custom_transport+0x2c>
 800e5f4:	0800e529 	.word	0x0800e529
 800e5f8:	0800e491 	.word	0x0800e491
 800e5fc:	0800e485 	.word	0x0800e485

0800e600 <uxr_close_custom_transport>:
 800e600:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800e604:	4718      	bx	r3
 800e606:	bf00      	nop

0800e608 <uxr_object_id>:
 800e608:	b082      	sub	sp, #8
 800e60a:	2300      	movs	r3, #0
 800e60c:	f88d 1006 	strb.w	r1, [sp, #6]
 800e610:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e614:	f360 030f 	bfi	r3, r0, #0, #16
 800e618:	f362 431f 	bfi	r3, r2, #16, #16
 800e61c:	4618      	mov	r0, r3
 800e61e:	b002      	add	sp, #8
 800e620:	4770      	bx	lr
 800e622:	bf00      	nop

0800e624 <uxr_object_id_from_raw>:
 800e624:	7843      	ldrb	r3, [r0, #1]
 800e626:	7801      	ldrb	r1, [r0, #0]
 800e628:	b082      	sub	sp, #8
 800e62a:	f003 020f 	and.w	r2, r3, #15
 800e62e:	f88d 2006 	strb.w	r2, [sp, #6]
 800e632:	091b      	lsrs	r3, r3, #4
 800e634:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e638:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800e63c:	2000      	movs	r0, #0
 800e63e:	f363 000f 	bfi	r0, r3, #0, #16
 800e642:	f362 401f 	bfi	r0, r2, #16, #16
 800e646:	b002      	add	sp, #8
 800e648:	4770      	bx	lr
 800e64a:	bf00      	nop

0800e64c <uxr_object_id_to_raw>:
 800e64c:	4602      	mov	r2, r0
 800e64e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800e652:	b082      	sub	sp, #8
 800e654:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800e658:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800e65c:	f881 c000 	strb.w	ip, [r1]
 800e660:	7048      	strb	r0, [r1, #1]
 800e662:	b002      	add	sp, #8
 800e664:	4770      	bx	lr
 800e666:	bf00      	nop

0800e668 <uxr_buffer_cancel_data>:
 800e668:	b510      	push	{r4, lr}
 800e66a:	b094      	sub	sp, #80	@ 0x50
 800e66c:	2300      	movs	r3, #0
 800e66e:	9202      	str	r2, [sp, #8]
 800e670:	9205      	str	r2, [sp, #20]
 800e672:	9301      	str	r3, [sp, #4]
 800e674:	2201      	movs	r2, #1
 800e676:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e67a:	f88d 301e 	strb.w	r3, [sp, #30]
 800e67e:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800e682:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800e686:	2308      	movs	r3, #8
 800e688:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800e68c:	9300      	str	r3, [sp, #0]
 800e68e:	2210      	movs	r2, #16
 800e690:	ab0c      	add	r3, sp, #48	@ 0x30
 800e692:	4604      	mov	r4, r0
 800e694:	9103      	str	r1, [sp, #12]
 800e696:	f001 f809 	bl	800f6ac <uxr_prepare_stream_to_write_submessage>
 800e69a:	b918      	cbnz	r0, 800e6a4 <uxr_buffer_cancel_data+0x3c>
 800e69c:	4604      	mov	r4, r0
 800e69e:	4620      	mov	r0, r4
 800e6a0:	b014      	add	sp, #80	@ 0x50
 800e6a2:	bd10      	pop	{r4, pc}
 800e6a4:	9905      	ldr	r1, [sp, #20]
 800e6a6:	aa06      	add	r2, sp, #24
 800e6a8:	4620      	mov	r0, r4
 800e6aa:	f001 f935 	bl	800f918 <uxr_init_base_object_request>
 800e6ae:	a906      	add	r1, sp, #24
 800e6b0:	4604      	mov	r4, r0
 800e6b2:	a80c      	add	r0, sp, #48	@ 0x30
 800e6b4:	f002 ffd6 	bl	8011664 <uxr_serialize_READ_DATA_Payload>
 800e6b8:	4620      	mov	r0, r4
 800e6ba:	b014      	add	sp, #80	@ 0x50
 800e6bc:	bd10      	pop	{r4, pc}
 800e6be:	bf00      	nop

0800e6c0 <read_submessage_format>:
 800e6c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e6c4:	b095      	sub	sp, #84	@ 0x54
 800e6c6:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800e6ca:	b113      	cbz	r3, 800e6d2 <read_submessage_format+0x12>
 800e6cc:	b015      	add	sp, #84	@ 0x54
 800e6ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6d2:	460c      	mov	r4, r1
 800e6d4:	4615      	mov	r5, r2
 800e6d6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800e6da:	4607      	mov	r7, r0
 800e6dc:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800e6de:	9004      	str	r0, [sp, #16]
 800e6e0:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800e6e2:	9005      	str	r0, [sp, #20]
 800e6e4:	1a52      	subs	r2, r2, r1
 800e6e6:	a80c      	add	r0, sp, #48	@ 0x30
 800e6e8:	4699      	mov	r9, r3
 800e6ea:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800e6ee:	f7fd f94f 	bl	800b990 <ucdr_init_buffer>
 800e6f2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e6f6:	a80c      	add	r0, sp, #48	@ 0x30
 800e6f8:	f7fd f91e 	bl	800b938 <ucdr_set_on_full_buffer_callback>
 800e6fc:	69e2      	ldr	r2, [r4, #28]
 800e6fe:	b19a      	cbz	r2, 800e728 <read_submessage_format+0x68>
 800e700:	f1b8 0f07 	cmp.w	r8, #7
 800e704:	f882 9014 	strb.w	r9, [r2, #20]
 800e708:	d040      	beq.n	800e78c <read_submessage_format+0xcc>
 800e70a:	f1b8 0f08 	cmp.w	r8, #8
 800e70e:	d02e      	beq.n	800e76e <read_submessage_format+0xae>
 800e710:	f1b8 0f06 	cmp.w	r8, #6
 800e714:	d011      	beq.n	800e73a <read_submessage_format+0x7a>
 800e716:	2301      	movs	r3, #1
 800e718:	7513      	strb	r3, [r2, #20]
 800e71a:	4629      	mov	r1, r5
 800e71c:	4620      	mov	r0, r4
 800e71e:	f7fd f987 	bl	800ba30 <ucdr_advance_buffer>
 800e722:	b015      	add	sp, #84	@ 0x54
 800e724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e728:	f1b8 0f07 	cmp.w	r8, #7
 800e72c:	d02e      	beq.n	800e78c <read_submessage_format+0xcc>
 800e72e:	f1b8 0f08 	cmp.w	r8, #8
 800e732:	d01c      	beq.n	800e76e <read_submessage_format+0xae>
 800e734:	f1b8 0f06 	cmp.w	r8, #6
 800e738:	d1ef      	bne.n	800e71a <read_submessage_format+0x5a>
 800e73a:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800e73e:	f1b8 0f00 	cmp.w	r8, #0
 800e742:	d011      	beq.n	800e768 <read_submessage_format+0xa8>
 800e744:	ab0c      	add	r3, sp, #48	@ 0x30
 800e746:	e9cd 3500 	strd	r3, r5, [sp]
 800e74a:	2306      	movs	r3, #6
 800e74c:	f88d 3016 	strb.w	r3, [sp, #22]
 800e750:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e754:	9302      	str	r3, [sp, #8]
 800e756:	4632      	mov	r2, r6
 800e758:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800e75c:	4638      	mov	r0, r7
 800e75e:	47c0      	blx	r8
 800e760:	2301      	movs	r3, #1
 800e762:	69e2      	ldr	r2, [r4, #28]
 800e764:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e768:	2a00      	cmp	r2, #0
 800e76a:	d1d4      	bne.n	800e716 <read_submessage_format+0x56>
 800e76c:	e7d5      	b.n	800e71a <read_submessage_format+0x5a>
 800e76e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e772:	2b00      	cmp	r3, #0
 800e774:	d0f8      	beq.n	800e768 <read_submessage_format+0xa8>
 800e776:	a906      	add	r1, sp, #24
 800e778:	a80c      	add	r0, sp, #48	@ 0x30
 800e77a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800e77e:	f003 f837 	bl	80117f0 <uxr_deserialize_SampleIdentity>
 800e782:	b9a0      	cbnz	r0, 800e7ae <read_submessage_format+0xee>
 800e784:	69e2      	ldr	r2, [r4, #28]
 800e786:	2a00      	cmp	r2, #0
 800e788:	d1c5      	bne.n	800e716 <read_submessage_format+0x56>
 800e78a:	e7c6      	b.n	800e71a <read_submessage_format+0x5a>
 800e78c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e790:	b13b      	cbz	r3, 800e7a2 <read_submessage_format+0xe2>
 800e792:	a906      	add	r1, sp, #24
 800e794:	a80c      	add	r0, sp, #48	@ 0x30
 800e796:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800e79a:	f002 fcfd 	bl	8011198 <uxr_deserialize_BaseObjectRequest>
 800e79e:	bb60      	cbnz	r0, 800e7fa <read_submessage_format+0x13a>
 800e7a0:	69e2      	ldr	r2, [r4, #28]
 800e7a2:	68a3      	ldr	r3, [r4, #8]
 800e7a4:	442b      	add	r3, r5
 800e7a6:	60a3      	str	r3, [r4, #8]
 800e7a8:	2a00      	cmp	r2, #0
 800e7aa:	d1b4      	bne.n	800e716 <read_submessage_format+0x56>
 800e7ac:	e7b5      	b.n	800e71a <read_submessage_format+0x5a>
 800e7ae:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800e7b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e7b4:	1a52      	subs	r2, r2, r1
 800e7b6:	eba8 0803 	sub.w	r8, r8, r3
 800e7ba:	a80c      	add	r0, sp, #48	@ 0x30
 800e7bc:	f7fd f8e8 	bl	800b990 <ucdr_init_buffer>
 800e7c0:	44a8      	add	r8, r5
 800e7c2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e7c6:	a80c      	add	r0, sp, #48	@ 0x30
 800e7c8:	f7fd f8b6 	bl	800b938 <ucdr_set_on_full_buffer_callback>
 800e7cc:	fa1f f888 	uxth.w	r8, r8
 800e7d0:	ab0c      	add	r3, sp, #48	@ 0x30
 800e7d2:	9300      	str	r3, [sp, #0]
 800e7d4:	f8cd 8004 	str.w	r8, [sp, #4]
 800e7d8:	2108      	movs	r1, #8
 800e7da:	f88d 1016 	strb.w	r1, [sp, #22]
 800e7de:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800e7e2:	9102      	str	r1, [sp, #8]
 800e7e4:	ab06      	add	r3, sp, #24
 800e7e6:	4632      	mov	r2, r6
 800e7e8:	9905      	ldr	r1, [sp, #20]
 800e7ea:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800e7ee:	4638      	mov	r0, r7
 800e7f0:	47b0      	blx	r6
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e7f8:	e7c4      	b.n	800e784 <read_submessage_format+0xc4>
 800e7fa:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800e7fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e800:	1a52      	subs	r2, r2, r1
 800e802:	a80c      	add	r0, sp, #48	@ 0x30
 800e804:	eba8 0803 	sub.w	r8, r8, r3
 800e808:	f7fd f8c2 	bl	800b990 <ucdr_init_buffer>
 800e80c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e810:	a80c      	add	r0, sp, #48	@ 0x30
 800e812:	f7fd f891 	bl	800b938 <ucdr_set_on_full_buffer_callback>
 800e816:	ab0c      	add	r3, sp, #48	@ 0x30
 800e818:	9300      	str	r3, [sp, #0]
 800e81a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800e81e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e822:	44a8      	add	r8, r5
 800e824:	fa1f f888 	uxth.w	r8, r8
 800e828:	f8cd 8004 	str.w	r8, [sp, #4]
 800e82c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800e830:	2107      	movs	r1, #7
 800e832:	f88d 1016 	strb.w	r1, [sp, #22]
 800e836:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800e83a:	9102      	str	r1, [sp, #8]
 800e83c:	4632      	mov	r2, r6
 800e83e:	b29b      	uxth	r3, r3
 800e840:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800e844:	9905      	ldr	r1, [sp, #20]
 800e846:	4638      	mov	r0, r7
 800e848:	47b0      	blx	r6
 800e84a:	2301      	movs	r3, #1
 800e84c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e850:	e7a6      	b.n	800e7a0 <read_submessage_format+0xe0>
 800e852:	bf00      	nop

0800e854 <on_get_fragmentation_info>:
 800e854:	b500      	push	{lr}
 800e856:	b08b      	sub	sp, #44	@ 0x2c
 800e858:	4601      	mov	r1, r0
 800e85a:	2204      	movs	r2, #4
 800e85c:	a802      	add	r0, sp, #8
 800e85e:	f7fd f897 	bl	800b990 <ucdr_init_buffer>
 800e862:	f10d 0305 	add.w	r3, sp, #5
 800e866:	f10d 0206 	add.w	r2, sp, #6
 800e86a:	a901      	add	r1, sp, #4
 800e86c:	a802      	add	r0, sp, #8
 800e86e:	f001 fe67 	bl	8010540 <uxr_read_submessage_header>
 800e872:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e876:	2b0d      	cmp	r3, #13
 800e878:	d003      	beq.n	800e882 <on_get_fragmentation_info+0x2e>
 800e87a:	2000      	movs	r0, #0
 800e87c:	b00b      	add	sp, #44	@ 0x2c
 800e87e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e882:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e886:	f013 0f02 	tst.w	r3, #2
 800e88a:	bf14      	ite	ne
 800e88c:	2002      	movne	r0, #2
 800e88e:	2001      	moveq	r0, #1
 800e890:	b00b      	add	sp, #44	@ 0x2c
 800e892:	f85d fb04 	ldr.w	pc, [sp], #4
 800e896:	bf00      	nop

0800e898 <read_submessage_get_info>:
 800e898:	b570      	push	{r4, r5, r6, lr}
 800e89a:	2500      	movs	r5, #0
 800e89c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800e8a0:	4604      	mov	r4, r0
 800e8a2:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800e8a6:	460e      	mov	r6, r1
 800e8a8:	a810      	add	r0, sp, #64	@ 0x40
 800e8aa:	4629      	mov	r1, r5
 800e8ac:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800e8b0:	f008 fe62 	bl	8017578 <memset>
 800e8b4:	a903      	add	r1, sp, #12
 800e8b6:	4630      	mov	r0, r6
 800e8b8:	f002 fe16 	bl	80114e8 <uxr_deserialize_GET_INFO_Payload>
 800e8bc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800e8c0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e8c4:	4620      	mov	r0, r4
 800e8c6:	f001 f81f 	bl	800f908 <uxr_session_header_offset>
 800e8ca:	462b      	mov	r3, r5
 800e8cc:	9000      	str	r0, [sp, #0]
 800e8ce:	220c      	movs	r2, #12
 800e8d0:	a905      	add	r1, sp, #20
 800e8d2:	a808      	add	r0, sp, #32
 800e8d4:	f7fd f84a 	bl	800b96c <ucdr_init_buffer_origin_offset>
 800e8d8:	a910      	add	r1, sp, #64	@ 0x40
 800e8da:	a808      	add	r0, sp, #32
 800e8dc:	f002 fe76 	bl	80115cc <uxr_serialize_INFO_Payload>
 800e8e0:	9b08      	ldr	r3, [sp, #32]
 800e8e2:	462a      	mov	r2, r5
 800e8e4:	4629      	mov	r1, r5
 800e8e6:	4620      	mov	r0, r4
 800e8e8:	f000 ffb8 	bl	800f85c <uxr_stamp_session_header>
 800e8ec:	a808      	add	r0, sp, #32
 800e8ee:	f7fd f87b 	bl	800b9e8 <ucdr_buffer_length>
 800e8f2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	a905      	add	r1, sp, #20
 800e8f8:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e8fc:	47a0      	blx	r4
 800e8fe:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800e902:	bd70      	pop	{r4, r5, r6, pc}

0800e904 <write_submessage_acknack.isra.0>:
 800e904:	b570      	push	{r4, r5, r6, lr}
 800e906:	b092      	sub	sp, #72	@ 0x48
 800e908:	4605      	mov	r5, r0
 800e90a:	460e      	mov	r6, r1
 800e90c:	4614      	mov	r4, r2
 800e90e:	f000 fffb 	bl	800f908 <uxr_session_header_offset>
 800e912:	a905      	add	r1, sp, #20
 800e914:	9000      	str	r0, [sp, #0]
 800e916:	2300      	movs	r3, #0
 800e918:	a80a      	add	r0, sp, #40	@ 0x28
 800e91a:	2211      	movs	r2, #17
 800e91c:	f7fd f826 	bl	800b96c <ucdr_init_buffer_origin_offset>
 800e920:	2218      	movs	r2, #24
 800e922:	fb02 5404 	mla	r4, r2, r4, r5
 800e926:	2300      	movs	r3, #0
 800e928:	2205      	movs	r2, #5
 800e92a:	3450      	adds	r4, #80	@ 0x50
 800e92c:	210a      	movs	r1, #10
 800e92e:	a80a      	add	r0, sp, #40	@ 0x28
 800e930:	f001 fdec 	bl	801050c <uxr_buffer_submessage_header>
 800e934:	a903      	add	r1, sp, #12
 800e936:	4620      	mov	r0, r4
 800e938:	f007 fabe 	bl	8015eb8 <uxr_compute_acknack>
 800e93c:	ba40      	rev16	r0, r0
 800e93e:	f8ad 000e 	strh.w	r0, [sp, #14]
 800e942:	a903      	add	r1, sp, #12
 800e944:	a80a      	add	r0, sp, #40	@ 0x28
 800e946:	f88d 6010 	strb.w	r6, [sp, #16]
 800e94a:	f002 feaf 	bl	80116ac <uxr_serialize_ACKNACK_Payload>
 800e94e:	2200      	movs	r2, #0
 800e950:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e952:	4611      	mov	r1, r2
 800e954:	4628      	mov	r0, r5
 800e956:	f000 ff81 	bl	800f85c <uxr_stamp_session_header>
 800e95a:	a80a      	add	r0, sp, #40	@ 0x28
 800e95c:	f7fd f844 	bl	800b9e8 <ucdr_buffer_length>
 800e960:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800e962:	4602      	mov	r2, r0
 800e964:	a905      	add	r1, sp, #20
 800e966:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e96a:	47a0      	blx	r4
 800e96c:	b012      	add	sp, #72	@ 0x48
 800e96e:	bd70      	pop	{r4, r5, r6, pc}

0800e970 <uxr_init_session>:
 800e970:	b510      	push	{r4, lr}
 800e972:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800e9a8 <uxr_init_session+0x38>
 800e976:	2300      	movs	r3, #0
 800e978:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800e97c:	4604      	mov	r4, r0
 800e97e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800e982:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800e986:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800e98a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800e98e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800e992:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800e996:	2181      	movs	r1, #129	@ 0x81
 800e998:	f000 fecc 	bl	800f734 <uxr_init_session_info>
 800e99c:	f104 0008 	add.w	r0, r4, #8
 800e9a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9a4:	f001 bcce 	b.w	8010344 <uxr_init_stream_storage>
	...

0800e9b0 <uxr_set_status_callback>:
 800e9b0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800e9b4:	4770      	bx	lr
 800e9b6:	bf00      	nop

0800e9b8 <uxr_set_topic_callback>:
 800e9b8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800e9bc:	4770      	bx	lr
 800e9be:	bf00      	nop

0800e9c0 <uxr_set_request_callback>:
 800e9c0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800e9c4:	4770      	bx	lr
 800e9c6:	bf00      	nop

0800e9c8 <uxr_set_reply_callback>:
 800e9c8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800e9cc:	4770      	bx	lr
 800e9ce:	bf00      	nop

0800e9d0 <uxr_create_output_best_effort_stream>:
 800e9d0:	b510      	push	{r4, lr}
 800e9d2:	b084      	sub	sp, #16
 800e9d4:	e9cd 2100 	strd	r2, r1, [sp]
 800e9d8:	4604      	mov	r4, r0
 800e9da:	f000 ff95 	bl	800f908 <uxr_session_header_offset>
 800e9de:	e9dd 2100 	ldrd	r2, r1, [sp]
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	f104 0008 	add.w	r0, r4, #8
 800e9e8:	b004      	add	sp, #16
 800e9ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9ee:	f001 bcf3 	b.w	80103d8 <uxr_add_output_best_effort_buffer>
 800e9f2:	bf00      	nop

0800e9f4 <uxr_create_output_reliable_stream>:
 800e9f4:	b510      	push	{r4, lr}
 800e9f6:	b088      	sub	sp, #32
 800e9f8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800e9fc:	4604      	mov	r4, r0
 800e9fe:	9303      	str	r3, [sp, #12]
 800ea00:	f000 ff82 	bl	800f908 <uxr_session_header_offset>
 800ea04:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800ea08:	9000      	str	r0, [sp, #0]
 800ea0a:	9905      	ldr	r1, [sp, #20]
 800ea0c:	f104 0008 	add.w	r0, r4, #8
 800ea10:	f001 fcf6 	bl	8010400 <uxr_add_output_reliable_buffer>
 800ea14:	2200      	movs	r2, #0
 800ea16:	b2c3      	uxtb	r3, r0
 800ea18:	f363 0207 	bfi	r2, r3, #0, #8
 800ea1c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ea20:	f363 220f 	bfi	r2, r3, #8, #8
 800ea24:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ea28:	f363 4217 	bfi	r2, r3, #16, #8
 800ea2c:	0e03      	lsrs	r3, r0, #24
 800ea2e:	f363 621f 	bfi	r2, r3, #24, #8
 800ea32:	4610      	mov	r0, r2
 800ea34:	b008      	add	sp, #32
 800ea36:	bd10      	pop	{r4, pc}

0800ea38 <uxr_create_input_best_effort_stream>:
 800ea38:	b082      	sub	sp, #8
 800ea3a:	3008      	adds	r0, #8
 800ea3c:	b002      	add	sp, #8
 800ea3e:	f001 bcf9 	b.w	8010434 <uxr_add_input_best_effort_buffer>
 800ea42:	bf00      	nop

0800ea44 <uxr_create_input_reliable_stream>:
 800ea44:	b510      	push	{r4, lr}
 800ea46:	b084      	sub	sp, #16
 800ea48:	4c0b      	ldr	r4, [pc, #44]	@ (800ea78 <uxr_create_input_reliable_stream+0x34>)
 800ea4a:	9400      	str	r4, [sp, #0]
 800ea4c:	3008      	adds	r0, #8
 800ea4e:	f001 fd07 	bl	8010460 <uxr_add_input_reliable_buffer>
 800ea52:	2200      	movs	r2, #0
 800ea54:	b2c3      	uxtb	r3, r0
 800ea56:	f363 0207 	bfi	r2, r3, #0, #8
 800ea5a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ea5e:	f363 220f 	bfi	r2, r3, #8, #8
 800ea62:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ea66:	f363 4217 	bfi	r2, r3, #16, #8
 800ea6a:	0e03      	lsrs	r3, r0, #24
 800ea6c:	f363 621f 	bfi	r2, r3, #24, #8
 800ea70:	4610      	mov	r0, r2
 800ea72:	b004      	add	sp, #16
 800ea74:	bd10      	pop	{r4, pc}
 800ea76:	bf00      	nop
 800ea78:	0800e855 	.word	0x0800e855

0800ea7c <uxr_epoch_nanos>:
 800ea7c:	b510      	push	{r4, lr}
 800ea7e:	4604      	mov	r4, r0
 800ea80:	f001 fda4 	bl	80105cc <uxr_nanos>
 800ea84:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800ea88:	1ac0      	subs	r0, r0, r3
 800ea8a:	eb61 0102 	sbc.w	r1, r1, r2
 800ea8e:	bd10      	pop	{r4, pc}

0800ea90 <uxr_flash_output_streams>:
 800ea90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea94:	7e03      	ldrb	r3, [r0, #24]
 800ea96:	b084      	sub	sp, #16
 800ea98:	4604      	mov	r4, r0
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d035      	beq.n	800eb0a <uxr_flash_output_streams+0x7a>
 800ea9e:	f04f 0900 	mov.w	r9, #0
 800eaa2:	4648      	mov	r0, r9
 800eaa4:	f10d 0802 	add.w	r8, sp, #2
 800eaa8:	af03      	add	r7, sp, #12
 800eaaa:	ae02      	add	r6, sp, #8
 800eaac:	e006      	b.n	800eabc <uxr_flash_output_streams+0x2c>
 800eaae:	7e23      	ldrb	r3, [r4, #24]
 800eab0:	f109 0901 	add.w	r9, r9, #1
 800eab4:	fa5f f089 	uxtb.w	r0, r9
 800eab8:	4283      	cmp	r3, r0
 800eaba:	d926      	bls.n	800eb0a <uxr_flash_output_streams+0x7a>
 800eabc:	2201      	movs	r2, #1
 800eabe:	4611      	mov	r1, r2
 800eac0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800eac4:	f001 fbea 	bl	801029c <uxr_stream_id>
 800eac8:	3508      	adds	r5, #8
 800eaca:	4684      	mov	ip, r0
 800eacc:	4643      	mov	r3, r8
 800eace:	463a      	mov	r2, r7
 800ead0:	4631      	mov	r1, r6
 800ead2:	4628      	mov	r0, r5
 800ead4:	f8cd c004 	str.w	ip, [sp, #4]
 800ead8:	f007 fa74 	bl	8015fc4 <uxr_prepare_best_effort_buffer_to_send>
 800eadc:	2800      	cmp	r0, #0
 800eade:	d0e6      	beq.n	800eaae <uxr_flash_output_streams+0x1e>
 800eae0:	9b02      	ldr	r3, [sp, #8]
 800eae2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800eae6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800eaea:	4620      	mov	r0, r4
 800eaec:	f000 feb6 	bl	800f85c <uxr_stamp_session_header>
 800eaf0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800eaf2:	9a03      	ldr	r2, [sp, #12]
 800eaf4:	685d      	ldr	r5, [r3, #4]
 800eaf6:	6818      	ldr	r0, [r3, #0]
 800eaf8:	9902      	ldr	r1, [sp, #8]
 800eafa:	47a8      	blx	r5
 800eafc:	f109 0901 	add.w	r9, r9, #1
 800eb00:	7e23      	ldrb	r3, [r4, #24]
 800eb02:	fa5f f089 	uxtb.w	r0, r9
 800eb06:	4283      	cmp	r3, r0
 800eb08:	d8d8      	bhi.n	800eabc <uxr_flash_output_streams+0x2c>
 800eb0a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800eb0e:	b38b      	cbz	r3, 800eb74 <uxr_flash_output_streams+0xe4>
 800eb10:	f04f 0900 	mov.w	r9, #0
 800eb14:	f10d 0802 	add.w	r8, sp, #2
 800eb18:	af03      	add	r7, sp, #12
 800eb1a:	ae02      	add	r6, sp, #8
 800eb1c:	4648      	mov	r0, r9
 800eb1e:	2201      	movs	r2, #1
 800eb20:	2102      	movs	r1, #2
 800eb22:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800eb26:	f001 fbb9 	bl	801029c <uxr_stream_id>
 800eb2a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800eb2e:	3520      	adds	r5, #32
 800eb30:	9001      	str	r0, [sp, #4]
 800eb32:	e00d      	b.n	800eb50 <uxr_flash_output_streams+0xc0>
 800eb34:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800eb38:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800eb3c:	9b02      	ldr	r3, [sp, #8]
 800eb3e:	f000 fe8d 	bl	800f85c <uxr_stamp_session_header>
 800eb42:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800eb44:	9a03      	ldr	r2, [sp, #12]
 800eb46:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800eb4a:	9902      	ldr	r1, [sp, #8]
 800eb4c:	6818      	ldr	r0, [r3, #0]
 800eb4e:	47d0      	blx	sl
 800eb50:	4643      	mov	r3, r8
 800eb52:	463a      	mov	r2, r7
 800eb54:	4631      	mov	r1, r6
 800eb56:	4628      	mov	r0, r5
 800eb58:	f007 fc52 	bl	8016400 <uxr_prepare_next_reliable_buffer_to_send>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	4620      	mov	r0, r4
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d1e7      	bne.n	800eb34 <uxr_flash_output_streams+0xa4>
 800eb64:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800eb68:	f109 0901 	add.w	r9, r9, #1
 800eb6c:	fa5f f089 	uxtb.w	r0, r9
 800eb70:	4283      	cmp	r3, r0
 800eb72:	d8d4      	bhi.n	800eb1e <uxr_flash_output_streams+0x8e>
 800eb74:	b004      	add	sp, #16
 800eb76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb7a:	bf00      	nop

0800eb7c <read_submessage_info>:
 800eb7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb80:	460d      	mov	r5, r1
 800eb82:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800eb86:	4669      	mov	r1, sp
 800eb88:	4607      	mov	r7, r0
 800eb8a:	4628      	mov	r0, r5
 800eb8c:	f002 fbba 	bl	8011304 <uxr_deserialize_BaseObjectReply>
 800eb90:	a902      	add	r1, sp, #8
 800eb92:	4604      	mov	r4, r0
 800eb94:	4628      	mov	r0, r5
 800eb96:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800eb9a:	f7fb fd9f 	bl	800a6dc <ucdr_deserialize_bool>
 800eb9e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800eba2:	4004      	ands	r4, r0
 800eba4:	b2e4      	uxtb	r4, r4
 800eba6:	b95b      	cbnz	r3, 800ebc0 <read_submessage_info+0x44>
 800eba8:	a987      	add	r1, sp, #540	@ 0x21c
 800ebaa:	4628      	mov	r0, r5
 800ebac:	f7fb fd96 	bl	800a6dc <ucdr_deserialize_bool>
 800ebb0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800ebb4:	4606      	mov	r6, r0
 800ebb6:	b94b      	cbnz	r3, 800ebcc <read_submessage_info+0x50>
 800ebb8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800ebbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebc0:	a903      	add	r1, sp, #12
 800ebc2:	4628      	mov	r0, r5
 800ebc4:	f002 fa46 	bl	8011054 <uxr_deserialize_ObjectVariant>
 800ebc8:	4004      	ands	r4, r0
 800ebca:	e7ed      	b.n	800eba8 <read_submessage_info+0x2c>
 800ebcc:	a988      	add	r1, sp, #544	@ 0x220
 800ebce:	4628      	mov	r0, r5
 800ebd0:	f7fb fdb2 	bl	800a738 <ucdr_deserialize_uint8_t>
 800ebd4:	4234      	tst	r4, r6
 800ebd6:	d0ef      	beq.n	800ebb8 <read_submessage_info+0x3c>
 800ebd8:	2800      	cmp	r0, #0
 800ebda:	d0ed      	beq.n	800ebb8 <read_submessage_info+0x3c>
 800ebdc:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800ebe0:	2b0d      	cmp	r3, #13
 800ebe2:	d1e9      	bne.n	800ebb8 <read_submessage_info+0x3c>
 800ebe4:	a98a      	add	r1, sp, #552	@ 0x228
 800ebe6:	4628      	mov	r0, r5
 800ebe8:	f7fc fb4c 	bl	800b284 <ucdr_deserialize_int16_t>
 800ebec:	b140      	cbz	r0, 800ec00 <read_submessage_info+0x84>
 800ebee:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	dd07      	ble.n	800ec06 <read_submessage_info+0x8a>
 800ebf6:	f1b8 0f00 	cmp.w	r8, #0
 800ebfa:	bf14      	ite	ne
 800ebfc:	2001      	movne	r0, #1
 800ebfe:	2002      	moveq	r0, #2
 800ec00:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800ec04:	e7d8      	b.n	800ebb8 <read_submessage_info+0x3c>
 800ec06:	2000      	movs	r0, #0
 800ec08:	e7fa      	b.n	800ec00 <read_submessage_info+0x84>
 800ec0a:	bf00      	nop

0800ec0c <read_submessage_list>:
 800ec0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec10:	b097      	sub	sp, #92	@ 0x5c
 800ec12:	4ec1      	ldr	r6, [pc, #772]	@ (800ef18 <read_submessage_list+0x30c>)
 800ec14:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec16:	4604      	mov	r4, r0
 800ec18:	460d      	mov	r5, r1
 800ec1a:	f04f 0801 	mov.w	r8, #1
 800ec1e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800ec22:	aa0c      	add	r2, sp, #48	@ 0x30
 800ec24:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800ec28:	4628      	mov	r0, r5
 800ec2a:	f001 fc89 	bl	8010540 <uxr_read_submessage_header>
 800ec2e:	2800      	cmp	r0, #0
 800ec30:	f000 813e 	beq.w	800eeb0 <read_submessage_list+0x2a4>
 800ec34:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800ec38:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800ec3c:	3b02      	subs	r3, #2
 800ec3e:	2b0d      	cmp	r3, #13
 800ec40:	d8ed      	bhi.n	800ec1e <read_submessage_list+0x12>
 800ec42:	a101      	add	r1, pc, #4	@ (adr r1, 800ec48 <read_submessage_list+0x3c>)
 800ec44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec48:	0800eea7 	.word	0x0800eea7
 800ec4c:	0800ec1f 	.word	0x0800ec1f
 800ec50:	0800ee97 	.word	0x0800ee97
 800ec54:	0800ee35 	.word	0x0800ee35
 800ec58:	0800ee2b 	.word	0x0800ee2b
 800ec5c:	0800ec1f 	.word	0x0800ec1f
 800ec60:	0800ec1f 	.word	0x0800ec1f
 800ec64:	0800ed8b 	.word	0x0800ed8b
 800ec68:	0800ed1b 	.word	0x0800ed1b
 800ec6c:	0800ecdb 	.word	0x0800ecdb
 800ec70:	0800ec1f 	.word	0x0800ec1f
 800ec74:	0800ec1f 	.word	0x0800ec1f
 800ec78:	0800ec1f 	.word	0x0800ec1f
 800ec7c:	0800ec81 	.word	0x0800ec81
 800ec80:	a910      	add	r1, sp, #64	@ 0x40
 800ec82:	4628      	mov	r0, r5
 800ec84:	f002 fd62 	bl	801174c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800ec88:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800ec8c:	f1b9 0f00 	cmp.w	r9, #0
 800ec90:	f000 8116 	beq.w	800eec0 <read_submessage_list+0x2b4>
 800ec94:	f001 fc9a 	bl	80105cc <uxr_nanos>
 800ec98:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800ec9a:	4602      	mov	r2, r0
 800ec9c:	460b      	mov	r3, r1
 800ec9e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800eca0:	2100      	movs	r1, #0
 800eca2:	468c      	mov	ip, r1
 800eca4:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800eca8:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800ecac:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ecae:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800ecb0:	468c      	mov	ip, r1
 800ecb2:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800ecb6:	46e2      	mov	sl, ip
 800ecb8:	46bc      	mov	ip, r7
 800ecba:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800ecbe:	fbc0 7106 	smlal	r7, r1, r0, r6
 800ecc2:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800ecc6:	e9cd 7100 	strd	r7, r1, [sp]
 800ecca:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800ecce:	9106      	str	r1, [sp, #24]
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	47c8      	blx	r9
 800ecd4:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800ecd8:	e7a1      	b.n	800ec1e <read_submessage_list+0x12>
 800ecda:	a910      	add	r1, sp, #64	@ 0x40
 800ecdc:	4628      	mov	r0, r5
 800ecde:	f002 fd23 	bl	8011728 <uxr_deserialize_HEARTBEAT_Payload>
 800ece2:	2100      	movs	r1, #0
 800ece4:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800ece8:	f001 fb02 	bl	80102f0 <uxr_stream_id_from_raw>
 800ecec:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800ecf0:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ecf2:	4639      	mov	r1, r7
 800ecf4:	f104 0008 	add.w	r0, r4, #8
 800ecf8:	f001 fbe8 	bl	80104cc <uxr_get_input_reliable_stream>
 800ecfc:	2800      	cmp	r0, #0
 800ecfe:	d08e      	beq.n	800ec1e <read_submessage_list+0x12>
 800ed00:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800ed04:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800ed08:	f007 f8ca 	bl	8015ea0 <uxr_process_heartbeat>
 800ed0c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800ed10:	463a      	mov	r2, r7
 800ed12:	4620      	mov	r0, r4
 800ed14:	f7ff fdf6 	bl	800e904 <write_submessage_acknack.isra.0>
 800ed18:	e781      	b.n	800ec1e <read_submessage_list+0x12>
 800ed1a:	a910      	add	r1, sp, #64	@ 0x40
 800ed1c:	4628      	mov	r0, r5
 800ed1e:	f002 fcdb 	bl	80116d8 <uxr_deserialize_ACKNACK_Payload>
 800ed22:	2100      	movs	r1, #0
 800ed24:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800ed28:	f001 fae2 	bl	80102f0 <uxr_stream_id_from_raw>
 800ed2c:	900d      	str	r0, [sp, #52]	@ 0x34
 800ed2e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800ed32:	f104 0008 	add.w	r0, r4, #8
 800ed36:	f001 fbb5 	bl	80104a4 <uxr_get_output_reliable_stream>
 800ed3a:	4607      	mov	r7, r0
 800ed3c:	2800      	cmp	r0, #0
 800ed3e:	f43f af6e 	beq.w	800ec1e <read_submessage_list+0x12>
 800ed42:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800ed46:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800ed4a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800ed4e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800ed52:	b289      	uxth	r1, r1
 800ed54:	f007 fbfe 	bl	8016554 <uxr_process_acknack>
 800ed58:	4638      	mov	r0, r7
 800ed5a:	f007 fbbb 	bl	80164d4 <uxr_begin_output_nack_buffer_it>
 800ed5e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800ed62:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800ed66:	e006      	b.n	800ed76 <read_submessage_list+0x16a>
 800ed68:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ed6a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ed6c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800ed70:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ed72:	6818      	ldr	r0, [r3, #0]
 800ed74:	47c8      	blx	r9
 800ed76:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800ed7a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800ed7c:	4651      	mov	r1, sl
 800ed7e:	4638      	mov	r0, r7
 800ed80:	f007 fbaa 	bl	80164d8 <uxr_next_reliable_nack_buffer_to_send>
 800ed84:	2800      	cmp	r0, #0
 800ed86:	d1ef      	bne.n	800ed68 <read_submessage_list+0x15c>
 800ed88:	e749      	b.n	800ec1e <read_submessage_list+0x12>
 800ed8a:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800ed8e:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800ed92:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800ed96:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800ed9a:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800ed9e:	4651      	mov	r1, sl
 800eda0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800eda4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800eda8:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800edac:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800edb0:	4628      	mov	r0, r5
 800edb2:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800edb6:	f002 f9ef 	bl	8011198 <uxr_deserialize_BaseObjectRequest>
 800edba:	4650      	mov	r0, sl
 800edbc:	a90f      	add	r1, sp, #60	@ 0x3c
 800edbe:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800edc2:	f000 fdc7 	bl	800f954 <uxr_parse_base_object_request>
 800edc6:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800edca:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800edcc:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800edd0:	9110      	str	r1, [sp, #64]	@ 0x40
 800edd2:	3f04      	subs	r7, #4
 800edd4:	f009 090e 	and.w	r9, r9, #14
 800edd8:	b2bf      	uxth	r7, r7
 800edda:	f1bb 0f00 	cmp.w	fp, #0
 800edde:	d006      	beq.n	800edee <read_submessage_list+0x1e2>
 800ede0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800ede4:	9300      	str	r3, [sp, #0]
 800ede6:	4652      	mov	r2, sl
 800ede8:	2300      	movs	r3, #0
 800edea:	4620      	mov	r0, r4
 800edec:	47d8      	blx	fp
 800edee:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800edf0:	b16a      	cbz	r2, 800ee0e <read_submessage_list+0x202>
 800edf2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800edf4:	2100      	movs	r1, #0
 800edf6:	3802      	subs	r0, #2
 800edf8:	e002      	b.n	800ee00 <read_submessage_list+0x1f4>
 800edfa:	3101      	adds	r1, #1
 800edfc:	4291      	cmp	r1, r2
 800edfe:	d006      	beq.n	800ee0e <read_submessage_list+0x202>
 800ee00:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800ee04:	4553      	cmp	r3, sl
 800ee06:	d1f8      	bne.n	800edfa <read_submessage_list+0x1ee>
 800ee08:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	545a      	strb	r2, [r3, r1]
 800ee0e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800ee12:	9102      	str	r1, [sp, #8]
 800ee14:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ee16:	9101      	str	r1, [sp, #4]
 800ee18:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ee1a:	9100      	str	r1, [sp, #0]
 800ee1c:	464b      	mov	r3, r9
 800ee1e:	463a      	mov	r2, r7
 800ee20:	4629      	mov	r1, r5
 800ee22:	4620      	mov	r0, r4
 800ee24:	f7ff fc4c 	bl	800e6c0 <read_submessage_format>
 800ee28:	e6f9      	b.n	800ec1e <read_submessage_list+0x12>
 800ee2a:	4629      	mov	r1, r5
 800ee2c:	4620      	mov	r0, r4
 800ee2e:	f7ff fea5 	bl	800eb7c <read_submessage_info>
 800ee32:	e6f4      	b.n	800ec1e <read_submessage_list+0x12>
 800ee34:	2a00      	cmp	r2, #0
 800ee36:	d03e      	beq.n	800eeb6 <read_submessage_list+0x2aa>
 800ee38:	a910      	add	r1, sp, #64	@ 0x40
 800ee3a:	4628      	mov	r0, r5
 800ee3c:	f002 fba8 	bl	8011590 <uxr_deserialize_STATUS_Payload>
 800ee40:	a90e      	add	r1, sp, #56	@ 0x38
 800ee42:	aa0d      	add	r2, sp, #52	@ 0x34
 800ee44:	a810      	add	r0, sp, #64	@ 0x40
 800ee46:	f000 fd85 	bl	800f954 <uxr_parse_base_object_request>
 800ee4a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800ee4e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ee50:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800ee54:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800ee58:	910f      	str	r1, [sp, #60]	@ 0x3c
 800ee5a:	f1ba 0f00 	cmp.w	sl, #0
 800ee5e:	d006      	beq.n	800ee6e <read_submessage_list+0x262>
 800ee60:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800ee64:	9300      	str	r3, [sp, #0]
 800ee66:	463a      	mov	r2, r7
 800ee68:	464b      	mov	r3, r9
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	47d0      	blx	sl
 800ee6e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800ee70:	2a00      	cmp	r2, #0
 800ee72:	f43f aed4 	beq.w	800ec1e <read_submessage_list+0x12>
 800ee76:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800ee78:	2100      	movs	r1, #0
 800ee7a:	3802      	subs	r0, #2
 800ee7c:	e003      	b.n	800ee86 <read_submessage_list+0x27a>
 800ee7e:	3101      	adds	r1, #1
 800ee80:	4291      	cmp	r1, r2
 800ee82:	f43f aecc 	beq.w	800ec1e <read_submessage_list+0x12>
 800ee86:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800ee8a:	42bb      	cmp	r3, r7
 800ee8c:	d1f7      	bne.n	800ee7e <read_submessage_list+0x272>
 800ee8e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800ee90:	f803 9001 	strb.w	r9, [r3, r1]
 800ee94:	e6c3      	b.n	800ec1e <read_submessage_list+0x12>
 800ee96:	2a00      	cmp	r2, #0
 800ee98:	f47f aec1 	bne.w	800ec1e <read_submessage_list+0x12>
 800ee9c:	4629      	mov	r1, r5
 800ee9e:	4620      	mov	r0, r4
 800eea0:	f000 fc9e 	bl	800f7e0 <uxr_read_create_session_status>
 800eea4:	e6bb      	b.n	800ec1e <read_submessage_list+0x12>
 800eea6:	4629      	mov	r1, r5
 800eea8:	4620      	mov	r0, r4
 800eeaa:	f7ff fcf5 	bl	800e898 <read_submessage_get_info>
 800eeae:	e6b6      	b.n	800ec1e <read_submessage_list+0x12>
 800eeb0:	b017      	add	sp, #92	@ 0x5c
 800eeb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeb6:	4629      	mov	r1, r5
 800eeb8:	4620      	mov	r0, r4
 800eeba:	f000 fc9d 	bl	800f7f8 <uxr_read_delete_session_status>
 800eebe:	e6ae      	b.n	800ec1e <read_submessage_list+0x12>
 800eec0:	f001 fb84 	bl	80105cc <uxr_nanos>
 800eec4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800eec6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800eec8:	464f      	mov	r7, r9
 800eeca:	fbc3 2706 	smlal	r2, r7, r3, r6
 800eece:	1812      	adds	r2, r2, r0
 800eed0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800eed2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800eed4:	eb47 0101 	adc.w	r1, r7, r1
 800eed8:	464f      	mov	r7, r9
 800eeda:	fbc3 0706 	smlal	r0, r7, r3, r6
 800eede:	463b      	mov	r3, r7
 800eee0:	4684      	mov	ip, r0
 800eee2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800eee6:	fbc7 0906 	smlal	r0, r9, r7, r6
 800eeea:	eb1c 0c00 	adds.w	ip, ip, r0
 800eeee:	464f      	mov	r7, r9
 800eef0:	eb43 0307 	adc.w	r3, r3, r7
 800eef4:	ebb2 0c0c 	subs.w	ip, r2, ip
 800eef8:	eb61 0303 	sbc.w	r3, r1, r3
 800eefc:	0fda      	lsrs	r2, r3, #31
 800eefe:	eb12 020c 	adds.w	r2, r2, ip
 800ef02:	f143 0300 	adc.w	r3, r3, #0
 800ef06:	0852      	lsrs	r2, r2, #1
 800ef08:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800ef0c:	105b      	asrs	r3, r3, #1
 800ef0e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800ef12:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800ef16:	e6dd      	b.n	800ecd4 <read_submessage_list+0xc8>
 800ef18:	3b9aca00 	.word	0x3b9aca00

0800ef1c <listen_message_reliably>:
 800ef1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef20:	1e0b      	subs	r3, r1, #0
 800ef22:	b09d      	sub	sp, #116	@ 0x74
 800ef24:	bfb8      	it	lt
 800ef26:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800ef2a:	4680      	mov	r8, r0
 800ef2c:	9305      	str	r3, [sp, #20]
 800ef2e:	f001 fb33 	bl	8010598 <uxr_millis>
 800ef32:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800ef36:	4681      	mov	r9, r0
 800ef38:	2a00      	cmp	r2, #0
 800ef3a:	f000 80a1 	beq.w	800f080 <listen_message_reliably+0x164>
 800ef3e:	2600      	movs	r6, #0
 800ef40:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ef44:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800ef48:	9303      	str	r3, [sp, #12]
 800ef4a:	4630      	mov	r0, r6
 800ef4c:	460f      	mov	r7, r1
 800ef4e:	e00f      	b.n	800ef70 <listen_message_reliably+0x54>
 800ef50:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ef54:	9903      	ldr	r1, [sp, #12]
 800ef56:	455a      	cmp	r2, fp
 800ef58:	f106 0601 	add.w	r6, r6, #1
 800ef5c:	eb73 0101 	sbcs.w	r1, r3, r1
 800ef60:	b2f0      	uxtb	r0, r6
 800ef62:	da01      	bge.n	800ef68 <listen_message_reliably+0x4c>
 800ef64:	4693      	mov	fp, r2
 800ef66:	9303      	str	r3, [sp, #12]
 800ef68:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800ef6c:	4283      	cmp	r3, r0
 800ef6e:	d960      	bls.n	800f032 <listen_message_reliably+0x116>
 800ef70:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800ef74:	2102      	movs	r1, #2
 800ef76:	2201      	movs	r2, #1
 800ef78:	f001 f990 	bl	801029c <uxr_stream_id>
 800ef7c:	00e4      	lsls	r4, r4, #3
 800ef7e:	f104 0520 	add.w	r5, r4, #32
 800ef82:	4445      	add	r5, r8
 800ef84:	4601      	mov	r1, r0
 800ef86:	463b      	mov	r3, r7
 800ef88:	464a      	mov	r2, r9
 800ef8a:	4628      	mov	r0, r5
 800ef8c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ef8e:	f007 fa77 	bl	8016480 <uxr_update_output_stream_heartbeat_timestamp>
 800ef92:	eb08 0304 	add.w	r3, r8, r4
 800ef96:	2800      	cmp	r0, #0
 800ef98:	d0da      	beq.n	800ef50 <listen_message_reliably+0x34>
 800ef9a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800ef9e:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800efa2:	9304      	str	r3, [sp, #16]
 800efa4:	4640      	mov	r0, r8
 800efa6:	f000 fcaf 	bl	800f908 <uxr_session_header_offset>
 800efaa:	3501      	adds	r5, #1
 800efac:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800efb0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800efb4:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800efb8:	2300      	movs	r3, #0
 800efba:	2211      	movs	r2, #17
 800efbc:	9000      	str	r0, [sp, #0]
 800efbe:	a90c      	add	r1, sp, #48	@ 0x30
 800efc0:	4650      	mov	r0, sl
 800efc2:	f7fc fcd3 	bl	800b96c <ucdr_init_buffer_origin_offset>
 800efc6:	2300      	movs	r3, #0
 800efc8:	2205      	movs	r2, #5
 800efca:	210b      	movs	r1, #11
 800efcc:	4650      	mov	r0, sl
 800efce:	f001 fa9d 	bl	801050c <uxr_buffer_submessage_header>
 800efd2:	8968      	ldrh	r0, [r5, #10]
 800efd4:	2101      	movs	r1, #1
 800efd6:	f007 fb15 	bl	8016604 <uxr_seq_num_add>
 800efda:	892b      	ldrh	r3, [r5, #8]
 800efdc:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800efe0:	4602      	mov	r2, r0
 800efe2:	9b04      	ldr	r3, [sp, #16]
 800efe4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800efe8:	a90a      	add	r1, sp, #40	@ 0x28
 800efea:	4650      	mov	r0, sl
 800efec:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800eff0:	f002 fb86 	bl	8011700 <uxr_serialize_HEARTBEAT_Payload>
 800eff4:	2200      	movs	r2, #0
 800eff6:	4611      	mov	r1, r2
 800eff8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800effa:	4640      	mov	r0, r8
 800effc:	f000 fc2e 	bl	800f85c <uxr_stamp_session_header>
 800f000:	4650      	mov	r0, sl
 800f002:	f7fc fcf1 	bl	800b9e8 <ucdr_buffer_length>
 800f006:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800f00a:	4602      	mov	r2, r0
 800f00c:	a90c      	add	r1, sp, #48	@ 0x30
 800f00e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f012:	4444      	add	r4, r8
 800f014:	47a8      	blx	r5
 800f016:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800f01a:	9903      	ldr	r1, [sp, #12]
 800f01c:	455a      	cmp	r2, fp
 800f01e:	f106 0601 	add.w	r6, r6, #1
 800f022:	eb73 0101 	sbcs.w	r1, r3, r1
 800f026:	b2f0      	uxtb	r0, r6
 800f028:	db9c      	blt.n	800ef64 <listen_message_reliably+0x48>
 800f02a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800f02e:	4283      	cmp	r3, r0
 800f030:	d89e      	bhi.n	800ef70 <listen_message_reliably+0x54>
 800f032:	9a03      	ldr	r2, [sp, #12]
 800f034:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f038:	429a      	cmp	r2, r3
 800f03a:	bf08      	it	eq
 800f03c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800f040:	d01e      	beq.n	800f080 <listen_message_reliably+0x164>
 800f042:	ebab 0309 	sub.w	r3, fp, r9
 800f046:	9905      	ldr	r1, [sp, #20]
 800f048:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	bf08      	it	eq
 800f050:	2301      	moveq	r3, #1
 800f052:	4299      	cmp	r1, r3
 800f054:	bfa8      	it	ge
 800f056:	4619      	movge	r1, r3
 800f058:	6894      	ldr	r4, [r2, #8]
 800f05a:	6810      	ldr	r0, [r2, #0]
 800f05c:	4689      	mov	r9, r1
 800f05e:	460b      	mov	r3, r1
 800f060:	aa08      	add	r2, sp, #32
 800f062:	a907      	add	r1, sp, #28
 800f064:	47a0      	blx	r4
 800f066:	b968      	cbnz	r0, 800f084 <listen_message_reliably+0x168>
 800f068:	9b05      	ldr	r3, [sp, #20]
 800f06a:	eba3 0309 	sub.w	r3, r3, r9
 800f06e:	2b00      	cmp	r3, #0
 800f070:	9305      	str	r3, [sp, #20]
 800f072:	f73f af5c 	bgt.w	800ef2e <listen_message_reliably+0x12>
 800f076:	4604      	mov	r4, r0
 800f078:	4620      	mov	r0, r4
 800f07a:	b01d      	add	sp, #116	@ 0x74
 800f07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f080:	9b05      	ldr	r3, [sp, #20]
 800f082:	e7e0      	b.n	800f046 <listen_message_reliably+0x12a>
 800f084:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f088:	4604      	mov	r4, r0
 800f08a:	a80c      	add	r0, sp, #48	@ 0x30
 800f08c:	f7fc fc80 	bl	800b990 <ucdr_init_buffer>
 800f090:	2500      	movs	r5, #0
 800f092:	f10d 031a 	add.w	r3, sp, #26
 800f096:	aa06      	add	r2, sp, #24
 800f098:	a90c      	add	r1, sp, #48	@ 0x30
 800f09a:	4640      	mov	r0, r8
 800f09c:	f88d 5018 	strb.w	r5, [sp, #24]
 800f0a0:	f000 fbf0 	bl	800f884 <uxr_read_session_header>
 800f0a4:	b918      	cbnz	r0, 800f0ae <listen_message_reliably+0x192>
 800f0a6:	4620      	mov	r0, r4
 800f0a8:	b01d      	add	sp, #116	@ 0x74
 800f0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ae:	4629      	mov	r1, r5
 800f0b0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f0b4:	f001 f91c 	bl	80102f0 <uxr_stream_id_from_raw>
 800f0b8:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800f0bc:	2d01      	cmp	r5, #1
 800f0be:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800f0c2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800f0c6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f0ca:	d04b      	beq.n	800f164 <listen_message_reliably+0x248>
 800f0cc:	2d02      	cmp	r5, #2
 800f0ce:	d00f      	beq.n	800f0f0 <listen_message_reliably+0x1d4>
 800f0d0:	2d00      	cmp	r5, #0
 800f0d2:	d1e8      	bne.n	800f0a6 <listen_message_reliably+0x18a>
 800f0d4:	4629      	mov	r1, r5
 800f0d6:	4628      	mov	r0, r5
 800f0d8:	f001 f90a 	bl	80102f0 <uxr_stream_id_from_raw>
 800f0dc:	a90c      	add	r1, sp, #48	@ 0x30
 800f0de:	4602      	mov	r2, r0
 800f0e0:	4640      	mov	r0, r8
 800f0e2:	920a      	str	r2, [sp, #40]	@ 0x28
 800f0e4:	f7ff fd92 	bl	800ec0c <read_submessage_list>
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	b01d      	add	sp, #116	@ 0x74
 800f0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0f0:	4631      	mov	r1, r6
 800f0f2:	f108 0008 	add.w	r0, r8, #8
 800f0f6:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800f0fa:	f001 f9e7 	bl	80104cc <uxr_get_input_reliable_stream>
 800f0fe:	4607      	mov	r7, r0
 800f100:	b338      	cbz	r0, 800f152 <listen_message_reliably+0x236>
 800f102:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f104:	9203      	str	r2, [sp, #12]
 800f106:	a80c      	add	r0, sp, #48	@ 0x30
 800f108:	f7fc fc72 	bl	800b9f0 <ucdr_buffer_remaining>
 800f10c:	4603      	mov	r3, r0
 800f10e:	f10d 0019 	add.w	r0, sp, #25
 800f112:	9000      	str	r0, [sp, #0]
 800f114:	9a03      	ldr	r2, [sp, #12]
 800f116:	4651      	mov	r1, sl
 800f118:	4638      	mov	r0, r7
 800f11a:	f006 fdc7 	bl	8015cac <uxr_receive_reliable_message>
 800f11e:	b1c0      	cbz	r0, 800f152 <listen_message_reliably+0x236>
 800f120:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f124:	b393      	cbz	r3, 800f18c <listen_message_reliably+0x270>
 800f126:	ad14      	add	r5, sp, #80	@ 0x50
 800f128:	f04f 0a02 	mov.w	sl, #2
 800f12c:	e00a      	b.n	800f144 <listen_message_reliably+0x228>
 800f12e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800f132:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800f136:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800f13a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f13c:	4629      	mov	r1, r5
 800f13e:	4640      	mov	r0, r8
 800f140:	f7ff fd64 	bl	800ec0c <read_submessage_list>
 800f144:	2204      	movs	r2, #4
 800f146:	4629      	mov	r1, r5
 800f148:	4638      	mov	r0, r7
 800f14a:	f006 fe2f 	bl	8015dac <uxr_next_input_reliable_buffer_available>
 800f14e:	2800      	cmp	r0, #0
 800f150:	d1ed      	bne.n	800f12e <listen_message_reliably+0x212>
 800f152:	4640      	mov	r0, r8
 800f154:	4632      	mov	r2, r6
 800f156:	4649      	mov	r1, r9
 800f158:	f7ff fbd4 	bl	800e904 <write_submessage_acknack.isra.0>
 800f15c:	4620      	mov	r0, r4
 800f15e:	b01d      	add	sp, #116	@ 0x74
 800f160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f164:	4631      	mov	r1, r6
 800f166:	f108 0008 	add.w	r0, r8, #8
 800f16a:	f001 f9a5 	bl	80104b8 <uxr_get_input_best_effort_stream>
 800f16e:	2800      	cmp	r0, #0
 800f170:	d099      	beq.n	800f0a6 <listen_message_reliably+0x18a>
 800f172:	4651      	mov	r1, sl
 800f174:	f006 fd06 	bl	8015b84 <uxr_receive_best_effort_message>
 800f178:	2800      	cmp	r0, #0
 800f17a:	d094      	beq.n	800f0a6 <listen_message_reliably+0x18a>
 800f17c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f180:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f182:	a90c      	add	r1, sp, #48	@ 0x30
 800f184:	4640      	mov	r0, r8
 800f186:	f7ff fd41 	bl	800ec0c <read_submessage_list>
 800f18a:	e78c      	b.n	800f0a6 <listen_message_reliably+0x18a>
 800f18c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f190:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f192:	a90c      	add	r1, sp, #48	@ 0x30
 800f194:	4640      	mov	r0, r8
 800f196:	f7ff fd39 	bl	800ec0c <read_submessage_list>
 800f19a:	e7c4      	b.n	800f126 <listen_message_reliably+0x20a>

0800f19c <uxr_run_session_timeout>:
 800f19c:	b570      	push	{r4, r5, r6, lr}
 800f19e:	4604      	mov	r4, r0
 800f1a0:	460d      	mov	r5, r1
 800f1a2:	f001 f9f9 	bl	8010598 <uxr_millis>
 800f1a6:	4606      	mov	r6, r0
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	f7ff fc71 	bl	800ea90 <uxr_flash_output_streams>
 800f1ae:	4629      	mov	r1, r5
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	f7ff feb3 	bl	800ef1c <listen_message_reliably>
 800f1b6:	f001 f9ef 	bl	8010598 <uxr_millis>
 800f1ba:	1b83      	subs	r3, r0, r6
 800f1bc:	1ae9      	subs	r1, r5, r3
 800f1be:	2900      	cmp	r1, #0
 800f1c0:	dcf6      	bgt.n	800f1b0 <uxr_run_session_timeout+0x14>
 800f1c2:	f104 0008 	add.w	r0, r4, #8
 800f1c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f1ca:	f001 b989 	b.w	80104e0 <uxr_output_streams_confirmed>
 800f1ce:	bf00      	nop

0800f1d0 <uxr_run_session_until_data>:
 800f1d0:	b570      	push	{r4, r5, r6, lr}
 800f1d2:	4604      	mov	r4, r0
 800f1d4:	460d      	mov	r5, r1
 800f1d6:	f001 f9df 	bl	8010598 <uxr_millis>
 800f1da:	4606      	mov	r6, r0
 800f1dc:	4620      	mov	r0, r4
 800f1de:	f7ff fc57 	bl	800ea90 <uxr_flash_output_streams>
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800f1e8:	4629      	mov	r1, r5
 800f1ea:	e005      	b.n	800f1f8 <uxr_run_session_until_data+0x28>
 800f1ec:	f001 f9d4 	bl	8010598 <uxr_millis>
 800f1f0:	1b83      	subs	r3, r0, r6
 800f1f2:	1ae9      	subs	r1, r5, r3
 800f1f4:	2900      	cmp	r1, #0
 800f1f6:	dd07      	ble.n	800f208 <uxr_run_session_until_data+0x38>
 800f1f8:	4620      	mov	r0, r4
 800f1fa:	f7ff fe8f 	bl	800ef1c <listen_message_reliably>
 800f1fe:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f202:	2800      	cmp	r0, #0
 800f204:	d0f2      	beq.n	800f1ec <uxr_run_session_until_data+0x1c>
 800f206:	bd70      	pop	{r4, r5, r6, pc}
 800f208:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f20c:	bd70      	pop	{r4, r5, r6, pc}
 800f20e:	bf00      	nop

0800f210 <uxr_run_session_until_confirm_delivery>:
 800f210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f214:	4606      	mov	r6, r0
 800f216:	460d      	mov	r5, r1
 800f218:	f001 f9be 	bl	8010598 <uxr_millis>
 800f21c:	4607      	mov	r7, r0
 800f21e:	4630      	mov	r0, r6
 800f220:	f7ff fc36 	bl	800ea90 <uxr_flash_output_streams>
 800f224:	2d00      	cmp	r5, #0
 800f226:	f106 0808 	add.w	r8, r6, #8
 800f22a:	bfa8      	it	ge
 800f22c:	462c      	movge	r4, r5
 800f22e:	da07      	bge.n	800f240 <uxr_run_session_until_confirm_delivery+0x30>
 800f230:	e00e      	b.n	800f250 <uxr_run_session_until_confirm_delivery+0x40>
 800f232:	f7ff fe73 	bl	800ef1c <listen_message_reliably>
 800f236:	f001 f9af 	bl	8010598 <uxr_millis>
 800f23a:	1bc3      	subs	r3, r0, r7
 800f23c:	1aec      	subs	r4, r5, r3
 800f23e:	d407      	bmi.n	800f250 <uxr_run_session_until_confirm_delivery+0x40>
 800f240:	4640      	mov	r0, r8
 800f242:	f001 f94d 	bl	80104e0 <uxr_output_streams_confirmed>
 800f246:	4603      	mov	r3, r0
 800f248:	4621      	mov	r1, r4
 800f24a:	4630      	mov	r0, r6
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d0f0      	beq.n	800f232 <uxr_run_session_until_confirm_delivery+0x22>
 800f250:	4640      	mov	r0, r8
 800f252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f256:	f001 b943 	b.w	80104e0 <uxr_output_streams_confirmed>
 800f25a:	bf00      	nop

0800f25c <uxr_run_session_until_all_status>:
 800f25c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f260:	9c08      	ldr	r4, [sp, #32]
 800f262:	4606      	mov	r6, r0
 800f264:	460f      	mov	r7, r1
 800f266:	4691      	mov	r9, r2
 800f268:	461d      	mov	r5, r3
 800f26a:	f7ff fc11 	bl	800ea90 <uxr_flash_output_streams>
 800f26e:	b124      	cbz	r4, 800f27a <uxr_run_session_until_all_status+0x1e>
 800f270:	4622      	mov	r2, r4
 800f272:	21ff      	movs	r1, #255	@ 0xff
 800f274:	4628      	mov	r0, r5
 800f276:	f008 f97f 	bl	8017578 <memset>
 800f27a:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800f27e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800f280:	f001 f98a 	bl	8010598 <uxr_millis>
 800f284:	3d01      	subs	r5, #1
 800f286:	f1a9 0902 	sub.w	r9, r9, #2
 800f28a:	4680      	mov	r8, r0
 800f28c:	4639      	mov	r1, r7
 800f28e:	4630      	mov	r0, r6
 800f290:	f7ff fe44 	bl	800ef1c <listen_message_reliably>
 800f294:	f001 f980 	bl	8010598 <uxr_millis>
 800f298:	eba0 0008 	sub.w	r0, r0, r8
 800f29c:	1a39      	subs	r1, r7, r0
 800f29e:	b344      	cbz	r4, 800f2f2 <uxr_run_session_until_all_status+0x96>
 800f2a0:	4628      	mov	r0, r5
 800f2a2:	46ac      	mov	ip, r5
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	e002      	b.n	800f2ae <uxr_run_session_until_all_status+0x52>
 800f2a8:	42a3      	cmp	r3, r4
 800f2aa:	d20d      	bcs.n	800f2c8 <uxr_run_session_until_all_status+0x6c>
 800f2ac:	3301      	adds	r3, #1
 800f2ae:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800f2b2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800f2b6:	d1f7      	bne.n	800f2a8 <uxr_run_session_until_all_status+0x4c>
 800f2b8:	42a3      	cmp	r3, r4
 800f2ba:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800f2be:	d213      	bcs.n	800f2e8 <uxr_run_session_until_all_status+0x8c>
 800f2c0:	2a00      	cmp	r2, #0
 800f2c2:	d0f3      	beq.n	800f2ac <uxr_run_session_until_all_status+0x50>
 800f2c4:	2900      	cmp	r1, #0
 800f2c6:	dce2      	bgt.n	800f28e <uxr_run_session_until_all_status+0x32>
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800f2cc:	442c      	add	r4, r5
 800f2ce:	e001      	b.n	800f2d4 <uxr_run_session_until_all_status+0x78>
 800f2d0:	2b01      	cmp	r3, #1
 800f2d2:	d812      	bhi.n	800f2fa <uxr_run_session_until_all_status+0x9e>
 800f2d4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800f2d8:	4284      	cmp	r4, r0
 800f2da:	d1f9      	bne.n	800f2d0 <uxr_run_session_until_all_status+0x74>
 800f2dc:	2b01      	cmp	r3, #1
 800f2de:	bf8c      	ite	hi
 800f2e0:	2000      	movhi	r0, #0
 800f2e2:	2001      	movls	r0, #1
 800f2e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2e8:	2900      	cmp	r1, #0
 800f2ea:	dded      	ble.n	800f2c8 <uxr_run_session_until_all_status+0x6c>
 800f2ec:	2a00      	cmp	r2, #0
 800f2ee:	d1ce      	bne.n	800f28e <uxr_run_session_until_all_status+0x32>
 800f2f0:	e7ea      	b.n	800f2c8 <uxr_run_session_until_all_status+0x6c>
 800f2f2:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800f2f4:	2001      	movs	r0, #1
 800f2f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2fa:	2000      	movs	r0, #0
 800f2fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f300 <wait_session_status>:
 800f300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f304:	4604      	mov	r4, r0
 800f306:	b09d      	sub	sp, #116	@ 0x74
 800f308:	20ff      	movs	r0, #255	@ 0xff
 800f30a:	7160      	strb	r0, [r4, #5]
 800f30c:	9303      	str	r3, [sp, #12]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	f000 80b6 	beq.w	800f480 <wait_session_status+0x180>
 800f314:	468a      	mov	sl, r1
 800f316:	4691      	mov	r9, r2
 800f318:	f04f 0b00 	mov.w	fp, #0
 800f31c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f31e:	464a      	mov	r2, r9
 800f320:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f324:	4651      	mov	r1, sl
 800f326:	47a8      	blx	r5
 800f328:	f001 f936 	bl	8010598 <uxr_millis>
 800f32c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f330:	4605      	mov	r5, r0
 800f332:	e009      	b.n	800f348 <wait_session_status+0x48>
 800f334:	f001 f930 	bl	8010598 <uxr_millis>
 800f338:	1b40      	subs	r0, r0, r5
 800f33a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f33e:	2b00      	cmp	r3, #0
 800f340:	dd40      	ble.n	800f3c4 <wait_session_status+0xc4>
 800f342:	7960      	ldrb	r0, [r4, #5]
 800f344:	28ff      	cmp	r0, #255	@ 0xff
 800f346:	d145      	bne.n	800f3d4 <wait_session_status+0xd4>
 800f348:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800f34a:	a908      	add	r1, sp, #32
 800f34c:	6896      	ldr	r6, [r2, #8]
 800f34e:	6810      	ldr	r0, [r2, #0]
 800f350:	aa09      	add	r2, sp, #36	@ 0x24
 800f352:	47b0      	blx	r6
 800f354:	2800      	cmp	r0, #0
 800f356:	d0ed      	beq.n	800f334 <wait_session_status+0x34>
 800f358:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800f35c:	a80c      	add	r0, sp, #48	@ 0x30
 800f35e:	f7fc fb17 	bl	800b990 <ucdr_init_buffer>
 800f362:	2600      	movs	r6, #0
 800f364:	f10d 031e 	add.w	r3, sp, #30
 800f368:	aa07      	add	r2, sp, #28
 800f36a:	a90c      	add	r1, sp, #48	@ 0x30
 800f36c:	4620      	mov	r0, r4
 800f36e:	f88d 601c 	strb.w	r6, [sp, #28]
 800f372:	f000 fa87 	bl	800f884 <uxr_read_session_header>
 800f376:	2800      	cmp	r0, #0
 800f378:	d0dc      	beq.n	800f334 <wait_session_status+0x34>
 800f37a:	4631      	mov	r1, r6
 800f37c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800f380:	f000 ffb6 	bl	80102f0 <uxr_stream_id_from_raw>
 800f384:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800f388:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800f38c:	9302      	str	r3, [sp, #8]
 800f38e:	2f01      	cmp	r7, #1
 800f390:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800f394:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f398:	d05c      	beq.n	800f454 <wait_session_status+0x154>
 800f39a:	2f02      	cmp	r7, #2
 800f39c:	d020      	beq.n	800f3e0 <wait_session_status+0xe0>
 800f39e:	2f00      	cmp	r7, #0
 800f3a0:	d1c8      	bne.n	800f334 <wait_session_status+0x34>
 800f3a2:	4639      	mov	r1, r7
 800f3a4:	4638      	mov	r0, r7
 800f3a6:	f000 ffa3 	bl	80102f0 <uxr_stream_id_from_raw>
 800f3aa:	a90c      	add	r1, sp, #48	@ 0x30
 800f3ac:	4602      	mov	r2, r0
 800f3ae:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	f7ff fc2b 	bl	800ec0c <read_submessage_list>
 800f3b6:	f001 f8ef 	bl	8010598 <uxr_millis>
 800f3ba:	1b40      	subs	r0, r0, r5
 800f3bc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	dcbe      	bgt.n	800f342 <wait_session_status+0x42>
 800f3c4:	9b03      	ldr	r3, [sp, #12]
 800f3c6:	7960      	ldrb	r0, [r4, #5]
 800f3c8:	f10b 0b01 	add.w	fp, fp, #1
 800f3cc:	455b      	cmp	r3, fp
 800f3ce:	d001      	beq.n	800f3d4 <wait_session_status+0xd4>
 800f3d0:	28ff      	cmp	r0, #255	@ 0xff
 800f3d2:	d0a3      	beq.n	800f31c <wait_session_status+0x1c>
 800f3d4:	38ff      	subs	r0, #255	@ 0xff
 800f3d6:	bf18      	it	ne
 800f3d8:	2001      	movne	r0, #1
 800f3da:	b01d      	add	sp, #116	@ 0x74
 800f3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3e0:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800f3e4:	9304      	str	r3, [sp, #16]
 800f3e6:	4631      	mov	r1, r6
 800f3e8:	f104 0008 	add.w	r0, r4, #8
 800f3ec:	f001 f86e 	bl	80104cc <uxr_get_input_reliable_stream>
 800f3f0:	4680      	mov	r8, r0
 800f3f2:	b348      	cbz	r0, 800f448 <wait_session_status+0x148>
 800f3f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f3f6:	9205      	str	r2, [sp, #20]
 800f3f8:	a80c      	add	r0, sp, #48	@ 0x30
 800f3fa:	f7fc faf9 	bl	800b9f0 <ucdr_buffer_remaining>
 800f3fe:	4603      	mov	r3, r0
 800f400:	f10d 001d 	add.w	r0, sp, #29
 800f404:	9000      	str	r0, [sp, #0]
 800f406:	9a05      	ldr	r2, [sp, #20]
 800f408:	9902      	ldr	r1, [sp, #8]
 800f40a:	4640      	mov	r0, r8
 800f40c:	f006 fc4e 	bl	8015cac <uxr_receive_reliable_message>
 800f410:	b1d0      	cbz	r0, 800f448 <wait_session_status+0x148>
 800f412:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d03a      	beq.n	800f490 <wait_session_status+0x190>
 800f41a:	9f04      	ldr	r7, [sp, #16]
 800f41c:	e00a      	b.n	800f434 <wait_session_status+0x134>
 800f41e:	f04f 0302 	mov.w	r3, #2
 800f422:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800f426:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800f42a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800f42e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f430:	f7ff fbec 	bl	800ec0c <read_submessage_list>
 800f434:	a914      	add	r1, sp, #80	@ 0x50
 800f436:	2204      	movs	r2, #4
 800f438:	4640      	mov	r0, r8
 800f43a:	f006 fcb7 	bl	8015dac <uxr_next_input_reliable_buffer_available>
 800f43e:	4603      	mov	r3, r0
 800f440:	a914      	add	r1, sp, #80	@ 0x50
 800f442:	4620      	mov	r0, r4
 800f444:	2b00      	cmp	r3, #0
 800f446:	d1ea      	bne.n	800f41e <wait_session_status+0x11e>
 800f448:	9904      	ldr	r1, [sp, #16]
 800f44a:	4632      	mov	r2, r6
 800f44c:	4620      	mov	r0, r4
 800f44e:	f7ff fa59 	bl	800e904 <write_submessage_acknack.isra.0>
 800f452:	e76f      	b.n	800f334 <wait_session_status+0x34>
 800f454:	4631      	mov	r1, r6
 800f456:	f104 0008 	add.w	r0, r4, #8
 800f45a:	f001 f82d 	bl	80104b8 <uxr_get_input_best_effort_stream>
 800f45e:	2800      	cmp	r0, #0
 800f460:	f43f af68 	beq.w	800f334 <wait_session_status+0x34>
 800f464:	9902      	ldr	r1, [sp, #8]
 800f466:	f006 fb8d 	bl	8015b84 <uxr_receive_best_effort_message>
 800f46a:	2800      	cmp	r0, #0
 800f46c:	f43f af62 	beq.w	800f334 <wait_session_status+0x34>
 800f470:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800f474:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f476:	a90c      	add	r1, sp, #48	@ 0x30
 800f478:	4620      	mov	r0, r4
 800f47a:	f7ff fbc7 	bl	800ec0c <read_submessage_list>
 800f47e:	e759      	b.n	800f334 <wait_session_status+0x34>
 800f480:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f482:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f486:	47a0      	blx	r4
 800f488:	2001      	movs	r0, #1
 800f48a:	b01d      	add	sp, #116	@ 0x74
 800f48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f490:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800f494:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f496:	a90c      	add	r1, sp, #48	@ 0x30
 800f498:	4620      	mov	r0, r4
 800f49a:	f7ff fbb7 	bl	800ec0c <read_submessage_list>
 800f49e:	e7bc      	b.n	800f41a <wait_session_status+0x11a>

0800f4a0 <uxr_delete_session_retries>:
 800f4a0:	b530      	push	{r4, r5, lr}
 800f4a2:	b08f      	sub	sp, #60	@ 0x3c
 800f4a4:	4604      	mov	r4, r0
 800f4a6:	460d      	mov	r5, r1
 800f4a8:	f000 fa2e 	bl	800f908 <uxr_session_header_offset>
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	2210      	movs	r2, #16
 800f4b0:	9000      	str	r0, [sp, #0]
 800f4b2:	a902      	add	r1, sp, #8
 800f4b4:	a806      	add	r0, sp, #24
 800f4b6:	f7fc fa59 	bl	800b96c <ucdr_init_buffer_origin_offset>
 800f4ba:	a906      	add	r1, sp, #24
 800f4bc:	4620      	mov	r0, r4
 800f4be:	f000 f973 	bl	800f7a8 <uxr_buffer_delete_session>
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	4611      	mov	r1, r2
 800f4c6:	9b06      	ldr	r3, [sp, #24]
 800f4c8:	4620      	mov	r0, r4
 800f4ca:	f000 f9c7 	bl	800f85c <uxr_stamp_session_header>
 800f4ce:	a806      	add	r0, sp, #24
 800f4d0:	f7fc fa8a 	bl	800b9e8 <ucdr_buffer_length>
 800f4d4:	462b      	mov	r3, r5
 800f4d6:	4602      	mov	r2, r0
 800f4d8:	a902      	add	r1, sp, #8
 800f4da:	4620      	mov	r0, r4
 800f4dc:	f7ff ff10 	bl	800f300 <wait_session_status>
 800f4e0:	b118      	cbz	r0, 800f4ea <uxr_delete_session_retries+0x4a>
 800f4e2:	7960      	ldrb	r0, [r4, #5]
 800f4e4:	fab0 f080 	clz	r0, r0
 800f4e8:	0940      	lsrs	r0, r0, #5
 800f4ea:	b00f      	add	sp, #60	@ 0x3c
 800f4ec:	bd30      	pop	{r4, r5, pc}
 800f4ee:	bf00      	nop

0800f4f0 <uxr_create_session>:
 800f4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4f4:	f100 0b08 	add.w	fp, r0, #8
 800f4f8:	b0ab      	sub	sp, #172	@ 0xac
 800f4fa:	4604      	mov	r4, r0
 800f4fc:	4658      	mov	r0, fp
 800f4fe:	f000 ff2b 	bl	8010358 <uxr_reset_stream_storage>
 800f502:	4620      	mov	r0, r4
 800f504:	f000 fa00 	bl	800f908 <uxr_session_header_offset>
 800f508:	2300      	movs	r3, #0
 800f50a:	9000      	str	r0, [sp, #0]
 800f50c:	221c      	movs	r2, #28
 800f50e:	a90b      	add	r1, sp, #44	@ 0x2c
 800f510:	a812      	add	r0, sp, #72	@ 0x48
 800f512:	f7fc fa2b 	bl	800b96c <ucdr_init_buffer_origin_offset>
 800f516:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f518:	8a1a      	ldrh	r2, [r3, #16]
 800f51a:	3a04      	subs	r2, #4
 800f51c:	b292      	uxth	r2, r2
 800f51e:	a912      	add	r1, sp, #72	@ 0x48
 800f520:	4620      	mov	r0, r4
 800f522:	f000 f917 	bl	800f754 <uxr_buffer_create_session>
 800f526:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f528:	4620      	mov	r0, r4
 800f52a:	f000 f983 	bl	800f834 <uxr_stamp_create_session_header>
 800f52e:	a812      	add	r0, sp, #72	@ 0x48
 800f530:	f7fc fa5a 	bl	800b9e8 <ucdr_buffer_length>
 800f534:	23ff      	movs	r3, #255	@ 0xff
 800f536:	7163      	strb	r3, [r4, #5]
 800f538:	230a      	movs	r3, #10
 800f53a:	46da      	mov	sl, fp
 800f53c:	9303      	str	r3, [sp, #12]
 800f53e:	4683      	mov	fp, r0
 800f540:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f542:	465a      	mov	r2, fp
 800f544:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f548:	a90b      	add	r1, sp, #44	@ 0x2c
 800f54a:	47a8      	blx	r5
 800f54c:	f001 f824 	bl	8010598 <uxr_millis>
 800f550:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f554:	4605      	mov	r5, r0
 800f556:	e009      	b.n	800f56c <uxr_create_session+0x7c>
 800f558:	f001 f81e 	bl	8010598 <uxr_millis>
 800f55c:	1b40      	subs	r0, r0, r5
 800f55e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f562:	2b00      	cmp	r3, #0
 800f564:	7962      	ldrb	r2, [r4, #5]
 800f566:	dd38      	ble.n	800f5da <uxr_create_session+0xea>
 800f568:	2aff      	cmp	r2, #255	@ 0xff
 800f56a:	d13c      	bne.n	800f5e6 <uxr_create_session+0xf6>
 800f56c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800f56e:	a907      	add	r1, sp, #28
 800f570:	6896      	ldr	r6, [r2, #8]
 800f572:	6810      	ldr	r0, [r2, #0]
 800f574:	aa08      	add	r2, sp, #32
 800f576:	47b0      	blx	r6
 800f578:	2800      	cmp	r0, #0
 800f57a:	d0ed      	beq.n	800f558 <uxr_create_session+0x68>
 800f57c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f580:	a81a      	add	r0, sp, #104	@ 0x68
 800f582:	f7fc fa05 	bl	800b990 <ucdr_init_buffer>
 800f586:	2600      	movs	r6, #0
 800f588:	f10d 031a 	add.w	r3, sp, #26
 800f58c:	aa06      	add	r2, sp, #24
 800f58e:	a91a      	add	r1, sp, #104	@ 0x68
 800f590:	4620      	mov	r0, r4
 800f592:	f88d 6018 	strb.w	r6, [sp, #24]
 800f596:	f000 f975 	bl	800f884 <uxr_read_session_header>
 800f59a:	2800      	cmp	r0, #0
 800f59c:	d0dc      	beq.n	800f558 <uxr_create_session+0x68>
 800f59e:	4631      	mov	r1, r6
 800f5a0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f5a4:	f000 fea4 	bl	80102f0 <uxr_stream_id_from_raw>
 800f5a8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800f5ac:	2e01      	cmp	r6, #1
 800f5ae:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800f5b2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800f5b6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800f5ba:	d053      	beq.n	800f664 <uxr_create_session+0x174>
 800f5bc:	2e02      	cmp	r6, #2
 800f5be:	d018      	beq.n	800f5f2 <uxr_create_session+0x102>
 800f5c0:	2e00      	cmp	r6, #0
 800f5c2:	d1c9      	bne.n	800f558 <uxr_create_session+0x68>
 800f5c4:	4631      	mov	r1, r6
 800f5c6:	4630      	mov	r0, r6
 800f5c8:	f000 fe92 	bl	80102f0 <uxr_stream_id_from_raw>
 800f5cc:	a91a      	add	r1, sp, #104	@ 0x68
 800f5ce:	4602      	mov	r2, r0
 800f5d0:	900a      	str	r0, [sp, #40]	@ 0x28
 800f5d2:	4620      	mov	r0, r4
 800f5d4:	f7ff fb1a 	bl	800ec0c <read_submessage_list>
 800f5d8:	e7be      	b.n	800f558 <uxr_create_session+0x68>
 800f5da:	9b03      	ldr	r3, [sp, #12]
 800f5dc:	3b01      	subs	r3, #1
 800f5de:	9303      	str	r3, [sp, #12]
 800f5e0:	d001      	beq.n	800f5e6 <uxr_create_session+0xf6>
 800f5e2:	2aff      	cmp	r2, #255	@ 0xff
 800f5e4:	d0ac      	beq.n	800f540 <uxr_create_session+0x50>
 800f5e6:	2a00      	cmp	r2, #0
 800f5e8:	d051      	beq.n	800f68e <uxr_create_session+0x19e>
 800f5ea:	2000      	movs	r0, #0
 800f5ec:	b02b      	add	sp, #172	@ 0xac
 800f5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5f2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f5f6:	9304      	str	r3, [sp, #16]
 800f5f8:	4639      	mov	r1, r7
 800f5fa:	4650      	mov	r0, sl
 800f5fc:	f000 ff66 	bl	80104cc <uxr_get_input_reliable_stream>
 800f600:	4680      	mov	r8, r0
 800f602:	b348      	cbz	r0, 800f658 <uxr_create_session+0x168>
 800f604:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f606:	9205      	str	r2, [sp, #20]
 800f608:	a81a      	add	r0, sp, #104	@ 0x68
 800f60a:	f7fc f9f1 	bl	800b9f0 <ucdr_buffer_remaining>
 800f60e:	4603      	mov	r3, r0
 800f610:	f10d 0019 	add.w	r0, sp, #25
 800f614:	9000      	str	r0, [sp, #0]
 800f616:	9a05      	ldr	r2, [sp, #20]
 800f618:	4649      	mov	r1, r9
 800f61a:	4640      	mov	r0, r8
 800f61c:	f006 fb46 	bl	8015cac <uxr_receive_reliable_message>
 800f620:	b1d0      	cbz	r0, 800f658 <uxr_create_session+0x168>
 800f622:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d038      	beq.n	800f69c <uxr_create_session+0x1ac>
 800f62a:	9e04      	ldr	r6, [sp, #16]
 800f62c:	e00a      	b.n	800f644 <uxr_create_session+0x154>
 800f62e:	f04f 0302 	mov.w	r3, #2
 800f632:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800f636:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800f63a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f63e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f640:	f7ff fae4 	bl	800ec0c <read_submessage_list>
 800f644:	a922      	add	r1, sp, #136	@ 0x88
 800f646:	2204      	movs	r2, #4
 800f648:	4640      	mov	r0, r8
 800f64a:	f006 fbaf 	bl	8015dac <uxr_next_input_reliable_buffer_available>
 800f64e:	4603      	mov	r3, r0
 800f650:	a922      	add	r1, sp, #136	@ 0x88
 800f652:	4620      	mov	r0, r4
 800f654:	2b00      	cmp	r3, #0
 800f656:	d1ea      	bne.n	800f62e <uxr_create_session+0x13e>
 800f658:	9904      	ldr	r1, [sp, #16]
 800f65a:	463a      	mov	r2, r7
 800f65c:	4620      	mov	r0, r4
 800f65e:	f7ff f951 	bl	800e904 <write_submessage_acknack.isra.0>
 800f662:	e779      	b.n	800f558 <uxr_create_session+0x68>
 800f664:	4639      	mov	r1, r7
 800f666:	4650      	mov	r0, sl
 800f668:	f000 ff26 	bl	80104b8 <uxr_get_input_best_effort_stream>
 800f66c:	2800      	cmp	r0, #0
 800f66e:	f43f af73 	beq.w	800f558 <uxr_create_session+0x68>
 800f672:	4649      	mov	r1, r9
 800f674:	f006 fa86 	bl	8015b84 <uxr_receive_best_effort_message>
 800f678:	2800      	cmp	r0, #0
 800f67a:	f43f af6d 	beq.w	800f558 <uxr_create_session+0x68>
 800f67e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800f682:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f684:	a91a      	add	r1, sp, #104	@ 0x68
 800f686:	4620      	mov	r0, r4
 800f688:	f7ff fac0 	bl	800ec0c <read_submessage_list>
 800f68c:	e764      	b.n	800f558 <uxr_create_session+0x68>
 800f68e:	4650      	mov	r0, sl
 800f690:	f000 fe62 	bl	8010358 <uxr_reset_stream_storage>
 800f694:	2001      	movs	r0, #1
 800f696:	b02b      	add	sp, #172	@ 0xac
 800f698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f69c:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800f6a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f6a2:	a91a      	add	r1, sp, #104	@ 0x68
 800f6a4:	4620      	mov	r0, r4
 800f6a6:	f7ff fab1 	bl	800ec0c <read_submessage_list>
 800f6aa:	e7be      	b.n	800f62a <uxr_create_session+0x13a>

0800f6ac <uxr_prepare_stream_to_write_submessage>:
 800f6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6b0:	b082      	sub	sp, #8
 800f6b2:	4682      	mov	sl, r0
 800f6b4:	4610      	mov	r0, r2
 800f6b6:	4615      	mov	r5, r2
 800f6b8:	461e      	mov	r6, r3
 800f6ba:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800f6be:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800f6c2:	9101      	str	r1, [sp, #4]
 800f6c4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800f6c8:	f000 ff60 	bl	801058c <uxr_submessage_padding>
 800f6cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f6d0:	f105 0904 	add.w	r9, r5, #4
 800f6d4:	2b01      	cmp	r3, #1
 800f6d6:	4481      	add	r9, r0
 800f6d8:	d01d      	beq.n	800f716 <uxr_prepare_stream_to_write_submessage+0x6a>
 800f6da:	2b02      	cmp	r3, #2
 800f6dc:	d116      	bne.n	800f70c <uxr_prepare_stream_to_write_submessage+0x60>
 800f6de:	4621      	mov	r1, r4
 800f6e0:	f10a 0008 	add.w	r0, sl, #8
 800f6e4:	f000 fede 	bl	80104a4 <uxr_get_output_reliable_stream>
 800f6e8:	4604      	mov	r4, r0
 800f6ea:	b158      	cbz	r0, 800f704 <uxr_prepare_stream_to_write_submessage+0x58>
 800f6ec:	4649      	mov	r1, r9
 800f6ee:	4632      	mov	r2, r6
 800f6f0:	f006 fd18 	bl	8016124 <uxr_prepare_reliable_buffer_to_write>
 800f6f4:	4604      	mov	r4, r0
 800f6f6:	b12c      	cbz	r4, 800f704 <uxr_prepare_stream_to_write_submessage+0x58>
 800f6f8:	4643      	mov	r3, r8
 800f6fa:	b2aa      	uxth	r2, r5
 800f6fc:	4639      	mov	r1, r7
 800f6fe:	4630      	mov	r0, r6
 800f700:	f000 ff04 	bl	801050c <uxr_buffer_submessage_header>
 800f704:	4620      	mov	r0, r4
 800f706:	b002      	add	sp, #8
 800f708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f70c:	2400      	movs	r4, #0
 800f70e:	4620      	mov	r0, r4
 800f710:	b002      	add	sp, #8
 800f712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f716:	4621      	mov	r1, r4
 800f718:	f10a 0008 	add.w	r0, sl, #8
 800f71c:	f000 feba 	bl	8010494 <uxr_get_output_best_effort_stream>
 800f720:	4604      	mov	r4, r0
 800f722:	2800      	cmp	r0, #0
 800f724:	d0ee      	beq.n	800f704 <uxr_prepare_stream_to_write_submessage+0x58>
 800f726:	4649      	mov	r1, r9
 800f728:	4632      	mov	r2, r6
 800f72a:	f006 fc2b 	bl	8015f84 <uxr_prepare_best_effort_buffer_to_write>
 800f72e:	4604      	mov	r4, r0
 800f730:	e7e1      	b.n	800f6f6 <uxr_prepare_stream_to_write_submessage+0x4a>
 800f732:	bf00      	nop

0800f734 <uxr_init_session_info>:
 800f734:	0e13      	lsrs	r3, r2, #24
 800f736:	7043      	strb	r3, [r0, #1]
 800f738:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800f73c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f740:	7001      	strb	r1, [r0, #0]
 800f742:	70c3      	strb	r3, [r0, #3]
 800f744:	2109      	movs	r1, #9
 800f746:	23ff      	movs	r3, #255	@ 0xff
 800f748:	f880 c002 	strb.w	ip, [r0, #2]
 800f74c:	7102      	strb	r2, [r0, #4]
 800f74e:	80c1      	strh	r1, [r0, #6]
 800f750:	7143      	strb	r3, [r0, #5]
 800f752:	4770      	bx	lr

0800f754 <uxr_buffer_create_session>:
 800f754:	b530      	push	{r4, r5, lr}
 800f756:	b089      	sub	sp, #36	@ 0x24
 800f758:	2300      	movs	r3, #0
 800f75a:	4d12      	ldr	r5, [pc, #72]	@ (800f7a4 <uxr_buffer_create_session+0x50>)
 800f75c:	9307      	str	r3, [sp, #28]
 800f75e:	f8ad 201c 	strh.w	r2, [sp, #28]
 800f762:	2201      	movs	r2, #1
 800f764:	9301      	str	r3, [sp, #4]
 800f766:	80c2      	strh	r2, [r0, #6]
 800f768:	f88d 2004 	strb.w	r2, [sp, #4]
 800f76c:	682a      	ldr	r2, [r5, #0]
 800f76e:	9200      	str	r2, [sp, #0]
 800f770:	88aa      	ldrh	r2, [r5, #4]
 800f772:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f776:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800f77a:	9202      	str	r2, [sp, #8]
 800f77c:	460c      	mov	r4, r1
 800f77e:	7802      	ldrb	r2, [r0, #0]
 800f780:	9303      	str	r3, [sp, #12]
 800f782:	4619      	mov	r1, r3
 800f784:	f88d 200c 	strb.w	r2, [sp, #12]
 800f788:	4620      	mov	r0, r4
 800f78a:	2210      	movs	r2, #16
 800f78c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800f790:	9306      	str	r3, [sp, #24]
 800f792:	f000 febb 	bl	801050c <uxr_buffer_submessage_header>
 800f796:	4669      	mov	r1, sp
 800f798:	4620      	mov	r0, r4
 800f79a:	f001 fe13 	bl	80113c4 <uxr_serialize_CREATE_CLIENT_Payload>
 800f79e:	b009      	add	sp, #36	@ 0x24
 800f7a0:	bd30      	pop	{r4, r5, pc}
 800f7a2:	bf00      	nop
 800f7a4:	08018538 	.word	0x08018538

0800f7a8 <uxr_buffer_delete_session>:
 800f7a8:	b510      	push	{r4, lr}
 800f7aa:	4b0c      	ldr	r3, [pc, #48]	@ (800f7dc <uxr_buffer_delete_session+0x34>)
 800f7ac:	b082      	sub	sp, #8
 800f7ae:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800f7b2:	f8ad c006 	strh.w	ip, [sp, #6]
 800f7b6:	460c      	mov	r4, r1
 800f7b8:	2202      	movs	r2, #2
 800f7ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f7be:	80c2      	strh	r2, [r0, #6]
 800f7c0:	f8ad 3004 	strh.w	r3, [sp, #4]
 800f7c4:	2204      	movs	r2, #4
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	2103      	movs	r1, #3
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	f000 fe9e 	bl	801050c <uxr_buffer_submessage_header>
 800f7d0:	a901      	add	r1, sp, #4
 800f7d2:	4620      	mov	r0, r4
 800f7d4:	f001 fe9c 	bl	8011510 <uxr_serialize_DELETE_Payload>
 800f7d8:	b002      	add	sp, #8
 800f7da:	bd10      	pop	{r4, pc}
 800f7dc:	08018538 	.word	0x08018538

0800f7e0 <uxr_read_create_session_status>:
 800f7e0:	b510      	push	{r4, lr}
 800f7e2:	b088      	sub	sp, #32
 800f7e4:	4604      	mov	r4, r0
 800f7e6:	4608      	mov	r0, r1
 800f7e8:	a901      	add	r1, sp, #4
 800f7ea:	f001 fea1 	bl	8011530 <uxr_deserialize_STATUS_AGENT_Payload>
 800f7ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f7f2:	7163      	strb	r3, [r4, #5]
 800f7f4:	b008      	add	sp, #32
 800f7f6:	bd10      	pop	{r4, pc}

0800f7f8 <uxr_read_delete_session_status>:
 800f7f8:	b510      	push	{r4, lr}
 800f7fa:	4604      	mov	r4, r0
 800f7fc:	b084      	sub	sp, #16
 800f7fe:	4608      	mov	r0, r1
 800f800:	a902      	add	r1, sp, #8
 800f802:	f001 fec5 	bl	8011590 <uxr_deserialize_STATUS_Payload>
 800f806:	88e3      	ldrh	r3, [r4, #6]
 800f808:	2b02      	cmp	r3, #2
 800f80a:	d001      	beq.n	800f810 <uxr_read_delete_session_status+0x18>
 800f80c:	b004      	add	sp, #16
 800f80e:	bd10      	pop	{r4, pc}
 800f810:	f10d 000a 	add.w	r0, sp, #10
 800f814:	f7fe ff06 	bl	800e624 <uxr_object_id_from_raw>
 800f818:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800f81c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800f820:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f824:	b29b      	uxth	r3, r3
 800f826:	2b02      	cmp	r3, #2
 800f828:	bf04      	itt	eq
 800f82a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800f82e:	7163      	strbeq	r3, [r4, #5]
 800f830:	b004      	add	sp, #16
 800f832:	bd10      	pop	{r4, pc}

0800f834 <uxr_stamp_create_session_header>:
 800f834:	b510      	push	{r4, lr}
 800f836:	2208      	movs	r2, #8
 800f838:	b08a      	sub	sp, #40	@ 0x28
 800f83a:	4604      	mov	r4, r0
 800f83c:	eb0d 0002 	add.w	r0, sp, r2
 800f840:	f7fc f8a6 	bl	800b990 <ucdr_init_buffer>
 800f844:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f848:	9400      	str	r4, [sp, #0]
 800f84a:	2300      	movs	r3, #0
 800f84c:	461a      	mov	r2, r3
 800f84e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800f852:	a802      	add	r0, sp, #8
 800f854:	f001 f854 	bl	8010900 <uxr_serialize_message_header>
 800f858:	b00a      	add	sp, #40	@ 0x28
 800f85a:	bd10      	pop	{r4, pc}

0800f85c <uxr_stamp_session_header>:
 800f85c:	b530      	push	{r4, r5, lr}
 800f85e:	b08d      	sub	sp, #52	@ 0x34
 800f860:	4604      	mov	r4, r0
 800f862:	460d      	mov	r5, r1
 800f864:	9203      	str	r2, [sp, #12]
 800f866:	4619      	mov	r1, r3
 800f868:	a804      	add	r0, sp, #16
 800f86a:	2208      	movs	r2, #8
 800f86c:	f7fc f890 	bl	800b990 <ucdr_init_buffer>
 800f870:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f874:	9b03      	ldr	r3, [sp, #12]
 800f876:	9400      	str	r4, [sp, #0]
 800f878:	462a      	mov	r2, r5
 800f87a:	a804      	add	r0, sp, #16
 800f87c:	f001 f840 	bl	8010900 <uxr_serialize_message_header>
 800f880:	b00d      	add	sp, #52	@ 0x34
 800f882:	bd30      	pop	{r4, r5, pc}

0800f884 <uxr_read_session_header>:
 800f884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f888:	4607      	mov	r7, r0
 800f88a:	b084      	sub	sp, #16
 800f88c:	4608      	mov	r0, r1
 800f88e:	460c      	mov	r4, r1
 800f890:	4615      	mov	r5, r2
 800f892:	461e      	mov	r6, r3
 800f894:	f7fc f8ac 	bl	800b9f0 <ucdr_buffer_remaining>
 800f898:	2808      	cmp	r0, #8
 800f89a:	d803      	bhi.n	800f8a4 <uxr_read_session_header+0x20>
 800f89c:	2000      	movs	r0, #0
 800f89e:	b004      	add	sp, #16
 800f8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8a4:	f10d 080c 	add.w	r8, sp, #12
 800f8a8:	4633      	mov	r3, r6
 800f8aa:	462a      	mov	r2, r5
 800f8ac:	f8cd 8000 	str.w	r8, [sp]
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	f10d 010b 	add.w	r1, sp, #11
 800f8b6:	f001 f841 	bl	801093c <uxr_deserialize_message_header>
 800f8ba:	783a      	ldrb	r2, [r7, #0]
 800f8bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800f8c0:	4293      	cmp	r3, r2
 800f8c2:	d1eb      	bne.n	800f89c <uxr_read_session_header+0x18>
 800f8c4:	061b      	lsls	r3, r3, #24
 800f8c6:	d41c      	bmi.n	800f902 <uxr_read_session_header+0x7e>
 800f8c8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800f8cc:	787b      	ldrb	r3, [r7, #1]
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d003      	beq.n	800f8da <uxr_read_session_header+0x56>
 800f8d2:	2001      	movs	r0, #1
 800f8d4:	f080 0001 	eor.w	r0, r0, #1
 800f8d8:	e7e1      	b.n	800f89e <uxr_read_session_header+0x1a>
 800f8da:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800f8de:	78bb      	ldrb	r3, [r7, #2]
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	f107 0102 	add.w	r1, r7, #2
 800f8e6:	d1f4      	bne.n	800f8d2 <uxr_read_session_header+0x4e>
 800f8e8:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800f8ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	d1ee      	bne.n	800f8d2 <uxr_read_session_header+0x4e>
 800f8f4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800f8f8:	784b      	ldrb	r3, [r1, #1]
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d1e9      	bne.n	800f8d2 <uxr_read_session_header+0x4e>
 800f8fe:	2000      	movs	r0, #0
 800f900:	e7e8      	b.n	800f8d4 <uxr_read_session_header+0x50>
 800f902:	2001      	movs	r0, #1
 800f904:	e7cb      	b.n	800f89e <uxr_read_session_header+0x1a>
 800f906:	bf00      	nop

0800f908 <uxr_session_header_offset>:
 800f908:	f990 3000 	ldrsb.w	r3, [r0]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	bfac      	ite	ge
 800f910:	2008      	movge	r0, #8
 800f912:	2004      	movlt	r0, #4
 800f914:	4770      	bx	lr
 800f916:	bf00      	nop

0800f918 <uxr_init_base_object_request>:
 800f918:	b510      	push	{r4, lr}
 800f91a:	88c3      	ldrh	r3, [r0, #6]
 800f91c:	b082      	sub	sp, #8
 800f91e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800f922:	9101      	str	r1, [sp, #4]
 800f924:	f1a3 010a 	sub.w	r1, r3, #10
 800f928:	b289      	uxth	r1, r1
 800f92a:	42a1      	cmp	r1, r4
 800f92c:	d80e      	bhi.n	800f94c <uxr_init_base_object_request+0x34>
 800f92e:	3301      	adds	r3, #1
 800f930:	b29c      	uxth	r4, r3
 800f932:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f936:	b2db      	uxtb	r3, r3
 800f938:	80c4      	strh	r4, [r0, #6]
 800f93a:	9801      	ldr	r0, [sp, #4]
 800f93c:	7011      	strb	r1, [r2, #0]
 800f93e:	7053      	strb	r3, [r2, #1]
 800f940:	1c91      	adds	r1, r2, #2
 800f942:	f7fe fe83 	bl	800e64c <uxr_object_id_to_raw>
 800f946:	4620      	mov	r0, r4
 800f948:	b002      	add	sp, #8
 800f94a:	bd10      	pop	{r4, pc}
 800f94c:	230a      	movs	r3, #10
 800f94e:	2100      	movs	r1, #0
 800f950:	461c      	mov	r4, r3
 800f952:	e7f1      	b.n	800f938 <uxr_init_base_object_request+0x20>

0800f954 <uxr_parse_base_object_request>:
 800f954:	b570      	push	{r4, r5, r6, lr}
 800f956:	4604      	mov	r4, r0
 800f958:	3002      	adds	r0, #2
 800f95a:	460d      	mov	r5, r1
 800f95c:	4616      	mov	r6, r2
 800f95e:	f7fe fe61 	bl	800e624 <uxr_object_id_from_raw>
 800f962:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800f966:	8028      	strh	r0, [r5, #0]
 800f968:	806b      	strh	r3, [r5, #2]
 800f96a:	7822      	ldrb	r2, [r4, #0]
 800f96c:	7863      	ldrb	r3, [r4, #1]
 800f96e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f972:	8033      	strh	r3, [r6, #0]
 800f974:	bd70      	pop	{r4, r5, r6, pc}
 800f976:	bf00      	nop

0800f978 <uxr_init_framing_io>:
 800f978:	2300      	movs	r3, #0
 800f97a:	7041      	strb	r1, [r0, #1]
 800f97c:	7003      	strb	r3, [r0, #0]
 800f97e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800f980:	4770      	bx	lr
 800f982:	bf00      	nop

0800f984 <uxr_write_framed_msg>:
 800f984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f988:	4617      	mov	r7, r2
 800f98a:	7842      	ldrb	r2, [r0, #1]
 800f98c:	b083      	sub	sp, #12
 800f98e:	460e      	mov	r6, r1
 800f990:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800f994:	469a      	mov	sl, r3
 800f996:	2901      	cmp	r1, #1
 800f998:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800f99c:	4604      	mov	r4, r0
 800f99e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800f9a2:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800f9a6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800f9aa:	f240 8137 	bls.w	800fc1c <uxr_write_framed_msg+0x298>
 800f9ae:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800f9b2:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800f9b6:	2901      	cmp	r1, #1
 800f9b8:	f04f 0202 	mov.w	r2, #2
 800f9bc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f9c0:	f240 808f 	bls.w	800fae2 <uxr_write_framed_msg+0x15e>
 800f9c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f9c6:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800f9ca:	b2dd      	uxtb	r5, r3
 800f9cc:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800f9d0:	2203      	movs	r2, #3
 800f9d2:	2901      	cmp	r1, #1
 800f9d4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f9d8:	f240 809a 	bls.w	800fb10 <uxr_write_framed_msg+0x18c>
 800f9dc:	18a1      	adds	r1, r4, r2
 800f9de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f9e0:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800f9e4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f9e8:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800f9ec:	3201      	adds	r2, #1
 800f9ee:	2801      	cmp	r0, #1
 800f9f0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f9f4:	f240 80a0 	bls.w	800fb38 <uxr_write_framed_msg+0x1b4>
 800f9f8:	18a0      	adds	r0, r4, r2
 800f9fa:	3201      	adds	r2, #1
 800f9fc:	b2d2      	uxtb	r2, r2
 800f9fe:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800fa02:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	f000 80a9 	beq.w	800fb5e <uxr_write_framed_msg+0x1da>
 800fa0c:	f04f 0900 	mov.w	r9, #0
 800fa10:	46c8      	mov	r8, r9
 800fa12:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800fa16:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800fa1a:	2901      	cmp	r1, #1
 800fa1c:	f240 80c3 	bls.w	800fba6 <uxr_write_framed_msg+0x222>
 800fa20:	2a29      	cmp	r2, #41	@ 0x29
 800fa22:	f200 809f 	bhi.w	800fb64 <uxr_write_framed_msg+0x1e0>
 800fa26:	18a1      	adds	r1, r4, r2
 800fa28:	3201      	adds	r2, #1
 800fa2a:	b2d2      	uxtb	r2, r2
 800fa2c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800fa30:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fa34:	ea89 0303 	eor.w	r3, r9, r3
 800fa38:	498c      	ldr	r1, [pc, #560]	@ (800fc6c <uxr_write_framed_msg+0x2e8>)
 800fa3a:	b2db      	uxtb	r3, r3
 800fa3c:	f108 0801 	add.w	r8, r8, #1
 800fa40:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fa44:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800fa48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fa4a:	4543      	cmp	r3, r8
 800fa4c:	d8e1      	bhi.n	800fa12 <uxr_write_framed_msg+0x8e>
 800fa4e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800fa52:	fa5f f889 	uxtb.w	r8, r9
 800fa56:	9301      	str	r3, [sp, #4]
 800fa58:	f04f 0900 	mov.w	r9, #0
 800fa5c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 800fa60:	fa5f f18a 	uxtb.w	r1, sl
 800fa64:	2901      	cmp	r1, #1
 800fa66:	d921      	bls.n	800faac <uxr_write_framed_msg+0x128>
 800fa68:	2a29      	cmp	r2, #41	@ 0x29
 800fa6a:	f240 80af 	bls.w	800fbcc <uxr_write_framed_msg+0x248>
 800fa6e:	2500      	movs	r5, #0
 800fa70:	e000      	b.n	800fa74 <uxr_write_framed_msg+0xf0>
 800fa72:	b160      	cbz	r0, 800fa8e <uxr_write_framed_msg+0x10a>
 800fa74:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800fa78:	1b52      	subs	r2, r2, r5
 800fa7a:	465b      	mov	r3, fp
 800fa7c:	4421      	add	r1, r4
 800fa7e:	4638      	mov	r0, r7
 800fa80:	47b0      	blx	r6
 800fa82:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800fa86:	4405      	add	r5, r0
 800fa88:	4295      	cmp	r5, r2
 800fa8a:	d3f2      	bcc.n	800fa72 <uxr_write_framed_msg+0xee>
 800fa8c:	d003      	beq.n	800fa96 <uxr_write_framed_msg+0x112>
 800fa8e:	2000      	movs	r0, #0
 800fa90:	b003      	add	sp, #12
 800fa92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa96:	fa5f f18a 	uxtb.w	r1, sl
 800fa9a:	f04f 0300 	mov.w	r3, #0
 800fa9e:	2901      	cmp	r1, #1
 800faa0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800faa4:	f04f 0200 	mov.w	r2, #0
 800faa8:	f200 8090 	bhi.w	800fbcc <uxr_write_framed_msg+0x248>
 800faac:	1c51      	adds	r1, r2, #1
 800faae:	b2c9      	uxtb	r1, r1
 800fab0:	2929      	cmp	r1, #41	@ 0x29
 800fab2:	d8dc      	bhi.n	800fa6e <uxr_write_framed_msg+0xea>
 800fab4:	18a5      	adds	r5, r4, r2
 800fab6:	4421      	add	r1, r4
 800fab8:	3202      	adds	r2, #2
 800faba:	f088 0820 	eor.w	r8, r8, #32
 800fabe:	4648      	mov	r0, r9
 800fac0:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800fac4:	b2d2      	uxtb	r2, r2
 800fac6:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800faca:	f04f 0901 	mov.w	r9, #1
 800face:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800fad2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fad6:	2800      	cmp	r0, #0
 800fad8:	f040 8085 	bne.w	800fbe6 <uxr_write_framed_msg+0x262>
 800fadc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fae0:	e7bc      	b.n	800fa5c <uxr_write_framed_msg+0xd8>
 800fae2:	4611      	mov	r1, r2
 800fae4:	f04f 0c03 	mov.w	ip, #3
 800fae8:	2204      	movs	r2, #4
 800faea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800faec:	4421      	add	r1, r4
 800faee:	b2dd      	uxtb	r5, r3
 800faf0:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 800faf4:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 800faf8:	44a4      	add	ip, r4
 800fafa:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800fafe:	f080 0020 	eor.w	r0, r0, #32
 800fb02:	2901      	cmp	r1, #1
 800fb04:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 800fb08:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fb0c:	f63f af66 	bhi.w	800f9dc <uxr_write_framed_msg+0x58>
 800fb10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fb12:	18a0      	adds	r0, r4, r2
 800fb14:	f085 0520 	eor.w	r5, r5, #32
 800fb18:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800fb1c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800fb20:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800fb24:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 800fb28:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800fb2c:	3202      	adds	r2, #2
 800fb2e:	2801      	cmp	r0, #1
 800fb30:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fb34:	f63f af60 	bhi.w	800f9f8 <uxr_write_framed_msg+0x74>
 800fb38:	1c50      	adds	r0, r2, #1
 800fb3a:	18a5      	adds	r5, r4, r2
 800fb3c:	fa54 f080 	uxtab	r0, r4, r0
 800fb40:	3202      	adds	r2, #2
 800fb42:	f081 0120 	eor.w	r1, r1, #32
 800fb46:	b2d2      	uxtb	r2, r2
 800fb48:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800fb4c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 800fb50:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800fb54:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	f47f af57 	bne.w	800fa0c <uxr_write_framed_msg+0x88>
 800fb5e:	9301      	str	r3, [sp, #4]
 800fb60:	4698      	mov	r8, r3
 800fb62:	e779      	b.n	800fa58 <uxr_write_framed_msg+0xd4>
 800fb64:	2500      	movs	r5, #0
 800fb66:	e001      	b.n	800fb6c <uxr_write_framed_msg+0x1e8>
 800fb68:	2800      	cmp	r0, #0
 800fb6a:	d090      	beq.n	800fa8e <uxr_write_framed_msg+0x10a>
 800fb6c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800fb70:	1b52      	subs	r2, r2, r5
 800fb72:	465b      	mov	r3, fp
 800fb74:	4421      	add	r1, r4
 800fb76:	4638      	mov	r0, r7
 800fb78:	47b0      	blx	r6
 800fb7a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800fb7e:	4405      	add	r5, r0
 800fb80:	4295      	cmp	r5, r2
 800fb82:	d3f1      	bcc.n	800fb68 <uxr_write_framed_msg+0x1e4>
 800fb84:	d183      	bne.n	800fa8e <uxr_write_framed_msg+0x10a>
 800fb86:	f04f 0300 	mov.w	r3, #0
 800fb8a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800fb8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fb90:	4543      	cmp	r3, r8
 800fb92:	d964      	bls.n	800fc5e <uxr_write_framed_msg+0x2da>
 800fb94:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800fb98:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800fb9c:	2901      	cmp	r1, #1
 800fb9e:	f04f 0200 	mov.w	r2, #0
 800fba2:	f63f af3d 	bhi.w	800fa20 <uxr_write_framed_msg+0x9c>
 800fba6:	1c51      	adds	r1, r2, #1
 800fba8:	b2c9      	uxtb	r1, r1
 800fbaa:	2929      	cmp	r1, #41	@ 0x29
 800fbac:	d8da      	bhi.n	800fb64 <uxr_write_framed_msg+0x1e0>
 800fbae:	18a0      	adds	r0, r4, r2
 800fbb0:	4421      	add	r1, r4
 800fbb2:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 800fbb6:	3202      	adds	r2, #2
 800fbb8:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 800fbbc:	b2d2      	uxtb	r2, r2
 800fbbe:	f083 0020 	eor.w	r0, r3, #32
 800fbc2:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800fbc6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fbca:	e733      	b.n	800fa34 <uxr_write_framed_msg+0xb0>
 800fbcc:	18a1      	adds	r1, r4, r2
 800fbce:	3201      	adds	r2, #1
 800fbd0:	4648      	mov	r0, r9
 800fbd2:	b2d2      	uxtb	r2, r2
 800fbd4:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800fbd8:	f04f 0901 	mov.w	r9, #1
 800fbdc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fbe0:	2800      	cmp	r0, #0
 800fbe2:	f43f af7b 	beq.w	800fadc <uxr_write_framed_msg+0x158>
 800fbe6:	2500      	movs	r5, #0
 800fbe8:	e002      	b.n	800fbf0 <uxr_write_framed_msg+0x26c>
 800fbea:	2800      	cmp	r0, #0
 800fbec:	f43f af4f 	beq.w	800fa8e <uxr_write_framed_msg+0x10a>
 800fbf0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800fbf4:	1b52      	subs	r2, r2, r5
 800fbf6:	465b      	mov	r3, fp
 800fbf8:	4421      	add	r1, r4
 800fbfa:	4638      	mov	r0, r7
 800fbfc:	47b0      	blx	r6
 800fbfe:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800fc02:	4405      	add	r5, r0
 800fc04:	4295      	cmp	r5, r2
 800fc06:	d3f0      	bcc.n	800fbea <uxr_write_framed_msg+0x266>
 800fc08:	f47f af41 	bne.w	800fa8e <uxr_write_framed_msg+0x10a>
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800fc12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fc14:	b298      	uxth	r0, r3
 800fc16:	b003      	add	sp, #12
 800fc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc1c:	217d      	movs	r1, #125	@ 0x7d
 800fc1e:	f082 0220 	eor.w	r2, r2, #32
 800fc22:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 800fc26:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800fc2a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 800fc2e:	2901      	cmp	r1, #1
 800fc30:	f04f 0203 	mov.w	r2, #3
 800fc34:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fc38:	d804      	bhi.n	800fc44 <uxr_write_framed_msg+0x2c0>
 800fc3a:	4611      	mov	r1, r2
 800fc3c:	f04f 0c04 	mov.w	ip, #4
 800fc40:	2205      	movs	r2, #5
 800fc42:	e752      	b.n	800faea <uxr_write_framed_msg+0x166>
 800fc44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fc46:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 800fc4a:	b2dd      	uxtb	r5, r3
 800fc4c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800fc50:	2204      	movs	r2, #4
 800fc52:	2901      	cmp	r1, #1
 800fc54:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fc58:	f63f aec0 	bhi.w	800f9dc <uxr_write_framed_msg+0x58>
 800fc5c:	e758      	b.n	800fb10 <uxr_write_framed_msg+0x18c>
 800fc5e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800fc62:	fa5f f889 	uxtb.w	r8, r9
 800fc66:	9301      	str	r3, [sp, #4]
 800fc68:	2200      	movs	r2, #0
 800fc6a:	e6f5      	b.n	800fa58 <uxr_write_framed_msg+0xd4>
 800fc6c:	0801890c 	.word	0x0801890c

0800fc70 <uxr_framing_read_transport>:
 800fc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc74:	4604      	mov	r4, r0
 800fc76:	b083      	sub	sp, #12
 800fc78:	461f      	mov	r7, r3
 800fc7a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800fc7e:	4689      	mov	r9, r1
 800fc80:	4692      	mov	sl, r2
 800fc82:	f000 fc89 	bl	8010598 <uxr_millis>
 800fc86:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800fc8a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800fc8e:	42b3      	cmp	r3, r6
 800fc90:	4680      	mov	r8, r0
 800fc92:	d061      	beq.n	800fd58 <uxr_framing_read_transport+0xe8>
 800fc94:	d81c      	bhi.n	800fcd0 <uxr_framing_read_transport+0x60>
 800fc96:	1e75      	subs	r5, r6, #1
 800fc98:	1aed      	subs	r5, r5, r3
 800fc9a:	b2ed      	uxtb	r5, r5
 800fc9c:	2600      	movs	r6, #0
 800fc9e:	455d      	cmp	r5, fp
 800fca0:	d81f      	bhi.n	800fce2 <uxr_framing_read_transport+0x72>
 800fca2:	19ab      	adds	r3, r5, r6
 800fca4:	455b      	cmp	r3, fp
 800fca6:	bf84      	itt	hi
 800fca8:	ebab 0605 	subhi.w	r6, fp, r5
 800fcac:	b2f6      	uxtbhi	r6, r6
 800fcae:	b9ed      	cbnz	r5, 800fcec <uxr_framing_read_transport+0x7c>
 800fcb0:	f04f 0b00 	mov.w	fp, #0
 800fcb4:	f000 fc70 	bl	8010598 <uxr_millis>
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	eba0 0808 	sub.w	r8, r0, r8
 800fcbe:	eba3 0308 	sub.w	r3, r3, r8
 800fcc2:	4658      	mov	r0, fp
 800fcc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fcc8:	603b      	str	r3, [r7, #0]
 800fcca:	b003      	add	sp, #12
 800fccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcd0:	2e00      	cmp	r6, #0
 800fcd2:	d049      	beq.n	800fd68 <uxr_framing_read_transport+0xf8>
 800fcd4:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 800fcd8:	b2ed      	uxtb	r5, r5
 800fcda:	3e01      	subs	r6, #1
 800fcdc:	455d      	cmp	r5, fp
 800fcde:	b2f6      	uxtb	r6, r6
 800fce0:	d9df      	bls.n	800fca2 <uxr_framing_read_transport+0x32>
 800fce2:	fa5f f58b 	uxtb.w	r5, fp
 800fce6:	2600      	movs	r6, #0
 800fce8:	2d00      	cmp	r5, #0
 800fcea:	d0e1      	beq.n	800fcb0 <uxr_framing_read_transport+0x40>
 800fcec:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800fcf0:	3102      	adds	r1, #2
 800fcf2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fcf4:	9300      	str	r3, [sp, #0]
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	4421      	add	r1, r4
 800fcfa:	462a      	mov	r2, r5
 800fcfc:	4650      	mov	r0, sl
 800fcfe:	47c8      	blx	r9
 800fd00:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800fd04:	4a1a      	ldr	r2, [pc, #104]	@ (800fd70 <uxr_framing_read_transport+0x100>)
 800fd06:	4403      	add	r3, r0
 800fd08:	0859      	lsrs	r1, r3, #1
 800fd0a:	fba2 2101 	umull	r2, r1, r2, r1
 800fd0e:	0889      	lsrs	r1, r1, #2
 800fd10:	222a      	movs	r2, #42	@ 0x2a
 800fd12:	fb02 3111 	mls	r1, r2, r1, r3
 800fd16:	4683      	mov	fp, r0
 800fd18:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800fd1c:	2800      	cmp	r0, #0
 800fd1e:	d0c7      	beq.n	800fcb0 <uxr_framing_read_transport+0x40>
 800fd20:	42a8      	cmp	r0, r5
 800fd22:	d1c7      	bne.n	800fcb4 <uxr_framing_read_transport+0x44>
 800fd24:	2e00      	cmp	r6, #0
 800fd26:	d0c5      	beq.n	800fcb4 <uxr_framing_read_transport+0x44>
 800fd28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd2a:	9300      	str	r3, [sp, #0]
 800fd2c:	3102      	adds	r1, #2
 800fd2e:	4632      	mov	r2, r6
 800fd30:	4421      	add	r1, r4
 800fd32:	2300      	movs	r3, #0
 800fd34:	4650      	mov	r0, sl
 800fd36:	47c8      	blx	r9
 800fd38:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800fd3c:	4a0c      	ldr	r2, [pc, #48]	@ (800fd70 <uxr_framing_read_transport+0x100>)
 800fd3e:	180b      	adds	r3, r1, r0
 800fd40:	0859      	lsrs	r1, r3, #1
 800fd42:	fba2 1201 	umull	r1, r2, r2, r1
 800fd46:	0892      	lsrs	r2, r2, #2
 800fd48:	212a      	movs	r1, #42	@ 0x2a
 800fd4a:	fb01 3312 	mls	r3, r1, r2, r3
 800fd4e:	eb00 0b05 	add.w	fp, r0, r5
 800fd52:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800fd56:	e7ad      	b.n	800fcb4 <uxr_framing_read_transport+0x44>
 800fd58:	2600      	movs	r6, #0
 800fd5a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800fd5e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800fd60:	d9bf      	bls.n	800fce2 <uxr_framing_read_transport+0x72>
 800fd62:	2102      	movs	r1, #2
 800fd64:	2529      	movs	r5, #41	@ 0x29
 800fd66:	e7c4      	b.n	800fcf2 <uxr_framing_read_transport+0x82>
 800fd68:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 800fd6c:	b2ed      	uxtb	r5, r5
 800fd6e:	e796      	b.n	800fc9e <uxr_framing_read_transport+0x2e>
 800fd70:	30c30c31 	.word	0x30c30c31

0800fd74 <uxr_read_framed_msg>:
 800fd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd78:	461e      	mov	r6, r3
 800fd7a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800fd7e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800fd82:	429d      	cmp	r5, r3
 800fd84:	b083      	sub	sp, #12
 800fd86:	4604      	mov	r4, r0
 800fd88:	4688      	mov	r8, r1
 800fd8a:	4691      	mov	r9, r2
 800fd8c:	f000 8188 	beq.w	80100a0 <uxr_read_framed_msg+0x32c>
 800fd90:	7823      	ldrb	r3, [r4, #0]
 800fd92:	4dc1      	ldr	r5, [pc, #772]	@ (8010098 <uxr_read_framed_msg+0x324>)
 800fd94:	4fc1      	ldr	r7, [pc, #772]	@ (801009c <uxr_read_framed_msg+0x328>)
 800fd96:	2b07      	cmp	r3, #7
 800fd98:	d8fd      	bhi.n	800fd96 <uxr_read_framed_msg+0x22>
 800fd9a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800fd9e:	0115      	.short	0x0115
 800fda0:	00d600f6 	.word	0x00d600f6
 800fda4:	009000b9 	.word	0x009000b9
 800fda8:	0030004d 	.word	0x0030004d
 800fdac:	0008      	.short	0x0008
 800fdae:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800fdb2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800fdb6:	4299      	cmp	r1, r3
 800fdb8:	f000 814a 	beq.w	8010050 <uxr_read_framed_msg+0x2dc>
 800fdbc:	18e2      	adds	r2, r4, r3
 800fdbe:	7892      	ldrb	r2, [r2, #2]
 800fdc0:	2a7d      	cmp	r2, #125	@ 0x7d
 800fdc2:	f000 8199 	beq.w	80100f8 <uxr_read_framed_msg+0x384>
 800fdc6:	3301      	adds	r3, #1
 800fdc8:	0858      	lsrs	r0, r3, #1
 800fdca:	fba5 1000 	umull	r1, r0, r5, r0
 800fdce:	0880      	lsrs	r0, r0, #2
 800fdd0:	212a      	movs	r1, #42	@ 0x2a
 800fdd2:	fb01 3310 	mls	r3, r1, r0, r3
 800fdd6:	2a7e      	cmp	r2, #126	@ 0x7e
 800fdd8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fddc:	f000 8252 	beq.w	8010284 <uxr_read_framed_msg+0x510>
 800fde0:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800fde2:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 800fde4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800fde8:	b29b      	uxth	r3, r3
 800fdea:	2200      	movs	r2, #0
 800fdec:	4299      	cmp	r1, r3
 800fdee:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800fdf0:	7022      	strb	r2, [r4, #0]
 800fdf2:	f000 8179 	beq.w	80100e8 <uxr_read_framed_msg+0x374>
 800fdf6:	2000      	movs	r0, #0
 800fdf8:	b003      	add	sp, #12
 800fdfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdfe:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800fe02:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800fe06:	4299      	cmp	r1, r3
 800fe08:	f000 8131 	beq.w	801006e <uxr_read_framed_msg+0x2fa>
 800fe0c:	18e2      	adds	r2, r4, r3
 800fe0e:	7890      	ldrb	r0, [r2, #2]
 800fe10:	287d      	cmp	r0, #125	@ 0x7d
 800fe12:	f000 8190 	beq.w	8010136 <uxr_read_framed_msg+0x3c2>
 800fe16:	3301      	adds	r3, #1
 800fe18:	085a      	lsrs	r2, r3, #1
 800fe1a:	fba5 1202 	umull	r1, r2, r5, r2
 800fe1e:	0892      	lsrs	r2, r2, #2
 800fe20:	212a      	movs	r1, #42	@ 0x2a
 800fe22:	fb01 3312 	mls	r3, r1, r2, r3
 800fe26:	287e      	cmp	r0, #126	@ 0x7e
 800fe28:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fe2c:	f000 821a 	beq.w	8010264 <uxr_read_framed_msg+0x4f0>
 800fe30:	2307      	movs	r3, #7
 800fe32:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800fe34:	7023      	strb	r3, [r4, #0]
 800fe36:	e7ae      	b.n	800fd96 <uxr_read_framed_msg+0x22>
 800fe38:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800fe3a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800fe3e:	459e      	cmp	lr, r3
 800fe40:	d938      	bls.n	800feb4 <uxr_read_framed_msg+0x140>
 800fe42:	ee07 8a90 	vmov	s15, r8
 800fe46:	212a      	movs	r1, #42	@ 0x2a
 800fe48:	e020      	b.n	800fe8c <uxr_read_framed_msg+0x118>
 800fe4a:	f89b c002 	ldrb.w	ip, [fp, #2]
 800fe4e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800fe52:	f000 80d4 	beq.w	800fffe <uxr_read_framed_msg+0x28a>
 800fe56:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800fe5a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800fe5e:	f000 8219 	beq.w	8010294 <uxr_read_framed_msg+0x520>
 800fe62:	f806 c003 	strb.w	ip, [r6, r3]
 800fe66:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 800fe6a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800fe6c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800fe70:	ea8a 000c 	eor.w	r0, sl, ip
 800fe74:	b2c0      	uxtb	r0, r0
 800fe76:	3301      	adds	r3, #1
 800fe78:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 800fe7c:	b29b      	uxth	r3, r3
 800fe7e:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 800fe82:	4573      	cmp	r3, lr
 800fe84:	8663      	strh	r3, [r4, #50]	@ 0x32
 800fe86:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800fe88:	f080 8120 	bcs.w	80100cc <uxr_read_framed_msg+0x358>
 800fe8c:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800fe90:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800fe94:	f100 0c01 	add.w	ip, r0, #1
 800fe98:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800fe9c:	fba5 8202 	umull	r8, r2, r5, r2
 800fea0:	0892      	lsrs	r2, r2, #2
 800fea2:	4582      	cmp	sl, r0
 800fea4:	eb04 0b00 	add.w	fp, r4, r0
 800fea8:	fb01 c212 	mls	r2, r1, r2, ip
 800feac:	d1cd      	bne.n	800fe4a <uxr_read_framed_msg+0xd6>
 800feae:	ee17 8a90 	vmov	r8, s15
 800feb2:	459e      	cmp	lr, r3
 800feb4:	f040 8111 	bne.w	80100da <uxr_read_framed_msg+0x366>
 800feb8:	2306      	movs	r3, #6
 800feba:	7023      	strb	r3, [r4, #0]
 800febc:	e76b      	b.n	800fd96 <uxr_read_framed_msg+0x22>
 800febe:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800fec2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800fec6:	4298      	cmp	r0, r3
 800fec8:	f000 80c2 	beq.w	8010050 <uxr_read_framed_msg+0x2dc>
 800fecc:	18e2      	adds	r2, r4, r3
 800fece:	7891      	ldrb	r1, [r2, #2]
 800fed0:	297d      	cmp	r1, #125	@ 0x7d
 800fed2:	f000 814c 	beq.w	801016e <uxr_read_framed_msg+0x3fa>
 800fed6:	3301      	adds	r3, #1
 800fed8:	085a      	lsrs	r2, r3, #1
 800feda:	fba5 0202 	umull	r0, r2, r5, r2
 800fede:	0892      	lsrs	r2, r2, #2
 800fee0:	202a      	movs	r0, #42	@ 0x2a
 800fee2:	fb00 3312 	mls	r3, r0, r2, r3
 800fee6:	297e      	cmp	r1, #126	@ 0x7e
 800fee8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800feec:	f000 81ca 	beq.w	8010284 <uxr_read_framed_msg+0x510>
 800fef0:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800fef2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800fef6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fef8:	b29b      	uxth	r3, r3
 800fefa:	2000      	movs	r0, #0
 800fefc:	428b      	cmp	r3, r1
 800fefe:	8623      	strh	r3, [r4, #48]	@ 0x30
 800ff00:	8660      	strh	r0, [r4, #50]	@ 0x32
 800ff02:	86e0      	strh	r0, [r4, #54]	@ 0x36
 800ff04:	f240 80df 	bls.w	80100c6 <uxr_read_framed_msg+0x352>
 800ff08:	7020      	strb	r0, [r4, #0]
 800ff0a:	b003      	add	sp, #12
 800ff0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff10:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ff14:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800ff18:	4299      	cmp	r1, r3
 800ff1a:	f000 80a8 	beq.w	801006e <uxr_read_framed_msg+0x2fa>
 800ff1e:	18e2      	adds	r2, r4, r3
 800ff20:	7890      	ldrb	r0, [r2, #2]
 800ff22:	287d      	cmp	r0, #125	@ 0x7d
 800ff24:	f000 8164 	beq.w	80101f0 <uxr_read_framed_msg+0x47c>
 800ff28:	3301      	adds	r3, #1
 800ff2a:	085a      	lsrs	r2, r3, #1
 800ff2c:	fba5 1202 	umull	r1, r2, r5, r2
 800ff30:	0892      	lsrs	r2, r2, #2
 800ff32:	212a      	movs	r1, #42	@ 0x2a
 800ff34:	fb01 3312 	mls	r3, r1, r2, r3
 800ff38:	287e      	cmp	r0, #126	@ 0x7e
 800ff3a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ff3e:	f000 8191 	beq.w	8010264 <uxr_read_framed_msg+0x4f0>
 800ff42:	2304      	movs	r3, #4
 800ff44:	8620      	strh	r0, [r4, #48]	@ 0x30
 800ff46:	7023      	strb	r3, [r4, #0]
 800ff48:	e725      	b.n	800fd96 <uxr_read_framed_msg+0x22>
 800ff4a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800ff4e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800ff52:	4290      	cmp	r0, r2
 800ff54:	f000 80b3 	beq.w	80100be <uxr_read_framed_msg+0x34a>
 800ff58:	18a3      	adds	r3, r4, r2
 800ff5a:	7899      	ldrb	r1, [r3, #2]
 800ff5c:	297d      	cmp	r1, #125	@ 0x7d
 800ff5e:	f000 8164 	beq.w	801022a <uxr_read_framed_msg+0x4b6>
 800ff62:	3201      	adds	r2, #1
 800ff64:	0850      	lsrs	r0, r2, #1
 800ff66:	fba5 3000 	umull	r3, r0, r5, r0
 800ff6a:	0880      	lsrs	r0, r0, #2
 800ff6c:	232a      	movs	r3, #42	@ 0x2a
 800ff6e:	fb03 2210 	mls	r2, r3, r0, r2
 800ff72:	297e      	cmp	r1, #126	@ 0x7e
 800ff74:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800ff78:	f000 8188 	beq.w	801028c <uxr_read_framed_msg+0x518>
 800ff7c:	7863      	ldrb	r3, [r4, #1]
 800ff7e:	428b      	cmp	r3, r1
 800ff80:	bf0c      	ite	eq
 800ff82:	2303      	moveq	r3, #3
 800ff84:	2300      	movne	r3, #0
 800ff86:	7023      	strb	r3, [r4, #0]
 800ff88:	e705      	b.n	800fd96 <uxr_read_framed_msg+0x22>
 800ff8a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ff8e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800ff92:	2200      	movs	r2, #0
 800ff94:	4299      	cmp	r1, r3
 800ff96:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 800ff9a:	d06c      	beq.n	8010076 <uxr_read_framed_msg+0x302>
 800ff9c:	18e2      	adds	r2, r4, r3
 800ff9e:	7890      	ldrb	r0, [r2, #2]
 800ffa0:	287d      	cmp	r0, #125	@ 0x7d
 800ffa2:	f000 8101 	beq.w	80101a8 <uxr_read_framed_msg+0x434>
 800ffa6:	3301      	adds	r3, #1
 800ffa8:	085a      	lsrs	r2, r3, #1
 800ffaa:	fba5 1202 	umull	r1, r2, r5, r2
 800ffae:	0892      	lsrs	r2, r2, #2
 800ffb0:	212a      	movs	r1, #42	@ 0x2a
 800ffb2:	fb01 3312 	mls	r3, r1, r2, r3
 800ffb6:	287e      	cmp	r0, #126	@ 0x7e
 800ffb8:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800ffbc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ffc0:	d059      	beq.n	8010076 <uxr_read_framed_msg+0x302>
 800ffc2:	2302      	movs	r3, #2
 800ffc4:	7023      	strb	r3, [r4, #0]
 800ffc6:	e6e6      	b.n	800fd96 <uxr_read_framed_msg+0x22>
 800ffc8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800ffcc:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800ffd0:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 800ffd4:	1c51      	adds	r1, r2, #1
 800ffd6:	084b      	lsrs	r3, r1, #1
 800ffd8:	fba5 c303 	umull	ip, r3, r5, r3
 800ffdc:	089b      	lsrs	r3, r3, #2
 800ffde:	fb0e 1313 	mls	r3, lr, r3, r1
 800ffe2:	4592      	cmp	sl, r2
 800ffe4:	eb04 0002 	add.w	r0, r4, r2
 800ffe8:	b2da      	uxtb	r2, r3
 800ffea:	f43f af04 	beq.w	800fdf6 <uxr_read_framed_msg+0x82>
 800ffee:	7883      	ldrb	r3, [r0, #2]
 800fff0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800fff4:	2b7e      	cmp	r3, #126	@ 0x7e
 800fff6:	d1ed      	bne.n	800ffd4 <uxr_read_framed_msg+0x260>
 800fff8:	2301      	movs	r3, #1
 800fffa:	7023      	strb	r3, [r4, #0]
 800fffc:	e6cb      	b.n	800fd96 <uxr_read_framed_msg+0x22>
 800fffe:	f100 0c01 	add.w	ip, r0, #1
 8010002:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010006:	fba5 8202 	umull	r8, r2, r5, r2
 801000a:	0892      	lsrs	r2, r2, #2
 801000c:	fb01 c212 	mls	r2, r1, r2, ip
 8010010:	eb04 0c02 	add.w	ip, r4, r2
 8010014:	b2d2      	uxtb	r2, r2
 8010016:	4592      	cmp	sl, r2
 8010018:	f100 0002 	add.w	r0, r0, #2
 801001c:	f43f af47 	beq.w	800feae <uxr_read_framed_msg+0x13a>
 8010020:	0842      	lsrs	r2, r0, #1
 8010022:	f89c a002 	ldrb.w	sl, [ip, #2]
 8010026:	fba5 8202 	umull	r8, r2, r5, r2
 801002a:	0892      	lsrs	r2, r2, #2
 801002c:	fb01 0012 	mls	r0, r1, r2, r0
 8010030:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8010034:	f08a 0c20 	eor.w	ip, sl, #32
 8010038:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 801003c:	f47f af11 	bne.w	800fe62 <uxr_read_framed_msg+0xee>
 8010040:	459e      	cmp	lr, r3
 8010042:	ee17 8a90 	vmov	r8, s15
 8010046:	f43f af37 	beq.w	800feb8 <uxr_read_framed_msg+0x144>
 801004a:	2301      	movs	r3, #1
 801004c:	7023      	strb	r3, [r4, #0]
 801004e:	e6a2      	b.n	800fd96 <uxr_read_framed_msg+0x22>
 8010050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010052:	9300      	str	r3, [sp, #0]
 8010054:	2301      	movs	r3, #1
 8010056:	9301      	str	r3, [sp, #4]
 8010058:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801005a:	464a      	mov	r2, r9
 801005c:	4641      	mov	r1, r8
 801005e:	4620      	mov	r0, r4
 8010060:	f7ff fe06 	bl	800fc70 <uxr_framing_read_transport>
 8010064:	2800      	cmp	r0, #0
 8010066:	f43f aec6 	beq.w	800fdf6 <uxr_read_framed_msg+0x82>
 801006a:	7823      	ldrb	r3, [r4, #0]
 801006c:	e693      	b.n	800fd96 <uxr_read_framed_msg+0x22>
 801006e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010070:	9300      	str	r3, [sp, #0]
 8010072:	2302      	movs	r3, #2
 8010074:	e7ef      	b.n	8010056 <uxr_read_framed_msg+0x2e2>
 8010076:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010078:	9300      	str	r3, [sp, #0]
 801007a:	2304      	movs	r3, #4
 801007c:	9301      	str	r3, [sp, #4]
 801007e:	464a      	mov	r2, r9
 8010080:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010082:	4641      	mov	r1, r8
 8010084:	4620      	mov	r0, r4
 8010086:	f7ff fdf3 	bl	800fc70 <uxr_framing_read_transport>
 801008a:	2800      	cmp	r0, #0
 801008c:	d1ed      	bne.n	801006a <uxr_read_framed_msg+0x2f6>
 801008e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8010092:	2b7e      	cmp	r3, #126	@ 0x7e
 8010094:	d0e9      	beq.n	801006a <uxr_read_framed_msg+0x2f6>
 8010096:	e6ae      	b.n	800fdf6 <uxr_read_framed_msg+0x82>
 8010098:	30c30c31 	.word	0x30c30c31
 801009c:	0801890c 	.word	0x0801890c
 80100a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100a2:	9300      	str	r3, [sp, #0]
 80100a4:	2305      	movs	r3, #5
 80100a6:	9301      	str	r3, [sp, #4]
 80100a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80100aa:	f7ff fde1 	bl	800fc70 <uxr_framing_read_transport>
 80100ae:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80100b2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80100b6:	429a      	cmp	r2, r3
 80100b8:	f43f ae9d 	beq.w	800fdf6 <uxr_read_framed_msg+0x82>
 80100bc:	e668      	b.n	800fd90 <uxr_read_framed_msg+0x1c>
 80100be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100c0:	9300      	str	r3, [sp, #0]
 80100c2:	2303      	movs	r3, #3
 80100c4:	e7c7      	b.n	8010056 <uxr_read_framed_msg+0x2e2>
 80100c6:	2305      	movs	r3, #5
 80100c8:	7023      	strb	r3, [r4, #0]
 80100ca:	e664      	b.n	800fd96 <uxr_read_framed_msg+0x22>
 80100cc:	ee17 8a90 	vmov	r8, s15
 80100d0:	f43f aef2 	beq.w	800feb8 <uxr_read_framed_msg+0x144>
 80100d4:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80100d8:	d08e      	beq.n	800fff8 <uxr_read_framed_msg+0x284>
 80100da:	ebae 0303 	sub.w	r3, lr, r3
 80100de:	3302      	adds	r3, #2
 80100e0:	9301      	str	r3, [sp, #4]
 80100e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100e4:	9300      	str	r3, [sp, #0]
 80100e6:	e7b7      	b.n	8010058 <uxr_read_framed_msg+0x2e4>
 80100e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80100ea:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80100ee:	7013      	strb	r3, [r2, #0]
 80100f0:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80100f2:	b003      	add	sp, #12
 80100f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100f8:	f103 0c01 	add.w	ip, r3, #1
 80100fc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010100:	fba5 0202 	umull	r0, r2, r5, r2
 8010104:	0892      	lsrs	r2, r2, #2
 8010106:	202a      	movs	r0, #42	@ 0x2a
 8010108:	fb00 c212 	mls	r2, r0, r2, ip
 801010c:	fa5f fc82 	uxtb.w	ip, r2
 8010110:	4561      	cmp	r1, ip
 8010112:	d09d      	beq.n	8010050 <uxr_read_framed_msg+0x2dc>
 8010114:	3302      	adds	r3, #2
 8010116:	4422      	add	r2, r4
 8010118:	0859      	lsrs	r1, r3, #1
 801011a:	7892      	ldrb	r2, [r2, #2]
 801011c:	fba5 c101 	umull	ip, r1, r5, r1
 8010120:	0889      	lsrs	r1, r1, #2
 8010122:	fb00 3311 	mls	r3, r0, r1, r3
 8010126:	2a7e      	cmp	r2, #126	@ 0x7e
 8010128:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801012c:	f000 80aa 	beq.w	8010284 <uxr_read_framed_msg+0x510>
 8010130:	f082 0220 	eor.w	r2, r2, #32
 8010134:	e654      	b.n	800fde0 <uxr_read_framed_msg+0x6c>
 8010136:	1c58      	adds	r0, r3, #1
 8010138:	0842      	lsrs	r2, r0, #1
 801013a:	fba5 c202 	umull	ip, r2, r5, r2
 801013e:	0892      	lsrs	r2, r2, #2
 8010140:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010144:	fb0c 0212 	mls	r2, ip, r2, r0
 8010148:	b2d0      	uxtb	r0, r2
 801014a:	4281      	cmp	r1, r0
 801014c:	d08f      	beq.n	801006e <uxr_read_framed_msg+0x2fa>
 801014e:	4422      	add	r2, r4
 8010150:	3302      	adds	r3, #2
 8010152:	7890      	ldrb	r0, [r2, #2]
 8010154:	085a      	lsrs	r2, r3, #1
 8010156:	fba5 1202 	umull	r1, r2, r5, r2
 801015a:	0892      	lsrs	r2, r2, #2
 801015c:	fb0c 3312 	mls	r3, ip, r2, r3
 8010160:	287e      	cmp	r0, #126	@ 0x7e
 8010162:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010166:	d07d      	beq.n	8010264 <uxr_read_framed_msg+0x4f0>
 8010168:	f080 0020 	eor.w	r0, r0, #32
 801016c:	e660      	b.n	800fe30 <uxr_read_framed_msg+0xbc>
 801016e:	1c59      	adds	r1, r3, #1
 8010170:	084a      	lsrs	r2, r1, #1
 8010172:	fba5 c202 	umull	ip, r2, r5, r2
 8010176:	0892      	lsrs	r2, r2, #2
 8010178:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801017c:	fb0c 1212 	mls	r2, ip, r2, r1
 8010180:	b2d1      	uxtb	r1, r2
 8010182:	4288      	cmp	r0, r1
 8010184:	f43f af64 	beq.w	8010050 <uxr_read_framed_msg+0x2dc>
 8010188:	4422      	add	r2, r4
 801018a:	3302      	adds	r3, #2
 801018c:	7891      	ldrb	r1, [r2, #2]
 801018e:	085a      	lsrs	r2, r3, #1
 8010190:	fba5 0202 	umull	r0, r2, r5, r2
 8010194:	0892      	lsrs	r2, r2, #2
 8010196:	fb0c 3312 	mls	r3, ip, r2, r3
 801019a:	297e      	cmp	r1, #126	@ 0x7e
 801019c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80101a0:	d070      	beq.n	8010284 <uxr_read_framed_msg+0x510>
 80101a2:	f081 0120 	eor.w	r1, r1, #32
 80101a6:	e6a3      	b.n	800fef0 <uxr_read_framed_msg+0x17c>
 80101a8:	f103 0c01 	add.w	ip, r3, #1
 80101ac:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80101b0:	fba5 0202 	umull	r0, r2, r5, r2
 80101b4:	0892      	lsrs	r2, r2, #2
 80101b6:	202a      	movs	r0, #42	@ 0x2a
 80101b8:	fb00 c212 	mls	r2, r0, r2, ip
 80101bc:	fa5f fc82 	uxtb.w	ip, r2
 80101c0:	4561      	cmp	r1, ip
 80101c2:	f43f af58 	beq.w	8010076 <uxr_read_framed_msg+0x302>
 80101c6:	4422      	add	r2, r4
 80101c8:	3302      	adds	r3, #2
 80101ca:	7891      	ldrb	r1, [r2, #2]
 80101cc:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80101d0:	085a      	lsrs	r2, r3, #1
 80101d2:	fba5 c202 	umull	ip, r2, r5, r2
 80101d6:	0892      	lsrs	r2, r2, #2
 80101d8:	fb00 3312 	mls	r3, r0, r2, r3
 80101dc:	297e      	cmp	r1, #126	@ 0x7e
 80101de:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80101e2:	f43f af48 	beq.w	8010076 <uxr_read_framed_msg+0x302>
 80101e6:	f081 0120 	eor.w	r1, r1, #32
 80101ea:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80101ee:	e6e8      	b.n	800ffc2 <uxr_read_framed_msg+0x24e>
 80101f0:	1c58      	adds	r0, r3, #1
 80101f2:	0842      	lsrs	r2, r0, #1
 80101f4:	fba5 c202 	umull	ip, r2, r5, r2
 80101f8:	0892      	lsrs	r2, r2, #2
 80101fa:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80101fe:	fb0c 0212 	mls	r2, ip, r2, r0
 8010202:	b2d0      	uxtb	r0, r2
 8010204:	4281      	cmp	r1, r0
 8010206:	f43f af32 	beq.w	801006e <uxr_read_framed_msg+0x2fa>
 801020a:	4422      	add	r2, r4
 801020c:	3302      	adds	r3, #2
 801020e:	7890      	ldrb	r0, [r2, #2]
 8010210:	085a      	lsrs	r2, r3, #1
 8010212:	fba5 1202 	umull	r1, r2, r5, r2
 8010216:	0892      	lsrs	r2, r2, #2
 8010218:	fb0c 3312 	mls	r3, ip, r2, r3
 801021c:	287e      	cmp	r0, #126	@ 0x7e
 801021e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010222:	d01f      	beq.n	8010264 <uxr_read_framed_msg+0x4f0>
 8010224:	f080 0020 	eor.w	r0, r0, #32
 8010228:	e68b      	b.n	800ff42 <uxr_read_framed_msg+0x1ce>
 801022a:	1c51      	adds	r1, r2, #1
 801022c:	084b      	lsrs	r3, r1, #1
 801022e:	fba5 c303 	umull	ip, r3, r5, r3
 8010232:	089b      	lsrs	r3, r3, #2
 8010234:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010238:	fb0c 1313 	mls	r3, ip, r3, r1
 801023c:	b2d9      	uxtb	r1, r3
 801023e:	4288      	cmp	r0, r1
 8010240:	f43f af3d 	beq.w	80100be <uxr_read_framed_msg+0x34a>
 8010244:	3202      	adds	r2, #2
 8010246:	4423      	add	r3, r4
 8010248:	0850      	lsrs	r0, r2, #1
 801024a:	789b      	ldrb	r3, [r3, #2]
 801024c:	fba5 1000 	umull	r1, r0, r5, r0
 8010250:	0880      	lsrs	r0, r0, #2
 8010252:	fb0c 2210 	mls	r2, ip, r0, r2
 8010256:	2b7e      	cmp	r3, #126	@ 0x7e
 8010258:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801025c:	d016      	beq.n	801028c <uxr_read_framed_msg+0x518>
 801025e:	f083 0120 	eor.w	r1, r3, #32
 8010262:	e68b      	b.n	800ff7c <uxr_read_framed_msg+0x208>
 8010264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010266:	9300      	str	r3, [sp, #0]
 8010268:	2302      	movs	r3, #2
 801026a:	9301      	str	r3, [sp, #4]
 801026c:	464a      	mov	r2, r9
 801026e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010270:	4641      	mov	r1, r8
 8010272:	4620      	mov	r0, r4
 8010274:	f7ff fcfc 	bl	800fc70 <uxr_framing_read_transport>
 8010278:	2800      	cmp	r0, #0
 801027a:	f47f aef6 	bne.w	801006a <uxr_read_framed_msg+0x2f6>
 801027e:	2301      	movs	r3, #1
 8010280:	7023      	strb	r3, [r4, #0]
 8010282:	e588      	b.n	800fd96 <uxr_read_framed_msg+0x22>
 8010284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010286:	9300      	str	r3, [sp, #0]
 8010288:	2301      	movs	r3, #1
 801028a:	e7ee      	b.n	801026a <uxr_read_framed_msg+0x4f6>
 801028c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801028e:	9300      	str	r3, [sp, #0]
 8010290:	2303      	movs	r3, #3
 8010292:	e7ea      	b.n	801026a <uxr_read_framed_msg+0x4f6>
 8010294:	ee17 8a90 	vmov	r8, s15
 8010298:	e6ae      	b.n	800fff8 <uxr_read_framed_msg+0x284>
 801029a:	bf00      	nop

0801029c <uxr_stream_id>:
 801029c:	2901      	cmp	r1, #1
 801029e:	b082      	sub	sp, #8
 80102a0:	d01d      	beq.n	80102de <uxr_stream_id+0x42>
 80102a2:	2902      	cmp	r1, #2
 80102a4:	f04f 0c00 	mov.w	ip, #0
 80102a8:	d01e      	beq.n	80102e8 <uxr_stream_id+0x4c>
 80102aa:	2300      	movs	r3, #0
 80102ac:	f36c 0307 	bfi	r3, ip, #0, #8
 80102b0:	f360 230f 	bfi	r3, r0, #8, #8
 80102b4:	f361 4317 	bfi	r3, r1, #16, #8
 80102b8:	f362 631f 	bfi	r3, r2, #24, #8
 80102bc:	b2da      	uxtb	r2, r3
 80102be:	2000      	movs	r0, #0
 80102c0:	f362 0007 	bfi	r0, r2, #0, #8
 80102c4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80102c8:	f362 200f 	bfi	r0, r2, #8, #8
 80102cc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80102d0:	f362 4017 	bfi	r0, r2, #16, #8
 80102d4:	0e1b      	lsrs	r3, r3, #24
 80102d6:	f363 601f 	bfi	r0, r3, #24, #8
 80102da:	b002      	add	sp, #8
 80102dc:	4770      	bx	lr
 80102de:	f100 0c01 	add.w	ip, r0, #1
 80102e2:	fa5f fc8c 	uxtb.w	ip, ip
 80102e6:	e7e0      	b.n	80102aa <uxr_stream_id+0xe>
 80102e8:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 80102ec:	e7dd      	b.n	80102aa <uxr_stream_id+0xe>
 80102ee:	bf00      	nop

080102f0 <uxr_stream_id_from_raw>:
 80102f0:	b082      	sub	sp, #8
 80102f2:	b130      	cbz	r0, 8010302 <uxr_stream_id_from_raw+0x12>
 80102f4:	0603      	lsls	r3, r0, #24
 80102f6:	d420      	bmi.n	801033a <uxr_stream_id_from_raw+0x4a>
 80102f8:	1e42      	subs	r2, r0, #1
 80102fa:	b2d2      	uxtb	r2, r2
 80102fc:	f04f 0c01 	mov.w	ip, #1
 8010300:	e001      	b.n	8010306 <uxr_stream_id_from_raw+0x16>
 8010302:	4684      	mov	ip, r0
 8010304:	4602      	mov	r2, r0
 8010306:	2300      	movs	r3, #0
 8010308:	f360 0307 	bfi	r3, r0, #0, #8
 801030c:	f362 230f 	bfi	r3, r2, #8, #8
 8010310:	f36c 4317 	bfi	r3, ip, #16, #8
 8010314:	f361 631f 	bfi	r3, r1, #24, #8
 8010318:	b2da      	uxtb	r2, r3
 801031a:	2000      	movs	r0, #0
 801031c:	f362 0007 	bfi	r0, r2, #0, #8
 8010320:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010324:	f362 200f 	bfi	r0, r2, #8, #8
 8010328:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801032c:	f362 4017 	bfi	r0, r2, #16, #8
 8010330:	0e1b      	lsrs	r3, r3, #24
 8010332:	f363 601f 	bfi	r0, r3, #24, #8
 8010336:	b002      	add	sp, #8
 8010338:	4770      	bx	lr
 801033a:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801033e:	f04f 0c02 	mov.w	ip, #2
 8010342:	e7e0      	b.n	8010306 <uxr_stream_id_from_raw+0x16>

08010344 <uxr_init_stream_storage>:
 8010344:	2300      	movs	r3, #0
 8010346:	7403      	strb	r3, [r0, #16]
 8010348:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 801034c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8010350:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8010354:	4770      	bx	lr
 8010356:	bf00      	nop

08010358 <uxr_reset_stream_storage>:
 8010358:	b570      	push	{r4, r5, r6, lr}
 801035a:	7c03      	ldrb	r3, [r0, #16]
 801035c:	4604      	mov	r4, r0
 801035e:	b153      	cbz	r3, 8010376 <uxr_reset_stream_storage+0x1e>
 8010360:	4606      	mov	r6, r0
 8010362:	2500      	movs	r5, #0
 8010364:	4630      	mov	r0, r6
 8010366:	f005 fe07 	bl	8015f78 <uxr_reset_output_best_effort_stream>
 801036a:	7c23      	ldrb	r3, [r4, #16]
 801036c:	3501      	adds	r5, #1
 801036e:	42ab      	cmp	r3, r5
 8010370:	f106 0610 	add.w	r6, r6, #16
 8010374:	d8f6      	bhi.n	8010364 <uxr_reset_stream_storage+0xc>
 8010376:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801037a:	b163      	cbz	r3, 8010396 <uxr_reset_stream_storage+0x3e>
 801037c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010380:	2500      	movs	r5, #0
 8010382:	4630      	mov	r0, r6
 8010384:	f005 fbfa 	bl	8015b7c <uxr_reset_input_best_effort_stream>
 8010388:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801038c:	3501      	adds	r5, #1
 801038e:	42ab      	cmp	r3, r5
 8010390:	f106 0602 	add.w	r6, r6, #2
 8010394:	d8f5      	bhi.n	8010382 <uxr_reset_stream_storage+0x2a>
 8010396:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801039a:	b163      	cbz	r3, 80103b6 <uxr_reset_stream_storage+0x5e>
 801039c:	f104 0618 	add.w	r6, r4, #24
 80103a0:	2500      	movs	r5, #0
 80103a2:	4630      	mov	r0, r6
 80103a4:	f005 fe94 	bl	80160d0 <uxr_reset_output_reliable_stream>
 80103a8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80103ac:	3501      	adds	r5, #1
 80103ae:	42ab      	cmp	r3, r5
 80103b0:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80103b4:	d8f5      	bhi.n	80103a2 <uxr_reset_stream_storage+0x4a>
 80103b6:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80103ba:	b163      	cbz	r3, 80103d6 <uxr_reset_stream_storage+0x7e>
 80103bc:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80103c0:	2500      	movs	r5, #0
 80103c2:	4630      	mov	r0, r6
 80103c4:	f005 fc4e 	bl	8015c64 <uxr_reset_input_reliable_stream>
 80103c8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80103cc:	3501      	adds	r5, #1
 80103ce:	42ab      	cmp	r3, r5
 80103d0:	f106 0618 	add.w	r6, r6, #24
 80103d4:	d8f5      	bhi.n	80103c2 <uxr_reset_stream_storage+0x6a>
 80103d6:	bd70      	pop	{r4, r5, r6, pc}

080103d8 <uxr_add_output_best_effort_buffer>:
 80103d8:	b510      	push	{r4, lr}
 80103da:	7c04      	ldrb	r4, [r0, #16]
 80103dc:	f104 0c01 	add.w	ip, r4, #1
 80103e0:	b082      	sub	sp, #8
 80103e2:	f880 c010 	strb.w	ip, [r0, #16]
 80103e6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80103ea:	f005 fdbb 	bl	8015f64 <uxr_init_output_best_effort_stream>
 80103ee:	2201      	movs	r2, #1
 80103f0:	4611      	mov	r1, r2
 80103f2:	4620      	mov	r0, r4
 80103f4:	b002      	add	sp, #8
 80103f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103fa:	f7ff bf4f 	b.w	801029c <uxr_stream_id>
 80103fe:	bf00      	nop

08010400 <uxr_add_output_reliable_buffer>:
 8010400:	b510      	push	{r4, lr}
 8010402:	b084      	sub	sp, #16
 8010404:	4684      	mov	ip, r0
 8010406:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801040a:	9000      	str	r0, [sp, #0]
 801040c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8010410:	2028      	movs	r0, #40	@ 0x28
 8010412:	fb00 c004 	mla	r0, r0, r4, ip
 8010416:	f104 0e01 	add.w	lr, r4, #1
 801041a:	3018      	adds	r0, #24
 801041c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8010420:	f005 fe1e 	bl	8016060 <uxr_init_output_reliable_stream>
 8010424:	2201      	movs	r2, #1
 8010426:	2102      	movs	r1, #2
 8010428:	4620      	mov	r0, r4
 801042a:	b004      	add	sp, #16
 801042c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010430:	f7ff bf34 	b.w	801029c <uxr_stream_id>

08010434 <uxr_add_input_best_effort_buffer>:
 8010434:	b510      	push	{r4, lr}
 8010436:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 801043a:	4603      	mov	r3, r0
 801043c:	1c62      	adds	r2, r4, #1
 801043e:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8010442:	b082      	sub	sp, #8
 8010444:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8010448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801044c:	f005 fb92 	bl	8015b74 <uxr_init_input_best_effort_stream>
 8010450:	2200      	movs	r2, #0
 8010452:	2101      	movs	r1, #1
 8010454:	4620      	mov	r0, r4
 8010456:	b002      	add	sp, #8
 8010458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801045c:	f7ff bf1e 	b.w	801029c <uxr_stream_id>

08010460 <uxr_add_input_reliable_buffer>:
 8010460:	b510      	push	{r4, lr}
 8010462:	b084      	sub	sp, #16
 8010464:	4684      	mov	ip, r0
 8010466:	9806      	ldr	r0, [sp, #24]
 8010468:	9000      	str	r0, [sp, #0]
 801046a:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801046e:	2018      	movs	r0, #24
 8010470:	fb00 c004 	mla	r0, r0, r4, ip
 8010474:	f104 0e01 	add.w	lr, r4, #1
 8010478:	3048      	adds	r0, #72	@ 0x48
 801047a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801047e:	f005 fbc5 	bl	8015c0c <uxr_init_input_reliable_stream>
 8010482:	2200      	movs	r2, #0
 8010484:	2102      	movs	r1, #2
 8010486:	4620      	mov	r0, r4
 8010488:	b004      	add	sp, #16
 801048a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801048e:	f7ff bf05 	b.w	801029c <uxr_stream_id>
 8010492:	bf00      	nop

08010494 <uxr_get_output_best_effort_stream>:
 8010494:	7c03      	ldrb	r3, [r0, #16]
 8010496:	428b      	cmp	r3, r1
 8010498:	bf8c      	ite	hi
 801049a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801049e:	2000      	movls	r0, #0
 80104a0:	4770      	bx	lr
 80104a2:	bf00      	nop

080104a4 <uxr_get_output_reliable_stream>:
 80104a4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80104a8:	428b      	cmp	r3, r1
 80104aa:	bf83      	ittte	hi
 80104ac:	2328      	movhi	r3, #40	@ 0x28
 80104ae:	fb03 0001 	mlahi	r0, r3, r1, r0
 80104b2:	3018      	addhi	r0, #24
 80104b4:	2000      	movls	r0, #0
 80104b6:	4770      	bx	lr

080104b8 <uxr_get_input_best_effort_stream>:
 80104b8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80104bc:	428b      	cmp	r3, r1
 80104be:	bf86      	itte	hi
 80104c0:	3121      	addhi	r1, #33	@ 0x21
 80104c2:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80104c6:	2000      	movls	r0, #0
 80104c8:	4770      	bx	lr
 80104ca:	bf00      	nop

080104cc <uxr_get_input_reliable_stream>:
 80104cc:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80104d0:	428b      	cmp	r3, r1
 80104d2:	bf83      	ittte	hi
 80104d4:	2318      	movhi	r3, #24
 80104d6:	fb03 0001 	mlahi	r0, r3, r1, r0
 80104da:	3048      	addhi	r0, #72	@ 0x48
 80104dc:	2000      	movls	r0, #0
 80104de:	4770      	bx	lr

080104e0 <uxr_output_streams_confirmed>:
 80104e0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80104e4:	b183      	cbz	r3, 8010508 <uxr_output_streams_confirmed+0x28>
 80104e6:	b570      	push	{r4, r5, r6, lr}
 80104e8:	4606      	mov	r6, r0
 80104ea:	f100 0518 	add.w	r5, r0, #24
 80104ee:	2400      	movs	r4, #0
 80104f0:	e001      	b.n	80104f6 <uxr_output_streams_confirmed+0x16>
 80104f2:	3528      	adds	r5, #40	@ 0x28
 80104f4:	b138      	cbz	r0, 8010506 <uxr_output_streams_confirmed+0x26>
 80104f6:	4628      	mov	r0, r5
 80104f8:	f006 f85a 	bl	80165b0 <uxr_is_output_up_to_date>
 80104fc:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8010500:	3401      	adds	r4, #1
 8010502:	42a3      	cmp	r3, r4
 8010504:	d8f5      	bhi.n	80104f2 <uxr_output_streams_confirmed+0x12>
 8010506:	bd70      	pop	{r4, r5, r6, pc}
 8010508:	2001      	movs	r0, #1
 801050a:	4770      	bx	lr

0801050c <uxr_buffer_submessage_header>:
 801050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801050e:	4604      	mov	r4, r0
 8010510:	460e      	mov	r6, r1
 8010512:	2104      	movs	r1, #4
 8010514:	4615      	mov	r5, r2
 8010516:	461f      	mov	r7, r3
 8010518:	f7fb fa54 	bl	800b9c4 <ucdr_align_to>
 801051c:	2301      	movs	r3, #1
 801051e:	ea47 0203 	orr.w	r2, r7, r3
 8010522:	4631      	mov	r1, r6
 8010524:	7523      	strb	r3, [r4, #20]
 8010526:	4620      	mov	r0, r4
 8010528:	462b      	mov	r3, r5
 801052a:	f000 fa27 	bl	801097c <uxr_serialize_submessage_header>
 801052e:	4620      	mov	r0, r4
 8010530:	f7fb fa5e 	bl	800b9f0 <ucdr_buffer_remaining>
 8010534:	42a8      	cmp	r0, r5
 8010536:	bf34      	ite	cc
 8010538:	2000      	movcc	r0, #0
 801053a:	2001      	movcs	r0, #1
 801053c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801053e:	bf00      	nop

08010540 <uxr_read_submessage_header>:
 8010540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010544:	4604      	mov	r4, r0
 8010546:	460d      	mov	r5, r1
 8010548:	2104      	movs	r1, #4
 801054a:	4616      	mov	r6, r2
 801054c:	4698      	mov	r8, r3
 801054e:	f7fb fa39 	bl	800b9c4 <ucdr_align_to>
 8010552:	4620      	mov	r0, r4
 8010554:	f7fb fa4c 	bl	800b9f0 <ucdr_buffer_remaining>
 8010558:	2803      	cmp	r0, #3
 801055a:	bf8c      	ite	hi
 801055c:	2701      	movhi	r7, #1
 801055e:	2700      	movls	r7, #0
 8010560:	d802      	bhi.n	8010568 <uxr_read_submessage_header+0x28>
 8010562:	4638      	mov	r0, r7
 8010564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010568:	4633      	mov	r3, r6
 801056a:	4642      	mov	r2, r8
 801056c:	4620      	mov	r0, r4
 801056e:	4629      	mov	r1, r5
 8010570:	f000 fa18 	bl	80109a4 <uxr_deserialize_submessage_header>
 8010574:	f898 3000 	ldrb.w	r3, [r8]
 8010578:	f003 0201 	and.w	r2, r3, #1
 801057c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8010580:	f888 3000 	strb.w	r3, [r8]
 8010584:	7522      	strb	r2, [r4, #20]
 8010586:	4638      	mov	r0, r7
 8010588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801058c <uxr_submessage_padding>:
 801058c:	f010 0003 	ands.w	r0, r0, #3
 8010590:	bf18      	it	ne
 8010592:	f1c0 0004 	rsbne	r0, r0, #4
 8010596:	4770      	bx	lr

08010598 <uxr_millis>:
 8010598:	b510      	push	{r4, lr}
 801059a:	b084      	sub	sp, #16
 801059c:	4669      	mov	r1, sp
 801059e:	2001      	movs	r0, #1
 80105a0:	f7f1 fa4e 	bl	8001a40 <clock_gettime>
 80105a4:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80105a8:	4906      	ldr	r1, [pc, #24]	@ (80105c4 <uxr_millis+0x2c>)
 80105aa:	fba0 0301 	umull	r0, r3, r0, r1
 80105ae:	1900      	adds	r0, r0, r4
 80105b0:	fb01 3102 	mla	r1, r1, r2, r3
 80105b4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80105b8:	4a03      	ldr	r2, [pc, #12]	@ (80105c8 <uxr_millis+0x30>)
 80105ba:	2300      	movs	r3, #0
 80105bc:	f7f0 f854 	bl	8000668 <__aeabi_ldivmod>
 80105c0:	b004      	add	sp, #16
 80105c2:	bd10      	pop	{r4, pc}
 80105c4:	3b9aca00 	.word	0x3b9aca00
 80105c8:	000f4240 	.word	0x000f4240

080105cc <uxr_nanos>:
 80105cc:	b510      	push	{r4, lr}
 80105ce:	b084      	sub	sp, #16
 80105d0:	4669      	mov	r1, sp
 80105d2:	2001      	movs	r0, #1
 80105d4:	f7f1 fa34 	bl	8001a40 <clock_gettime>
 80105d8:	4a06      	ldr	r2, [pc, #24]	@ (80105f4 <uxr_nanos+0x28>)
 80105da:	9800      	ldr	r0, [sp, #0]
 80105dc:	9902      	ldr	r1, [sp, #8]
 80105de:	9c01      	ldr	r4, [sp, #4]
 80105e0:	fba0 0302 	umull	r0, r3, r0, r2
 80105e4:	1840      	adds	r0, r0, r1
 80105e6:	fb02 3304 	mla	r3, r2, r4, r3
 80105ea:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80105ee:	b004      	add	sp, #16
 80105f0:	bd10      	pop	{r4, pc}
 80105f2:	bf00      	nop
 80105f4:	3b9aca00 	.word	0x3b9aca00

080105f8 <on_full_output_buffer_fragmented>:
 80105f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105fc:	460c      	mov	r4, r1
 80105fe:	b08a      	sub	sp, #40	@ 0x28
 8010600:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8010604:	4606      	mov	r6, r0
 8010606:	f104 0008 	add.w	r0, r4, #8
 801060a:	f7ff ff4b 	bl	80104a4 <uxr_get_output_reliable_stream>
 801060e:	4605      	mov	r5, r0
 8010610:	f005 ffd8 	bl	80165c4 <get_available_free_slots>
 8010614:	b968      	cbnz	r0, 8010632 <on_full_output_buffer_fragmented+0x3a>
 8010616:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 801061a:	4620      	mov	r0, r4
 801061c:	4798      	blx	r3
 801061e:	b918      	cbnz	r0, 8010628 <on_full_output_buffer_fragmented+0x30>
 8010620:	2001      	movs	r0, #1
 8010622:	b00a      	add	sp, #40	@ 0x28
 8010624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010628:	4628      	mov	r0, r5
 801062a:	f005 ffcb 	bl	80165c4 <get_available_free_slots>
 801062e:	2800      	cmp	r0, #0
 8010630:	d0f6      	beq.n	8010620 <on_full_output_buffer_fragmented+0x28>
 8010632:	8929      	ldrh	r1, [r5, #8]
 8010634:	89eb      	ldrh	r3, [r5, #14]
 8010636:	7b28      	ldrb	r0, [r5, #12]
 8010638:	686a      	ldr	r2, [r5, #4]
 801063a:	fbb2 f8f1 	udiv	r8, r2, r1
 801063e:	fbb3 f2f1 	udiv	r2, r3, r1
 8010642:	fb01 3112 	mls	r1, r1, r2, r3
 8010646:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 801064a:	b289      	uxth	r1, r1
 801064c:	fb08 f101 	mul.w	r1, r8, r1
 8010650:	30fc      	adds	r0, #252	@ 0xfc
 8010652:	f1a8 0804 	sub.w	r8, r8, #4
 8010656:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 801065a:	4440      	add	r0, r8
 801065c:	b287      	uxth	r7, r0
 801065e:	1bdb      	subs	r3, r3, r7
 8010660:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8010664:	682b      	ldr	r3, [r5, #0]
 8010666:	3104      	adds	r1, #4
 8010668:	4419      	add	r1, r3
 801066a:	4642      	mov	r2, r8
 801066c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010670:	9300      	str	r3, [sp, #0]
 8010672:	a802      	add	r0, sp, #8
 8010674:	2300      	movs	r3, #0
 8010676:	f7fb f979 	bl	800b96c <ucdr_init_buffer_origin_offset>
 801067a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801067e:	f102 0308 	add.w	r3, r2, #8
 8010682:	4543      	cmp	r3, r8
 8010684:	d928      	bls.n	80106d8 <on_full_output_buffer_fragmented+0xe0>
 8010686:	463a      	mov	r2, r7
 8010688:	2300      	movs	r3, #0
 801068a:	210d      	movs	r1, #13
 801068c:	a802      	add	r0, sp, #8
 801068e:	f7ff ff3d 	bl	801050c <uxr_buffer_submessage_header>
 8010692:	8929      	ldrh	r1, [r5, #8]
 8010694:	89eb      	ldrh	r3, [r5, #14]
 8010696:	fbb3 f2f1 	udiv	r2, r3, r1
 801069a:	fb01 3312 	mls	r3, r1, r2, r3
 801069e:	b29b      	uxth	r3, r3
 80106a0:	686a      	ldr	r2, [r5, #4]
 80106a2:	fbb2 f2f1 	udiv	r2, r2, r1
 80106a6:	fb02 f303 	mul.w	r3, r2, r3
 80106aa:	682a      	ldr	r2, [r5, #0]
 80106ac:	f842 8003 	str.w	r8, [r2, r3]
 80106b0:	89e8      	ldrh	r0, [r5, #14]
 80106b2:	2101      	movs	r1, #1
 80106b4:	f005 ffa6 	bl	8016604 <uxr_seq_num_add>
 80106b8:	9904      	ldr	r1, [sp, #16]
 80106ba:	9a03      	ldr	r2, [sp, #12]
 80106bc:	81e8      	strh	r0, [r5, #14]
 80106be:	1a52      	subs	r2, r2, r1
 80106c0:	4630      	mov	r0, r6
 80106c2:	f7fb f965 	bl	800b990 <ucdr_init_buffer>
 80106c6:	4630      	mov	r0, r6
 80106c8:	490f      	ldr	r1, [pc, #60]	@ (8010708 <on_full_output_buffer_fragmented+0x110>)
 80106ca:	4622      	mov	r2, r4
 80106cc:	f7fb f934 	bl	800b938 <ucdr_set_on_full_buffer_callback>
 80106d0:	2000      	movs	r0, #0
 80106d2:	b00a      	add	sp, #40	@ 0x28
 80106d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106d8:	b292      	uxth	r2, r2
 80106da:	2302      	movs	r3, #2
 80106dc:	210d      	movs	r1, #13
 80106de:	a802      	add	r0, sp, #8
 80106e0:	f7ff ff14 	bl	801050c <uxr_buffer_submessage_header>
 80106e4:	8928      	ldrh	r0, [r5, #8]
 80106e6:	89eb      	ldrh	r3, [r5, #14]
 80106e8:	fbb3 f1f0 	udiv	r1, r3, r0
 80106ec:	fb00 3311 	mls	r3, r0, r1, r3
 80106f0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80106f4:	6869      	ldr	r1, [r5, #4]
 80106f6:	fbb1 f1f0 	udiv	r1, r1, r0
 80106fa:	b29b      	uxth	r3, r3
 80106fc:	fb01 f303 	mul.w	r3, r1, r3
 8010700:	6829      	ldr	r1, [r5, #0]
 8010702:	3208      	adds	r2, #8
 8010704:	50ca      	str	r2, [r1, r3]
 8010706:	e7d3      	b.n	80106b0 <on_full_output_buffer_fragmented+0xb8>
 8010708:	080105f9 	.word	0x080105f9

0801070c <uxr_prepare_output_stream>:
 801070c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801070e:	b087      	sub	sp, #28
 8010710:	2707      	movs	r7, #7
 8010712:	9202      	str	r2, [sp, #8]
 8010714:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010716:	9103      	str	r1, [sp, #12]
 8010718:	2500      	movs	r5, #0
 801071a:	3204      	adds	r2, #4
 801071c:	e9cd 7500 	strd	r7, r5, [sp]
 8010720:	461c      	mov	r4, r3
 8010722:	4606      	mov	r6, r0
 8010724:	f7fe ffc2 	bl	800f6ac <uxr_prepare_stream_to_write_submessage>
 8010728:	f080 0201 	eor.w	r2, r0, #1
 801072c:	b2d2      	uxtb	r2, r2
 801072e:	75a2      	strb	r2, [r4, #22]
 8010730:	b112      	cbz	r2, 8010738 <uxr_prepare_output_stream+0x2c>
 8010732:	4628      	mov	r0, r5
 8010734:	b007      	add	sp, #28
 8010736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010738:	aa05      	add	r2, sp, #20
 801073a:	9902      	ldr	r1, [sp, #8]
 801073c:	4630      	mov	r0, r6
 801073e:	f7ff f8eb 	bl	800f918 <uxr_init_base_object_request>
 8010742:	a905      	add	r1, sp, #20
 8010744:	4605      	mov	r5, r0
 8010746:	4620      	mov	r0, r4
 8010748:	f000 ffa0 	bl	801168c <uxr_serialize_WRITE_DATA_Payload_Data>
 801074c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8010750:	69a6      	ldr	r6, [r4, #24]
 8010752:	69e7      	ldr	r7, [r4, #28]
 8010754:	1a52      	subs	r2, r2, r1
 8010756:	4620      	mov	r0, r4
 8010758:	f7fb f91a 	bl	800b990 <ucdr_init_buffer>
 801075c:	4620      	mov	r0, r4
 801075e:	463a      	mov	r2, r7
 8010760:	4631      	mov	r1, r6
 8010762:	f7fb f8e9 	bl	800b938 <ucdr_set_on_full_buffer_callback>
 8010766:	4628      	mov	r0, r5
 8010768:	b007      	add	sp, #28
 801076a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801076c <uxr_prepare_output_stream_fragmented>:
 801076c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010770:	b091      	sub	sp, #68	@ 0x44
 8010772:	4605      	mov	r5, r0
 8010774:	9105      	str	r1, [sp, #20]
 8010776:	3008      	adds	r0, #8
 8010778:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801077c:	461e      	mov	r6, r3
 801077e:	9204      	str	r2, [sp, #16]
 8010780:	f7ff fe90 	bl	80104a4 <uxr_get_output_reliable_stream>
 8010784:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8010788:	2b01      	cmp	r3, #1
 801078a:	f000 8091 	beq.w	80108b0 <uxr_prepare_output_stream_fragmented+0x144>
 801078e:	4604      	mov	r4, r0
 8010790:	2800      	cmp	r0, #0
 8010792:	f000 808d 	beq.w	80108b0 <uxr_prepare_output_stream_fragmented+0x144>
 8010796:	f005 ff15 	bl	80165c4 <get_available_free_slots>
 801079a:	2800      	cmp	r0, #0
 801079c:	f000 8083 	beq.w	80108a6 <uxr_prepare_output_stream_fragmented+0x13a>
 80107a0:	8922      	ldrh	r2, [r4, #8]
 80107a2:	89e7      	ldrh	r7, [r4, #14]
 80107a4:	fbb7 f9f2 	udiv	r9, r7, r2
 80107a8:	fb02 7919 	mls	r9, r2, r9, r7
 80107ac:	fa1f f989 	uxth.w	r9, r9
 80107b0:	6863      	ldr	r3, [r4, #4]
 80107b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80107b6:	6823      	ldr	r3, [r4, #0]
 80107b8:	9203      	str	r2, [sp, #12]
 80107ba:	fb02 f909 	mul.w	r9, r2, r9
 80107be:	f109 0904 	add.w	r9, r9, #4
 80107c2:	4499      	add	r9, r3
 80107c4:	7b23      	ldrb	r3, [r4, #12]
 80107c6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80107ca:	4543      	cmp	r3, r8
 80107cc:	f1a2 0b04 	sub.w	fp, r2, #4
 80107d0:	d37a      	bcc.n	80108c8 <uxr_prepare_output_stream_fragmented+0x15c>
 80107d2:	f1ab 0a04 	sub.w	sl, fp, #4
 80107d6:	ebaa 0a03 	sub.w	sl, sl, r3
 80107da:	465a      	mov	r2, fp
 80107dc:	2300      	movs	r3, #0
 80107de:	4649      	mov	r1, r9
 80107e0:	a808      	add	r0, sp, #32
 80107e2:	f8cd 8000 	str.w	r8, [sp]
 80107e6:	f7fb f8c1 	bl	800b96c <ucdr_init_buffer_origin_offset>
 80107ea:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80107ec:	fa1f fa8a 	uxth.w	sl, sl
 80107f0:	4652      	mov	r2, sl
 80107f2:	f103 0a08 	add.w	sl, r3, #8
 80107f6:	45da      	cmp	sl, fp
 80107f8:	bf34      	ite	cc
 80107fa:	2302      	movcc	r3, #2
 80107fc:	2300      	movcs	r3, #0
 80107fe:	210d      	movs	r1, #13
 8010800:	a808      	add	r0, sp, #32
 8010802:	f7ff fe83 	bl	801050c <uxr_buffer_submessage_header>
 8010806:	8921      	ldrh	r1, [r4, #8]
 8010808:	fbb7 f2f1 	udiv	r2, r7, r1
 801080c:	fb01 7212 	mls	r2, r1, r2, r7
 8010810:	b292      	uxth	r2, r2
 8010812:	6863      	ldr	r3, [r4, #4]
 8010814:	fbb3 f3f1 	udiv	r3, r3, r1
 8010818:	fb02 f303 	mul.w	r3, r2, r3
 801081c:	6822      	ldr	r2, [r4, #0]
 801081e:	4638      	mov	r0, r7
 8010820:	f842 b003 	str.w	fp, [r2, r3]
 8010824:	2101      	movs	r1, #1
 8010826:	f005 feed 	bl	8016604 <uxr_seq_num_add>
 801082a:	9b03      	ldr	r3, [sp, #12]
 801082c:	f108 0104 	add.w	r1, r8, #4
 8010830:	f1a3 0208 	sub.w	r2, r3, #8
 8010834:	eba2 0208 	sub.w	r2, r2, r8
 8010838:	4449      	add	r1, r9
 801083a:	4607      	mov	r7, r0
 801083c:	4630      	mov	r0, r6
 801083e:	f7fb f8a7 	bl	800b990 <ucdr_init_buffer>
 8010842:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010844:	81e7      	strh	r7, [r4, #14]
 8010846:	1d1a      	adds	r2, r3, #4
 8010848:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801084c:	bf28      	it	cs
 801084e:	2200      	movcs	r2, #0
 8010850:	2300      	movs	r3, #0
 8010852:	b292      	uxth	r2, r2
 8010854:	2107      	movs	r1, #7
 8010856:	4630      	mov	r0, r6
 8010858:	f7ff fe58 	bl	801050c <uxr_buffer_submessage_header>
 801085c:	9904      	ldr	r1, [sp, #16]
 801085e:	aa07      	add	r2, sp, #28
 8010860:	4628      	mov	r0, r5
 8010862:	f7ff f859 	bl	800f918 <uxr_init_base_object_request>
 8010866:	4604      	mov	r4, r0
 8010868:	b318      	cbz	r0, 80108b2 <uxr_prepare_output_stream_fragmented+0x146>
 801086a:	a907      	add	r1, sp, #28
 801086c:	4630      	mov	r0, r6
 801086e:	f000 ff0d 	bl	801168c <uxr_serialize_WRITE_DATA_Payload_Data>
 8010872:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8010876:	4630      	mov	r0, r6
 8010878:	1a52      	subs	r2, r2, r1
 801087a:	f7fb f889 	bl	800b990 <ucdr_init_buffer>
 801087e:	9b05      	ldr	r3, [sp, #20]
 8010880:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8010884:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010886:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 801088a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801088c:	491b      	ldr	r1, [pc, #108]	@ (80108fc <uxr_prepare_output_stream_fragmented+0x190>)
 801088e:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8010892:	4630      	mov	r0, r6
 8010894:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8010898:	462a      	mov	r2, r5
 801089a:	f7fb f84d 	bl	800b938 <ucdr_set_on_full_buffer_callback>
 801089e:	4620      	mov	r0, r4
 80108a0:	b011      	add	sp, #68	@ 0x44
 80108a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108a6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80108a8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80108aa:	4628      	mov	r0, r5
 80108ac:	4798      	blx	r3
 80108ae:	b920      	cbnz	r0, 80108ba <uxr_prepare_output_stream_fragmented+0x14e>
 80108b0:	2400      	movs	r4, #0
 80108b2:	4620      	mov	r0, r4
 80108b4:	b011      	add	sp, #68	@ 0x44
 80108b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108ba:	4620      	mov	r0, r4
 80108bc:	f005 fe82 	bl	80165c4 <get_available_free_slots>
 80108c0:	2800      	cmp	r0, #0
 80108c2:	f47f af6d 	bne.w	80107a0 <uxr_prepare_output_stream_fragmented+0x34>
 80108c6:	e7f3      	b.n	80108b0 <uxr_prepare_output_stream_fragmented+0x144>
 80108c8:	4638      	mov	r0, r7
 80108ca:	2101      	movs	r1, #1
 80108cc:	f005 fe9a 	bl	8016604 <uxr_seq_num_add>
 80108d0:	8921      	ldrh	r1, [r4, #8]
 80108d2:	fbb0 f2f1 	udiv	r2, r0, r1
 80108d6:	fb01 0912 	mls	r9, r1, r2, r0
 80108da:	fa1f f289 	uxth.w	r2, r9
 80108de:	6863      	ldr	r3, [r4, #4]
 80108e0:	fbb3 f9f1 	udiv	r9, r3, r1
 80108e4:	6823      	ldr	r3, [r4, #0]
 80108e6:	fb02 f909 	mul.w	r9, r2, r9
 80108ea:	f109 0904 	add.w	r9, r9, #4
 80108ee:	4499      	add	r9, r3
 80108f0:	4607      	mov	r7, r0
 80108f2:	7b23      	ldrb	r3, [r4, #12]
 80108f4:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80108f8:	e76b      	b.n	80107d2 <uxr_prepare_output_stream_fragmented+0x66>
 80108fa:	bf00      	nop
 80108fc:	080105f9 	.word	0x080105f9

08010900 <uxr_serialize_message_header>:
 8010900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010902:	b083      	sub	sp, #12
 8010904:	4616      	mov	r6, r2
 8010906:	4604      	mov	r4, r0
 8010908:	9301      	str	r3, [sp, #4]
 801090a:	460d      	mov	r5, r1
 801090c:	9f08      	ldr	r7, [sp, #32]
 801090e:	f7f9 fefd 	bl	800a70c <ucdr_serialize_uint8_t>
 8010912:	4631      	mov	r1, r6
 8010914:	4620      	mov	r0, r4
 8010916:	f7f9 fef9 	bl	800a70c <ucdr_serialize_uint8_t>
 801091a:	9a01      	ldr	r2, [sp, #4]
 801091c:	2101      	movs	r1, #1
 801091e:	4620      	mov	r0, r4
 8010920:	f7f9 ffa0 	bl	800a864 <ucdr_serialize_endian_uint16_t>
 8010924:	062b      	lsls	r3, r5, #24
 8010926:	d501      	bpl.n	801092c <uxr_serialize_message_header+0x2c>
 8010928:	b003      	add	sp, #12
 801092a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801092c:	2204      	movs	r2, #4
 801092e:	4639      	mov	r1, r7
 8010930:	4620      	mov	r0, r4
 8010932:	b003      	add	sp, #12
 8010934:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010938:	f004 bfe4 	b.w	8015904 <ucdr_serialize_array_uint8_t>

0801093c <uxr_deserialize_message_header>:
 801093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801093e:	b083      	sub	sp, #12
 8010940:	4616      	mov	r6, r2
 8010942:	4604      	mov	r4, r0
 8010944:	9301      	str	r3, [sp, #4]
 8010946:	460d      	mov	r5, r1
 8010948:	9f08      	ldr	r7, [sp, #32]
 801094a:	f7f9 fef5 	bl	800a738 <ucdr_deserialize_uint8_t>
 801094e:	4631      	mov	r1, r6
 8010950:	4620      	mov	r0, r4
 8010952:	f7f9 fef1 	bl	800a738 <ucdr_deserialize_uint8_t>
 8010956:	9a01      	ldr	r2, [sp, #4]
 8010958:	2101      	movs	r1, #1
 801095a:	4620      	mov	r0, r4
 801095c:	f7fa f876 	bl	800aa4c <ucdr_deserialize_endian_uint16_t>
 8010960:	f995 3000 	ldrsb.w	r3, [r5]
 8010964:	2b00      	cmp	r3, #0
 8010966:	da01      	bge.n	801096c <uxr_deserialize_message_header+0x30>
 8010968:	b003      	add	sp, #12
 801096a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801096c:	2204      	movs	r2, #4
 801096e:	4639      	mov	r1, r7
 8010970:	4620      	mov	r0, r4
 8010972:	b003      	add	sp, #12
 8010974:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010978:	f005 b828 	b.w	80159cc <ucdr_deserialize_array_uint8_t>

0801097c <uxr_serialize_submessage_header>:
 801097c:	b530      	push	{r4, r5, lr}
 801097e:	b083      	sub	sp, #12
 8010980:	4615      	mov	r5, r2
 8010982:	4604      	mov	r4, r0
 8010984:	9301      	str	r3, [sp, #4]
 8010986:	f7f9 fec1 	bl	800a70c <ucdr_serialize_uint8_t>
 801098a:	4629      	mov	r1, r5
 801098c:	4620      	mov	r0, r4
 801098e:	f7f9 febd 	bl	800a70c <ucdr_serialize_uint8_t>
 8010992:	9a01      	ldr	r2, [sp, #4]
 8010994:	2101      	movs	r1, #1
 8010996:	4620      	mov	r0, r4
 8010998:	b003      	add	sp, #12
 801099a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801099e:	f7f9 bf61 	b.w	800a864 <ucdr_serialize_endian_uint16_t>
 80109a2:	bf00      	nop

080109a4 <uxr_deserialize_submessage_header>:
 80109a4:	b530      	push	{r4, r5, lr}
 80109a6:	b083      	sub	sp, #12
 80109a8:	4615      	mov	r5, r2
 80109aa:	4604      	mov	r4, r0
 80109ac:	9301      	str	r3, [sp, #4]
 80109ae:	f7f9 fec3 	bl	800a738 <ucdr_deserialize_uint8_t>
 80109b2:	4629      	mov	r1, r5
 80109b4:	4620      	mov	r0, r4
 80109b6:	f7f9 febf 	bl	800a738 <ucdr_deserialize_uint8_t>
 80109ba:	9a01      	ldr	r2, [sp, #4]
 80109bc:	2101      	movs	r1, #1
 80109be:	4620      	mov	r0, r4
 80109c0:	b003      	add	sp, #12
 80109c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80109c6:	f7fa b841 	b.w	800aa4c <ucdr_deserialize_endian_uint16_t>
 80109ca:	bf00      	nop

080109cc <uxr_serialize_CLIENT_Representation>:
 80109cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109d0:	2204      	movs	r2, #4
 80109d2:	460e      	mov	r6, r1
 80109d4:	4605      	mov	r5, r0
 80109d6:	f004 ff95 	bl	8015904 <ucdr_serialize_array_uint8_t>
 80109da:	2202      	movs	r2, #2
 80109dc:	4607      	mov	r7, r0
 80109de:	1d31      	adds	r1, r6, #4
 80109e0:	4628      	mov	r0, r5
 80109e2:	f004 ff8f 	bl	8015904 <ucdr_serialize_array_uint8_t>
 80109e6:	4038      	ands	r0, r7
 80109e8:	2202      	movs	r2, #2
 80109ea:	1db1      	adds	r1, r6, #6
 80109ec:	b2c7      	uxtb	r7, r0
 80109ee:	4628      	mov	r0, r5
 80109f0:	f004 ff88 	bl	8015904 <ucdr_serialize_array_uint8_t>
 80109f4:	2204      	movs	r2, #4
 80109f6:	4007      	ands	r7, r0
 80109f8:	f106 0108 	add.w	r1, r6, #8
 80109fc:	4628      	mov	r0, r5
 80109fe:	f004 ff81 	bl	8015904 <ucdr_serialize_array_uint8_t>
 8010a02:	7b31      	ldrb	r1, [r6, #12]
 8010a04:	4007      	ands	r7, r0
 8010a06:	4628      	mov	r0, r5
 8010a08:	f7f9 fe80 	bl	800a70c <ucdr_serialize_uint8_t>
 8010a0c:	7b71      	ldrb	r1, [r6, #13]
 8010a0e:	4007      	ands	r7, r0
 8010a10:	4628      	mov	r0, r5
 8010a12:	f7f9 fe4d 	bl	800a6b0 <ucdr_serialize_bool>
 8010a16:	7b73      	ldrb	r3, [r6, #13]
 8010a18:	ea07 0800 	and.w	r8, r7, r0
 8010a1c:	b93b      	cbnz	r3, 8010a2e <uxr_serialize_CLIENT_Representation+0x62>
 8010a1e:	8bb1      	ldrh	r1, [r6, #28]
 8010a20:	4628      	mov	r0, r5
 8010a22:	f7f9 fe9f 	bl	800a764 <ucdr_serialize_uint16_t>
 8010a26:	ea08 0000 	and.w	r0, r8, r0
 8010a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a2e:	6931      	ldr	r1, [r6, #16]
 8010a30:	4628      	mov	r0, r5
 8010a32:	f7fa f881 	bl	800ab38 <ucdr_serialize_uint32_t>
 8010a36:	6933      	ldr	r3, [r6, #16]
 8010a38:	b1e3      	cbz	r3, 8010a74 <uxr_serialize_CLIENT_Representation+0xa8>
 8010a3a:	b1c0      	cbz	r0, 8010a6e <uxr_serialize_CLIENT_Representation+0xa2>
 8010a3c:	4637      	mov	r7, r6
 8010a3e:	f04f 0900 	mov.w	r9, #0
 8010a42:	e001      	b.n	8010a48 <uxr_serialize_CLIENT_Representation+0x7c>
 8010a44:	3708      	adds	r7, #8
 8010a46:	b194      	cbz	r4, 8010a6e <uxr_serialize_CLIENT_Representation+0xa2>
 8010a48:	6979      	ldr	r1, [r7, #20]
 8010a4a:	4628      	mov	r0, r5
 8010a4c:	f005 f87a 	bl	8015b44 <ucdr_serialize_string>
 8010a50:	69b9      	ldr	r1, [r7, #24]
 8010a52:	4604      	mov	r4, r0
 8010a54:	4628      	mov	r0, r5
 8010a56:	f005 f875 	bl	8015b44 <ucdr_serialize_string>
 8010a5a:	6933      	ldr	r3, [r6, #16]
 8010a5c:	f109 0901 	add.w	r9, r9, #1
 8010a60:	4004      	ands	r4, r0
 8010a62:	4599      	cmp	r9, r3
 8010a64:	b2e4      	uxtb	r4, r4
 8010a66:	d3ed      	bcc.n	8010a44 <uxr_serialize_CLIENT_Representation+0x78>
 8010a68:	ea08 0804 	and.w	r8, r8, r4
 8010a6c:	e7d7      	b.n	8010a1e <uxr_serialize_CLIENT_Representation+0x52>
 8010a6e:	f04f 0800 	mov.w	r8, #0
 8010a72:	e7d4      	b.n	8010a1e <uxr_serialize_CLIENT_Representation+0x52>
 8010a74:	ea08 0800 	and.w	r8, r8, r0
 8010a78:	e7d1      	b.n	8010a1e <uxr_serialize_CLIENT_Representation+0x52>
 8010a7a:	bf00      	nop

08010a7c <uxr_deserialize_CLIENT_Representation>:
 8010a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a80:	2204      	movs	r2, #4
 8010a82:	460c      	mov	r4, r1
 8010a84:	4605      	mov	r5, r0
 8010a86:	f004 ffa1 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 8010a8a:	2202      	movs	r2, #2
 8010a8c:	4607      	mov	r7, r0
 8010a8e:	1d21      	adds	r1, r4, #4
 8010a90:	4628      	mov	r0, r5
 8010a92:	f004 ff9b 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 8010a96:	4038      	ands	r0, r7
 8010a98:	2202      	movs	r2, #2
 8010a9a:	1da1      	adds	r1, r4, #6
 8010a9c:	b2c6      	uxtb	r6, r0
 8010a9e:	4628      	mov	r0, r5
 8010aa0:	f004 ff94 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 8010aa4:	2204      	movs	r2, #4
 8010aa6:	4006      	ands	r6, r0
 8010aa8:	f104 0108 	add.w	r1, r4, #8
 8010aac:	4628      	mov	r0, r5
 8010aae:	f004 ff8d 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 8010ab2:	f104 010c 	add.w	r1, r4, #12
 8010ab6:	4006      	ands	r6, r0
 8010ab8:	4628      	mov	r0, r5
 8010aba:	f7f9 fe3d 	bl	800a738 <ucdr_deserialize_uint8_t>
 8010abe:	f104 010d 	add.w	r1, r4, #13
 8010ac2:	ea06 0700 	and.w	r7, r6, r0
 8010ac6:	4628      	mov	r0, r5
 8010ac8:	f7f9 fe08 	bl	800a6dc <ucdr_deserialize_bool>
 8010acc:	7b63      	ldrb	r3, [r4, #13]
 8010ace:	4007      	ands	r7, r0
 8010ad0:	b93b      	cbnz	r3, 8010ae2 <uxr_deserialize_CLIENT_Representation+0x66>
 8010ad2:	f104 011c 	add.w	r1, r4, #28
 8010ad6:	4628      	mov	r0, r5
 8010ad8:	f7f9 ff44 	bl	800a964 <ucdr_deserialize_uint16_t>
 8010adc:	4038      	ands	r0, r7
 8010ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ae2:	f104 0110 	add.w	r1, r4, #16
 8010ae6:	4628      	mov	r0, r5
 8010ae8:	f7fa f956 	bl	800ad98 <ucdr_deserialize_uint32_t>
 8010aec:	6923      	ldr	r3, [r4, #16]
 8010aee:	2b01      	cmp	r3, #1
 8010af0:	d903      	bls.n	8010afa <uxr_deserialize_CLIENT_Representation+0x7e>
 8010af2:	2301      	movs	r3, #1
 8010af4:	75ab      	strb	r3, [r5, #22]
 8010af6:	2700      	movs	r7, #0
 8010af8:	e7eb      	b.n	8010ad2 <uxr_deserialize_CLIENT_Representation+0x56>
 8010afa:	b30b      	cbz	r3, 8010b40 <uxr_deserialize_CLIENT_Representation+0xc4>
 8010afc:	2800      	cmp	r0, #0
 8010afe:	d0fa      	beq.n	8010af6 <uxr_deserialize_CLIENT_Representation+0x7a>
 8010b00:	46a0      	mov	r8, r4
 8010b02:	f04f 0900 	mov.w	r9, #0
 8010b06:	e001      	b.n	8010b0c <uxr_deserialize_CLIENT_Representation+0x90>
 8010b08:	2e00      	cmp	r6, #0
 8010b0a:	d0f4      	beq.n	8010af6 <uxr_deserialize_CLIENT_Representation+0x7a>
 8010b0c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8010b10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010b14:	4628      	mov	r0, r5
 8010b16:	f005 f825 	bl	8015b64 <ucdr_deserialize_string>
 8010b1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010b1e:	4606      	mov	r6, r0
 8010b20:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8010b24:	4628      	mov	r0, r5
 8010b26:	f005 f81d 	bl	8015b64 <ucdr_deserialize_string>
 8010b2a:	6923      	ldr	r3, [r4, #16]
 8010b2c:	f109 0901 	add.w	r9, r9, #1
 8010b30:	4006      	ands	r6, r0
 8010b32:	4599      	cmp	r9, r3
 8010b34:	f108 0808 	add.w	r8, r8, #8
 8010b38:	b2f6      	uxtb	r6, r6
 8010b3a:	d3e5      	bcc.n	8010b08 <uxr_deserialize_CLIENT_Representation+0x8c>
 8010b3c:	4037      	ands	r7, r6
 8010b3e:	e7c8      	b.n	8010ad2 <uxr_deserialize_CLIENT_Representation+0x56>
 8010b40:	4007      	ands	r7, r0
 8010b42:	e7c6      	b.n	8010ad2 <uxr_deserialize_CLIENT_Representation+0x56>

08010b44 <uxr_serialize_AGENT_Representation>:
 8010b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b48:	2204      	movs	r2, #4
 8010b4a:	460f      	mov	r7, r1
 8010b4c:	4605      	mov	r5, r0
 8010b4e:	f004 fed9 	bl	8015904 <ucdr_serialize_array_uint8_t>
 8010b52:	2202      	movs	r2, #2
 8010b54:	4604      	mov	r4, r0
 8010b56:	1d39      	adds	r1, r7, #4
 8010b58:	4628      	mov	r0, r5
 8010b5a:	f004 fed3 	bl	8015904 <ucdr_serialize_array_uint8_t>
 8010b5e:	4020      	ands	r0, r4
 8010b60:	2202      	movs	r2, #2
 8010b62:	1db9      	adds	r1, r7, #6
 8010b64:	b2c4      	uxtb	r4, r0
 8010b66:	4628      	mov	r0, r5
 8010b68:	f004 fecc 	bl	8015904 <ucdr_serialize_array_uint8_t>
 8010b6c:	7a39      	ldrb	r1, [r7, #8]
 8010b6e:	4004      	ands	r4, r0
 8010b70:	4628      	mov	r0, r5
 8010b72:	f7f9 fd9d 	bl	800a6b0 <ucdr_serialize_bool>
 8010b76:	7a3b      	ldrb	r3, [r7, #8]
 8010b78:	ea00 0804 	and.w	r8, r0, r4
 8010b7c:	b913      	cbnz	r3, 8010b84 <uxr_serialize_AGENT_Representation+0x40>
 8010b7e:	4640      	mov	r0, r8
 8010b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b84:	68f9      	ldr	r1, [r7, #12]
 8010b86:	4628      	mov	r0, r5
 8010b88:	f7f9 ffd6 	bl	800ab38 <ucdr_serialize_uint32_t>
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	b303      	cbz	r3, 8010bd2 <uxr_serialize_AGENT_Representation+0x8e>
 8010b90:	b1d0      	cbz	r0, 8010bc8 <uxr_serialize_AGENT_Representation+0x84>
 8010b92:	463e      	mov	r6, r7
 8010b94:	f04f 0900 	mov.w	r9, #0
 8010b98:	e001      	b.n	8010b9e <uxr_serialize_AGENT_Representation+0x5a>
 8010b9a:	3608      	adds	r6, #8
 8010b9c:	b1a4      	cbz	r4, 8010bc8 <uxr_serialize_AGENT_Representation+0x84>
 8010b9e:	6931      	ldr	r1, [r6, #16]
 8010ba0:	4628      	mov	r0, r5
 8010ba2:	f004 ffcf 	bl	8015b44 <ucdr_serialize_string>
 8010ba6:	6971      	ldr	r1, [r6, #20]
 8010ba8:	4604      	mov	r4, r0
 8010baa:	4628      	mov	r0, r5
 8010bac:	f004 ffca 	bl	8015b44 <ucdr_serialize_string>
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	f109 0901 	add.w	r9, r9, #1
 8010bb6:	4004      	ands	r4, r0
 8010bb8:	4599      	cmp	r9, r3
 8010bba:	b2e4      	uxtb	r4, r4
 8010bbc:	d3ed      	bcc.n	8010b9a <uxr_serialize_AGENT_Representation+0x56>
 8010bbe:	ea08 0804 	and.w	r8, r8, r4
 8010bc2:	4640      	mov	r0, r8
 8010bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bc8:	f04f 0800 	mov.w	r8, #0
 8010bcc:	4640      	mov	r0, r8
 8010bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bd2:	ea08 0800 	and.w	r8, r8, r0
 8010bd6:	e7d2      	b.n	8010b7e <uxr_serialize_AGENT_Representation+0x3a>

08010bd8 <uxr_serialize_DATAWRITER_Representation>:
 8010bd8:	b570      	push	{r4, r5, r6, lr}
 8010bda:	460d      	mov	r5, r1
 8010bdc:	7809      	ldrb	r1, [r1, #0]
 8010bde:	4606      	mov	r6, r0
 8010be0:	f7f9 fd94 	bl	800a70c <ucdr_serialize_uint8_t>
 8010be4:	4604      	mov	r4, r0
 8010be6:	b130      	cbz	r0, 8010bf6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010be8:	782b      	ldrb	r3, [r5, #0]
 8010bea:	2b02      	cmp	r3, #2
 8010bec:	d00c      	beq.n	8010c08 <uxr_serialize_DATAWRITER_Representation+0x30>
 8010bee:	2b03      	cmp	r3, #3
 8010bf0:	d010      	beq.n	8010c14 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8010bf2:	2b01      	cmp	r3, #1
 8010bf4:	d008      	beq.n	8010c08 <uxr_serialize_DATAWRITER_Representation+0x30>
 8010bf6:	2202      	movs	r2, #2
 8010bf8:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8010bfc:	4630      	mov	r0, r6
 8010bfe:	f004 fe81 	bl	8015904 <ucdr_serialize_array_uint8_t>
 8010c02:	4020      	ands	r0, r4
 8010c04:	b2c0      	uxtb	r0, r0
 8010c06:	bd70      	pop	{r4, r5, r6, pc}
 8010c08:	6869      	ldr	r1, [r5, #4]
 8010c0a:	4630      	mov	r0, r6
 8010c0c:	f004 ff9a 	bl	8015b44 <ucdr_serialize_string>
 8010c10:	4604      	mov	r4, r0
 8010c12:	e7f0      	b.n	8010bf6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010c14:	4629      	mov	r1, r5
 8010c16:	4630      	mov	r0, r6
 8010c18:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8010c1c:	3104      	adds	r1, #4
 8010c1e:	f004 ff65 	bl	8015aec <ucdr_serialize_sequence_uint8_t>
 8010c22:	4604      	mov	r4, r0
 8010c24:	e7e7      	b.n	8010bf6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010c26:	bf00      	nop

08010c28 <uxr_serialize_ObjectVariant.part.0>:
 8010c28:	b570      	push	{r4, r5, r6, lr}
 8010c2a:	780b      	ldrb	r3, [r1, #0]
 8010c2c:	3b01      	subs	r3, #1
 8010c2e:	460c      	mov	r4, r1
 8010c30:	4605      	mov	r5, r0
 8010c32:	2b0d      	cmp	r3, #13
 8010c34:	d854      	bhi.n	8010ce0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8010c36:	e8df f003 	tbb	[pc, r3]
 8010c3a:	0730      	.short	0x0730
 8010c3c:	07071b1b 	.word	0x07071b1b
 8010c40:	0c530707 	.word	0x0c530707
 8010c44:	494e0c0c 	.word	0x494e0c0c
 8010c48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010c4c:	3104      	adds	r1, #4
 8010c4e:	f7ff bfc3 	b.w	8010bd8 <uxr_serialize_DATAWRITER_Representation>
 8010c52:	7909      	ldrb	r1, [r1, #4]
 8010c54:	f7f9 fd5a 	bl	800a70c <ucdr_serialize_uint8_t>
 8010c58:	b1e8      	cbz	r0, 8010c96 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8010c5a:	7923      	ldrb	r3, [r4, #4]
 8010c5c:	2b01      	cmp	r3, #1
 8010c5e:	d001      	beq.n	8010c64 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8010c60:	2b02      	cmp	r3, #2
 8010c62:	d13d      	bne.n	8010ce0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8010c64:	68a1      	ldr	r1, [r4, #8]
 8010c66:	4628      	mov	r0, r5
 8010c68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010c6c:	f004 bf6a 	b.w	8015b44 <ucdr_serialize_string>
 8010c70:	7909      	ldrb	r1, [r1, #4]
 8010c72:	f7f9 fd4b 	bl	800a70c <ucdr_serialize_uint8_t>
 8010c76:	4606      	mov	r6, r0
 8010c78:	b120      	cbz	r0, 8010c84 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010c7a:	7923      	ldrb	r3, [r4, #4]
 8010c7c:	2b02      	cmp	r3, #2
 8010c7e:	d039      	beq.n	8010cf4 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8010c80:	2b03      	cmp	r3, #3
 8010c82:	d02f      	beq.n	8010ce4 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8010c84:	2202      	movs	r2, #2
 8010c86:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8010c8a:	4628      	mov	r0, r5
 8010c8c:	f004 fe3a 	bl	8015904 <ucdr_serialize_array_uint8_t>
 8010c90:	4030      	ands	r0, r6
 8010c92:	b2c0      	uxtb	r0, r0
 8010c94:	bd70      	pop	{r4, r5, r6, pc}
 8010c96:	2000      	movs	r0, #0
 8010c98:	bd70      	pop	{r4, r5, r6, pc}
 8010c9a:	7909      	ldrb	r1, [r1, #4]
 8010c9c:	f7f9 fd36 	bl	800a70c <ucdr_serialize_uint8_t>
 8010ca0:	4606      	mov	r6, r0
 8010ca2:	b158      	cbz	r0, 8010cbc <uxr_serialize_ObjectVariant.part.0+0x94>
 8010ca4:	7923      	ldrb	r3, [r4, #4]
 8010ca6:	2b02      	cmp	r3, #2
 8010ca8:	d003      	beq.n	8010cb2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 8010caa:	2b03      	cmp	r3, #3
 8010cac:	d028      	beq.n	8010d00 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8010cae:	2b01      	cmp	r3, #1
 8010cb0:	d104      	bne.n	8010cbc <uxr_serialize_ObjectVariant.part.0+0x94>
 8010cb2:	68a1      	ldr	r1, [r4, #8]
 8010cb4:	4628      	mov	r0, r5
 8010cb6:	f004 ff45 	bl	8015b44 <ucdr_serialize_string>
 8010cba:	4606      	mov	r6, r0
 8010cbc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8010cc0:	4628      	mov	r0, r5
 8010cc2:	f7fa fa5f 	bl	800b184 <ucdr_serialize_int16_t>
 8010cc6:	4030      	ands	r0, r6
 8010cc8:	b2c0      	uxtb	r0, r0
 8010cca:	bd70      	pop	{r4, r5, r6, pc}
 8010ccc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010cd0:	3104      	adds	r1, #4
 8010cd2:	f7ff be7b 	b.w	80109cc <uxr_serialize_CLIENT_Representation>
 8010cd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010cda:	3104      	adds	r1, #4
 8010cdc:	f7ff bf32 	b.w	8010b44 <uxr_serialize_AGENT_Representation>
 8010ce0:	2001      	movs	r0, #1
 8010ce2:	bd70      	pop	{r4, r5, r6, pc}
 8010ce4:	68a2      	ldr	r2, [r4, #8]
 8010ce6:	f104 010c 	add.w	r1, r4, #12
 8010cea:	4628      	mov	r0, r5
 8010cec:	f004 fefe 	bl	8015aec <ucdr_serialize_sequence_uint8_t>
 8010cf0:	4606      	mov	r6, r0
 8010cf2:	e7c7      	b.n	8010c84 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010cf4:	68a1      	ldr	r1, [r4, #8]
 8010cf6:	4628      	mov	r0, r5
 8010cf8:	f004 ff24 	bl	8015b44 <ucdr_serialize_string>
 8010cfc:	4606      	mov	r6, r0
 8010cfe:	e7c1      	b.n	8010c84 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010d00:	68a2      	ldr	r2, [r4, #8]
 8010d02:	f104 010c 	add.w	r1, r4, #12
 8010d06:	4628      	mov	r0, r5
 8010d08:	f004 fef0 	bl	8015aec <ucdr_serialize_sequence_uint8_t>
 8010d0c:	4606      	mov	r6, r0
 8010d0e:	e7d5      	b.n	8010cbc <uxr_serialize_ObjectVariant.part.0+0x94>

08010d10 <uxr_deserialize_DATAWRITER_Representation>:
 8010d10:	b570      	push	{r4, r5, r6, lr}
 8010d12:	4606      	mov	r6, r0
 8010d14:	460d      	mov	r5, r1
 8010d16:	f7f9 fd0f 	bl	800a738 <ucdr_deserialize_uint8_t>
 8010d1a:	4604      	mov	r4, r0
 8010d1c:	b130      	cbz	r0, 8010d2c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010d1e:	782b      	ldrb	r3, [r5, #0]
 8010d20:	2b02      	cmp	r3, #2
 8010d22:	d00c      	beq.n	8010d3e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010d24:	2b03      	cmp	r3, #3
 8010d26:	d012      	beq.n	8010d4e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8010d28:	2b01      	cmp	r3, #1
 8010d2a:	d008      	beq.n	8010d3e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010d2c:	2202      	movs	r2, #2
 8010d2e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8010d32:	4630      	mov	r0, r6
 8010d34:	f004 fe4a 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 8010d38:	4020      	ands	r0, r4
 8010d3a:	b2c0      	uxtb	r0, r0
 8010d3c:	bd70      	pop	{r4, r5, r6, pc}
 8010d3e:	6869      	ldr	r1, [r5, #4]
 8010d40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010d44:	4630      	mov	r0, r6
 8010d46:	f004 ff0d 	bl	8015b64 <ucdr_deserialize_string>
 8010d4a:	4604      	mov	r4, r0
 8010d4c:	e7ee      	b.n	8010d2c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010d4e:	1d2b      	adds	r3, r5, #4
 8010d50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010d54:	f105 0108 	add.w	r1, r5, #8
 8010d58:	4630      	mov	r0, r6
 8010d5a:	f004 fed9 	bl	8015b10 <ucdr_deserialize_sequence_uint8_t>
 8010d5e:	4604      	mov	r4, r0
 8010d60:	e7e4      	b.n	8010d2c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010d62:	bf00      	nop

08010d64 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8010d64:	b570      	push	{r4, r5, r6, lr}
 8010d66:	460d      	mov	r5, r1
 8010d68:	7809      	ldrb	r1, [r1, #0]
 8010d6a:	4606      	mov	r6, r0
 8010d6c:	f7f9 fca0 	bl	800a6b0 <ucdr_serialize_bool>
 8010d70:	782b      	ldrb	r3, [r5, #0]
 8010d72:	4604      	mov	r4, r0
 8010d74:	b94b      	cbnz	r3, 8010d8a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8010d76:	7a29      	ldrb	r1, [r5, #8]
 8010d78:	4630      	mov	r0, r6
 8010d7a:	f7f9 fc99 	bl	800a6b0 <ucdr_serialize_bool>
 8010d7e:	7a2b      	ldrb	r3, [r5, #8]
 8010d80:	4004      	ands	r4, r0
 8010d82:	b2e4      	uxtb	r4, r4
 8010d84:	b943      	cbnz	r3, 8010d98 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8010d86:	4620      	mov	r0, r4
 8010d88:	bd70      	pop	{r4, r5, r6, pc}
 8010d8a:	6869      	ldr	r1, [r5, #4]
 8010d8c:	4630      	mov	r0, r6
 8010d8e:	f004 fed9 	bl	8015b44 <ucdr_serialize_string>
 8010d92:	4004      	ands	r4, r0
 8010d94:	b2e4      	uxtb	r4, r4
 8010d96:	e7ee      	b.n	8010d76 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8010d98:	68e9      	ldr	r1, [r5, #12]
 8010d9a:	4630      	mov	r0, r6
 8010d9c:	f004 fed2 	bl	8015b44 <ucdr_serialize_string>
 8010da0:	4004      	ands	r4, r0
 8010da2:	4620      	mov	r0, r4
 8010da4:	bd70      	pop	{r4, r5, r6, pc}
 8010da6:	bf00      	nop

08010da8 <uxr_serialize_OBJK_Topic_Binary>:
 8010da8:	b570      	push	{r4, r5, r6, lr}
 8010daa:	460d      	mov	r5, r1
 8010dac:	6809      	ldr	r1, [r1, #0]
 8010dae:	4606      	mov	r6, r0
 8010db0:	f004 fec8 	bl	8015b44 <ucdr_serialize_string>
 8010db4:	7929      	ldrb	r1, [r5, #4]
 8010db6:	4604      	mov	r4, r0
 8010db8:	4630      	mov	r0, r6
 8010dba:	f7f9 fc79 	bl	800a6b0 <ucdr_serialize_bool>
 8010dbe:	792b      	ldrb	r3, [r5, #4]
 8010dc0:	4004      	ands	r4, r0
 8010dc2:	b2e4      	uxtb	r4, r4
 8010dc4:	b943      	cbnz	r3, 8010dd8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8010dc6:	7b29      	ldrb	r1, [r5, #12]
 8010dc8:	4630      	mov	r0, r6
 8010dca:	f7f9 fc71 	bl	800a6b0 <ucdr_serialize_bool>
 8010dce:	7b2b      	ldrb	r3, [r5, #12]
 8010dd0:	4004      	ands	r4, r0
 8010dd2:	b93b      	cbnz	r3, 8010de4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8010dd4:	4620      	mov	r0, r4
 8010dd6:	bd70      	pop	{r4, r5, r6, pc}
 8010dd8:	68a9      	ldr	r1, [r5, #8]
 8010dda:	4630      	mov	r0, r6
 8010ddc:	f004 feb2 	bl	8015b44 <ucdr_serialize_string>
 8010de0:	4004      	ands	r4, r0
 8010de2:	e7f0      	b.n	8010dc6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8010de4:	6929      	ldr	r1, [r5, #16]
 8010de6:	4630      	mov	r0, r6
 8010de8:	f004 feac 	bl	8015b44 <ucdr_serialize_string>
 8010dec:	4004      	ands	r4, r0
 8010dee:	b2e4      	uxtb	r4, r4
 8010df0:	4620      	mov	r0, r4
 8010df2:	bd70      	pop	{r4, r5, r6, pc}

08010df4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8010df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010df8:	460c      	mov	r4, r1
 8010dfa:	7809      	ldrb	r1, [r1, #0]
 8010dfc:	4606      	mov	r6, r0
 8010dfe:	f7f9 fc57 	bl	800a6b0 <ucdr_serialize_bool>
 8010e02:	7823      	ldrb	r3, [r4, #0]
 8010e04:	4605      	mov	r5, r0
 8010e06:	b96b      	cbnz	r3, 8010e24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8010e08:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8010e0c:	4630      	mov	r0, r6
 8010e0e:	f7f9 fc4f 	bl	800a6b0 <ucdr_serialize_bool>
 8010e12:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010e16:	4005      	ands	r5, r0
 8010e18:	b2ed      	uxtb	r5, r5
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d169      	bne.n	8010ef2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8010e1e:	4628      	mov	r0, r5
 8010e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e24:	6861      	ldr	r1, [r4, #4]
 8010e26:	4630      	mov	r0, r6
 8010e28:	f7f9 fe86 	bl	800ab38 <ucdr_serialize_uint32_t>
 8010e2c:	6863      	ldr	r3, [r4, #4]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d06b      	beq.n	8010f0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8010e32:	2800      	cmp	r0, #0
 8010e34:	d067      	beq.n	8010f06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010e36:	68a1      	ldr	r1, [r4, #8]
 8010e38:	4630      	mov	r0, r6
 8010e3a:	f004 fe83 	bl	8015b44 <ucdr_serialize_string>
 8010e3e:	6863      	ldr	r3, [r4, #4]
 8010e40:	2b01      	cmp	r3, #1
 8010e42:	d953      	bls.n	8010eec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010e44:	2800      	cmp	r0, #0
 8010e46:	d05e      	beq.n	8010f06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010e48:	68e1      	ldr	r1, [r4, #12]
 8010e4a:	4630      	mov	r0, r6
 8010e4c:	f004 fe7a 	bl	8015b44 <ucdr_serialize_string>
 8010e50:	6863      	ldr	r3, [r4, #4]
 8010e52:	2b02      	cmp	r3, #2
 8010e54:	d94a      	bls.n	8010eec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010e56:	2800      	cmp	r0, #0
 8010e58:	d055      	beq.n	8010f06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010e5a:	6921      	ldr	r1, [r4, #16]
 8010e5c:	4630      	mov	r0, r6
 8010e5e:	f004 fe71 	bl	8015b44 <ucdr_serialize_string>
 8010e62:	6863      	ldr	r3, [r4, #4]
 8010e64:	2b03      	cmp	r3, #3
 8010e66:	d941      	bls.n	8010eec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010e68:	2800      	cmp	r0, #0
 8010e6a:	d04c      	beq.n	8010f06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010e6c:	6961      	ldr	r1, [r4, #20]
 8010e6e:	4630      	mov	r0, r6
 8010e70:	f004 fe68 	bl	8015b44 <ucdr_serialize_string>
 8010e74:	6863      	ldr	r3, [r4, #4]
 8010e76:	2b04      	cmp	r3, #4
 8010e78:	d938      	bls.n	8010eec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010e7a:	2800      	cmp	r0, #0
 8010e7c:	d043      	beq.n	8010f06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010e7e:	69a1      	ldr	r1, [r4, #24]
 8010e80:	4630      	mov	r0, r6
 8010e82:	f004 fe5f 	bl	8015b44 <ucdr_serialize_string>
 8010e86:	6863      	ldr	r3, [r4, #4]
 8010e88:	2b05      	cmp	r3, #5
 8010e8a:	d92f      	bls.n	8010eec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010e8c:	2800      	cmp	r0, #0
 8010e8e:	d03a      	beq.n	8010f06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010e90:	69e1      	ldr	r1, [r4, #28]
 8010e92:	4630      	mov	r0, r6
 8010e94:	f004 fe56 	bl	8015b44 <ucdr_serialize_string>
 8010e98:	6863      	ldr	r3, [r4, #4]
 8010e9a:	2b06      	cmp	r3, #6
 8010e9c:	d926      	bls.n	8010eec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010e9e:	b390      	cbz	r0, 8010f06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010ea0:	6a21      	ldr	r1, [r4, #32]
 8010ea2:	4630      	mov	r0, r6
 8010ea4:	f004 fe4e 	bl	8015b44 <ucdr_serialize_string>
 8010ea8:	6863      	ldr	r3, [r4, #4]
 8010eaa:	2b07      	cmp	r3, #7
 8010eac:	d91e      	bls.n	8010eec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010eae:	b350      	cbz	r0, 8010f06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010eb0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8010eb2:	4630      	mov	r0, r6
 8010eb4:	f004 fe46 	bl	8015b44 <ucdr_serialize_string>
 8010eb8:	6863      	ldr	r3, [r4, #4]
 8010eba:	2b08      	cmp	r3, #8
 8010ebc:	d916      	bls.n	8010eec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010ebe:	b310      	cbz	r0, 8010f06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010ec0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8010ec2:	4630      	mov	r0, r6
 8010ec4:	f004 fe3e 	bl	8015b44 <ucdr_serialize_string>
 8010ec8:	6863      	ldr	r3, [r4, #4]
 8010eca:	2b09      	cmp	r3, #9
 8010ecc:	d90e      	bls.n	8010eec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010ece:	b1d0      	cbz	r0, 8010f06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010ed0:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8010ed4:	2709      	movs	r7, #9
 8010ed6:	e000      	b.n	8010eda <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8010ed8:	b1a8      	cbz	r0, 8010f06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010eda:	f858 1b04 	ldr.w	r1, [r8], #4
 8010ede:	4630      	mov	r0, r6
 8010ee0:	f004 fe30 	bl	8015b44 <ucdr_serialize_string>
 8010ee4:	6862      	ldr	r2, [r4, #4]
 8010ee6:	3701      	adds	r7, #1
 8010ee8:	4297      	cmp	r7, r2
 8010eea:	d3f5      	bcc.n	8010ed8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8010eec:	4005      	ands	r5, r0
 8010eee:	b2ed      	uxtb	r5, r5
 8010ef0:	e78a      	b.n	8010e08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8010ef2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010ef4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8010ef8:	4630      	mov	r0, r6
 8010efa:	f004 fdf7 	bl	8015aec <ucdr_serialize_sequence_uint8_t>
 8010efe:	4005      	ands	r5, r0
 8010f00:	4628      	mov	r0, r5
 8010f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f06:	2500      	movs	r5, #0
 8010f08:	e77e      	b.n	8010e08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8010f0a:	4028      	ands	r0, r5
 8010f0c:	b2c5      	uxtb	r5, r0
 8010f0e:	e77b      	b.n	8010e08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08010f10 <uxr_serialize_OBJK_Publisher_Binary>:
 8010f10:	b570      	push	{r4, r5, r6, lr}
 8010f12:	460d      	mov	r5, r1
 8010f14:	7809      	ldrb	r1, [r1, #0]
 8010f16:	4606      	mov	r6, r0
 8010f18:	f7f9 fbca 	bl	800a6b0 <ucdr_serialize_bool>
 8010f1c:	782b      	ldrb	r3, [r5, #0]
 8010f1e:	4604      	mov	r4, r0
 8010f20:	b94b      	cbnz	r3, 8010f36 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8010f22:	7a29      	ldrb	r1, [r5, #8]
 8010f24:	4630      	mov	r0, r6
 8010f26:	f7f9 fbc3 	bl	800a6b0 <ucdr_serialize_bool>
 8010f2a:	7a2b      	ldrb	r3, [r5, #8]
 8010f2c:	4004      	ands	r4, r0
 8010f2e:	b2e4      	uxtb	r4, r4
 8010f30:	b943      	cbnz	r3, 8010f44 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8010f32:	4620      	mov	r0, r4
 8010f34:	bd70      	pop	{r4, r5, r6, pc}
 8010f36:	6869      	ldr	r1, [r5, #4]
 8010f38:	4630      	mov	r0, r6
 8010f3a:	f004 fe03 	bl	8015b44 <ucdr_serialize_string>
 8010f3e:	4004      	ands	r4, r0
 8010f40:	b2e4      	uxtb	r4, r4
 8010f42:	e7ee      	b.n	8010f22 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8010f44:	f105 010c 	add.w	r1, r5, #12
 8010f48:	4630      	mov	r0, r6
 8010f4a:	f7ff ff53 	bl	8010df4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8010f4e:	4004      	ands	r4, r0
 8010f50:	4620      	mov	r0, r4
 8010f52:	bd70      	pop	{r4, r5, r6, pc}

08010f54 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8010f54:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8010f58:	4688      	mov	r8, r1
 8010f5a:	8809      	ldrh	r1, [r1, #0]
 8010f5c:	4681      	mov	r9, r0
 8010f5e:	f7f9 fc01 	bl	800a764 <ucdr_serialize_uint16_t>
 8010f62:	f898 1002 	ldrb.w	r1, [r8, #2]
 8010f66:	4606      	mov	r6, r0
 8010f68:	4648      	mov	r0, r9
 8010f6a:	f7f9 fba1 	bl	800a6b0 <ucdr_serialize_bool>
 8010f6e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010f72:	4006      	ands	r6, r0
 8010f74:	b2f5      	uxtb	r5, r6
 8010f76:	b9eb      	cbnz	r3, 8010fb4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8010f78:	f898 1006 	ldrb.w	r1, [r8, #6]
 8010f7c:	4648      	mov	r0, r9
 8010f7e:	f7f9 fb97 	bl	800a6b0 <ucdr_serialize_bool>
 8010f82:	f898 3006 	ldrb.w	r3, [r8, #6]
 8010f86:	4005      	ands	r5, r0
 8010f88:	bb7b      	cbnz	r3, 8010fea <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8010f8a:	f898 100c 	ldrb.w	r1, [r8, #12]
 8010f8e:	4648      	mov	r0, r9
 8010f90:	f7f9 fb8e 	bl	800a6b0 <ucdr_serialize_bool>
 8010f94:	f898 300c 	ldrb.w	r3, [r8, #12]
 8010f98:	4005      	ands	r5, r0
 8010f9a:	b9f3      	cbnz	r3, 8010fda <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8010f9c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8010fa0:	4648      	mov	r0, r9
 8010fa2:	f7f9 fb85 	bl	800a6b0 <ucdr_serialize_bool>
 8010fa6:	f898 3014 	ldrb.w	r3, [r8, #20]
 8010faa:	4005      	ands	r5, r0
 8010fac:	b94b      	cbnz	r3, 8010fc2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8010fae:	4628      	mov	r0, r5
 8010fb0:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8010fb4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8010fb8:	4648      	mov	r0, r9
 8010fba:	f7f9 fbd3 	bl	800a764 <ucdr_serialize_uint16_t>
 8010fbe:	4005      	ands	r5, r0
 8010fc0:	e7da      	b.n	8010f78 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8010fc2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8010fc6:	f108 011c 	add.w	r1, r8, #28
 8010fca:	4648      	mov	r0, r9
 8010fcc:	f004 fd8e 	bl	8015aec <ucdr_serialize_sequence_uint8_t>
 8010fd0:	4028      	ands	r0, r5
 8010fd2:	b2c5      	uxtb	r5, r0
 8010fd4:	4628      	mov	r0, r5
 8010fd6:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8010fda:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010fde:	4648      	mov	r0, r9
 8010fe0:	f7f9 fdaa 	bl	800ab38 <ucdr_serialize_uint32_t>
 8010fe4:	4028      	ands	r0, r5
 8010fe6:	b2c5      	uxtb	r5, r0
 8010fe8:	e7d8      	b.n	8010f9c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8010fea:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8010fee:	4648      	mov	r0, r9
 8010ff0:	f7f9 fda2 	bl	800ab38 <ucdr_serialize_uint32_t>
 8010ff4:	4028      	ands	r0, r5
 8010ff6:	b2c5      	uxtb	r5, r0
 8010ff8:	e7c7      	b.n	8010f8a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8010ffa:	bf00      	nop

08010ffc <uxr_serialize_OBJK_DataWriter_Binary>:
 8010ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ffe:	2202      	movs	r2, #2
 8011000:	460d      	mov	r5, r1
 8011002:	4606      	mov	r6, r0
 8011004:	f004 fc7e 	bl	8015904 <ucdr_serialize_array_uint8_t>
 8011008:	78a9      	ldrb	r1, [r5, #2]
 801100a:	4604      	mov	r4, r0
 801100c:	4630      	mov	r0, r6
 801100e:	f7f9 fb4f 	bl	800a6b0 <ucdr_serialize_bool>
 8011012:	78ab      	ldrb	r3, [r5, #2]
 8011014:	4004      	ands	r4, r0
 8011016:	b2e4      	uxtb	r4, r4
 8011018:	b90b      	cbnz	r3, 801101e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801101a:	4620      	mov	r0, r4
 801101c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801101e:	f105 0108 	add.w	r1, r5, #8
 8011022:	4630      	mov	r0, r6
 8011024:	f7ff ff96 	bl	8010f54 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8011028:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801102c:	4607      	mov	r7, r0
 801102e:	4630      	mov	r0, r6
 8011030:	f7f9 fb3e 	bl	800a6b0 <ucdr_serialize_bool>
 8011034:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8011038:	4038      	ands	r0, r7
 801103a:	b2c7      	uxtb	r7, r0
 801103c:	b913      	cbnz	r3, 8011044 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801103e:	403c      	ands	r4, r7
 8011040:	4620      	mov	r0, r4
 8011042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011044:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8011048:	4630      	mov	r0, r6
 801104a:	f7f9 ffcb 	bl	800afe4 <ucdr_serialize_uint64_t>
 801104e:	4007      	ands	r7, r0
 8011050:	e7f5      	b.n	801103e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8011052:	bf00      	nop

08011054 <uxr_deserialize_ObjectVariant>:
 8011054:	b570      	push	{r4, r5, r6, lr}
 8011056:	4605      	mov	r5, r0
 8011058:	460e      	mov	r6, r1
 801105a:	f7f9 fb6d 	bl	800a738 <ucdr_deserialize_uint8_t>
 801105e:	b168      	cbz	r0, 801107c <uxr_deserialize_ObjectVariant+0x28>
 8011060:	7833      	ldrb	r3, [r6, #0]
 8011062:	3b01      	subs	r3, #1
 8011064:	4604      	mov	r4, r0
 8011066:	2b0d      	cmp	r3, #13
 8011068:	d809      	bhi.n	801107e <uxr_deserialize_ObjectVariant+0x2a>
 801106a:	e8df f003 	tbb	[pc, r3]
 801106e:	0a41      	.short	0x0a41
 8011070:	0a0a2323 	.word	0x0a0a2323
 8011074:	10080a0a 	.word	0x10080a0a
 8011078:	565c1010 	.word	0x565c1010
 801107c:	2400      	movs	r4, #0
 801107e:	4620      	mov	r0, r4
 8011080:	bd70      	pop	{r4, r5, r6, pc}
 8011082:	1d31      	adds	r1, r6, #4
 8011084:	4628      	mov	r0, r5
 8011086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801108a:	f7ff be41 	b.w	8010d10 <uxr_deserialize_DATAWRITER_Representation>
 801108e:	1d31      	adds	r1, r6, #4
 8011090:	4628      	mov	r0, r5
 8011092:	f7f9 fb51 	bl	800a738 <ucdr_deserialize_uint8_t>
 8011096:	2800      	cmp	r0, #0
 8011098:	d0f0      	beq.n	801107c <uxr_deserialize_ObjectVariant+0x28>
 801109a:	7933      	ldrb	r3, [r6, #4]
 801109c:	2b01      	cmp	r3, #1
 801109e:	d001      	beq.n	80110a4 <uxr_deserialize_ObjectVariant+0x50>
 80110a0:	2b02      	cmp	r3, #2
 80110a2:	d1ec      	bne.n	801107e <uxr_deserialize_ObjectVariant+0x2a>
 80110a4:	68b1      	ldr	r1, [r6, #8]
 80110a6:	4628      	mov	r0, r5
 80110a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80110ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80110b0:	f004 bd58 	b.w	8015b64 <ucdr_deserialize_string>
 80110b4:	1d31      	adds	r1, r6, #4
 80110b6:	4628      	mov	r0, r5
 80110b8:	f7f9 fb3e 	bl	800a738 <ucdr_deserialize_uint8_t>
 80110bc:	4604      	mov	r4, r0
 80110be:	b170      	cbz	r0, 80110de <uxr_deserialize_ObjectVariant+0x8a>
 80110c0:	7933      	ldrb	r3, [r6, #4]
 80110c2:	2b02      	cmp	r3, #2
 80110c4:	d04c      	beq.n	8011160 <uxr_deserialize_ObjectVariant+0x10c>
 80110c6:	2b03      	cmp	r3, #3
 80110c8:	d109      	bne.n	80110de <uxr_deserialize_ObjectVariant+0x8a>
 80110ca:	f106 0308 	add.w	r3, r6, #8
 80110ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80110d2:	f106 010c 	add.w	r1, r6, #12
 80110d6:	4628      	mov	r0, r5
 80110d8:	f004 fd1a 	bl	8015b10 <ucdr_deserialize_sequence_uint8_t>
 80110dc:	4604      	mov	r4, r0
 80110de:	2202      	movs	r2, #2
 80110e0:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80110e4:	4628      	mov	r0, r5
 80110e6:	f004 fc71 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 80110ea:	4020      	ands	r0, r4
 80110ec:	b2c4      	uxtb	r4, r0
 80110ee:	e7c6      	b.n	801107e <uxr_deserialize_ObjectVariant+0x2a>
 80110f0:	1d31      	adds	r1, r6, #4
 80110f2:	4628      	mov	r0, r5
 80110f4:	f7f9 fb20 	bl	800a738 <ucdr_deserialize_uint8_t>
 80110f8:	4604      	mov	r4, r0
 80110fa:	b130      	cbz	r0, 801110a <uxr_deserialize_ObjectVariant+0xb6>
 80110fc:	7933      	ldrb	r3, [r6, #4]
 80110fe:	2b02      	cmp	r3, #2
 8011100:	d036      	beq.n	8011170 <uxr_deserialize_ObjectVariant+0x11c>
 8011102:	2b03      	cmp	r3, #3
 8011104:	d03c      	beq.n	8011180 <uxr_deserialize_ObjectVariant+0x12c>
 8011106:	2b01      	cmp	r3, #1
 8011108:	d032      	beq.n	8011170 <uxr_deserialize_ObjectVariant+0x11c>
 801110a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801110e:	4628      	mov	r0, r5
 8011110:	f7fa f8b8 	bl	800b284 <ucdr_deserialize_int16_t>
 8011114:	4020      	ands	r0, r4
 8011116:	b2c4      	uxtb	r4, r0
 8011118:	e7b1      	b.n	801107e <uxr_deserialize_ObjectVariant+0x2a>
 801111a:	1d31      	adds	r1, r6, #4
 801111c:	4628      	mov	r0, r5
 801111e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011122:	f7ff bcab 	b.w	8010a7c <uxr_deserialize_CLIENT_Representation>
 8011126:	2204      	movs	r2, #4
 8011128:	18b1      	adds	r1, r6, r2
 801112a:	4628      	mov	r0, r5
 801112c:	f004 fc4e 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 8011130:	2202      	movs	r2, #2
 8011132:	f106 0108 	add.w	r1, r6, #8
 8011136:	4604      	mov	r4, r0
 8011138:	4628      	mov	r0, r5
 801113a:	f004 fc47 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 801113e:	2202      	movs	r2, #2
 8011140:	4004      	ands	r4, r0
 8011142:	f106 010a 	add.w	r1, r6, #10
 8011146:	4628      	mov	r0, r5
 8011148:	f004 fc40 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 801114c:	b2e4      	uxtb	r4, r4
 801114e:	4603      	mov	r3, r0
 8011150:	f106 010c 	add.w	r1, r6, #12
 8011154:	4628      	mov	r0, r5
 8011156:	401c      	ands	r4, r3
 8011158:	f7f9 fac0 	bl	800a6dc <ucdr_deserialize_bool>
 801115c:	4004      	ands	r4, r0
 801115e:	e78e      	b.n	801107e <uxr_deserialize_ObjectVariant+0x2a>
 8011160:	68b1      	ldr	r1, [r6, #8]
 8011162:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011166:	4628      	mov	r0, r5
 8011168:	f004 fcfc 	bl	8015b64 <ucdr_deserialize_string>
 801116c:	4604      	mov	r4, r0
 801116e:	e7b6      	b.n	80110de <uxr_deserialize_ObjectVariant+0x8a>
 8011170:	68b1      	ldr	r1, [r6, #8]
 8011172:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011176:	4628      	mov	r0, r5
 8011178:	f004 fcf4 	bl	8015b64 <ucdr_deserialize_string>
 801117c:	4604      	mov	r4, r0
 801117e:	e7c4      	b.n	801110a <uxr_deserialize_ObjectVariant+0xb6>
 8011180:	f106 0308 	add.w	r3, r6, #8
 8011184:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011188:	f106 010c 	add.w	r1, r6, #12
 801118c:	4628      	mov	r0, r5
 801118e:	f004 fcbf 	bl	8015b10 <ucdr_deserialize_sequence_uint8_t>
 8011192:	4604      	mov	r4, r0
 8011194:	e7b9      	b.n	801110a <uxr_deserialize_ObjectVariant+0xb6>
 8011196:	bf00      	nop

08011198 <uxr_deserialize_BaseObjectRequest>:
 8011198:	b570      	push	{r4, r5, r6, lr}
 801119a:	2202      	movs	r2, #2
 801119c:	4605      	mov	r5, r0
 801119e:	460e      	mov	r6, r1
 80111a0:	f004 fc14 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 80111a4:	2202      	movs	r2, #2
 80111a6:	4604      	mov	r4, r0
 80111a8:	18b1      	adds	r1, r6, r2
 80111aa:	4628      	mov	r0, r5
 80111ac:	f004 fc0e 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 80111b0:	4020      	ands	r0, r4
 80111b2:	b2c0      	uxtb	r0, r0
 80111b4:	bd70      	pop	{r4, r5, r6, pc}
 80111b6:	bf00      	nop

080111b8 <uxr_serialize_ActivityInfoVariant>:
 80111b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111bc:	460d      	mov	r5, r1
 80111be:	7809      	ldrb	r1, [r1, #0]
 80111c0:	4607      	mov	r7, r0
 80111c2:	f7f9 faa3 	bl	800a70c <ucdr_serialize_uint8_t>
 80111c6:	4681      	mov	r9, r0
 80111c8:	b138      	cbz	r0, 80111da <uxr_serialize_ActivityInfoVariant+0x22>
 80111ca:	782b      	ldrb	r3, [r5, #0]
 80111cc:	2b06      	cmp	r3, #6
 80111ce:	f000 8082 	beq.w	80112d6 <uxr_serialize_ActivityInfoVariant+0x11e>
 80111d2:	2b0d      	cmp	r3, #13
 80111d4:	d016      	beq.n	8011204 <uxr_serialize_ActivityInfoVariant+0x4c>
 80111d6:	2b05      	cmp	r3, #5
 80111d8:	d002      	beq.n	80111e0 <uxr_serialize_ActivityInfoVariant+0x28>
 80111da:	4648      	mov	r0, r9
 80111dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111e0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80111e4:	4638      	mov	r0, r7
 80111e6:	f7f9 ffcd 	bl	800b184 <ucdr_serialize_int16_t>
 80111ea:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80111ee:	4681      	mov	r9, r0
 80111f0:	4638      	mov	r0, r7
 80111f2:	f7f9 fef7 	bl	800afe4 <ucdr_serialize_uint64_t>
 80111f6:	ea09 0000 	and.w	r0, r9, r0
 80111fa:	fa5f f980 	uxtb.w	r9, r0
 80111fe:	4648      	mov	r0, r9
 8011200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011204:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011208:	4638      	mov	r0, r7
 801120a:	f7f9 ffbb 	bl	800b184 <ucdr_serialize_int16_t>
 801120e:	68e9      	ldr	r1, [r5, #12]
 8011210:	4681      	mov	r9, r0
 8011212:	4638      	mov	r0, r7
 8011214:	f7f9 fc90 	bl	800ab38 <ucdr_serialize_uint32_t>
 8011218:	68eb      	ldr	r3, [r5, #12]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d0eb      	beq.n	80111f6 <uxr_serialize_ActivityInfoVariant+0x3e>
 801121e:	b320      	cbz	r0, 801126a <uxr_serialize_ActivityInfoVariant+0xb2>
 8011220:	f105 080c 	add.w	r8, r5, #12
 8011224:	2600      	movs	r6, #0
 8011226:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 801122a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 801122e:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8011232:	4638      	mov	r0, r7
 8011234:	f7f9 fa6a 	bl	800a70c <ucdr_serialize_uint8_t>
 8011238:	2800      	cmp	r0, #0
 801123a:	d053      	beq.n	80112e4 <uxr_serialize_ActivityInfoVariant+0x12c>
 801123c:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8011240:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8011244:	0074      	lsls	r4, r6, #1
 8011246:	00c9      	lsls	r1, r1, #3
 8011248:	2b03      	cmp	r3, #3
 801124a:	d854      	bhi.n	80112f6 <uxr_serialize_ActivityInfoVariant+0x13e>
 801124c:	e8df f003 	tbb	[pc, r3]
 8011250:	02102132 	.word	0x02102132
 8011254:	4441      	add	r1, r8
 8011256:	4638      	mov	r0, r7
 8011258:	6889      	ldr	r1, [r1, #8]
 801125a:	f004 fc73 	bl	8015b44 <ucdr_serialize_string>
 801125e:	68ea      	ldr	r2, [r5, #12]
 8011260:	3601      	adds	r6, #1
 8011262:	4296      	cmp	r6, r2
 8011264:	d242      	bcs.n	80112ec <uxr_serialize_ActivityInfoVariant+0x134>
 8011266:	2800      	cmp	r0, #0
 8011268:	d1dd      	bne.n	8011226 <uxr_serialize_ActivityInfoVariant+0x6e>
 801126a:	f04f 0900 	mov.w	r9, #0
 801126e:	e7b4      	b.n	80111da <uxr_serialize_ActivityInfoVariant+0x22>
 8011270:	3108      	adds	r1, #8
 8011272:	4441      	add	r1, r8
 8011274:	2210      	movs	r2, #16
 8011276:	4638      	mov	r0, r7
 8011278:	f004 fb44 	bl	8015904 <ucdr_serialize_array_uint8_t>
 801127c:	4434      	add	r4, r6
 801127e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011282:	4604      	mov	r4, r0
 8011284:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011286:	4638      	mov	r0, r7
 8011288:	f7f9 fc56 	bl	800ab38 <ucdr_serialize_uint32_t>
 801128c:	4020      	ands	r0, r4
 801128e:	b2c0      	uxtb	r0, r0
 8011290:	e7e5      	b.n	801125e <uxr_serialize_ActivityInfoVariant+0xa6>
 8011292:	3108      	adds	r1, #8
 8011294:	4441      	add	r1, r8
 8011296:	2204      	movs	r2, #4
 8011298:	4638      	mov	r0, r7
 801129a:	f004 fb33 	bl	8015904 <ucdr_serialize_array_uint8_t>
 801129e:	4434      	add	r4, r6
 80112a0:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80112a4:	4604      	mov	r4, r0
 80112a6:	8b19      	ldrh	r1, [r3, #24]
 80112a8:	4638      	mov	r0, r7
 80112aa:	f7f9 fa5b 	bl	800a764 <ucdr_serialize_uint16_t>
 80112ae:	4020      	ands	r0, r4
 80112b0:	b2c0      	uxtb	r0, r0
 80112b2:	e7d4      	b.n	801125e <uxr_serialize_ActivityInfoVariant+0xa6>
 80112b4:	3108      	adds	r1, #8
 80112b6:	4441      	add	r1, r8
 80112b8:	2202      	movs	r2, #2
 80112ba:	4638      	mov	r0, r7
 80112bc:	f004 fb22 	bl	8015904 <ucdr_serialize_array_uint8_t>
 80112c0:	4434      	add	r4, r6
 80112c2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80112c6:	4604      	mov	r4, r0
 80112c8:	7d99      	ldrb	r1, [r3, #22]
 80112ca:	4638      	mov	r0, r7
 80112cc:	f7f9 fa1e 	bl	800a70c <ucdr_serialize_uint8_t>
 80112d0:	4020      	ands	r0, r4
 80112d2:	b2c0      	uxtb	r0, r0
 80112d4:	e7c3      	b.n	801125e <uxr_serialize_ActivityInfoVariant+0xa6>
 80112d6:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80112da:	4638      	mov	r0, r7
 80112dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112e0:	f7f9 bf50 	b.w	800b184 <ucdr_serialize_int16_t>
 80112e4:	68ea      	ldr	r2, [r5, #12]
 80112e6:	3601      	adds	r6, #1
 80112e8:	42b2      	cmp	r2, r6
 80112ea:	d8be      	bhi.n	801126a <uxr_serialize_ActivityInfoVariant+0xb2>
 80112ec:	ea09 0900 	and.w	r9, r9, r0
 80112f0:	fa5f f989 	uxtb.w	r9, r9
 80112f4:	e771      	b.n	80111da <uxr_serialize_ActivityInfoVariant+0x22>
 80112f6:	68eb      	ldr	r3, [r5, #12]
 80112f8:	3601      	adds	r6, #1
 80112fa:	429e      	cmp	r6, r3
 80112fc:	f10a 0a18 	add.w	sl, sl, #24
 8011300:	d395      	bcc.n	801122e <uxr_serialize_ActivityInfoVariant+0x76>
 8011302:	e76a      	b.n	80111da <uxr_serialize_ActivityInfoVariant+0x22>

08011304 <uxr_deserialize_BaseObjectReply>:
 8011304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011308:	2202      	movs	r2, #2
 801130a:	4606      	mov	r6, r0
 801130c:	460f      	mov	r7, r1
 801130e:	f004 fb5d 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 8011312:	2202      	movs	r2, #2
 8011314:	18b9      	adds	r1, r7, r2
 8011316:	4605      	mov	r5, r0
 8011318:	4630      	mov	r0, r6
 801131a:	f004 fb57 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 801131e:	1d39      	adds	r1, r7, #4
 8011320:	4680      	mov	r8, r0
 8011322:	4630      	mov	r0, r6
 8011324:	f7f9 fa08 	bl	800a738 <ucdr_deserialize_uint8_t>
 8011328:	1d79      	adds	r1, r7, #5
 801132a:	4604      	mov	r4, r0
 801132c:	4630      	mov	r0, r6
 801132e:	f7f9 fa03 	bl	800a738 <ucdr_deserialize_uint8_t>
 8011332:	ea05 0508 	and.w	r5, r5, r8
 8011336:	402c      	ands	r4, r5
 8011338:	4020      	ands	r0, r4
 801133a:	b2c0      	uxtb	r0, r0
 801133c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011340 <uxr_serialize_ReadSpecification>:
 8011340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011344:	460e      	mov	r6, r1
 8011346:	7809      	ldrb	r1, [r1, #0]
 8011348:	4607      	mov	r7, r0
 801134a:	f7f9 f9df 	bl	800a70c <ucdr_serialize_uint8_t>
 801134e:	7871      	ldrb	r1, [r6, #1]
 8011350:	4604      	mov	r4, r0
 8011352:	4638      	mov	r0, r7
 8011354:	f7f9 f9da 	bl	800a70c <ucdr_serialize_uint8_t>
 8011358:	78b1      	ldrb	r1, [r6, #2]
 801135a:	4004      	ands	r4, r0
 801135c:	4638      	mov	r0, r7
 801135e:	f7f9 f9a7 	bl	800a6b0 <ucdr_serialize_bool>
 8011362:	78b3      	ldrb	r3, [r6, #2]
 8011364:	b2e4      	uxtb	r4, r4
 8011366:	4004      	ands	r4, r0
 8011368:	b94b      	cbnz	r3, 801137e <uxr_serialize_ReadSpecification+0x3e>
 801136a:	7a31      	ldrb	r1, [r6, #8]
 801136c:	4638      	mov	r0, r7
 801136e:	f7f9 f99f 	bl	800a6b0 <ucdr_serialize_bool>
 8011372:	7a33      	ldrb	r3, [r6, #8]
 8011374:	4004      	ands	r4, r0
 8011376:	b943      	cbnz	r3, 801138a <uxr_serialize_ReadSpecification+0x4a>
 8011378:	4620      	mov	r0, r4
 801137a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801137e:	6871      	ldr	r1, [r6, #4]
 8011380:	4638      	mov	r0, r7
 8011382:	f004 fbdf 	bl	8015b44 <ucdr_serialize_string>
 8011386:	4004      	ands	r4, r0
 8011388:	e7ef      	b.n	801136a <uxr_serialize_ReadSpecification+0x2a>
 801138a:	8971      	ldrh	r1, [r6, #10]
 801138c:	4638      	mov	r0, r7
 801138e:	f7f9 f9e9 	bl	800a764 <ucdr_serialize_uint16_t>
 8011392:	89b1      	ldrh	r1, [r6, #12]
 8011394:	4605      	mov	r5, r0
 8011396:	4638      	mov	r0, r7
 8011398:	f7f9 f9e4 	bl	800a764 <ucdr_serialize_uint16_t>
 801139c:	89f1      	ldrh	r1, [r6, #14]
 801139e:	4005      	ands	r5, r0
 80113a0:	4638      	mov	r0, r7
 80113a2:	f7f9 f9df 	bl	800a764 <ucdr_serialize_uint16_t>
 80113a6:	8a31      	ldrh	r1, [r6, #16]
 80113a8:	4680      	mov	r8, r0
 80113aa:	4638      	mov	r0, r7
 80113ac:	f7f9 f9da 	bl	800a764 <ucdr_serialize_uint16_t>
 80113b0:	b2ed      	uxtb	r5, r5
 80113b2:	4025      	ands	r5, r4
 80113b4:	ea08 0505 	and.w	r5, r8, r5
 80113b8:	ea00 0405 	and.w	r4, r0, r5
 80113bc:	4620      	mov	r0, r4
 80113be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113c2:	bf00      	nop

080113c4 <uxr_serialize_CREATE_CLIENT_Payload>:
 80113c4:	f7ff bb02 	b.w	80109cc <uxr_serialize_CLIENT_Representation>

080113c8 <uxr_serialize_CREATE_Payload>:
 80113c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ca:	2202      	movs	r2, #2
 80113cc:	4607      	mov	r7, r0
 80113ce:	460e      	mov	r6, r1
 80113d0:	f004 fa98 	bl	8015904 <ucdr_serialize_array_uint8_t>
 80113d4:	2202      	movs	r2, #2
 80113d6:	18b1      	adds	r1, r6, r2
 80113d8:	4605      	mov	r5, r0
 80113da:	4638      	mov	r0, r7
 80113dc:	f004 fa92 	bl	8015904 <ucdr_serialize_array_uint8_t>
 80113e0:	7931      	ldrb	r1, [r6, #4]
 80113e2:	4604      	mov	r4, r0
 80113e4:	4638      	mov	r0, r7
 80113e6:	f7f9 f991 	bl	800a70c <ucdr_serialize_uint8_t>
 80113ea:	b170      	cbz	r0, 801140a <uxr_serialize_CREATE_Payload+0x42>
 80113ec:	7933      	ldrb	r3, [r6, #4]
 80113ee:	402c      	ands	r4, r5
 80113f0:	3b01      	subs	r3, #1
 80113f2:	b2e4      	uxtb	r4, r4
 80113f4:	2b0d      	cmp	r3, #13
 80113f6:	d809      	bhi.n	801140c <uxr_serialize_CREATE_Payload+0x44>
 80113f8:	e8df f003 	tbb	[pc, r3]
 80113fc:	23230a4c 	.word	0x23230a4c
 8011400:	0a0a0a0a 	.word	0x0a0a0a0a
 8011404:	12121208 	.word	0x12121208
 8011408:	3e45      	.short	0x3e45
 801140a:	2400      	movs	r4, #0
 801140c:	4620      	mov	r0, r4
 801140e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011410:	f106 0108 	add.w	r1, r6, #8
 8011414:	4638      	mov	r0, r7
 8011416:	f7ff fbdf 	bl	8010bd8 <uxr_serialize_DATAWRITER_Representation>
 801141a:	4004      	ands	r4, r0
 801141c:	4620      	mov	r0, r4
 801141e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011420:	7a31      	ldrb	r1, [r6, #8]
 8011422:	4638      	mov	r0, r7
 8011424:	f7f9 f972 	bl	800a70c <ucdr_serialize_uint8_t>
 8011428:	2800      	cmp	r0, #0
 801142a:	d0ee      	beq.n	801140a <uxr_serialize_CREATE_Payload+0x42>
 801142c:	7a33      	ldrb	r3, [r6, #8]
 801142e:	2b01      	cmp	r3, #1
 8011430:	d001      	beq.n	8011436 <uxr_serialize_CREATE_Payload+0x6e>
 8011432:	2b02      	cmp	r3, #2
 8011434:	d1ea      	bne.n	801140c <uxr_serialize_CREATE_Payload+0x44>
 8011436:	68f1      	ldr	r1, [r6, #12]
 8011438:	4638      	mov	r0, r7
 801143a:	f004 fb83 	bl	8015b44 <ucdr_serialize_string>
 801143e:	4004      	ands	r4, r0
 8011440:	e7e4      	b.n	801140c <uxr_serialize_CREATE_Payload+0x44>
 8011442:	7a31      	ldrb	r1, [r6, #8]
 8011444:	4638      	mov	r0, r7
 8011446:	f7f9 f961 	bl	800a70c <ucdr_serialize_uint8_t>
 801144a:	4605      	mov	r5, r0
 801144c:	b158      	cbz	r0, 8011466 <uxr_serialize_CREATE_Payload+0x9e>
 801144e:	7a33      	ldrb	r3, [r6, #8]
 8011450:	2b02      	cmp	r3, #2
 8011452:	d034      	beq.n	80114be <uxr_serialize_CREATE_Payload+0xf6>
 8011454:	2b03      	cmp	r3, #3
 8011456:	d106      	bne.n	8011466 <uxr_serialize_CREATE_Payload+0x9e>
 8011458:	68f2      	ldr	r2, [r6, #12]
 801145a:	f106 0110 	add.w	r1, r6, #16
 801145e:	4638      	mov	r0, r7
 8011460:	f004 fb44 	bl	8015aec <ucdr_serialize_sequence_uint8_t>
 8011464:	4605      	mov	r5, r0
 8011466:	2202      	movs	r2, #2
 8011468:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 801146c:	4638      	mov	r0, r7
 801146e:	f004 fa49 	bl	8015904 <ucdr_serialize_array_uint8_t>
 8011472:	4028      	ands	r0, r5
 8011474:	4004      	ands	r4, r0
 8011476:	e7c9      	b.n	801140c <uxr_serialize_CREATE_Payload+0x44>
 8011478:	f106 0108 	add.w	r1, r6, #8
 801147c:	4638      	mov	r0, r7
 801147e:	f7ff faa5 	bl	80109cc <uxr_serialize_CLIENT_Representation>
 8011482:	4004      	ands	r4, r0
 8011484:	e7c2      	b.n	801140c <uxr_serialize_CREATE_Payload+0x44>
 8011486:	f106 0108 	add.w	r1, r6, #8
 801148a:	4638      	mov	r0, r7
 801148c:	f7ff fb5a 	bl	8010b44 <uxr_serialize_AGENT_Representation>
 8011490:	4004      	ands	r4, r0
 8011492:	e7bb      	b.n	801140c <uxr_serialize_CREATE_Payload+0x44>
 8011494:	7a31      	ldrb	r1, [r6, #8]
 8011496:	4638      	mov	r0, r7
 8011498:	f7f9 f938 	bl	800a70c <ucdr_serialize_uint8_t>
 801149c:	4605      	mov	r5, r0
 801149e:	b130      	cbz	r0, 80114ae <uxr_serialize_CREATE_Payload+0xe6>
 80114a0:	7a33      	ldrb	r3, [r6, #8]
 80114a2:	2b02      	cmp	r3, #2
 80114a4:	d011      	beq.n	80114ca <uxr_serialize_CREATE_Payload+0x102>
 80114a6:	2b03      	cmp	r3, #3
 80114a8:	d015      	beq.n	80114d6 <uxr_serialize_CREATE_Payload+0x10e>
 80114aa:	2b01      	cmp	r3, #1
 80114ac:	d00d      	beq.n	80114ca <uxr_serialize_CREATE_Payload+0x102>
 80114ae:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 80114b2:	4638      	mov	r0, r7
 80114b4:	f7f9 fe66 	bl	800b184 <ucdr_serialize_int16_t>
 80114b8:	4028      	ands	r0, r5
 80114ba:	4004      	ands	r4, r0
 80114bc:	e7a6      	b.n	801140c <uxr_serialize_CREATE_Payload+0x44>
 80114be:	68f1      	ldr	r1, [r6, #12]
 80114c0:	4638      	mov	r0, r7
 80114c2:	f004 fb3f 	bl	8015b44 <ucdr_serialize_string>
 80114c6:	4605      	mov	r5, r0
 80114c8:	e7cd      	b.n	8011466 <uxr_serialize_CREATE_Payload+0x9e>
 80114ca:	68f1      	ldr	r1, [r6, #12]
 80114cc:	4638      	mov	r0, r7
 80114ce:	f004 fb39 	bl	8015b44 <ucdr_serialize_string>
 80114d2:	4605      	mov	r5, r0
 80114d4:	e7eb      	b.n	80114ae <uxr_serialize_CREATE_Payload+0xe6>
 80114d6:	68f2      	ldr	r2, [r6, #12]
 80114d8:	f106 0110 	add.w	r1, r6, #16
 80114dc:	4638      	mov	r0, r7
 80114de:	f004 fb05 	bl	8015aec <ucdr_serialize_sequence_uint8_t>
 80114e2:	4605      	mov	r5, r0
 80114e4:	e7e3      	b.n	80114ae <uxr_serialize_CREATE_Payload+0xe6>
 80114e6:	bf00      	nop

080114e8 <uxr_deserialize_GET_INFO_Payload>:
 80114e8:	b570      	push	{r4, r5, r6, lr}
 80114ea:	2202      	movs	r2, #2
 80114ec:	4605      	mov	r5, r0
 80114ee:	460e      	mov	r6, r1
 80114f0:	f004 fa6c 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 80114f4:	2202      	movs	r2, #2
 80114f6:	18b1      	adds	r1, r6, r2
 80114f8:	4604      	mov	r4, r0
 80114fa:	4628      	mov	r0, r5
 80114fc:	f004 fa66 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 8011500:	1d31      	adds	r1, r6, #4
 8011502:	4004      	ands	r4, r0
 8011504:	4628      	mov	r0, r5
 8011506:	f7f9 fc47 	bl	800ad98 <ucdr_deserialize_uint32_t>
 801150a:	b2e4      	uxtb	r4, r4
 801150c:	4020      	ands	r0, r4
 801150e:	bd70      	pop	{r4, r5, r6, pc}

08011510 <uxr_serialize_DELETE_Payload>:
 8011510:	b570      	push	{r4, r5, r6, lr}
 8011512:	2202      	movs	r2, #2
 8011514:	4605      	mov	r5, r0
 8011516:	460e      	mov	r6, r1
 8011518:	f004 f9f4 	bl	8015904 <ucdr_serialize_array_uint8_t>
 801151c:	2202      	movs	r2, #2
 801151e:	4604      	mov	r4, r0
 8011520:	18b1      	adds	r1, r6, r2
 8011522:	4628      	mov	r0, r5
 8011524:	f004 f9ee 	bl	8015904 <ucdr_serialize_array_uint8_t>
 8011528:	4020      	ands	r0, r4
 801152a:	b2c0      	uxtb	r0, r0
 801152c:	bd70      	pop	{r4, r5, r6, pc}
 801152e:	bf00      	nop

08011530 <uxr_deserialize_STATUS_AGENT_Payload>:
 8011530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011534:	4605      	mov	r5, r0
 8011536:	460e      	mov	r6, r1
 8011538:	f7f9 f8fe 	bl	800a738 <ucdr_deserialize_uint8_t>
 801153c:	1c71      	adds	r1, r6, #1
 801153e:	4604      	mov	r4, r0
 8011540:	4628      	mov	r0, r5
 8011542:	f7f9 f8f9 	bl	800a738 <ucdr_deserialize_uint8_t>
 8011546:	2204      	movs	r2, #4
 8011548:	18b1      	adds	r1, r6, r2
 801154a:	4680      	mov	r8, r0
 801154c:	4628      	mov	r0, r5
 801154e:	f004 fa3d 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 8011552:	f106 0108 	add.w	r1, r6, #8
 8011556:	4607      	mov	r7, r0
 8011558:	2202      	movs	r2, #2
 801155a:	4628      	mov	r0, r5
 801155c:	f004 fa36 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 8011560:	ea04 0308 	and.w	r3, r4, r8
 8011564:	b2db      	uxtb	r3, r3
 8011566:	ea03 0407 	and.w	r4, r3, r7
 801156a:	2202      	movs	r2, #2
 801156c:	4607      	mov	r7, r0
 801156e:	f106 010a 	add.w	r1, r6, #10
 8011572:	4628      	mov	r0, r5
 8011574:	f004 fa2a 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 8011578:	f106 010c 	add.w	r1, r6, #12
 801157c:	4603      	mov	r3, r0
 801157e:	4628      	mov	r0, r5
 8011580:	461d      	mov	r5, r3
 8011582:	f7f9 f8ab 	bl	800a6dc <ucdr_deserialize_bool>
 8011586:	403c      	ands	r4, r7
 8011588:	4025      	ands	r5, r4
 801158a:	4028      	ands	r0, r5
 801158c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011590 <uxr_deserialize_STATUS_Payload>:
 8011590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011594:	2202      	movs	r2, #2
 8011596:	4606      	mov	r6, r0
 8011598:	460f      	mov	r7, r1
 801159a:	f004 fa17 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 801159e:	2202      	movs	r2, #2
 80115a0:	18b9      	adds	r1, r7, r2
 80115a2:	4605      	mov	r5, r0
 80115a4:	4630      	mov	r0, r6
 80115a6:	f004 fa11 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 80115aa:	1d39      	adds	r1, r7, #4
 80115ac:	4680      	mov	r8, r0
 80115ae:	4630      	mov	r0, r6
 80115b0:	f7f9 f8c2 	bl	800a738 <ucdr_deserialize_uint8_t>
 80115b4:	1d79      	adds	r1, r7, #5
 80115b6:	4604      	mov	r4, r0
 80115b8:	4630      	mov	r0, r6
 80115ba:	f7f9 f8bd 	bl	800a738 <ucdr_deserialize_uint8_t>
 80115be:	ea05 0508 	and.w	r5, r5, r8
 80115c2:	402c      	ands	r4, r5
 80115c4:	4020      	ands	r0, r4
 80115c6:	b2c0      	uxtb	r0, r0
 80115c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080115cc <uxr_serialize_INFO_Payload>:
 80115cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115d0:	2202      	movs	r2, #2
 80115d2:	460c      	mov	r4, r1
 80115d4:	4605      	mov	r5, r0
 80115d6:	f004 f995 	bl	8015904 <ucdr_serialize_array_uint8_t>
 80115da:	2202      	movs	r2, #2
 80115dc:	18a1      	adds	r1, r4, r2
 80115de:	4680      	mov	r8, r0
 80115e0:	4628      	mov	r0, r5
 80115e2:	f004 f98f 	bl	8015904 <ucdr_serialize_array_uint8_t>
 80115e6:	7921      	ldrb	r1, [r4, #4]
 80115e8:	4607      	mov	r7, r0
 80115ea:	4628      	mov	r0, r5
 80115ec:	f7f9 f88e 	bl	800a70c <ucdr_serialize_uint8_t>
 80115f0:	7961      	ldrb	r1, [r4, #5]
 80115f2:	4606      	mov	r6, r0
 80115f4:	4628      	mov	r0, r5
 80115f6:	f7f9 f889 	bl	800a70c <ucdr_serialize_uint8_t>
 80115fa:	ea08 0807 	and.w	r8, r8, r7
 80115fe:	ea06 0608 	and.w	r6, r6, r8
 8011602:	4006      	ands	r6, r0
 8011604:	7a21      	ldrb	r1, [r4, #8]
 8011606:	4628      	mov	r0, r5
 8011608:	f7f9 f852 	bl	800a6b0 <ucdr_serialize_bool>
 801160c:	7a23      	ldrb	r3, [r4, #8]
 801160e:	b2f7      	uxtb	r7, r6
 8011610:	4606      	mov	r6, r0
 8011612:	b96b      	cbnz	r3, 8011630 <uxr_serialize_INFO_Payload+0x64>
 8011614:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8011618:	4628      	mov	r0, r5
 801161a:	f7f9 f849 	bl	800a6b0 <ucdr_serialize_bool>
 801161e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8011622:	4030      	ands	r0, r6
 8011624:	b2c6      	uxtb	r6, r0
 8011626:	b983      	cbnz	r3, 801164a <uxr_serialize_INFO_Payload+0x7e>
 8011628:	ea06 0007 	and.w	r0, r6, r7
 801162c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011630:	7b21      	ldrb	r1, [r4, #12]
 8011632:	4628      	mov	r0, r5
 8011634:	f7f9 f86a 	bl	800a70c <ucdr_serialize_uint8_t>
 8011638:	b188      	cbz	r0, 801165e <uxr_serialize_INFO_Payload+0x92>
 801163a:	f104 010c 	add.w	r1, r4, #12
 801163e:	4628      	mov	r0, r5
 8011640:	f7ff faf2 	bl	8010c28 <uxr_serialize_ObjectVariant.part.0>
 8011644:	4030      	ands	r0, r6
 8011646:	b2c6      	uxtb	r6, r0
 8011648:	e7e4      	b.n	8011614 <uxr_serialize_INFO_Payload+0x48>
 801164a:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801164e:	4628      	mov	r0, r5
 8011650:	f7ff fdb2 	bl	80111b8 <uxr_serialize_ActivityInfoVariant>
 8011654:	4006      	ands	r6, r0
 8011656:	ea06 0007 	and.w	r0, r6, r7
 801165a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801165e:	4606      	mov	r6, r0
 8011660:	e7d8      	b.n	8011614 <uxr_serialize_INFO_Payload+0x48>
 8011662:	bf00      	nop

08011664 <uxr_serialize_READ_DATA_Payload>:
 8011664:	b570      	push	{r4, r5, r6, lr}
 8011666:	2202      	movs	r2, #2
 8011668:	4605      	mov	r5, r0
 801166a:	460e      	mov	r6, r1
 801166c:	f004 f94a 	bl	8015904 <ucdr_serialize_array_uint8_t>
 8011670:	2202      	movs	r2, #2
 8011672:	18b1      	adds	r1, r6, r2
 8011674:	4604      	mov	r4, r0
 8011676:	4628      	mov	r0, r5
 8011678:	f004 f944 	bl	8015904 <ucdr_serialize_array_uint8_t>
 801167c:	1d31      	adds	r1, r6, #4
 801167e:	4004      	ands	r4, r0
 8011680:	4628      	mov	r0, r5
 8011682:	f7ff fe5d 	bl	8011340 <uxr_serialize_ReadSpecification>
 8011686:	b2e4      	uxtb	r4, r4
 8011688:	4020      	ands	r0, r4
 801168a:	bd70      	pop	{r4, r5, r6, pc}

0801168c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801168c:	b570      	push	{r4, r5, r6, lr}
 801168e:	2202      	movs	r2, #2
 8011690:	4605      	mov	r5, r0
 8011692:	460e      	mov	r6, r1
 8011694:	f004 f936 	bl	8015904 <ucdr_serialize_array_uint8_t>
 8011698:	2202      	movs	r2, #2
 801169a:	4604      	mov	r4, r0
 801169c:	18b1      	adds	r1, r6, r2
 801169e:	4628      	mov	r0, r5
 80116a0:	f004 f930 	bl	8015904 <ucdr_serialize_array_uint8_t>
 80116a4:	4020      	ands	r0, r4
 80116a6:	b2c0      	uxtb	r0, r0
 80116a8:	bd70      	pop	{r4, r5, r6, pc}
 80116aa:	bf00      	nop

080116ac <uxr_serialize_ACKNACK_Payload>:
 80116ac:	b570      	push	{r4, r5, r6, lr}
 80116ae:	460c      	mov	r4, r1
 80116b0:	460e      	mov	r6, r1
 80116b2:	f834 1b02 	ldrh.w	r1, [r4], #2
 80116b6:	4605      	mov	r5, r0
 80116b8:	f7f9 f854 	bl	800a764 <ucdr_serialize_uint16_t>
 80116bc:	2202      	movs	r2, #2
 80116be:	4621      	mov	r1, r4
 80116c0:	4604      	mov	r4, r0
 80116c2:	4628      	mov	r0, r5
 80116c4:	f004 f91e 	bl	8015904 <ucdr_serialize_array_uint8_t>
 80116c8:	7931      	ldrb	r1, [r6, #4]
 80116ca:	4004      	ands	r4, r0
 80116cc:	4628      	mov	r0, r5
 80116ce:	f7f9 f81d 	bl	800a70c <ucdr_serialize_uint8_t>
 80116d2:	b2e4      	uxtb	r4, r4
 80116d4:	4020      	ands	r0, r4
 80116d6:	bd70      	pop	{r4, r5, r6, pc}

080116d8 <uxr_deserialize_ACKNACK_Payload>:
 80116d8:	b570      	push	{r4, r5, r6, lr}
 80116da:	4605      	mov	r5, r0
 80116dc:	460e      	mov	r6, r1
 80116de:	f7f9 f941 	bl	800a964 <ucdr_deserialize_uint16_t>
 80116e2:	2202      	movs	r2, #2
 80116e4:	18b1      	adds	r1, r6, r2
 80116e6:	4604      	mov	r4, r0
 80116e8:	4628      	mov	r0, r5
 80116ea:	f004 f96f 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 80116ee:	1d31      	adds	r1, r6, #4
 80116f0:	4004      	ands	r4, r0
 80116f2:	4628      	mov	r0, r5
 80116f4:	f7f9 f820 	bl	800a738 <ucdr_deserialize_uint8_t>
 80116f8:	b2e4      	uxtb	r4, r4
 80116fa:	4020      	ands	r0, r4
 80116fc:	bd70      	pop	{r4, r5, r6, pc}
 80116fe:	bf00      	nop

08011700 <uxr_serialize_HEARTBEAT_Payload>:
 8011700:	b570      	push	{r4, r5, r6, lr}
 8011702:	460d      	mov	r5, r1
 8011704:	8809      	ldrh	r1, [r1, #0]
 8011706:	4606      	mov	r6, r0
 8011708:	f7f9 f82c 	bl	800a764 <ucdr_serialize_uint16_t>
 801170c:	8869      	ldrh	r1, [r5, #2]
 801170e:	4604      	mov	r4, r0
 8011710:	4630      	mov	r0, r6
 8011712:	f7f9 f827 	bl	800a764 <ucdr_serialize_uint16_t>
 8011716:	7929      	ldrb	r1, [r5, #4]
 8011718:	4004      	ands	r4, r0
 801171a:	4630      	mov	r0, r6
 801171c:	f7f8 fff6 	bl	800a70c <ucdr_serialize_uint8_t>
 8011720:	b2e4      	uxtb	r4, r4
 8011722:	4020      	ands	r0, r4
 8011724:	bd70      	pop	{r4, r5, r6, pc}
 8011726:	bf00      	nop

08011728 <uxr_deserialize_HEARTBEAT_Payload>:
 8011728:	b570      	push	{r4, r5, r6, lr}
 801172a:	4605      	mov	r5, r0
 801172c:	460e      	mov	r6, r1
 801172e:	f7f9 f919 	bl	800a964 <ucdr_deserialize_uint16_t>
 8011732:	1cb1      	adds	r1, r6, #2
 8011734:	4604      	mov	r4, r0
 8011736:	4628      	mov	r0, r5
 8011738:	f7f9 f914 	bl	800a964 <ucdr_deserialize_uint16_t>
 801173c:	1d31      	adds	r1, r6, #4
 801173e:	4004      	ands	r4, r0
 8011740:	4628      	mov	r0, r5
 8011742:	f7f8 fff9 	bl	800a738 <ucdr_deserialize_uint8_t>
 8011746:	b2e4      	uxtb	r4, r4
 8011748:	4020      	ands	r0, r4
 801174a:	bd70      	pop	{r4, r5, r6, pc}

0801174c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801174c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011750:	4605      	mov	r5, r0
 8011752:	460e      	mov	r6, r1
 8011754:	f7f9 fea2 	bl	800b49c <ucdr_deserialize_int32_t>
 8011758:	1d31      	adds	r1, r6, #4
 801175a:	4607      	mov	r7, r0
 801175c:	4628      	mov	r0, r5
 801175e:	f7f9 fb1b 	bl	800ad98 <ucdr_deserialize_uint32_t>
 8011762:	f106 0108 	add.w	r1, r6, #8
 8011766:	4680      	mov	r8, r0
 8011768:	4628      	mov	r0, r5
 801176a:	f7f9 fe97 	bl	800b49c <ucdr_deserialize_int32_t>
 801176e:	f106 010c 	add.w	r1, r6, #12
 8011772:	4604      	mov	r4, r0
 8011774:	4628      	mov	r0, r5
 8011776:	f7f9 fb0f 	bl	800ad98 <ucdr_deserialize_uint32_t>
 801177a:	ea07 0708 	and.w	r7, r7, r8
 801177e:	403c      	ands	r4, r7
 8011780:	f106 0110 	add.w	r1, r6, #16
 8011784:	4004      	ands	r4, r0
 8011786:	4628      	mov	r0, r5
 8011788:	f7f9 fe88 	bl	800b49c <ucdr_deserialize_int32_t>
 801178c:	f106 0114 	add.w	r1, r6, #20
 8011790:	4607      	mov	r7, r0
 8011792:	4628      	mov	r0, r5
 8011794:	f7f9 fb00 	bl	800ad98 <ucdr_deserialize_uint32_t>
 8011798:	b2e4      	uxtb	r4, r4
 801179a:	403c      	ands	r4, r7
 801179c:	4020      	ands	r0, r4
 801179e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117a2:	bf00      	nop

080117a4 <uxr_serialize_SampleIdentity>:
 80117a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117a8:	220c      	movs	r2, #12
 80117aa:	4604      	mov	r4, r0
 80117ac:	460d      	mov	r5, r1
 80117ae:	f004 f8a9 	bl	8015904 <ucdr_serialize_array_uint8_t>
 80117b2:	2203      	movs	r2, #3
 80117b4:	f105 010c 	add.w	r1, r5, #12
 80117b8:	4607      	mov	r7, r0
 80117ba:	4620      	mov	r0, r4
 80117bc:	f004 f8a2 	bl	8015904 <ucdr_serialize_array_uint8_t>
 80117c0:	7be9      	ldrb	r1, [r5, #15]
 80117c2:	4680      	mov	r8, r0
 80117c4:	4620      	mov	r0, r4
 80117c6:	f7f8 ffa1 	bl	800a70c <ucdr_serialize_uint8_t>
 80117ca:	6929      	ldr	r1, [r5, #16]
 80117cc:	4606      	mov	r6, r0
 80117ce:	4620      	mov	r0, r4
 80117d0:	f7f9 fdcc 	bl	800b36c <ucdr_serialize_int32_t>
 80117d4:	6969      	ldr	r1, [r5, #20]
 80117d6:	4603      	mov	r3, r0
 80117d8:	4620      	mov	r0, r4
 80117da:	ea07 0708 	and.w	r7, r7, r8
 80117de:	461c      	mov	r4, r3
 80117e0:	f7f9 f9aa 	bl	800ab38 <ucdr_serialize_uint32_t>
 80117e4:	403e      	ands	r6, r7
 80117e6:	4034      	ands	r4, r6
 80117e8:	4020      	ands	r0, r4
 80117ea:	b2c0      	uxtb	r0, r0
 80117ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080117f0 <uxr_deserialize_SampleIdentity>:
 80117f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117f4:	220c      	movs	r2, #12
 80117f6:	4604      	mov	r4, r0
 80117f8:	460d      	mov	r5, r1
 80117fa:	f004 f8e7 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 80117fe:	2203      	movs	r2, #3
 8011800:	f105 010c 	add.w	r1, r5, #12
 8011804:	4607      	mov	r7, r0
 8011806:	4620      	mov	r0, r4
 8011808:	f004 f8e0 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 801180c:	f105 010f 	add.w	r1, r5, #15
 8011810:	4680      	mov	r8, r0
 8011812:	4620      	mov	r0, r4
 8011814:	f7f8 ff90 	bl	800a738 <ucdr_deserialize_uint8_t>
 8011818:	f105 0110 	add.w	r1, r5, #16
 801181c:	4606      	mov	r6, r0
 801181e:	4620      	mov	r0, r4
 8011820:	f7f9 fe3c 	bl	800b49c <ucdr_deserialize_int32_t>
 8011824:	f105 0114 	add.w	r1, r5, #20
 8011828:	4603      	mov	r3, r0
 801182a:	4620      	mov	r0, r4
 801182c:	ea07 0708 	and.w	r7, r7, r8
 8011830:	461c      	mov	r4, r3
 8011832:	f7f9 fab1 	bl	800ad98 <ucdr_deserialize_uint32_t>
 8011836:	403e      	ands	r6, r7
 8011838:	4034      	ands	r4, r6
 801183a:	4020      	ands	r0, r4
 801183c:	b2c0      	uxtb	r0, r0
 801183e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011842:	bf00      	nop

08011844 <rcl_client_get_rmw_handle>:
 8011844:	b118      	cbz	r0, 801184e <rcl_client_get_rmw_handle+0xa>
 8011846:	6800      	ldr	r0, [r0, #0]
 8011848:	b108      	cbz	r0, 801184e <rcl_client_get_rmw_handle+0xa>
 801184a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801184e:	4770      	bx	lr

08011850 <rcl_send_request>:
 8011850:	b570      	push	{r4, r5, r6, lr}
 8011852:	b082      	sub	sp, #8
 8011854:	b1e8      	cbz	r0, 8011892 <rcl_send_request+0x42>
 8011856:	4604      	mov	r4, r0
 8011858:	6800      	ldr	r0, [r0, #0]
 801185a:	b1d0      	cbz	r0, 8011892 <rcl_send_request+0x42>
 801185c:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8011860:	b1bb      	cbz	r3, 8011892 <rcl_send_request+0x42>
 8011862:	460e      	mov	r6, r1
 8011864:	b1d1      	cbz	r1, 801189c <rcl_send_request+0x4c>
 8011866:	4615      	mov	r5, r2
 8011868:	b1c2      	cbz	r2, 801189c <rcl_send_request+0x4c>
 801186a:	2105      	movs	r1, #5
 801186c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011870:	f002 fda6 	bl	80143c0 <__atomic_load_8>
 8011874:	6823      	ldr	r3, [r4, #0]
 8011876:	e9c5 0100 	strd	r0, r1, [r5]
 801187a:	462a      	mov	r2, r5
 801187c:	4631      	mov	r1, r6
 801187e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011882:	f003 fc91 	bl	80151a8 <rmw_send_request>
 8011886:	4606      	mov	r6, r0
 8011888:	b160      	cbz	r0, 80118a4 <rcl_send_request+0x54>
 801188a:	2601      	movs	r6, #1
 801188c:	4630      	mov	r0, r6
 801188e:	b002      	add	sp, #8
 8011890:	bd70      	pop	{r4, r5, r6, pc}
 8011892:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8011896:	4630      	mov	r0, r6
 8011898:	b002      	add	sp, #8
 801189a:	bd70      	pop	{r4, r5, r6, pc}
 801189c:	260b      	movs	r6, #11
 801189e:	4630      	mov	r0, r6
 80118a0:	b002      	add	sp, #8
 80118a2:	bd70      	pop	{r4, r5, r6, pc}
 80118a4:	6820      	ldr	r0, [r4, #0]
 80118a6:	2105      	movs	r1, #5
 80118a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80118ac:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80118b0:	9100      	str	r1, [sp, #0]
 80118b2:	f002 fdf1 	bl	8014498 <__atomic_exchange_8>
 80118b6:	4630      	mov	r0, r6
 80118b8:	b002      	add	sp, #8
 80118ba:	bd70      	pop	{r4, r5, r6, pc}
 80118bc:	0000      	movs	r0, r0
	...

080118c0 <rcl_take_response>:
 80118c0:	b570      	push	{r4, r5, r6, lr}
 80118c2:	468e      	mov	lr, r1
 80118c4:	460c      	mov	r4, r1
 80118c6:	4616      	mov	r6, r2
 80118c8:	4605      	mov	r5, r0
 80118ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80118ce:	b08c      	sub	sp, #48	@ 0x30
 80118d0:	f10d 0c18 	add.w	ip, sp, #24
 80118d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80118d8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80118dc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80118e0:	b35d      	cbz	r5, 801193a <rcl_take_response+0x7a>
 80118e2:	682b      	ldr	r3, [r5, #0]
 80118e4:	b34b      	cbz	r3, 801193a <rcl_take_response+0x7a>
 80118e6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80118ea:	b330      	cbz	r0, 801193a <rcl_take_response+0x7a>
 80118ec:	b346      	cbz	r6, 8011940 <rcl_take_response+0x80>
 80118ee:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8011948 <rcl_take_response+0x88>
 80118f2:	2300      	movs	r3, #0
 80118f4:	f88d 3007 	strb.w	r3, [sp, #7]
 80118f8:	4632      	mov	r2, r6
 80118fa:	f10d 0307 	add.w	r3, sp, #7
 80118fe:	a902      	add	r1, sp, #8
 8011900:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011904:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011908:	f003 fd56 	bl	80153b8 <rmw_take_response>
 801190c:	4605      	mov	r5, r0
 801190e:	b9c8      	cbnz	r0, 8011944 <rcl_take_response+0x84>
 8011910:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011914:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8011918:	2a00      	cmp	r2, #0
 801191a:	bf08      	it	eq
 801191c:	461d      	moveq	r5, r3
 801191e:	f10d 0e18 	add.w	lr, sp, #24
 8011922:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011926:	46a4      	mov	ip, r4
 8011928:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801192c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011930:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011934:	4628      	mov	r0, r5
 8011936:	b00c      	add	sp, #48	@ 0x30
 8011938:	bd70      	pop	{r4, r5, r6, pc}
 801193a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801193e:	e7ee      	b.n	801191e <rcl_take_response+0x5e>
 8011940:	250b      	movs	r5, #11
 8011942:	e7ec      	b.n	801191e <rcl_take_response+0x5e>
 8011944:	2501      	movs	r5, #1
 8011946:	e7ea      	b.n	801191e <rcl_take_response+0x5e>
	...

08011950 <rcl_client_is_valid>:
 8011950:	b130      	cbz	r0, 8011960 <rcl_client_is_valid+0x10>
 8011952:	6800      	ldr	r0, [r0, #0]
 8011954:	b120      	cbz	r0, 8011960 <rcl_client_is_valid+0x10>
 8011956:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801195a:	3800      	subs	r0, #0
 801195c:	bf18      	it	ne
 801195e:	2001      	movne	r0, #1
 8011960:	4770      	bx	lr
 8011962:	bf00      	nop

08011964 <rcl_convert_rmw_ret_to_rcl_ret>:
 8011964:	280b      	cmp	r0, #11
 8011966:	dc0d      	bgt.n	8011984 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8011968:	2800      	cmp	r0, #0
 801196a:	db09      	blt.n	8011980 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801196c:	280b      	cmp	r0, #11
 801196e:	d807      	bhi.n	8011980 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011970:	e8df f000 	tbb	[pc, r0]
 8011974:	07060607 	.word	0x07060607
 8011978:	06060606 	.word	0x06060606
 801197c:	07070606 	.word	0x07070606
 8011980:	2001      	movs	r0, #1
 8011982:	4770      	bx	lr
 8011984:	28cb      	cmp	r0, #203	@ 0xcb
 8011986:	bf18      	it	ne
 8011988:	2001      	movne	r0, #1
 801198a:	4770      	bx	lr

0801198c <rcl_get_zero_initialized_context>:
 801198c:	4a03      	ldr	r2, [pc, #12]	@ (801199c <rcl_get_zero_initialized_context+0x10>)
 801198e:	4603      	mov	r3, r0
 8011990:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011994:	e883 0003 	stmia.w	r3, {r0, r1}
 8011998:	4618      	mov	r0, r3
 801199a:	4770      	bx	lr
 801199c:	08018b0c 	.word	0x08018b0c

080119a0 <rcl_context_is_valid>:
 80119a0:	b118      	cbz	r0, 80119aa <rcl_context_is_valid+0xa>
 80119a2:	6840      	ldr	r0, [r0, #4]
 80119a4:	3800      	subs	r0, #0
 80119a6:	bf18      	it	ne
 80119a8:	2001      	movne	r0, #1
 80119aa:	4770      	bx	lr

080119ac <__cleanup_context>:
 80119ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119b0:	4606      	mov	r6, r0
 80119b2:	6800      	ldr	r0, [r0, #0]
 80119b4:	2300      	movs	r3, #0
 80119b6:	6073      	str	r3, [r6, #4]
 80119b8:	2800      	cmp	r0, #0
 80119ba:	d049      	beq.n	8011a50 <__cleanup_context+0xa4>
 80119bc:	6947      	ldr	r7, [r0, #20]
 80119be:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80119c2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80119c6:	b137      	cbz	r7, 80119d6 <__cleanup_context+0x2a>
 80119c8:	3014      	adds	r0, #20
 80119ca:	f7fa f8b9 	bl	800bb40 <rcl_init_options_fini>
 80119ce:	4607      	mov	r7, r0
 80119d0:	2800      	cmp	r0, #0
 80119d2:	d144      	bne.n	8011a5e <__cleanup_context+0xb2>
 80119d4:	6830      	ldr	r0, [r6, #0]
 80119d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80119d8:	b143      	cbz	r3, 80119ec <__cleanup_context+0x40>
 80119da:	3028      	adds	r0, #40	@ 0x28
 80119dc:	f7fb fc7c 	bl	800d2d8 <rmw_context_fini>
 80119e0:	b118      	cbz	r0, 80119ea <__cleanup_context+0x3e>
 80119e2:	2f00      	cmp	r7, #0
 80119e4:	d03e      	beq.n	8011a64 <__cleanup_context+0xb8>
 80119e6:	f7fb f9af 	bl	800cd48 <rcutils_reset_error>
 80119ea:	6830      	ldr	r0, [r6, #0]
 80119ec:	6a03      	ldr	r3, [r0, #32]
 80119ee:	b1db      	cbz	r3, 8011a28 <__cleanup_context+0x7c>
 80119f0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80119f4:	2a01      	cmp	r2, #1
 80119f6:	f17c 0100 	sbcs.w	r1, ip, #0
 80119fa:	db11      	blt.n	8011a20 <__cleanup_context+0x74>
 80119fc:	2400      	movs	r4, #0
 80119fe:	4625      	mov	r5, r4
 8011a00:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011a04:	4649      	mov	r1, r9
 8011a06:	b1b8      	cbz	r0, 8011a38 <__cleanup_context+0x8c>
 8011a08:	47c0      	blx	r8
 8011a0a:	6833      	ldr	r3, [r6, #0]
 8011a0c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8011a10:	3401      	adds	r4, #1
 8011a12:	f145 0500 	adc.w	r5, r5, #0
 8011a16:	4294      	cmp	r4, r2
 8011a18:	eb75 010c 	sbcs.w	r1, r5, ip
 8011a1c:	6a1b      	ldr	r3, [r3, #32]
 8011a1e:	dbef      	blt.n	8011a00 <__cleanup_context+0x54>
 8011a20:	4618      	mov	r0, r3
 8011a22:	4649      	mov	r1, r9
 8011a24:	47c0      	blx	r8
 8011a26:	6830      	ldr	r0, [r6, #0]
 8011a28:	4649      	mov	r1, r9
 8011a2a:	47c0      	blx	r8
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	e9c6 3300 	strd	r3, r3, [r6]
 8011a32:	4638      	mov	r0, r7
 8011a34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a38:	3401      	adds	r4, #1
 8011a3a:	f145 0500 	adc.w	r5, r5, #0
 8011a3e:	4294      	cmp	r4, r2
 8011a40:	eb75 010c 	sbcs.w	r1, r5, ip
 8011a44:	dbdc      	blt.n	8011a00 <__cleanup_context+0x54>
 8011a46:	4618      	mov	r0, r3
 8011a48:	4649      	mov	r1, r9
 8011a4a:	47c0      	blx	r8
 8011a4c:	6830      	ldr	r0, [r6, #0]
 8011a4e:	e7eb      	b.n	8011a28 <__cleanup_context+0x7c>
 8011a50:	4607      	mov	r7, r0
 8011a52:	2300      	movs	r3, #0
 8011a54:	e9c6 3300 	strd	r3, r3, [r6]
 8011a58:	4638      	mov	r0, r7
 8011a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a5e:	f7fb f973 	bl	800cd48 <rcutils_reset_error>
 8011a62:	e7b7      	b.n	80119d4 <__cleanup_context+0x28>
 8011a64:	f7ff ff7e 	bl	8011964 <rcl_convert_rmw_ret_to_rcl_ret>
 8011a68:	4607      	mov	r7, r0
 8011a6a:	e7bc      	b.n	80119e6 <__cleanup_context+0x3a>

08011a6c <rcl_init>:
 8011a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a70:	1e05      	subs	r5, r0, #0
 8011a72:	b09e      	sub	sp, #120	@ 0x78
 8011a74:	460e      	mov	r6, r1
 8011a76:	4690      	mov	r8, r2
 8011a78:	461f      	mov	r7, r3
 8011a7a:	f340 809c 	ble.w	8011bb6 <rcl_init+0x14a>
 8011a7e:	2900      	cmp	r1, #0
 8011a80:	f000 809c 	beq.w	8011bbc <rcl_init+0x150>
 8011a84:	f1a1 0e04 	sub.w	lr, r1, #4
 8011a88:	f04f 0c00 	mov.w	ip, #0
 8011a8c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8011a90:	f10c 0c01 	add.w	ip, ip, #1
 8011a94:	2c00      	cmp	r4, #0
 8011a96:	f000 8091 	beq.w	8011bbc <rcl_init+0x150>
 8011a9a:	4565      	cmp	r5, ip
 8011a9c:	d1f6      	bne.n	8011a8c <rcl_init+0x20>
 8011a9e:	f1b8 0f00 	cmp.w	r8, #0
 8011aa2:	f000 808b 	beq.w	8011bbc <rcl_init+0x150>
 8011aa6:	f8d8 4000 	ldr.w	r4, [r8]
 8011aaa:	2c00      	cmp	r4, #0
 8011aac:	f000 8086 	beq.w	8011bbc <rcl_init+0x150>
 8011ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011ab2:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8011ab6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011aba:	6823      	ldr	r3, [r4, #0]
 8011abc:	f8cc 3000 	str.w	r3, [ip]
 8011ac0:	a819      	add	r0, sp, #100	@ 0x64
 8011ac2:	f7fb f91b 	bl	800ccfc <rcutils_allocator_is_valid>
 8011ac6:	2800      	cmp	r0, #0
 8011ac8:	d078      	beq.n	8011bbc <rcl_init+0x150>
 8011aca:	2f00      	cmp	r7, #0
 8011acc:	d076      	beq.n	8011bbc <rcl_init+0x150>
 8011ace:	683b      	ldr	r3, [r7, #0]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d178      	bne.n	8011bc6 <rcl_init+0x15a>
 8011ad4:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8011ad8:	2178      	movs	r1, #120	@ 0x78
 8011ada:	2001      	movs	r0, #1
 8011adc:	4798      	blx	r3
 8011ade:	4604      	mov	r4, r0
 8011ae0:	6038      	str	r0, [r7, #0]
 8011ae2:	2800      	cmp	r0, #0
 8011ae4:	f000 80b6 	beq.w	8011c54 <rcl_init+0x1e8>
 8011ae8:	a802      	add	r0, sp, #8
 8011aea:	f002 ffb9 	bl	8014a60 <rmw_get_zero_initialized_context>
 8011aee:	a902      	add	r1, sp, #8
 8011af0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011af4:	2250      	movs	r2, #80	@ 0x50
 8011af6:	ac19      	add	r4, sp, #100	@ 0x64
 8011af8:	f005 fe07 	bl	801770a <memcpy>
 8011afc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011afe:	f8d7 e000 	ldr.w	lr, [r7]
 8011b02:	46f4      	mov	ip, lr
 8011b04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011b08:	6823      	ldr	r3, [r4, #0]
 8011b0a:	f8cc 3000 	str.w	r3, [ip]
 8011b0e:	f10e 0114 	add.w	r1, lr, #20
 8011b12:	4640      	mov	r0, r8
 8011b14:	f7fa f83e 	bl	800bb94 <rcl_init_options_copy>
 8011b18:	4604      	mov	r4, r0
 8011b1a:	2800      	cmp	r0, #0
 8011b1c:	d144      	bne.n	8011ba8 <rcl_init+0x13c>
 8011b1e:	f8d7 9000 	ldr.w	r9, [r7]
 8011b22:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8011b26:	f8c9 0020 	str.w	r0, [r9, #32]
 8011b2a:	f8c9 5018 	str.w	r5, [r9, #24]
 8011b2e:	f8c9 801c 	str.w	r8, [r9, #28]
 8011b32:	2d00      	cmp	r5, #0
 8011b34:	d04e      	beq.n	8011bd4 <rcl_init+0x168>
 8011b36:	2e00      	cmp	r6, #0
 8011b38:	d04c      	beq.n	8011bd4 <rcl_init+0x168>
 8011b3a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8011b3e:	2104      	movs	r1, #4
 8011b40:	4628      	mov	r0, r5
 8011b42:	4798      	blx	r3
 8011b44:	f8c9 0020 	str.w	r0, [r9, #32]
 8011b48:	f8d7 9000 	ldr.w	r9, [r7]
 8011b4c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8011b50:	46ca      	mov	sl, r9
 8011b52:	b343      	cbz	r3, 8011ba6 <rcl_init+0x13a>
 8011b54:	2d01      	cmp	r5, #1
 8011b56:	f178 0300 	sbcs.w	r3, r8, #0
 8011b5a:	db3b      	blt.n	8011bd4 <rcl_init+0x168>
 8011b5c:	2400      	movs	r4, #0
 8011b5e:	3e04      	subs	r6, #4
 8011b60:	46a1      	mov	r9, r4
 8011b62:	e00b      	b.n	8011b7c <rcl_init+0x110>
 8011b64:	6831      	ldr	r1, [r6, #0]
 8011b66:	f005 fdd0 	bl	801770a <memcpy>
 8011b6a:	3401      	adds	r4, #1
 8011b6c:	f149 0900 	adc.w	r9, r9, #0
 8011b70:	45c8      	cmp	r8, r9
 8011b72:	bf08      	it	eq
 8011b74:	42a5      	cmpeq	r5, r4
 8011b76:	d02b      	beq.n	8011bd0 <rcl_init+0x164>
 8011b78:	f8d7 a000 	ldr.w	sl, [r7]
 8011b7c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8011b80:	f7ee fb58 	bl	8000234 <strlen>
 8011b84:	1c42      	adds	r2, r0, #1
 8011b86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011b88:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8011b8a:	f8da a020 	ldr.w	sl, [sl, #32]
 8011b8e:	9201      	str	r2, [sp, #4]
 8011b90:	4610      	mov	r0, r2
 8011b92:	4798      	blx	r3
 8011b94:	683b      	ldr	r3, [r7, #0]
 8011b96:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8011b9a:	6a1b      	ldr	r3, [r3, #32]
 8011b9c:	9a01      	ldr	r2, [sp, #4]
 8011b9e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011ba2:	2800      	cmp	r0, #0
 8011ba4:	d1de      	bne.n	8011b64 <rcl_init+0xf8>
 8011ba6:	240a      	movs	r4, #10
 8011ba8:	4638      	mov	r0, r7
 8011baa:	f7ff feff 	bl	80119ac <__cleanup_context>
 8011bae:	4620      	mov	r0, r4
 8011bb0:	b01e      	add	sp, #120	@ 0x78
 8011bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bb6:	2900      	cmp	r1, #0
 8011bb8:	f43f af71 	beq.w	8011a9e <rcl_init+0x32>
 8011bbc:	240b      	movs	r4, #11
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	b01e      	add	sp, #120	@ 0x78
 8011bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bc6:	2464      	movs	r4, #100	@ 0x64
 8011bc8:	4620      	mov	r0, r4
 8011bca:	b01e      	add	sp, #120	@ 0x78
 8011bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bd0:	f8d7 9000 	ldr.w	r9, [r7]
 8011bd4:	4926      	ldr	r1, [pc, #152]	@ (8011c70 <rcl_init+0x204>)
 8011bd6:	680b      	ldr	r3, [r1, #0]
 8011bd8:	3301      	adds	r3, #1
 8011bda:	d036      	beq.n	8011c4a <rcl_init+0x1de>
 8011bdc:	600b      	str	r3, [r1, #0]
 8011bde:	461a      	mov	r2, r3
 8011be0:	2400      	movs	r4, #0
 8011be2:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8011be6:	607b      	str	r3, [r7, #4]
 8011be8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011bea:	3301      	adds	r3, #1
 8011bec:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8011bf0:	d034      	beq.n	8011c5c <rcl_init+0x1f0>
 8011bf2:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8011bf6:	b93b      	cbnz	r3, 8011c08 <rcl_init+0x19c>
 8011bf8:	3030      	adds	r0, #48	@ 0x30
 8011bfa:	f000 f83b 	bl	8011c74 <rcl_get_localhost_only>
 8011bfe:	4604      	mov	r4, r0
 8011c00:	2800      	cmp	r0, #0
 8011c02:	d1d1      	bne.n	8011ba8 <rcl_init+0x13c>
 8011c04:	683b      	ldr	r3, [r7, #0]
 8011c06:	6958      	ldr	r0, [r3, #20]
 8011c08:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8011c0a:	aa18      	add	r2, sp, #96	@ 0x60
 8011c0c:	a917      	add	r1, sp, #92	@ 0x5c
 8011c0e:	f001 f871 	bl	8012cf4 <rcl_validate_enclave_name>
 8011c12:	4604      	mov	r4, r0
 8011c14:	2800      	cmp	r0, #0
 8011c16:	d1c7      	bne.n	8011ba8 <rcl_init+0x13c>
 8011c18:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011c1a:	b9eb      	cbnz	r3, 8011c58 <rcl_init+0x1ec>
 8011c1c:	6839      	ldr	r1, [r7, #0]
 8011c1e:	694b      	ldr	r3, [r1, #20]
 8011c20:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8011c22:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8011c26:	f000 fb3f 	bl	80122a8 <rcl_get_security_options_from_environment>
 8011c2a:	4604      	mov	r4, r0
 8011c2c:	2800      	cmp	r0, #0
 8011c2e:	d1bb      	bne.n	8011ba8 <rcl_init+0x13c>
 8011c30:	6839      	ldr	r1, [r7, #0]
 8011c32:	6948      	ldr	r0, [r1, #20]
 8011c34:	3128      	adds	r1, #40	@ 0x28
 8011c36:	3018      	adds	r0, #24
 8011c38:	f7fb fa18 	bl	800d06c <rmw_init>
 8011c3c:	4604      	mov	r4, r0
 8011c3e:	2800      	cmp	r0, #0
 8011c40:	d0bd      	beq.n	8011bbe <rcl_init+0x152>
 8011c42:	f7ff fe8f 	bl	8011964 <rcl_convert_rmw_ret_to_rcl_ret>
 8011c46:	4604      	mov	r4, r0
 8011c48:	e7ae      	b.n	8011ba8 <rcl_init+0x13c>
 8011c4a:	2201      	movs	r2, #1
 8011c4c:	461c      	mov	r4, r3
 8011c4e:	600a      	str	r2, [r1, #0]
 8011c50:	4613      	mov	r3, r2
 8011c52:	e7c6      	b.n	8011be2 <rcl_init+0x176>
 8011c54:	240a      	movs	r4, #10
 8011c56:	e7b2      	b.n	8011bbe <rcl_init+0x152>
 8011c58:	2401      	movs	r4, #1
 8011c5a:	e7a5      	b.n	8011ba8 <rcl_init+0x13c>
 8011c5c:	3024      	adds	r0, #36	@ 0x24
 8011c5e:	f004 fcf1 	bl	8016644 <rcl_get_default_domain_id>
 8011c62:	4604      	mov	r4, r0
 8011c64:	2800      	cmp	r0, #0
 8011c66:	d19f      	bne.n	8011ba8 <rcl_init+0x13c>
 8011c68:	683b      	ldr	r3, [r7, #0]
 8011c6a:	6958      	ldr	r0, [r3, #20]
 8011c6c:	e7c1      	b.n	8011bf2 <rcl_init+0x186>
 8011c6e:	bf00      	nop
 8011c70:	2000ae70 	.word	0x2000ae70

08011c74 <rcl_get_localhost_only>:
 8011c74:	b510      	push	{r4, lr}
 8011c76:	b082      	sub	sp, #8
 8011c78:	2300      	movs	r3, #0
 8011c7a:	9301      	str	r3, [sp, #4]
 8011c7c:	b1b8      	cbz	r0, 8011cae <rcl_get_localhost_only+0x3a>
 8011c7e:	4604      	mov	r4, r0
 8011c80:	a901      	add	r1, sp, #4
 8011c82:	480c      	ldr	r0, [pc, #48]	@ (8011cb4 <rcl_get_localhost_only+0x40>)
 8011c84:	f002 fc40 	bl	8014508 <rcutils_get_env>
 8011c88:	b110      	cbz	r0, 8011c90 <rcl_get_localhost_only+0x1c>
 8011c8a:	2001      	movs	r0, #1
 8011c8c:	b002      	add	sp, #8
 8011c8e:	bd10      	pop	{r4, pc}
 8011c90:	9b01      	ldr	r3, [sp, #4]
 8011c92:	b113      	cbz	r3, 8011c9a <rcl_get_localhost_only+0x26>
 8011c94:	781a      	ldrb	r2, [r3, #0]
 8011c96:	2a31      	cmp	r2, #49	@ 0x31
 8011c98:	d004      	beq.n	8011ca4 <rcl_get_localhost_only+0x30>
 8011c9a:	2302      	movs	r3, #2
 8011c9c:	2000      	movs	r0, #0
 8011c9e:	7023      	strb	r3, [r4, #0]
 8011ca0:	b002      	add	sp, #8
 8011ca2:	bd10      	pop	{r4, pc}
 8011ca4:	785b      	ldrb	r3, [r3, #1]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d1f7      	bne.n	8011c9a <rcl_get_localhost_only+0x26>
 8011caa:	2301      	movs	r3, #1
 8011cac:	e7f6      	b.n	8011c9c <rcl_get_localhost_only+0x28>
 8011cae:	200b      	movs	r0, #11
 8011cb0:	b002      	add	sp, #8
 8011cb2:	bd10      	pop	{r4, pc}
 8011cb4:	08018b14 	.word	0x08018b14

08011cb8 <rcl_get_zero_initialized_node>:
 8011cb8:	4a03      	ldr	r2, [pc, #12]	@ (8011cc8 <rcl_get_zero_initialized_node+0x10>)
 8011cba:	4603      	mov	r3, r0
 8011cbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011cc0:	e883 0003 	stmia.w	r3, {r0, r1}
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	4770      	bx	lr
 8011cc8:	08018b30 	.word	0x08018b30

08011ccc <rcl_node_init>:
 8011ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cd0:	b0a9      	sub	sp, #164	@ 0xa4
 8011cd2:	4604      	mov	r4, r0
 8011cd4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8011cd8:	a823      	add	r0, sp, #140	@ 0x8c
 8011cda:	460e      	mov	r6, r1
 8011cdc:	4615      	mov	r5, r2
 8011cde:	461f      	mov	r7, r3
 8011ce0:	f004 ff24 	bl	8016b2c <rcl_guard_condition_get_default_options>
 8011ce4:	f1b8 0f00 	cmp.w	r8, #0
 8011ce8:	f000 80e6 	beq.w	8011eb8 <rcl_node_init+0x1ec>
 8011cec:	4640      	mov	r0, r8
 8011cee:	f7fb f805 	bl	800ccfc <rcutils_allocator_is_valid>
 8011cf2:	2800      	cmp	r0, #0
 8011cf4:	f000 80e0 	beq.w	8011eb8 <rcl_node_init+0x1ec>
 8011cf8:	2e00      	cmp	r6, #0
 8011cfa:	f000 80dd 	beq.w	8011eb8 <rcl_node_init+0x1ec>
 8011cfe:	2d00      	cmp	r5, #0
 8011d00:	f000 80da 	beq.w	8011eb8 <rcl_node_init+0x1ec>
 8011d04:	2c00      	cmp	r4, #0
 8011d06:	f000 80d7 	beq.w	8011eb8 <rcl_node_init+0x1ec>
 8011d0a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011d0e:	f1b9 0f00 	cmp.w	r9, #0
 8011d12:	f040 80fd 	bne.w	8011f10 <rcl_node_init+0x244>
 8011d16:	2f00      	cmp	r7, #0
 8011d18:	f000 80ce 	beq.w	8011eb8 <rcl_node_init+0x1ec>
 8011d1c:	4638      	mov	r0, r7
 8011d1e:	f7ff fe3f 	bl	80119a0 <rcl_context_is_valid>
 8011d22:	4682      	mov	sl, r0
 8011d24:	2800      	cmp	r0, #0
 8011d26:	f000 80cd 	beq.w	8011ec4 <rcl_node_init+0x1f8>
 8011d2a:	464a      	mov	r2, r9
 8011d2c:	a922      	add	r1, sp, #136	@ 0x88
 8011d2e:	4630      	mov	r0, r6
 8011d30:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8011d34:	f003 f812 	bl	8014d5c <rmw_validate_node_name>
 8011d38:	4681      	mov	r9, r0
 8011d3a:	2800      	cmp	r0, #0
 8011d3c:	f040 80be 	bne.w	8011ebc <rcl_node_init+0x1f0>
 8011d40:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8011d42:	2800      	cmp	r0, #0
 8011d44:	f040 80f0 	bne.w	8011f28 <rcl_node_init+0x25c>
 8011d48:	4628      	mov	r0, r5
 8011d4a:	f7ee fa73 	bl	8000234 <strlen>
 8011d4e:	2800      	cmp	r0, #0
 8011d50:	f040 80bb 	bne.w	8011eca <rcl_node_init+0x1fe>
 8011d54:	4d7c      	ldr	r5, [pc, #496]	@ (8011f48 <rcl_node_init+0x27c>)
 8011d56:	a922      	add	r1, sp, #136	@ 0x88
 8011d58:	2200      	movs	r2, #0
 8011d5a:	4628      	mov	r0, r5
 8011d5c:	f002 ffe0 	bl	8014d20 <rmw_validate_namespace>
 8011d60:	4681      	mov	r9, r0
 8011d62:	2800      	cmp	r0, #0
 8011d64:	f040 80aa 	bne.w	8011ebc <rcl_node_init+0x1f0>
 8011d68:	4682      	mov	sl, r0
 8011d6a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8011d6c:	2800      	cmp	r0, #0
 8011d6e:	f040 80e0 	bne.w	8011f32 <rcl_node_init+0x266>
 8011d72:	f8d8 3000 	ldr.w	r3, [r8]
 8011d76:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011d7a:	2078      	movs	r0, #120	@ 0x78
 8011d7c:	4798      	blx	r3
 8011d7e:	4681      	mov	r9, r0
 8011d80:	6060      	str	r0, [r4, #4]
 8011d82:	2800      	cmp	r0, #0
 8011d84:	f000 80ca 	beq.w	8011f1c <rcl_node_init+0x250>
 8011d88:	2200      	movs	r2, #0
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8011d90:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8011d94:	a808      	add	r0, sp, #32
 8011d96:	f000 f907 	bl	8011fa8 <rcl_node_get_default_options>
 8011d9a:	a908      	add	r1, sp, #32
 8011d9c:	4648      	mov	r0, r9
 8011d9e:	2268      	movs	r2, #104	@ 0x68
 8011da0:	f005 fcb3 	bl	801770a <memcpy>
 8011da4:	6861      	ldr	r1, [r4, #4]
 8011da6:	6027      	str	r7, [r4, #0]
 8011da8:	4640      	mov	r0, r8
 8011daa:	f000 f90b 	bl	8011fc4 <rcl_node_options_copy>
 8011dae:	2800      	cmp	r0, #0
 8011db0:	d158      	bne.n	8011e64 <rcl_node_init+0x198>
 8011db2:	4628      	mov	r0, r5
 8011db4:	f7ee fa3e 	bl	8000234 <strlen>
 8011db8:	4428      	add	r0, r5
 8011dba:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8011dbe:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8011dc2:	2b2f      	cmp	r3, #47	@ 0x2f
 8011dc4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011dc8:	9300      	str	r3, [sp, #0]
 8011dca:	bf0c      	ite	eq
 8011dcc:	4b5f      	ldreq	r3, [pc, #380]	@ (8011f4c <rcl_node_init+0x280>)
 8011dce:	4b60      	ldrne	r3, [pc, #384]	@ (8011f50 <rcl_node_init+0x284>)
 8011dd0:	9302      	str	r3, [sp, #8]
 8011dd2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011dd6:	9301      	str	r3, [sp, #4]
 8011dd8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8011ddc:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011de0:	f002 fbba 	bl	8014558 <rcutils_format_string_limit>
 8011de4:	6823      	ldr	r3, [r4, #0]
 8011de6:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8011dea:	6818      	ldr	r0, [r3, #0]
 8011dec:	4631      	mov	r1, r6
 8011dee:	3028      	adds	r0, #40	@ 0x28
 8011df0:	462a      	mov	r2, r5
 8011df2:	6866      	ldr	r6, [r4, #4]
 8011df4:	f7fb fb1c 	bl	800d430 <rmw_create_node>
 8011df8:	6863      	ldr	r3, [r4, #4]
 8011dfa:	66b0      	str	r0, [r6, #104]	@ 0x68
 8011dfc:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8011dfe:	2800      	cmp	r0, #0
 8011e00:	d032      	beq.n	8011e68 <rcl_node_init+0x19c>
 8011e02:	f7fb fba9 	bl	800d558 <rmw_node_get_graph_guard_condition>
 8011e06:	4681      	mov	r9, r0
 8011e08:	b360      	cbz	r0, 8011e64 <rcl_node_init+0x198>
 8011e0a:	f8d8 3000 	ldr.w	r3, [r8]
 8011e0e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011e12:	6866      	ldr	r6, [r4, #4]
 8011e14:	2008      	movs	r0, #8
 8011e16:	4798      	blx	r3
 8011e18:	6863      	ldr	r3, [r4, #4]
 8011e1a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8011e1c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8011e20:	f1bb 0f00 	cmp.w	fp, #0
 8011e24:	d020      	beq.n	8011e68 <rcl_node_init+0x19c>
 8011e26:	a806      	add	r0, sp, #24
 8011e28:	f004 fda4 	bl	8016974 <rcl_get_zero_initialized_guard_condition>
 8011e2c:	a806      	add	r0, sp, #24
 8011e2e:	c803      	ldmia	r0, {r0, r1}
 8011e30:	6863      	ldr	r3, [r4, #4]
 8011e32:	46c4      	mov	ip, r8
 8011e34:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8011e38:	e88b 0003 	stmia.w	fp, {r0, r1}
 8011e3c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011e40:	ae23      	add	r6, sp, #140	@ 0x8c
 8011e42:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011e44:	f8dc 3000 	ldr.w	r3, [ip]
 8011e48:	6033      	str	r3, [r6, #0]
 8011e4a:	ab28      	add	r3, sp, #160	@ 0xa0
 8011e4c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8011e50:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011e54:	4649      	mov	r1, r9
 8011e56:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011e58:	463a      	mov	r2, r7
 8011e5a:	4670      	mov	r0, lr
 8011e5c:	f004 fde0 	bl	8016a20 <rcl_guard_condition_init_from_rmw>
 8011e60:	4681      	mov	r9, r0
 8011e62:	b328      	cbz	r0, 8011eb0 <rcl_node_init+0x1e4>
 8011e64:	6863      	ldr	r3, [r4, #4]
 8011e66:	b1f3      	cbz	r3, 8011ea6 <rcl_node_init+0x1da>
 8011e68:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8011e6a:	b128      	cbz	r0, 8011e78 <rcl_node_init+0x1ac>
 8011e6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011e70:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011e74:	4798      	blx	r3
 8011e76:	6863      	ldr	r3, [r4, #4]
 8011e78:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8011e7a:	b110      	cbz	r0, 8011e82 <rcl_node_init+0x1b6>
 8011e7c:	f7fb faf0 	bl	800d460 <rmw_destroy_node>
 8011e80:	6863      	ldr	r3, [r4, #4]
 8011e82:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8011e84:	b148      	cbz	r0, 8011e9a <rcl_node_init+0x1ce>
 8011e86:	f004 fe2b 	bl	8016ae0 <rcl_guard_condition_fini>
 8011e8a:	6863      	ldr	r3, [r4, #4]
 8011e8c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011e90:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8011e92:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011e96:	4798      	blx	r3
 8011e98:	6863      	ldr	r3, [r4, #4]
 8011e9a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011ea4:	4798      	blx	r3
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	e9c4 3300 	strd	r3, r3, [r4]
 8011eac:	f04f 0901 	mov.w	r9, #1
 8011eb0:	f1ba 0f00 	cmp.w	sl, #0
 8011eb4:	d125      	bne.n	8011f02 <rcl_node_init+0x236>
 8011eb6:	e001      	b.n	8011ebc <rcl_node_init+0x1f0>
 8011eb8:	f04f 090b 	mov.w	r9, #11
 8011ebc:	4648      	mov	r0, r9
 8011ebe:	b029      	add	sp, #164	@ 0xa4
 8011ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ec4:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8011ec8:	e7f8      	b.n	8011ebc <rcl_node_init+0x1f0>
 8011eca:	782b      	ldrb	r3, [r5, #0]
 8011ecc:	2b2f      	cmp	r3, #47	@ 0x2f
 8011ece:	f43f af42 	beq.w	8011d56 <rcl_node_init+0x8a>
 8011ed2:	9503      	str	r5, [sp, #12]
 8011ed4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011ed8:	9300      	str	r3, [sp, #0]
 8011eda:	4b1e      	ldr	r3, [pc, #120]	@ (8011f54 <rcl_node_init+0x288>)
 8011edc:	9302      	str	r3, [sp, #8]
 8011ede:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011ee2:	9301      	str	r3, [sp, #4]
 8011ee4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8011ee8:	f002 fb36 	bl	8014558 <rcutils_format_string_limit>
 8011eec:	4605      	mov	r5, r0
 8011eee:	b340      	cbz	r0, 8011f42 <rcl_node_init+0x276>
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	a922      	add	r1, sp, #136	@ 0x88
 8011ef4:	9222      	str	r2, [sp, #136]	@ 0x88
 8011ef6:	f002 ff13 	bl	8014d20 <rmw_validate_namespace>
 8011efa:	4681      	mov	r9, r0
 8011efc:	2800      	cmp	r0, #0
 8011efe:	f43f af34 	beq.w	8011d6a <rcl_node_init+0x9e>
 8011f02:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011f06:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011f0a:	4628      	mov	r0, r5
 8011f0c:	4798      	blx	r3
 8011f0e:	e7d5      	b.n	8011ebc <rcl_node_init+0x1f0>
 8011f10:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8011f14:	4648      	mov	r0, r9
 8011f16:	b029      	add	sp, #164	@ 0xa4
 8011f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f1c:	f04f 090a 	mov.w	r9, #10
 8011f20:	f1ba 0f00 	cmp.w	sl, #0
 8011f24:	d1ed      	bne.n	8011f02 <rcl_node_init+0x236>
 8011f26:	e7c9      	b.n	8011ebc <rcl_node_init+0x1f0>
 8011f28:	f002 ff6a 	bl	8014e00 <rmw_node_name_validation_result_string>
 8011f2c:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8011f30:	e7c4      	b.n	8011ebc <rcl_node_init+0x1f0>
 8011f32:	f002 ff07 	bl	8014d44 <rmw_namespace_validation_result_string>
 8011f36:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8011f3a:	f1ba 0f00 	cmp.w	sl, #0
 8011f3e:	d1e0      	bne.n	8011f02 <rcl_node_init+0x236>
 8011f40:	e7bc      	b.n	8011ebc <rcl_node_init+0x1f0>
 8011f42:	f04f 090a 	mov.w	r9, #10
 8011f46:	e7b9      	b.n	8011ebc <rcl_node_init+0x1f0>
 8011f48:	080188c0 	.word	0x080188c0
 8011f4c:	080188e8 	.word	0x080188e8
 8011f50:	080188c4 	.word	0x080188c4
 8011f54:	08018b2c 	.word	0x08018b2c

08011f58 <rcl_node_is_valid>:
 8011f58:	b130      	cbz	r0, 8011f68 <rcl_node_is_valid+0x10>
 8011f5a:	6843      	ldr	r3, [r0, #4]
 8011f5c:	b123      	cbz	r3, 8011f68 <rcl_node_is_valid+0x10>
 8011f5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011f60:	b113      	cbz	r3, 8011f68 <rcl_node_is_valid+0x10>
 8011f62:	6800      	ldr	r0, [r0, #0]
 8011f64:	f7ff bd1c 	b.w	80119a0 <rcl_context_is_valid>
 8011f68:	2000      	movs	r0, #0
 8011f6a:	4770      	bx	lr

08011f6c <rcl_node_get_name>:
 8011f6c:	b120      	cbz	r0, 8011f78 <rcl_node_get_name+0xc>
 8011f6e:	6840      	ldr	r0, [r0, #4]
 8011f70:	b110      	cbz	r0, 8011f78 <rcl_node_get_name+0xc>
 8011f72:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8011f74:	b100      	cbz	r0, 8011f78 <rcl_node_get_name+0xc>
 8011f76:	6880      	ldr	r0, [r0, #8]
 8011f78:	4770      	bx	lr
 8011f7a:	bf00      	nop

08011f7c <rcl_node_get_namespace>:
 8011f7c:	b120      	cbz	r0, 8011f88 <rcl_node_get_namespace+0xc>
 8011f7e:	6840      	ldr	r0, [r0, #4]
 8011f80:	b110      	cbz	r0, 8011f88 <rcl_node_get_namespace+0xc>
 8011f82:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8011f84:	b100      	cbz	r0, 8011f88 <rcl_node_get_namespace+0xc>
 8011f86:	68c0      	ldr	r0, [r0, #12]
 8011f88:	4770      	bx	lr
 8011f8a:	bf00      	nop

08011f8c <rcl_node_get_options>:
 8011f8c:	b128      	cbz	r0, 8011f9a <rcl_node_get_options+0xe>
 8011f8e:	6840      	ldr	r0, [r0, #4]
 8011f90:	b118      	cbz	r0, 8011f9a <rcl_node_get_options+0xe>
 8011f92:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	bf08      	it	eq
 8011f98:	2000      	moveq	r0, #0
 8011f9a:	4770      	bx	lr

08011f9c <rcl_node_get_rmw_handle>:
 8011f9c:	b110      	cbz	r0, 8011fa4 <rcl_node_get_rmw_handle+0x8>
 8011f9e:	6840      	ldr	r0, [r0, #4]
 8011fa0:	b100      	cbz	r0, 8011fa4 <rcl_node_get_rmw_handle+0x8>
 8011fa2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8011fa4:	4770      	bx	lr
 8011fa6:	bf00      	nop

08011fa8 <rcl_node_get_default_options>:
 8011fa8:	b510      	push	{r4, lr}
 8011faa:	2268      	movs	r2, #104	@ 0x68
 8011fac:	4604      	mov	r4, r0
 8011fae:	2100      	movs	r1, #0
 8011fb0:	f005 fae2 	bl	8017578 <memset>
 8011fb4:	4620      	mov	r0, r4
 8011fb6:	f7fa fe93 	bl	800cce0 <rcutils_get_default_allocator>
 8011fba:	2301      	movs	r3, #1
 8011fbc:	7523      	strb	r3, [r4, #20]
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	bd10      	pop	{r4, pc}
 8011fc2:	bf00      	nop

08011fc4 <rcl_node_options_copy>:
 8011fc4:	b1d0      	cbz	r0, 8011ffc <rcl_node_options_copy+0x38>
 8011fc6:	b570      	push	{r4, r5, r6, lr}
 8011fc8:	460c      	mov	r4, r1
 8011fca:	b1a9      	cbz	r1, 8011ff8 <rcl_node_options_copy+0x34>
 8011fcc:	4288      	cmp	r0, r1
 8011fce:	4684      	mov	ip, r0
 8011fd0:	d012      	beq.n	8011ff8 <rcl_node_options_copy+0x34>
 8011fd2:	4605      	mov	r5, r0
 8011fd4:	8a86      	ldrh	r6, [r0, #20]
 8011fd6:	468e      	mov	lr, r1
 8011fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011fda:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011fde:	682b      	ldr	r3, [r5, #0]
 8011fe0:	f8ce 3000 	str.w	r3, [lr]
 8011fe4:	f10c 0118 	add.w	r1, ip, #24
 8011fe8:	2250      	movs	r2, #80	@ 0x50
 8011fea:	82a6      	strh	r6, [r4, #20]
 8011fec:	f104 0018 	add.w	r0, r4, #24
 8011ff0:	f005 fb8b 	bl	801770a <memcpy>
 8011ff4:	2000      	movs	r0, #0
 8011ff6:	bd70      	pop	{r4, r5, r6, pc}
 8011ff8:	200b      	movs	r0, #11
 8011ffa:	bd70      	pop	{r4, r5, r6, pc}
 8011ffc:	200b      	movs	r0, #11
 8011ffe:	4770      	bx	lr

08012000 <rcl_node_resolve_name>:
 8012000:	b082      	sub	sp, #8
 8012002:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012006:	b091      	sub	sp, #68	@ 0x44
 8012008:	ac1a      	add	r4, sp, #104	@ 0x68
 801200a:	e884 000c 	stmia.w	r4, {r2, r3}
 801200e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8012012:	2800      	cmp	r0, #0
 8012014:	d03b      	beq.n	801208e <rcl_node_resolve_name+0x8e>
 8012016:	460c      	mov	r4, r1
 8012018:	4605      	mov	r5, r0
 801201a:	f7ff ffb7 	bl	8011f8c <rcl_node_get_options>
 801201e:	2800      	cmp	r0, #0
 8012020:	d037      	beq.n	8012092 <rcl_node_resolve_name+0x92>
 8012022:	4628      	mov	r0, r5
 8012024:	f7ff ffa2 	bl	8011f6c <rcl_node_get_name>
 8012028:	4606      	mov	r6, r0
 801202a:	4628      	mov	r0, r5
 801202c:	f7ff ffa6 	bl	8011f7c <rcl_node_get_namespace>
 8012030:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8012034:	4681      	mov	r9, r0
 8012036:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801203a:	ad0b      	add	r5, sp, #44	@ 0x2c
 801203c:	46ac      	mov	ip, r5
 801203e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012042:	f8de 3000 	ldr.w	r3, [lr]
 8012046:	f8cc 3000 	str.w	r3, [ip]
 801204a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801204c:	b1fb      	cbz	r3, 801208e <rcl_node_resolve_name+0x8e>
 801204e:	468a      	mov	sl, r1
 8012050:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8012054:	f002 fbd8 	bl	8014808 <rcutils_get_zero_initialized_string_map>
 8012058:	ab10      	add	r3, sp, #64	@ 0x40
 801205a:	9008      	str	r0, [sp, #32]
 801205c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8012060:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012064:	2100      	movs	r1, #0
 8012066:	e895 000c 	ldmia.w	r5, {r2, r3}
 801206a:	a808      	add	r0, sp, #32
 801206c:	f002 fc44 	bl	80148f8 <rcutils_string_map_init>
 8012070:	4607      	mov	r7, r0
 8012072:	b180      	cbz	r0, 8012096 <rcl_node_resolve_name+0x96>
 8012074:	f7fa fe50 	bl	800cd18 <rcutils_get_error_string>
 8012078:	f7fa fe66 	bl	800cd48 <rcutils_reset_error>
 801207c:	2f0a      	cmp	r7, #10
 801207e:	bf18      	it	ne
 8012080:	2701      	movne	r7, #1
 8012082:	4638      	mov	r0, r7
 8012084:	b011      	add	sp, #68	@ 0x44
 8012086:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801208a:	b002      	add	sp, #8
 801208c:	4770      	bx	lr
 801208e:	270b      	movs	r7, #11
 8012090:	e7f7      	b.n	8012082 <rcl_node_resolve_name+0x82>
 8012092:	2701      	movs	r7, #1
 8012094:	e7f5      	b.n	8012082 <rcl_node_resolve_name+0x82>
 8012096:	9009      	str	r0, [sp, #36]	@ 0x24
 8012098:	9007      	str	r0, [sp, #28]
 801209a:	a808      	add	r0, sp, #32
 801209c:	f004 fc64 	bl	8016968 <rcl_get_default_topic_name_substitutions>
 80120a0:	4607      	mov	r7, r0
 80120a2:	b1a8      	cbz	r0, 80120d0 <rcl_node_resolve_name+0xd0>
 80120a4:	280a      	cmp	r0, #10
 80120a6:	9c07      	ldr	r4, [sp, #28]
 80120a8:	d000      	beq.n	80120ac <rcl_node_resolve_name+0xac>
 80120aa:	2701      	movs	r7, #1
 80120ac:	a808      	add	r0, sp, #32
 80120ae:	f002 fc63 	bl	8014978 <rcutils_string_map_fini>
 80120b2:	2800      	cmp	r0, #0
 80120b4:	d13d      	bne.n	8012132 <rcl_node_resolve_name+0x132>
 80120b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80120b8:	4659      	mov	r1, fp
 80120ba:	47d0      	blx	sl
 80120bc:	4659      	mov	r1, fp
 80120be:	4620      	mov	r0, r4
 80120c0:	47d0      	blx	sl
 80120c2:	f1b8 0f00 	cmp.w	r8, #0
 80120c6:	d0dc      	beq.n	8012082 <rcl_node_resolve_name+0x82>
 80120c8:	2f67      	cmp	r7, #103	@ 0x67
 80120ca:	bf08      	it	eq
 80120cc:	2768      	moveq	r7, #104	@ 0x68
 80120ce:	e7d8      	b.n	8012082 <rcl_node_resolve_name+0x82>
 80120d0:	ab09      	add	r3, sp, #36	@ 0x24
 80120d2:	9305      	str	r3, [sp, #20]
 80120d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80120d6:	46ec      	mov	ip, sp
 80120d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80120dc:	682b      	ldr	r3, [r5, #0]
 80120de:	f8cc 3000 	str.w	r3, [ip]
 80120e2:	464a      	mov	r2, r9
 80120e4:	4631      	mov	r1, r6
 80120e6:	4620      	mov	r0, r4
 80120e8:	ab08      	add	r3, sp, #32
 80120ea:	f004 fadf 	bl	80166ac <rcl_expand_topic_name>
 80120ee:	4607      	mov	r7, r0
 80120f0:	b9b8      	cbnz	r0, 8012122 <rcl_node_resolve_name+0x122>
 80120f2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80120f4:	9009      	str	r0, [sp, #36]	@ 0x24
 80120f6:	4602      	mov	r2, r0
 80120f8:	a90a      	add	r1, sp, #40	@ 0x28
 80120fa:	4620      	mov	r0, r4
 80120fc:	f002 fd4c 	bl	8014b98 <rmw_validate_full_topic_name>
 8012100:	b988      	cbnz	r0, 8012126 <rcl_node_resolve_name+0x126>
 8012102:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8012104:	b9d5      	cbnz	r5, 801213c <rcl_node_resolve_name+0x13c>
 8012106:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012108:	a808      	add	r0, sp, #32
 801210a:	601c      	str	r4, [r3, #0]
 801210c:	f002 fc34 	bl	8014978 <rcutils_string_map_fini>
 8012110:	4607      	mov	r7, r0
 8012112:	b1a8      	cbz	r0, 8012140 <rcl_node_resolve_name+0x140>
 8012114:	f7fa fe00 	bl	800cd18 <rcutils_get_error_string>
 8012118:	462c      	mov	r4, r5
 801211a:	f7fa fe15 	bl	800cd48 <rcutils_reset_error>
 801211e:	2701      	movs	r7, #1
 8012120:	e7c9      	b.n	80120b6 <rcl_node_resolve_name+0xb6>
 8012122:	9c07      	ldr	r4, [sp, #28]
 8012124:	e7c2      	b.n	80120ac <rcl_node_resolve_name+0xac>
 8012126:	f7fa fdf7 	bl	800cd18 <rcutils_get_error_string>
 801212a:	2701      	movs	r7, #1
 801212c:	f7fa fe0c 	bl	800cd48 <rcutils_reset_error>
 8012130:	e7bc      	b.n	80120ac <rcl_node_resolve_name+0xac>
 8012132:	f7fa fdf1 	bl	800cd18 <rcutils_get_error_string>
 8012136:	f7fa fe07 	bl	800cd48 <rcutils_reset_error>
 801213a:	e7bc      	b.n	80120b6 <rcl_node_resolve_name+0xb6>
 801213c:	2767      	movs	r7, #103	@ 0x67
 801213e:	e7b5      	b.n	80120ac <rcl_node_resolve_name+0xac>
 8012140:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012142:	4659      	mov	r1, fp
 8012144:	47d0      	blx	sl
 8012146:	4659      	mov	r1, fp
 8012148:	4638      	mov	r0, r7
 801214a:	47d0      	blx	sl
 801214c:	e799      	b.n	8012082 <rcl_node_resolve_name+0x82>
 801214e:	bf00      	nop

08012150 <exact_match_lookup>:
 8012150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012152:	f102 0708 	add.w	r7, r2, #8
 8012156:	460b      	mov	r3, r1
 8012158:	4614      	mov	r4, r2
 801215a:	4606      	mov	r6, r0
 801215c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012160:	b085      	sub	sp, #20
 8012162:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012166:	4618      	mov	r0, r3
 8012168:	4919      	ldr	r1, [pc, #100]	@ (80121d0 <exact_match_lookup+0x80>)
 801216a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801216e:	f002 f9e5 	bl	801453c <rcutils_join_path>
 8012172:	7833      	ldrb	r3, [r6, #0]
 8012174:	2b2f      	cmp	r3, #47	@ 0x2f
 8012176:	4605      	mov	r5, r0
 8012178:	d023      	beq.n	80121c2 <exact_match_lookup+0x72>
 801217a:	f104 030c 	add.w	r3, r4, #12
 801217e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012182:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012186:	1c70      	adds	r0, r6, #1
 8012188:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801218c:	f002 f9dc 	bl	8014548 <rcutils_to_native_path>
 8012190:	4606      	mov	r6, r0
 8012192:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012196:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801219a:	4631      	mov	r1, r6
 801219c:	e894 000c 	ldmia.w	r4, {r2, r3}
 80121a0:	4628      	mov	r0, r5
 80121a2:	f002 f9cb 	bl	801453c <rcutils_join_path>
 80121a6:	6862      	ldr	r2, [r4, #4]
 80121a8:	6921      	ldr	r1, [r4, #16]
 80121aa:	4603      	mov	r3, r0
 80121ac:	4630      	mov	r0, r6
 80121ae:	461e      	mov	r6, r3
 80121b0:	4790      	blx	r2
 80121b2:	4628      	mov	r0, r5
 80121b4:	6863      	ldr	r3, [r4, #4]
 80121b6:	6921      	ldr	r1, [r4, #16]
 80121b8:	4798      	blx	r3
 80121ba:	4635      	mov	r5, r6
 80121bc:	4628      	mov	r0, r5
 80121be:	b005      	add	sp, #20
 80121c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121c2:	7873      	ldrb	r3, [r6, #1]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d1d8      	bne.n	801217a <exact_match_lookup+0x2a>
 80121c8:	4628      	mov	r0, r5
 80121ca:	b005      	add	sp, #20
 80121cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121ce:	bf00      	nop
 80121d0:	08018b74 	.word	0x08018b74

080121d4 <rcl_get_secure_root>:
 80121d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80121d8:	b085      	sub	sp, #20
 80121da:	b168      	cbz	r0, 80121f8 <rcl_get_secure_root+0x24>
 80121dc:	4607      	mov	r7, r0
 80121de:	4608      	mov	r0, r1
 80121e0:	460c      	mov	r4, r1
 80121e2:	f7fa fd8b 	bl	800ccfc <rcutils_allocator_is_valid>
 80121e6:	b138      	cbz	r0, 80121f8 <rcl_get_secure_root+0x24>
 80121e8:	2300      	movs	r3, #0
 80121ea:	482d      	ldr	r0, [pc, #180]	@ (80122a0 <rcl_get_secure_root+0xcc>)
 80121ec:	9303      	str	r3, [sp, #12]
 80121ee:	a903      	add	r1, sp, #12
 80121f0:	f002 f98a 	bl	8014508 <rcutils_get_env>
 80121f4:	4605      	mov	r5, r0
 80121f6:	b120      	cbz	r0, 8012202 <rcl_get_secure_root+0x2e>
 80121f8:	2500      	movs	r5, #0
 80121fa:	4628      	mov	r0, r5
 80121fc:	b005      	add	sp, #20
 80121fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012202:	9b03      	ldr	r3, [sp, #12]
 8012204:	781a      	ldrb	r2, [r3, #0]
 8012206:	2a00      	cmp	r2, #0
 8012208:	d0f6      	beq.n	80121f8 <rcl_get_secure_root+0x24>
 801220a:	f104 090c 	add.w	r9, r4, #12
 801220e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012212:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012216:	4618      	mov	r0, r3
 8012218:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801221c:	f002 fab6 	bl	801478c <rcutils_strdup>
 8012220:	4680      	mov	r8, r0
 8012222:	2800      	cmp	r0, #0
 8012224:	d0e8      	beq.n	80121f8 <rcl_get_secure_root+0x24>
 8012226:	481f      	ldr	r0, [pc, #124]	@ (80122a4 <rcl_get_secure_root+0xd0>)
 8012228:	9503      	str	r5, [sp, #12]
 801222a:	a903      	add	r1, sp, #12
 801222c:	f002 f96c 	bl	8014508 <rcutils_get_env>
 8012230:	b160      	cbz	r0, 801224c <rcl_get_secure_root+0x78>
 8012232:	2600      	movs	r6, #0
 8012234:	6863      	ldr	r3, [r4, #4]
 8012236:	6921      	ldr	r1, [r4, #16]
 8012238:	4630      	mov	r0, r6
 801223a:	4798      	blx	r3
 801223c:	4640      	mov	r0, r8
 801223e:	6863      	ldr	r3, [r4, #4]
 8012240:	6921      	ldr	r1, [r4, #16]
 8012242:	4798      	blx	r3
 8012244:	4628      	mov	r0, r5
 8012246:	b005      	add	sp, #20
 8012248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801224c:	9b03      	ldr	r3, [sp, #12]
 801224e:	781e      	ldrb	r6, [r3, #0]
 8012250:	b1f6      	cbz	r6, 8012290 <rcl_get_secure_root+0xbc>
 8012252:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012256:	e88d 0003 	stmia.w	sp, {r0, r1}
 801225a:	4618      	mov	r0, r3
 801225c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012260:	f002 fa94 	bl	801478c <rcutils_strdup>
 8012264:	4606      	mov	r6, r0
 8012266:	2800      	cmp	r0, #0
 8012268:	d0e3      	beq.n	8012232 <rcl_get_secure_root+0x5e>
 801226a:	4622      	mov	r2, r4
 801226c:	4641      	mov	r1, r8
 801226e:	f7ff ff6f 	bl	8012150 <exact_match_lookup>
 8012272:	4605      	mov	r5, r0
 8012274:	2d00      	cmp	r5, #0
 8012276:	d0dd      	beq.n	8012234 <rcl_get_secure_root+0x60>
 8012278:	4628      	mov	r0, r5
 801227a:	f002 f95d 	bl	8014538 <rcutils_is_directory>
 801227e:	4603      	mov	r3, r0
 8012280:	2800      	cmp	r0, #0
 8012282:	d1d7      	bne.n	8012234 <rcl_get_secure_root+0x60>
 8012284:	4628      	mov	r0, r5
 8012286:	6921      	ldr	r1, [r4, #16]
 8012288:	461d      	mov	r5, r3
 801228a:	6863      	ldr	r3, [r4, #4]
 801228c:	4798      	blx	r3
 801228e:	e7d1      	b.n	8012234 <rcl_get_secure_root+0x60>
 8012290:	4622      	mov	r2, r4
 8012292:	4638      	mov	r0, r7
 8012294:	4641      	mov	r1, r8
 8012296:	f7ff ff5b 	bl	8012150 <exact_match_lookup>
 801229a:	4605      	mov	r5, r0
 801229c:	e7ea      	b.n	8012274 <rcl_get_secure_root+0xa0>
 801229e:	bf00      	nop
 80122a0:	08018b80 	.word	0x08018b80
 80122a4:	08018b98 	.word	0x08018b98

080122a8 <rcl_get_security_options_from_environment>:
 80122a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122ac:	b082      	sub	sp, #8
 80122ae:	2300      	movs	r3, #0
 80122b0:	4606      	mov	r6, r0
 80122b2:	460f      	mov	r7, r1
 80122b4:	4820      	ldr	r0, [pc, #128]	@ (8012338 <rcl_get_security_options_from_environment+0x90>)
 80122b6:	9301      	str	r3, [sp, #4]
 80122b8:	a901      	add	r1, sp, #4
 80122ba:	4690      	mov	r8, r2
 80122bc:	f002 f924 	bl	8014508 <rcutils_get_env>
 80122c0:	b120      	cbz	r0, 80122cc <rcl_get_security_options_from_environment+0x24>
 80122c2:	2501      	movs	r5, #1
 80122c4:	4628      	mov	r0, r5
 80122c6:	b002      	add	sp, #8
 80122c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122cc:	491b      	ldr	r1, [pc, #108]	@ (801233c <rcl_get_security_options_from_environment+0x94>)
 80122ce:	4604      	mov	r4, r0
 80122d0:	9801      	ldr	r0, [sp, #4]
 80122d2:	f7ed ffa5 	bl	8000220 <strcmp>
 80122d6:	4605      	mov	r5, r0
 80122d8:	b9e8      	cbnz	r0, 8012316 <rcl_get_security_options_from_environment+0x6e>
 80122da:	9001      	str	r0, [sp, #4]
 80122dc:	f1b8 0f00 	cmp.w	r8, #0
 80122e0:	d020      	beq.n	8012324 <rcl_get_security_options_from_environment+0x7c>
 80122e2:	4817      	ldr	r0, [pc, #92]	@ (8012340 <rcl_get_security_options_from_environment+0x98>)
 80122e4:	a901      	add	r1, sp, #4
 80122e6:	f002 f90f 	bl	8014508 <rcutils_get_env>
 80122ea:	2800      	cmp	r0, #0
 80122ec:	d1e9      	bne.n	80122c2 <rcl_get_security_options_from_environment+0x1a>
 80122ee:	4915      	ldr	r1, [pc, #84]	@ (8012344 <rcl_get_security_options_from_environment+0x9c>)
 80122f0:	9801      	ldr	r0, [sp, #4]
 80122f2:	f7ed ff95 	bl	8000220 <strcmp>
 80122f6:	fab0 f080 	clz	r0, r0
 80122fa:	0940      	lsrs	r0, r0, #5
 80122fc:	f888 0000 	strb.w	r0, [r8]
 8012300:	4639      	mov	r1, r7
 8012302:	4630      	mov	r0, r6
 8012304:	f7ff ff66 	bl	80121d4 <rcl_get_secure_root>
 8012308:	b170      	cbz	r0, 8012328 <rcl_get_security_options_from_environment+0x80>
 801230a:	f8c8 0004 	str.w	r0, [r8, #4]
 801230e:	4628      	mov	r0, r5
 8012310:	b002      	add	sp, #8
 8012312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012316:	4625      	mov	r5, r4
 8012318:	4628      	mov	r0, r5
 801231a:	f888 4000 	strb.w	r4, [r8]
 801231e:	b002      	add	sp, #8
 8012320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012324:	250b      	movs	r5, #11
 8012326:	e7cd      	b.n	80122c4 <rcl_get_security_options_from_environment+0x1c>
 8012328:	f898 5000 	ldrb.w	r5, [r8]
 801232c:	f1a5 0501 	sub.w	r5, r5, #1
 8012330:	fab5 f585 	clz	r5, r5
 8012334:	096d      	lsrs	r5, r5, #5
 8012336:	e7c5      	b.n	80122c4 <rcl_get_security_options_from_environment+0x1c>
 8012338:	08018b38 	.word	0x08018b38
 801233c:	08018b4c 	.word	0x08018b4c
 8012340:	08018b54 	.word	0x08018b54
 8012344:	08018b6c 	.word	0x08018b6c

08012348 <rcl_service_get_rmw_handle>:
 8012348:	b118      	cbz	r0, 8012352 <rcl_service_get_rmw_handle+0xa>
 801234a:	6800      	ldr	r0, [r0, #0]
 801234c:	b108      	cbz	r0, 8012352 <rcl_service_get_rmw_handle+0xa>
 801234e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012352:	4770      	bx	lr

08012354 <rcl_take_request>:
 8012354:	b570      	push	{r4, r5, r6, lr}
 8012356:	468e      	mov	lr, r1
 8012358:	460c      	mov	r4, r1
 801235a:	4616      	mov	r6, r2
 801235c:	4605      	mov	r5, r0
 801235e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012362:	b08c      	sub	sp, #48	@ 0x30
 8012364:	f10d 0c18 	add.w	ip, sp, #24
 8012368:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801236c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012370:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012374:	b30d      	cbz	r5, 80123ba <rcl_take_request+0x66>
 8012376:	682b      	ldr	r3, [r5, #0]
 8012378:	b1fb      	cbz	r3, 80123ba <rcl_take_request+0x66>
 801237a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801237e:	b1e0      	cbz	r0, 80123ba <rcl_take_request+0x66>
 8012380:	b336      	cbz	r6, 80123d0 <rcl_take_request+0x7c>
 8012382:	2300      	movs	r3, #0
 8012384:	f88d 3007 	strb.w	r3, [sp, #7]
 8012388:	4632      	mov	r2, r6
 801238a:	f10d 0307 	add.w	r3, sp, #7
 801238e:	a902      	add	r1, sp, #8
 8012390:	f002 ff58 	bl	8015244 <rmw_take_request>
 8012394:	4605      	mov	r5, r0
 8012396:	b198      	cbz	r0, 80123c0 <rcl_take_request+0x6c>
 8012398:	280a      	cmp	r0, #10
 801239a:	bf18      	it	ne
 801239c:	2501      	movne	r5, #1
 801239e:	f10d 0e18 	add.w	lr, sp, #24
 80123a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80123a6:	46a4      	mov	ip, r4
 80123a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80123ac:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80123b0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80123b4:	4628      	mov	r0, r5
 80123b6:	b00c      	add	sp, #48	@ 0x30
 80123b8:	bd70      	pop	{r4, r5, r6, pc}
 80123ba:	f44f 7516 	mov.w	r5, #600	@ 0x258
 80123be:	e7ee      	b.n	801239e <rcl_take_request+0x4a>
 80123c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80123c4:	f240 2359 	movw	r3, #601	@ 0x259
 80123c8:	2a00      	cmp	r2, #0
 80123ca:	bf08      	it	eq
 80123cc:	461d      	moveq	r5, r3
 80123ce:	e7e6      	b.n	801239e <rcl_take_request+0x4a>
 80123d0:	250b      	movs	r5, #11
 80123d2:	e7e4      	b.n	801239e <rcl_take_request+0x4a>

080123d4 <rcl_send_response>:
 80123d4:	b170      	cbz	r0, 80123f4 <rcl_send_response+0x20>
 80123d6:	6800      	ldr	r0, [r0, #0]
 80123d8:	b160      	cbz	r0, 80123f4 <rcl_send_response+0x20>
 80123da:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80123de:	b148      	cbz	r0, 80123f4 <rcl_send_response+0x20>
 80123e0:	b159      	cbz	r1, 80123fa <rcl_send_response+0x26>
 80123e2:	b510      	push	{r4, lr}
 80123e4:	b15a      	cbz	r2, 80123fe <rcl_send_response+0x2a>
 80123e6:	f002 ff8b 	bl	8015300 <rmw_send_response>
 80123ea:	b110      	cbz	r0, 80123f2 <rcl_send_response+0x1e>
 80123ec:	2802      	cmp	r0, #2
 80123ee:	bf18      	it	ne
 80123f0:	2001      	movne	r0, #1
 80123f2:	bd10      	pop	{r4, pc}
 80123f4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80123f8:	4770      	bx	lr
 80123fa:	200b      	movs	r0, #11
 80123fc:	4770      	bx	lr
 80123fe:	200b      	movs	r0, #11
 8012400:	bd10      	pop	{r4, pc}
 8012402:	bf00      	nop

08012404 <rcl_service_is_valid>:
 8012404:	b130      	cbz	r0, 8012414 <rcl_service_is_valid+0x10>
 8012406:	6800      	ldr	r0, [r0, #0]
 8012408:	b120      	cbz	r0, 8012414 <rcl_service_is_valid+0x10>
 801240a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801240e:	3800      	subs	r0, #0
 8012410:	bf18      	it	ne
 8012412:	2001      	movne	r0, #1
 8012414:	4770      	bx	lr
 8012416:	bf00      	nop

08012418 <rcl_take>:
 8012418:	2800      	cmp	r0, #0
 801241a:	d04a      	beq.n	80124b2 <rcl_take+0x9a>
 801241c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012420:	4604      	mov	r4, r0
 8012422:	6800      	ldr	r0, [r0, #0]
 8012424:	b0a4      	sub	sp, #144	@ 0x90
 8012426:	2800      	cmp	r0, #0
 8012428:	d03b      	beq.n	80124a2 <rcl_take+0x8a>
 801242a:	461f      	mov	r7, r3
 801242c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8012430:	2b00      	cmp	r3, #0
 8012432:	d036      	beq.n	80124a2 <rcl_take+0x8a>
 8012434:	460e      	mov	r6, r1
 8012436:	2900      	cmp	r1, #0
 8012438:	d039      	beq.n	80124ae <rcl_take+0x96>
 801243a:	4615      	mov	r5, r2
 801243c:	2a00      	cmp	r2, #0
 801243e:	d03c      	beq.n	80124ba <rcl_take+0xa2>
 8012440:	a802      	add	r0, sp, #8
 8012442:	f002 fba1 	bl	8014b88 <rmw_get_zero_initialized_message_info>
 8012446:	f10d 0c08 	add.w	ip, sp, #8
 801244a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801244e:	46ae      	mov	lr, r5
 8012450:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012454:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012458:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801245c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012460:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012464:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8012468:	f04f 0800 	mov.w	r8, #0
 801246c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8012470:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8012474:	6822      	ldr	r2, [r4, #0]
 8012476:	462b      	mov	r3, r5
 8012478:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 801247c:	9700      	str	r7, [sp, #0]
 801247e:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8012482:	4631      	mov	r1, r6
 8012484:	f002 ffe2 	bl	801544c <rmw_take_with_info>
 8012488:	4603      	mov	r3, r0
 801248a:	b9c0      	cbnz	r0, 80124be <rcl_take+0xa6>
 801248c:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8012490:	f240 1291 	movw	r2, #401	@ 0x191
 8012494:	2900      	cmp	r1, #0
 8012496:	bf08      	it	eq
 8012498:	4613      	moveq	r3, r2
 801249a:	4618      	mov	r0, r3
 801249c:	b024      	add	sp, #144	@ 0x90
 801249e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124a2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80124a6:	4618      	mov	r0, r3
 80124a8:	b024      	add	sp, #144	@ 0x90
 80124aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124ae:	230b      	movs	r3, #11
 80124b0:	e7f3      	b.n	801249a <rcl_take+0x82>
 80124b2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80124b6:	4618      	mov	r0, r3
 80124b8:	4770      	bx	lr
 80124ba:	ad14      	add	r5, sp, #80	@ 0x50
 80124bc:	e7c0      	b.n	8012440 <rcl_take+0x28>
 80124be:	f7ff fa51 	bl	8011964 <rcl_convert_rmw_ret_to_rcl_ret>
 80124c2:	4603      	mov	r3, r0
 80124c4:	e7e9      	b.n	801249a <rcl_take+0x82>
 80124c6:	bf00      	nop

080124c8 <rcl_subscription_get_rmw_handle>:
 80124c8:	b118      	cbz	r0, 80124d2 <rcl_subscription_get_rmw_handle+0xa>
 80124ca:	6800      	ldr	r0, [r0, #0]
 80124cc:	b108      	cbz	r0, 80124d2 <rcl_subscription_get_rmw_handle+0xa>
 80124ce:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80124d2:	4770      	bx	lr

080124d4 <rcl_subscription_is_valid>:
 80124d4:	b130      	cbz	r0, 80124e4 <rcl_subscription_is_valid+0x10>
 80124d6:	6800      	ldr	r0, [r0, #0]
 80124d8:	b120      	cbz	r0, 80124e4 <rcl_subscription_is_valid+0x10>
 80124da:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80124de:	3800      	subs	r0, #0
 80124e0:	bf18      	it	ne
 80124e2:	2001      	movne	r0, #1
 80124e4:	4770      	bx	lr
 80124e6:	bf00      	nop

080124e8 <rcl_get_system_time>:
 80124e8:	4608      	mov	r0, r1
 80124ea:	f7fa bc49 	b.w	800cd80 <rcutils_system_time_now>
 80124ee:	bf00      	nop

080124f0 <rcl_get_steady_time>:
 80124f0:	4608      	mov	r0, r1
 80124f2:	f7fa bc6d 	b.w	800cdd0 <rcutils_steady_time_now>
 80124f6:	bf00      	nop

080124f8 <rcl_get_ros_time>:
 80124f8:	7a03      	ldrb	r3, [r0, #8]
 80124fa:	b510      	push	{r4, lr}
 80124fc:	460c      	mov	r4, r1
 80124fe:	b133      	cbz	r3, 801250e <rcl_get_ros_time+0x16>
 8012500:	2105      	movs	r1, #5
 8012502:	f001 ff5d 	bl	80143c0 <__atomic_load_8>
 8012506:	e9c4 0100 	strd	r0, r1, [r4]
 801250a:	2000      	movs	r0, #0
 801250c:	bd10      	pop	{r4, pc}
 801250e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012512:	4608      	mov	r0, r1
 8012514:	f7fa bc34 	b.w	800cd80 <rcutils_system_time_now>

08012518 <rcl_clock_init>:
 8012518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801251a:	4605      	mov	r5, r0
 801251c:	4610      	mov	r0, r2
 801251e:	4614      	mov	r4, r2
 8012520:	460e      	mov	r6, r1
 8012522:	f7fa fbeb 	bl	800ccfc <rcutils_allocator_is_valid>
 8012526:	b128      	cbz	r0, 8012534 <rcl_clock_init+0x1c>
 8012528:	2d03      	cmp	r5, #3
 801252a:	d803      	bhi.n	8012534 <rcl_clock_init+0x1c>
 801252c:	e8df f005 	tbb	[pc, r5]
 8012530:	06532e1d 	.word	0x06532e1d
 8012534:	f04f 0c0b 	mov.w	ip, #11
 8012538:	4660      	mov	r0, ip
 801253a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801253c:	2e00      	cmp	r6, #0
 801253e:	d0f9      	beq.n	8012534 <rcl_clock_init+0x1c>
 8012540:	2c00      	cmp	r4, #0
 8012542:	d0f7      	beq.n	8012534 <rcl_clock_init+0x1c>
 8012544:	2300      	movs	r3, #0
 8012546:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801254a:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8012600 <rcl_clock_init+0xe8>
 801254e:	6133      	str	r3, [r6, #16]
 8012550:	f106 0514 	add.w	r5, r6, #20
 8012554:	469c      	mov	ip, r3
 8012556:	2703      	movs	r7, #3
 8012558:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801255a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801255c:	6823      	ldr	r3, [r4, #0]
 801255e:	602b      	str	r3, [r5, #0]
 8012560:	7037      	strb	r7, [r6, #0]
 8012562:	f8c6 e00c 	str.w	lr, [r6, #12]
 8012566:	4660      	mov	r0, ip
 8012568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801256a:	2e00      	cmp	r6, #0
 801256c:	d0e2      	beq.n	8012534 <rcl_clock_init+0x1c>
 801256e:	2300      	movs	r3, #0
 8012570:	7033      	strb	r3, [r6, #0]
 8012572:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012576:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801257a:	469c      	mov	ip, r3
 801257c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801257e:	f106 0514 	add.w	r5, r6, #20
 8012582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012584:	6823      	ldr	r3, [r4, #0]
 8012586:	602b      	str	r3, [r5, #0]
 8012588:	4660      	mov	r0, ip
 801258a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801258c:	2e00      	cmp	r6, #0
 801258e:	d0d1      	beq.n	8012534 <rcl_clock_init+0x1c>
 8012590:	2c00      	cmp	r4, #0
 8012592:	d0cf      	beq.n	8012534 <rcl_clock_init+0x1c>
 8012594:	2700      	movs	r7, #0
 8012596:	7037      	strb	r7, [r6, #0]
 8012598:	46a4      	mov	ip, r4
 801259a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801259e:	f106 0514 	add.w	r5, r6, #20
 80125a2:	e9c6 7701 	strd	r7, r7, [r6, #4]
 80125a6:	e9c6 7703 	strd	r7, r7, [r6, #12]
 80125aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80125ac:	f8dc 3000 	ldr.w	r3, [ip]
 80125b0:	602b      	str	r3, [r5, #0]
 80125b2:	6921      	ldr	r1, [r4, #16]
 80125b4:	6823      	ldr	r3, [r4, #0]
 80125b6:	2010      	movs	r0, #16
 80125b8:	4798      	blx	r3
 80125ba:	6130      	str	r0, [r6, #16]
 80125bc:	b1d0      	cbz	r0, 80125f4 <rcl_clock_init+0xdc>
 80125be:	2200      	movs	r2, #0
 80125c0:	2300      	movs	r3, #0
 80125c2:	e9c0 2300 	strd	r2, r3, [r0]
 80125c6:	2301      	movs	r3, #1
 80125c8:	7207      	strb	r7, [r0, #8]
 80125ca:	4a0c      	ldr	r2, [pc, #48]	@ (80125fc <rcl_clock_init+0xe4>)
 80125cc:	7033      	strb	r3, [r6, #0]
 80125ce:	46bc      	mov	ip, r7
 80125d0:	60f2      	str	r2, [r6, #12]
 80125d2:	4660      	mov	r0, ip
 80125d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125d6:	2e00      	cmp	r6, #0
 80125d8:	d0ac      	beq.n	8012534 <rcl_clock_init+0x1c>
 80125da:	2c00      	cmp	r4, #0
 80125dc:	d0aa      	beq.n	8012534 <rcl_clock_init+0x1c>
 80125de:	2300      	movs	r3, #0
 80125e0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80125e4:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8012604 <rcl_clock_init+0xec>
 80125e8:	6133      	str	r3, [r6, #16]
 80125ea:	f106 0514 	add.w	r5, r6, #20
 80125ee:	469c      	mov	ip, r3
 80125f0:	2702      	movs	r7, #2
 80125f2:	e7b1      	b.n	8012558 <rcl_clock_init+0x40>
 80125f4:	f04f 0c0a 	mov.w	ip, #10
 80125f8:	e79e      	b.n	8012538 <rcl_clock_init+0x20>
 80125fa:	bf00      	nop
 80125fc:	080124f9 	.word	0x080124f9
 8012600:	080124f1 	.word	0x080124f1
 8012604:	080124e9 	.word	0x080124e9

08012608 <rcl_clock_get_now>:
 8012608:	b140      	cbz	r0, 801261c <rcl_clock_get_now+0x14>
 801260a:	b139      	cbz	r1, 801261c <rcl_clock_get_now+0x14>
 801260c:	7803      	ldrb	r3, [r0, #0]
 801260e:	b11b      	cbz	r3, 8012618 <rcl_clock_get_now+0x10>
 8012610:	68c3      	ldr	r3, [r0, #12]
 8012612:	b10b      	cbz	r3, 8012618 <rcl_clock_get_now+0x10>
 8012614:	6900      	ldr	r0, [r0, #16]
 8012616:	4718      	bx	r3
 8012618:	2001      	movs	r0, #1
 801261a:	4770      	bx	lr
 801261c:	200b      	movs	r0, #11
 801261e:	4770      	bx	lr

08012620 <rcl_clock_add_jump_callback>:
 8012620:	b082      	sub	sp, #8
 8012622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012626:	a906      	add	r1, sp, #24
 8012628:	e881 000c 	stmia.w	r1, {r2, r3}
 801262c:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8012630:	b320      	cbz	r0, 801267c <rcl_clock_add_jump_callback+0x5c>
 8012632:	4604      	mov	r4, r0
 8012634:	3014      	adds	r0, #20
 8012636:	f7fa fb61 	bl	800ccfc <rcutils_allocator_is_valid>
 801263a:	b1f8      	cbz	r0, 801267c <rcl_clock_add_jump_callback+0x5c>
 801263c:	b1f6      	cbz	r6, 801267c <rcl_clock_add_jump_callback+0x5c>
 801263e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012640:	2b00      	cmp	r3, #0
 8012642:	db1b      	blt.n	801267c <rcl_clock_add_jump_callback+0x5c>
 8012644:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8012648:	2a01      	cmp	r2, #1
 801264a:	f173 0300 	sbcs.w	r3, r3, #0
 801264e:	da15      	bge.n	801267c <rcl_clock_add_jump_callback+0x5c>
 8012650:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8012654:	2f00      	cmp	r7, #0
 8012656:	d042      	beq.n	80126de <rcl_clock_add_jump_callback+0xbe>
 8012658:	2300      	movs	r3, #0
 801265a:	4602      	mov	r2, r0
 801265c:	e003      	b.n	8012666 <rcl_clock_add_jump_callback+0x46>
 801265e:	42bb      	cmp	r3, r7
 8012660:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8012664:	d011      	beq.n	801268a <rcl_clock_add_jump_callback+0x6a>
 8012666:	6811      	ldr	r1, [r2, #0]
 8012668:	42b1      	cmp	r1, r6
 801266a:	f103 0301 	add.w	r3, r3, #1
 801266e:	d1f6      	bne.n	801265e <rcl_clock_add_jump_callback+0x3e>
 8012670:	6a11      	ldr	r1, [r2, #32]
 8012672:	42a9      	cmp	r1, r5
 8012674:	d1f3      	bne.n	801265e <rcl_clock_add_jump_callback+0x3e>
 8012676:	f04f 0e01 	mov.w	lr, #1
 801267a:	e001      	b.n	8012680 <rcl_clock_add_jump_callback+0x60>
 801267c:	f04f 0e0b 	mov.w	lr, #11
 8012680:	4670      	mov	r0, lr
 8012682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012686:	b002      	add	sp, #8
 8012688:	4770      	bx	lr
 801268a:	3301      	adds	r3, #1
 801268c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8012690:	00d9      	lsls	r1, r3, #3
 8012692:	69e3      	ldr	r3, [r4, #28]
 8012694:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8012696:	4798      	blx	r3
 8012698:	b1f0      	cbz	r0, 80126d8 <rcl_clock_add_jump_callback+0xb8>
 801269a:	68a3      	ldr	r3, [r4, #8]
 801269c:	6060      	str	r0, [r4, #4]
 801269e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80126a2:	f10d 0c18 	add.w	ip, sp, #24
 80126a6:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 80126aa:	f103 0801 	add.w	r8, r3, #1
 80126ae:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 80126b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80126b6:	f106 0708 	add.w	r7, r6, #8
 80126ba:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80126bc:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80126c0:	f04f 0e00 	mov.w	lr, #0
 80126c4:	e887 0003 	stmia.w	r7, {r0, r1}
 80126c8:	6235      	str	r5, [r6, #32]
 80126ca:	4670      	mov	r0, lr
 80126cc:	f8c4 8008 	str.w	r8, [r4, #8]
 80126d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126d4:	b002      	add	sp, #8
 80126d6:	4770      	bx	lr
 80126d8:	f04f 0e0a 	mov.w	lr, #10
 80126dc:	e7d0      	b.n	8012680 <rcl_clock_add_jump_callback+0x60>
 80126de:	2128      	movs	r1, #40	@ 0x28
 80126e0:	e7d7      	b.n	8012692 <rcl_clock_add_jump_callback+0x72>
 80126e2:	bf00      	nop

080126e4 <rcl_clock_remove_jump_callback>:
 80126e4:	2800      	cmp	r0, #0
 80126e6:	d057      	beq.n	8012798 <rcl_clock_remove_jump_callback+0xb4>
 80126e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126ec:	4605      	mov	r5, r0
 80126ee:	3014      	adds	r0, #20
 80126f0:	4688      	mov	r8, r1
 80126f2:	4692      	mov	sl, r2
 80126f4:	f7fa fb02 	bl	800ccfc <rcutils_allocator_is_valid>
 80126f8:	2800      	cmp	r0, #0
 80126fa:	d03b      	beq.n	8012774 <rcl_clock_remove_jump_callback+0x90>
 80126fc:	f1b8 0f00 	cmp.w	r8, #0
 8012700:	d038      	beq.n	8012774 <rcl_clock_remove_jump_callback+0x90>
 8012702:	68ae      	ldr	r6, [r5, #8]
 8012704:	b166      	cbz	r6, 8012720 <rcl_clock_remove_jump_callback+0x3c>
 8012706:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801270a:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 801270e:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8012712:	464c      	mov	r4, r9
 8012714:	6823      	ldr	r3, [r4, #0]
 8012716:	4543      	cmp	r3, r8
 8012718:	d005      	beq.n	8012726 <rcl_clock_remove_jump_callback+0x42>
 801271a:	3428      	adds	r4, #40	@ 0x28
 801271c:	42a7      	cmp	r7, r4
 801271e:	d1f9      	bne.n	8012714 <rcl_clock_remove_jump_callback+0x30>
 8012720:	2001      	movs	r0, #1
 8012722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012726:	6a23      	ldr	r3, [r4, #32]
 8012728:	3428      	adds	r4, #40	@ 0x28
 801272a:	42bc      	cmp	r4, r7
 801272c:	d02d      	beq.n	801278a <rcl_clock_remove_jump_callback+0xa6>
 801272e:	4553      	cmp	r3, sl
 8012730:	d1f0      	bne.n	8012714 <rcl_clock_remove_jump_callback+0x30>
 8012732:	46a6      	mov	lr, r4
 8012734:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012738:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 801273c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012740:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012744:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012748:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801274c:	3428      	adds	r4, #40	@ 0x28
 801274e:	42a7      	cmp	r7, r4
 8012750:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012754:	d1ed      	bne.n	8012732 <rcl_clock_remove_jump_callback+0x4e>
 8012756:	3e01      	subs	r6, #1
 8012758:	60ae      	str	r6, [r5, #8]
 801275a:	b176      	cbz	r6, 801277a <rcl_clock_remove_jump_callback+0x96>
 801275c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8012760:	69eb      	ldr	r3, [r5, #28]
 8012762:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8012764:	00f1      	lsls	r1, r6, #3
 8012766:	4648      	mov	r0, r9
 8012768:	4798      	blx	r3
 801276a:	b1b8      	cbz	r0, 801279c <rcl_clock_remove_jump_callback+0xb8>
 801276c:	6068      	str	r0, [r5, #4]
 801276e:	2000      	movs	r0, #0
 8012770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012774:	200b      	movs	r0, #11
 8012776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801277a:	4648      	mov	r0, r9
 801277c:	69ab      	ldr	r3, [r5, #24]
 801277e:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8012780:	4798      	blx	r3
 8012782:	606e      	str	r6, [r5, #4]
 8012784:	4630      	mov	r0, r6
 8012786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801278a:	4553      	cmp	r3, sl
 801278c:	d1c8      	bne.n	8012720 <rcl_clock_remove_jump_callback+0x3c>
 801278e:	3e01      	subs	r6, #1
 8012790:	60ae      	str	r6, [r5, #8]
 8012792:	2e00      	cmp	r6, #0
 8012794:	d1e2      	bne.n	801275c <rcl_clock_remove_jump_callback+0x78>
 8012796:	e7f0      	b.n	801277a <rcl_clock_remove_jump_callback+0x96>
 8012798:	200b      	movs	r0, #11
 801279a:	4770      	bx	lr
 801279c:	200a      	movs	r0, #10
 801279e:	e7ea      	b.n	8012776 <rcl_clock_remove_jump_callback+0x92>

080127a0 <_rcl_timer_time_jump>:
 80127a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127a4:	4605      	mov	r5, r0
 80127a6:	b084      	sub	sp, #16
 80127a8:	4614      	mov	r4, r2
 80127aa:	b131      	cbz	r1, 80127ba <_rcl_timer_time_jump+0x1a>
 80127ac:	7803      	ldrb	r3, [r0, #0]
 80127ae:	3b02      	subs	r3, #2
 80127b0:	2b01      	cmp	r3, #1
 80127b2:	d93f      	bls.n	8012834 <_rcl_timer_time_jump+0x94>
 80127b4:	b004      	add	sp, #16
 80127b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127ba:	6813      	ldr	r3, [r2, #0]
 80127bc:	a902      	add	r1, sp, #8
 80127be:	6818      	ldr	r0, [r3, #0]
 80127c0:	f7ff ff22 	bl	8012608 <rcl_clock_get_now>
 80127c4:	2800      	cmp	r0, #0
 80127c6:	d1f5      	bne.n	80127b4 <_rcl_timer_time_jump+0x14>
 80127c8:	6820      	ldr	r0, [r4, #0]
 80127ca:	2105      	movs	r1, #5
 80127cc:	3020      	adds	r0, #32
 80127ce:	f001 fdf7 	bl	80143c0 <__atomic_load_8>
 80127d2:	6823      	ldr	r3, [r4, #0]
 80127d4:	4681      	mov	r9, r0
 80127d6:	4688      	mov	r8, r1
 80127d8:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80127dc:	2105      	movs	r1, #5
 80127de:	f001 fdef 	bl	80143c0 <__atomic_load_8>
 80127e2:	4607      	mov	r7, r0
 80127e4:	6820      	ldr	r0, [r4, #0]
 80127e6:	460e      	mov	r6, r1
 80127e8:	3018      	adds	r0, #24
 80127ea:	2105      	movs	r1, #5
 80127ec:	f001 fde8 	bl	80143c0 <__atomic_load_8>
 80127f0:	782b      	ldrb	r3, [r5, #0]
 80127f2:	9a02      	ldr	r2, [sp, #8]
 80127f4:	3b02      	subs	r3, #2
 80127f6:	2b01      	cmp	r3, #1
 80127f8:	460d      	mov	r5, r1
 80127fa:	9b03      	ldr	r3, [sp, #12]
 80127fc:	4682      	mov	sl, r0
 80127fe:	d937      	bls.n	8012870 <_rcl_timer_time_jump+0xd0>
 8012800:	42ba      	cmp	r2, r7
 8012802:	eb73 0106 	sbcs.w	r1, r3, r6
 8012806:	da5f      	bge.n	80128c8 <_rcl_timer_time_jump+0x128>
 8012808:	454a      	cmp	r2, r9
 801280a:	eb73 0108 	sbcs.w	r1, r3, r8
 801280e:	dad1      	bge.n	80127b4 <_rcl_timer_time_jump+0x14>
 8012810:	6820      	ldr	r0, [r4, #0]
 8012812:	eb1a 0202 	adds.w	r2, sl, r2
 8012816:	eb43 0305 	adc.w	r3, r3, r5
 801281a:	2505      	movs	r5, #5
 801281c:	3028      	adds	r0, #40	@ 0x28
 801281e:	9500      	str	r5, [sp, #0]
 8012820:	f001 fe04 	bl	801442c <__atomic_store_8>
 8012824:	6820      	ldr	r0, [r4, #0]
 8012826:	9500      	str	r5, [sp, #0]
 8012828:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801282c:	3020      	adds	r0, #32
 801282e:	f001 fdfd 	bl	801442c <__atomic_store_8>
 8012832:	e7bf      	b.n	80127b4 <_rcl_timer_time_jump+0x14>
 8012834:	6813      	ldr	r3, [r2, #0]
 8012836:	a902      	add	r1, sp, #8
 8012838:	6818      	ldr	r0, [r3, #0]
 801283a:	f7ff fee5 	bl	8012608 <rcl_clock_get_now>
 801283e:	2800      	cmp	r0, #0
 8012840:	d1b8      	bne.n	80127b4 <_rcl_timer_time_jump+0x14>
 8012842:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012846:	4313      	orrs	r3, r2
 8012848:	d0b4      	beq.n	80127b4 <_rcl_timer_time_jump+0x14>
 801284a:	6820      	ldr	r0, [r4, #0]
 801284c:	2105      	movs	r1, #5
 801284e:	3028      	adds	r0, #40	@ 0x28
 8012850:	f001 fdb6 	bl	80143c0 <__atomic_load_8>
 8012854:	9d02      	ldr	r5, [sp, #8]
 8012856:	9b03      	ldr	r3, [sp, #12]
 8012858:	4602      	mov	r2, r0
 801285a:	6820      	ldr	r0, [r4, #0]
 801285c:	1b52      	subs	r2, r2, r5
 801285e:	f04f 0405 	mov.w	r4, #5
 8012862:	9400      	str	r4, [sp, #0]
 8012864:	eb61 0303 	sbc.w	r3, r1, r3
 8012868:	3030      	adds	r0, #48	@ 0x30
 801286a:	f001 fddf 	bl	801442c <__atomic_store_8>
 801286e:	e7a1      	b.n	80127b4 <_rcl_timer_time_jump+0x14>
 8012870:	4313      	orrs	r3, r2
 8012872:	d09f      	beq.n	80127b4 <_rcl_timer_time_jump+0x14>
 8012874:	6820      	ldr	r0, [r4, #0]
 8012876:	f04f 0805 	mov.w	r8, #5
 801287a:	2300      	movs	r3, #0
 801287c:	f8cd 8000 	str.w	r8, [sp]
 8012880:	3030      	adds	r0, #48	@ 0x30
 8012882:	2200      	movs	r2, #0
 8012884:	f001 fe08 	bl	8014498 <__atomic_exchange_8>
 8012888:	ea51 0300 	orrs.w	r3, r1, r0
 801288c:	4606      	mov	r6, r0
 801288e:	460f      	mov	r7, r1
 8012890:	d090      	beq.n	80127b4 <_rcl_timer_time_jump+0x14>
 8012892:	9a02      	ldr	r2, [sp, #8]
 8012894:	9b03      	ldr	r3, [sp, #12]
 8012896:	f8cd 8000 	str.w	r8, [sp]
 801289a:	1a12      	subs	r2, r2, r0
 801289c:	6820      	ldr	r0, [r4, #0]
 801289e:	eb63 0301 	sbc.w	r3, r3, r1
 80128a2:	eb12 020a 	adds.w	r2, r2, sl
 80128a6:	eb43 0305 	adc.w	r3, r3, r5
 80128aa:	3028      	adds	r0, #40	@ 0x28
 80128ac:	f001 fdbe 	bl	801442c <__atomic_store_8>
 80128b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80128b4:	f8cd 8000 	str.w	r8, [sp]
 80128b8:	6820      	ldr	r0, [r4, #0]
 80128ba:	1b92      	subs	r2, r2, r6
 80128bc:	eb63 0307 	sbc.w	r3, r3, r7
 80128c0:	3020      	adds	r0, #32
 80128c2:	f001 fdb3 	bl	801442c <__atomic_store_8>
 80128c6:	e775      	b.n	80127b4 <_rcl_timer_time_jump+0x14>
 80128c8:	6820      	ldr	r0, [r4, #0]
 80128ca:	3008      	adds	r0, #8
 80128cc:	f004 f94a 	bl	8016b64 <rcl_trigger_guard_condition>
 80128d0:	e770      	b.n	80127b4 <_rcl_timer_time_jump+0x14>
 80128d2:	bf00      	nop

080128d4 <rcl_get_zero_initialized_timer>:
 80128d4:	4b01      	ldr	r3, [pc, #4]	@ (80128dc <rcl_get_zero_initialized_timer+0x8>)
 80128d6:	6818      	ldr	r0, [r3, #0]
 80128d8:	4770      	bx	lr
 80128da:	bf00      	nop
 80128dc:	08018bb8 	.word	0x08018bb8

080128e0 <rcl_timer_init>:
 80128e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128e4:	b0aa      	sub	sp, #168	@ 0xa8
 80128e6:	4604      	mov	r4, r0
 80128e8:	a835      	add	r0, sp, #212	@ 0xd4
 80128ea:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 80128ee:	460d      	mov	r5, r1
 80128f0:	4692      	mov	sl, r2
 80128f2:	f7fa fa03 	bl	800ccfc <rcutils_allocator_is_valid>
 80128f6:	2800      	cmp	r0, #0
 80128f8:	d064      	beq.n	80129c4 <rcl_timer_init+0xe4>
 80128fa:	2c00      	cmp	r4, #0
 80128fc:	d062      	beq.n	80129c4 <rcl_timer_init+0xe4>
 80128fe:	2d00      	cmp	r5, #0
 8012900:	d060      	beq.n	80129c4 <rcl_timer_init+0xe4>
 8012902:	2f00      	cmp	r7, #0
 8012904:	db5e      	blt.n	80129c4 <rcl_timer_init+0xe4>
 8012906:	6823      	ldr	r3, [r4, #0]
 8012908:	b123      	cbz	r3, 8012914 <rcl_timer_init+0x34>
 801290a:	2664      	movs	r6, #100	@ 0x64
 801290c:	4630      	mov	r0, r6
 801290e:	b02a      	add	sp, #168	@ 0xa8
 8012910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012914:	a908      	add	r1, sp, #32
 8012916:	4628      	mov	r0, r5
 8012918:	f7ff fe76 	bl	8012608 <rcl_clock_get_now>
 801291c:	4606      	mov	r6, r0
 801291e:	2800      	cmp	r0, #0
 8012920:	d1f4      	bne.n	801290c <rcl_timer_init+0x2c>
 8012922:	ae06      	add	r6, sp, #24
 8012924:	4630      	mov	r0, r6
 8012926:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 801292a:	f004 f823 	bl	8016974 <rcl_get_zero_initialized_guard_condition>
 801292e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012932:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8012936:	ae0b      	add	r6, sp, #44	@ 0x2c
 8012938:	e889 0003 	stmia.w	r9, {r0, r1}
 801293c:	4630      	mov	r0, r6
 801293e:	f004 f8f5 	bl	8016b2c <rcl_guard_condition_get_default_options>
 8012942:	ab0d      	add	r3, sp, #52	@ 0x34
 8012944:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012948:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801294c:	4651      	mov	r1, sl
 801294e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012952:	4648      	mov	r0, r9
 8012954:	f004 f818 	bl	8016988 <rcl_guard_condition_init>
 8012958:	4606      	mov	r6, r0
 801295a:	2800      	cmp	r0, #0
 801295c:	d1d6      	bne.n	801290c <rcl_timer_init+0x2c>
 801295e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012960:	781b      	ldrb	r3, [r3, #0]
 8012962:	2b01      	cmp	r3, #1
 8012964:	d033      	beq.n	80129ce <rcl_timer_init+0xee>
 8012966:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8012968:	911a      	str	r1, [sp, #104]	@ 0x68
 801296a:	4642      	mov	r2, r8
 801296c:	463b      	mov	r3, r7
 801296e:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8012972:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012976:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8012a28 <rcl_timer_init+0x148>
 801297a:	eb12 0008 	adds.w	r0, r2, r8
 801297e:	eb47 0103 	adc.w	r1, r7, r3
 8012982:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8012986:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 801298a:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 801298e:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8012992:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012996:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 801299a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801299e:	f8de 3000 	ldr.w	r3, [lr]
 80129a2:	f8cc 3000 	str.w	r3, [ip]
 80129a6:	f04f 0a00 	mov.w	sl, #0
 80129aa:	4619      	mov	r1, r3
 80129ac:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 80129b0:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 80129b2:	2050      	movs	r0, #80	@ 0x50
 80129b4:	4798      	blx	r3
 80129b6:	6020      	str	r0, [r4, #0]
 80129b8:	b358      	cbz	r0, 8012a12 <rcl_timer_init+0x132>
 80129ba:	2250      	movs	r2, #80	@ 0x50
 80129bc:	a916      	add	r1, sp, #88	@ 0x58
 80129be:	f004 fea4 	bl	801770a <memcpy>
 80129c2:	e7a3      	b.n	801290c <rcl_timer_init+0x2c>
 80129c4:	260b      	movs	r6, #11
 80129c6:	4630      	mov	r0, r6
 80129c8:	b02a      	add	sp, #168	@ 0xa8
 80129ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129ce:	2001      	movs	r0, #1
 80129d0:	2100      	movs	r1, #0
 80129d2:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 80129d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80129da:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80129de:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 80129e2:	4a13      	ldr	r2, [pc, #76]	@ (8012a30 <rcl_timer_init+0x150>)
 80129e4:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80129e8:	9405      	str	r4, [sp, #20]
 80129ea:	9204      	str	r2, [sp, #16]
 80129ec:	ab12      	add	r3, sp, #72	@ 0x48
 80129ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80129f0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80129f4:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80129f8:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80129fc:	4628      	mov	r0, r5
 80129fe:	f7ff fe0f 	bl	8012620 <rcl_clock_add_jump_callback>
 8012a02:	4682      	mov	sl, r0
 8012a04:	2800      	cmp	r0, #0
 8012a06:	d0ae      	beq.n	8012966 <rcl_timer_init+0x86>
 8012a08:	4648      	mov	r0, r9
 8012a0a:	f004 f869 	bl	8016ae0 <rcl_guard_condition_fini>
 8012a0e:	4656      	mov	r6, sl
 8012a10:	e77c      	b.n	801290c <rcl_timer_init+0x2c>
 8012a12:	4648      	mov	r0, r9
 8012a14:	f004 f864 	bl	8016ae0 <rcl_guard_condition_fini>
 8012a18:	4905      	ldr	r1, [pc, #20]	@ (8012a30 <rcl_timer_init+0x150>)
 8012a1a:	4622      	mov	r2, r4
 8012a1c:	4628      	mov	r0, r5
 8012a1e:	f7ff fe61 	bl	80126e4 <rcl_clock_remove_jump_callback>
 8012a22:	260a      	movs	r6, #10
 8012a24:	e772      	b.n	801290c <rcl_timer_init+0x2c>
 8012a26:	bf00      	nop
	...
 8012a30:	080127a1 	.word	0x080127a1

08012a34 <rcl_timer_call>:
 8012a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a38:	b087      	sub	sp, #28
 8012a3a:	2800      	cmp	r0, #0
 8012a3c:	d06d      	beq.n	8012b1a <rcl_timer_call+0xe6>
 8012a3e:	6803      	ldr	r3, [r0, #0]
 8012a40:	4604      	mov	r4, r0
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d063      	beq.n	8012b0e <rcl_timer_call+0xda>
 8012a46:	f3bf 8f5b 	dmb	ish
 8012a4a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012a4e:	f3bf 8f5b 	dmb	ish
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d150      	bne.n	8012af8 <rcl_timer_call+0xc4>
 8012a56:	6803      	ldr	r3, [r0, #0]
 8012a58:	a904      	add	r1, sp, #16
 8012a5a:	6818      	ldr	r0, [r3, #0]
 8012a5c:	f7ff fdd4 	bl	8012608 <rcl_clock_get_now>
 8012a60:	4605      	mov	r5, r0
 8012a62:	2800      	cmp	r0, #0
 8012a64:	d14a      	bne.n	8012afc <rcl_timer_call+0xc8>
 8012a66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	db4a      	blt.n	8012b04 <rcl_timer_call+0xd0>
 8012a6e:	6820      	ldr	r0, [r4, #0]
 8012a70:	f04f 0a05 	mov.w	sl, #5
 8012a74:	f8cd a000 	str.w	sl, [sp]
 8012a78:	3020      	adds	r0, #32
 8012a7a:	f001 fd0d 	bl	8014498 <__atomic_exchange_8>
 8012a7e:	6823      	ldr	r3, [r4, #0]
 8012a80:	f3bf 8f5b 	dmb	ish
 8012a84:	4680      	mov	r8, r0
 8012a86:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8012a8a:	f3bf 8f5b 	dmb	ish
 8012a8e:	6820      	ldr	r0, [r4, #0]
 8012a90:	4689      	mov	r9, r1
 8012a92:	3028      	adds	r0, #40	@ 0x28
 8012a94:	4651      	mov	r1, sl
 8012a96:	f001 fc93 	bl	80143c0 <__atomic_load_8>
 8012a9a:	4606      	mov	r6, r0
 8012a9c:	6820      	ldr	r0, [r4, #0]
 8012a9e:	460f      	mov	r7, r1
 8012aa0:	3018      	adds	r0, #24
 8012aa2:	4651      	mov	r1, sl
 8012aa4:	f001 fc8c 	bl	80143c0 <__atomic_load_8>
 8012aa8:	1836      	adds	r6, r6, r0
 8012aaa:	4602      	mov	r2, r0
 8012aac:	4682      	mov	sl, r0
 8012aae:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8012ab2:	eb47 0701 	adc.w	r7, r7, r1
 8012ab6:	4286      	cmp	r6, r0
 8012ab8:	460b      	mov	r3, r1
 8012aba:	eb77 010c 	sbcs.w	r1, r7, ip
 8012abe:	da04      	bge.n	8012aca <rcl_timer_call+0x96>
 8012ac0:	ea53 0102 	orrs.w	r1, r3, r2
 8012ac4:	d12e      	bne.n	8012b24 <rcl_timer_call+0xf0>
 8012ac6:	4606      	mov	r6, r0
 8012ac8:	4667      	mov	r7, ip
 8012aca:	6820      	ldr	r0, [r4, #0]
 8012acc:	2105      	movs	r1, #5
 8012ace:	4632      	mov	r2, r6
 8012ad0:	463b      	mov	r3, r7
 8012ad2:	3028      	adds	r0, #40	@ 0x28
 8012ad4:	9100      	str	r1, [sp, #0]
 8012ad6:	f001 fca9 	bl	801442c <__atomic_store_8>
 8012ada:	f1bb 0f00 	cmp.w	fp, #0
 8012ade:	d00d      	beq.n	8012afc <rcl_timer_call+0xc8>
 8012ae0:	9a04      	ldr	r2, [sp, #16]
 8012ae2:	9b05      	ldr	r3, [sp, #20]
 8012ae4:	ebb2 0208 	subs.w	r2, r2, r8
 8012ae8:	4620      	mov	r0, r4
 8012aea:	eb63 0309 	sbc.w	r3, r3, r9
 8012aee:	47d8      	blx	fp
 8012af0:	4628      	mov	r0, r5
 8012af2:	b007      	add	sp, #28
 8012af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012af8:	f240 3521 	movw	r5, #801	@ 0x321
 8012afc:	4628      	mov	r0, r5
 8012afe:	b007      	add	sp, #28
 8012b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b04:	2501      	movs	r5, #1
 8012b06:	4628      	mov	r0, r5
 8012b08:	b007      	add	sp, #28
 8012b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b0e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8012b12:	4628      	mov	r0, r5
 8012b14:	b007      	add	sp, #28
 8012b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b1a:	250b      	movs	r5, #11
 8012b1c:	4628      	mov	r0, r5
 8012b1e:	b007      	add	sp, #28
 8012b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b24:	1b80      	subs	r0, r0, r6
 8012b26:	eb6c 0107 	sbc.w	r1, ip, r7
 8012b2a:	3801      	subs	r0, #1
 8012b2c:	f161 0100 	sbc.w	r1, r1, #0
 8012b30:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8012b34:	f7ed fd98 	bl	8000668 <__aeabi_ldivmod>
 8012b38:	9b02      	ldr	r3, [sp, #8]
 8012b3a:	3001      	adds	r0, #1
 8012b3c:	f141 0100 	adc.w	r1, r1, #0
 8012b40:	fb00 f303 	mul.w	r3, r0, r3
 8012b44:	fb01 330a 	mla	r3, r1, sl, r3
 8012b48:	fba0 0a0a 	umull	r0, sl, r0, sl
 8012b4c:	1986      	adds	r6, r0, r6
 8012b4e:	4453      	add	r3, sl
 8012b50:	eb43 0707 	adc.w	r7, r3, r7
 8012b54:	e7b9      	b.n	8012aca <rcl_timer_call+0x96>
 8012b56:	bf00      	nop

08012b58 <rcl_timer_is_ready>:
 8012b58:	b570      	push	{r4, r5, r6, lr}
 8012b5a:	b082      	sub	sp, #8
 8012b5c:	b378      	cbz	r0, 8012bbe <rcl_timer_is_ready+0x66>
 8012b5e:	6803      	ldr	r3, [r0, #0]
 8012b60:	4604      	mov	r4, r0
 8012b62:	b383      	cbz	r3, 8012bc6 <rcl_timer_is_ready+0x6e>
 8012b64:	460d      	mov	r5, r1
 8012b66:	b351      	cbz	r1, 8012bbe <rcl_timer_is_ready+0x66>
 8012b68:	f3bf 8f5b 	dmb	ish
 8012b6c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012b70:	f3bf 8f5b 	dmb	ish
 8012b74:	b953      	cbnz	r3, 8012b8c <rcl_timer_is_ready+0x34>
 8012b76:	6803      	ldr	r3, [r0, #0]
 8012b78:	4669      	mov	r1, sp
 8012b7a:	6818      	ldr	r0, [r3, #0]
 8012b7c:	f7ff fd44 	bl	8012608 <rcl_clock_get_now>
 8012b80:	4606      	mov	r6, r0
 8012b82:	b140      	cbz	r0, 8012b96 <rcl_timer_is_ready+0x3e>
 8012b84:	f240 3321 	movw	r3, #801	@ 0x321
 8012b88:	4298      	cmp	r0, r3
 8012b8a:	d101      	bne.n	8012b90 <rcl_timer_is_ready+0x38>
 8012b8c:	2600      	movs	r6, #0
 8012b8e:	702e      	strb	r6, [r5, #0]
 8012b90:	4630      	mov	r0, r6
 8012b92:	b002      	add	sp, #8
 8012b94:	bd70      	pop	{r4, r5, r6, pc}
 8012b96:	6820      	ldr	r0, [r4, #0]
 8012b98:	2105      	movs	r1, #5
 8012b9a:	3028      	adds	r0, #40	@ 0x28
 8012b9c:	f001 fc10 	bl	80143c0 <__atomic_load_8>
 8012ba0:	9b00      	ldr	r3, [sp, #0]
 8012ba2:	1ac0      	subs	r0, r0, r3
 8012ba4:	9b01      	ldr	r3, [sp, #4]
 8012ba6:	eb61 0103 	sbc.w	r1, r1, r3
 8012baa:	2801      	cmp	r0, #1
 8012bac:	f171 0300 	sbcs.w	r3, r1, #0
 8012bb0:	bfb4      	ite	lt
 8012bb2:	2301      	movlt	r3, #1
 8012bb4:	2300      	movge	r3, #0
 8012bb6:	4630      	mov	r0, r6
 8012bb8:	702b      	strb	r3, [r5, #0]
 8012bba:	b002      	add	sp, #8
 8012bbc:	bd70      	pop	{r4, r5, r6, pc}
 8012bbe:	260b      	movs	r6, #11
 8012bc0:	4630      	mov	r0, r6
 8012bc2:	b002      	add	sp, #8
 8012bc4:	bd70      	pop	{r4, r5, r6, pc}
 8012bc6:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8012bca:	e7e1      	b.n	8012b90 <rcl_timer_is_ready+0x38>

08012bcc <rcl_timer_get_time_until_next_call>:
 8012bcc:	b570      	push	{r4, r5, r6, lr}
 8012bce:	b082      	sub	sp, #8
 8012bd0:	b330      	cbz	r0, 8012c20 <rcl_timer_get_time_until_next_call+0x54>
 8012bd2:	6803      	ldr	r3, [r0, #0]
 8012bd4:	4604      	mov	r4, r0
 8012bd6:	b33b      	cbz	r3, 8012c28 <rcl_timer_get_time_until_next_call+0x5c>
 8012bd8:	460d      	mov	r5, r1
 8012bda:	b309      	cbz	r1, 8012c20 <rcl_timer_get_time_until_next_call+0x54>
 8012bdc:	f3bf 8f5b 	dmb	ish
 8012be0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012be4:	f3bf 8f5b 	dmb	ish
 8012be8:	b9ab      	cbnz	r3, 8012c16 <rcl_timer_get_time_until_next_call+0x4a>
 8012bea:	6803      	ldr	r3, [r0, #0]
 8012bec:	4669      	mov	r1, sp
 8012bee:	6818      	ldr	r0, [r3, #0]
 8012bf0:	f7ff fd0a 	bl	8012608 <rcl_clock_get_now>
 8012bf4:	4606      	mov	r6, r0
 8012bf6:	b958      	cbnz	r0, 8012c10 <rcl_timer_get_time_until_next_call+0x44>
 8012bf8:	6820      	ldr	r0, [r4, #0]
 8012bfa:	2105      	movs	r1, #5
 8012bfc:	3028      	adds	r0, #40	@ 0x28
 8012bfe:	f001 fbdf 	bl	80143c0 <__atomic_load_8>
 8012c02:	9b00      	ldr	r3, [sp, #0]
 8012c04:	1ac0      	subs	r0, r0, r3
 8012c06:	9b01      	ldr	r3, [sp, #4]
 8012c08:	6028      	str	r0, [r5, #0]
 8012c0a:	eb61 0103 	sbc.w	r1, r1, r3
 8012c0e:	6069      	str	r1, [r5, #4]
 8012c10:	4630      	mov	r0, r6
 8012c12:	b002      	add	sp, #8
 8012c14:	bd70      	pop	{r4, r5, r6, pc}
 8012c16:	f240 3621 	movw	r6, #801	@ 0x321
 8012c1a:	4630      	mov	r0, r6
 8012c1c:	b002      	add	sp, #8
 8012c1e:	bd70      	pop	{r4, r5, r6, pc}
 8012c20:	260b      	movs	r6, #11
 8012c22:	4630      	mov	r0, r6
 8012c24:	b002      	add	sp, #8
 8012c26:	bd70      	pop	{r4, r5, r6, pc}
 8012c28:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8012c2c:	e7f0      	b.n	8012c10 <rcl_timer_get_time_until_next_call+0x44>
 8012c2e:	bf00      	nop

08012c30 <rcl_timer_get_guard_condition>:
 8012c30:	b130      	cbz	r0, 8012c40 <rcl_timer_get_guard_condition+0x10>
 8012c32:	6800      	ldr	r0, [r0, #0]
 8012c34:	b120      	cbz	r0, 8012c40 <rcl_timer_get_guard_condition+0x10>
 8012c36:	68c3      	ldr	r3, [r0, #12]
 8012c38:	b10b      	cbz	r3, 8012c3e <rcl_timer_get_guard_condition+0xe>
 8012c3a:	3008      	adds	r0, #8
 8012c3c:	4770      	bx	lr
 8012c3e:	4618      	mov	r0, r3
 8012c40:	4770      	bx	lr
 8012c42:	bf00      	nop

08012c44 <rcl_validate_enclave_name_with_size>:
 8012c44:	b378      	cbz	r0, 8012ca6 <rcl_validate_enclave_name_with_size+0x62>
 8012c46:	b570      	push	{r4, r5, r6, lr}
 8012c48:	4615      	mov	r5, r2
 8012c4a:	b0c2      	sub	sp, #264	@ 0x108
 8012c4c:	b302      	cbz	r2, 8012c90 <rcl_validate_enclave_name_with_size+0x4c>
 8012c4e:	461e      	mov	r6, r3
 8012c50:	466a      	mov	r2, sp
 8012c52:	ab01      	add	r3, sp, #4
 8012c54:	460c      	mov	r4, r1
 8012c56:	f002 f815 	bl	8014c84 <rmw_validate_namespace_with_size>
 8012c5a:	4684      	mov	ip, r0
 8012c5c:	b9e8      	cbnz	r0, 8012c9a <rcl_validate_enclave_name_with_size+0x56>
 8012c5e:	9b00      	ldr	r3, [sp, #0]
 8012c60:	b923      	cbnz	r3, 8012c6c <rcl_validate_enclave_name_with_size+0x28>
 8012c62:	2300      	movs	r3, #0
 8012c64:	602b      	str	r3, [r5, #0]
 8012c66:	4660      	mov	r0, ip
 8012c68:	b042      	add	sp, #264	@ 0x108
 8012c6a:	bd70      	pop	{r4, r5, r6, pc}
 8012c6c:	2b07      	cmp	r3, #7
 8012c6e:	d007      	beq.n	8012c80 <rcl_validate_enclave_name_with_size+0x3c>
 8012c70:	1e5a      	subs	r2, r3, #1
 8012c72:	2a05      	cmp	r2, #5
 8012c74:	d833      	bhi.n	8012cde <rcl_validate_enclave_name_with_size+0x9a>
 8012c76:	e8df f002 	tbb	[pc, r2]
 8012c7a:	2c2f      	.short	0x2c2f
 8012c7c:	1a232629 	.word	0x1a232629
 8012c80:	2cff      	cmp	r4, #255	@ 0xff
 8012c82:	d9ee      	bls.n	8012c62 <rcl_validate_enclave_name_with_size+0x1e>
 8012c84:	602b      	str	r3, [r5, #0]
 8012c86:	2e00      	cmp	r6, #0
 8012c88:	d0ed      	beq.n	8012c66 <rcl_validate_enclave_name_with_size+0x22>
 8012c8a:	23fe      	movs	r3, #254	@ 0xfe
 8012c8c:	6033      	str	r3, [r6, #0]
 8012c8e:	e7ea      	b.n	8012c66 <rcl_validate_enclave_name_with_size+0x22>
 8012c90:	f04f 0c0b 	mov.w	ip, #11
 8012c94:	4660      	mov	r0, ip
 8012c96:	b042      	add	sp, #264	@ 0x108
 8012c98:	bd70      	pop	{r4, r5, r6, pc}
 8012c9a:	f7fe fe63 	bl	8011964 <rcl_convert_rmw_ret_to_rcl_ret>
 8012c9e:	4684      	mov	ip, r0
 8012ca0:	4660      	mov	r0, ip
 8012ca2:	b042      	add	sp, #264	@ 0x108
 8012ca4:	bd70      	pop	{r4, r5, r6, pc}
 8012ca6:	f04f 0c0b 	mov.w	ip, #11
 8012caa:	4660      	mov	r0, ip
 8012cac:	4770      	bx	lr
 8012cae:	2306      	movs	r3, #6
 8012cb0:	602b      	str	r3, [r5, #0]
 8012cb2:	2e00      	cmp	r6, #0
 8012cb4:	d0d7      	beq.n	8012c66 <rcl_validate_enclave_name_with_size+0x22>
 8012cb6:	9b01      	ldr	r3, [sp, #4]
 8012cb8:	6033      	str	r3, [r6, #0]
 8012cba:	4660      	mov	r0, ip
 8012cbc:	b042      	add	sp, #264	@ 0x108
 8012cbe:	bd70      	pop	{r4, r5, r6, pc}
 8012cc0:	2305      	movs	r3, #5
 8012cc2:	602b      	str	r3, [r5, #0]
 8012cc4:	e7f5      	b.n	8012cb2 <rcl_validate_enclave_name_with_size+0x6e>
 8012cc6:	2304      	movs	r3, #4
 8012cc8:	602b      	str	r3, [r5, #0]
 8012cca:	e7f2      	b.n	8012cb2 <rcl_validate_enclave_name_with_size+0x6e>
 8012ccc:	2303      	movs	r3, #3
 8012cce:	602b      	str	r3, [r5, #0]
 8012cd0:	e7ef      	b.n	8012cb2 <rcl_validate_enclave_name_with_size+0x6e>
 8012cd2:	2302      	movs	r3, #2
 8012cd4:	602b      	str	r3, [r5, #0]
 8012cd6:	e7ec      	b.n	8012cb2 <rcl_validate_enclave_name_with_size+0x6e>
 8012cd8:	2301      	movs	r3, #1
 8012cda:	602b      	str	r3, [r5, #0]
 8012cdc:	e7e9      	b.n	8012cb2 <rcl_validate_enclave_name_with_size+0x6e>
 8012cde:	4a04      	ldr	r2, [pc, #16]	@ (8012cf0 <rcl_validate_enclave_name_with_size+0xac>)
 8012ce0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012ce4:	a802      	add	r0, sp, #8
 8012ce6:	f001 fd25 	bl	8014734 <rcutils_snprintf>
 8012cea:	f04f 0c01 	mov.w	ip, #1
 8012cee:	e7ba      	b.n	8012c66 <rcl_validate_enclave_name_with_size+0x22>
 8012cf0:	08018bbc 	.word	0x08018bbc

08012cf4 <rcl_validate_enclave_name>:
 8012cf4:	b168      	cbz	r0, 8012d12 <rcl_validate_enclave_name+0x1e>
 8012cf6:	b570      	push	{r4, r5, r6, lr}
 8012cf8:	460d      	mov	r5, r1
 8012cfa:	4616      	mov	r6, r2
 8012cfc:	4604      	mov	r4, r0
 8012cfe:	f7ed fa99 	bl	8000234 <strlen>
 8012d02:	4633      	mov	r3, r6
 8012d04:	4601      	mov	r1, r0
 8012d06:	462a      	mov	r2, r5
 8012d08:	4620      	mov	r0, r4
 8012d0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d0e:	f7ff bf99 	b.w	8012c44 <rcl_validate_enclave_name_with_size>
 8012d12:	200b      	movs	r0, #11
 8012d14:	4770      	bx	lr
 8012d16:	bf00      	nop

08012d18 <rcl_get_zero_initialized_wait_set>:
 8012d18:	b510      	push	{r4, lr}
 8012d1a:	4c08      	ldr	r4, [pc, #32]	@ (8012d3c <rcl_get_zero_initialized_wait_set+0x24>)
 8012d1c:	4686      	mov	lr, r0
 8012d1e:	4684      	mov	ip, r0
 8012d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d22:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d32:	6823      	ldr	r3, [r4, #0]
 8012d34:	f8cc 3000 	str.w	r3, [ip]
 8012d38:	4670      	mov	r0, lr
 8012d3a:	bd10      	pop	{r4, pc}
 8012d3c:	08018c1c 	.word	0x08018c1c

08012d40 <rcl_wait_set_is_valid>:
 8012d40:	b118      	cbz	r0, 8012d4a <rcl_wait_set_is_valid+0xa>
 8012d42:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8012d44:	3800      	subs	r0, #0
 8012d46:	bf18      	it	ne
 8012d48:	2001      	movne	r0, #1
 8012d4a:	4770      	bx	lr

08012d4c <rcl_wait_set_fini>:
 8012d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d50:	b082      	sub	sp, #8
 8012d52:	2800      	cmp	r0, #0
 8012d54:	f000 8095 	beq.w	8012e82 <rcl_wait_set_fini+0x136>
 8012d58:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8012d5a:	4604      	mov	r4, r0
 8012d5c:	2e00      	cmp	r6, #0
 8012d5e:	f000 808c 	beq.w	8012e7a <rcl_wait_set_fini+0x12e>
 8012d62:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8012d64:	f002 fd48 	bl	80157f8 <rmw_destroy_wait_set>
 8012d68:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012d6a:	1e06      	subs	r6, r0, #0
 8012d6c:	bf18      	it	ne
 8012d6e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8012d72:	2d00      	cmp	r5, #0
 8012d74:	f000 8081 	beq.w	8012e7a <rcl_wait_set_fini+0x12e>
 8012d78:	6820      	ldr	r0, [r4, #0]
 8012d7a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8012d7e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012d80:	2700      	movs	r7, #0
 8012d82:	6067      	str	r7, [r4, #4]
 8012d84:	602f      	str	r7, [r5, #0]
 8012d86:	b120      	cbz	r0, 8012d92 <rcl_wait_set_fini+0x46>
 8012d88:	9101      	str	r1, [sp, #4]
 8012d8a:	47c0      	blx	r8
 8012d8c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012d8e:	9901      	ldr	r1, [sp, #4]
 8012d90:	6027      	str	r7, [r4, #0]
 8012d92:	68a8      	ldr	r0, [r5, #8]
 8012d94:	b120      	cbz	r0, 8012da0 <rcl_wait_set_fini+0x54>
 8012d96:	47c0      	blx	r8
 8012d98:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8012da0:	68a0      	ldr	r0, [r4, #8]
 8012da2:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012da4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012da6:	f04f 0800 	mov.w	r8, #0
 8012daa:	f8c4 800c 	str.w	r8, [r4, #12]
 8012dae:	f8c5 800c 	str.w	r8, [r5, #12]
 8012db2:	b128      	cbz	r0, 8012dc0 <rcl_wait_set_fini+0x74>
 8012db4:	47b8      	blx	r7
 8012db6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012db8:	f8c4 8008 	str.w	r8, [r4, #8]
 8012dbc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012dbe:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012dc0:	6968      	ldr	r0, [r5, #20]
 8012dc2:	f04f 0800 	mov.w	r8, #0
 8012dc6:	f8c5 8010 	str.w	r8, [r5, #16]
 8012dca:	b128      	cbz	r0, 8012dd8 <rcl_wait_set_fini+0x8c>
 8012dcc:	47b8      	blx	r7
 8012dce:	f8c5 8014 	str.w	r8, [r5, #20]
 8012dd2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012dd4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012dd6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012dd8:	6920      	ldr	r0, [r4, #16]
 8012dda:	f04f 0800 	mov.w	r8, #0
 8012dde:	f8c4 8014 	str.w	r8, [r4, #20]
 8012de2:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8012de6:	b128      	cbz	r0, 8012df4 <rcl_wait_set_fini+0xa8>
 8012de8:	47b8      	blx	r7
 8012dea:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012dec:	f8c4 8010 	str.w	r8, [r4, #16]
 8012df0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012df2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012df4:	69a0      	ldr	r0, [r4, #24]
 8012df6:	f04f 0800 	mov.w	r8, #0
 8012dfa:	f8c4 801c 	str.w	r8, [r4, #28]
 8012dfe:	f8c5 8018 	str.w	r8, [r5, #24]
 8012e02:	b128      	cbz	r0, 8012e10 <rcl_wait_set_fini+0xc4>
 8012e04:	9101      	str	r1, [sp, #4]
 8012e06:	47b8      	blx	r7
 8012e08:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012e0a:	9901      	ldr	r1, [sp, #4]
 8012e0c:	f8c4 8018 	str.w	r8, [r4, #24]
 8012e10:	6a28      	ldr	r0, [r5, #32]
 8012e12:	b120      	cbz	r0, 8012e1e <rcl_wait_set_fini+0xd2>
 8012e14:	47b8      	blx	r7
 8012e16:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012e18:	2300      	movs	r3, #0
 8012e1a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8012e1e:	6a20      	ldr	r0, [r4, #32]
 8012e20:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8012e24:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012e26:	2700      	movs	r7, #0
 8012e28:	6267      	str	r7, [r4, #36]	@ 0x24
 8012e2a:	626f      	str	r7, [r5, #36]	@ 0x24
 8012e2c:	b120      	cbz	r0, 8012e38 <rcl_wait_set_fini+0xec>
 8012e2e:	9101      	str	r1, [sp, #4]
 8012e30:	47c0      	blx	r8
 8012e32:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012e34:	9901      	ldr	r1, [sp, #4]
 8012e36:	6227      	str	r7, [r4, #32]
 8012e38:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8012e3a:	b120      	cbz	r0, 8012e46 <rcl_wait_set_fini+0xfa>
 8012e3c:	47c0      	blx	r8
 8012e3e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012e40:	2300      	movs	r3, #0
 8012e42:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8012e46:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8012e48:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8012e4c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012e4e:	2700      	movs	r7, #0
 8012e50:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8012e52:	632f      	str	r7, [r5, #48]	@ 0x30
 8012e54:	b120      	cbz	r0, 8012e60 <rcl_wait_set_fini+0x114>
 8012e56:	9101      	str	r1, [sp, #4]
 8012e58:	47c0      	blx	r8
 8012e5a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012e5c:	9901      	ldr	r1, [sp, #4]
 8012e5e:	62a7      	str	r7, [r4, #40]	@ 0x28
 8012e60:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8012e62:	b120      	cbz	r0, 8012e6e <rcl_wait_set_fini+0x122>
 8012e64:	47c0      	blx	r8
 8012e66:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012e68:	2300      	movs	r3, #0
 8012e6a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8012e6e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8012e70:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012e72:	4628      	mov	r0, r5
 8012e74:	4798      	blx	r3
 8012e76:	2300      	movs	r3, #0
 8012e78:	6323      	str	r3, [r4, #48]	@ 0x30
 8012e7a:	4630      	mov	r0, r6
 8012e7c:	b002      	add	sp, #8
 8012e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e82:	260b      	movs	r6, #11
 8012e84:	4630      	mov	r0, r6
 8012e86:	b002      	add	sp, #8
 8012e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012e8c <rcl_wait_set_add_subscription>:
 8012e8c:	b318      	cbz	r0, 8012ed6 <rcl_wait_set_add_subscription+0x4a>
 8012e8e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012e90:	b570      	push	{r4, r5, r6, lr}
 8012e92:	4604      	mov	r4, r0
 8012e94:	b30b      	cbz	r3, 8012eda <rcl_wait_set_add_subscription+0x4e>
 8012e96:	b319      	cbz	r1, 8012ee0 <rcl_wait_set_add_subscription+0x54>
 8012e98:	681d      	ldr	r5, [r3, #0]
 8012e9a:	6840      	ldr	r0, [r0, #4]
 8012e9c:	4285      	cmp	r5, r0
 8012e9e:	d217      	bcs.n	8012ed0 <rcl_wait_set_add_subscription+0x44>
 8012ea0:	6820      	ldr	r0, [r4, #0]
 8012ea2:	1c6e      	adds	r6, r5, #1
 8012ea4:	601e      	str	r6, [r3, #0]
 8012ea6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012eaa:	b102      	cbz	r2, 8012eae <rcl_wait_set_add_subscription+0x22>
 8012eac:	6015      	str	r5, [r2, #0]
 8012eae:	4608      	mov	r0, r1
 8012eb0:	f7ff fb0a 	bl	80124c8 <rcl_subscription_get_rmw_handle>
 8012eb4:	b150      	cbz	r0, 8012ecc <rcl_wait_set_add_subscription+0x40>
 8012eb6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012eb8:	6842      	ldr	r2, [r0, #4]
 8012eba:	689b      	ldr	r3, [r3, #8]
 8012ebc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012ec0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012ec2:	6853      	ldr	r3, [r2, #4]
 8012ec4:	3301      	adds	r3, #1
 8012ec6:	2000      	movs	r0, #0
 8012ec8:	6053      	str	r3, [r2, #4]
 8012eca:	bd70      	pop	{r4, r5, r6, pc}
 8012ecc:	2001      	movs	r0, #1
 8012ece:	bd70      	pop	{r4, r5, r6, pc}
 8012ed0:	f240 3086 	movw	r0, #902	@ 0x386
 8012ed4:	bd70      	pop	{r4, r5, r6, pc}
 8012ed6:	200b      	movs	r0, #11
 8012ed8:	4770      	bx	lr
 8012eda:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012ede:	bd70      	pop	{r4, r5, r6, pc}
 8012ee0:	200b      	movs	r0, #11
 8012ee2:	bd70      	pop	{r4, r5, r6, pc}

08012ee4 <rcl_wait_set_clear>:
 8012ee4:	2800      	cmp	r0, #0
 8012ee6:	d073      	beq.n	8012fd0 <rcl_wait_set_clear+0xec>
 8012ee8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012eea:	b510      	push	{r4, lr}
 8012eec:	4604      	mov	r4, r0
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d070      	beq.n	8012fd4 <rcl_wait_set_clear+0xf0>
 8012ef2:	6800      	ldr	r0, [r0, #0]
 8012ef4:	b138      	cbz	r0, 8012f06 <rcl_wait_set_clear+0x22>
 8012ef6:	6862      	ldr	r2, [r4, #4]
 8012ef8:	2100      	movs	r1, #0
 8012efa:	0092      	lsls	r2, r2, #2
 8012efc:	f004 fb3c 	bl	8017578 <memset>
 8012f00:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012f02:	2200      	movs	r2, #0
 8012f04:	601a      	str	r2, [r3, #0]
 8012f06:	68a0      	ldr	r0, [r4, #8]
 8012f08:	b138      	cbz	r0, 8012f1a <rcl_wait_set_clear+0x36>
 8012f0a:	68e2      	ldr	r2, [r4, #12]
 8012f0c:	2100      	movs	r1, #0
 8012f0e:	0092      	lsls	r2, r2, #2
 8012f10:	f004 fb32 	bl	8017578 <memset>
 8012f14:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012f16:	2200      	movs	r2, #0
 8012f18:	60da      	str	r2, [r3, #12]
 8012f1a:	69a0      	ldr	r0, [r4, #24]
 8012f1c:	b138      	cbz	r0, 8012f2e <rcl_wait_set_clear+0x4a>
 8012f1e:	69e2      	ldr	r2, [r4, #28]
 8012f20:	2100      	movs	r1, #0
 8012f22:	0092      	lsls	r2, r2, #2
 8012f24:	f004 fb28 	bl	8017578 <memset>
 8012f28:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	619a      	str	r2, [r3, #24]
 8012f2e:	6a20      	ldr	r0, [r4, #32]
 8012f30:	b138      	cbz	r0, 8012f42 <rcl_wait_set_clear+0x5e>
 8012f32:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8012f34:	2100      	movs	r1, #0
 8012f36:	0092      	lsls	r2, r2, #2
 8012f38:	f004 fb1e 	bl	8017578 <memset>
 8012f3c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012f3e:	2200      	movs	r2, #0
 8012f40:	625a      	str	r2, [r3, #36]	@ 0x24
 8012f42:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8012f44:	b138      	cbz	r0, 8012f56 <rcl_wait_set_clear+0x72>
 8012f46:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012f48:	2100      	movs	r1, #0
 8012f4a:	0092      	lsls	r2, r2, #2
 8012f4c:	f004 fb14 	bl	8017578 <memset>
 8012f50:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012f52:	2200      	movs	r2, #0
 8012f54:	631a      	str	r2, [r3, #48]	@ 0x30
 8012f56:	6920      	ldr	r0, [r4, #16]
 8012f58:	b138      	cbz	r0, 8012f6a <rcl_wait_set_clear+0x86>
 8012f5a:	6962      	ldr	r2, [r4, #20]
 8012f5c:	2100      	movs	r1, #0
 8012f5e:	0092      	lsls	r2, r2, #2
 8012f60:	f004 fb0a 	bl	8017578 <memset>
 8012f64:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012f66:	2200      	movs	r2, #0
 8012f68:	641a      	str	r2, [r3, #64]	@ 0x40
 8012f6a:	6898      	ldr	r0, [r3, #8]
 8012f6c:	b138      	cbz	r0, 8012f7e <rcl_wait_set_clear+0x9a>
 8012f6e:	685a      	ldr	r2, [r3, #4]
 8012f70:	2100      	movs	r1, #0
 8012f72:	0092      	lsls	r2, r2, #2
 8012f74:	f004 fb00 	bl	8017578 <memset>
 8012f78:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	605a      	str	r2, [r3, #4]
 8012f7e:	6958      	ldr	r0, [r3, #20]
 8012f80:	b138      	cbz	r0, 8012f92 <rcl_wait_set_clear+0xae>
 8012f82:	691a      	ldr	r2, [r3, #16]
 8012f84:	2100      	movs	r1, #0
 8012f86:	0092      	lsls	r2, r2, #2
 8012f88:	f004 faf6 	bl	8017578 <memset>
 8012f8c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012f8e:	2200      	movs	r2, #0
 8012f90:	611a      	str	r2, [r3, #16]
 8012f92:	6a18      	ldr	r0, [r3, #32]
 8012f94:	b138      	cbz	r0, 8012fa6 <rcl_wait_set_clear+0xc2>
 8012f96:	69da      	ldr	r2, [r3, #28]
 8012f98:	2100      	movs	r1, #0
 8012f9a:	0092      	lsls	r2, r2, #2
 8012f9c:	f004 faec 	bl	8017578 <memset>
 8012fa0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	61da      	str	r2, [r3, #28]
 8012fa6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8012fa8:	b138      	cbz	r0, 8012fba <rcl_wait_set_clear+0xd6>
 8012faa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012fac:	2100      	movs	r1, #0
 8012fae:	0092      	lsls	r2, r2, #2
 8012fb0:	f004 fae2 	bl	8017578 <memset>
 8012fb4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	629a      	str	r2, [r3, #40]	@ 0x28
 8012fba:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012fbc:	b138      	cbz	r0, 8012fce <rcl_wait_set_clear+0xea>
 8012fbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012fc0:	2100      	movs	r1, #0
 8012fc2:	0092      	lsls	r2, r2, #2
 8012fc4:	f004 fad8 	bl	8017578 <memset>
 8012fc8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012fca:	2000      	movs	r0, #0
 8012fcc:	6358      	str	r0, [r3, #52]	@ 0x34
 8012fce:	bd10      	pop	{r4, pc}
 8012fd0:	200b      	movs	r0, #11
 8012fd2:	4770      	bx	lr
 8012fd4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012fd8:	bd10      	pop	{r4, pc}
 8012fda:	bf00      	nop

08012fdc <rcl_wait_set_resize>:
 8012fdc:	2800      	cmp	r0, #0
 8012fde:	f000 8185 	beq.w	80132ec <rcl_wait_set_resize+0x310>
 8012fe2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fe6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8012fe8:	b083      	sub	sp, #12
 8012fea:	4605      	mov	r5, r0
 8012fec:	2c00      	cmp	r4, #0
 8012fee:	f000 817f 	beq.w	80132f0 <rcl_wait_set_resize+0x314>
 8012ff2:	f04f 0900 	mov.w	r9, #0
 8012ff6:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8012ffa:	461f      	mov	r7, r3
 8012ffc:	4688      	mov	r8, r1
 8012ffe:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8013002:	4616      	mov	r6, r2
 8013004:	f8c0 9004 	str.w	r9, [r0, #4]
 8013008:	f8c4 9000 	str.w	r9, [r4]
 801300c:	2900      	cmp	r1, #0
 801300e:	f000 80bd 	beq.w	801318c <rcl_wait_set_resize+0x1b0>
 8013012:	008c      	lsls	r4, r1, #2
 8013014:	6800      	ldr	r0, [r0, #0]
 8013016:	9301      	str	r3, [sp, #4]
 8013018:	4652      	mov	r2, sl
 801301a:	4621      	mov	r1, r4
 801301c:	4798      	blx	r3
 801301e:	9b01      	ldr	r3, [sp, #4]
 8013020:	6028      	str	r0, [r5, #0]
 8013022:	2800      	cmp	r0, #0
 8013024:	f000 80cb 	beq.w	80131be <rcl_wait_set_resize+0x1e2>
 8013028:	4622      	mov	r2, r4
 801302a:	4649      	mov	r1, r9
 801302c:	9301      	str	r3, [sp, #4]
 801302e:	f004 faa3 	bl	8017578 <memset>
 8013032:	f8c5 8004 	str.w	r8, [r5, #4]
 8013036:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801303a:	9b01      	ldr	r3, [sp, #4]
 801303c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8013040:	f8c8 9004 	str.w	r9, [r8, #4]
 8013044:	4652      	mov	r2, sl
 8013046:	4621      	mov	r1, r4
 8013048:	4798      	blx	r3
 801304a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801304c:	f8c8 0008 	str.w	r0, [r8, #8]
 8013050:	689b      	ldr	r3, [r3, #8]
 8013052:	2b00      	cmp	r3, #0
 8013054:	f000 80ac 	beq.w	80131b0 <rcl_wait_set_resize+0x1d4>
 8013058:	4622      	mov	r2, r4
 801305a:	4649      	mov	r1, r9
 801305c:	4618      	mov	r0, r3
 801305e:	f004 fa8b 	bl	8017578 <memset>
 8013062:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013064:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013068:	f04f 0800 	mov.w	r8, #0
 801306c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8013070:	f8c5 800c 	str.w	r8, [r5, #12]
 8013074:	f8c4 800c 	str.w	r8, [r4, #12]
 8013078:	2e00      	cmp	r6, #0
 801307a:	f040 80a4 	bne.w	80131c6 <rcl_wait_set_resize+0x1ea>
 801307e:	68a8      	ldr	r0, [r5, #8]
 8013080:	b128      	cbz	r0, 801308e <rcl_wait_set_resize+0xb2>
 8013082:	4649      	mov	r1, r9
 8013084:	4790      	blx	r2
 8013086:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013088:	60ae      	str	r6, [r5, #8]
 801308a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801308e:	f04f 0800 	mov.w	r8, #0
 8013092:	19f6      	adds	r6, r6, r7
 8013094:	f8c4 8010 	str.w	r8, [r4, #16]
 8013098:	f040 80ac 	bne.w	80131f4 <rcl_wait_set_resize+0x218>
 801309c:	6960      	ldr	r0, [r4, #20]
 801309e:	b130      	cbz	r0, 80130ae <rcl_wait_set_resize+0xd2>
 80130a0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80130a2:	4649      	mov	r1, r9
 80130a4:	4798      	blx	r3
 80130a6:	6166      	str	r6, [r4, #20]
 80130a8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80130aa:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80130ae:	2600      	movs	r6, #0
 80130b0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80130b4:	616e      	str	r6, [r5, #20]
 80130b6:	6426      	str	r6, [r4, #64]	@ 0x40
 80130b8:	2f00      	cmp	r7, #0
 80130ba:	f040 80ad 	bne.w	8013218 <rcl_wait_set_resize+0x23c>
 80130be:	6928      	ldr	r0, [r5, #16]
 80130c0:	b138      	cbz	r0, 80130d2 <rcl_wait_set_resize+0xf6>
 80130c2:	4649      	mov	r1, r9
 80130c4:	47d0      	blx	sl
 80130c6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80130c8:	612f      	str	r7, [r5, #16]
 80130ca:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80130ce:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80130d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80130d4:	2600      	movs	r6, #0
 80130d6:	61ee      	str	r6, [r5, #28]
 80130d8:	61a6      	str	r6, [r4, #24]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	f040 80af 	bne.w	801323e <rcl_wait_set_resize+0x262>
 80130e0:	69a8      	ldr	r0, [r5, #24]
 80130e2:	b120      	cbz	r0, 80130ee <rcl_wait_set_resize+0x112>
 80130e4:	4649      	mov	r1, r9
 80130e6:	47d0      	blx	sl
 80130e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80130ea:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80130ec:	61ab      	str	r3, [r5, #24]
 80130ee:	6a20      	ldr	r0, [r4, #32]
 80130f0:	b128      	cbz	r0, 80130fe <rcl_wait_set_resize+0x122>
 80130f2:	4649      	mov	r1, r9
 80130f4:	47d0      	blx	sl
 80130f6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80130f8:	2300      	movs	r3, #0
 80130fa:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80130fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013100:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013102:	2600      	movs	r6, #0
 8013104:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8013108:	626e      	str	r6, [r5, #36]	@ 0x24
 801310a:	6266      	str	r6, [r4, #36]	@ 0x24
 801310c:	2b00      	cmp	r3, #0
 801310e:	f000 80b6 	beq.w	801327e <rcl_wait_set_resize+0x2a2>
 8013112:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8013116:	6a28      	ldr	r0, [r5, #32]
 8013118:	463a      	mov	r2, r7
 801311a:	4651      	mov	r1, sl
 801311c:	47c8      	blx	r9
 801311e:	6228      	str	r0, [r5, #32]
 8013120:	2800      	cmp	r0, #0
 8013122:	d04c      	beq.n	80131be <rcl_wait_set_resize+0x1e2>
 8013124:	4652      	mov	r2, sl
 8013126:	4631      	mov	r1, r6
 8013128:	f004 fa26 	bl	8017578 <memset>
 801312c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801312e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013130:	626b      	str	r3, [r5, #36]	@ 0x24
 8013132:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013134:	62a6      	str	r6, [r4, #40]	@ 0x28
 8013136:	463a      	mov	r2, r7
 8013138:	4651      	mov	r1, sl
 801313a:	47c8      	blx	r9
 801313c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801313e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8013140:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8013142:	2c00      	cmp	r4, #0
 8013144:	f000 80f0 	beq.w	8013328 <rcl_wait_set_resize+0x34c>
 8013148:	4620      	mov	r0, r4
 801314a:	4652      	mov	r2, sl
 801314c:	4631      	mov	r1, r6
 801314e:	f004 fa13 	bl	8017578 <memset>
 8013152:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013154:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013156:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013158:	2600      	movs	r6, #0
 801315a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801315e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8013160:	6326      	str	r6, [r4, #48]	@ 0x30
 8013162:	2b00      	cmp	r3, #0
 8013164:	f040 809d 	bne.w	80132a2 <rcl_wait_set_resize+0x2c6>
 8013168:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801316a:	b120      	cbz	r0, 8013176 <rcl_wait_set_resize+0x19a>
 801316c:	4639      	mov	r1, r7
 801316e:	47c0      	blx	r8
 8013170:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013172:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013174:	62ab      	str	r3, [r5, #40]	@ 0x28
 8013176:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8013178:	b310      	cbz	r0, 80131c0 <rcl_wait_set_resize+0x1e4>
 801317a:	4639      	mov	r1, r7
 801317c:	47c0      	blx	r8
 801317e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013180:	2000      	movs	r0, #0
 8013182:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8013186:	b003      	add	sp, #12
 8013188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801318c:	6800      	ldr	r0, [r0, #0]
 801318e:	b120      	cbz	r0, 801319a <rcl_wait_set_resize+0x1be>
 8013190:	4651      	mov	r1, sl
 8013192:	47d8      	blx	fp
 8013194:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013196:	f8c5 8000 	str.w	r8, [r5]
 801319a:	68a0      	ldr	r0, [r4, #8]
 801319c:	2800      	cmp	r0, #0
 801319e:	f43f af61 	beq.w	8013064 <rcl_wait_set_resize+0x88>
 80131a2:	4651      	mov	r1, sl
 80131a4:	47d8      	blx	fp
 80131a6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80131a8:	2300      	movs	r3, #0
 80131aa:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80131ae:	e759      	b.n	8013064 <rcl_wait_set_resize+0x88>
 80131b0:	6828      	ldr	r0, [r5, #0]
 80131b2:	9301      	str	r3, [sp, #4]
 80131b4:	4651      	mov	r1, sl
 80131b6:	47d8      	blx	fp
 80131b8:	9b01      	ldr	r3, [sp, #4]
 80131ba:	e9c5 3300 	strd	r3, r3, [r5]
 80131be:	200a      	movs	r0, #10
 80131c0:	b003      	add	sp, #12
 80131c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131c6:	00b4      	lsls	r4, r6, #2
 80131c8:	68a8      	ldr	r0, [r5, #8]
 80131ca:	464a      	mov	r2, r9
 80131cc:	4621      	mov	r1, r4
 80131ce:	4798      	blx	r3
 80131d0:	60a8      	str	r0, [r5, #8]
 80131d2:	2800      	cmp	r0, #0
 80131d4:	d0f3      	beq.n	80131be <rcl_wait_set_resize+0x1e2>
 80131d6:	4622      	mov	r2, r4
 80131d8:	4641      	mov	r1, r8
 80131da:	f004 f9cd 	bl	8017578 <memset>
 80131de:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80131e0:	60ee      	str	r6, [r5, #12]
 80131e2:	f04f 0800 	mov.w	r8, #0
 80131e6:	19f6      	adds	r6, r6, r7
 80131e8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80131ec:	f8c4 8010 	str.w	r8, [r4, #16]
 80131f0:	f43f af54 	beq.w	801309c <rcl_wait_set_resize+0xc0>
 80131f4:	00b6      	lsls	r6, r6, #2
 80131f6:	464a      	mov	r2, r9
 80131f8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80131fa:	6960      	ldr	r0, [r4, #20]
 80131fc:	4631      	mov	r1, r6
 80131fe:	4798      	blx	r3
 8013200:	4681      	mov	r9, r0
 8013202:	6160      	str	r0, [r4, #20]
 8013204:	2800      	cmp	r0, #0
 8013206:	d076      	beq.n	80132f6 <rcl_wait_set_resize+0x31a>
 8013208:	4632      	mov	r2, r6
 801320a:	4641      	mov	r1, r8
 801320c:	f004 f9b4 	bl	8017578 <memset>
 8013210:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013212:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013216:	e74a      	b.n	80130ae <rcl_wait_set_resize+0xd2>
 8013218:	00bc      	lsls	r4, r7, #2
 801321a:	6928      	ldr	r0, [r5, #16]
 801321c:	464a      	mov	r2, r9
 801321e:	4621      	mov	r1, r4
 8013220:	47c0      	blx	r8
 8013222:	6128      	str	r0, [r5, #16]
 8013224:	2800      	cmp	r0, #0
 8013226:	d0ca      	beq.n	80131be <rcl_wait_set_resize+0x1e2>
 8013228:	4622      	mov	r2, r4
 801322a:	4631      	mov	r1, r6
 801322c:	f004 f9a4 	bl	8017578 <memset>
 8013230:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013232:	616f      	str	r7, [r5, #20]
 8013234:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8013238:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801323c:	e749      	b.n	80130d2 <rcl_wait_set_resize+0xf6>
 801323e:	009c      	lsls	r4, r3, #2
 8013240:	69a8      	ldr	r0, [r5, #24]
 8013242:	464a      	mov	r2, r9
 8013244:	4621      	mov	r1, r4
 8013246:	47c0      	blx	r8
 8013248:	61a8      	str	r0, [r5, #24]
 801324a:	2800      	cmp	r0, #0
 801324c:	d0b7      	beq.n	80131be <rcl_wait_set_resize+0x1e2>
 801324e:	4622      	mov	r2, r4
 8013250:	4631      	mov	r1, r6
 8013252:	f004 f991 	bl	8017578 <memset>
 8013256:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8013258:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801325a:	61eb      	str	r3, [r5, #28]
 801325c:	6a38      	ldr	r0, [r7, #32]
 801325e:	61fe      	str	r6, [r7, #28]
 8013260:	464a      	mov	r2, r9
 8013262:	4621      	mov	r1, r4
 8013264:	47c0      	blx	r8
 8013266:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013268:	6238      	str	r0, [r7, #32]
 801326a:	6a1f      	ldr	r7, [r3, #32]
 801326c:	2f00      	cmp	r7, #0
 801326e:	d054      	beq.n	801331a <rcl_wait_set_resize+0x33e>
 8013270:	4622      	mov	r2, r4
 8013272:	4631      	mov	r1, r6
 8013274:	4638      	mov	r0, r7
 8013276:	f004 f97f 	bl	8017578 <memset>
 801327a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801327c:	e73f      	b.n	80130fe <rcl_wait_set_resize+0x122>
 801327e:	6a28      	ldr	r0, [r5, #32]
 8013280:	b120      	cbz	r0, 801328c <rcl_wait_set_resize+0x2b0>
 8013282:	4639      	mov	r1, r7
 8013284:	47c0      	blx	r8
 8013286:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013288:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801328a:	622b      	str	r3, [r5, #32]
 801328c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801328e:	2800      	cmp	r0, #0
 8013290:	f43f af60 	beq.w	8013154 <rcl_wait_set_resize+0x178>
 8013294:	4639      	mov	r1, r7
 8013296:	47c0      	blx	r8
 8013298:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801329a:	2300      	movs	r3, #0
 801329c:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80132a0:	e758      	b.n	8013154 <rcl_wait_set_resize+0x178>
 80132a2:	009c      	lsls	r4, r3, #2
 80132a4:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80132a6:	463a      	mov	r2, r7
 80132a8:	4621      	mov	r1, r4
 80132aa:	47c8      	blx	r9
 80132ac:	62a8      	str	r0, [r5, #40]	@ 0x28
 80132ae:	2800      	cmp	r0, #0
 80132b0:	d085      	beq.n	80131be <rcl_wait_set_resize+0x1e2>
 80132b2:	4622      	mov	r2, r4
 80132b4:	4631      	mov	r1, r6
 80132b6:	f004 f95f 	bl	8017578 <memset>
 80132ba:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80132be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80132c0:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80132c2:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80132c6:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 80132ca:	463a      	mov	r2, r7
 80132cc:	4621      	mov	r1, r4
 80132ce:	47c8      	blx	r9
 80132d0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80132d2:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80132d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80132d8:	b36b      	cbz	r3, 8013336 <rcl_wait_set_resize+0x35a>
 80132da:	4622      	mov	r2, r4
 80132dc:	4631      	mov	r1, r6
 80132de:	4618      	mov	r0, r3
 80132e0:	f004 f94a 	bl	8017578 <memset>
 80132e4:	4630      	mov	r0, r6
 80132e6:	b003      	add	sp, #12
 80132e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132ec:	200b      	movs	r0, #11
 80132ee:	4770      	bx	lr
 80132f0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80132f4:	e764      	b.n	80131c0 <rcl_wait_set_resize+0x1e4>
 80132f6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80132f8:	68a8      	ldr	r0, [r5, #8]
 80132fa:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80132fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80132fe:	4798      	blx	r3
 8013300:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013302:	6928      	ldr	r0, [r5, #16]
 8013304:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013306:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8013308:	f8c5 900c 	str.w	r9, [r5, #12]
 801330c:	f8c5 9008 	str.w	r9, [r5, #8]
 8013310:	4790      	blx	r2
 8013312:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8013316:	200a      	movs	r0, #10
 8013318:	e752      	b.n	80131c0 <rcl_wait_set_resize+0x1e4>
 801331a:	69a8      	ldr	r0, [r5, #24]
 801331c:	4649      	mov	r1, r9
 801331e:	47d0      	blx	sl
 8013320:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8013324:	200a      	movs	r0, #10
 8013326:	e74b      	b.n	80131c0 <rcl_wait_set_resize+0x1e4>
 8013328:	6a28      	ldr	r0, [r5, #32]
 801332a:	4639      	mov	r1, r7
 801332c:	47c0      	blx	r8
 801332e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8013332:	200a      	movs	r0, #10
 8013334:	e744      	b.n	80131c0 <rcl_wait_set_resize+0x1e4>
 8013336:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013338:	9301      	str	r3, [sp, #4]
 801333a:	4639      	mov	r1, r7
 801333c:	47c0      	blx	r8
 801333e:	9b01      	ldr	r3, [sp, #4]
 8013340:	200a      	movs	r0, #10
 8013342:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8013346:	e73b      	b.n	80131c0 <rcl_wait_set_resize+0x1e4>

08013348 <rcl_wait_set_init>:
 8013348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801334c:	b084      	sub	sp, #16
 801334e:	4604      	mov	r4, r0
 8013350:	a810      	add	r0, sp, #64	@ 0x40
 8013352:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8013356:	460f      	mov	r7, r1
 8013358:	4690      	mov	r8, r2
 801335a:	4699      	mov	r9, r3
 801335c:	f7f9 fcce 	bl	800ccfc <rcutils_allocator_is_valid>
 8013360:	2800      	cmp	r0, #0
 8013362:	d06b      	beq.n	801343c <rcl_wait_set_init+0xf4>
 8013364:	2c00      	cmp	r4, #0
 8013366:	d069      	beq.n	801343c <rcl_wait_set_init+0xf4>
 8013368:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801336a:	b125      	cbz	r5, 8013376 <rcl_wait_set_init+0x2e>
 801336c:	2564      	movs	r5, #100	@ 0x64
 801336e:	4628      	mov	r0, r5
 8013370:	b004      	add	sp, #16
 8013372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013376:	f1ba 0f00 	cmp.w	sl, #0
 801337a:	d05f      	beq.n	801343c <rcl_wait_set_init+0xf4>
 801337c:	4650      	mov	r0, sl
 801337e:	f7fe fb0f 	bl	80119a0 <rcl_context_is_valid>
 8013382:	2800      	cmp	r0, #0
 8013384:	d067      	beq.n	8013456 <rcl_wait_set_init+0x10e>
 8013386:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013388:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801338a:	205c      	movs	r0, #92	@ 0x5c
 801338c:	4798      	blx	r3
 801338e:	6320      	str	r0, [r4, #48]	@ 0x30
 8013390:	2800      	cmp	r0, #0
 8013392:	d062      	beq.n	801345a <rcl_wait_set_init+0x112>
 8013394:	4629      	mov	r1, r5
 8013396:	225c      	movs	r2, #92	@ 0x5c
 8013398:	f004 f8ee 	bl	8017578 <memset>
 801339c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 80133a0:	eb03 0e02 	add.w	lr, r3, r2
 80133a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80133a6:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80133a8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80133ac:	449e      	add	lr, r3
 80133ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80133b2:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80133b6:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80133ba:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80133be:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 80133c2:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 80133c6:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 80133ca:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 80133ce:	f8da a000 	ldr.w	sl, [sl]
 80133d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80133d4:	44c6      	add	lr, r8
 80133d6:	f8dc 3000 	ldr.w	r3, [ip]
 80133da:	602b      	str	r3, [r5, #0]
 80133dc:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 80133e0:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 80133e4:	f002 f9fe 	bl	80157e4 <rmw_create_wait_set>
 80133e8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80133ea:	63f0      	str	r0, [r6, #60]	@ 0x3c
 80133ec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80133ee:	b350      	cbz	r0, 8013446 <rcl_wait_set_init+0xfe>
 80133f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80133f2:	9302      	str	r3, [sp, #8]
 80133f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80133f6:	9301      	str	r3, [sp, #4]
 80133f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80133fa:	9300      	str	r3, [sp, #0]
 80133fc:	4642      	mov	r2, r8
 80133fe:	464b      	mov	r3, r9
 8013400:	4639      	mov	r1, r7
 8013402:	4620      	mov	r0, r4
 8013404:	f7ff fdea 	bl	8012fdc <rcl_wait_set_resize>
 8013408:	4605      	mov	r5, r0
 801340a:	2800      	cmp	r0, #0
 801340c:	d0af      	beq.n	801336e <rcl_wait_set_init+0x26>
 801340e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013410:	bb2b      	cbnz	r3, 801345e <rcl_wait_set_init+0x116>
 8013412:	2600      	movs	r6, #0
 8013414:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8013418:	9600      	str	r6, [sp, #0]
 801341a:	4633      	mov	r3, r6
 801341c:	4632      	mov	r2, r6
 801341e:	4631      	mov	r1, r6
 8013420:	4620      	mov	r0, r4
 8013422:	f7ff fddb 	bl	8012fdc <rcl_wait_set_resize>
 8013426:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8013428:	2800      	cmp	r0, #0
 801342a:	d0a0      	beq.n	801336e <rcl_wait_set_init+0x26>
 801342c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801342e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8013430:	4798      	blx	r3
 8013432:	4628      	mov	r0, r5
 8013434:	6326      	str	r6, [r4, #48]	@ 0x30
 8013436:	b004      	add	sp, #16
 8013438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801343c:	250b      	movs	r5, #11
 801343e:	4628      	mov	r0, r5
 8013440:	b004      	add	sp, #16
 8013442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013446:	2501      	movs	r5, #1
 8013448:	f002 f9d6 	bl	80157f8 <rmw_destroy_wait_set>
 801344c:	2800      	cmp	r0, #0
 801344e:	bf18      	it	ne
 8013450:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8013454:	e7dd      	b.n	8013412 <rcl_wait_set_init+0xca>
 8013456:	2565      	movs	r5, #101	@ 0x65
 8013458:	e789      	b.n	801336e <rcl_wait_set_init+0x26>
 801345a:	250a      	movs	r5, #10
 801345c:	e787      	b.n	801336e <rcl_wait_set_init+0x26>
 801345e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013460:	e7f2      	b.n	8013448 <rcl_wait_set_init+0x100>
 8013462:	bf00      	nop

08013464 <rcl_wait_set_add_guard_condition>:
 8013464:	b318      	cbz	r0, 80134ae <rcl_wait_set_add_guard_condition+0x4a>
 8013466:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013468:	b570      	push	{r4, r5, r6, lr}
 801346a:	4604      	mov	r4, r0
 801346c:	b30b      	cbz	r3, 80134b2 <rcl_wait_set_add_guard_condition+0x4e>
 801346e:	b319      	cbz	r1, 80134b8 <rcl_wait_set_add_guard_condition+0x54>
 8013470:	68dd      	ldr	r5, [r3, #12]
 8013472:	68c0      	ldr	r0, [r0, #12]
 8013474:	4285      	cmp	r5, r0
 8013476:	d217      	bcs.n	80134a8 <rcl_wait_set_add_guard_condition+0x44>
 8013478:	68a0      	ldr	r0, [r4, #8]
 801347a:	1c6e      	adds	r6, r5, #1
 801347c:	60de      	str	r6, [r3, #12]
 801347e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013482:	b102      	cbz	r2, 8013486 <rcl_wait_set_add_guard_condition+0x22>
 8013484:	6015      	str	r5, [r2, #0]
 8013486:	4608      	mov	r0, r1
 8013488:	f003 fb7c 	bl	8016b84 <rcl_guard_condition_get_rmw_handle>
 801348c:	b150      	cbz	r0, 80134a4 <rcl_wait_set_add_guard_condition+0x40>
 801348e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013490:	6842      	ldr	r2, [r0, #4]
 8013492:	695b      	ldr	r3, [r3, #20]
 8013494:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013498:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801349a:	6913      	ldr	r3, [r2, #16]
 801349c:	3301      	adds	r3, #1
 801349e:	2000      	movs	r0, #0
 80134a0:	6113      	str	r3, [r2, #16]
 80134a2:	bd70      	pop	{r4, r5, r6, pc}
 80134a4:	2001      	movs	r0, #1
 80134a6:	bd70      	pop	{r4, r5, r6, pc}
 80134a8:	f240 3086 	movw	r0, #902	@ 0x386
 80134ac:	bd70      	pop	{r4, r5, r6, pc}
 80134ae:	200b      	movs	r0, #11
 80134b0:	4770      	bx	lr
 80134b2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80134b6:	bd70      	pop	{r4, r5, r6, pc}
 80134b8:	200b      	movs	r0, #11
 80134ba:	bd70      	pop	{r4, r5, r6, pc}

080134bc <rcl_wait_set_add_timer>:
 80134bc:	b328      	cbz	r0, 801350a <rcl_wait_set_add_timer+0x4e>
 80134be:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80134c0:	b570      	push	{r4, r5, r6, lr}
 80134c2:	4604      	mov	r4, r0
 80134c4:	b31b      	cbz	r3, 801350e <rcl_wait_set_add_timer+0x52>
 80134c6:	b329      	cbz	r1, 8013514 <rcl_wait_set_add_timer+0x58>
 80134c8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80134ca:	6965      	ldr	r5, [r4, #20]
 80134cc:	42a8      	cmp	r0, r5
 80134ce:	d219      	bcs.n	8013504 <rcl_wait_set_add_timer+0x48>
 80134d0:	6925      	ldr	r5, [r4, #16]
 80134d2:	1c46      	adds	r6, r0, #1
 80134d4:	641e      	str	r6, [r3, #64]	@ 0x40
 80134d6:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80134da:	b102      	cbz	r2, 80134de <rcl_wait_set_add_timer+0x22>
 80134dc:	6010      	str	r0, [r2, #0]
 80134de:	4608      	mov	r0, r1
 80134e0:	f7ff fba6 	bl	8012c30 <rcl_timer_get_guard_condition>
 80134e4:	b168      	cbz	r0, 8013502 <rcl_wait_set_add_timer+0x46>
 80134e6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80134e8:	68e3      	ldr	r3, [r4, #12]
 80134ea:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80134ec:	3b01      	subs	r3, #1
 80134ee:	441d      	add	r5, r3
 80134f0:	f003 fb48 	bl	8016b84 <rcl_guard_condition_get_rmw_handle>
 80134f4:	b180      	cbz	r0, 8013518 <rcl_wait_set_add_timer+0x5c>
 80134f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80134f8:	6842      	ldr	r2, [r0, #4]
 80134fa:	695b      	ldr	r3, [r3, #20]
 80134fc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013500:	2000      	movs	r0, #0
 8013502:	bd70      	pop	{r4, r5, r6, pc}
 8013504:	f240 3086 	movw	r0, #902	@ 0x386
 8013508:	bd70      	pop	{r4, r5, r6, pc}
 801350a:	200b      	movs	r0, #11
 801350c:	4770      	bx	lr
 801350e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013512:	bd70      	pop	{r4, r5, r6, pc}
 8013514:	200b      	movs	r0, #11
 8013516:	bd70      	pop	{r4, r5, r6, pc}
 8013518:	2001      	movs	r0, #1
 801351a:	bd70      	pop	{r4, r5, r6, pc}

0801351c <rcl_wait_set_add_client>:
 801351c:	b318      	cbz	r0, 8013566 <rcl_wait_set_add_client+0x4a>
 801351e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013520:	b570      	push	{r4, r5, r6, lr}
 8013522:	4604      	mov	r4, r0
 8013524:	b30b      	cbz	r3, 801356a <rcl_wait_set_add_client+0x4e>
 8013526:	b319      	cbz	r1, 8013570 <rcl_wait_set_add_client+0x54>
 8013528:	699d      	ldr	r5, [r3, #24]
 801352a:	69c0      	ldr	r0, [r0, #28]
 801352c:	4285      	cmp	r5, r0
 801352e:	d217      	bcs.n	8013560 <rcl_wait_set_add_client+0x44>
 8013530:	69a0      	ldr	r0, [r4, #24]
 8013532:	1c6e      	adds	r6, r5, #1
 8013534:	619e      	str	r6, [r3, #24]
 8013536:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801353a:	b102      	cbz	r2, 801353e <rcl_wait_set_add_client+0x22>
 801353c:	6015      	str	r5, [r2, #0]
 801353e:	4608      	mov	r0, r1
 8013540:	f7fe f980 	bl	8011844 <rcl_client_get_rmw_handle>
 8013544:	b150      	cbz	r0, 801355c <rcl_wait_set_add_client+0x40>
 8013546:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013548:	6842      	ldr	r2, [r0, #4]
 801354a:	6a1b      	ldr	r3, [r3, #32]
 801354c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013550:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013552:	69d3      	ldr	r3, [r2, #28]
 8013554:	3301      	adds	r3, #1
 8013556:	2000      	movs	r0, #0
 8013558:	61d3      	str	r3, [r2, #28]
 801355a:	bd70      	pop	{r4, r5, r6, pc}
 801355c:	2001      	movs	r0, #1
 801355e:	bd70      	pop	{r4, r5, r6, pc}
 8013560:	f240 3086 	movw	r0, #902	@ 0x386
 8013564:	bd70      	pop	{r4, r5, r6, pc}
 8013566:	200b      	movs	r0, #11
 8013568:	4770      	bx	lr
 801356a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801356e:	bd70      	pop	{r4, r5, r6, pc}
 8013570:	200b      	movs	r0, #11
 8013572:	bd70      	pop	{r4, r5, r6, pc}

08013574 <rcl_wait_set_add_service>:
 8013574:	b318      	cbz	r0, 80135be <rcl_wait_set_add_service+0x4a>
 8013576:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013578:	b570      	push	{r4, r5, r6, lr}
 801357a:	4604      	mov	r4, r0
 801357c:	b30b      	cbz	r3, 80135c2 <rcl_wait_set_add_service+0x4e>
 801357e:	b319      	cbz	r1, 80135c8 <rcl_wait_set_add_service+0x54>
 8013580:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8013582:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8013584:	4285      	cmp	r5, r0
 8013586:	d217      	bcs.n	80135b8 <rcl_wait_set_add_service+0x44>
 8013588:	6a20      	ldr	r0, [r4, #32]
 801358a:	1c6e      	adds	r6, r5, #1
 801358c:	625e      	str	r6, [r3, #36]	@ 0x24
 801358e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013592:	b102      	cbz	r2, 8013596 <rcl_wait_set_add_service+0x22>
 8013594:	6015      	str	r5, [r2, #0]
 8013596:	4608      	mov	r0, r1
 8013598:	f7fe fed6 	bl	8012348 <rcl_service_get_rmw_handle>
 801359c:	b150      	cbz	r0, 80135b4 <rcl_wait_set_add_service+0x40>
 801359e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80135a0:	6842      	ldr	r2, [r0, #4]
 80135a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135a4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80135a8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80135aa:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80135ac:	3301      	adds	r3, #1
 80135ae:	2000      	movs	r0, #0
 80135b0:	6293      	str	r3, [r2, #40]	@ 0x28
 80135b2:	bd70      	pop	{r4, r5, r6, pc}
 80135b4:	2001      	movs	r0, #1
 80135b6:	bd70      	pop	{r4, r5, r6, pc}
 80135b8:	f240 3086 	movw	r0, #902	@ 0x386
 80135bc:	bd70      	pop	{r4, r5, r6, pc}
 80135be:	200b      	movs	r0, #11
 80135c0:	4770      	bx	lr
 80135c2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80135c6:	bd70      	pop	{r4, r5, r6, pc}
 80135c8:	200b      	movs	r0, #11
 80135ca:	bd70      	pop	{r4, r5, r6, pc}
 80135cc:	0000      	movs	r0, r0
	...

080135d0 <rcl_wait>:
 80135d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135d4:	ed2d 8b02 	vpush	{d8}
 80135d8:	b08d      	sub	sp, #52	@ 0x34
 80135da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80135de:	2800      	cmp	r0, #0
 80135e0:	f000 8143 	beq.w	801386a <rcl_wait+0x29a>
 80135e4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80135e6:	4605      	mov	r5, r0
 80135e8:	2e00      	cmp	r6, #0
 80135ea:	f000 8112 	beq.w	8013812 <rcl_wait+0x242>
 80135ee:	6843      	ldr	r3, [r0, #4]
 80135f0:	b983      	cbnz	r3, 8013614 <rcl_wait+0x44>
 80135f2:	68eb      	ldr	r3, [r5, #12]
 80135f4:	b973      	cbnz	r3, 8013614 <rcl_wait+0x44>
 80135f6:	696b      	ldr	r3, [r5, #20]
 80135f8:	b963      	cbnz	r3, 8013614 <rcl_wait+0x44>
 80135fa:	69eb      	ldr	r3, [r5, #28]
 80135fc:	b953      	cbnz	r3, 8013614 <rcl_wait+0x44>
 80135fe:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8013600:	b943      	cbnz	r3, 8013614 <rcl_wait+0x44>
 8013602:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8013604:	b933      	cbnz	r3, 8013614 <rcl_wait+0x44>
 8013606:	f240 3085 	movw	r0, #901	@ 0x385
 801360a:	b00d      	add	sp, #52	@ 0x34
 801360c:	ecbd 8b02 	vpop	{d8}
 8013610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013614:	9b04      	ldr	r3, [sp, #16]
 8013616:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8013618:	2b01      	cmp	r3, #1
 801361a:	9b05      	ldr	r3, [sp, #20]
 801361c:	f173 0300 	sbcs.w	r3, r3, #0
 8013620:	f2c0 80f0 	blt.w	8013804 <rcl_wait+0x234>
 8013624:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8013628:	4643      	mov	r3, r8
 801362a:	2a00      	cmp	r2, #0
 801362c:	f000 8133 	beq.w	8013896 <rcl_wait+0x2c6>
 8013630:	2400      	movs	r4, #0
 8013632:	4613      	mov	r3, r2
 8013634:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 80138a8 <rcl_wait+0x2d8>
 8013638:	46a2      	mov	sl, r4
 801363a:	46a3      	mov	fp, r4
 801363c:	f240 3921 	movw	r9, #801	@ 0x321
 8013640:	4632      	mov	r2, r6
 8013642:	e014      	b.n	801366e <rcl_wait+0x9e>
 8013644:	2800      	cmp	r0, #0
 8013646:	d1e0      	bne.n	801360a <rcl_wait+0x3a>
 8013648:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801364c:	4542      	cmp	r2, r8
 801364e:	eb73 0107 	sbcs.w	r1, r3, r7
 8013652:	da03      	bge.n	801365c <rcl_wait+0x8c>
 8013654:	4690      	mov	r8, r2
 8013656:	461f      	mov	r7, r3
 8013658:	f04f 0b01 	mov.w	fp, #1
 801365c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801365e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013660:	3401      	adds	r4, #1
 8013662:	f14a 0a00 	adc.w	sl, sl, #0
 8013666:	429c      	cmp	r4, r3
 8013668:	f17a 0100 	sbcs.w	r1, sl, #0
 801366c:	d228      	bcs.n	80136c0 <rcl_wait+0xf0>
 801366e:	6928      	ldr	r0, [r5, #16]
 8013670:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013674:	a908      	add	r1, sp, #32
 8013676:	00a6      	lsls	r6, r4, #2
 8013678:	2800      	cmp	r0, #0
 801367a:	d0f1      	beq.n	8013660 <rcl_wait+0x90>
 801367c:	68eb      	ldr	r3, [r5, #12]
 801367e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8013682:	4423      	add	r3, r4
 8013684:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8013688:	f1be 0f00 	cmp.w	lr, #0
 801368c:	d006      	beq.n	801369c <rcl_wait+0xcc>
 801368e:	6913      	ldr	r3, [r2, #16]
 8013690:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8013694:	3301      	adds	r3, #1
 8013696:	6113      	str	r3, [r2, #16]
 8013698:	692b      	ldr	r3, [r5, #16]
 801369a:	5998      	ldr	r0, [r3, r6]
 801369c:	ed8d 8b08 	vstr	d8, [sp, #32]
 80136a0:	f7ff fa94 	bl	8012bcc <rcl_timer_get_time_until_next_call>
 80136a4:	4548      	cmp	r0, r9
 80136a6:	d1cd      	bne.n	8013644 <rcl_wait+0x74>
 80136a8:	692b      	ldr	r3, [r5, #16]
 80136aa:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80136ac:	2100      	movs	r1, #0
 80136ae:	5199      	str	r1, [r3, r6]
 80136b0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80136b2:	3401      	adds	r4, #1
 80136b4:	f14a 0a00 	adc.w	sl, sl, #0
 80136b8:	429c      	cmp	r4, r3
 80136ba:	f17a 0100 	sbcs.w	r1, sl, #0
 80136be:	d3d6      	bcc.n	801366e <rcl_wait+0x9e>
 80136c0:	4616      	mov	r6, r2
 80136c2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80136c6:	4313      	orrs	r3, r2
 80136c8:	46d9      	mov	r9, fp
 80136ca:	f040 80a9 	bne.w	8013820 <rcl_wait+0x250>
 80136ce:	2300      	movs	r3, #0
 80136d0:	2200      	movs	r2, #0
 80136d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80136d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80136da:	ab08      	add	r3, sp, #32
 80136dc:	9302      	str	r3, [sp, #8]
 80136de:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 80136e0:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 80136e4:	e9cd 3200 	strd	r3, r2, [sp]
 80136e8:	f106 0110 	add.w	r1, r6, #16
 80136ec:	f106 031c 	add.w	r3, r6, #28
 80136f0:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80136f4:	1d30      	adds	r0, r6, #4
 80136f6:	f001 fefd 	bl	80154f4 <rmw_wait>
 80136fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80136fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80136fe:	4680      	mov	r8, r0
 8013700:	b1ca      	cbz	r2, 8013736 <rcl_wait+0x166>
 8013702:	2400      	movs	r4, #0
 8013704:	4627      	mov	r7, r4
 8013706:	692a      	ldr	r2, [r5, #16]
 8013708:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 801370c:	f10d 011f 	add.w	r1, sp, #31
 8013710:	00a6      	lsls	r6, r4, #2
 8013712:	b160      	cbz	r0, 801372e <rcl_wait+0x15e>
 8013714:	f88d 701f 	strb.w	r7, [sp, #31]
 8013718:	f7ff fa1e 	bl	8012b58 <rcl_timer_is_ready>
 801371c:	2800      	cmp	r0, #0
 801371e:	f47f af74 	bne.w	801360a <rcl_wait+0x3a>
 8013722:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013726:	b90b      	cbnz	r3, 801372c <rcl_wait+0x15c>
 8013728:	692a      	ldr	r2, [r5, #16]
 801372a:	5193      	str	r3, [r2, r6]
 801372c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801372e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013730:	3401      	adds	r4, #1
 8013732:	42a2      	cmp	r2, r4
 8013734:	d8e7      	bhi.n	8013706 <rcl_wait+0x136>
 8013736:	f038 0002 	bics.w	r0, r8, #2
 801373a:	f040 8090 	bne.w	801385e <rcl_wait+0x28e>
 801373e:	686e      	ldr	r6, [r5, #4]
 8013740:	4602      	mov	r2, r0
 8013742:	b91e      	cbnz	r6, 801374c <rcl_wait+0x17c>
 8013744:	e00d      	b.n	8013762 <rcl_wait+0x192>
 8013746:	3201      	adds	r2, #1
 8013748:	42b2      	cmp	r2, r6
 801374a:	d00a      	beq.n	8013762 <rcl_wait+0x192>
 801374c:	6899      	ldr	r1, [r3, #8]
 801374e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013752:	2900      	cmp	r1, #0
 8013754:	d1f7      	bne.n	8013746 <rcl_wait+0x176>
 8013756:	682c      	ldr	r4, [r5, #0]
 8013758:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801375c:	3201      	adds	r2, #1
 801375e:	42b2      	cmp	r2, r6
 8013760:	d1f4      	bne.n	801374c <rcl_wait+0x17c>
 8013762:	68ee      	ldr	r6, [r5, #12]
 8013764:	2200      	movs	r2, #0
 8013766:	b91e      	cbnz	r6, 8013770 <rcl_wait+0x1a0>
 8013768:	e00d      	b.n	8013786 <rcl_wait+0x1b6>
 801376a:	3201      	adds	r2, #1
 801376c:	42b2      	cmp	r2, r6
 801376e:	d00a      	beq.n	8013786 <rcl_wait+0x1b6>
 8013770:	6959      	ldr	r1, [r3, #20]
 8013772:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013776:	2900      	cmp	r1, #0
 8013778:	d1f7      	bne.n	801376a <rcl_wait+0x19a>
 801377a:	68ac      	ldr	r4, [r5, #8]
 801377c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013780:	3201      	adds	r2, #1
 8013782:	42b2      	cmp	r2, r6
 8013784:	d1f4      	bne.n	8013770 <rcl_wait+0x1a0>
 8013786:	69ee      	ldr	r6, [r5, #28]
 8013788:	2200      	movs	r2, #0
 801378a:	b91e      	cbnz	r6, 8013794 <rcl_wait+0x1c4>
 801378c:	e00d      	b.n	80137aa <rcl_wait+0x1da>
 801378e:	3201      	adds	r2, #1
 8013790:	42b2      	cmp	r2, r6
 8013792:	d00a      	beq.n	80137aa <rcl_wait+0x1da>
 8013794:	6a19      	ldr	r1, [r3, #32]
 8013796:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801379a:	2900      	cmp	r1, #0
 801379c:	d1f7      	bne.n	801378e <rcl_wait+0x1be>
 801379e:	69ac      	ldr	r4, [r5, #24]
 80137a0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80137a4:	3201      	adds	r2, #1
 80137a6:	42b2      	cmp	r2, r6
 80137a8:	d1f4      	bne.n	8013794 <rcl_wait+0x1c4>
 80137aa:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 80137ac:	2200      	movs	r2, #0
 80137ae:	b91e      	cbnz	r6, 80137b8 <rcl_wait+0x1e8>
 80137b0:	e00d      	b.n	80137ce <rcl_wait+0x1fe>
 80137b2:	3201      	adds	r2, #1
 80137b4:	4296      	cmp	r6, r2
 80137b6:	d00a      	beq.n	80137ce <rcl_wait+0x1fe>
 80137b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80137ba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80137be:	2900      	cmp	r1, #0
 80137c0:	d1f7      	bne.n	80137b2 <rcl_wait+0x1e2>
 80137c2:	6a2c      	ldr	r4, [r5, #32]
 80137c4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80137c8:	3201      	adds	r2, #1
 80137ca:	4296      	cmp	r6, r2
 80137cc:	d1f4      	bne.n	80137b8 <rcl_wait+0x1e8>
 80137ce:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 80137d0:	2200      	movs	r2, #0
 80137d2:	b91e      	cbnz	r6, 80137dc <rcl_wait+0x20c>
 80137d4:	e00d      	b.n	80137f2 <rcl_wait+0x222>
 80137d6:	3201      	adds	r2, #1
 80137d8:	42b2      	cmp	r2, r6
 80137da:	d00a      	beq.n	80137f2 <rcl_wait+0x222>
 80137dc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80137de:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80137e2:	2900      	cmp	r1, #0
 80137e4:	d1f7      	bne.n	80137d6 <rcl_wait+0x206>
 80137e6:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80137e8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80137ec:	3201      	adds	r2, #1
 80137ee:	42b2      	cmp	r2, r6
 80137f0:	d1f4      	bne.n	80137dc <rcl_wait+0x20c>
 80137f2:	f1b8 0f02 	cmp.w	r8, #2
 80137f6:	f47f af08 	bne.w	801360a <rcl_wait+0x3a>
 80137fa:	464b      	mov	r3, r9
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	bf08      	it	eq
 8013800:	2002      	moveq	r0, #2
 8013802:	e702      	b.n	801360a <rcl_wait+0x3a>
 8013804:	2a00      	cmp	r2, #0
 8013806:	d03a      	beq.n	801387e <rcl_wait+0x2ae>
 8013808:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801380c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8013810:	e70e      	b.n	8013630 <rcl_wait+0x60>
 8013812:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013816:	b00d      	add	sp, #52	@ 0x34
 8013818:	ecbd 8b02 	vpop	{d8}
 801381c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013820:	9b04      	ldr	r3, [sp, #16]
 8013822:	2b01      	cmp	r3, #1
 8013824:	9b05      	ldr	r3, [sp, #20]
 8013826:	f173 0300 	sbcs.w	r3, r3, #0
 801382a:	db24      	blt.n	8013876 <rcl_wait+0x2a6>
 801382c:	2f00      	cmp	r7, #0
 801382e:	bfbc      	itt	lt
 8013830:	f04f 0800 	movlt.w	r8, #0
 8013834:	4647      	movlt	r7, r8
 8013836:	a31e      	add	r3, pc, #120	@ (adr r3, 80138b0 <rcl_wait+0x2e0>)
 8013838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801383c:	4640      	mov	r0, r8
 801383e:	4639      	mov	r1, r7
 8013840:	f7ec ff12 	bl	8000668 <__aeabi_ldivmod>
 8013844:	a31a      	add	r3, pc, #104	@ (adr r3, 80138b0 <rcl_wait+0x2e0>)
 8013846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801384a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801384e:	4640      	mov	r0, r8
 8013850:	4639      	mov	r1, r7
 8013852:	f7ec ff09 	bl	8000668 <__aeabi_ldivmod>
 8013856:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801385a:	ab08      	add	r3, sp, #32
 801385c:	e73e      	b.n	80136dc <rcl_wait+0x10c>
 801385e:	2001      	movs	r0, #1
 8013860:	b00d      	add	sp, #52	@ 0x34
 8013862:	ecbd 8b02 	vpop	{d8}
 8013866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801386a:	200b      	movs	r0, #11
 801386c:	b00d      	add	sp, #52	@ 0x34
 801386e:	ecbd 8b02 	vpop	{d8}
 8013872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013876:	465b      	mov	r3, fp
 8013878:	2b00      	cmp	r3, #0
 801387a:	d1d7      	bne.n	801382c <rcl_wait+0x25c>
 801387c:	e72e      	b.n	80136dc <rcl_wait+0x10c>
 801387e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8013882:	430b      	orrs	r3, r1
 8013884:	bf08      	it	eq
 8013886:	4691      	moveq	r9, r2
 8013888:	f43f af21 	beq.w	80136ce <rcl_wait+0xfe>
 801388c:	9b04      	ldr	r3, [sp, #16]
 801388e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8013892:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8013896:	2b01      	cmp	r3, #1
 8013898:	9b05      	ldr	r3, [sp, #20]
 801389a:	f173 0300 	sbcs.w	r3, r3, #0
 801389e:	f04f 0300 	mov.w	r3, #0
 80138a2:	4699      	mov	r9, r3
 80138a4:	dac2      	bge.n	801382c <rcl_wait+0x25c>
 80138a6:	e719      	b.n	80136dc <rcl_wait+0x10c>
 80138a8:	ffffffff 	.word	0xffffffff
 80138ac:	7fffffff 	.word	0x7fffffff
 80138b0:	3b9aca00 	.word	0x3b9aca00
 80138b4:	00000000 	.word	0x00000000

080138b8 <rcl_action_take_goal_response>:
 80138b8:	2800      	cmp	r0, #0
 80138ba:	d039      	beq.n	8013930 <rcl_action_take_goal_response+0x78>
 80138bc:	b570      	push	{r4, r5, r6, lr}
 80138be:	4604      	mov	r4, r0
 80138c0:	6800      	ldr	r0, [r0, #0]
 80138c2:	b380      	cbz	r0, 8013926 <rcl_action_take_goal_response+0x6e>
 80138c4:	460d      	mov	r5, r1
 80138c6:	4616      	mov	r6, r2
 80138c8:	f7fe f842 	bl	8011950 <rcl_client_is_valid>
 80138cc:	b330      	cbz	r0, 801391c <rcl_action_take_goal_response+0x64>
 80138ce:	6820      	ldr	r0, [r4, #0]
 80138d0:	3004      	adds	r0, #4
 80138d2:	f7fe f83d 	bl	8011950 <rcl_client_is_valid>
 80138d6:	b308      	cbz	r0, 801391c <rcl_action_take_goal_response+0x64>
 80138d8:	6820      	ldr	r0, [r4, #0]
 80138da:	3008      	adds	r0, #8
 80138dc:	f7fe f838 	bl	8011950 <rcl_client_is_valid>
 80138e0:	b1e0      	cbz	r0, 801391c <rcl_action_take_goal_response+0x64>
 80138e2:	6820      	ldr	r0, [r4, #0]
 80138e4:	300c      	adds	r0, #12
 80138e6:	f7fe fdf5 	bl	80124d4 <rcl_subscription_is_valid>
 80138ea:	b1b8      	cbz	r0, 801391c <rcl_action_take_goal_response+0x64>
 80138ec:	6820      	ldr	r0, [r4, #0]
 80138ee:	3010      	adds	r0, #16
 80138f0:	f7fe fdf0 	bl	80124d4 <rcl_subscription_is_valid>
 80138f4:	b190      	cbz	r0, 801391c <rcl_action_take_goal_response+0x64>
 80138f6:	b1cd      	cbz	r5, 801392c <rcl_action_take_goal_response+0x74>
 80138f8:	b1c6      	cbz	r6, 801392c <rcl_action_take_goal_response+0x74>
 80138fa:	6820      	ldr	r0, [r4, #0]
 80138fc:	4632      	mov	r2, r6
 80138fe:	4629      	mov	r1, r5
 8013900:	f7fd ffde 	bl	80118c0 <rcl_take_response>
 8013904:	b148      	cbz	r0, 801391a <rcl_action_take_goal_response+0x62>
 8013906:	280a      	cmp	r0, #10
 8013908:	d007      	beq.n	801391a <rcl_action_take_goal_response+0x62>
 801390a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801390e:	f640 0337 	movw	r3, #2103	@ 0x837
 8013912:	4290      	cmp	r0, r2
 8013914:	bf0c      	ite	eq
 8013916:	4618      	moveq	r0, r3
 8013918:	2001      	movne	r0, #1
 801391a:	bd70      	pop	{r4, r5, r6, pc}
 801391c:	f7f9 fa14 	bl	800cd48 <rcutils_reset_error>
 8013920:	f640 0036 	movw	r0, #2102	@ 0x836
 8013924:	bd70      	pop	{r4, r5, r6, pc}
 8013926:	f640 0036 	movw	r0, #2102	@ 0x836
 801392a:	bd70      	pop	{r4, r5, r6, pc}
 801392c:	200b      	movs	r0, #11
 801392e:	bd70      	pop	{r4, r5, r6, pc}
 8013930:	f640 0036 	movw	r0, #2102	@ 0x836
 8013934:	4770      	bx	lr
 8013936:	bf00      	nop

08013938 <rcl_action_send_result_request>:
 8013938:	b390      	cbz	r0, 80139a0 <rcl_action_send_result_request+0x68>
 801393a:	b570      	push	{r4, r5, r6, lr}
 801393c:	4604      	mov	r4, r0
 801393e:	6800      	ldr	r0, [r0, #0]
 8013940:	b348      	cbz	r0, 8013996 <rcl_action_send_result_request+0x5e>
 8013942:	460d      	mov	r5, r1
 8013944:	4616      	mov	r6, r2
 8013946:	f7fe f803 	bl	8011950 <rcl_client_is_valid>
 801394a:	b1f8      	cbz	r0, 801398c <rcl_action_send_result_request+0x54>
 801394c:	6820      	ldr	r0, [r4, #0]
 801394e:	3004      	adds	r0, #4
 8013950:	f7fd fffe 	bl	8011950 <rcl_client_is_valid>
 8013954:	b1d0      	cbz	r0, 801398c <rcl_action_send_result_request+0x54>
 8013956:	6820      	ldr	r0, [r4, #0]
 8013958:	3008      	adds	r0, #8
 801395a:	f7fd fff9 	bl	8011950 <rcl_client_is_valid>
 801395e:	b1a8      	cbz	r0, 801398c <rcl_action_send_result_request+0x54>
 8013960:	6820      	ldr	r0, [r4, #0]
 8013962:	300c      	adds	r0, #12
 8013964:	f7fe fdb6 	bl	80124d4 <rcl_subscription_is_valid>
 8013968:	b180      	cbz	r0, 801398c <rcl_action_send_result_request+0x54>
 801396a:	6820      	ldr	r0, [r4, #0]
 801396c:	3010      	adds	r0, #16
 801396e:	f7fe fdb1 	bl	80124d4 <rcl_subscription_is_valid>
 8013972:	b158      	cbz	r0, 801398c <rcl_action_send_result_request+0x54>
 8013974:	b195      	cbz	r5, 801399c <rcl_action_send_result_request+0x64>
 8013976:	b18e      	cbz	r6, 801399c <rcl_action_send_result_request+0x64>
 8013978:	6820      	ldr	r0, [r4, #0]
 801397a:	4632      	mov	r2, r6
 801397c:	4629      	mov	r1, r5
 801397e:	3008      	adds	r0, #8
 8013980:	f7fd ff66 	bl	8011850 <rcl_send_request>
 8013984:	3800      	subs	r0, #0
 8013986:	bf18      	it	ne
 8013988:	2001      	movne	r0, #1
 801398a:	bd70      	pop	{r4, r5, r6, pc}
 801398c:	f7f9 f9dc 	bl	800cd48 <rcutils_reset_error>
 8013990:	f640 0036 	movw	r0, #2102	@ 0x836
 8013994:	bd70      	pop	{r4, r5, r6, pc}
 8013996:	f640 0036 	movw	r0, #2102	@ 0x836
 801399a:	bd70      	pop	{r4, r5, r6, pc}
 801399c:	200b      	movs	r0, #11
 801399e:	bd70      	pop	{r4, r5, r6, pc}
 80139a0:	f640 0036 	movw	r0, #2102	@ 0x836
 80139a4:	4770      	bx	lr
 80139a6:	bf00      	nop

080139a8 <rcl_action_take_result_response>:
 80139a8:	2800      	cmp	r0, #0
 80139aa:	d03a      	beq.n	8013a22 <rcl_action_take_result_response+0x7a>
 80139ac:	b570      	push	{r4, r5, r6, lr}
 80139ae:	4604      	mov	r4, r0
 80139b0:	6800      	ldr	r0, [r0, #0]
 80139b2:	b388      	cbz	r0, 8013a18 <rcl_action_take_result_response+0x70>
 80139b4:	460d      	mov	r5, r1
 80139b6:	4616      	mov	r6, r2
 80139b8:	f7fd ffca 	bl	8011950 <rcl_client_is_valid>
 80139bc:	b338      	cbz	r0, 8013a0e <rcl_action_take_result_response+0x66>
 80139be:	6820      	ldr	r0, [r4, #0]
 80139c0:	3004      	adds	r0, #4
 80139c2:	f7fd ffc5 	bl	8011950 <rcl_client_is_valid>
 80139c6:	b310      	cbz	r0, 8013a0e <rcl_action_take_result_response+0x66>
 80139c8:	6820      	ldr	r0, [r4, #0]
 80139ca:	3008      	adds	r0, #8
 80139cc:	f7fd ffc0 	bl	8011950 <rcl_client_is_valid>
 80139d0:	b1e8      	cbz	r0, 8013a0e <rcl_action_take_result_response+0x66>
 80139d2:	6820      	ldr	r0, [r4, #0]
 80139d4:	300c      	adds	r0, #12
 80139d6:	f7fe fd7d 	bl	80124d4 <rcl_subscription_is_valid>
 80139da:	b1c0      	cbz	r0, 8013a0e <rcl_action_take_result_response+0x66>
 80139dc:	6820      	ldr	r0, [r4, #0]
 80139de:	3010      	adds	r0, #16
 80139e0:	f7fe fd78 	bl	80124d4 <rcl_subscription_is_valid>
 80139e4:	b198      	cbz	r0, 8013a0e <rcl_action_take_result_response+0x66>
 80139e6:	b1d5      	cbz	r5, 8013a1e <rcl_action_take_result_response+0x76>
 80139e8:	b1ce      	cbz	r6, 8013a1e <rcl_action_take_result_response+0x76>
 80139ea:	6820      	ldr	r0, [r4, #0]
 80139ec:	4632      	mov	r2, r6
 80139ee:	4629      	mov	r1, r5
 80139f0:	3008      	adds	r0, #8
 80139f2:	f7fd ff65 	bl	80118c0 <rcl_take_response>
 80139f6:	b148      	cbz	r0, 8013a0c <rcl_action_take_result_response+0x64>
 80139f8:	280a      	cmp	r0, #10
 80139fa:	d007      	beq.n	8013a0c <rcl_action_take_result_response+0x64>
 80139fc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013a00:	f640 0337 	movw	r3, #2103	@ 0x837
 8013a04:	4290      	cmp	r0, r2
 8013a06:	bf0c      	ite	eq
 8013a08:	4618      	moveq	r0, r3
 8013a0a:	2001      	movne	r0, #1
 8013a0c:	bd70      	pop	{r4, r5, r6, pc}
 8013a0e:	f7f9 f99b 	bl	800cd48 <rcutils_reset_error>
 8013a12:	f640 0036 	movw	r0, #2102	@ 0x836
 8013a16:	bd70      	pop	{r4, r5, r6, pc}
 8013a18:	f640 0036 	movw	r0, #2102	@ 0x836
 8013a1c:	bd70      	pop	{r4, r5, r6, pc}
 8013a1e:	200b      	movs	r0, #11
 8013a20:	bd70      	pop	{r4, r5, r6, pc}
 8013a22:	f640 0036 	movw	r0, #2102	@ 0x836
 8013a26:	4770      	bx	lr

08013a28 <rcl_action_take_cancel_response>:
 8013a28:	2800      	cmp	r0, #0
 8013a2a:	d03a      	beq.n	8013aa2 <rcl_action_take_cancel_response+0x7a>
 8013a2c:	b570      	push	{r4, r5, r6, lr}
 8013a2e:	4604      	mov	r4, r0
 8013a30:	6800      	ldr	r0, [r0, #0]
 8013a32:	b388      	cbz	r0, 8013a98 <rcl_action_take_cancel_response+0x70>
 8013a34:	460d      	mov	r5, r1
 8013a36:	4616      	mov	r6, r2
 8013a38:	f7fd ff8a 	bl	8011950 <rcl_client_is_valid>
 8013a3c:	b338      	cbz	r0, 8013a8e <rcl_action_take_cancel_response+0x66>
 8013a3e:	6820      	ldr	r0, [r4, #0]
 8013a40:	3004      	adds	r0, #4
 8013a42:	f7fd ff85 	bl	8011950 <rcl_client_is_valid>
 8013a46:	b310      	cbz	r0, 8013a8e <rcl_action_take_cancel_response+0x66>
 8013a48:	6820      	ldr	r0, [r4, #0]
 8013a4a:	3008      	adds	r0, #8
 8013a4c:	f7fd ff80 	bl	8011950 <rcl_client_is_valid>
 8013a50:	b1e8      	cbz	r0, 8013a8e <rcl_action_take_cancel_response+0x66>
 8013a52:	6820      	ldr	r0, [r4, #0]
 8013a54:	300c      	adds	r0, #12
 8013a56:	f7fe fd3d 	bl	80124d4 <rcl_subscription_is_valid>
 8013a5a:	b1c0      	cbz	r0, 8013a8e <rcl_action_take_cancel_response+0x66>
 8013a5c:	6820      	ldr	r0, [r4, #0]
 8013a5e:	3010      	adds	r0, #16
 8013a60:	f7fe fd38 	bl	80124d4 <rcl_subscription_is_valid>
 8013a64:	b198      	cbz	r0, 8013a8e <rcl_action_take_cancel_response+0x66>
 8013a66:	b1d5      	cbz	r5, 8013a9e <rcl_action_take_cancel_response+0x76>
 8013a68:	b1ce      	cbz	r6, 8013a9e <rcl_action_take_cancel_response+0x76>
 8013a6a:	6820      	ldr	r0, [r4, #0]
 8013a6c:	4632      	mov	r2, r6
 8013a6e:	4629      	mov	r1, r5
 8013a70:	3004      	adds	r0, #4
 8013a72:	f7fd ff25 	bl	80118c0 <rcl_take_response>
 8013a76:	b148      	cbz	r0, 8013a8c <rcl_action_take_cancel_response+0x64>
 8013a78:	280a      	cmp	r0, #10
 8013a7a:	d007      	beq.n	8013a8c <rcl_action_take_cancel_response+0x64>
 8013a7c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013a80:	f640 0337 	movw	r3, #2103	@ 0x837
 8013a84:	4290      	cmp	r0, r2
 8013a86:	bf0c      	ite	eq
 8013a88:	4618      	moveq	r0, r3
 8013a8a:	2001      	movne	r0, #1
 8013a8c:	bd70      	pop	{r4, r5, r6, pc}
 8013a8e:	f7f9 f95b 	bl	800cd48 <rcutils_reset_error>
 8013a92:	f640 0036 	movw	r0, #2102	@ 0x836
 8013a96:	bd70      	pop	{r4, r5, r6, pc}
 8013a98:	f640 0036 	movw	r0, #2102	@ 0x836
 8013a9c:	bd70      	pop	{r4, r5, r6, pc}
 8013a9e:	200b      	movs	r0, #11
 8013aa0:	bd70      	pop	{r4, r5, r6, pc}
 8013aa2:	f640 0036 	movw	r0, #2102	@ 0x836
 8013aa6:	4770      	bx	lr

08013aa8 <rcl_action_take_feedback>:
 8013aa8:	2800      	cmp	r0, #0
 8013aaa:	d038      	beq.n	8013b1e <rcl_action_take_feedback+0x76>
 8013aac:	b530      	push	{r4, r5, lr}
 8013aae:	4604      	mov	r4, r0
 8013ab0:	6800      	ldr	r0, [r0, #0]
 8013ab2:	b091      	sub	sp, #68	@ 0x44
 8013ab4:	b378      	cbz	r0, 8013b16 <rcl_action_take_feedback+0x6e>
 8013ab6:	460d      	mov	r5, r1
 8013ab8:	f7fd ff4a 	bl	8011950 <rcl_client_is_valid>
 8013abc:	b328      	cbz	r0, 8013b0a <rcl_action_take_feedback+0x62>
 8013abe:	6820      	ldr	r0, [r4, #0]
 8013ac0:	3004      	adds	r0, #4
 8013ac2:	f7fd ff45 	bl	8011950 <rcl_client_is_valid>
 8013ac6:	b300      	cbz	r0, 8013b0a <rcl_action_take_feedback+0x62>
 8013ac8:	6820      	ldr	r0, [r4, #0]
 8013aca:	3008      	adds	r0, #8
 8013acc:	f7fd ff40 	bl	8011950 <rcl_client_is_valid>
 8013ad0:	b1d8      	cbz	r0, 8013b0a <rcl_action_take_feedback+0x62>
 8013ad2:	6820      	ldr	r0, [r4, #0]
 8013ad4:	300c      	adds	r0, #12
 8013ad6:	f7fe fcfd 	bl	80124d4 <rcl_subscription_is_valid>
 8013ada:	b1b0      	cbz	r0, 8013b0a <rcl_action_take_feedback+0x62>
 8013adc:	6820      	ldr	r0, [r4, #0]
 8013ade:	3010      	adds	r0, #16
 8013ae0:	f7fe fcf8 	bl	80124d4 <rcl_subscription_is_valid>
 8013ae4:	b188      	cbz	r0, 8013b0a <rcl_action_take_feedback+0x62>
 8013ae6:	b1ed      	cbz	r5, 8013b24 <rcl_action_take_feedback+0x7c>
 8013ae8:	6820      	ldr	r0, [r4, #0]
 8013aea:	2300      	movs	r3, #0
 8013aec:	466a      	mov	r2, sp
 8013aee:	4629      	mov	r1, r5
 8013af0:	300c      	adds	r0, #12
 8013af2:	f7fe fc91 	bl	8012418 <rcl_take>
 8013af6:	b160      	cbz	r0, 8013b12 <rcl_action_take_feedback+0x6a>
 8013af8:	f240 1391 	movw	r3, #401	@ 0x191
 8013afc:	4298      	cmp	r0, r3
 8013afe:	d014      	beq.n	8013b2a <rcl_action_take_feedback+0x82>
 8013b00:	280a      	cmp	r0, #10
 8013b02:	bf18      	it	ne
 8013b04:	2001      	movne	r0, #1
 8013b06:	b011      	add	sp, #68	@ 0x44
 8013b08:	bd30      	pop	{r4, r5, pc}
 8013b0a:	f7f9 f91d 	bl	800cd48 <rcutils_reset_error>
 8013b0e:	f640 0036 	movw	r0, #2102	@ 0x836
 8013b12:	b011      	add	sp, #68	@ 0x44
 8013b14:	bd30      	pop	{r4, r5, pc}
 8013b16:	f640 0036 	movw	r0, #2102	@ 0x836
 8013b1a:	b011      	add	sp, #68	@ 0x44
 8013b1c:	bd30      	pop	{r4, r5, pc}
 8013b1e:	f640 0036 	movw	r0, #2102	@ 0x836
 8013b22:	4770      	bx	lr
 8013b24:	200b      	movs	r0, #11
 8013b26:	b011      	add	sp, #68	@ 0x44
 8013b28:	bd30      	pop	{r4, r5, pc}
 8013b2a:	f640 0037 	movw	r0, #2103	@ 0x837
 8013b2e:	e7f0      	b.n	8013b12 <rcl_action_take_feedback+0x6a>

08013b30 <rcl_action_wait_set_add_action_client>:
 8013b30:	2800      	cmp	r0, #0
 8013b32:	d048      	beq.n	8013bc6 <rcl_action_wait_set_add_action_client+0x96>
 8013b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b36:	460c      	mov	r4, r1
 8013b38:	2900      	cmp	r1, #0
 8013b3a:	d03c      	beq.n	8013bb6 <rcl_action_wait_set_add_action_client+0x86>
 8013b3c:	4605      	mov	r5, r0
 8013b3e:	6808      	ldr	r0, [r1, #0]
 8013b40:	2800      	cmp	r0, #0
 8013b42:	d038      	beq.n	8013bb6 <rcl_action_wait_set_add_action_client+0x86>
 8013b44:	4617      	mov	r7, r2
 8013b46:	461e      	mov	r6, r3
 8013b48:	f7fd ff02 	bl	8011950 <rcl_client_is_valid>
 8013b4c:	b3b0      	cbz	r0, 8013bbc <rcl_action_wait_set_add_action_client+0x8c>
 8013b4e:	6820      	ldr	r0, [r4, #0]
 8013b50:	3004      	adds	r0, #4
 8013b52:	f7fd fefd 	bl	8011950 <rcl_client_is_valid>
 8013b56:	b388      	cbz	r0, 8013bbc <rcl_action_wait_set_add_action_client+0x8c>
 8013b58:	6820      	ldr	r0, [r4, #0]
 8013b5a:	3008      	adds	r0, #8
 8013b5c:	f7fd fef8 	bl	8011950 <rcl_client_is_valid>
 8013b60:	b360      	cbz	r0, 8013bbc <rcl_action_wait_set_add_action_client+0x8c>
 8013b62:	6820      	ldr	r0, [r4, #0]
 8013b64:	300c      	adds	r0, #12
 8013b66:	f7fe fcb5 	bl	80124d4 <rcl_subscription_is_valid>
 8013b6a:	b338      	cbz	r0, 8013bbc <rcl_action_wait_set_add_action_client+0x8c>
 8013b6c:	6820      	ldr	r0, [r4, #0]
 8013b6e:	3010      	adds	r0, #16
 8013b70:	f7fe fcb0 	bl	80124d4 <rcl_subscription_is_valid>
 8013b74:	b310      	cbz	r0, 8013bbc <rcl_action_wait_set_add_action_client+0x8c>
 8013b76:	6821      	ldr	r1, [r4, #0]
 8013b78:	4628      	mov	r0, r5
 8013b7a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8013b7e:	f7ff fccd 	bl	801351c <rcl_wait_set_add_client>
 8013b82:	b9b8      	cbnz	r0, 8013bb4 <rcl_action_wait_set_add_action_client+0x84>
 8013b84:	6821      	ldr	r1, [r4, #0]
 8013b86:	4628      	mov	r0, r5
 8013b88:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8013b8c:	3104      	adds	r1, #4
 8013b8e:	f7ff fcc5 	bl	801351c <rcl_wait_set_add_client>
 8013b92:	b978      	cbnz	r0, 8013bb4 <rcl_action_wait_set_add_action_client+0x84>
 8013b94:	6821      	ldr	r1, [r4, #0]
 8013b96:	4628      	mov	r0, r5
 8013b98:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8013b9c:	3108      	adds	r1, #8
 8013b9e:	f7ff fcbd 	bl	801351c <rcl_wait_set_add_client>
 8013ba2:	b938      	cbnz	r0, 8013bb4 <rcl_action_wait_set_add_action_client+0x84>
 8013ba4:	6821      	ldr	r1, [r4, #0]
 8013ba6:	4628      	mov	r0, r5
 8013ba8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8013bac:	310c      	adds	r1, #12
 8013bae:	f7ff f96d 	bl	8012e8c <rcl_wait_set_add_subscription>
 8013bb2:	b158      	cbz	r0, 8013bcc <rcl_action_wait_set_add_action_client+0x9c>
 8013bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bb6:	f640 0036 	movw	r0, #2102	@ 0x836
 8013bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bbc:	f7f9 f8c4 	bl	800cd48 <rcutils_reset_error>
 8013bc0:	f640 0036 	movw	r0, #2102	@ 0x836
 8013bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bc6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013bca:	4770      	bx	lr
 8013bcc:	6821      	ldr	r1, [r4, #0]
 8013bce:	4628      	mov	r0, r5
 8013bd0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8013bd4:	3110      	adds	r1, #16
 8013bd6:	f7ff f959 	bl	8012e8c <rcl_wait_set_add_subscription>
 8013bda:	2800      	cmp	r0, #0
 8013bdc:	d1ea      	bne.n	8013bb4 <rcl_action_wait_set_add_action_client+0x84>
 8013bde:	b11f      	cbz	r7, 8013be8 <rcl_action_wait_set_add_action_client+0xb8>
 8013be0:	6823      	ldr	r3, [r4, #0]
 8013be2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8013be6:	603b      	str	r3, [r7, #0]
 8013be8:	2e00      	cmp	r6, #0
 8013bea:	d0e3      	beq.n	8013bb4 <rcl_action_wait_set_add_action_client+0x84>
 8013bec:	6823      	ldr	r3, [r4, #0]
 8013bee:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8013bf2:	6033      	str	r3, [r6, #0]
 8013bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bf6:	bf00      	nop

08013bf8 <rcl_action_client_wait_set_get_entities_ready>:
 8013bf8:	2800      	cmp	r0, #0
 8013bfa:	f000 808d 	beq.w	8013d18 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8013bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c02:	460c      	mov	r4, r1
 8013c04:	2900      	cmp	r1, #0
 8013c06:	d077      	beq.n	8013cf8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8013c08:	4605      	mov	r5, r0
 8013c0a:	6808      	ldr	r0, [r1, #0]
 8013c0c:	2800      	cmp	r0, #0
 8013c0e:	d073      	beq.n	8013cf8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8013c10:	4616      	mov	r6, r2
 8013c12:	461f      	mov	r7, r3
 8013c14:	f7fd fe9c 	bl	8011950 <rcl_client_is_valid>
 8013c18:	2800      	cmp	r0, #0
 8013c1a:	d071      	beq.n	8013d00 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013c1c:	6820      	ldr	r0, [r4, #0]
 8013c1e:	3004      	adds	r0, #4
 8013c20:	f7fd fe96 	bl	8011950 <rcl_client_is_valid>
 8013c24:	2800      	cmp	r0, #0
 8013c26:	d06b      	beq.n	8013d00 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013c28:	6820      	ldr	r0, [r4, #0]
 8013c2a:	3008      	adds	r0, #8
 8013c2c:	f7fd fe90 	bl	8011950 <rcl_client_is_valid>
 8013c30:	2800      	cmp	r0, #0
 8013c32:	d065      	beq.n	8013d00 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013c34:	6820      	ldr	r0, [r4, #0]
 8013c36:	300c      	adds	r0, #12
 8013c38:	f7fe fc4c 	bl	80124d4 <rcl_subscription_is_valid>
 8013c3c:	2800      	cmp	r0, #0
 8013c3e:	d05f      	beq.n	8013d00 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013c40:	6820      	ldr	r0, [r4, #0]
 8013c42:	3010      	adds	r0, #16
 8013c44:	f7fe fc46 	bl	80124d4 <rcl_subscription_is_valid>
 8013c48:	2800      	cmp	r0, #0
 8013c4a:	d059      	beq.n	8013d00 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013c4c:	2e00      	cmp	r6, #0
 8013c4e:	d060      	beq.n	8013d12 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013c50:	2f00      	cmp	r7, #0
 8013c52:	d05e      	beq.n	8013d12 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013c54:	9b06      	ldr	r3, [sp, #24]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d05b      	beq.n	8013d12 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013c5a:	9b07      	ldr	r3, [sp, #28]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d058      	beq.n	8013d12 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013c60:	9b08      	ldr	r3, [sp, #32]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d055      	beq.n	8013d12 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013c66:	6823      	ldr	r3, [r4, #0]
 8013c68:	686a      	ldr	r2, [r5, #4]
 8013c6a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8013c6e:	428a      	cmp	r2, r1
 8013c70:	d94c      	bls.n	8013d0c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013c72:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8013c76:	4282      	cmp	r2, r0
 8013c78:	d948      	bls.n	8013d0c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013c7a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8013c7e:	69ea      	ldr	r2, [r5, #28]
 8013c80:	42a2      	cmp	r2, r4
 8013c82:	d943      	bls.n	8013d0c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013c84:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8013c88:	4562      	cmp	r2, ip
 8013c8a:	d93f      	bls.n	8013d0c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013c8c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8013c90:	4572      	cmp	r2, lr
 8013c92:	d93b      	bls.n	8013d0c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013c94:	69aa      	ldr	r2, [r5, #24]
 8013c96:	682d      	ldr	r5, [r5, #0]
 8013c98:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8013c9c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8013ca0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8013ca4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8013ca8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8013cac:	f103 0c0c 	add.w	ip, r3, #12
 8013cb0:	eba5 050c 	sub.w	r5, r5, ip
 8013cb4:	fab5 f585 	clz	r5, r5
 8013cb8:	096d      	lsrs	r5, r5, #5
 8013cba:	7035      	strb	r5, [r6, #0]
 8013cbc:	f103 0510 	add.w	r5, r3, #16
 8013cc0:	1b64      	subs	r4, r4, r5
 8013cc2:	fab4 f484 	clz	r4, r4
 8013cc6:	0964      	lsrs	r4, r4, #5
 8013cc8:	703c      	strb	r4, [r7, #0]
 8013cca:	eba3 0008 	sub.w	r0, r3, r8
 8013cce:	1d1c      	adds	r4, r3, #4
 8013cd0:	3308      	adds	r3, #8
 8013cd2:	1ad3      	subs	r3, r2, r3
 8013cd4:	fab0 f080 	clz	r0, r0
 8013cd8:	9a06      	ldr	r2, [sp, #24]
 8013cda:	0940      	lsrs	r0, r0, #5
 8013cdc:	1b09      	subs	r1, r1, r4
 8013cde:	7010      	strb	r0, [r2, #0]
 8013ce0:	fab1 f181 	clz	r1, r1
 8013ce4:	9a07      	ldr	r2, [sp, #28]
 8013ce6:	0949      	lsrs	r1, r1, #5
 8013ce8:	7011      	strb	r1, [r2, #0]
 8013cea:	fab3 f383 	clz	r3, r3
 8013cee:	9a08      	ldr	r2, [sp, #32]
 8013cf0:	095b      	lsrs	r3, r3, #5
 8013cf2:	2000      	movs	r0, #0
 8013cf4:	7013      	strb	r3, [r2, #0]
 8013cf6:	e001      	b.n	8013cfc <rcl_action_client_wait_set_get_entities_ready+0x104>
 8013cf8:	f640 0036 	movw	r0, #2102	@ 0x836
 8013cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d00:	f7f9 f822 	bl	800cd48 <rcutils_reset_error>
 8013d04:	f640 0036 	movw	r0, #2102	@ 0x836
 8013d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d0c:	2001      	movs	r0, #1
 8013d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d12:	200b      	movs	r0, #11
 8013d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d18:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013d1c:	4770      	bx	lr
 8013d1e:	bf00      	nop

08013d20 <rcl_action_take_goal_request>:
 8013d20:	2800      	cmp	r0, #0
 8013d22:	d039      	beq.n	8013d98 <rcl_action_take_goal_request+0x78>
 8013d24:	b570      	push	{r4, r5, r6, lr}
 8013d26:	4604      	mov	r4, r0
 8013d28:	6800      	ldr	r0, [r0, #0]
 8013d2a:	b380      	cbz	r0, 8013d8e <rcl_action_take_goal_request+0x6e>
 8013d2c:	460d      	mov	r5, r1
 8013d2e:	4616      	mov	r6, r2
 8013d30:	f7fe fb68 	bl	8012404 <rcl_service_is_valid>
 8013d34:	b330      	cbz	r0, 8013d84 <rcl_action_take_goal_request+0x64>
 8013d36:	6820      	ldr	r0, [r4, #0]
 8013d38:	3004      	adds	r0, #4
 8013d3a:	f7fe fb63 	bl	8012404 <rcl_service_is_valid>
 8013d3e:	b308      	cbz	r0, 8013d84 <rcl_action_take_goal_request+0x64>
 8013d40:	6820      	ldr	r0, [r4, #0]
 8013d42:	3008      	adds	r0, #8
 8013d44:	f7fe fb5e 	bl	8012404 <rcl_service_is_valid>
 8013d48:	b1e0      	cbz	r0, 8013d84 <rcl_action_take_goal_request+0x64>
 8013d4a:	6820      	ldr	r0, [r4, #0]
 8013d4c:	300c      	adds	r0, #12
 8013d4e:	f7f8 f883 	bl	800be58 <rcl_publisher_is_valid>
 8013d52:	b1b8      	cbz	r0, 8013d84 <rcl_action_take_goal_request+0x64>
 8013d54:	6820      	ldr	r0, [r4, #0]
 8013d56:	3010      	adds	r0, #16
 8013d58:	f7f8 f87e 	bl	800be58 <rcl_publisher_is_valid>
 8013d5c:	b190      	cbz	r0, 8013d84 <rcl_action_take_goal_request+0x64>
 8013d5e:	b1cd      	cbz	r5, 8013d94 <rcl_action_take_goal_request+0x74>
 8013d60:	b1c6      	cbz	r6, 8013d94 <rcl_action_take_goal_request+0x74>
 8013d62:	6820      	ldr	r0, [r4, #0]
 8013d64:	4632      	mov	r2, r6
 8013d66:	4629      	mov	r1, r5
 8013d68:	f7fe faf4 	bl	8012354 <rcl_take_request>
 8013d6c:	b148      	cbz	r0, 8013d82 <rcl_action_take_goal_request+0x62>
 8013d6e:	280a      	cmp	r0, #10
 8013d70:	d007      	beq.n	8013d82 <rcl_action_take_goal_request+0x62>
 8013d72:	f240 2259 	movw	r2, #601	@ 0x259
 8013d76:	f640 0399 	movw	r3, #2201	@ 0x899
 8013d7a:	4290      	cmp	r0, r2
 8013d7c:	bf0c      	ite	eq
 8013d7e:	4618      	moveq	r0, r3
 8013d80:	2001      	movne	r0, #1
 8013d82:	bd70      	pop	{r4, r5, r6, pc}
 8013d84:	f7f8 ffe0 	bl	800cd48 <rcutils_reset_error>
 8013d88:	f640 0098 	movw	r0, #2200	@ 0x898
 8013d8c:	bd70      	pop	{r4, r5, r6, pc}
 8013d8e:	f640 0098 	movw	r0, #2200	@ 0x898
 8013d92:	bd70      	pop	{r4, r5, r6, pc}
 8013d94:	200b      	movs	r0, #11
 8013d96:	bd70      	pop	{r4, r5, r6, pc}
 8013d98:	f640 0098 	movw	r0, #2200	@ 0x898
 8013d9c:	4770      	bx	lr
 8013d9e:	bf00      	nop

08013da0 <rcl_action_send_goal_response>:
 8013da0:	b390      	cbz	r0, 8013e08 <rcl_action_send_goal_response+0x68>
 8013da2:	b570      	push	{r4, r5, r6, lr}
 8013da4:	4604      	mov	r4, r0
 8013da6:	6800      	ldr	r0, [r0, #0]
 8013da8:	b348      	cbz	r0, 8013dfe <rcl_action_send_goal_response+0x5e>
 8013daa:	460d      	mov	r5, r1
 8013dac:	4616      	mov	r6, r2
 8013dae:	f7fe fb29 	bl	8012404 <rcl_service_is_valid>
 8013db2:	b1f8      	cbz	r0, 8013df4 <rcl_action_send_goal_response+0x54>
 8013db4:	6820      	ldr	r0, [r4, #0]
 8013db6:	3004      	adds	r0, #4
 8013db8:	f7fe fb24 	bl	8012404 <rcl_service_is_valid>
 8013dbc:	b1d0      	cbz	r0, 8013df4 <rcl_action_send_goal_response+0x54>
 8013dbe:	6820      	ldr	r0, [r4, #0]
 8013dc0:	3008      	adds	r0, #8
 8013dc2:	f7fe fb1f 	bl	8012404 <rcl_service_is_valid>
 8013dc6:	b1a8      	cbz	r0, 8013df4 <rcl_action_send_goal_response+0x54>
 8013dc8:	6820      	ldr	r0, [r4, #0]
 8013dca:	300c      	adds	r0, #12
 8013dcc:	f7f8 f844 	bl	800be58 <rcl_publisher_is_valid>
 8013dd0:	b180      	cbz	r0, 8013df4 <rcl_action_send_goal_response+0x54>
 8013dd2:	6820      	ldr	r0, [r4, #0]
 8013dd4:	3010      	adds	r0, #16
 8013dd6:	f7f8 f83f 	bl	800be58 <rcl_publisher_is_valid>
 8013dda:	b158      	cbz	r0, 8013df4 <rcl_action_send_goal_response+0x54>
 8013ddc:	b195      	cbz	r5, 8013e04 <rcl_action_send_goal_response+0x64>
 8013dde:	b18e      	cbz	r6, 8013e04 <rcl_action_send_goal_response+0x64>
 8013de0:	6820      	ldr	r0, [r4, #0]
 8013de2:	4632      	mov	r2, r6
 8013de4:	4629      	mov	r1, r5
 8013de6:	f7fe faf5 	bl	80123d4 <rcl_send_response>
 8013dea:	b110      	cbz	r0, 8013df2 <rcl_action_send_goal_response+0x52>
 8013dec:	2802      	cmp	r0, #2
 8013dee:	bf18      	it	ne
 8013df0:	2001      	movne	r0, #1
 8013df2:	bd70      	pop	{r4, r5, r6, pc}
 8013df4:	f7f8 ffa8 	bl	800cd48 <rcutils_reset_error>
 8013df8:	f640 0098 	movw	r0, #2200	@ 0x898
 8013dfc:	bd70      	pop	{r4, r5, r6, pc}
 8013dfe:	f640 0098 	movw	r0, #2200	@ 0x898
 8013e02:	bd70      	pop	{r4, r5, r6, pc}
 8013e04:	200b      	movs	r0, #11
 8013e06:	bd70      	pop	{r4, r5, r6, pc}
 8013e08:	f640 0098 	movw	r0, #2200	@ 0x898
 8013e0c:	4770      	bx	lr
 8013e0e:	bf00      	nop

08013e10 <rcl_action_take_result_request>:
 8013e10:	2800      	cmp	r0, #0
 8013e12:	d03a      	beq.n	8013e8a <rcl_action_take_result_request+0x7a>
 8013e14:	b570      	push	{r4, r5, r6, lr}
 8013e16:	4604      	mov	r4, r0
 8013e18:	6800      	ldr	r0, [r0, #0]
 8013e1a:	b388      	cbz	r0, 8013e80 <rcl_action_take_result_request+0x70>
 8013e1c:	460d      	mov	r5, r1
 8013e1e:	4616      	mov	r6, r2
 8013e20:	f7fe faf0 	bl	8012404 <rcl_service_is_valid>
 8013e24:	b338      	cbz	r0, 8013e76 <rcl_action_take_result_request+0x66>
 8013e26:	6820      	ldr	r0, [r4, #0]
 8013e28:	3004      	adds	r0, #4
 8013e2a:	f7fe faeb 	bl	8012404 <rcl_service_is_valid>
 8013e2e:	b310      	cbz	r0, 8013e76 <rcl_action_take_result_request+0x66>
 8013e30:	6820      	ldr	r0, [r4, #0]
 8013e32:	3008      	adds	r0, #8
 8013e34:	f7fe fae6 	bl	8012404 <rcl_service_is_valid>
 8013e38:	b1e8      	cbz	r0, 8013e76 <rcl_action_take_result_request+0x66>
 8013e3a:	6820      	ldr	r0, [r4, #0]
 8013e3c:	300c      	adds	r0, #12
 8013e3e:	f7f8 f80b 	bl	800be58 <rcl_publisher_is_valid>
 8013e42:	b1c0      	cbz	r0, 8013e76 <rcl_action_take_result_request+0x66>
 8013e44:	6820      	ldr	r0, [r4, #0]
 8013e46:	3010      	adds	r0, #16
 8013e48:	f7f8 f806 	bl	800be58 <rcl_publisher_is_valid>
 8013e4c:	b198      	cbz	r0, 8013e76 <rcl_action_take_result_request+0x66>
 8013e4e:	b1d5      	cbz	r5, 8013e86 <rcl_action_take_result_request+0x76>
 8013e50:	b1ce      	cbz	r6, 8013e86 <rcl_action_take_result_request+0x76>
 8013e52:	6820      	ldr	r0, [r4, #0]
 8013e54:	4632      	mov	r2, r6
 8013e56:	4629      	mov	r1, r5
 8013e58:	3008      	adds	r0, #8
 8013e5a:	f7fe fa7b 	bl	8012354 <rcl_take_request>
 8013e5e:	b148      	cbz	r0, 8013e74 <rcl_action_take_result_request+0x64>
 8013e60:	280a      	cmp	r0, #10
 8013e62:	d007      	beq.n	8013e74 <rcl_action_take_result_request+0x64>
 8013e64:	f240 2259 	movw	r2, #601	@ 0x259
 8013e68:	f640 0399 	movw	r3, #2201	@ 0x899
 8013e6c:	4290      	cmp	r0, r2
 8013e6e:	bf0c      	ite	eq
 8013e70:	4618      	moveq	r0, r3
 8013e72:	2001      	movne	r0, #1
 8013e74:	bd70      	pop	{r4, r5, r6, pc}
 8013e76:	f7f8 ff67 	bl	800cd48 <rcutils_reset_error>
 8013e7a:	f640 0098 	movw	r0, #2200	@ 0x898
 8013e7e:	bd70      	pop	{r4, r5, r6, pc}
 8013e80:	f640 0098 	movw	r0, #2200	@ 0x898
 8013e84:	bd70      	pop	{r4, r5, r6, pc}
 8013e86:	200b      	movs	r0, #11
 8013e88:	bd70      	pop	{r4, r5, r6, pc}
 8013e8a:	f640 0098 	movw	r0, #2200	@ 0x898
 8013e8e:	4770      	bx	lr

08013e90 <rcl_action_take_cancel_request>:
 8013e90:	2800      	cmp	r0, #0
 8013e92:	d03a      	beq.n	8013f0a <rcl_action_take_cancel_request+0x7a>
 8013e94:	b570      	push	{r4, r5, r6, lr}
 8013e96:	4604      	mov	r4, r0
 8013e98:	6800      	ldr	r0, [r0, #0]
 8013e9a:	b388      	cbz	r0, 8013f00 <rcl_action_take_cancel_request+0x70>
 8013e9c:	460d      	mov	r5, r1
 8013e9e:	4616      	mov	r6, r2
 8013ea0:	f7fe fab0 	bl	8012404 <rcl_service_is_valid>
 8013ea4:	b338      	cbz	r0, 8013ef6 <rcl_action_take_cancel_request+0x66>
 8013ea6:	6820      	ldr	r0, [r4, #0]
 8013ea8:	3004      	adds	r0, #4
 8013eaa:	f7fe faab 	bl	8012404 <rcl_service_is_valid>
 8013eae:	b310      	cbz	r0, 8013ef6 <rcl_action_take_cancel_request+0x66>
 8013eb0:	6820      	ldr	r0, [r4, #0]
 8013eb2:	3008      	adds	r0, #8
 8013eb4:	f7fe faa6 	bl	8012404 <rcl_service_is_valid>
 8013eb8:	b1e8      	cbz	r0, 8013ef6 <rcl_action_take_cancel_request+0x66>
 8013eba:	6820      	ldr	r0, [r4, #0]
 8013ebc:	300c      	adds	r0, #12
 8013ebe:	f7f7 ffcb 	bl	800be58 <rcl_publisher_is_valid>
 8013ec2:	b1c0      	cbz	r0, 8013ef6 <rcl_action_take_cancel_request+0x66>
 8013ec4:	6820      	ldr	r0, [r4, #0]
 8013ec6:	3010      	adds	r0, #16
 8013ec8:	f7f7 ffc6 	bl	800be58 <rcl_publisher_is_valid>
 8013ecc:	b198      	cbz	r0, 8013ef6 <rcl_action_take_cancel_request+0x66>
 8013ece:	b1d5      	cbz	r5, 8013f06 <rcl_action_take_cancel_request+0x76>
 8013ed0:	b1ce      	cbz	r6, 8013f06 <rcl_action_take_cancel_request+0x76>
 8013ed2:	6820      	ldr	r0, [r4, #0]
 8013ed4:	4632      	mov	r2, r6
 8013ed6:	4629      	mov	r1, r5
 8013ed8:	3004      	adds	r0, #4
 8013eda:	f7fe fa3b 	bl	8012354 <rcl_take_request>
 8013ede:	b148      	cbz	r0, 8013ef4 <rcl_action_take_cancel_request+0x64>
 8013ee0:	280a      	cmp	r0, #10
 8013ee2:	d007      	beq.n	8013ef4 <rcl_action_take_cancel_request+0x64>
 8013ee4:	f240 2259 	movw	r2, #601	@ 0x259
 8013ee8:	f640 0399 	movw	r3, #2201	@ 0x899
 8013eec:	4290      	cmp	r0, r2
 8013eee:	bf0c      	ite	eq
 8013ef0:	4618      	moveq	r0, r3
 8013ef2:	2001      	movne	r0, #1
 8013ef4:	bd70      	pop	{r4, r5, r6, pc}
 8013ef6:	f7f8 ff27 	bl	800cd48 <rcutils_reset_error>
 8013efa:	f640 0098 	movw	r0, #2200	@ 0x898
 8013efe:	bd70      	pop	{r4, r5, r6, pc}
 8013f00:	f640 0098 	movw	r0, #2200	@ 0x898
 8013f04:	bd70      	pop	{r4, r5, r6, pc}
 8013f06:	200b      	movs	r0, #11
 8013f08:	bd70      	pop	{r4, r5, r6, pc}
 8013f0a:	f640 0098 	movw	r0, #2200	@ 0x898
 8013f0e:	4770      	bx	lr

08013f10 <rcl_action_send_cancel_response>:
 8013f10:	b398      	cbz	r0, 8013f7a <rcl_action_send_cancel_response+0x6a>
 8013f12:	b570      	push	{r4, r5, r6, lr}
 8013f14:	4604      	mov	r4, r0
 8013f16:	6800      	ldr	r0, [r0, #0]
 8013f18:	b350      	cbz	r0, 8013f70 <rcl_action_send_cancel_response+0x60>
 8013f1a:	460d      	mov	r5, r1
 8013f1c:	4616      	mov	r6, r2
 8013f1e:	f7fe fa71 	bl	8012404 <rcl_service_is_valid>
 8013f22:	b300      	cbz	r0, 8013f66 <rcl_action_send_cancel_response+0x56>
 8013f24:	6820      	ldr	r0, [r4, #0]
 8013f26:	3004      	adds	r0, #4
 8013f28:	f7fe fa6c 	bl	8012404 <rcl_service_is_valid>
 8013f2c:	b1d8      	cbz	r0, 8013f66 <rcl_action_send_cancel_response+0x56>
 8013f2e:	6820      	ldr	r0, [r4, #0]
 8013f30:	3008      	adds	r0, #8
 8013f32:	f7fe fa67 	bl	8012404 <rcl_service_is_valid>
 8013f36:	b1b0      	cbz	r0, 8013f66 <rcl_action_send_cancel_response+0x56>
 8013f38:	6820      	ldr	r0, [r4, #0]
 8013f3a:	300c      	adds	r0, #12
 8013f3c:	f7f7 ff8c 	bl	800be58 <rcl_publisher_is_valid>
 8013f40:	b188      	cbz	r0, 8013f66 <rcl_action_send_cancel_response+0x56>
 8013f42:	6820      	ldr	r0, [r4, #0]
 8013f44:	3010      	adds	r0, #16
 8013f46:	f7f7 ff87 	bl	800be58 <rcl_publisher_is_valid>
 8013f4a:	b160      	cbz	r0, 8013f66 <rcl_action_send_cancel_response+0x56>
 8013f4c:	b19d      	cbz	r5, 8013f76 <rcl_action_send_cancel_response+0x66>
 8013f4e:	b196      	cbz	r6, 8013f76 <rcl_action_send_cancel_response+0x66>
 8013f50:	6820      	ldr	r0, [r4, #0]
 8013f52:	4632      	mov	r2, r6
 8013f54:	4629      	mov	r1, r5
 8013f56:	3004      	adds	r0, #4
 8013f58:	f7fe fa3c 	bl	80123d4 <rcl_send_response>
 8013f5c:	b110      	cbz	r0, 8013f64 <rcl_action_send_cancel_response+0x54>
 8013f5e:	2802      	cmp	r0, #2
 8013f60:	bf18      	it	ne
 8013f62:	2001      	movne	r0, #1
 8013f64:	bd70      	pop	{r4, r5, r6, pc}
 8013f66:	f7f8 feef 	bl	800cd48 <rcutils_reset_error>
 8013f6a:	f640 0098 	movw	r0, #2200	@ 0x898
 8013f6e:	bd70      	pop	{r4, r5, r6, pc}
 8013f70:	f640 0098 	movw	r0, #2200	@ 0x898
 8013f74:	bd70      	pop	{r4, r5, r6, pc}
 8013f76:	200b      	movs	r0, #11
 8013f78:	bd70      	pop	{r4, r5, r6, pc}
 8013f7a:	f640 0098 	movw	r0, #2200	@ 0x898
 8013f7e:	4770      	bx	lr

08013f80 <rcl_action_wait_set_add_action_server>:
 8013f80:	2800      	cmp	r0, #0
 8013f82:	d04d      	beq.n	8014020 <rcl_action_wait_set_add_action_server+0xa0>
 8013f84:	b570      	push	{r4, r5, r6, lr}
 8013f86:	460c      	mov	r4, r1
 8013f88:	b159      	cbz	r1, 8013fa2 <rcl_action_wait_set_add_action_server+0x22>
 8013f8a:	4605      	mov	r5, r0
 8013f8c:	6808      	ldr	r0, [r1, #0]
 8013f8e:	b140      	cbz	r0, 8013fa2 <rcl_action_wait_set_add_action_server+0x22>
 8013f90:	4616      	mov	r6, r2
 8013f92:	f7fe fa37 	bl	8012404 <rcl_service_is_valid>
 8013f96:	b120      	cbz	r0, 8013fa2 <rcl_action_wait_set_add_action_server+0x22>
 8013f98:	6820      	ldr	r0, [r4, #0]
 8013f9a:	3004      	adds	r0, #4
 8013f9c:	f7fe fa32 	bl	8012404 <rcl_service_is_valid>
 8013fa0:	b910      	cbnz	r0, 8013fa8 <rcl_action_wait_set_add_action_server+0x28>
 8013fa2:	f640 0098 	movw	r0, #2200	@ 0x898
 8013fa6:	bd70      	pop	{r4, r5, r6, pc}
 8013fa8:	6820      	ldr	r0, [r4, #0]
 8013faa:	3008      	adds	r0, #8
 8013fac:	f7fe fa2a 	bl	8012404 <rcl_service_is_valid>
 8013fb0:	2800      	cmp	r0, #0
 8013fb2:	d0f6      	beq.n	8013fa2 <rcl_action_wait_set_add_action_server+0x22>
 8013fb4:	6820      	ldr	r0, [r4, #0]
 8013fb6:	300c      	adds	r0, #12
 8013fb8:	f7f7 ff66 	bl	800be88 <rcl_publisher_is_valid_except_context>
 8013fbc:	2800      	cmp	r0, #0
 8013fbe:	d0f0      	beq.n	8013fa2 <rcl_action_wait_set_add_action_server+0x22>
 8013fc0:	6820      	ldr	r0, [r4, #0]
 8013fc2:	3010      	adds	r0, #16
 8013fc4:	f7f7 ff60 	bl	800be88 <rcl_publisher_is_valid_except_context>
 8013fc8:	2800      	cmp	r0, #0
 8013fca:	d0ea      	beq.n	8013fa2 <rcl_action_wait_set_add_action_server+0x22>
 8013fcc:	6821      	ldr	r1, [r4, #0]
 8013fce:	4628      	mov	r0, r5
 8013fd0:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8013fd4:	f7ff face 	bl	8013574 <rcl_wait_set_add_service>
 8013fd8:	2800      	cmp	r0, #0
 8013fda:	d1e4      	bne.n	8013fa6 <rcl_action_wait_set_add_action_server+0x26>
 8013fdc:	6821      	ldr	r1, [r4, #0]
 8013fde:	4628      	mov	r0, r5
 8013fe0:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8013fe4:	3104      	adds	r1, #4
 8013fe6:	f7ff fac5 	bl	8013574 <rcl_wait_set_add_service>
 8013fea:	2800      	cmp	r0, #0
 8013fec:	d1db      	bne.n	8013fa6 <rcl_action_wait_set_add_action_server+0x26>
 8013fee:	6821      	ldr	r1, [r4, #0]
 8013ff0:	4628      	mov	r0, r5
 8013ff2:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8013ff6:	3108      	adds	r1, #8
 8013ff8:	f7ff fabc 	bl	8013574 <rcl_wait_set_add_service>
 8013ffc:	2800      	cmp	r0, #0
 8013ffe:	d1d2      	bne.n	8013fa6 <rcl_action_wait_set_add_action_server+0x26>
 8014000:	6821      	ldr	r1, [r4, #0]
 8014002:	4628      	mov	r0, r5
 8014004:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8014008:	3114      	adds	r1, #20
 801400a:	f7ff fa57 	bl	80134bc <rcl_wait_set_add_timer>
 801400e:	2800      	cmp	r0, #0
 8014010:	d1c9      	bne.n	8013fa6 <rcl_action_wait_set_add_action_server+0x26>
 8014012:	2e00      	cmp	r6, #0
 8014014:	d0c7      	beq.n	8013fa6 <rcl_action_wait_set_add_action_server+0x26>
 8014016:	6823      	ldr	r3, [r4, #0]
 8014018:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801401c:	6033      	str	r3, [r6, #0]
 801401e:	bd70      	pop	{r4, r5, r6, pc}
 8014020:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014024:	4770      	bx	lr
 8014026:	bf00      	nop

08014028 <rcl_action_server_wait_set_get_entities_ready>:
 8014028:	2800      	cmp	r0, #0
 801402a:	d05a      	beq.n	80140e2 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801402c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801402e:	460c      	mov	r4, r1
 8014030:	b161      	cbz	r1, 801404c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014032:	4605      	mov	r5, r0
 8014034:	6808      	ldr	r0, [r1, #0]
 8014036:	b148      	cbz	r0, 801404c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014038:	4616      	mov	r6, r2
 801403a:	461f      	mov	r7, r3
 801403c:	f7fe f9e2 	bl	8012404 <rcl_service_is_valid>
 8014040:	b120      	cbz	r0, 801404c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014042:	6820      	ldr	r0, [r4, #0]
 8014044:	3004      	adds	r0, #4
 8014046:	f7fe f9dd 	bl	8012404 <rcl_service_is_valid>
 801404a:	b910      	cbnz	r0, 8014052 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801404c:	f640 0098 	movw	r0, #2200	@ 0x898
 8014050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014052:	6820      	ldr	r0, [r4, #0]
 8014054:	3008      	adds	r0, #8
 8014056:	f7fe f9d5 	bl	8012404 <rcl_service_is_valid>
 801405a:	2800      	cmp	r0, #0
 801405c:	d0f6      	beq.n	801404c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801405e:	6820      	ldr	r0, [r4, #0]
 8014060:	300c      	adds	r0, #12
 8014062:	f7f7 ff11 	bl	800be88 <rcl_publisher_is_valid_except_context>
 8014066:	2800      	cmp	r0, #0
 8014068:	d0f0      	beq.n	801404c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801406a:	6820      	ldr	r0, [r4, #0]
 801406c:	3010      	adds	r0, #16
 801406e:	f7f7 ff0b 	bl	800be88 <rcl_publisher_is_valid_except_context>
 8014072:	2800      	cmp	r0, #0
 8014074:	d0ea      	beq.n	801404c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014076:	b3be      	cbz	r6, 80140e8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014078:	b3b7      	cbz	r7, 80140e8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801407a:	9b06      	ldr	r3, [sp, #24]
 801407c:	b3a3      	cbz	r3, 80140e8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801407e:	9b07      	ldr	r3, [sp, #28]
 8014080:	b393      	cbz	r3, 80140e8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014082:	6821      	ldr	r1, [r4, #0]
 8014084:	692a      	ldr	r2, [r5, #16]
 8014086:	6a2c      	ldr	r4, [r5, #32]
 8014088:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 801408c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8014090:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8014094:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8014098:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 801409c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80140a0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80140a4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80140a8:	1a64      	subs	r4, r4, r1
 80140aa:	fab4 f484 	clz	r4, r4
 80140ae:	0964      	lsrs	r4, r4, #5
 80140b0:	7034      	strb	r4, [r6, #0]
 80140b2:	1d0c      	adds	r4, r1, #4
 80140b4:	1b1b      	subs	r3, r3, r4
 80140b6:	fab3 f383 	clz	r3, r3
 80140ba:	095b      	lsrs	r3, r3, #5
 80140bc:	f101 0408 	add.w	r4, r1, #8
 80140c0:	703b      	strb	r3, [r7, #0]
 80140c2:	f101 0314 	add.w	r3, r1, #20
 80140c6:	1b01      	subs	r1, r0, r4
 80140c8:	1ad3      	subs	r3, r2, r3
 80140ca:	fab1 f181 	clz	r1, r1
 80140ce:	9a06      	ldr	r2, [sp, #24]
 80140d0:	0949      	lsrs	r1, r1, #5
 80140d2:	7011      	strb	r1, [r2, #0]
 80140d4:	fab3 f383 	clz	r3, r3
 80140d8:	9a07      	ldr	r2, [sp, #28]
 80140da:	095b      	lsrs	r3, r3, #5
 80140dc:	2000      	movs	r0, #0
 80140de:	7013      	strb	r3, [r2, #0]
 80140e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140e2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80140e6:	4770      	bx	lr
 80140e8:	200b      	movs	r0, #11
 80140ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080140ec <_execute_event_handler>:
 80140ec:	2002      	movs	r0, #2
 80140ee:	4770      	bx	lr

080140f0 <_cancel_goal_event_handler>:
 80140f0:	2003      	movs	r0, #3
 80140f2:	4770      	bx	lr

080140f4 <_succeed_event_handler>:
 80140f4:	2004      	movs	r0, #4
 80140f6:	4770      	bx	lr

080140f8 <_abort_event_handler>:
 80140f8:	2006      	movs	r0, #6
 80140fa:	4770      	bx	lr

080140fc <_canceled_event_handler>:
 80140fc:	2005      	movs	r0, #5
 80140fe:	4770      	bx	lr

08014100 <rcl_action_transition_goal_state>:
 8014100:	b2c2      	uxtb	r2, r0
 8014102:	2a06      	cmp	r2, #6
 8014104:	d80c      	bhi.n	8014120 <rcl_action_transition_goal_state+0x20>
 8014106:	2904      	cmp	r1, #4
 8014108:	d80a      	bhi.n	8014120 <rcl_action_transition_goal_state+0x20>
 801410a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801410e:	b410      	push	{r4}
 8014110:	1853      	adds	r3, r2, r1
 8014112:	4c06      	ldr	r4, [pc, #24]	@ (801412c <rcl_action_transition_goal_state+0x2c>)
 8014114:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8014118:	b123      	cbz	r3, 8014124 <rcl_action_transition_goal_state+0x24>
 801411a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801411e:	4718      	bx	r3
 8014120:	2000      	movs	r0, #0
 8014122:	4770      	bx	lr
 8014124:	2000      	movs	r0, #0
 8014126:	f85d 4b04 	ldr.w	r4, [sp], #4
 801412a:	4770      	bx	lr
 801412c:	08018c50 	.word	0x08018c50

08014130 <rcl_action_get_zero_initialized_cancel_response>:
 8014130:	b510      	push	{r4, lr}
 8014132:	4c07      	ldr	r4, [pc, #28]	@ (8014150 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8014134:	4686      	mov	lr, r0
 8014136:	4684      	mov	ip, r0
 8014138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801413a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801413e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014140:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014144:	6823      	ldr	r3, [r4, #0]
 8014146:	f8cc 3000 	str.w	r3, [ip]
 801414a:	4670      	mov	r0, lr
 801414c:	bd10      	pop	{r4, pc}
 801414e:	bf00      	nop
 8014150:	08018cdc 	.word	0x08018cdc

08014154 <rclc_action_send_result_request>:
 8014154:	b1d0      	cbz	r0, 801418c <rclc_action_send_result_request+0x38>
 8014156:	b500      	push	{lr}
 8014158:	4684      	mov	ip, r0
 801415a:	b087      	sub	sp, #28
 801415c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8014160:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8014164:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8014168:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801416c:	f10d 0e08 	add.w	lr, sp, #8
 8014170:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014174:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8014178:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801417c:	a902      	add	r1, sp, #8
 801417e:	3010      	adds	r0, #16
 8014180:	f7ff fbda 	bl	8013938 <rcl_action_send_result_request>
 8014184:	b920      	cbnz	r0, 8014190 <rclc_action_send_result_request+0x3c>
 8014186:	b007      	add	sp, #28
 8014188:	f85d fb04 	ldr.w	pc, [sp], #4
 801418c:	200b      	movs	r0, #11
 801418e:	4770      	bx	lr
 8014190:	9001      	str	r0, [sp, #4]
 8014192:	f7f8 fdd9 	bl	800cd48 <rcutils_reset_error>
 8014196:	9801      	ldr	r0, [sp, #4]
 8014198:	b007      	add	sp, #28
 801419a:	f85d fb04 	ldr.w	pc, [sp], #4
 801419e:	bf00      	nop

080141a0 <rclc_action_take_goal_handle>:
 80141a0:	b160      	cbz	r0, 80141bc <rclc_action_take_goal_handle+0x1c>
 80141a2:	6883      	ldr	r3, [r0, #8]
 80141a4:	b143      	cbz	r3, 80141b8 <rclc_action_take_goal_handle+0x18>
 80141a6:	6819      	ldr	r1, [r3, #0]
 80141a8:	6081      	str	r1, [r0, #8]
 80141aa:	2200      	movs	r2, #0
 80141ac:	721a      	strb	r2, [r3, #8]
 80141ae:	68c1      	ldr	r1, [r0, #12]
 80141b0:	6019      	str	r1, [r3, #0]
 80141b2:	621a      	str	r2, [r3, #32]
 80141b4:	849a      	strh	r2, [r3, #36]	@ 0x24
 80141b6:	60c3      	str	r3, [r0, #12]
 80141b8:	4618      	mov	r0, r3
 80141ba:	4770      	bx	lr
 80141bc:	4603      	mov	r3, r0
 80141be:	e7fb      	b.n	80141b8 <rclc_action_take_goal_handle+0x18>

080141c0 <rclc_action_remove_used_goal_handle>:
 80141c0:	b180      	cbz	r0, 80141e4 <rclc_action_remove_used_goal_handle+0x24>
 80141c2:	b179      	cbz	r1, 80141e4 <rclc_action_remove_used_goal_handle+0x24>
 80141c4:	68c3      	ldr	r3, [r0, #12]
 80141c6:	4299      	cmp	r1, r3
 80141c8:	d00d      	beq.n	80141e6 <rclc_action_remove_used_goal_handle+0x26>
 80141ca:	b12b      	cbz	r3, 80141d8 <rclc_action_remove_used_goal_handle+0x18>
 80141cc:	681a      	ldr	r2, [r3, #0]
 80141ce:	4291      	cmp	r1, r2
 80141d0:	d003      	beq.n	80141da <rclc_action_remove_used_goal_handle+0x1a>
 80141d2:	4613      	mov	r3, r2
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d1f9      	bne.n	80141cc <rclc_action_remove_used_goal_handle+0xc>
 80141d8:	4770      	bx	lr
 80141da:	680a      	ldr	r2, [r1, #0]
 80141dc:	601a      	str	r2, [r3, #0]
 80141de:	6883      	ldr	r3, [r0, #8]
 80141e0:	600b      	str	r3, [r1, #0]
 80141e2:	6081      	str	r1, [r0, #8]
 80141e4:	4770      	bx	lr
 80141e6:	680b      	ldr	r3, [r1, #0]
 80141e8:	60c3      	str	r3, [r0, #12]
 80141ea:	e7f8      	b.n	80141de <rclc_action_remove_used_goal_handle+0x1e>

080141ec <rclc_action_find_goal_handle_by_uuid>:
 80141ec:	b538      	push	{r3, r4, r5, lr}
 80141ee:	b180      	cbz	r0, 8014212 <rclc_action_find_goal_handle_by_uuid+0x26>
 80141f0:	460d      	mov	r5, r1
 80141f2:	b181      	cbz	r1, 8014216 <rclc_action_find_goal_handle_by_uuid+0x2a>
 80141f4:	68c4      	ldr	r4, [r0, #12]
 80141f6:	b914      	cbnz	r4, 80141fe <rclc_action_find_goal_handle_by_uuid+0x12>
 80141f8:	e009      	b.n	801420e <rclc_action_find_goal_handle_by_uuid+0x22>
 80141fa:	6824      	ldr	r4, [r4, #0]
 80141fc:	b13c      	cbz	r4, 801420e <rclc_action_find_goal_handle_by_uuid+0x22>
 80141fe:	f104 0009 	add.w	r0, r4, #9
 8014202:	2210      	movs	r2, #16
 8014204:	4629      	mov	r1, r5
 8014206:	f003 f98d 	bl	8017524 <memcmp>
 801420a:	2800      	cmp	r0, #0
 801420c:	d1f5      	bne.n	80141fa <rclc_action_find_goal_handle_by_uuid+0xe>
 801420e:	4620      	mov	r0, r4
 8014210:	bd38      	pop	{r3, r4, r5, pc}
 8014212:	4604      	mov	r4, r0
 8014214:	e7fb      	b.n	801420e <rclc_action_find_goal_handle_by_uuid+0x22>
 8014216:	460c      	mov	r4, r1
 8014218:	e7f9      	b.n	801420e <rclc_action_find_goal_handle_by_uuid+0x22>
 801421a:	bf00      	nop

0801421c <rclc_action_find_first_handle_by_status>:
 801421c:	b140      	cbz	r0, 8014230 <rclc_action_find_first_handle_by_status+0x14>
 801421e:	68c0      	ldr	r0, [r0, #12]
 8014220:	b910      	cbnz	r0, 8014228 <rclc_action_find_first_handle_by_status+0xc>
 8014222:	e005      	b.n	8014230 <rclc_action_find_first_handle_by_status+0x14>
 8014224:	6800      	ldr	r0, [r0, #0]
 8014226:	b118      	cbz	r0, 8014230 <rclc_action_find_first_handle_by_status+0x14>
 8014228:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801422c:	428b      	cmp	r3, r1
 801422e:	d1f9      	bne.n	8014224 <rclc_action_find_first_handle_by_status+0x8>
 8014230:	4770      	bx	lr
 8014232:	bf00      	nop

08014234 <rclc_action_find_first_terminated_handle>:
 8014234:	b140      	cbz	r0, 8014248 <rclc_action_find_first_terminated_handle+0x14>
 8014236:	68c0      	ldr	r0, [r0, #12]
 8014238:	b910      	cbnz	r0, 8014240 <rclc_action_find_first_terminated_handle+0xc>
 801423a:	e005      	b.n	8014248 <rclc_action_find_first_terminated_handle+0x14>
 801423c:	6800      	ldr	r0, [r0, #0]
 801423e:	b118      	cbz	r0, 8014248 <rclc_action_find_first_terminated_handle+0x14>
 8014240:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8014244:	2b03      	cmp	r3, #3
 8014246:	ddf9      	ble.n	801423c <rclc_action_find_first_terminated_handle+0x8>
 8014248:	4770      	bx	lr
 801424a:	bf00      	nop

0801424c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801424c:	b170      	cbz	r0, 801426c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801424e:	68c0      	ldr	r0, [r0, #12]
 8014250:	b160      	cbz	r0, 801426c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8014252:	b410      	push	{r4}
 8014254:	e001      	b.n	801425a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8014256:	6800      	ldr	r0, [r0, #0]
 8014258:	b128      	cbz	r0, 8014266 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801425a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801425e:	4299      	cmp	r1, r3
 8014260:	bf08      	it	eq
 8014262:	4294      	cmpeq	r4, r2
 8014264:	d1f7      	bne.n	8014256 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8014266:	f85d 4b04 	ldr.w	r4, [sp], #4
 801426a:	4770      	bx	lr
 801426c:	4770      	bx	lr
 801426e:	bf00      	nop

08014270 <rclc_action_find_handle_by_result_request_sequence_number>:
 8014270:	b170      	cbz	r0, 8014290 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8014272:	68c0      	ldr	r0, [r0, #12]
 8014274:	b160      	cbz	r0, 8014290 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8014276:	b410      	push	{r4}
 8014278:	e001      	b.n	801427e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801427a:	6800      	ldr	r0, [r0, #0]
 801427c:	b128      	cbz	r0, 801428a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801427e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8014282:	4299      	cmp	r1, r3
 8014284:	bf08      	it	eq
 8014286:	4294      	cmpeq	r4, r2
 8014288:	d1f7      	bne.n	801427a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801428a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801428e:	4770      	bx	lr
 8014290:	4770      	bx	lr
 8014292:	bf00      	nop

08014294 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8014294:	b170      	cbz	r0, 80142b4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8014296:	68c0      	ldr	r0, [r0, #12]
 8014298:	b160      	cbz	r0, 80142b4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801429a:	b410      	push	{r4}
 801429c:	e001      	b.n	80142a2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801429e:	6800      	ldr	r0, [r0, #0]
 80142a0:	b128      	cbz	r0, 80142ae <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80142a2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80142a6:	4299      	cmp	r1, r3
 80142a8:	bf08      	it	eq
 80142aa:	4294      	cmpeq	r4, r2
 80142ac:	d1f7      	bne.n	801429e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80142ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142b2:	4770      	bx	lr
 80142b4:	4770      	bx	lr
 80142b6:	bf00      	nop

080142b8 <rclc_action_find_first_handle_with_goal_response>:
 80142b8:	b140      	cbz	r0, 80142cc <rclc_action_find_first_handle_with_goal_response+0x14>
 80142ba:	68c0      	ldr	r0, [r0, #12]
 80142bc:	b910      	cbnz	r0, 80142c4 <rclc_action_find_first_handle_with_goal_response+0xc>
 80142be:	e005      	b.n	80142cc <rclc_action_find_first_handle_with_goal_response+0x14>
 80142c0:	6800      	ldr	r0, [r0, #0]
 80142c2:	b118      	cbz	r0, 80142cc <rclc_action_find_first_handle_with_goal_response+0x14>
 80142c4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d0f9      	beq.n	80142c0 <rclc_action_find_first_handle_with_goal_response+0x8>
 80142cc:	4770      	bx	lr
 80142ce:	bf00      	nop

080142d0 <rclc_action_find_first_handle_with_result_response>:
 80142d0:	b140      	cbz	r0, 80142e4 <rclc_action_find_first_handle_with_result_response+0x14>
 80142d2:	68c0      	ldr	r0, [r0, #12]
 80142d4:	b910      	cbnz	r0, 80142dc <rclc_action_find_first_handle_with_result_response+0xc>
 80142d6:	e005      	b.n	80142e4 <rclc_action_find_first_handle_with_result_response+0x14>
 80142d8:	6800      	ldr	r0, [r0, #0]
 80142da:	b118      	cbz	r0, 80142e4 <rclc_action_find_first_handle_with_result_response+0x14>
 80142dc:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d0f9      	beq.n	80142d8 <rclc_action_find_first_handle_with_result_response+0x8>
 80142e4:	4770      	bx	lr
 80142e6:	bf00      	nop

080142e8 <rclc_action_server_response_goal_request>:
 80142e8:	b198      	cbz	r0, 8014312 <rclc_action_server_response_goal_request+0x2a>
 80142ea:	b510      	push	{r4, lr}
 80142ec:	6844      	ldr	r4, [r0, #4]
 80142ee:	b086      	sub	sp, #24
 80142f0:	2200      	movs	r2, #0
 80142f2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80142f6:	460b      	mov	r3, r1
 80142f8:	9205      	str	r2, [sp, #20]
 80142fa:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80142fe:	aa03      	add	r2, sp, #12
 8014300:	f104 0010 	add.w	r0, r4, #16
 8014304:	f88d 300c 	strb.w	r3, [sp, #12]
 8014308:	f7ff fd4a 	bl	8013da0 <rcl_action_send_goal_response>
 801430c:	b918      	cbnz	r0, 8014316 <rclc_action_server_response_goal_request+0x2e>
 801430e:	b006      	add	sp, #24
 8014310:	bd10      	pop	{r4, pc}
 8014312:	200b      	movs	r0, #11
 8014314:	4770      	bx	lr
 8014316:	9001      	str	r0, [sp, #4]
 8014318:	f7f8 fd16 	bl	800cd48 <rcutils_reset_error>
 801431c:	9801      	ldr	r0, [sp, #4]
 801431e:	b006      	add	sp, #24
 8014320:	bd10      	pop	{r4, pc}
 8014322:	bf00      	nop
 8014324:	0000      	movs	r0, r0
	...

08014328 <rclc_action_server_goal_cancel_accept>:
 8014328:	b310      	cbz	r0, 8014370 <rclc_action_server_goal_cancel_accept+0x48>
 801432a:	b510      	push	{r4, lr}
 801432c:	b090      	sub	sp, #64	@ 0x40
 801432e:	4604      	mov	r4, r0
 8014330:	a806      	add	r0, sp, #24
 8014332:	f7ff fefd 	bl	8014130 <rcl_action_get_zero_initialized_cancel_response>
 8014336:	2300      	movs	r3, #0
 8014338:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801433c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8014340:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8014344:	f88d 3018 	strb.w	r3, [sp, #24]
 8014348:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801434c:	f8cd d01c 	str.w	sp, [sp, #28]
 8014350:	46ec      	mov	ip, sp
 8014352:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014356:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8014378 <rclc_action_server_goal_cancel_accept+0x50>
 801435a:	6860      	ldr	r0, [r4, #4]
 801435c:	aa06      	add	r2, sp, #24
 801435e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8014362:	3010      	adds	r0, #16
 8014364:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014368:	f7ff fdd2 	bl	8013f10 <rcl_action_send_cancel_response>
 801436c:	b010      	add	sp, #64	@ 0x40
 801436e:	bd10      	pop	{r4, pc}
 8014370:	200b      	movs	r0, #11
 8014372:	4770      	bx	lr
 8014374:	f3af 8000 	nop.w
 8014378:	00000001 	.word	0x00000001
 801437c:	00000001 	.word	0x00000001

08014380 <rclc_action_server_goal_cancel_reject>:
 8014380:	b082      	sub	sp, #8
 8014382:	b530      	push	{r4, r5, lr}
 8014384:	b08b      	sub	sp, #44	@ 0x2c
 8014386:	ac0e      	add	r4, sp, #56	@ 0x38
 8014388:	e884 000c 	stmia.w	r4, {r2, r3}
 801438c:	b188      	cbz	r0, 80143b2 <rclc_action_server_goal_cancel_reject+0x32>
 801438e:	4604      	mov	r4, r0
 8014390:	a801      	add	r0, sp, #4
 8014392:	460d      	mov	r5, r1
 8014394:	f7ff fecc 	bl	8014130 <rcl_action_get_zero_initialized_cancel_response>
 8014398:	aa01      	add	r2, sp, #4
 801439a:	a90e      	add	r1, sp, #56	@ 0x38
 801439c:	f104 0010 	add.w	r0, r4, #16
 80143a0:	f88d 5004 	strb.w	r5, [sp, #4]
 80143a4:	f7ff fdb4 	bl	8013f10 <rcl_action_send_cancel_response>
 80143a8:	b00b      	add	sp, #44	@ 0x2c
 80143aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80143ae:	b002      	add	sp, #8
 80143b0:	4770      	bx	lr
 80143b2:	200b      	movs	r0, #11
 80143b4:	b00b      	add	sp, #44	@ 0x2c
 80143b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80143ba:	b002      	add	sp, #8
 80143bc:	4770      	bx	lr
 80143be:	bf00      	nop

080143c0 <__atomic_load_8>:
 80143c0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80143c4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80143c8:	4a15      	ldr	r2, [pc, #84]	@ (8014420 <__atomic_load_8+0x60>)
 80143ca:	4b16      	ldr	r3, [pc, #88]	@ (8014424 <__atomic_load_8+0x64>)
 80143cc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80143d0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80143d4:	fb02 f101 	mul.w	r1, r2, r1
 80143d8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80143dc:	fba3 2301 	umull	r2, r3, r3, r1
 80143e0:	091b      	lsrs	r3, r3, #4
 80143e2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80143e6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80143ea:	b4d0      	push	{r4, r6, r7}
 80143ec:	4c0e      	ldr	r4, [pc, #56]	@ (8014428 <__atomic_load_8+0x68>)
 80143ee:	1ac9      	subs	r1, r1, r3
 80143f0:	1862      	adds	r2, r4, r1
 80143f2:	f04f 0c01 	mov.w	ip, #1
 80143f6:	e8d2 3f4f 	ldrexb	r3, [r2]
 80143fa:	e8c2 cf46 	strexb	r6, ip, [r2]
 80143fe:	2e00      	cmp	r6, #0
 8014400:	d1f9      	bne.n	80143f6 <__atomic_load_8+0x36>
 8014402:	f3bf 8f5b 	dmb	ish
 8014406:	b2db      	uxtb	r3, r3
 8014408:	2b00      	cmp	r3, #0
 801440a:	d1f4      	bne.n	80143f6 <__atomic_load_8+0x36>
 801440c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8014410:	f3bf 8f5b 	dmb	ish
 8014414:	5463      	strb	r3, [r4, r1]
 8014416:	4630      	mov	r0, r6
 8014418:	4639      	mov	r1, r7
 801441a:	bcd0      	pop	{r4, r6, r7}
 801441c:	4770      	bx	lr
 801441e:	bf00      	nop
 8014420:	27d4eb2d 	.word	0x27d4eb2d
 8014424:	b21642c9 	.word	0xb21642c9
 8014428:	2000ae74 	.word	0x2000ae74

0801442c <__atomic_store_8>:
 801442c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014430:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8014434:	b570      	push	{r4, r5, r6, lr}
 8014436:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801443a:	4c14      	ldr	r4, [pc, #80]	@ (801448c <__atomic_store_8+0x60>)
 801443c:	4d14      	ldr	r5, [pc, #80]	@ (8014490 <__atomic_store_8+0x64>)
 801443e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014442:	fb04 f101 	mul.w	r1, r4, r1
 8014446:	4c13      	ldr	r4, [pc, #76]	@ (8014494 <__atomic_store_8+0x68>)
 8014448:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801444c:	fba4 4e01 	umull	r4, lr, r4, r1
 8014450:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8014454:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8014458:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 801445c:	eba1 0e0e 	sub.w	lr, r1, lr
 8014460:	eb05 0c0e 	add.w	ip, r5, lr
 8014464:	f04f 0401 	mov.w	r4, #1
 8014468:	e8dc 1f4f 	ldrexb	r1, [ip]
 801446c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8014470:	2e00      	cmp	r6, #0
 8014472:	d1f9      	bne.n	8014468 <__atomic_store_8+0x3c>
 8014474:	f3bf 8f5b 	dmb	ish
 8014478:	b2c9      	uxtb	r1, r1
 801447a:	2900      	cmp	r1, #0
 801447c:	d1f4      	bne.n	8014468 <__atomic_store_8+0x3c>
 801447e:	e9c0 2300 	strd	r2, r3, [r0]
 8014482:	f3bf 8f5b 	dmb	ish
 8014486:	f805 100e 	strb.w	r1, [r5, lr]
 801448a:	bd70      	pop	{r4, r5, r6, pc}
 801448c:	27d4eb2d 	.word	0x27d4eb2d
 8014490:	2000ae74 	.word	0x2000ae74
 8014494:	b21642c9 	.word	0xb21642c9

08014498 <__atomic_exchange_8>:
 8014498:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801449c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 80144a0:	4916      	ldr	r1, [pc, #88]	@ (80144fc <__atomic_exchange_8+0x64>)
 80144a2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 80144a6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 80144aa:	fb01 fc0c 	mul.w	ip, r1, ip
 80144ae:	4914      	ldr	r1, [pc, #80]	@ (8014500 <__atomic_exchange_8+0x68>)
 80144b0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 80144b4:	b570      	push	{r4, r5, r6, lr}
 80144b6:	4605      	mov	r5, r0
 80144b8:	fba1 010c 	umull	r0, r1, r1, ip
 80144bc:	0909      	lsrs	r1, r1, #4
 80144be:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80144c2:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 80144c6:	4e0f      	ldr	r6, [pc, #60]	@ (8014504 <__atomic_exchange_8+0x6c>)
 80144c8:	ebac 0c01 	sub.w	ip, ip, r1
 80144cc:	eb06 010c 	add.w	r1, r6, ip
 80144d0:	f04f 0e01 	mov.w	lr, #1
 80144d4:	e8d1 4f4f 	ldrexb	r4, [r1]
 80144d8:	e8c1 ef40 	strexb	r0, lr, [r1]
 80144dc:	2800      	cmp	r0, #0
 80144de:	d1f9      	bne.n	80144d4 <__atomic_exchange_8+0x3c>
 80144e0:	f3bf 8f5b 	dmb	ish
 80144e4:	b2e4      	uxtb	r4, r4
 80144e6:	2c00      	cmp	r4, #0
 80144e8:	d1f4      	bne.n	80144d4 <__atomic_exchange_8+0x3c>
 80144ea:	e9d5 0100 	ldrd	r0, r1, [r5]
 80144ee:	e9c5 2300 	strd	r2, r3, [r5]
 80144f2:	f3bf 8f5b 	dmb	ish
 80144f6:	f806 400c 	strb.w	r4, [r6, ip]
 80144fa:	bd70      	pop	{r4, r5, r6, pc}
 80144fc:	27d4eb2d 	.word	0x27d4eb2d
 8014500:	b21642c9 	.word	0xb21642c9
 8014504:	2000ae74 	.word	0x2000ae74

08014508 <rcutils_get_env>:
 8014508:	b168      	cbz	r0, 8014526 <rcutils_get_env+0x1e>
 801450a:	b510      	push	{r4, lr}
 801450c:	460c      	mov	r4, r1
 801450e:	b129      	cbz	r1, 801451c <rcutils_get_env+0x14>
 8014510:	f002 fc64 	bl	8016ddc <getenv>
 8014514:	b120      	cbz	r0, 8014520 <rcutils_get_env+0x18>
 8014516:	6020      	str	r0, [r4, #0]
 8014518:	2000      	movs	r0, #0
 801451a:	bd10      	pop	{r4, pc}
 801451c:	4803      	ldr	r0, [pc, #12]	@ (801452c <rcutils_get_env+0x24>)
 801451e:	bd10      	pop	{r4, pc}
 8014520:	4b03      	ldr	r3, [pc, #12]	@ (8014530 <rcutils_get_env+0x28>)
 8014522:	6023      	str	r3, [r4, #0]
 8014524:	bd10      	pop	{r4, pc}
 8014526:	4803      	ldr	r0, [pc, #12]	@ (8014534 <rcutils_get_env+0x2c>)
 8014528:	4770      	bx	lr
 801452a:	bf00      	nop
 801452c:	08018d1c 	.word	0x08018d1c
 8014530:	08018e40 	.word	0x08018e40
 8014534:	08018d00 	.word	0x08018d00

08014538 <rcutils_is_directory>:
 8014538:	2000      	movs	r0, #0
 801453a:	4770      	bx	lr

0801453c <rcutils_join_path>:
 801453c:	b082      	sub	sp, #8
 801453e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014542:	2000      	movs	r0, #0
 8014544:	b002      	add	sp, #8
 8014546:	4770      	bx	lr

08014548 <rcutils_to_native_path>:
 8014548:	b084      	sub	sp, #16
 801454a:	a801      	add	r0, sp, #4
 801454c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014550:	b004      	add	sp, #16
 8014552:	2000      	movs	r0, #0
 8014554:	4770      	bx	lr
 8014556:	bf00      	nop

08014558 <rcutils_format_string_limit>:
 8014558:	b40f      	push	{r0, r1, r2, r3}
 801455a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801455c:	b083      	sub	sp, #12
 801455e:	ac08      	add	r4, sp, #32
 8014560:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8014562:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014566:	b34e      	cbz	r6, 80145bc <rcutils_format_string_limit+0x64>
 8014568:	a808      	add	r0, sp, #32
 801456a:	f7f8 fbc7 	bl	800ccfc <rcutils_allocator_is_valid>
 801456e:	b328      	cbz	r0, 80145bc <rcutils_format_string_limit+0x64>
 8014570:	2100      	movs	r1, #0
 8014572:	ab0f      	add	r3, sp, #60	@ 0x3c
 8014574:	4632      	mov	r2, r6
 8014576:	4608      	mov	r0, r1
 8014578:	e9cd 3300 	strd	r3, r3, [sp]
 801457c:	f000 f8f4 	bl	8014768 <rcutils_vsnprintf>
 8014580:	1c43      	adds	r3, r0, #1
 8014582:	4605      	mov	r5, r0
 8014584:	d01a      	beq.n	80145bc <rcutils_format_string_limit+0x64>
 8014586:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014588:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801458a:	1c47      	adds	r7, r0, #1
 801458c:	429f      	cmp	r7, r3
 801458e:	bf84      	itt	hi
 8014590:	461f      	movhi	r7, r3
 8014592:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8014596:	4638      	mov	r0, r7
 8014598:	9b08      	ldr	r3, [sp, #32]
 801459a:	4798      	blx	r3
 801459c:	4604      	mov	r4, r0
 801459e:	b168      	cbz	r0, 80145bc <rcutils_format_string_limit+0x64>
 80145a0:	9b01      	ldr	r3, [sp, #4]
 80145a2:	4632      	mov	r2, r6
 80145a4:	4639      	mov	r1, r7
 80145a6:	f000 f8df 	bl	8014768 <rcutils_vsnprintf>
 80145aa:	2800      	cmp	r0, #0
 80145ac:	db02      	blt.n	80145b4 <rcutils_format_string_limit+0x5c>
 80145ae:	2300      	movs	r3, #0
 80145b0:	5563      	strb	r3, [r4, r5]
 80145b2:	e004      	b.n	80145be <rcutils_format_string_limit+0x66>
 80145b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145b6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80145b8:	4620      	mov	r0, r4
 80145ba:	4798      	blx	r3
 80145bc:	2400      	movs	r4, #0
 80145be:	4620      	mov	r0, r4
 80145c0:	b003      	add	sp, #12
 80145c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80145c6:	b004      	add	sp, #16
 80145c8:	4770      	bx	lr
 80145ca:	bf00      	nop

080145cc <rcutils_repl_str>:
 80145cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145d0:	ed2d 8b02 	vpush	{d8}
 80145d4:	b087      	sub	sp, #28
 80145d6:	4680      	mov	r8, r0
 80145d8:	4608      	mov	r0, r1
 80145da:	f8cd 8004 	str.w	r8, [sp, #4]
 80145de:	ee08 2a10 	vmov	s16, r2
 80145e2:	468a      	mov	sl, r1
 80145e4:	4699      	mov	r9, r3
 80145e6:	f7eb fe25 	bl	8000234 <strlen>
 80145ea:	2600      	movs	r6, #0
 80145ec:	4647      	mov	r7, r8
 80145ee:	9002      	str	r0, [sp, #8]
 80145f0:	46b3      	mov	fp, r6
 80145f2:	2510      	movs	r5, #16
 80145f4:	46b0      	mov	r8, r6
 80145f6:	e01d      	b.n	8014634 <rcutils_repl_str+0x68>
 80145f8:	f10b 0b01 	add.w	fp, fp, #1
 80145fc:	455e      	cmp	r6, fp
 80145fe:	d211      	bcs.n	8014624 <rcutils_repl_str+0x58>
 8014600:	442e      	add	r6, r5
 8014602:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014606:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801460a:	00b1      	lsls	r1, r6, #2
 801460c:	4798      	blx	r3
 801460e:	2800      	cmp	r0, #0
 8014610:	f000 8088 	beq.w	8014724 <rcutils_repl_str+0x158>
 8014614:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014618:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801461c:	4680      	mov	r8, r0
 801461e:	bf28      	it	cs
 8014620:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8014624:	9a01      	ldr	r2, [sp, #4]
 8014626:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 801462a:	1aa2      	subs	r2, r4, r2
 801462c:	f843 2c04 	str.w	r2, [r3, #-4]
 8014630:	9b02      	ldr	r3, [sp, #8]
 8014632:	18e7      	adds	r7, r4, r3
 8014634:	4651      	mov	r1, sl
 8014636:	4638      	mov	r0, r7
 8014638:	f002 ffc5 	bl	80175c6 <strstr>
 801463c:	4604      	mov	r4, r0
 801463e:	4640      	mov	r0, r8
 8014640:	2c00      	cmp	r4, #0
 8014642:	d1d9      	bne.n	80145f8 <rcutils_repl_str+0x2c>
 8014644:	46b8      	mov	r8, r7
 8014646:	4607      	mov	r7, r0
 8014648:	4640      	mov	r0, r8
 801464a:	f7eb fdf3 	bl	8000234 <strlen>
 801464e:	9b01      	ldr	r3, [sp, #4]
 8014650:	eba8 0303 	sub.w	r3, r8, r3
 8014654:	181c      	adds	r4, r3, r0
 8014656:	9404      	str	r4, [sp, #16]
 8014658:	f1bb 0f00 	cmp.w	fp, #0
 801465c:	d04a      	beq.n	80146f4 <rcutils_repl_str+0x128>
 801465e:	ee18 0a10 	vmov	r0, s16
 8014662:	f7eb fde7 	bl	8000234 <strlen>
 8014666:	9b02      	ldr	r3, [sp, #8]
 8014668:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801466c:	1ac3      	subs	r3, r0, r3
 801466e:	fb0b 4303 	mla	r3, fp, r3, r4
 8014672:	461a      	mov	r2, r3
 8014674:	9305      	str	r3, [sp, #20]
 8014676:	4606      	mov	r6, r0
 8014678:	f8d9 3000 	ldr.w	r3, [r9]
 801467c:	1c50      	adds	r0, r2, #1
 801467e:	4798      	blx	r3
 8014680:	9003      	str	r0, [sp, #12]
 8014682:	2800      	cmp	r0, #0
 8014684:	d04f      	beq.n	8014726 <rcutils_repl_str+0x15a>
 8014686:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801468a:	683a      	ldr	r2, [r7, #0]
 801468c:	4641      	mov	r1, r8
 801468e:	f003 f83c 	bl	801770a <memcpy>
 8014692:	683d      	ldr	r5, [r7, #0]
 8014694:	9b03      	ldr	r3, [sp, #12]
 8014696:	9701      	str	r7, [sp, #4]
 8014698:	46ba      	mov	sl, r7
 801469a:	441d      	add	r5, r3
 801469c:	9f02      	ldr	r7, [sp, #8]
 801469e:	f8cd 9008 	str.w	r9, [sp, #8]
 80146a2:	2401      	movs	r4, #1
 80146a4:	46d1      	mov	r9, sl
 80146a6:	ee18 aa10 	vmov	sl, s16
 80146aa:	e00a      	b.n	80146c2 <rcutils_repl_str+0xf6>
 80146ac:	f8d9 5000 	ldr.w	r5, [r9]
 80146b0:	1aaa      	subs	r2, r5, r2
 80146b2:	1885      	adds	r5, r0, r2
 80146b4:	f003 f829 	bl	801770a <memcpy>
 80146b8:	45a3      	cmp	fp, r4
 80146ba:	f104 0201 	add.w	r2, r4, #1
 80146be:	d935      	bls.n	801472c <rcutils_repl_str+0x160>
 80146c0:	4614      	mov	r4, r2
 80146c2:	4632      	mov	r2, r6
 80146c4:	4651      	mov	r1, sl
 80146c6:	4628      	mov	r0, r5
 80146c8:	f003 f81f 	bl	801770a <memcpy>
 80146cc:	f859 2b04 	ldr.w	r2, [r9], #4
 80146d0:	45a3      	cmp	fp, r4
 80146d2:	443a      	add	r2, r7
 80146d4:	eb05 0006 	add.w	r0, r5, r6
 80146d8:	eb08 0102 	add.w	r1, r8, r2
 80146dc:	d1e6      	bne.n	80146ac <rcutils_repl_str+0xe0>
 80146de:	9b04      	ldr	r3, [sp, #16]
 80146e0:	1a9a      	subs	r2, r3, r2
 80146e2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80146e6:	f003 f810 	bl	801770a <memcpy>
 80146ea:	9a03      	ldr	r2, [sp, #12]
 80146ec:	9905      	ldr	r1, [sp, #20]
 80146ee:	2300      	movs	r3, #0
 80146f0:	5453      	strb	r3, [r2, r1]
 80146f2:	e00b      	b.n	801470c <rcutils_repl_str+0x140>
 80146f4:	4620      	mov	r0, r4
 80146f6:	f8d9 3000 	ldr.w	r3, [r9]
 80146fa:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80146fe:	3001      	adds	r0, #1
 8014700:	4798      	blx	r3
 8014702:	9003      	str	r0, [sp, #12]
 8014704:	b110      	cbz	r0, 801470c <rcutils_repl_str+0x140>
 8014706:	9901      	ldr	r1, [sp, #4]
 8014708:	f002 fff7 	bl	80176fa <strcpy>
 801470c:	4638      	mov	r0, r7
 801470e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014712:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014716:	4798      	blx	r3
 8014718:	9803      	ldr	r0, [sp, #12]
 801471a:	b007      	add	sp, #28
 801471c:	ecbd 8b02 	vpop	{d8}
 8014720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014724:	4647      	mov	r7, r8
 8014726:	2300      	movs	r3, #0
 8014728:	9303      	str	r3, [sp, #12]
 801472a:	e7ef      	b.n	801470c <rcutils_repl_str+0x140>
 801472c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014730:	e7db      	b.n	80146ea <rcutils_repl_str+0x11e>
 8014732:	bf00      	nop

08014734 <rcutils_snprintf>:
 8014734:	b40c      	push	{r2, r3}
 8014736:	b530      	push	{r4, r5, lr}
 8014738:	b083      	sub	sp, #12
 801473a:	ab06      	add	r3, sp, #24
 801473c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014740:	9301      	str	r3, [sp, #4]
 8014742:	b152      	cbz	r2, 801475a <rcutils_snprintf+0x26>
 8014744:	b138      	cbz	r0, 8014756 <rcutils_snprintf+0x22>
 8014746:	b141      	cbz	r1, 801475a <rcutils_snprintf+0x26>
 8014748:	f002 fede 	bl	8017508 <vsniprintf>
 801474c:	b003      	add	sp, #12
 801474e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014752:	b002      	add	sp, #8
 8014754:	4770      	bx	lr
 8014756:	2900      	cmp	r1, #0
 8014758:	d0f6      	beq.n	8014748 <rcutils_snprintf+0x14>
 801475a:	f002 ffa1 	bl	80176a0 <__errno>
 801475e:	2316      	movs	r3, #22
 8014760:	6003      	str	r3, [r0, #0]
 8014762:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014766:	e7f1      	b.n	801474c <rcutils_snprintf+0x18>

08014768 <rcutils_vsnprintf>:
 8014768:	b570      	push	{r4, r5, r6, lr}
 801476a:	b13a      	cbz	r2, 801477c <rcutils_vsnprintf+0x14>
 801476c:	b120      	cbz	r0, 8014778 <rcutils_vsnprintf+0x10>
 801476e:	b129      	cbz	r1, 801477c <rcutils_vsnprintf+0x14>
 8014770:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014774:	f002 bec8 	b.w	8017508 <vsniprintf>
 8014778:	2900      	cmp	r1, #0
 801477a:	d0f9      	beq.n	8014770 <rcutils_vsnprintf+0x8>
 801477c:	f002 ff90 	bl	80176a0 <__errno>
 8014780:	2316      	movs	r3, #22
 8014782:	6003      	str	r3, [r0, #0]
 8014784:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014788:	bd70      	pop	{r4, r5, r6, pc}
 801478a:	bf00      	nop

0801478c <rcutils_strdup>:
 801478c:	b084      	sub	sp, #16
 801478e:	b570      	push	{r4, r5, r6, lr}
 8014790:	b082      	sub	sp, #8
 8014792:	ac07      	add	r4, sp, #28
 8014794:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8014798:	4605      	mov	r5, r0
 801479a:	b1b0      	cbz	r0, 80147ca <rcutils_strdup+0x3e>
 801479c:	f7eb fd4a 	bl	8000234 <strlen>
 80147a0:	1c42      	adds	r2, r0, #1
 80147a2:	9b07      	ldr	r3, [sp, #28]
 80147a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80147a6:	9201      	str	r2, [sp, #4]
 80147a8:	4606      	mov	r6, r0
 80147aa:	4610      	mov	r0, r2
 80147ac:	4798      	blx	r3
 80147ae:	4604      	mov	r4, r0
 80147b0:	b128      	cbz	r0, 80147be <rcutils_strdup+0x32>
 80147b2:	9a01      	ldr	r2, [sp, #4]
 80147b4:	4629      	mov	r1, r5
 80147b6:	f002 ffa8 	bl	801770a <memcpy>
 80147ba:	2300      	movs	r3, #0
 80147bc:	55a3      	strb	r3, [r4, r6]
 80147be:	4620      	mov	r0, r4
 80147c0:	b002      	add	sp, #8
 80147c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80147c6:	b004      	add	sp, #16
 80147c8:	4770      	bx	lr
 80147ca:	4604      	mov	r4, r0
 80147cc:	e7f7      	b.n	80147be <rcutils_strdup+0x32>
 80147ce:	bf00      	nop

080147d0 <rcutils_strndup>:
 80147d0:	b082      	sub	sp, #8
 80147d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147d4:	ac06      	add	r4, sp, #24
 80147d6:	e884 000c 	stmia.w	r4, {r2, r3}
 80147da:	4605      	mov	r5, r0
 80147dc:	b188      	cbz	r0, 8014802 <rcutils_strndup+0x32>
 80147de:	1c4f      	adds	r7, r1, #1
 80147e0:	460e      	mov	r6, r1
 80147e2:	4638      	mov	r0, r7
 80147e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80147e6:	4790      	blx	r2
 80147e8:	4604      	mov	r4, r0
 80147ea:	b128      	cbz	r0, 80147f8 <rcutils_strndup+0x28>
 80147ec:	463a      	mov	r2, r7
 80147ee:	4629      	mov	r1, r5
 80147f0:	f002 ff8b 	bl	801770a <memcpy>
 80147f4:	2300      	movs	r3, #0
 80147f6:	55a3      	strb	r3, [r4, r6]
 80147f8:	4620      	mov	r0, r4
 80147fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80147fe:	b002      	add	sp, #8
 8014800:	4770      	bx	lr
 8014802:	4604      	mov	r4, r0
 8014804:	e7f8      	b.n	80147f8 <rcutils_strndup+0x28>
 8014806:	bf00      	nop

08014808 <rcutils_get_zero_initialized_string_map>:
 8014808:	4b01      	ldr	r3, [pc, #4]	@ (8014810 <rcutils_get_zero_initialized_string_map+0x8>)
 801480a:	2000      	movs	r0, #0
 801480c:	6018      	str	r0, [r3, #0]
 801480e:	4770      	bx	lr
 8014810:	2000ae8c 	.word	0x2000ae8c

08014814 <rcutils_string_map_reserve>:
 8014814:	2800      	cmp	r0, #0
 8014816:	d05f      	beq.n	80148d8 <rcutils_string_map_reserve+0xc4>
 8014818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801481c:	460c      	mov	r4, r1
 801481e:	6801      	ldr	r1, [r0, #0]
 8014820:	b082      	sub	sp, #8
 8014822:	4605      	mov	r5, r0
 8014824:	b129      	cbz	r1, 8014832 <rcutils_string_map_reserve+0x1e>
 8014826:	68cb      	ldr	r3, [r1, #12]
 8014828:	42a3      	cmp	r3, r4
 801482a:	d906      	bls.n	801483a <rcutils_string_map_reserve+0x26>
 801482c:	461c      	mov	r4, r3
 801482e:	2900      	cmp	r1, #0
 8014830:	d1f9      	bne.n	8014826 <rcutils_string_map_reserve+0x12>
 8014832:	201f      	movs	r0, #31
 8014834:	b002      	add	sp, #8
 8014836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801483a:	688b      	ldr	r3, [r1, #8]
 801483c:	42a3      	cmp	r3, r4
 801483e:	d047      	beq.n	80148d0 <rcutils_string_map_reserve+0xbc>
 8014840:	6a0e      	ldr	r6, [r1, #32]
 8014842:	2c00      	cmp	r4, #0
 8014844:	d034      	beq.n	80148b0 <rcutils_string_map_reserve+0x9c>
 8014846:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801484a:	d243      	bcs.n	80148d4 <rcutils_string_map_reserve+0xc0>
 801484c:	00a7      	lsls	r7, r4, #2
 801484e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8014852:	6808      	ldr	r0, [r1, #0]
 8014854:	4632      	mov	r2, r6
 8014856:	4639      	mov	r1, r7
 8014858:	47c0      	blx	r8
 801485a:	2800      	cmp	r0, #0
 801485c:	d03a      	beq.n	80148d4 <rcutils_string_map_reserve+0xc0>
 801485e:	682b      	ldr	r3, [r5, #0]
 8014860:	4632      	mov	r2, r6
 8014862:	6018      	str	r0, [r3, #0]
 8014864:	4639      	mov	r1, r7
 8014866:	6858      	ldr	r0, [r3, #4]
 8014868:	47c0      	blx	r8
 801486a:	2800      	cmp	r0, #0
 801486c:	d032      	beq.n	80148d4 <rcutils_string_map_reserve+0xc0>
 801486e:	682d      	ldr	r5, [r5, #0]
 8014870:	68ab      	ldr	r3, [r5, #8]
 8014872:	6068      	str	r0, [r5, #4]
 8014874:	42a3      	cmp	r3, r4
 8014876:	d226      	bcs.n	80148c6 <rcutils_string_map_reserve+0xb2>
 8014878:	682a      	ldr	r2, [r5, #0]
 801487a:	eb00 0c07 	add.w	ip, r0, r7
 801487e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8014882:	45e6      	cmp	lr, ip
 8014884:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8014888:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801488c:	d203      	bcs.n	8014896 <rcutils_string_map_reserve+0x82>
 801488e:	eb02 0c07 	add.w	ip, r2, r7
 8014892:	4566      	cmp	r6, ip
 8014894:	d322      	bcc.n	80148dc <rcutils_string_map_reserve+0xc8>
 8014896:	1ae3      	subs	r3, r4, r3
 8014898:	009a      	lsls	r2, r3, #2
 801489a:	4670      	mov	r0, lr
 801489c:	2100      	movs	r1, #0
 801489e:	9201      	str	r2, [sp, #4]
 80148a0:	f002 fe6a 	bl	8017578 <memset>
 80148a4:	9a01      	ldr	r2, [sp, #4]
 80148a6:	2100      	movs	r1, #0
 80148a8:	4630      	mov	r0, r6
 80148aa:	f002 fe65 	bl	8017578 <memset>
 80148ae:	e00a      	b.n	80148c6 <rcutils_string_map_reserve+0xb2>
 80148b0:	694f      	ldr	r7, [r1, #20]
 80148b2:	6808      	ldr	r0, [r1, #0]
 80148b4:	4631      	mov	r1, r6
 80148b6:	47b8      	blx	r7
 80148b8:	682b      	ldr	r3, [r5, #0]
 80148ba:	4631      	mov	r1, r6
 80148bc:	6858      	ldr	r0, [r3, #4]
 80148be:	601c      	str	r4, [r3, #0]
 80148c0:	47b8      	blx	r7
 80148c2:	682d      	ldr	r5, [r5, #0]
 80148c4:	606c      	str	r4, [r5, #4]
 80148c6:	2000      	movs	r0, #0
 80148c8:	60ac      	str	r4, [r5, #8]
 80148ca:	b002      	add	sp, #8
 80148cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148d0:	2000      	movs	r0, #0
 80148d2:	e7af      	b.n	8014834 <rcutils_string_map_reserve+0x20>
 80148d4:	200a      	movs	r0, #10
 80148d6:	e7ad      	b.n	8014834 <rcutils_string_map_reserve+0x20>
 80148d8:	200b      	movs	r0, #11
 80148da:	4770      	bx	lr
 80148dc:	1f0b      	subs	r3, r1, #4
 80148de:	4418      	add	r0, r3
 80148e0:	4413      	add	r3, r2
 80148e2:	3a04      	subs	r2, #4
 80148e4:	4417      	add	r7, r2
 80148e6:	2200      	movs	r2, #0
 80148e8:	f843 2f04 	str.w	r2, [r3, #4]!
 80148ec:	42bb      	cmp	r3, r7
 80148ee:	f840 2f04 	str.w	r2, [r0, #4]!
 80148f2:	d1f9      	bne.n	80148e8 <rcutils_string_map_reserve+0xd4>
 80148f4:	e7e7      	b.n	80148c6 <rcutils_string_map_reserve+0xb2>
 80148f6:	bf00      	nop

080148f8 <rcutils_string_map_init>:
 80148f8:	b082      	sub	sp, #8
 80148fa:	b570      	push	{r4, r5, r6, lr}
 80148fc:	ac04      	add	r4, sp, #16
 80148fe:	e884 000c 	stmia.w	r4, {r2, r3}
 8014902:	b380      	cbz	r0, 8014966 <rcutils_string_map_init+0x6e>
 8014904:	6806      	ldr	r6, [r0, #0]
 8014906:	4604      	mov	r4, r0
 8014908:	b12e      	cbz	r6, 8014916 <rcutils_string_map_init+0x1e>
 801490a:	251e      	movs	r5, #30
 801490c:	4628      	mov	r0, r5
 801490e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014912:	b002      	add	sp, #8
 8014914:	4770      	bx	lr
 8014916:	a804      	add	r0, sp, #16
 8014918:	460d      	mov	r5, r1
 801491a:	f7f8 f9ef 	bl	800ccfc <rcutils_allocator_is_valid>
 801491e:	b310      	cbz	r0, 8014966 <rcutils_string_map_init+0x6e>
 8014920:	9b04      	ldr	r3, [sp, #16]
 8014922:	9908      	ldr	r1, [sp, #32]
 8014924:	2024      	movs	r0, #36	@ 0x24
 8014926:	4798      	blx	r3
 8014928:	6020      	str	r0, [r4, #0]
 801492a:	b310      	cbz	r0, 8014972 <rcutils_string_map_init+0x7a>
 801492c:	f10d 0e10 	add.w	lr, sp, #16
 8014930:	e9c0 6600 	strd	r6, r6, [r0]
 8014934:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8014938:	f100 0c10 	add.w	ip, r0, #16
 801493c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014940:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014944:	f8de 3000 	ldr.w	r3, [lr]
 8014948:	f8cc 3000 	str.w	r3, [ip]
 801494c:	4629      	mov	r1, r5
 801494e:	4620      	mov	r0, r4
 8014950:	f7ff ff60 	bl	8014814 <rcutils_string_map_reserve>
 8014954:	4605      	mov	r5, r0
 8014956:	2800      	cmp	r0, #0
 8014958:	d0d8      	beq.n	801490c <rcutils_string_map_init+0x14>
 801495a:	9b05      	ldr	r3, [sp, #20]
 801495c:	9908      	ldr	r1, [sp, #32]
 801495e:	6820      	ldr	r0, [r4, #0]
 8014960:	4798      	blx	r3
 8014962:	6026      	str	r6, [r4, #0]
 8014964:	e7d2      	b.n	801490c <rcutils_string_map_init+0x14>
 8014966:	250b      	movs	r5, #11
 8014968:	4628      	mov	r0, r5
 801496a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801496e:	b002      	add	sp, #8
 8014970:	4770      	bx	lr
 8014972:	250a      	movs	r5, #10
 8014974:	e7ca      	b.n	801490c <rcutils_string_map_init+0x14>
 8014976:	bf00      	nop

08014978 <rcutils_string_map_fini>:
 8014978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801497c:	b082      	sub	sp, #8
 801497e:	2800      	cmp	r0, #0
 8014980:	d03a      	beq.n	80149f8 <rcutils_string_map_fini+0x80>
 8014982:	6804      	ldr	r4, [r0, #0]
 8014984:	4606      	mov	r6, r0
 8014986:	2c00      	cmp	r4, #0
 8014988:	d032      	beq.n	80149f0 <rcutils_string_map_fini+0x78>
 801498a:	68a3      	ldr	r3, [r4, #8]
 801498c:	b32b      	cbz	r3, 80149da <rcutils_string_map_fini+0x62>
 801498e:	2500      	movs	r5, #0
 8014990:	6822      	ldr	r2, [r4, #0]
 8014992:	462f      	mov	r7, r5
 8014994:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014998:	b1e0      	cbz	r0, 80149d4 <rcutils_string_map_fini+0x5c>
 801499a:	6a21      	ldr	r1, [r4, #32]
 801499c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80149a0:	9101      	str	r1, [sp, #4]
 80149a2:	47c0      	blx	r8
 80149a4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80149a8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80149ac:	9901      	ldr	r1, [sp, #4]
 80149ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80149b2:	47c0      	blx	r8
 80149b4:	68e3      	ldr	r3, [r4, #12]
 80149b6:	6862      	ldr	r2, [r4, #4]
 80149b8:	3b01      	subs	r3, #1
 80149ba:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80149be:	60e3      	str	r3, [r4, #12]
 80149c0:	6834      	ldr	r4, [r6, #0]
 80149c2:	68a3      	ldr	r3, [r4, #8]
 80149c4:	3501      	adds	r5, #1
 80149c6:	429d      	cmp	r5, r3
 80149c8:	d207      	bcs.n	80149da <rcutils_string_map_fini+0x62>
 80149ca:	6822      	ldr	r2, [r4, #0]
 80149cc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80149d0:	2800      	cmp	r0, #0
 80149d2:	d1e2      	bne.n	801499a <rcutils_string_map_fini+0x22>
 80149d4:	3501      	adds	r5, #1
 80149d6:	429d      	cmp	r5, r3
 80149d8:	d3dc      	bcc.n	8014994 <rcutils_string_map_fini+0x1c>
 80149da:	2100      	movs	r1, #0
 80149dc:	4630      	mov	r0, r6
 80149de:	f7ff ff19 	bl	8014814 <rcutils_string_map_reserve>
 80149e2:	4604      	mov	r4, r0
 80149e4:	b920      	cbnz	r0, 80149f0 <rcutils_string_map_fini+0x78>
 80149e6:	6830      	ldr	r0, [r6, #0]
 80149e8:	6943      	ldr	r3, [r0, #20]
 80149ea:	6a01      	ldr	r1, [r0, #32]
 80149ec:	4798      	blx	r3
 80149ee:	6034      	str	r4, [r6, #0]
 80149f0:	4620      	mov	r0, r4
 80149f2:	b002      	add	sp, #8
 80149f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149f8:	240b      	movs	r4, #11
 80149fa:	4620      	mov	r0, r4
 80149fc:	b002      	add	sp, #8
 80149fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a02:	bf00      	nop

08014a04 <rcutils_string_map_getn>:
 8014a04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a08:	b300      	cbz	r0, 8014a4c <rcutils_string_map_getn+0x48>
 8014a0a:	6807      	ldr	r7, [r0, #0]
 8014a0c:	b1ff      	cbz	r7, 8014a4e <rcutils_string_map_getn+0x4a>
 8014a0e:	4688      	mov	r8, r1
 8014a10:	b1e1      	cbz	r1, 8014a4c <rcutils_string_map_getn+0x48>
 8014a12:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8014a16:	683e      	ldr	r6, [r7, #0]
 8014a18:	f1ba 0f00 	cmp.w	sl, #0
 8014a1c:	d016      	beq.n	8014a4c <rcutils_string_map_getn+0x48>
 8014a1e:	4691      	mov	r9, r2
 8014a20:	3e04      	subs	r6, #4
 8014a22:	2400      	movs	r4, #0
 8014a24:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8014a28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014a2c:	4628      	mov	r0, r5
 8014a2e:	3401      	adds	r4, #1
 8014a30:	b155      	cbz	r5, 8014a48 <rcutils_string_map_getn+0x44>
 8014a32:	f7eb fbff 	bl	8000234 <strlen>
 8014a36:	4548      	cmp	r0, r9
 8014a38:	4602      	mov	r2, r0
 8014a3a:	4629      	mov	r1, r5
 8014a3c:	bf38      	it	cc
 8014a3e:	464a      	movcc	r2, r9
 8014a40:	4640      	mov	r0, r8
 8014a42:	f002 fdae 	bl	80175a2 <strncmp>
 8014a46:	b128      	cbz	r0, 8014a54 <rcutils_string_map_getn+0x50>
 8014a48:	45a2      	cmp	sl, r4
 8014a4a:	d1eb      	bne.n	8014a24 <rcutils_string_map_getn+0x20>
 8014a4c:	2700      	movs	r7, #0
 8014a4e:	4638      	mov	r0, r7
 8014a50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	f853 700b 	ldr.w	r7, [r3, fp]
 8014a5a:	4638      	mov	r0, r7
 8014a5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014a60 <rmw_get_zero_initialized_context>:
 8014a60:	b510      	push	{r4, lr}
 8014a62:	4604      	mov	r4, r0
 8014a64:	3010      	adds	r0, #16
 8014a66:	f7f8 f9db 	bl	800ce20 <rmw_get_zero_initialized_init_options>
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	2000      	movs	r0, #0
 8014a6e:	2100      	movs	r1, #0
 8014a70:	e9c4 0100 	strd	r0, r1, [r4]
 8014a74:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8014a78:	60a3      	str	r3, [r4, #8]
 8014a7a:	4620      	mov	r0, r4
 8014a7c:	bd10      	pop	{r4, pc}
 8014a7e:	bf00      	nop

08014a80 <rmw_time_equal>:
 8014a80:	b4f0      	push	{r4, r5, r6, r7}
 8014a82:	b084      	sub	sp, #16
 8014a84:	ac04      	add	r4, sp, #16
 8014a86:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	4924      	ldr	r1, [pc, #144]	@ (8014b20 <rmw_time_equal+0xa0>)
 8014a8e:	9e03      	ldr	r6, [sp, #12]
 8014a90:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8014a94:	2202      	movs	r2, #2
 8014a96:	4299      	cmp	r1, r3
 8014a98:	41aa      	sbcs	r2, r5
 8014a9a:	d330      	bcc.n	8014afe <rmw_time_equal+0x7e>
 8014a9c:	4c21      	ldr	r4, [pc, #132]	@ (8014b24 <rmw_time_equal+0xa4>)
 8014a9e:	fba3 3204 	umull	r3, r2, r3, r4
 8014aa2:	fb04 2205 	mla	r2, r4, r5, r2
 8014aa6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014aaa:	43dd      	mvns	r5, r3
 8014aac:	1a8c      	subs	r4, r1, r2
 8014aae:	4285      	cmp	r5, r0
 8014ab0:	41b4      	sbcs	r4, r6
 8014ab2:	d332      	bcc.n	8014b1a <rmw_time_equal+0x9a>
 8014ab4:	eb10 0c03 	adds.w	ip, r0, r3
 8014ab8:	eb42 0106 	adc.w	r1, r2, r6
 8014abc:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8014ac0:	4817      	ldr	r0, [pc, #92]	@ (8014b20 <rmw_time_equal+0xa0>)
 8014ac2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8014ac4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8014ac6:	2202      	movs	r2, #2
 8014ac8:	4298      	cmp	r0, r3
 8014aca:	41b2      	sbcs	r2, r6
 8014acc:	d31c      	bcc.n	8014b08 <rmw_time_equal+0x88>
 8014ace:	4c15      	ldr	r4, [pc, #84]	@ (8014b24 <rmw_time_equal+0xa4>)
 8014ad0:	fba3 3204 	umull	r3, r2, r3, r4
 8014ad4:	fb04 2206 	mla	r2, r4, r6, r2
 8014ad8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8014adc:	43de      	mvns	r6, r3
 8014ade:	1a84      	subs	r4, r0, r2
 8014ae0:	42ae      	cmp	r6, r5
 8014ae2:	41bc      	sbcs	r4, r7
 8014ae4:	d315      	bcc.n	8014b12 <rmw_time_equal+0x92>
 8014ae6:	195b      	adds	r3, r3, r5
 8014ae8:	eb42 0207 	adc.w	r2, r2, r7
 8014aec:	428a      	cmp	r2, r1
 8014aee:	bf08      	it	eq
 8014af0:	4563      	cmpeq	r3, ip
 8014af2:	bf0c      	ite	eq
 8014af4:	2001      	moveq	r0, #1
 8014af6:	2000      	movne	r0, #0
 8014af8:	b004      	add	sp, #16
 8014afa:	bcf0      	pop	{r4, r5, r6, r7}
 8014afc:	4770      	bx	lr
 8014afe:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8014b02:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014b06:	e7d9      	b.n	8014abc <rmw_time_equal+0x3c>
 8014b08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014b0c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8014b10:	e7ec      	b.n	8014aec <rmw_time_equal+0x6c>
 8014b12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014b16:	4602      	mov	r2, r0
 8014b18:	e7e8      	b.n	8014aec <rmw_time_equal+0x6c>
 8014b1a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8014b1e:	e7cd      	b.n	8014abc <rmw_time_equal+0x3c>
 8014b20:	25c17d04 	.word	0x25c17d04
 8014b24:	3b9aca00 	.word	0x3b9aca00

08014b28 <rmw_time_total_nsec>:
 8014b28:	b470      	push	{r4, r5, r6}
 8014b2a:	b085      	sub	sp, #20
 8014b2c:	ac04      	add	r4, sp, #16
 8014b2e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8014b32:	4603      	mov	r3, r0
 8014b34:	4912      	ldr	r1, [pc, #72]	@ (8014b80 <rmw_time_total_nsec+0x58>)
 8014b36:	9e03      	ldr	r6, [sp, #12]
 8014b38:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8014b3c:	2202      	movs	r2, #2
 8014b3e:	4299      	cmp	r1, r3
 8014b40:	41aa      	sbcs	r2, r5
 8014b42:	d311      	bcc.n	8014b68 <rmw_time_total_nsec+0x40>
 8014b44:	4c0f      	ldr	r4, [pc, #60]	@ (8014b84 <rmw_time_total_nsec+0x5c>)
 8014b46:	fba3 3204 	umull	r3, r2, r3, r4
 8014b4a:	fb04 2205 	mla	r2, r4, r5, r2
 8014b4e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014b52:	43dd      	mvns	r5, r3
 8014b54:	1a8c      	subs	r4, r1, r2
 8014b56:	4285      	cmp	r5, r0
 8014b58:	41b4      	sbcs	r4, r6
 8014b5a:	d30c      	bcc.n	8014b76 <rmw_time_total_nsec+0x4e>
 8014b5c:	1818      	adds	r0, r3, r0
 8014b5e:	eb42 0106 	adc.w	r1, r2, r6
 8014b62:	b005      	add	sp, #20
 8014b64:	bc70      	pop	{r4, r5, r6}
 8014b66:	4770      	bx	lr
 8014b68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014b6c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014b70:	b005      	add	sp, #20
 8014b72:	bc70      	pop	{r4, r5, r6}
 8014b74:	4770      	bx	lr
 8014b76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014b7a:	b005      	add	sp, #20
 8014b7c:	bc70      	pop	{r4, r5, r6}
 8014b7e:	4770      	bx	lr
 8014b80:	25c17d04 	.word	0x25c17d04
 8014b84:	3b9aca00 	.word	0x3b9aca00

08014b88 <rmw_get_zero_initialized_message_info>:
 8014b88:	b510      	push	{r4, lr}
 8014b8a:	2240      	movs	r2, #64	@ 0x40
 8014b8c:	4604      	mov	r4, r0
 8014b8e:	2100      	movs	r1, #0
 8014b90:	f002 fcf2 	bl	8017578 <memset>
 8014b94:	4620      	mov	r0, r4
 8014b96:	bd10      	pop	{r4, pc}

08014b98 <rmw_validate_full_topic_name>:
 8014b98:	2800      	cmp	r0, #0
 8014b9a:	d057      	beq.n	8014c4c <rmw_validate_full_topic_name+0xb4>
 8014b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ba0:	460d      	mov	r5, r1
 8014ba2:	2900      	cmp	r1, #0
 8014ba4:	d054      	beq.n	8014c50 <rmw_validate_full_topic_name+0xb8>
 8014ba6:	4616      	mov	r6, r2
 8014ba8:	4604      	mov	r4, r0
 8014baa:	f7eb fb43 	bl	8000234 <strlen>
 8014bae:	b148      	cbz	r0, 8014bc4 <rmw_validate_full_topic_name+0x2c>
 8014bb0:	7823      	ldrb	r3, [r4, #0]
 8014bb2:	2b2f      	cmp	r3, #47	@ 0x2f
 8014bb4:	d00d      	beq.n	8014bd2 <rmw_validate_full_topic_name+0x3a>
 8014bb6:	2302      	movs	r3, #2
 8014bb8:	602b      	str	r3, [r5, #0]
 8014bba:	b13e      	cbz	r6, 8014bcc <rmw_validate_full_topic_name+0x34>
 8014bbc:	2000      	movs	r0, #0
 8014bbe:	6030      	str	r0, [r6, #0]
 8014bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bc4:	2301      	movs	r3, #1
 8014bc6:	602b      	str	r3, [r5, #0]
 8014bc8:	2e00      	cmp	r6, #0
 8014bca:	d1f7      	bne.n	8014bbc <rmw_validate_full_topic_name+0x24>
 8014bcc:	2000      	movs	r0, #0
 8014bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bd2:	1e43      	subs	r3, r0, #1
 8014bd4:	5ce2      	ldrb	r2, [r4, r3]
 8014bd6:	2a2f      	cmp	r2, #47	@ 0x2f
 8014bd8:	d03c      	beq.n	8014c54 <rmw_validate_full_topic_name+0xbc>
 8014bda:	1e63      	subs	r3, r4, #1
 8014bdc:	eb03 0800 	add.w	r8, r3, r0
 8014be0:	f1c4 0e01 	rsb	lr, r4, #1
 8014be4:	eb0e 0703 	add.w	r7, lr, r3
 8014be8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8014bec:	f021 0220 	bic.w	r2, r1, #32
 8014bf0:	3a41      	subs	r2, #65	@ 0x41
 8014bf2:	2a19      	cmp	r2, #25
 8014bf4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8014bf8:	d90b      	bls.n	8014c12 <rmw_validate_full_topic_name+0x7a>
 8014bfa:	295f      	cmp	r1, #95	@ 0x5f
 8014bfc:	d009      	beq.n	8014c12 <rmw_validate_full_topic_name+0x7a>
 8014bfe:	f1bc 0f0a 	cmp.w	ip, #10
 8014c02:	d906      	bls.n	8014c12 <rmw_validate_full_topic_name+0x7a>
 8014c04:	2304      	movs	r3, #4
 8014c06:	602b      	str	r3, [r5, #0]
 8014c08:	2e00      	cmp	r6, #0
 8014c0a:	d0df      	beq.n	8014bcc <rmw_validate_full_topic_name+0x34>
 8014c0c:	6037      	str	r7, [r6, #0]
 8014c0e:	2000      	movs	r0, #0
 8014c10:	e7d6      	b.n	8014bc0 <rmw_validate_full_topic_name+0x28>
 8014c12:	4543      	cmp	r3, r8
 8014c14:	d1e6      	bne.n	8014be4 <rmw_validate_full_topic_name+0x4c>
 8014c16:	4f1a      	ldr	r7, [pc, #104]	@ (8014c80 <rmw_validate_full_topic_name+0xe8>)
 8014c18:	2301      	movs	r3, #1
 8014c1a:	e004      	b.n	8014c26 <rmw_validate_full_topic_name+0x8e>
 8014c1c:	4298      	cmp	r0, r3
 8014c1e:	f104 0401 	add.w	r4, r4, #1
 8014c22:	d91c      	bls.n	8014c5e <rmw_validate_full_topic_name+0xc6>
 8014c24:	4613      	mov	r3, r2
 8014c26:	4298      	cmp	r0, r3
 8014c28:	f103 0201 	add.w	r2, r3, #1
 8014c2c:	d0f6      	beq.n	8014c1c <rmw_validate_full_topic_name+0x84>
 8014c2e:	7821      	ldrb	r1, [r4, #0]
 8014c30:	292f      	cmp	r1, #47	@ 0x2f
 8014c32:	d1f3      	bne.n	8014c1c <rmw_validate_full_topic_name+0x84>
 8014c34:	7861      	ldrb	r1, [r4, #1]
 8014c36:	292f      	cmp	r1, #47	@ 0x2f
 8014c38:	d01c      	beq.n	8014c74 <rmw_validate_full_topic_name+0xdc>
 8014c3a:	5dc9      	ldrb	r1, [r1, r7]
 8014c3c:	0749      	lsls	r1, r1, #29
 8014c3e:	d5ed      	bpl.n	8014c1c <rmw_validate_full_topic_name+0x84>
 8014c40:	2206      	movs	r2, #6
 8014c42:	602a      	str	r2, [r5, #0]
 8014c44:	2e00      	cmp	r6, #0
 8014c46:	d0c1      	beq.n	8014bcc <rmw_validate_full_topic_name+0x34>
 8014c48:	6033      	str	r3, [r6, #0]
 8014c4a:	e7bf      	b.n	8014bcc <rmw_validate_full_topic_name+0x34>
 8014c4c:	200b      	movs	r0, #11
 8014c4e:	4770      	bx	lr
 8014c50:	200b      	movs	r0, #11
 8014c52:	e7b5      	b.n	8014bc0 <rmw_validate_full_topic_name+0x28>
 8014c54:	2203      	movs	r2, #3
 8014c56:	602a      	str	r2, [r5, #0]
 8014c58:	2e00      	cmp	r6, #0
 8014c5a:	d1f5      	bne.n	8014c48 <rmw_validate_full_topic_name+0xb0>
 8014c5c:	e7b6      	b.n	8014bcc <rmw_validate_full_topic_name+0x34>
 8014c5e:	28f7      	cmp	r0, #247	@ 0xf7
 8014c60:	d802      	bhi.n	8014c68 <rmw_validate_full_topic_name+0xd0>
 8014c62:	2000      	movs	r0, #0
 8014c64:	6028      	str	r0, [r5, #0]
 8014c66:	e7ab      	b.n	8014bc0 <rmw_validate_full_topic_name+0x28>
 8014c68:	2307      	movs	r3, #7
 8014c6a:	602b      	str	r3, [r5, #0]
 8014c6c:	2e00      	cmp	r6, #0
 8014c6e:	d0ad      	beq.n	8014bcc <rmw_validate_full_topic_name+0x34>
 8014c70:	23f6      	movs	r3, #246	@ 0xf6
 8014c72:	e7e9      	b.n	8014c48 <rmw_validate_full_topic_name+0xb0>
 8014c74:	2205      	movs	r2, #5
 8014c76:	602a      	str	r2, [r5, #0]
 8014c78:	2e00      	cmp	r6, #0
 8014c7a:	d1e5      	bne.n	8014c48 <rmw_validate_full_topic_name+0xb0>
 8014c7c:	e7a6      	b.n	8014bcc <rmw_validate_full_topic_name+0x34>
 8014c7e:	bf00      	nop
 8014c80:	08019118 	.word	0x08019118

08014c84 <rmw_validate_namespace_with_size>:
 8014c84:	b340      	cbz	r0, 8014cd8 <rmw_validate_namespace_with_size+0x54>
 8014c86:	b570      	push	{r4, r5, r6, lr}
 8014c88:	4614      	mov	r4, r2
 8014c8a:	b0c2      	sub	sp, #264	@ 0x108
 8014c8c:	b332      	cbz	r2, 8014cdc <rmw_validate_namespace_with_size+0x58>
 8014c8e:	2901      	cmp	r1, #1
 8014c90:	460d      	mov	r5, r1
 8014c92:	461e      	mov	r6, r3
 8014c94:	d102      	bne.n	8014c9c <rmw_validate_namespace_with_size+0x18>
 8014c96:	7803      	ldrb	r3, [r0, #0]
 8014c98:	2b2f      	cmp	r3, #47	@ 0x2f
 8014c9a:	d012      	beq.n	8014cc2 <rmw_validate_namespace_with_size+0x3e>
 8014c9c:	aa01      	add	r2, sp, #4
 8014c9e:	4669      	mov	r1, sp
 8014ca0:	f7ff ff7a 	bl	8014b98 <rmw_validate_full_topic_name>
 8014ca4:	b978      	cbnz	r0, 8014cc6 <rmw_validate_namespace_with_size+0x42>
 8014ca6:	9b00      	ldr	r3, [sp, #0]
 8014ca8:	b14b      	cbz	r3, 8014cbe <rmw_validate_namespace_with_size+0x3a>
 8014caa:	2b07      	cmp	r3, #7
 8014cac:	d007      	beq.n	8014cbe <rmw_validate_namespace_with_size+0x3a>
 8014cae:	1e5a      	subs	r2, r3, #1
 8014cb0:	2a05      	cmp	r2, #5
 8014cb2:	d82b      	bhi.n	8014d0c <rmw_validate_namespace_with_size+0x88>
 8014cb4:	e8df f002 	tbb	[pc, r2]
 8014cb8:	1e212427 	.word	0x1e212427
 8014cbc:	141b      	.short	0x141b
 8014cbe:	2df5      	cmp	r5, #245	@ 0xf5
 8014cc0:	d803      	bhi.n	8014cca <rmw_validate_namespace_with_size+0x46>
 8014cc2:	2000      	movs	r0, #0
 8014cc4:	6020      	str	r0, [r4, #0]
 8014cc6:	b042      	add	sp, #264	@ 0x108
 8014cc8:	bd70      	pop	{r4, r5, r6, pc}
 8014cca:	2307      	movs	r3, #7
 8014ccc:	6023      	str	r3, [r4, #0]
 8014cce:	2e00      	cmp	r6, #0
 8014cd0:	d0f9      	beq.n	8014cc6 <rmw_validate_namespace_with_size+0x42>
 8014cd2:	23f4      	movs	r3, #244	@ 0xf4
 8014cd4:	6033      	str	r3, [r6, #0]
 8014cd6:	e7f6      	b.n	8014cc6 <rmw_validate_namespace_with_size+0x42>
 8014cd8:	200b      	movs	r0, #11
 8014cda:	4770      	bx	lr
 8014cdc:	200b      	movs	r0, #11
 8014cde:	e7f2      	b.n	8014cc6 <rmw_validate_namespace_with_size+0x42>
 8014ce0:	2306      	movs	r3, #6
 8014ce2:	6023      	str	r3, [r4, #0]
 8014ce4:	2e00      	cmp	r6, #0
 8014ce6:	d0ee      	beq.n	8014cc6 <rmw_validate_namespace_with_size+0x42>
 8014ce8:	9b01      	ldr	r3, [sp, #4]
 8014cea:	6033      	str	r3, [r6, #0]
 8014cec:	e7eb      	b.n	8014cc6 <rmw_validate_namespace_with_size+0x42>
 8014cee:	2305      	movs	r3, #5
 8014cf0:	6023      	str	r3, [r4, #0]
 8014cf2:	e7f7      	b.n	8014ce4 <rmw_validate_namespace_with_size+0x60>
 8014cf4:	2304      	movs	r3, #4
 8014cf6:	6023      	str	r3, [r4, #0]
 8014cf8:	e7f4      	b.n	8014ce4 <rmw_validate_namespace_with_size+0x60>
 8014cfa:	2303      	movs	r3, #3
 8014cfc:	6023      	str	r3, [r4, #0]
 8014cfe:	e7f1      	b.n	8014ce4 <rmw_validate_namespace_with_size+0x60>
 8014d00:	2302      	movs	r3, #2
 8014d02:	6023      	str	r3, [r4, #0]
 8014d04:	e7ee      	b.n	8014ce4 <rmw_validate_namespace_with_size+0x60>
 8014d06:	2301      	movs	r3, #1
 8014d08:	6023      	str	r3, [r4, #0]
 8014d0a:	e7eb      	b.n	8014ce4 <rmw_validate_namespace_with_size+0x60>
 8014d0c:	4a03      	ldr	r2, [pc, #12]	@ (8014d1c <rmw_validate_namespace_with_size+0x98>)
 8014d0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8014d12:	a802      	add	r0, sp, #8
 8014d14:	f7ff fd0e 	bl	8014734 <rcutils_snprintf>
 8014d18:	2001      	movs	r0, #1
 8014d1a:	e7d4      	b.n	8014cc6 <rmw_validate_namespace_with_size+0x42>
 8014d1c:	08018d38 	.word	0x08018d38

08014d20 <rmw_validate_namespace>:
 8014d20:	b168      	cbz	r0, 8014d3e <rmw_validate_namespace+0x1e>
 8014d22:	b570      	push	{r4, r5, r6, lr}
 8014d24:	460d      	mov	r5, r1
 8014d26:	4616      	mov	r6, r2
 8014d28:	4604      	mov	r4, r0
 8014d2a:	f7eb fa83 	bl	8000234 <strlen>
 8014d2e:	4633      	mov	r3, r6
 8014d30:	4601      	mov	r1, r0
 8014d32:	462a      	mov	r2, r5
 8014d34:	4620      	mov	r0, r4
 8014d36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d3a:	f7ff bfa3 	b.w	8014c84 <rmw_validate_namespace_with_size>
 8014d3e:	200b      	movs	r0, #11
 8014d40:	4770      	bx	lr
 8014d42:	bf00      	nop

08014d44 <rmw_namespace_validation_result_string>:
 8014d44:	2807      	cmp	r0, #7
 8014d46:	bf9a      	itte	ls
 8014d48:	4b02      	ldrls	r3, [pc, #8]	@ (8014d54 <rmw_namespace_validation_result_string+0x10>)
 8014d4a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8014d4e:	4802      	ldrhi	r0, [pc, #8]	@ (8014d58 <rmw_namespace_validation_result_string+0x14>)
 8014d50:	4770      	bx	lr
 8014d52:	bf00      	nop
 8014d54:	08018f30 	.word	0x08018f30
 8014d58:	08018d88 	.word	0x08018d88

08014d5c <rmw_validate_node_name>:
 8014d5c:	2800      	cmp	r0, #0
 8014d5e:	d03b      	beq.n	8014dd8 <rmw_validate_node_name+0x7c>
 8014d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d64:	460d      	mov	r5, r1
 8014d66:	2900      	cmp	r1, #0
 8014d68:	d038      	beq.n	8014ddc <rmw_validate_node_name+0x80>
 8014d6a:	4616      	mov	r6, r2
 8014d6c:	4604      	mov	r4, r0
 8014d6e:	f7eb fa61 	bl	8000234 <strlen>
 8014d72:	b1e0      	cbz	r0, 8014dae <rmw_validate_node_name+0x52>
 8014d74:	1e63      	subs	r3, r4, #1
 8014d76:	eb03 0800 	add.w	r8, r3, r0
 8014d7a:	f1c4 0101 	rsb	r1, r4, #1
 8014d7e:	18cf      	adds	r7, r1, r3
 8014d80:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8014d84:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8014d88:	f02e 0c20 	bic.w	ip, lr, #32
 8014d8c:	2a09      	cmp	r2, #9
 8014d8e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8014d92:	d914      	bls.n	8014dbe <rmw_validate_node_name+0x62>
 8014d94:	f1bc 0f19 	cmp.w	ip, #25
 8014d98:	d911      	bls.n	8014dbe <rmw_validate_node_name+0x62>
 8014d9a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8014d9e:	d00e      	beq.n	8014dbe <rmw_validate_node_name+0x62>
 8014da0:	2302      	movs	r3, #2
 8014da2:	602b      	str	r3, [r5, #0]
 8014da4:	b106      	cbz	r6, 8014da8 <rmw_validate_node_name+0x4c>
 8014da6:	6037      	str	r7, [r6, #0]
 8014da8:	2000      	movs	r0, #0
 8014daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dae:	2301      	movs	r3, #1
 8014db0:	602b      	str	r3, [r5, #0]
 8014db2:	2e00      	cmp	r6, #0
 8014db4:	d0f8      	beq.n	8014da8 <rmw_validate_node_name+0x4c>
 8014db6:	2000      	movs	r0, #0
 8014db8:	6030      	str	r0, [r6, #0]
 8014dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dbe:	4543      	cmp	r3, r8
 8014dc0:	d1dd      	bne.n	8014d7e <rmw_validate_node_name+0x22>
 8014dc2:	7822      	ldrb	r2, [r4, #0]
 8014dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8014dfc <rmw_validate_node_name+0xa0>)
 8014dc6:	5cd3      	ldrb	r3, [r2, r3]
 8014dc8:	f013 0304 	ands.w	r3, r3, #4
 8014dcc:	d110      	bne.n	8014df0 <rmw_validate_node_name+0x94>
 8014dce:	28ff      	cmp	r0, #255	@ 0xff
 8014dd0:	d806      	bhi.n	8014de0 <rmw_validate_node_name+0x84>
 8014dd2:	602b      	str	r3, [r5, #0]
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	e7e8      	b.n	8014daa <rmw_validate_node_name+0x4e>
 8014dd8:	200b      	movs	r0, #11
 8014dda:	4770      	bx	lr
 8014ddc:	200b      	movs	r0, #11
 8014dde:	e7e4      	b.n	8014daa <rmw_validate_node_name+0x4e>
 8014de0:	2204      	movs	r2, #4
 8014de2:	602a      	str	r2, [r5, #0]
 8014de4:	2e00      	cmp	r6, #0
 8014de6:	d0df      	beq.n	8014da8 <rmw_validate_node_name+0x4c>
 8014de8:	22fe      	movs	r2, #254	@ 0xfe
 8014dea:	6032      	str	r2, [r6, #0]
 8014dec:	4618      	mov	r0, r3
 8014dee:	e7dc      	b.n	8014daa <rmw_validate_node_name+0x4e>
 8014df0:	2303      	movs	r3, #3
 8014df2:	602b      	str	r3, [r5, #0]
 8014df4:	2e00      	cmp	r6, #0
 8014df6:	d1de      	bne.n	8014db6 <rmw_validate_node_name+0x5a>
 8014df8:	e7d6      	b.n	8014da8 <rmw_validate_node_name+0x4c>
 8014dfa:	bf00      	nop
 8014dfc:	08019118 	.word	0x08019118

08014e00 <rmw_node_name_validation_result_string>:
 8014e00:	2804      	cmp	r0, #4
 8014e02:	bf9a      	itte	ls
 8014e04:	4b02      	ldrls	r3, [pc, #8]	@ (8014e10 <rmw_node_name_validation_result_string+0x10>)
 8014e06:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8014e0a:	4802      	ldrhi	r0, [pc, #8]	@ (8014e14 <rmw_node_name_validation_result_string+0x14>)
 8014e0c:	4770      	bx	lr
 8014e0e:	bf00      	nop
 8014e10:	0801903c 	.word	0x0801903c
 8014e14:	08018f50 	.word	0x08018f50

08014e18 <on_status>:
 8014e18:	b082      	sub	sp, #8
 8014e1a:	b002      	add	sp, #8
 8014e1c:	4770      	bx	lr
 8014e1e:	bf00      	nop

08014e20 <on_topic>:
 8014e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e24:	4a22      	ldr	r2, [pc, #136]	@ (8014eb0 <on_topic+0x90>)
 8014e26:	b094      	sub	sp, #80	@ 0x50
 8014e28:	6812      	ldr	r2, [r2, #0]
 8014e2a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8014e2c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8014e30:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8014e34:	b3c2      	cbz	r2, 8014ea8 <on_topic+0x88>
 8014e36:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8014e3a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8014e3e:	e001      	b.n	8014e44 <on_topic+0x24>
 8014e40:	6852      	ldr	r2, [r2, #4]
 8014e42:	b38a      	cbz	r2, 8014ea8 <on_topic+0x88>
 8014e44:	6894      	ldr	r4, [r2, #8]
 8014e46:	8aa3      	ldrh	r3, [r4, #20]
 8014e48:	428b      	cmp	r3, r1
 8014e4a:	d1f9      	bne.n	8014e40 <on_topic+0x20>
 8014e4c:	7da3      	ldrb	r3, [r4, #22]
 8014e4e:	4283      	cmp	r3, r0
 8014e50:	d1f6      	bne.n	8014e40 <on_topic+0x20>
 8014e52:	2248      	movs	r2, #72	@ 0x48
 8014e54:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8014e58:	4668      	mov	r0, sp
 8014e5a:	f002 fc56 	bl	801770a <memcpy>
 8014e5e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8014e62:	cb0c      	ldmia	r3, {r2, r3}
 8014e64:	4620      	mov	r0, r4
 8014e66:	f7f8 ffbf 	bl	800dde8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8014e6a:	4607      	mov	r7, r0
 8014e6c:	b1e0      	cbz	r0, 8014ea8 <on_topic+0x88>
 8014e6e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8014e72:	4632      	mov	r2, r6
 8014e74:	4628      	mov	r0, r5
 8014e76:	f108 0110 	add.w	r1, r8, #16
 8014e7a:	f000 fda7 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 8014e7e:	b930      	cbnz	r0, 8014e8e <on_topic+0x6e>
 8014e80:	480c      	ldr	r0, [pc, #48]	@ (8014eb4 <on_topic+0x94>)
 8014e82:	4639      	mov	r1, r7
 8014e84:	b014      	add	sp, #80	@ 0x50
 8014e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e8a:	f000 b8bd 	b.w	8015008 <put_memory>
 8014e8e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8014e92:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8014e96:	f000 fcc3 	bl	8015820 <rmw_uros_epoch_nanos>
 8014e9a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8014e9e:	2305      	movs	r3, #5
 8014ea0:	e942 0102 	strd	r0, r1, [r2, #-8]
 8014ea4:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8014ea8:	b014      	add	sp, #80	@ 0x50
 8014eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014eae:	bf00      	nop
 8014eb0:	2000ae3c 	.word	0x2000ae3c
 8014eb4:	2000ae2c 	.word	0x2000ae2c

08014eb8 <on_request>:
 8014eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ebc:	4823      	ldr	r0, [pc, #140]	@ (8014f4c <on_request+0x94>)
 8014ebe:	b094      	sub	sp, #80	@ 0x50
 8014ec0:	6800      	ldr	r0, [r0, #0]
 8014ec2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8014ec4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8014ec8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8014eca:	2800      	cmp	r0, #0
 8014ecc:	d03b      	beq.n	8014f46 <on_request+0x8e>
 8014ece:	461d      	mov	r5, r3
 8014ed0:	e001      	b.n	8014ed6 <on_request+0x1e>
 8014ed2:	6840      	ldr	r0, [r0, #4]
 8014ed4:	b3b8      	cbz	r0, 8014f46 <on_request+0x8e>
 8014ed6:	6884      	ldr	r4, [r0, #8]
 8014ed8:	8b21      	ldrh	r1, [r4, #24]
 8014eda:	4291      	cmp	r1, r2
 8014edc:	d1f9      	bne.n	8014ed2 <on_request+0x1a>
 8014ede:	2248      	movs	r2, #72	@ 0x48
 8014ee0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8014ee4:	4668      	mov	r0, sp
 8014ee6:	f002 fc10 	bl	801770a <memcpy>
 8014eea:	f104 0320 	add.w	r3, r4, #32
 8014eee:	cb0c      	ldmia	r3, {r2, r3}
 8014ef0:	4620      	mov	r0, r4
 8014ef2:	f7f8 ff79 	bl	800dde8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8014ef6:	4680      	mov	r8, r0
 8014ef8:	b328      	cbz	r0, 8014f46 <on_request+0x8e>
 8014efa:	4638      	mov	r0, r7
 8014efc:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8014f00:	4632      	mov	r2, r6
 8014f02:	f107 0110 	add.w	r1, r7, #16
 8014f06:	f000 fd61 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 8014f0a:	b930      	cbnz	r0, 8014f1a <on_request+0x62>
 8014f0c:	4810      	ldr	r0, [pc, #64]	@ (8014f50 <on_request+0x98>)
 8014f0e:	4641      	mov	r1, r8
 8014f10:	b014      	add	sp, #80	@ 0x50
 8014f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f16:	f000 b877 	b.w	8015008 <put_memory>
 8014f1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f1c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8014f20:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8014f24:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8014f28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014f2c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014f30:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014f34:	f000 fc74 	bl	8015820 <rmw_uros_epoch_nanos>
 8014f38:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8014f3c:	2303      	movs	r3, #3
 8014f3e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8014f42:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8014f46:	b014      	add	sp, #80	@ 0x50
 8014f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f4c:	2000ae0c 	.word	0x2000ae0c
 8014f50:	2000ae2c 	.word	0x2000ae2c

08014f54 <on_reply>:
 8014f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f58:	4821      	ldr	r0, [pc, #132]	@ (8014fe0 <on_reply+0x8c>)
 8014f5a:	b094      	sub	sp, #80	@ 0x50
 8014f5c:	6800      	ldr	r0, [r0, #0]
 8014f5e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8014f60:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8014f64:	9113      	str	r1, [sp, #76]	@ 0x4c
 8014f66:	b3b8      	cbz	r0, 8014fd8 <on_reply+0x84>
 8014f68:	461d      	mov	r5, r3
 8014f6a:	e001      	b.n	8014f70 <on_reply+0x1c>
 8014f6c:	6840      	ldr	r0, [r0, #4]
 8014f6e:	b398      	cbz	r0, 8014fd8 <on_reply+0x84>
 8014f70:	6884      	ldr	r4, [r0, #8]
 8014f72:	8b21      	ldrh	r1, [r4, #24]
 8014f74:	4291      	cmp	r1, r2
 8014f76:	d1f9      	bne.n	8014f6c <on_reply+0x18>
 8014f78:	2248      	movs	r2, #72	@ 0x48
 8014f7a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8014f7e:	4668      	mov	r0, sp
 8014f80:	f002 fbc3 	bl	801770a <memcpy>
 8014f84:	f104 0320 	add.w	r3, r4, #32
 8014f88:	cb0c      	ldmia	r3, {r2, r3}
 8014f8a:	4620      	mov	r0, r4
 8014f8c:	f7f8 ff2c 	bl	800dde8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8014f90:	4680      	mov	r8, r0
 8014f92:	b308      	cbz	r0, 8014fd8 <on_reply+0x84>
 8014f94:	4638      	mov	r0, r7
 8014f96:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8014f9a:	4632      	mov	r2, r6
 8014f9c:	f107 0110 	add.w	r1, r7, #16
 8014fa0:	f000 fd14 	bl	80159cc <ucdr_deserialize_array_uint8_t>
 8014fa4:	b930      	cbnz	r0, 8014fb4 <on_reply+0x60>
 8014fa6:	480f      	ldr	r0, [pc, #60]	@ (8014fe4 <on_reply+0x90>)
 8014fa8:	4641      	mov	r1, r8
 8014faa:	b014      	add	sp, #80	@ 0x50
 8014fac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014fb0:	f000 b82a 	b.w	8015008 <put_memory>
 8014fb4:	2200      	movs	r2, #0
 8014fb6:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8014fba:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8014fbe:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8014fc2:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8014fc6:	f000 fc2b 	bl	8015820 <rmw_uros_epoch_nanos>
 8014fca:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8014fce:	2304      	movs	r3, #4
 8014fd0:	e942 0102 	strd	r0, r1, [r2, #-8]
 8014fd4:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8014fd8:	b014      	add	sp, #80	@ 0x50
 8014fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fde:	bf00      	nop
 8014fe0:	2000651c 	.word	0x2000651c
 8014fe4:	2000ae2c 	.word	0x2000ae2c

08014fe8 <get_memory>:
 8014fe8:	4603      	mov	r3, r0
 8014fea:	6840      	ldr	r0, [r0, #4]
 8014fec:	b158      	cbz	r0, 8015006 <get_memory+0x1e>
 8014fee:	6842      	ldr	r2, [r0, #4]
 8014ff0:	605a      	str	r2, [r3, #4]
 8014ff2:	b10a      	cbz	r2, 8014ff8 <get_memory+0x10>
 8014ff4:	2100      	movs	r1, #0
 8014ff6:	6011      	str	r1, [r2, #0]
 8014ff8:	681a      	ldr	r2, [r3, #0]
 8014ffa:	6042      	str	r2, [r0, #4]
 8014ffc:	b102      	cbz	r2, 8015000 <get_memory+0x18>
 8014ffe:	6010      	str	r0, [r2, #0]
 8015000:	2200      	movs	r2, #0
 8015002:	6002      	str	r2, [r0, #0]
 8015004:	6018      	str	r0, [r3, #0]
 8015006:	4770      	bx	lr

08015008 <put_memory>:
 8015008:	680b      	ldr	r3, [r1, #0]
 801500a:	b10b      	cbz	r3, 8015010 <put_memory+0x8>
 801500c:	684a      	ldr	r2, [r1, #4]
 801500e:	605a      	str	r2, [r3, #4]
 8015010:	684a      	ldr	r2, [r1, #4]
 8015012:	b102      	cbz	r2, 8015016 <put_memory+0xe>
 8015014:	6013      	str	r3, [r2, #0]
 8015016:	6803      	ldr	r3, [r0, #0]
 8015018:	428b      	cmp	r3, r1
 801501a:	6843      	ldr	r3, [r0, #4]
 801501c:	bf08      	it	eq
 801501e:	6002      	streq	r2, [r0, #0]
 8015020:	604b      	str	r3, [r1, #4]
 8015022:	b103      	cbz	r3, 8015026 <put_memory+0x1e>
 8015024:	6019      	str	r1, [r3, #0]
 8015026:	2300      	movs	r3, #0
 8015028:	600b      	str	r3, [r1, #0]
 801502a:	6041      	str	r1, [r0, #4]
 801502c:	4770      	bx	lr
 801502e:	bf00      	nop

08015030 <rmw_destroy_client>:
 8015030:	b570      	push	{r4, r5, r6, lr}
 8015032:	b128      	cbz	r0, 8015040 <rmw_destroy_client+0x10>
 8015034:	4604      	mov	r4, r0
 8015036:	6800      	ldr	r0, [r0, #0]
 8015038:	460d      	mov	r5, r1
 801503a:	f7f9 f84b 	bl	800e0d4 <is_uxrce_rmw_identifier_valid>
 801503e:	b910      	cbnz	r0, 8015046 <rmw_destroy_client+0x16>
 8015040:	2401      	movs	r4, #1
 8015042:	4620      	mov	r0, r4
 8015044:	bd70      	pop	{r4, r5, r6, pc}
 8015046:	6863      	ldr	r3, [r4, #4]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d0f9      	beq.n	8015040 <rmw_destroy_client+0x10>
 801504c:	2d00      	cmp	r5, #0
 801504e:	d0f7      	beq.n	8015040 <rmw_destroy_client+0x10>
 8015050:	6828      	ldr	r0, [r5, #0]
 8015052:	f7f9 f83f 	bl	800e0d4 <is_uxrce_rmw_identifier_valid>
 8015056:	2800      	cmp	r0, #0
 8015058:	d0f2      	beq.n	8015040 <rmw_destroy_client+0x10>
 801505a:	686e      	ldr	r6, [r5, #4]
 801505c:	2e00      	cmp	r6, #0
 801505e:	d0ef      	beq.n	8015040 <rmw_destroy_client+0x10>
 8015060:	6864      	ldr	r4, [r4, #4]
 8015062:	6932      	ldr	r2, [r6, #16]
 8015064:	6920      	ldr	r0, [r4, #16]
 8015066:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801506a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801506e:	6819      	ldr	r1, [r3, #0]
 8015070:	f7f9 fafa 	bl	800e668 <uxr_buffer_cancel_data>
 8015074:	4602      	mov	r2, r0
 8015076:	6920      	ldr	r0, [r4, #16]
 8015078:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801507c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015080:	f7f8 ffa8 	bl	800dfd4 <run_xrce_session>
 8015084:	6920      	ldr	r0, [r4, #16]
 8015086:	6932      	ldr	r2, [r6, #16]
 8015088:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801508c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015090:	6819      	ldr	r1, [r3, #0]
 8015092:	f7f9 f89d 	bl	800e1d0 <uxr_buffer_delete_entity>
 8015096:	4602      	mov	r2, r0
 8015098:	6920      	ldr	r0, [r4, #16]
 801509a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801509e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80150a2:	f7f8 ff97 	bl	800dfd4 <run_xrce_session>
 80150a6:	2800      	cmp	r0, #0
 80150a8:	4628      	mov	r0, r5
 80150aa:	bf14      	ite	ne
 80150ac:	2400      	movne	r4, #0
 80150ae:	2402      	moveq	r4, #2
 80150b0:	f7f8 fe78 	bl	800dda4 <rmw_uxrce_fini_client_memory>
 80150b4:	e7c5      	b.n	8015042 <rmw_destroy_client+0x12>
 80150b6:	bf00      	nop

080150b8 <rmw_get_implementation_identifier>:
 80150b8:	4b01      	ldr	r3, [pc, #4]	@ (80150c0 <rmw_get_implementation_identifier+0x8>)
 80150ba:	6818      	ldr	r0, [r3, #0]
 80150bc:	4770      	bx	lr
 80150be:	bf00      	nop
 80150c0:	08019068 	.word	0x08019068

080150c4 <create_topic>:
 80150c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150c8:	4605      	mov	r5, r0
 80150ca:	b084      	sub	sp, #16
 80150cc:	4822      	ldr	r0, [pc, #136]	@ (8015158 <create_topic+0x94>)
 80150ce:	460f      	mov	r7, r1
 80150d0:	4616      	mov	r6, r2
 80150d2:	f7ff ff89 	bl	8014fe8 <get_memory>
 80150d6:	4604      	mov	r4, r0
 80150d8:	2800      	cmp	r0, #0
 80150da:	d039      	beq.n	8015150 <create_topic+0x8c>
 80150dc:	692b      	ldr	r3, [r5, #16]
 80150de:	6884      	ldr	r4, [r0, #8]
 80150e0:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8015160 <create_topic+0x9c>
 80150e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80150e8:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80150ec:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80150f0:	1c42      	adds	r2, r0, #1
 80150f2:	2102      	movs	r1, #2
 80150f4:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80150f8:	f7f9 fa86 	bl	800e608 <uxr_object_id>
 80150fc:	223c      	movs	r2, #60	@ 0x3c
 80150fe:	6120      	str	r0, [r4, #16]
 8015100:	4641      	mov	r1, r8
 8015102:	4638      	mov	r0, r7
 8015104:	f7f8 ffcc 	bl	800e0a0 <generate_topic_name>
 8015108:	b1f0      	cbz	r0, 8015148 <create_topic+0x84>
 801510a:	4f14      	ldr	r7, [pc, #80]	@ (801515c <create_topic+0x98>)
 801510c:	4630      	mov	r0, r6
 801510e:	2264      	movs	r2, #100	@ 0x64
 8015110:	4639      	mov	r1, r7
 8015112:	f7f8 ff95 	bl	800e040 <generate_type_name>
 8015116:	b1b8      	cbz	r0, 8015148 <create_topic+0x84>
 8015118:	6928      	ldr	r0, [r5, #16]
 801511a:	2306      	movs	r3, #6
 801511c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8015120:	f8cd 8000 	str.w	r8, [sp]
 8015124:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8015128:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801512c:	6811      	ldr	r1, [r2, #0]
 801512e:	696b      	ldr	r3, [r5, #20]
 8015130:	6922      	ldr	r2, [r4, #16]
 8015132:	f7f9 f8cb 	bl	800e2cc <uxr_buffer_create_topic_bin>
 8015136:	4602      	mov	r2, r0
 8015138:	6928      	ldr	r0, [r5, #16]
 801513a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801513e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015142:	f7f8 ff47 	bl	800dfd4 <run_xrce_session>
 8015146:	b918      	cbnz	r0, 8015150 <create_topic+0x8c>
 8015148:	4620      	mov	r0, r4
 801514a:	f7f8 fe41 	bl	800ddd0 <rmw_uxrce_fini_topic_memory>
 801514e:	2400      	movs	r4, #0
 8015150:	4620      	mov	r0, r4
 8015152:	b004      	add	sp, #16
 8015154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015158:	2000ae4c 	.word	0x2000ae4c
 801515c:	2000aecc 	.word	0x2000aecc
 8015160:	2000ae90 	.word	0x2000ae90

08015164 <destroy_topic>:
 8015164:	b538      	push	{r3, r4, r5, lr}
 8015166:	6985      	ldr	r5, [r0, #24]
 8015168:	b1d5      	cbz	r5, 80151a0 <destroy_topic+0x3c>
 801516a:	4604      	mov	r4, r0
 801516c:	6928      	ldr	r0, [r5, #16]
 801516e:	6922      	ldr	r2, [r4, #16]
 8015170:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015174:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015178:	6819      	ldr	r1, [r3, #0]
 801517a:	f7f9 f829 	bl	800e1d0 <uxr_buffer_delete_entity>
 801517e:	4602      	mov	r2, r0
 8015180:	6928      	ldr	r0, [r5, #16]
 8015182:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015186:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801518a:	f7f8 ff23 	bl	800dfd4 <run_xrce_session>
 801518e:	2800      	cmp	r0, #0
 8015190:	4620      	mov	r0, r4
 8015192:	bf14      	ite	ne
 8015194:	2400      	movne	r4, #0
 8015196:	2402      	moveq	r4, #2
 8015198:	f7f8 fe1a 	bl	800ddd0 <rmw_uxrce_fini_topic_memory>
 801519c:	4620      	mov	r0, r4
 801519e:	bd38      	pop	{r3, r4, r5, pc}
 80151a0:	2401      	movs	r4, #1
 80151a2:	4620      	mov	r0, r4
 80151a4:	bd38      	pop	{r3, r4, r5, pc}
 80151a6:	bf00      	nop

080151a8 <rmw_send_request>:
 80151a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80151ac:	4604      	mov	r4, r0
 80151ae:	6800      	ldr	r0, [r0, #0]
 80151b0:	b08b      	sub	sp, #44	@ 0x2c
 80151b2:	460e      	mov	r6, r1
 80151b4:	4615      	mov	r5, r2
 80151b6:	b128      	cbz	r0, 80151c4 <rmw_send_request+0x1c>
 80151b8:	4b21      	ldr	r3, [pc, #132]	@ (8015240 <rmw_send_request+0x98>)
 80151ba:	6819      	ldr	r1, [r3, #0]
 80151bc:	f7eb f830 	bl	8000220 <strcmp>
 80151c0:	2800      	cmp	r0, #0
 80151c2:	d139      	bne.n	8015238 <rmw_send_request+0x90>
 80151c4:	6864      	ldr	r4, [r4, #4]
 80151c6:	6963      	ldr	r3, [r4, #20]
 80151c8:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 80151cc:	689b      	ldr	r3, [r3, #8]
 80151ce:	4798      	blx	r3
 80151d0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80151d4:	4630      	mov	r0, r6
 80151d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80151da:	4798      	blx	r3
 80151dc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80151e0:	9000      	str	r0, [sp, #0]
 80151e2:	6922      	ldr	r2, [r4, #16]
 80151e4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80151e6:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80151ea:	ab02      	add	r3, sp, #8
 80151ec:	f7fb fa8e 	bl	801070c <uxr_prepare_output_stream>
 80151f0:	2700      	movs	r7, #0
 80151f2:	6028      	str	r0, [r5, #0]
 80151f4:	606f      	str	r7, [r5, #4]
 80151f6:	b198      	cbz	r0, 8015220 <rmw_send_request+0x78>
 80151f8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80151fc:	a902      	add	r1, sp, #8
 80151fe:	4630      	mov	r0, r6
 8015200:	4798      	blx	r3
 8015202:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8015206:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801520a:	2b01      	cmp	r3, #1
 801520c:	d00c      	beq.n	8015228 <rmw_send_request+0x80>
 801520e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8015210:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015214:	f7f9 fffc 	bl	800f210 <uxr_run_session_until_confirm_delivery>
 8015218:	4638      	mov	r0, r7
 801521a:	b00b      	add	sp, #44	@ 0x2c
 801521c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015220:	2001      	movs	r0, #1
 8015222:	b00b      	add	sp, #44	@ 0x2c
 8015224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015228:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801522c:	f7f9 fc30 	bl	800ea90 <uxr_flash_output_streams>
 8015230:	4638      	mov	r0, r7
 8015232:	b00b      	add	sp, #44	@ 0x2c
 8015234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015238:	200c      	movs	r0, #12
 801523a:	b00b      	add	sp, #44	@ 0x2c
 801523c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015240:	08019068 	.word	0x08019068

08015244 <rmw_take_request>:
 8015244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015248:	4605      	mov	r5, r0
 801524a:	6800      	ldr	r0, [r0, #0]
 801524c:	b089      	sub	sp, #36	@ 0x24
 801524e:	460c      	mov	r4, r1
 8015250:	4690      	mov	r8, r2
 8015252:	461e      	mov	r6, r3
 8015254:	b128      	cbz	r0, 8015262 <rmw_take_request+0x1e>
 8015256:	4b28      	ldr	r3, [pc, #160]	@ (80152f8 <rmw_take_request+0xb4>)
 8015258:	6819      	ldr	r1, [r3, #0]
 801525a:	f7ea ffe1 	bl	8000220 <strcmp>
 801525e:	2800      	cmp	r0, #0
 8015260:	d146      	bne.n	80152f0 <rmw_take_request+0xac>
 8015262:	b10e      	cbz	r6, 8015268 <rmw_take_request+0x24>
 8015264:	2300      	movs	r3, #0
 8015266:	7033      	strb	r3, [r6, #0]
 8015268:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801526c:	f7f8 fe34 	bl	800ded8 <rmw_uxrce_clean_expired_static_input_buffer>
 8015270:	4648      	mov	r0, r9
 8015272:	f7f8 fe09 	bl	800de88 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015276:	4607      	mov	r7, r0
 8015278:	b3b0      	cbz	r0, 80152e8 <rmw_take_request+0xa4>
 801527a:	6885      	ldr	r5, [r0, #8]
 801527c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8015280:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8015284:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8015288:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801528c:	7423      	strb	r3, [r4, #16]
 801528e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8015292:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8015296:	74e2      	strb	r2, [r4, #19]
 8015298:	f8a4 3011 	strh.w	r3, [r4, #17]
 801529c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80152a0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80152a4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80152a8:	61e1      	str	r1, [r4, #28]
 80152aa:	6162      	str	r2, [r4, #20]
 80152ac:	61a3      	str	r3, [r4, #24]
 80152ae:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80152b2:	689b      	ldr	r3, [r3, #8]
 80152b4:	4798      	blx	r3
 80152b6:	6844      	ldr	r4, [r0, #4]
 80152b8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80152bc:	f105 0110 	add.w	r1, r5, #16
 80152c0:	4668      	mov	r0, sp
 80152c2:	f7f6 fb65 	bl	800b990 <ucdr_init_buffer>
 80152c6:	68e3      	ldr	r3, [r4, #12]
 80152c8:	4641      	mov	r1, r8
 80152ca:	4668      	mov	r0, sp
 80152cc:	4798      	blx	r3
 80152ce:	4639      	mov	r1, r7
 80152d0:	4604      	mov	r4, r0
 80152d2:	480a      	ldr	r0, [pc, #40]	@ (80152fc <rmw_take_request+0xb8>)
 80152d4:	f7ff fe98 	bl	8015008 <put_memory>
 80152d8:	b106      	cbz	r6, 80152dc <rmw_take_request+0x98>
 80152da:	7034      	strb	r4, [r6, #0]
 80152dc:	f084 0001 	eor.w	r0, r4, #1
 80152e0:	b2c0      	uxtb	r0, r0
 80152e2:	b009      	add	sp, #36	@ 0x24
 80152e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152e8:	2001      	movs	r0, #1
 80152ea:	b009      	add	sp, #36	@ 0x24
 80152ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152f0:	200c      	movs	r0, #12
 80152f2:	b009      	add	sp, #36	@ 0x24
 80152f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152f8:	08019068 	.word	0x08019068
 80152fc:	2000ae2c 	.word	0x2000ae2c

08015300 <rmw_send_response>:
 8015300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015302:	4605      	mov	r5, r0
 8015304:	6800      	ldr	r0, [r0, #0]
 8015306:	b091      	sub	sp, #68	@ 0x44
 8015308:	460c      	mov	r4, r1
 801530a:	4616      	mov	r6, r2
 801530c:	b128      	cbz	r0, 801531a <rmw_send_response+0x1a>
 801530e:	4b29      	ldr	r3, [pc, #164]	@ (80153b4 <rmw_send_response+0xb4>)
 8015310:	6819      	ldr	r1, [r3, #0]
 8015312:	f7ea ff85 	bl	8000220 <strcmp>
 8015316:	2800      	cmp	r0, #0
 8015318:	d141      	bne.n	801539e <rmw_send_response+0x9e>
 801531a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801531e:	9306      	str	r3, [sp, #24]
 8015320:	4623      	mov	r3, r4
 8015322:	9207      	str	r2, [sp, #28]
 8015324:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015328:	686d      	ldr	r5, [r5, #4]
 801532a:	789b      	ldrb	r3, [r3, #2]
 801532c:	68a1      	ldr	r1, [r4, #8]
 801532e:	f88d 2017 	strb.w	r2, [sp, #23]
 8015332:	f88d 3016 	strb.w	r3, [sp, #22]
 8015336:	68e2      	ldr	r2, [r4, #12]
 8015338:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801533c:	6860      	ldr	r0, [r4, #4]
 801533e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015342:	ab02      	add	r3, sp, #8
 8015344:	c307      	stmia	r3!, {r0, r1, r2}
 8015346:	696b      	ldr	r3, [r5, #20]
 8015348:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801534a:	68db      	ldr	r3, [r3, #12]
 801534c:	4798      	blx	r3
 801534e:	6844      	ldr	r4, [r0, #4]
 8015350:	4630      	mov	r0, r6
 8015352:	6923      	ldr	r3, [r4, #16]
 8015354:	4798      	blx	r3
 8015356:	f100 0318 	add.w	r3, r0, #24
 801535a:	6938      	ldr	r0, [r7, #16]
 801535c:	9300      	str	r3, [sp, #0]
 801535e:	692a      	ldr	r2, [r5, #16]
 8015360:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8015362:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015366:	ab08      	add	r3, sp, #32
 8015368:	f7fb f9d0 	bl	801070c <uxr_prepare_output_stream>
 801536c:	b910      	cbnz	r0, 8015374 <rmw_send_response+0x74>
 801536e:	2001      	movs	r0, #1
 8015370:	b011      	add	sp, #68	@ 0x44
 8015372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015374:	a902      	add	r1, sp, #8
 8015376:	a808      	add	r0, sp, #32
 8015378:	f7fc fa14 	bl	80117a4 <uxr_serialize_SampleIdentity>
 801537c:	68a3      	ldr	r3, [r4, #8]
 801537e:	a908      	add	r1, sp, #32
 8015380:	4630      	mov	r0, r6
 8015382:	4798      	blx	r3
 8015384:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8015388:	6938      	ldr	r0, [r7, #16]
 801538a:	2b01      	cmp	r3, #1
 801538c:	d00a      	beq.n	80153a4 <rmw_send_response+0xa4>
 801538e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8015390:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015394:	f7f9 ff3c 	bl	800f210 <uxr_run_session_until_confirm_delivery>
 8015398:	2000      	movs	r0, #0
 801539a:	b011      	add	sp, #68	@ 0x44
 801539c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801539e:	200c      	movs	r0, #12
 80153a0:	b011      	add	sp, #68	@ 0x44
 80153a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80153a8:	f7f9 fb72 	bl	800ea90 <uxr_flash_output_streams>
 80153ac:	2000      	movs	r0, #0
 80153ae:	b011      	add	sp, #68	@ 0x44
 80153b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153b2:	bf00      	nop
 80153b4:	08019068 	.word	0x08019068

080153b8 <rmw_take_response>:
 80153b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153bc:	4604      	mov	r4, r0
 80153be:	6800      	ldr	r0, [r0, #0]
 80153c0:	b088      	sub	sp, #32
 80153c2:	4688      	mov	r8, r1
 80153c4:	4617      	mov	r7, r2
 80153c6:	461d      	mov	r5, r3
 80153c8:	b120      	cbz	r0, 80153d4 <rmw_take_response+0x1c>
 80153ca:	4b1e      	ldr	r3, [pc, #120]	@ (8015444 <rmw_take_response+0x8c>)
 80153cc:	6819      	ldr	r1, [r3, #0]
 80153ce:	f7ea ff27 	bl	8000220 <strcmp>
 80153d2:	bb78      	cbnz	r0, 8015434 <rmw_take_response+0x7c>
 80153d4:	b10d      	cbz	r5, 80153da <rmw_take_response+0x22>
 80153d6:	2300      	movs	r3, #0
 80153d8:	702b      	strb	r3, [r5, #0]
 80153da:	6864      	ldr	r4, [r4, #4]
 80153dc:	f7f8 fd7c 	bl	800ded8 <rmw_uxrce_clean_expired_static_input_buffer>
 80153e0:	4620      	mov	r0, r4
 80153e2:	f7f8 fd51 	bl	800de88 <rmw_uxrce_find_static_input_buffer_by_owner>
 80153e6:	4606      	mov	r6, r0
 80153e8:	b340      	cbz	r0, 801543c <rmw_take_response+0x84>
 80153ea:	6963      	ldr	r3, [r4, #20]
 80153ec:	6884      	ldr	r4, [r0, #8]
 80153ee:	68db      	ldr	r3, [r3, #12]
 80153f0:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80153f4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80153f8:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80153fc:	4798      	blx	r3
 80153fe:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015402:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8015406:	f104 0110 	add.w	r1, r4, #16
 801540a:	4668      	mov	r0, sp
 801540c:	f7f6 fac0 	bl	800b990 <ucdr_init_buffer>
 8015410:	4639      	mov	r1, r7
 8015412:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015416:	4668      	mov	r0, sp
 8015418:	4798      	blx	r3
 801541a:	4631      	mov	r1, r6
 801541c:	4604      	mov	r4, r0
 801541e:	480a      	ldr	r0, [pc, #40]	@ (8015448 <rmw_take_response+0x90>)
 8015420:	f7ff fdf2 	bl	8015008 <put_memory>
 8015424:	b105      	cbz	r5, 8015428 <rmw_take_response+0x70>
 8015426:	702c      	strb	r4, [r5, #0]
 8015428:	f084 0001 	eor.w	r0, r4, #1
 801542c:	b2c0      	uxtb	r0, r0
 801542e:	b008      	add	sp, #32
 8015430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015434:	200c      	movs	r0, #12
 8015436:	b008      	add	sp, #32
 8015438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801543c:	2001      	movs	r0, #1
 801543e:	b008      	add	sp, #32
 8015440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015444:	08019068 	.word	0x08019068
 8015448:	2000ae2c 	.word	0x2000ae2c

0801544c <rmw_take_with_info>:
 801544c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801544e:	4604      	mov	r4, r0
 8015450:	6800      	ldr	r0, [r0, #0]
 8015452:	b089      	sub	sp, #36	@ 0x24
 8015454:	460f      	mov	r7, r1
 8015456:	4615      	mov	r5, r2
 8015458:	b128      	cbz	r0, 8015466 <rmw_take_with_info+0x1a>
 801545a:	4b24      	ldr	r3, [pc, #144]	@ (80154ec <rmw_take_with_info+0xa0>)
 801545c:	6819      	ldr	r1, [r3, #0]
 801545e:	f7ea fedf 	bl	8000220 <strcmp>
 8015462:	2800      	cmp	r0, #0
 8015464:	d13e      	bne.n	80154e4 <rmw_take_with_info+0x98>
 8015466:	b305      	cbz	r5, 80154aa <rmw_take_with_info+0x5e>
 8015468:	6864      	ldr	r4, [r4, #4]
 801546a:	2300      	movs	r3, #0
 801546c:	702b      	strb	r3, [r5, #0]
 801546e:	f7f8 fd33 	bl	800ded8 <rmw_uxrce_clean_expired_static_input_buffer>
 8015472:	4620      	mov	r0, r4
 8015474:	f7f8 fd08 	bl	800de88 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015478:	4606      	mov	r6, r0
 801547a:	b1f0      	cbz	r0, 80154ba <rmw_take_with_info+0x6e>
 801547c:	6881      	ldr	r1, [r0, #8]
 801547e:	4668      	mov	r0, sp
 8015480:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8015484:	3110      	adds	r1, #16
 8015486:	f7f6 fa83 	bl	800b990 <ucdr_init_buffer>
 801548a:	69a3      	ldr	r3, [r4, #24]
 801548c:	4639      	mov	r1, r7
 801548e:	68db      	ldr	r3, [r3, #12]
 8015490:	4668      	mov	r0, sp
 8015492:	4798      	blx	r3
 8015494:	4631      	mov	r1, r6
 8015496:	4604      	mov	r4, r0
 8015498:	4815      	ldr	r0, [pc, #84]	@ (80154f0 <rmw_take_with_info+0xa4>)
 801549a:	f7ff fdb5 	bl	8015008 <put_memory>
 801549e:	702c      	strb	r4, [r5, #0]
 80154a0:	f084 0001 	eor.w	r0, r4, #1
 80154a4:	b2c0      	uxtb	r0, r0
 80154a6:	b009      	add	sp, #36	@ 0x24
 80154a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154aa:	6864      	ldr	r4, [r4, #4]
 80154ac:	f7f8 fd14 	bl	800ded8 <rmw_uxrce_clean_expired_static_input_buffer>
 80154b0:	4620      	mov	r0, r4
 80154b2:	f7f8 fce9 	bl	800de88 <rmw_uxrce_find_static_input_buffer_by_owner>
 80154b6:	4605      	mov	r5, r0
 80154b8:	b910      	cbnz	r0, 80154c0 <rmw_take_with_info+0x74>
 80154ba:	2001      	movs	r0, #1
 80154bc:	b009      	add	sp, #36	@ 0x24
 80154be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154c0:	68a9      	ldr	r1, [r5, #8]
 80154c2:	4668      	mov	r0, sp
 80154c4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80154c8:	3110      	adds	r1, #16
 80154ca:	f7f6 fa61 	bl	800b990 <ucdr_init_buffer>
 80154ce:	69a3      	ldr	r3, [r4, #24]
 80154d0:	4639      	mov	r1, r7
 80154d2:	68db      	ldr	r3, [r3, #12]
 80154d4:	4668      	mov	r0, sp
 80154d6:	4798      	blx	r3
 80154d8:	4629      	mov	r1, r5
 80154da:	4604      	mov	r4, r0
 80154dc:	4804      	ldr	r0, [pc, #16]	@ (80154f0 <rmw_take_with_info+0xa4>)
 80154de:	f7ff fd93 	bl	8015008 <put_memory>
 80154e2:	e7dd      	b.n	80154a0 <rmw_take_with_info+0x54>
 80154e4:	200c      	movs	r0, #12
 80154e6:	b009      	add	sp, #36	@ 0x24
 80154e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154ea:	bf00      	nop
 80154ec:	08019068 	.word	0x08019068
 80154f0:	2000ae2c 	.word	0x2000ae2c

080154f4 <rmw_wait>:
 80154f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80154f8:	b089      	sub	sp, #36	@ 0x24
 80154fa:	4605      	mov	r5, r0
 80154fc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80154fe:	460e      	mov	r6, r1
 8015500:	4698      	mov	r8, r3
 8015502:	4691      	mov	r9, r2
 8015504:	2a00      	cmp	r2, #0
 8015506:	f000 810a 	beq.w	801571e <rmw_wait+0x22a>
 801550a:	b16c      	cbz	r4, 8015528 <rmw_wait+0x34>
 801550c:	4bae      	ldr	r3, [pc, #696]	@ (80157c8 <rmw_wait+0x2d4>)
 801550e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015510:	af04      	add	r7, sp, #16
 8015512:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8015516:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801551a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801551e:	f7ff faaf 	bl	8014a80 <rmw_time_equal>
 8015522:	2800      	cmp	r0, #0
 8015524:	f000 8127 	beq.w	8015776 <rmw_wait+0x282>
 8015528:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801552c:	f7f8 fcd4 	bl	800ded8 <rmw_uxrce_clean_expired_static_input_buffer>
 8015530:	4ba6      	ldr	r3, [pc, #664]	@ (80157cc <rmw_wait+0x2d8>)
 8015532:	681c      	ldr	r4, [r3, #0]
 8015534:	b14c      	cbz	r4, 801554a <rmw_wait+0x56>
 8015536:	4623      	mov	r3, r4
 8015538:	2100      	movs	r1, #0
 801553a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801553e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015542:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8015546:	2b00      	cmp	r3, #0
 8015548:	d1f7      	bne.n	801553a <rmw_wait+0x46>
 801554a:	f1b9 0f00 	cmp.w	r9, #0
 801554e:	d011      	beq.n	8015574 <rmw_wait+0x80>
 8015550:	f8d9 1000 	ldr.w	r1, [r9]
 8015554:	b171      	cbz	r1, 8015574 <rmw_wait+0x80>
 8015556:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801555a:	2300      	movs	r3, #0
 801555c:	2001      	movs	r0, #1
 801555e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015562:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015564:	6912      	ldr	r2, [r2, #16]
 8015566:	3301      	adds	r3, #1
 8015568:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801556c:	4299      	cmp	r1, r3
 801556e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015572:	d1f4      	bne.n	801555e <rmw_wait+0x6a>
 8015574:	f1b8 0f00 	cmp.w	r8, #0
 8015578:	d011      	beq.n	801559e <rmw_wait+0xaa>
 801557a:	f8d8 1000 	ldr.w	r1, [r8]
 801557e:	b171      	cbz	r1, 801559e <rmw_wait+0xaa>
 8015580:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8015584:	2300      	movs	r3, #0
 8015586:	2001      	movs	r0, #1
 8015588:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801558c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801558e:	6912      	ldr	r2, [r2, #16]
 8015590:	3301      	adds	r3, #1
 8015592:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015596:	4299      	cmp	r1, r3
 8015598:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801559c:	d1f4      	bne.n	8015588 <rmw_wait+0x94>
 801559e:	b185      	cbz	r5, 80155c2 <rmw_wait+0xce>
 80155a0:	6829      	ldr	r1, [r5, #0]
 80155a2:	b171      	cbz	r1, 80155c2 <rmw_wait+0xce>
 80155a4:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80155a8:	2300      	movs	r3, #0
 80155aa:	2001      	movs	r0, #1
 80155ac:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80155b0:	6a12      	ldr	r2, [r2, #32]
 80155b2:	6912      	ldr	r2, [r2, #16]
 80155b4:	3301      	adds	r3, #1
 80155b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80155ba:	4299      	cmp	r1, r3
 80155bc:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80155c0:	d1f4      	bne.n	80155ac <rmw_wait+0xb8>
 80155c2:	b34c      	cbz	r4, 8015618 <rmw_wait+0x124>
 80155c4:	4622      	mov	r2, r4
 80155c6:	2300      	movs	r3, #0
 80155c8:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80155cc:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80155d0:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80155d4:	440b      	add	r3, r1
 80155d6:	b2db      	uxtb	r3, r3
 80155d8:	2a00      	cmp	r2, #0
 80155da:	d1f5      	bne.n	80155c8 <rmw_wait+0xd4>
 80155dc:	2b00      	cmp	r3, #0
 80155de:	f000 8084 	beq.w	80156ea <rmw_wait+0x1f6>
 80155e2:	1c7a      	adds	r2, r7, #1
 80155e4:	d00d      	beq.n	8015602 <rmw_wait+0x10e>
 80155e6:	ee07 7a90 	vmov	s15, r7
 80155ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80155ee:	ee07 3a90 	vmov	s15, r3
 80155f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80155f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80155fa:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80155fe:	ee17 7a90 	vmov	r7, s15
 8015602:	68a0      	ldr	r0, [r4, #8]
 8015604:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8015608:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801560c:	2b00      	cmp	r3, #0
 801560e:	f040 8090 	bne.w	8015732 <rmw_wait+0x23e>
 8015612:	6864      	ldr	r4, [r4, #4]
 8015614:	2c00      	cmp	r4, #0
 8015616:	d1f4      	bne.n	8015602 <rmw_wait+0x10e>
 8015618:	f1b9 0f00 	cmp.w	r9, #0
 801561c:	f000 80bc 	beq.w	8015798 <rmw_wait+0x2a4>
 8015620:	f8d9 7000 	ldr.w	r7, [r9]
 8015624:	2f00      	cmp	r7, #0
 8015626:	f000 808e 	beq.w	8015746 <rmw_wait+0x252>
 801562a:	2400      	movs	r4, #0
 801562c:	4627      	mov	r7, r4
 801562e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015632:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015636:	f7f8 fc27 	bl	800de88 <rmw_uxrce_find_static_input_buffer_by_owner>
 801563a:	2800      	cmp	r0, #0
 801563c:	d05f      	beq.n	80156fe <rmw_wait+0x20a>
 801563e:	f8d9 3000 	ldr.w	r3, [r9]
 8015642:	3401      	adds	r4, #1
 8015644:	42a3      	cmp	r3, r4
 8015646:	f04f 0701 	mov.w	r7, #1
 801564a:	d8f0      	bhi.n	801562e <rmw_wait+0x13a>
 801564c:	f1b8 0f00 	cmp.w	r8, #0
 8015650:	d012      	beq.n	8015678 <rmw_wait+0x184>
 8015652:	f8d8 3000 	ldr.w	r3, [r8]
 8015656:	b17b      	cbz	r3, 8015678 <rmw_wait+0x184>
 8015658:	2400      	movs	r4, #0
 801565a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801565e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015662:	f7f8 fc11 	bl	800de88 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015666:	2800      	cmp	r0, #0
 8015668:	d051      	beq.n	801570e <rmw_wait+0x21a>
 801566a:	f8d8 3000 	ldr.w	r3, [r8]
 801566e:	3401      	adds	r4, #1
 8015670:	42a3      	cmp	r3, r4
 8015672:	f04f 0701 	mov.w	r7, #1
 8015676:	d8f0      	bhi.n	801565a <rmw_wait+0x166>
 8015678:	b1dd      	cbz	r5, 80156b2 <rmw_wait+0x1be>
 801567a:	682b      	ldr	r3, [r5, #0]
 801567c:	b1cb      	cbz	r3, 80156b2 <rmw_wait+0x1be>
 801567e:	2400      	movs	r4, #0
 8015680:	686b      	ldr	r3, [r5, #4]
 8015682:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015686:	f7f8 fbff 	bl	800de88 <rmw_uxrce_find_static_input_buffer_by_owner>
 801568a:	b158      	cbz	r0, 80156a4 <rmw_wait+0x1b0>
 801568c:	682b      	ldr	r3, [r5, #0]
 801568e:	3401      	adds	r4, #1
 8015690:	42a3      	cmp	r3, r4
 8015692:	d969      	bls.n	8015768 <rmw_wait+0x274>
 8015694:	686b      	ldr	r3, [r5, #4]
 8015696:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801569a:	2701      	movs	r7, #1
 801569c:	f7f8 fbf4 	bl	800de88 <rmw_uxrce_find_static_input_buffer_by_owner>
 80156a0:	2800      	cmp	r0, #0
 80156a2:	d1f3      	bne.n	801568c <rmw_wait+0x198>
 80156a4:	e9d5 3200 	ldrd	r3, r2, [r5]
 80156a8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80156ac:	3401      	adds	r4, #1
 80156ae:	42a3      	cmp	r3, r4
 80156b0:	d8e6      	bhi.n	8015680 <rmw_wait+0x18c>
 80156b2:	b1a6      	cbz	r6, 80156de <rmw_wait+0x1ea>
 80156b4:	6834      	ldr	r4, [r6, #0]
 80156b6:	b194      	cbz	r4, 80156de <rmw_wait+0x1ea>
 80156b8:	2300      	movs	r3, #0
 80156ba:	461d      	mov	r5, r3
 80156bc:	e004      	b.n	80156c8 <rmw_wait+0x1d4>
 80156be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80156c2:	3301      	adds	r3, #1
 80156c4:	42a3      	cmp	r3, r4
 80156c6:	d00a      	beq.n	80156de <rmw_wait+0x1ea>
 80156c8:	6870      	ldr	r0, [r6, #4]
 80156ca:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80156ce:	7c0a      	ldrb	r2, [r1, #16]
 80156d0:	2a00      	cmp	r2, #0
 80156d2:	d0f4      	beq.n	80156be <rmw_wait+0x1ca>
 80156d4:	3301      	adds	r3, #1
 80156d6:	42a3      	cmp	r3, r4
 80156d8:	740d      	strb	r5, [r1, #16]
 80156da:	4617      	mov	r7, r2
 80156dc:	d1f4      	bne.n	80156c8 <rmw_wait+0x1d4>
 80156de:	2f00      	cmp	r7, #0
 80156e0:	d03e      	beq.n	8015760 <rmw_wait+0x26c>
 80156e2:	2000      	movs	r0, #0
 80156e4:	b009      	add	sp, #36	@ 0x24
 80156e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80156ea:	68a0      	ldr	r0, [r4, #8]
 80156ec:	2100      	movs	r1, #0
 80156ee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80156f2:	f7f9 fd53 	bl	800f19c <uxr_run_session_timeout>
 80156f6:	6864      	ldr	r4, [r4, #4]
 80156f8:	2c00      	cmp	r4, #0
 80156fa:	d1f6      	bne.n	80156ea <rmw_wait+0x1f6>
 80156fc:	e78c      	b.n	8015618 <rmw_wait+0x124>
 80156fe:	e9d9 3200 	ldrd	r3, r2, [r9]
 8015702:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015706:	3401      	adds	r4, #1
 8015708:	42a3      	cmp	r3, r4
 801570a:	d890      	bhi.n	801562e <rmw_wait+0x13a>
 801570c:	e79e      	b.n	801564c <rmw_wait+0x158>
 801570e:	e9d8 3200 	ldrd	r3, r2, [r8]
 8015712:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015716:	3401      	adds	r4, #1
 8015718:	429c      	cmp	r4, r3
 801571a:	d39e      	bcc.n	801565a <rmw_wait+0x166>
 801571c:	e7ac      	b.n	8015678 <rmw_wait+0x184>
 801571e:	2b00      	cmp	r3, #0
 8015720:	f47f aef3 	bne.w	801550a <rmw_wait+0x16>
 8015724:	2800      	cmp	r0, #0
 8015726:	f47f aef0 	bne.w	801550a <rmw_wait+0x16>
 801572a:	2900      	cmp	r1, #0
 801572c:	f47f aeed 	bne.w	801550a <rmw_wait+0x16>
 8015730:	e7d7      	b.n	80156e2 <rmw_wait+0x1ee>
 8015732:	4639      	mov	r1, r7
 8015734:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015738:	f7f9 fd4a 	bl	800f1d0 <uxr_run_session_until_data>
 801573c:	6864      	ldr	r4, [r4, #4]
 801573e:	2c00      	cmp	r4, #0
 8015740:	f47f af5f 	bne.w	8015602 <rmw_wait+0x10e>
 8015744:	e768      	b.n	8015618 <rmw_wait+0x124>
 8015746:	f1b8 0f00 	cmp.w	r8, #0
 801574a:	d032      	beq.n	80157b2 <rmw_wait+0x2be>
 801574c:	f8d8 3000 	ldr.w	r3, [r8]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d181      	bne.n	8015658 <rmw_wait+0x164>
 8015754:	461f      	mov	r7, r3
 8015756:	2d00      	cmp	r5, #0
 8015758:	d18f      	bne.n	801567a <rmw_wait+0x186>
 801575a:	462f      	mov	r7, r5
 801575c:	2e00      	cmp	r6, #0
 801575e:	d1a9      	bne.n	80156b4 <rmw_wait+0x1c0>
 8015760:	2002      	movs	r0, #2
 8015762:	b009      	add	sp, #36	@ 0x24
 8015764:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015768:	2e00      	cmp	r6, #0
 801576a:	d0ba      	beq.n	80156e2 <rmw_wait+0x1ee>
 801576c:	6834      	ldr	r4, [r6, #0]
 801576e:	2701      	movs	r7, #1
 8015770:	2c00      	cmp	r4, #0
 8015772:	d1a1      	bne.n	80156b8 <rmw_wait+0x1c4>
 8015774:	e7b5      	b.n	80156e2 <rmw_wait+0x1ee>
 8015776:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801577a:	f7ff f9d5 	bl	8014b28 <rmw_time_total_nsec>
 801577e:	2300      	movs	r3, #0
 8015780:	4a13      	ldr	r2, [pc, #76]	@ (80157d0 <rmw_wait+0x2dc>)
 8015782:	f7ea ffc1 	bl	8000708 <__aeabi_uldivmod>
 8015786:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801578a:	f171 0300 	sbcs.w	r3, r1, #0
 801578e:	4607      	mov	r7, r0
 8015790:	bfa8      	it	ge
 8015792:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8015796:	e6c9      	b.n	801552c <rmw_wait+0x38>
 8015798:	f1b8 0f00 	cmp.w	r8, #0
 801579c:	d009      	beq.n	80157b2 <rmw_wait+0x2be>
 801579e:	f8d8 3000 	ldr.w	r3, [r8]
 80157a2:	464f      	mov	r7, r9
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	f47f af57 	bne.w	8015658 <rmw_wait+0x164>
 80157aa:	2d00      	cmp	r5, #0
 80157ac:	f47f af65 	bne.w	801567a <rmw_wait+0x186>
 80157b0:	e7d3      	b.n	801575a <rmw_wait+0x266>
 80157b2:	b17d      	cbz	r5, 80157d4 <rmw_wait+0x2e0>
 80157b4:	682b      	ldr	r3, [r5, #0]
 80157b6:	4647      	mov	r7, r8
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	f47f af60 	bne.w	801567e <rmw_wait+0x18a>
 80157be:	2e00      	cmp	r6, #0
 80157c0:	f47f af78 	bne.w	80156b4 <rmw_wait+0x1c0>
 80157c4:	e7cc      	b.n	8015760 <rmw_wait+0x26c>
 80157c6:	bf00      	nop
 80157c8:	08018548 	.word	0x08018548
 80157cc:	2000ae1c 	.word	0x2000ae1c
 80157d0:	000f4240 	.word	0x000f4240
 80157d4:	2e00      	cmp	r6, #0
 80157d6:	d0c3      	beq.n	8015760 <rmw_wait+0x26c>
 80157d8:	6834      	ldr	r4, [r6, #0]
 80157da:	462f      	mov	r7, r5
 80157dc:	2c00      	cmp	r4, #0
 80157de:	f47f af6b 	bne.w	80156b8 <rmw_wait+0x1c4>
 80157e2:	e7bd      	b.n	8015760 <rmw_wait+0x26c>

080157e4 <rmw_create_wait_set>:
 80157e4:	b508      	push	{r3, lr}
 80157e6:	4803      	ldr	r0, [pc, #12]	@ (80157f4 <rmw_create_wait_set+0x10>)
 80157e8:	f7ff fbfe 	bl	8014fe8 <get_memory>
 80157ec:	b108      	cbz	r0, 80157f2 <rmw_create_wait_set+0xe>
 80157ee:	6880      	ldr	r0, [r0, #8]
 80157f0:	3010      	adds	r0, #16
 80157f2:	bd08      	pop	{r3, pc}
 80157f4:	2000ae5c 	.word	0x2000ae5c

080157f8 <rmw_destroy_wait_set>:
 80157f8:	b508      	push	{r3, lr}
 80157fa:	4b08      	ldr	r3, [pc, #32]	@ (801581c <rmw_destroy_wait_set+0x24>)
 80157fc:	6819      	ldr	r1, [r3, #0]
 80157fe:	b911      	cbnz	r1, 8015806 <rmw_destroy_wait_set+0xe>
 8015800:	e00a      	b.n	8015818 <rmw_destroy_wait_set+0x20>
 8015802:	6849      	ldr	r1, [r1, #4]
 8015804:	b141      	cbz	r1, 8015818 <rmw_destroy_wait_set+0x20>
 8015806:	688b      	ldr	r3, [r1, #8]
 8015808:	3310      	adds	r3, #16
 801580a:	4298      	cmp	r0, r3
 801580c:	d1f9      	bne.n	8015802 <rmw_destroy_wait_set+0xa>
 801580e:	4803      	ldr	r0, [pc, #12]	@ (801581c <rmw_destroy_wait_set+0x24>)
 8015810:	f7ff fbfa 	bl	8015008 <put_memory>
 8015814:	2000      	movs	r0, #0
 8015816:	bd08      	pop	{r3, pc}
 8015818:	2001      	movs	r0, #1
 801581a:	bd08      	pop	{r3, pc}
 801581c:	2000ae5c 	.word	0x2000ae5c

08015820 <rmw_uros_epoch_nanos>:
 8015820:	4b05      	ldr	r3, [pc, #20]	@ (8015838 <rmw_uros_epoch_nanos+0x18>)
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	b123      	cbz	r3, 8015830 <rmw_uros_epoch_nanos+0x10>
 8015826:	6898      	ldr	r0, [r3, #8]
 8015828:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801582c:	f7f9 b926 	b.w	800ea7c <uxr_epoch_nanos>
 8015830:	2000      	movs	r0, #0
 8015832:	2100      	movs	r1, #0
 8015834:	4770      	bx	lr
 8015836:	bf00      	nop
 8015838:	2000ae1c 	.word	0x2000ae1c

0801583c <ucdr_serialize_endian_array_char>:
 801583c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015840:	4619      	mov	r1, r3
 8015842:	461f      	mov	r7, r3
 8015844:	4605      	mov	r5, r0
 8015846:	4690      	mov	r8, r2
 8015848:	f7f6 f84e 	bl	800b8e8 <ucdr_check_buffer_available_for>
 801584c:	b9e0      	cbnz	r0, 8015888 <ucdr_serialize_endian_array_char+0x4c>
 801584e:	463e      	mov	r6, r7
 8015850:	e009      	b.n	8015866 <ucdr_serialize_endian_array_char+0x2a>
 8015852:	68a8      	ldr	r0, [r5, #8]
 8015854:	f001 ff59 	bl	801770a <memcpy>
 8015858:	68ab      	ldr	r3, [r5, #8]
 801585a:	6928      	ldr	r0, [r5, #16]
 801585c:	4423      	add	r3, r4
 801585e:	4420      	add	r0, r4
 8015860:	1b36      	subs	r6, r6, r4
 8015862:	60ab      	str	r3, [r5, #8]
 8015864:	6128      	str	r0, [r5, #16]
 8015866:	4631      	mov	r1, r6
 8015868:	2201      	movs	r2, #1
 801586a:	4628      	mov	r0, r5
 801586c:	f7f6 f8c4 	bl	800b9f8 <ucdr_check_final_buffer_behavior_array>
 8015870:	1bb9      	subs	r1, r7, r6
 8015872:	4441      	add	r1, r8
 8015874:	4604      	mov	r4, r0
 8015876:	4602      	mov	r2, r0
 8015878:	2800      	cmp	r0, #0
 801587a:	d1ea      	bne.n	8015852 <ucdr_serialize_endian_array_char+0x16>
 801587c:	2301      	movs	r3, #1
 801587e:	7da8      	ldrb	r0, [r5, #22]
 8015880:	756b      	strb	r3, [r5, #21]
 8015882:	4058      	eors	r0, r3
 8015884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015888:	463a      	mov	r2, r7
 801588a:	68a8      	ldr	r0, [r5, #8]
 801588c:	4641      	mov	r1, r8
 801588e:	f001 ff3c 	bl	801770a <memcpy>
 8015892:	68aa      	ldr	r2, [r5, #8]
 8015894:	692b      	ldr	r3, [r5, #16]
 8015896:	443a      	add	r2, r7
 8015898:	443b      	add	r3, r7
 801589a:	60aa      	str	r2, [r5, #8]
 801589c:	612b      	str	r3, [r5, #16]
 801589e:	e7ed      	b.n	801587c <ucdr_serialize_endian_array_char+0x40>

080158a0 <ucdr_deserialize_endian_array_char>:
 80158a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158a4:	4619      	mov	r1, r3
 80158a6:	461f      	mov	r7, r3
 80158a8:	4605      	mov	r5, r0
 80158aa:	4690      	mov	r8, r2
 80158ac:	f7f6 f81c 	bl	800b8e8 <ucdr_check_buffer_available_for>
 80158b0:	b9e0      	cbnz	r0, 80158ec <ucdr_deserialize_endian_array_char+0x4c>
 80158b2:	463e      	mov	r6, r7
 80158b4:	e009      	b.n	80158ca <ucdr_deserialize_endian_array_char+0x2a>
 80158b6:	68a9      	ldr	r1, [r5, #8]
 80158b8:	f001 ff27 	bl	801770a <memcpy>
 80158bc:	68ab      	ldr	r3, [r5, #8]
 80158be:	6928      	ldr	r0, [r5, #16]
 80158c0:	4423      	add	r3, r4
 80158c2:	4420      	add	r0, r4
 80158c4:	1b36      	subs	r6, r6, r4
 80158c6:	60ab      	str	r3, [r5, #8]
 80158c8:	6128      	str	r0, [r5, #16]
 80158ca:	2201      	movs	r2, #1
 80158cc:	4631      	mov	r1, r6
 80158ce:	4628      	mov	r0, r5
 80158d0:	f7f6 f892 	bl	800b9f8 <ucdr_check_final_buffer_behavior_array>
 80158d4:	4604      	mov	r4, r0
 80158d6:	1bb8      	subs	r0, r7, r6
 80158d8:	4440      	add	r0, r8
 80158da:	4622      	mov	r2, r4
 80158dc:	2c00      	cmp	r4, #0
 80158de:	d1ea      	bne.n	80158b6 <ucdr_deserialize_endian_array_char+0x16>
 80158e0:	2301      	movs	r3, #1
 80158e2:	7da8      	ldrb	r0, [r5, #22]
 80158e4:	756b      	strb	r3, [r5, #21]
 80158e6:	4058      	eors	r0, r3
 80158e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158ec:	463a      	mov	r2, r7
 80158ee:	68a9      	ldr	r1, [r5, #8]
 80158f0:	4640      	mov	r0, r8
 80158f2:	f001 ff0a 	bl	801770a <memcpy>
 80158f6:	68aa      	ldr	r2, [r5, #8]
 80158f8:	692b      	ldr	r3, [r5, #16]
 80158fa:	443a      	add	r2, r7
 80158fc:	443b      	add	r3, r7
 80158fe:	60aa      	str	r2, [r5, #8]
 8015900:	612b      	str	r3, [r5, #16]
 8015902:	e7ed      	b.n	80158e0 <ucdr_deserialize_endian_array_char+0x40>

08015904 <ucdr_serialize_array_uint8_t>:
 8015904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015908:	4688      	mov	r8, r1
 801590a:	4611      	mov	r1, r2
 801590c:	4617      	mov	r7, r2
 801590e:	4605      	mov	r5, r0
 8015910:	f7f5 ffea 	bl	800b8e8 <ucdr_check_buffer_available_for>
 8015914:	b9e0      	cbnz	r0, 8015950 <ucdr_serialize_array_uint8_t+0x4c>
 8015916:	463e      	mov	r6, r7
 8015918:	e009      	b.n	801592e <ucdr_serialize_array_uint8_t+0x2a>
 801591a:	68a8      	ldr	r0, [r5, #8]
 801591c:	f001 fef5 	bl	801770a <memcpy>
 8015920:	68aa      	ldr	r2, [r5, #8]
 8015922:	692b      	ldr	r3, [r5, #16]
 8015924:	4422      	add	r2, r4
 8015926:	4423      	add	r3, r4
 8015928:	1b36      	subs	r6, r6, r4
 801592a:	60aa      	str	r2, [r5, #8]
 801592c:	612b      	str	r3, [r5, #16]
 801592e:	4631      	mov	r1, r6
 8015930:	2201      	movs	r2, #1
 8015932:	4628      	mov	r0, r5
 8015934:	f7f6 f860 	bl	800b9f8 <ucdr_check_final_buffer_behavior_array>
 8015938:	1bb9      	subs	r1, r7, r6
 801593a:	4441      	add	r1, r8
 801593c:	4604      	mov	r4, r0
 801593e:	4602      	mov	r2, r0
 8015940:	2800      	cmp	r0, #0
 8015942:	d1ea      	bne.n	801591a <ucdr_serialize_array_uint8_t+0x16>
 8015944:	2301      	movs	r3, #1
 8015946:	7da8      	ldrb	r0, [r5, #22]
 8015948:	756b      	strb	r3, [r5, #21]
 801594a:	4058      	eors	r0, r3
 801594c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015950:	463a      	mov	r2, r7
 8015952:	68a8      	ldr	r0, [r5, #8]
 8015954:	4641      	mov	r1, r8
 8015956:	f001 fed8 	bl	801770a <memcpy>
 801595a:	68aa      	ldr	r2, [r5, #8]
 801595c:	692b      	ldr	r3, [r5, #16]
 801595e:	443a      	add	r2, r7
 8015960:	443b      	add	r3, r7
 8015962:	60aa      	str	r2, [r5, #8]
 8015964:	612b      	str	r3, [r5, #16]
 8015966:	e7ed      	b.n	8015944 <ucdr_serialize_array_uint8_t+0x40>

08015968 <ucdr_serialize_endian_array_uint8_t>:
 8015968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801596c:	4619      	mov	r1, r3
 801596e:	461f      	mov	r7, r3
 8015970:	4605      	mov	r5, r0
 8015972:	4690      	mov	r8, r2
 8015974:	f7f5 ffb8 	bl	800b8e8 <ucdr_check_buffer_available_for>
 8015978:	b9e0      	cbnz	r0, 80159b4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801597a:	463e      	mov	r6, r7
 801597c:	e009      	b.n	8015992 <ucdr_serialize_endian_array_uint8_t+0x2a>
 801597e:	68a8      	ldr	r0, [r5, #8]
 8015980:	f001 fec3 	bl	801770a <memcpy>
 8015984:	68ab      	ldr	r3, [r5, #8]
 8015986:	6928      	ldr	r0, [r5, #16]
 8015988:	4423      	add	r3, r4
 801598a:	4420      	add	r0, r4
 801598c:	1b36      	subs	r6, r6, r4
 801598e:	60ab      	str	r3, [r5, #8]
 8015990:	6128      	str	r0, [r5, #16]
 8015992:	4631      	mov	r1, r6
 8015994:	2201      	movs	r2, #1
 8015996:	4628      	mov	r0, r5
 8015998:	f7f6 f82e 	bl	800b9f8 <ucdr_check_final_buffer_behavior_array>
 801599c:	1bb9      	subs	r1, r7, r6
 801599e:	4441      	add	r1, r8
 80159a0:	4604      	mov	r4, r0
 80159a2:	4602      	mov	r2, r0
 80159a4:	2800      	cmp	r0, #0
 80159a6:	d1ea      	bne.n	801597e <ucdr_serialize_endian_array_uint8_t+0x16>
 80159a8:	2301      	movs	r3, #1
 80159aa:	7da8      	ldrb	r0, [r5, #22]
 80159ac:	756b      	strb	r3, [r5, #21]
 80159ae:	4058      	eors	r0, r3
 80159b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159b4:	463a      	mov	r2, r7
 80159b6:	68a8      	ldr	r0, [r5, #8]
 80159b8:	4641      	mov	r1, r8
 80159ba:	f001 fea6 	bl	801770a <memcpy>
 80159be:	68aa      	ldr	r2, [r5, #8]
 80159c0:	692b      	ldr	r3, [r5, #16]
 80159c2:	443a      	add	r2, r7
 80159c4:	443b      	add	r3, r7
 80159c6:	60aa      	str	r2, [r5, #8]
 80159c8:	612b      	str	r3, [r5, #16]
 80159ca:	e7ed      	b.n	80159a8 <ucdr_serialize_endian_array_uint8_t+0x40>

080159cc <ucdr_deserialize_array_uint8_t>:
 80159cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159d0:	4688      	mov	r8, r1
 80159d2:	4611      	mov	r1, r2
 80159d4:	4617      	mov	r7, r2
 80159d6:	4605      	mov	r5, r0
 80159d8:	f7f5 ff86 	bl	800b8e8 <ucdr_check_buffer_available_for>
 80159dc:	b9e0      	cbnz	r0, 8015a18 <ucdr_deserialize_array_uint8_t+0x4c>
 80159de:	463e      	mov	r6, r7
 80159e0:	e009      	b.n	80159f6 <ucdr_deserialize_array_uint8_t+0x2a>
 80159e2:	68a9      	ldr	r1, [r5, #8]
 80159e4:	f001 fe91 	bl	801770a <memcpy>
 80159e8:	68aa      	ldr	r2, [r5, #8]
 80159ea:	692b      	ldr	r3, [r5, #16]
 80159ec:	4422      	add	r2, r4
 80159ee:	4423      	add	r3, r4
 80159f0:	1b36      	subs	r6, r6, r4
 80159f2:	60aa      	str	r2, [r5, #8]
 80159f4:	612b      	str	r3, [r5, #16]
 80159f6:	2201      	movs	r2, #1
 80159f8:	4631      	mov	r1, r6
 80159fa:	4628      	mov	r0, r5
 80159fc:	f7f5 fffc 	bl	800b9f8 <ucdr_check_final_buffer_behavior_array>
 8015a00:	4604      	mov	r4, r0
 8015a02:	1bb8      	subs	r0, r7, r6
 8015a04:	4440      	add	r0, r8
 8015a06:	4622      	mov	r2, r4
 8015a08:	2c00      	cmp	r4, #0
 8015a0a:	d1ea      	bne.n	80159e2 <ucdr_deserialize_array_uint8_t+0x16>
 8015a0c:	2301      	movs	r3, #1
 8015a0e:	7da8      	ldrb	r0, [r5, #22]
 8015a10:	756b      	strb	r3, [r5, #21]
 8015a12:	4058      	eors	r0, r3
 8015a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a18:	463a      	mov	r2, r7
 8015a1a:	68a9      	ldr	r1, [r5, #8]
 8015a1c:	4640      	mov	r0, r8
 8015a1e:	f001 fe74 	bl	801770a <memcpy>
 8015a22:	68aa      	ldr	r2, [r5, #8]
 8015a24:	692b      	ldr	r3, [r5, #16]
 8015a26:	443a      	add	r2, r7
 8015a28:	443b      	add	r3, r7
 8015a2a:	60aa      	str	r2, [r5, #8]
 8015a2c:	612b      	str	r3, [r5, #16]
 8015a2e:	e7ed      	b.n	8015a0c <ucdr_deserialize_array_uint8_t+0x40>

08015a30 <ucdr_deserialize_endian_array_uint8_t>:
 8015a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a34:	4619      	mov	r1, r3
 8015a36:	461f      	mov	r7, r3
 8015a38:	4605      	mov	r5, r0
 8015a3a:	4690      	mov	r8, r2
 8015a3c:	f7f5 ff54 	bl	800b8e8 <ucdr_check_buffer_available_for>
 8015a40:	b9e0      	cbnz	r0, 8015a7c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8015a42:	463e      	mov	r6, r7
 8015a44:	e009      	b.n	8015a5a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8015a46:	68a9      	ldr	r1, [r5, #8]
 8015a48:	f001 fe5f 	bl	801770a <memcpy>
 8015a4c:	68ab      	ldr	r3, [r5, #8]
 8015a4e:	6928      	ldr	r0, [r5, #16]
 8015a50:	4423      	add	r3, r4
 8015a52:	4420      	add	r0, r4
 8015a54:	1b36      	subs	r6, r6, r4
 8015a56:	60ab      	str	r3, [r5, #8]
 8015a58:	6128      	str	r0, [r5, #16]
 8015a5a:	2201      	movs	r2, #1
 8015a5c:	4631      	mov	r1, r6
 8015a5e:	4628      	mov	r0, r5
 8015a60:	f7f5 ffca 	bl	800b9f8 <ucdr_check_final_buffer_behavior_array>
 8015a64:	4604      	mov	r4, r0
 8015a66:	1bb8      	subs	r0, r7, r6
 8015a68:	4440      	add	r0, r8
 8015a6a:	4622      	mov	r2, r4
 8015a6c:	2c00      	cmp	r4, #0
 8015a6e:	d1ea      	bne.n	8015a46 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8015a70:	2301      	movs	r3, #1
 8015a72:	7da8      	ldrb	r0, [r5, #22]
 8015a74:	756b      	strb	r3, [r5, #21]
 8015a76:	4058      	eors	r0, r3
 8015a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a7c:	463a      	mov	r2, r7
 8015a7e:	68a9      	ldr	r1, [r5, #8]
 8015a80:	4640      	mov	r0, r8
 8015a82:	f001 fe42 	bl	801770a <memcpy>
 8015a86:	68aa      	ldr	r2, [r5, #8]
 8015a88:	692b      	ldr	r3, [r5, #16]
 8015a8a:	443a      	add	r2, r7
 8015a8c:	443b      	add	r3, r7
 8015a8e:	60aa      	str	r2, [r5, #8]
 8015a90:	612b      	str	r3, [r5, #16]
 8015a92:	e7ed      	b.n	8015a70 <ucdr_deserialize_endian_array_uint8_t+0x40>

08015a94 <ucdr_serialize_sequence_char>:
 8015a94:	b570      	push	{r4, r5, r6, lr}
 8015a96:	4615      	mov	r5, r2
 8015a98:	460e      	mov	r6, r1
 8015a9a:	7d01      	ldrb	r1, [r0, #20]
 8015a9c:	4604      	mov	r4, r0
 8015a9e:	f7f5 f8e3 	bl	800ac68 <ucdr_serialize_endian_uint32_t>
 8015aa2:	b90d      	cbnz	r5, 8015aa8 <ucdr_serialize_sequence_char+0x14>
 8015aa4:	2001      	movs	r0, #1
 8015aa6:	bd70      	pop	{r4, r5, r6, pc}
 8015aa8:	7d21      	ldrb	r1, [r4, #20]
 8015aaa:	462b      	mov	r3, r5
 8015aac:	4632      	mov	r2, r6
 8015aae:	4620      	mov	r0, r4
 8015ab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ab4:	f7ff bec2 	b.w	801583c <ucdr_serialize_endian_array_char>

08015ab8 <ucdr_deserialize_sequence_char>:
 8015ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015abc:	461d      	mov	r5, r3
 8015abe:	4616      	mov	r6, r2
 8015ac0:	460f      	mov	r7, r1
 8015ac2:	461a      	mov	r2, r3
 8015ac4:	7d01      	ldrb	r1, [r0, #20]
 8015ac6:	4604      	mov	r4, r0
 8015ac8:	f7f5 f9f6 	bl	800aeb8 <ucdr_deserialize_endian_uint32_t>
 8015acc:	682b      	ldr	r3, [r5, #0]
 8015ace:	429e      	cmp	r6, r3
 8015ad0:	bf3c      	itt	cc
 8015ad2:	2201      	movcc	r2, #1
 8015ad4:	75a2      	strbcc	r2, [r4, #22]
 8015ad6:	b913      	cbnz	r3, 8015ade <ucdr_deserialize_sequence_char+0x26>
 8015ad8:	2001      	movs	r0, #1
 8015ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ade:	7d21      	ldrb	r1, [r4, #20]
 8015ae0:	463a      	mov	r2, r7
 8015ae2:	4620      	mov	r0, r4
 8015ae4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ae8:	f7ff beda 	b.w	80158a0 <ucdr_deserialize_endian_array_char>

08015aec <ucdr_serialize_sequence_uint8_t>:
 8015aec:	b570      	push	{r4, r5, r6, lr}
 8015aee:	4615      	mov	r5, r2
 8015af0:	460e      	mov	r6, r1
 8015af2:	7d01      	ldrb	r1, [r0, #20]
 8015af4:	4604      	mov	r4, r0
 8015af6:	f7f5 f8b7 	bl	800ac68 <ucdr_serialize_endian_uint32_t>
 8015afa:	b90d      	cbnz	r5, 8015b00 <ucdr_serialize_sequence_uint8_t+0x14>
 8015afc:	2001      	movs	r0, #1
 8015afe:	bd70      	pop	{r4, r5, r6, pc}
 8015b00:	7d21      	ldrb	r1, [r4, #20]
 8015b02:	462b      	mov	r3, r5
 8015b04:	4632      	mov	r2, r6
 8015b06:	4620      	mov	r0, r4
 8015b08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b0c:	f7ff bf2c 	b.w	8015968 <ucdr_serialize_endian_array_uint8_t>

08015b10 <ucdr_deserialize_sequence_uint8_t>:
 8015b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b14:	461d      	mov	r5, r3
 8015b16:	4616      	mov	r6, r2
 8015b18:	460f      	mov	r7, r1
 8015b1a:	461a      	mov	r2, r3
 8015b1c:	7d01      	ldrb	r1, [r0, #20]
 8015b1e:	4604      	mov	r4, r0
 8015b20:	f7f5 f9ca 	bl	800aeb8 <ucdr_deserialize_endian_uint32_t>
 8015b24:	682b      	ldr	r3, [r5, #0]
 8015b26:	429e      	cmp	r6, r3
 8015b28:	bf3c      	itt	cc
 8015b2a:	2201      	movcc	r2, #1
 8015b2c:	75a2      	strbcc	r2, [r4, #22]
 8015b2e:	b913      	cbnz	r3, 8015b36 <ucdr_deserialize_sequence_uint8_t+0x26>
 8015b30:	2001      	movs	r0, #1
 8015b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b36:	7d21      	ldrb	r1, [r4, #20]
 8015b38:	463a      	mov	r2, r7
 8015b3a:	4620      	mov	r0, r4
 8015b3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015b40:	f7ff bf76 	b.w	8015a30 <ucdr_deserialize_endian_array_uint8_t>

08015b44 <ucdr_serialize_string>:
 8015b44:	b510      	push	{r4, lr}
 8015b46:	b082      	sub	sp, #8
 8015b48:	4604      	mov	r4, r0
 8015b4a:	4608      	mov	r0, r1
 8015b4c:	9101      	str	r1, [sp, #4]
 8015b4e:	f7ea fb71 	bl	8000234 <strlen>
 8015b52:	9901      	ldr	r1, [sp, #4]
 8015b54:	1c42      	adds	r2, r0, #1
 8015b56:	4620      	mov	r0, r4
 8015b58:	b002      	add	sp, #8
 8015b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b5e:	f7ff bf99 	b.w	8015a94 <ucdr_serialize_sequence_char>
 8015b62:	bf00      	nop

08015b64 <ucdr_deserialize_string>:
 8015b64:	b500      	push	{lr}
 8015b66:	b083      	sub	sp, #12
 8015b68:	ab01      	add	r3, sp, #4
 8015b6a:	f7ff ffa5 	bl	8015ab8 <ucdr_deserialize_sequence_char>
 8015b6e:	b003      	add	sp, #12
 8015b70:	f85d fb04 	ldr.w	pc, [sp], #4

08015b74 <uxr_init_input_best_effort_stream>:
 8015b74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015b78:	8003      	strh	r3, [r0, #0]
 8015b7a:	4770      	bx	lr

08015b7c <uxr_reset_input_best_effort_stream>:
 8015b7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015b80:	8003      	strh	r3, [r0, #0]
 8015b82:	4770      	bx	lr

08015b84 <uxr_receive_best_effort_message>:
 8015b84:	b538      	push	{r3, r4, r5, lr}
 8015b86:	4604      	mov	r4, r0
 8015b88:	8800      	ldrh	r0, [r0, #0]
 8015b8a:	460d      	mov	r5, r1
 8015b8c:	f000 fd42 	bl	8016614 <uxr_seq_num_cmp>
 8015b90:	4603      	mov	r3, r0
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8015b98:	bfb8      	it	lt
 8015b9a:	8025      	strhlt	r5, [r4, #0]
 8015b9c:	bd38      	pop	{r3, r4, r5, pc}
 8015b9e:	bf00      	nop

08015ba0 <on_full_input_buffer>:
 8015ba0:	b570      	push	{r4, r5, r6, lr}
 8015ba2:	4605      	mov	r5, r0
 8015ba4:	460c      	mov	r4, r1
 8015ba6:	682b      	ldr	r3, [r5, #0]
 8015ba8:	6809      	ldr	r1, [r1, #0]
 8015baa:	8920      	ldrh	r0, [r4, #8]
 8015bac:	6862      	ldr	r2, [r4, #4]
 8015bae:	fbb2 f2f0 	udiv	r2, r2, r0
 8015bb2:	eba3 0c01 	sub.w	ip, r3, r1
 8015bb6:	fbbc fcf2 	udiv	ip, ip, r2
 8015bba:	f10c 0c01 	add.w	ip, ip, #1
 8015bbe:	fa1f f38c 	uxth.w	r3, ip
 8015bc2:	fbb3 f6f0 	udiv	r6, r3, r0
 8015bc6:	fb00 3316 	mls	r3, r0, r6, r3
 8015bca:	b29b      	uxth	r3, r3
 8015bcc:	fb02 f303 	mul.w	r3, r2, r3
 8015bd0:	1d18      	adds	r0, r3, #4
 8015bd2:	4408      	add	r0, r1
 8015bd4:	7d26      	ldrb	r6, [r4, #20]
 8015bd6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8015bda:	b116      	cbz	r6, 8015be2 <on_full_input_buffer+0x42>
 8015bdc:	2600      	movs	r6, #0
 8015bde:	f840 6c04 	str.w	r6, [r0, #-4]
 8015be2:	2a03      	cmp	r2, #3
 8015be4:	d801      	bhi.n	8015bea <on_full_input_buffer+0x4a>
 8015be6:	2001      	movs	r0, #1
 8015be8:	bd70      	pop	{r4, r5, r6, pc}
 8015bea:	3308      	adds	r3, #8
 8015bec:	4419      	add	r1, r3
 8015bee:	4628      	mov	r0, r5
 8015bf0:	692b      	ldr	r3, [r5, #16]
 8015bf2:	3a04      	subs	r2, #4
 8015bf4:	f7f5 fec4 	bl	800b980 <ucdr_init_buffer_origin>
 8015bf8:	4628      	mov	r0, r5
 8015bfa:	4903      	ldr	r1, [pc, #12]	@ (8015c08 <on_full_input_buffer+0x68>)
 8015bfc:	4622      	mov	r2, r4
 8015bfe:	f7f5 fe9b 	bl	800b938 <ucdr_set_on_full_buffer_callback>
 8015c02:	2000      	movs	r0, #0
 8015c04:	bd70      	pop	{r4, r5, r6, pc}
 8015c06:	bf00      	nop
 8015c08:	08015ba1 	.word	0x08015ba1

08015c0c <uxr_init_input_reliable_stream>:
 8015c0c:	b500      	push	{lr}
 8015c0e:	e9c0 1200 	strd	r1, r2, [r0]
 8015c12:	f04f 0e00 	mov.w	lr, #0
 8015c16:	9a01      	ldr	r2, [sp, #4]
 8015c18:	8103      	strh	r3, [r0, #8]
 8015c1a:	6102      	str	r2, [r0, #16]
 8015c1c:	f880 e014 	strb.w	lr, [r0, #20]
 8015c20:	b1d3      	cbz	r3, 8015c58 <uxr_init_input_reliable_stream+0x4c>
 8015c22:	f8c1 e000 	str.w	lr, [r1]
 8015c26:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015c2a:	f1bc 0f01 	cmp.w	ip, #1
 8015c2e:	d913      	bls.n	8015c58 <uxr_init_input_reliable_stream+0x4c>
 8015c30:	2301      	movs	r3, #1
 8015c32:	fbb3 f1fc 	udiv	r1, r3, ip
 8015c36:	fb0c 3111 	mls	r1, ip, r1, r3
 8015c3a:	b289      	uxth	r1, r1
 8015c3c:	6842      	ldr	r2, [r0, #4]
 8015c3e:	fbb2 f2fc 	udiv	r2, r2, ip
 8015c42:	fb01 f202 	mul.w	r2, r1, r2
 8015c46:	6801      	ldr	r1, [r0, #0]
 8015c48:	f841 e002 	str.w	lr, [r1, r2]
 8015c4c:	3301      	adds	r3, #1
 8015c4e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015c52:	b29b      	uxth	r3, r3
 8015c54:	459c      	cmp	ip, r3
 8015c56:	d8ec      	bhi.n	8015c32 <uxr_init_input_reliable_stream+0x26>
 8015c58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015c5c:	60c3      	str	r3, [r0, #12]
 8015c5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015c62:	bf00      	nop

08015c64 <uxr_reset_input_reliable_stream>:
 8015c64:	8901      	ldrh	r1, [r0, #8]
 8015c66:	b1e9      	cbz	r1, 8015ca4 <uxr_reset_input_reliable_stream+0x40>
 8015c68:	f04f 0c00 	mov.w	ip, #0
 8015c6c:	b500      	push	{lr}
 8015c6e:	4663      	mov	r3, ip
 8015c70:	46e6      	mov	lr, ip
 8015c72:	fbb3 f2f1 	udiv	r2, r3, r1
 8015c76:	fb01 3312 	mls	r3, r1, r2, r3
 8015c7a:	b29b      	uxth	r3, r3
 8015c7c:	6842      	ldr	r2, [r0, #4]
 8015c7e:	fbb2 f2f1 	udiv	r2, r2, r1
 8015c82:	fb02 f303 	mul.w	r3, r2, r3
 8015c86:	6802      	ldr	r2, [r0, #0]
 8015c88:	f842 e003 	str.w	lr, [r2, r3]
 8015c8c:	f10c 0c01 	add.w	ip, ip, #1
 8015c90:	8901      	ldrh	r1, [r0, #8]
 8015c92:	fa1f f38c 	uxth.w	r3, ip
 8015c96:	4299      	cmp	r1, r3
 8015c98:	d8eb      	bhi.n	8015c72 <uxr_reset_input_reliable_stream+0xe>
 8015c9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015c9e:	60c3      	str	r3, [r0, #12]
 8015ca0:	f85d fb04 	ldr.w	pc, [sp], #4
 8015ca4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015ca8:	60c3      	str	r3, [r0, #12]
 8015caa:	4770      	bx	lr

08015cac <uxr_receive_reliable_message>:
 8015cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015cb0:	4604      	mov	r4, r0
 8015cb2:	460d      	mov	r5, r1
 8015cb4:	8901      	ldrh	r1, [r0, #8]
 8015cb6:	8980      	ldrh	r0, [r0, #12]
 8015cb8:	4690      	mov	r8, r2
 8015cba:	461f      	mov	r7, r3
 8015cbc:	f000 fca2 	bl	8016604 <uxr_seq_num_add>
 8015cc0:	4629      	mov	r1, r5
 8015cc2:	4606      	mov	r6, r0
 8015cc4:	89a0      	ldrh	r0, [r4, #12]
 8015cc6:	f000 fca5 	bl	8016614 <uxr_seq_num_cmp>
 8015cca:	2800      	cmp	r0, #0
 8015ccc:	db0a      	blt.n	8015ce4 <uxr_receive_reliable_message+0x38>
 8015cce:	2600      	movs	r6, #0
 8015cd0:	89e0      	ldrh	r0, [r4, #14]
 8015cd2:	4629      	mov	r1, r5
 8015cd4:	f000 fc9e 	bl	8016614 <uxr_seq_num_cmp>
 8015cd8:	2800      	cmp	r0, #0
 8015cda:	da00      	bge.n	8015cde <uxr_receive_reliable_message+0x32>
 8015cdc:	81e5      	strh	r5, [r4, #14]
 8015cde:	4630      	mov	r0, r6
 8015ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ce4:	4630      	mov	r0, r6
 8015ce6:	4629      	mov	r1, r5
 8015ce8:	f000 fc94 	bl	8016614 <uxr_seq_num_cmp>
 8015cec:	2800      	cmp	r0, #0
 8015cee:	dbee      	blt.n	8015cce <uxr_receive_reliable_message+0x22>
 8015cf0:	6923      	ldr	r3, [r4, #16]
 8015cf2:	4640      	mov	r0, r8
 8015cf4:	4798      	blx	r3
 8015cf6:	2101      	movs	r1, #1
 8015cf8:	4681      	mov	r9, r0
 8015cfa:	89a0      	ldrh	r0, [r4, #12]
 8015cfc:	f000 fc82 	bl	8016604 <uxr_seq_num_add>
 8015d00:	f1b9 0f00 	cmp.w	r9, #0
 8015d04:	d101      	bne.n	8015d0a <uxr_receive_reliable_message+0x5e>
 8015d06:	4285      	cmp	r5, r0
 8015d08:	d047      	beq.n	8015d9a <uxr_receive_reliable_message+0xee>
 8015d0a:	8922      	ldrh	r2, [r4, #8]
 8015d0c:	fbb5 f0f2 	udiv	r0, r5, r2
 8015d10:	fb02 5010 	mls	r0, r2, r0, r5
 8015d14:	b280      	uxth	r0, r0
 8015d16:	6863      	ldr	r3, [r4, #4]
 8015d18:	fbb3 f3f2 	udiv	r3, r3, r2
 8015d1c:	fb00 f303 	mul.w	r3, r0, r3
 8015d20:	6820      	ldr	r0, [r4, #0]
 8015d22:	3304      	adds	r3, #4
 8015d24:	4418      	add	r0, r3
 8015d26:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d1cf      	bne.n	8015cce <uxr_receive_reliable_message+0x22>
 8015d2e:	4641      	mov	r1, r8
 8015d30:	463a      	mov	r2, r7
 8015d32:	f001 fcea 	bl	801770a <memcpy>
 8015d36:	8921      	ldrh	r1, [r4, #8]
 8015d38:	fbb5 f2f1 	udiv	r2, r5, r1
 8015d3c:	fb01 5212 	mls	r2, r1, r2, r5
 8015d40:	b292      	uxth	r2, r2
 8015d42:	6863      	ldr	r3, [r4, #4]
 8015d44:	fbb3 f3f1 	udiv	r3, r3, r1
 8015d48:	fb02 f303 	mul.w	r3, r2, r3
 8015d4c:	6822      	ldr	r2, [r4, #0]
 8015d4e:	50d7      	str	r7, [r2, r3]
 8015d50:	9a08      	ldr	r2, [sp, #32]
 8015d52:	2301      	movs	r3, #1
 8015d54:	7013      	strb	r3, [r2, #0]
 8015d56:	f1b9 0f00 	cmp.w	r9, #0
 8015d5a:	d0b8      	beq.n	8015cce <uxr_receive_reliable_message+0x22>
 8015d5c:	89a6      	ldrh	r6, [r4, #12]
 8015d5e:	4630      	mov	r0, r6
 8015d60:	2101      	movs	r1, #1
 8015d62:	f000 fc4f 	bl	8016604 <uxr_seq_num_add>
 8015d66:	8922      	ldrh	r2, [r4, #8]
 8015d68:	6863      	ldr	r3, [r4, #4]
 8015d6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8015d6e:	4606      	mov	r6, r0
 8015d70:	fbb0 f0f2 	udiv	r0, r0, r2
 8015d74:	fb02 6010 	mls	r0, r2, r0, r6
 8015d78:	b280      	uxth	r0, r0
 8015d7a:	fb00 f303 	mul.w	r3, r0, r3
 8015d7e:	6820      	ldr	r0, [r4, #0]
 8015d80:	3304      	adds	r3, #4
 8015d82:	4418      	add	r0, r3
 8015d84:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d0a0      	beq.n	8015cce <uxr_receive_reliable_message+0x22>
 8015d8c:	6923      	ldr	r3, [r4, #16]
 8015d8e:	4798      	blx	r3
 8015d90:	2802      	cmp	r0, #2
 8015d92:	d008      	beq.n	8015da6 <uxr_receive_reliable_message+0xfa>
 8015d94:	2801      	cmp	r0, #1
 8015d96:	d0e2      	beq.n	8015d5e <uxr_receive_reliable_message+0xb2>
 8015d98:	e799      	b.n	8015cce <uxr_receive_reliable_message+0x22>
 8015d9a:	9b08      	ldr	r3, [sp, #32]
 8015d9c:	81a5      	strh	r5, [r4, #12]
 8015d9e:	2601      	movs	r6, #1
 8015da0:	f883 9000 	strb.w	r9, [r3]
 8015da4:	e794      	b.n	8015cd0 <uxr_receive_reliable_message+0x24>
 8015da6:	2601      	movs	r6, #1
 8015da8:	e792      	b.n	8015cd0 <uxr_receive_reliable_message+0x24>
 8015daa:	bf00      	nop

08015dac <uxr_next_input_reliable_buffer_available>:
 8015dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015db0:	4604      	mov	r4, r0
 8015db2:	460f      	mov	r7, r1
 8015db4:	8980      	ldrh	r0, [r0, #12]
 8015db6:	2101      	movs	r1, #1
 8015db8:	4690      	mov	r8, r2
 8015dba:	f000 fc23 	bl	8016604 <uxr_seq_num_add>
 8015dbe:	8922      	ldrh	r2, [r4, #8]
 8015dc0:	fbb0 f6f2 	udiv	r6, r0, r2
 8015dc4:	fb02 0616 	mls	r6, r2, r6, r0
 8015dc8:	b2b6      	uxth	r6, r6
 8015dca:	6863      	ldr	r3, [r4, #4]
 8015dcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8015dd0:	fb06 f303 	mul.w	r3, r6, r3
 8015dd4:	6826      	ldr	r6, [r4, #0]
 8015dd6:	3304      	adds	r3, #4
 8015dd8:	441e      	add	r6, r3
 8015dda:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8015dde:	f1b9 0f00 	cmp.w	r9, #0
 8015de2:	d023      	beq.n	8015e2c <uxr_next_input_reliable_buffer_available+0x80>
 8015de4:	6923      	ldr	r3, [r4, #16]
 8015de6:	4605      	mov	r5, r0
 8015de8:	4630      	mov	r0, r6
 8015dea:	4798      	blx	r3
 8015dec:	4682      	mov	sl, r0
 8015dee:	b300      	cbz	r0, 8015e32 <uxr_next_input_reliable_buffer_available+0x86>
 8015df0:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8015df4:	2101      	movs	r1, #1
 8015df6:	4650      	mov	r0, sl
 8015df8:	f000 fc04 	bl	8016604 <uxr_seq_num_add>
 8015dfc:	8921      	ldrh	r1, [r4, #8]
 8015dfe:	fbb0 f2f1 	udiv	r2, r0, r1
 8015e02:	4682      	mov	sl, r0
 8015e04:	fb01 0212 	mls	r2, r1, r2, r0
 8015e08:	e9d4 0300 	ldrd	r0, r3, [r4]
 8015e0c:	b292      	uxth	r2, r2
 8015e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015e12:	fb02 f303 	mul.w	r3, r2, r3
 8015e16:	3304      	adds	r3, #4
 8015e18:	4418      	add	r0, r3
 8015e1a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015e1e:	b12b      	cbz	r3, 8015e2c <uxr_next_input_reliable_buffer_available+0x80>
 8015e20:	6923      	ldr	r3, [r4, #16]
 8015e22:	4798      	blx	r3
 8015e24:	2802      	cmp	r0, #2
 8015e26:	d01b      	beq.n	8015e60 <uxr_next_input_reliable_buffer_available+0xb4>
 8015e28:	2801      	cmp	r0, #1
 8015e2a:	d0e3      	beq.n	8015df4 <uxr_next_input_reliable_buffer_available+0x48>
 8015e2c:	2000      	movs	r0, #0
 8015e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e32:	464a      	mov	r2, r9
 8015e34:	4631      	mov	r1, r6
 8015e36:	4638      	mov	r0, r7
 8015e38:	f7f5 fdaa 	bl	800b990 <ucdr_init_buffer>
 8015e3c:	8921      	ldrh	r1, [r4, #8]
 8015e3e:	fbb5 f2f1 	udiv	r2, r5, r1
 8015e42:	fb01 5212 	mls	r2, r1, r2, r5
 8015e46:	b292      	uxth	r2, r2
 8015e48:	6863      	ldr	r3, [r4, #4]
 8015e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8015e4e:	fb02 f303 	mul.w	r3, r2, r3
 8015e52:	6822      	ldr	r2, [r4, #0]
 8015e54:	f842 a003 	str.w	sl, [r2, r3]
 8015e58:	2001      	movs	r0, #1
 8015e5a:	81a5      	strh	r5, [r4, #12]
 8015e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e60:	8920      	ldrh	r0, [r4, #8]
 8015e62:	fbb5 f3f0 	udiv	r3, r5, r0
 8015e66:	fb00 5513 	mls	r5, r0, r3, r5
 8015e6a:	b2ad      	uxth	r5, r5
 8015e6c:	6863      	ldr	r3, [r4, #4]
 8015e6e:	fbb3 f3f0 	udiv	r3, r3, r0
 8015e72:	fb03 f505 	mul.w	r5, r3, r5
 8015e76:	6823      	ldr	r3, [r4, #0]
 8015e78:	2000      	movs	r0, #0
 8015e7a:	5158      	str	r0, [r3, r5]
 8015e7c:	eb06 0108 	add.w	r1, r6, r8
 8015e80:	eba9 0208 	sub.w	r2, r9, r8
 8015e84:	4638      	mov	r0, r7
 8015e86:	f7f5 fd83 	bl	800b990 <ucdr_init_buffer>
 8015e8a:	4638      	mov	r0, r7
 8015e8c:	4903      	ldr	r1, [pc, #12]	@ (8015e9c <uxr_next_input_reliable_buffer_available+0xf0>)
 8015e8e:	4622      	mov	r2, r4
 8015e90:	f7f5 fd52 	bl	800b938 <ucdr_set_on_full_buffer_callback>
 8015e94:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8015e98:	2001      	movs	r0, #1
 8015e9a:	e7c8      	b.n	8015e2e <uxr_next_input_reliable_buffer_available+0x82>
 8015e9c:	08015ba1 	.word	0x08015ba1

08015ea0 <uxr_process_heartbeat>:
 8015ea0:	b538      	push	{r3, r4, r5, lr}
 8015ea2:	4611      	mov	r1, r2
 8015ea4:	4604      	mov	r4, r0
 8015ea6:	89c0      	ldrh	r0, [r0, #14]
 8015ea8:	4615      	mov	r5, r2
 8015eaa:	f000 fbb3 	bl	8016614 <uxr_seq_num_cmp>
 8015eae:	2800      	cmp	r0, #0
 8015eb0:	bfb8      	it	lt
 8015eb2:	81e5      	strhlt	r5, [r4, #14]
 8015eb4:	bd38      	pop	{r3, r4, r5, pc}
 8015eb6:	bf00      	nop

08015eb8 <uxr_compute_acknack>:
 8015eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ebc:	8903      	ldrh	r3, [r0, #8]
 8015ebe:	8985      	ldrh	r5, [r0, #12]
 8015ec0:	4604      	mov	r4, r0
 8015ec2:	460e      	mov	r6, r1
 8015ec4:	b1d3      	cbz	r3, 8015efc <uxr_compute_acknack+0x44>
 8015ec6:	4628      	mov	r0, r5
 8015ec8:	2701      	movs	r7, #1
 8015eca:	e003      	b.n	8015ed4 <uxr_compute_acknack+0x1c>
 8015ecc:	4567      	cmp	r7, ip
 8015ece:	d215      	bcs.n	8015efc <uxr_compute_acknack+0x44>
 8015ed0:	89a0      	ldrh	r0, [r4, #12]
 8015ed2:	3701      	adds	r7, #1
 8015ed4:	b2b9      	uxth	r1, r7
 8015ed6:	f000 fb95 	bl	8016604 <uxr_seq_num_add>
 8015eda:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015ede:	fbb0 f3fc 	udiv	r3, r0, ip
 8015ee2:	fb0c 0313 	mls	r3, ip, r3, r0
 8015ee6:	b29a      	uxth	r2, r3
 8015ee8:	e9d4 1300 	ldrd	r1, r3, [r4]
 8015eec:	fbb3 f3fc 	udiv	r3, r3, ip
 8015ef0:	fb02 f303 	mul.w	r3, r2, r3
 8015ef4:	58cb      	ldr	r3, [r1, r3]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d1e8      	bne.n	8015ecc <uxr_compute_acknack+0x14>
 8015efa:	4605      	mov	r5, r0
 8015efc:	8035      	strh	r5, [r6, #0]
 8015efe:	2101      	movs	r1, #1
 8015f00:	4628      	mov	r0, r5
 8015f02:	89e7      	ldrh	r7, [r4, #14]
 8015f04:	f000 fb82 	bl	801660c <uxr_seq_num_sub>
 8015f08:	4601      	mov	r1, r0
 8015f0a:	4638      	mov	r0, r7
 8015f0c:	f000 fb7e 	bl	801660c <uxr_seq_num_sub>
 8015f10:	4605      	mov	r5, r0
 8015f12:	b318      	cbz	r0, 8015f5c <uxr_compute_acknack+0xa4>
 8015f14:	f04f 0900 	mov.w	r9, #0
 8015f18:	464f      	mov	r7, r9
 8015f1a:	f04f 0801 	mov.w	r8, #1
 8015f1e:	fa1f f189 	uxth.w	r1, r9
 8015f22:	8830      	ldrh	r0, [r6, #0]
 8015f24:	f000 fb6e 	bl	8016604 <uxr_seq_num_add>
 8015f28:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015f2c:	fbb0 f3fc 	udiv	r3, r0, ip
 8015f30:	e9d4 1200 	ldrd	r1, r2, [r4]
 8015f34:	fb03 001c 	mls	r0, r3, ip, r0
 8015f38:	b283      	uxth	r3, r0
 8015f3a:	fbb2 f2fc 	udiv	r2, r2, ip
 8015f3e:	fb02 f303 	mul.w	r3, r2, r3
 8015f42:	fa08 f209 	lsl.w	r2, r8, r9
 8015f46:	58cb      	ldr	r3, [r1, r3]
 8015f48:	f109 0901 	add.w	r9, r9, #1
 8015f4c:	b90b      	cbnz	r3, 8015f52 <uxr_compute_acknack+0x9a>
 8015f4e:	4317      	orrs	r7, r2
 8015f50:	b2bf      	uxth	r7, r7
 8015f52:	454d      	cmp	r5, r9
 8015f54:	d1e3      	bne.n	8015f1e <uxr_compute_acknack+0x66>
 8015f56:	4638      	mov	r0, r7
 8015f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f5c:	4607      	mov	r7, r0
 8015f5e:	4638      	mov	r0, r7
 8015f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08015f64 <uxr_init_output_best_effort_stream>:
 8015f64:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8015f68:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8015f6c:	6001      	str	r1, [r0, #0]
 8015f6e:	7303      	strb	r3, [r0, #12]
 8015f70:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8015f74:	4770      	bx	lr
 8015f76:	bf00      	nop

08015f78 <uxr_reset_output_best_effort_stream>:
 8015f78:	7b02      	ldrb	r2, [r0, #12]
 8015f7a:	6042      	str	r2, [r0, #4]
 8015f7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015f80:	81c3      	strh	r3, [r0, #14]
 8015f82:	4770      	bx	lr

08015f84 <uxr_prepare_best_effort_buffer_to_write>:
 8015f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f86:	4604      	mov	r4, r0
 8015f88:	b083      	sub	sp, #12
 8015f8a:	6840      	ldr	r0, [r0, #4]
 8015f8c:	460d      	mov	r5, r1
 8015f8e:	4616      	mov	r6, r2
 8015f90:	f7fa fafc 	bl	801058c <uxr_submessage_padding>
 8015f94:	6863      	ldr	r3, [r4, #4]
 8015f96:	4418      	add	r0, r3
 8015f98:	68a3      	ldr	r3, [r4, #8]
 8015f9a:	1942      	adds	r2, r0, r5
 8015f9c:	4293      	cmp	r3, r2
 8015f9e:	bf2c      	ite	cs
 8015fa0:	2701      	movcs	r7, #1
 8015fa2:	2700      	movcc	r7, #0
 8015fa4:	d202      	bcs.n	8015fac <uxr_prepare_best_effort_buffer_to_write+0x28>
 8015fa6:	4638      	mov	r0, r7
 8015fa8:	b003      	add	sp, #12
 8015faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015fac:	9000      	str	r0, [sp, #0]
 8015fae:	6821      	ldr	r1, [r4, #0]
 8015fb0:	4630      	mov	r0, r6
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	f7f5 fcda 	bl	800b96c <ucdr_init_buffer_origin_offset>
 8015fb8:	6861      	ldr	r1, [r4, #4]
 8015fba:	4638      	mov	r0, r7
 8015fbc:	4429      	add	r1, r5
 8015fbe:	6061      	str	r1, [r4, #4]
 8015fc0:	b003      	add	sp, #12
 8015fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015fc4 <uxr_prepare_best_effort_buffer_to_send>:
 8015fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fc8:	4604      	mov	r4, r0
 8015fca:	461d      	mov	r5, r3
 8015fcc:	6840      	ldr	r0, [r0, #4]
 8015fce:	7b23      	ldrb	r3, [r4, #12]
 8015fd0:	4298      	cmp	r0, r3
 8015fd2:	bf8c      	ite	hi
 8015fd4:	2601      	movhi	r6, #1
 8015fd6:	2600      	movls	r6, #0
 8015fd8:	d802      	bhi.n	8015fe0 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8015fda:	4630      	mov	r0, r6
 8015fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fe0:	4688      	mov	r8, r1
 8015fe2:	89e0      	ldrh	r0, [r4, #14]
 8015fe4:	2101      	movs	r1, #1
 8015fe6:	4617      	mov	r7, r2
 8015fe8:	f000 fb0c 	bl	8016604 <uxr_seq_num_add>
 8015fec:	6823      	ldr	r3, [r4, #0]
 8015fee:	81e0      	strh	r0, [r4, #14]
 8015ff0:	8028      	strh	r0, [r5, #0]
 8015ff2:	f8c8 3000 	str.w	r3, [r8]
 8015ff6:	6863      	ldr	r3, [r4, #4]
 8015ff8:	603b      	str	r3, [r7, #0]
 8015ffa:	7b23      	ldrb	r3, [r4, #12]
 8015ffc:	6063      	str	r3, [r4, #4]
 8015ffe:	4630      	mov	r0, r6
 8016000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016004 <on_full_output_buffer>:
 8016004:	b538      	push	{r3, r4, r5, lr}
 8016006:	6802      	ldr	r2, [r0, #0]
 8016008:	460c      	mov	r4, r1
 801600a:	6809      	ldr	r1, [r1, #0]
 801600c:	8923      	ldrh	r3, [r4, #8]
 801600e:	eba2 0c01 	sub.w	ip, r2, r1
 8016012:	6862      	ldr	r2, [r4, #4]
 8016014:	fbb2 f2f3 	udiv	r2, r2, r3
 8016018:	fbbc fcf2 	udiv	ip, ip, r2
 801601c:	f10c 0c01 	add.w	ip, ip, #1
 8016020:	fa1f fc8c 	uxth.w	ip, ip
 8016024:	fbbc fef3 	udiv	lr, ip, r3
 8016028:	fb03 c31e 	mls	r3, r3, lr, ip
 801602c:	b29b      	uxth	r3, r3
 801602e:	fb02 f303 	mul.w	r3, r2, r3
 8016032:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8016036:	58ca      	ldr	r2, [r1, r3]
 8016038:	4463      	add	r3, ip
 801603a:	eba2 020c 	sub.w	r2, r2, ip
 801603e:	3308      	adds	r3, #8
 8016040:	4605      	mov	r5, r0
 8016042:	4419      	add	r1, r3
 8016044:	3a04      	subs	r2, #4
 8016046:	6903      	ldr	r3, [r0, #16]
 8016048:	f7f5 fc9a 	bl	800b980 <ucdr_init_buffer_origin>
 801604c:	4628      	mov	r0, r5
 801604e:	4903      	ldr	r1, [pc, #12]	@ (801605c <on_full_output_buffer+0x58>)
 8016050:	4622      	mov	r2, r4
 8016052:	f7f5 fc71 	bl	800b938 <ucdr_set_on_full_buffer_callback>
 8016056:	2000      	movs	r0, #0
 8016058:	bd38      	pop	{r3, r4, r5, pc}
 801605a:	bf00      	nop
 801605c:	08016005 	.word	0x08016005

08016060 <uxr_init_output_reliable_stream>:
 8016060:	b410      	push	{r4}
 8016062:	f89d c004 	ldrb.w	ip, [sp, #4]
 8016066:	8103      	strh	r3, [r0, #8]
 8016068:	e9c0 1200 	strd	r1, r2, [r0]
 801606c:	f880 c00c 	strb.w	ip, [r0, #12]
 8016070:	b1d3      	cbz	r3, 80160a8 <uxr_init_output_reliable_stream+0x48>
 8016072:	f8c1 c000 	str.w	ip, [r1]
 8016076:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801607a:	f1bc 0f01 	cmp.w	ip, #1
 801607e:	d913      	bls.n	80160a8 <uxr_init_output_reliable_stream+0x48>
 8016080:	2301      	movs	r3, #1
 8016082:	fbb3 f1fc 	udiv	r1, r3, ip
 8016086:	fb0c 3111 	mls	r1, ip, r1, r3
 801608a:	b289      	uxth	r1, r1
 801608c:	6842      	ldr	r2, [r0, #4]
 801608e:	6804      	ldr	r4, [r0, #0]
 8016090:	fbb2 f2fc 	udiv	r2, r2, ip
 8016094:	fb01 f202 	mul.w	r2, r1, r2
 8016098:	7b01      	ldrb	r1, [r0, #12]
 801609a:	50a1      	str	r1, [r4, r2]
 801609c:	3301      	adds	r3, #1
 801609e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80160a2:	b29b      	uxth	r3, r3
 80160a4:	459c      	cmp	ip, r3
 80160a6:	d8ec      	bhi.n	8016082 <uxr_init_output_reliable_stream+0x22>
 80160a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80160ac:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80160b0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80160b4:	4905      	ldr	r1, [pc, #20]	@ (80160cc <uxr_init_output_reliable_stream+0x6c>)
 80160b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80160ba:	f8c0 100e 	str.w	r1, [r0, #14]
 80160be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80160c2:	2300      	movs	r3, #0
 80160c4:	8242      	strh	r2, [r0, #18]
 80160c6:	8403      	strh	r3, [r0, #32]
 80160c8:	4770      	bx	lr
 80160ca:	bf00      	nop
 80160cc:	ffff0000 	.word	0xffff0000

080160d0 <uxr_reset_output_reliable_stream>:
 80160d0:	8901      	ldrh	r1, [r0, #8]
 80160d2:	b1b1      	cbz	r1, 8016102 <uxr_reset_output_reliable_stream+0x32>
 80160d4:	f04f 0c00 	mov.w	ip, #0
 80160d8:	4663      	mov	r3, ip
 80160da:	fbb3 f2f1 	udiv	r2, r3, r1
 80160de:	fb01 3312 	mls	r3, r1, r2, r3
 80160e2:	b29b      	uxth	r3, r3
 80160e4:	6842      	ldr	r2, [r0, #4]
 80160e6:	fbb2 f2f1 	udiv	r2, r2, r1
 80160ea:	6801      	ldr	r1, [r0, #0]
 80160ec:	fb02 f303 	mul.w	r3, r2, r3
 80160f0:	7b02      	ldrb	r2, [r0, #12]
 80160f2:	50ca      	str	r2, [r1, r3]
 80160f4:	f10c 0c01 	add.w	ip, ip, #1
 80160f8:	8901      	ldrh	r1, [r0, #8]
 80160fa:	fa1f f38c 	uxth.w	r3, ip
 80160fe:	4299      	cmp	r1, r3
 8016100:	d8eb      	bhi.n	80160da <uxr_reset_output_reliable_stream+0xa>
 8016102:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016106:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801610a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801610e:	4904      	ldr	r1, [pc, #16]	@ (8016120 <uxr_reset_output_reliable_stream+0x50>)
 8016110:	f8c0 100e 	str.w	r1, [r0, #14]
 8016114:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016118:	2300      	movs	r3, #0
 801611a:	8242      	strh	r2, [r0, #18]
 801611c:	8403      	strh	r3, [r0, #32]
 801611e:	4770      	bx	lr
 8016120:	ffff0000 	.word	0xffff0000

08016124 <uxr_prepare_reliable_buffer_to_write>:
 8016124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016128:	4604      	mov	r4, r0
 801612a:	b091      	sub	sp, #68	@ 0x44
 801612c:	8900      	ldrh	r0, [r0, #8]
 801612e:	89e6      	ldrh	r6, [r4, #14]
 8016130:	6823      	ldr	r3, [r4, #0]
 8016132:	9204      	str	r2, [sp, #16]
 8016134:	fbb6 f2f0 	udiv	r2, r6, r0
 8016138:	fb00 6212 	mls	r2, r0, r2, r6
 801613c:	b292      	uxth	r2, r2
 801613e:	6865      	ldr	r5, [r4, #4]
 8016140:	fbb5 f5f0 	udiv	r5, r5, r0
 8016144:	fb05 3202 	mla	r2, r5, r2, r3
 8016148:	3204      	adds	r2, #4
 801614a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801614e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8016152:	9203      	str	r2, [sp, #12]
 8016154:	468b      	mov	fp, r1
 8016156:	1f2f      	subs	r7, r5, #4
 8016158:	2800      	cmp	r0, #0
 801615a:	f000 814c 	beq.w	80163f6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801615e:	f04f 0c00 	mov.w	ip, #0
 8016162:	46e2      	mov	sl, ip
 8016164:	4661      	mov	r1, ip
 8016166:	fbb1 f2f0 	udiv	r2, r1, r0
 801616a:	fb00 1212 	mls	r2, r0, r2, r1
 801616e:	b292      	uxth	r2, r2
 8016170:	fb05 f202 	mul.w	r2, r5, r2
 8016174:	f10c 0c01 	add.w	ip, ip, #1
 8016178:	589a      	ldr	r2, [r3, r2]
 801617a:	454a      	cmp	r2, r9
 801617c:	bf08      	it	eq
 801617e:	f10a 0a01 	addeq.w	sl, sl, #1
 8016182:	fa1f f18c 	uxth.w	r1, ip
 8016186:	bf08      	it	eq
 8016188:	fa1f fa8a 	uxtheq.w	sl, sl
 801618c:	4281      	cmp	r1, r0
 801618e:	d3ea      	bcc.n	8016166 <uxr_prepare_reliable_buffer_to_write+0x42>
 8016190:	4640      	mov	r0, r8
 8016192:	2104      	movs	r1, #4
 8016194:	f8cd a014 	str.w	sl, [sp, #20]
 8016198:	f7f5 fbfe 	bl	800b998 <ucdr_alignment>
 801619c:	4480      	add	r8, r0
 801619e:	eb08 020b 	add.w	r2, r8, fp
 80161a2:	42ba      	cmp	r2, r7
 80161a4:	f240 80cd 	bls.w	8016342 <uxr_prepare_reliable_buffer_to_write+0x21e>
 80161a8:	7b22      	ldrb	r2, [r4, #12]
 80161aa:	445a      	add	r2, fp
 80161ac:	42ba      	cmp	r2, r7
 80161ae:	f240 80b5 	bls.w	801631c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80161b2:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80161b6:	33fc      	adds	r3, #252	@ 0xfc
 80161b8:	b2ba      	uxth	r2, r7
 80161ba:	4413      	add	r3, r2
 80161bc:	b29b      	uxth	r3, r3
 80161be:	fb0a f903 	mul.w	r9, sl, r3
 80161c2:	45d9      	cmp	r9, fp
 80161c4:	9305      	str	r3, [sp, #20]
 80161c6:	9306      	str	r3, [sp, #24]
 80161c8:	f0c0 80b7 	bcc.w	801633a <uxr_prepare_reliable_buffer_to_write+0x216>
 80161cc:	f108 0304 	add.w	r3, r8, #4
 80161d0:	42bb      	cmp	r3, r7
 80161d2:	f080 80db 	bcs.w	801638c <uxr_prepare_reliable_buffer_to_write+0x268>
 80161d6:	f1a2 0904 	sub.w	r9, r2, #4
 80161da:	eba9 0908 	sub.w	r9, r9, r8
 80161de:	9b05      	ldr	r3, [sp, #20]
 80161e0:	fa1f f989 	uxth.w	r9, r9
 80161e4:	ebab 0b09 	sub.w	fp, fp, r9
 80161e8:	fbbb f2f3 	udiv	r2, fp, r3
 80161ec:	fb03 b312 	mls	r3, r3, r2, fp
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	f000 80c8 	beq.w	8016386 <uxr_prepare_reliable_buffer_to_write+0x262>
 80161f6:	3201      	adds	r2, #1
 80161f8:	b292      	uxth	r2, r2
 80161fa:	9306      	str	r3, [sp, #24]
 80161fc:	4552      	cmp	r2, sl
 80161fe:	f200 809c 	bhi.w	801633a <uxr_prepare_reliable_buffer_to_write+0x216>
 8016202:	f10d 0b20 	add.w	fp, sp, #32
 8016206:	2a00      	cmp	r2, #0
 8016208:	d042      	beq.n	8016290 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801620a:	f8cd 801c 	str.w	r8, [sp, #28]
 801620e:	f04f 0a00 	mov.w	sl, #0
 8016212:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016216:	9505      	str	r5, [sp, #20]
 8016218:	f10d 0b20 	add.w	fp, sp, #32
 801621c:	4615      	mov	r5, r2
 801621e:	e000      	b.n	8016222 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8016220:	46c1      	mov	r9, r8
 8016222:	8920      	ldrh	r0, [r4, #8]
 8016224:	fbb6 f2f0 	udiv	r2, r6, r0
 8016228:	fb00 6112 	mls	r1, r0, r2, r6
 801622c:	b28a      	uxth	r2, r1
 801622e:	6863      	ldr	r3, [r4, #4]
 8016230:	fbb3 f1f0 	udiv	r1, r3, r0
 8016234:	6823      	ldr	r3, [r4, #0]
 8016236:	fb02 f101 	mul.w	r1, r2, r1
 801623a:	3104      	adds	r1, #4
 801623c:	4419      	add	r1, r3
 801623e:	4658      	mov	r0, fp
 8016240:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8016244:	9200      	str	r2, [sp, #0]
 8016246:	2300      	movs	r3, #0
 8016248:	463a      	mov	r2, r7
 801624a:	f7f5 fb8f 	bl	800b96c <ucdr_init_buffer_origin_offset>
 801624e:	464a      	mov	r2, r9
 8016250:	2300      	movs	r3, #0
 8016252:	210d      	movs	r1, #13
 8016254:	4658      	mov	r0, fp
 8016256:	f7fa f959 	bl	801050c <uxr_buffer_submessage_header>
 801625a:	8921      	ldrh	r1, [r4, #8]
 801625c:	fbb6 f2f1 	udiv	r2, r6, r1
 8016260:	fb01 6212 	mls	r2, r1, r2, r6
 8016264:	b292      	uxth	r2, r2
 8016266:	6863      	ldr	r3, [r4, #4]
 8016268:	fbb3 f3f1 	udiv	r3, r3, r1
 801626c:	fb02 f303 	mul.w	r3, r2, r3
 8016270:	6822      	ldr	r2, [r4, #0]
 8016272:	4630      	mov	r0, r6
 8016274:	50d7      	str	r7, [r2, r3]
 8016276:	2101      	movs	r1, #1
 8016278:	f000 f9c4 	bl	8016604 <uxr_seq_num_add>
 801627c:	f10a 0a01 	add.w	sl, sl, #1
 8016280:	fa1f f38a 	uxth.w	r3, sl
 8016284:	429d      	cmp	r5, r3
 8016286:	4606      	mov	r6, r0
 8016288:	d8ca      	bhi.n	8016220 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801628a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801628e:	9d05      	ldr	r5, [sp, #20]
 8016290:	8920      	ldrh	r0, [r4, #8]
 8016292:	fbb6 f3f0 	udiv	r3, r6, r0
 8016296:	fb00 6313 	mls	r3, r0, r3, r6
 801629a:	b299      	uxth	r1, r3
 801629c:	6863      	ldr	r3, [r4, #4]
 801629e:	fbb3 f3f0 	udiv	r3, r3, r0
 80162a2:	fb01 f303 	mul.w	r3, r1, r3
 80162a6:	6821      	ldr	r1, [r4, #0]
 80162a8:	3304      	adds	r3, #4
 80162aa:	4419      	add	r1, r3
 80162ac:	463a      	mov	r2, r7
 80162ae:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80162b2:	9000      	str	r0, [sp, #0]
 80162b4:	2300      	movs	r3, #0
 80162b6:	4658      	mov	r0, fp
 80162b8:	f7f5 fb58 	bl	800b96c <ucdr_init_buffer_origin_offset>
 80162bc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80162c0:	4658      	mov	r0, fp
 80162c2:	fa1f f289 	uxth.w	r2, r9
 80162c6:	2302      	movs	r3, #2
 80162c8:	210d      	movs	r1, #13
 80162ca:	f7fa f91f 	bl	801050c <uxr_buffer_submessage_header>
 80162ce:	9b03      	ldr	r3, [sp, #12]
 80162d0:	8927      	ldrh	r7, [r4, #8]
 80162d2:	7b20      	ldrb	r0, [r4, #12]
 80162d4:	f108 0104 	add.w	r1, r8, #4
 80162d8:	440b      	add	r3, r1
 80162da:	4619      	mov	r1, r3
 80162dc:	fbb6 f3f7 	udiv	r3, r6, r7
 80162e0:	fb07 6313 	mls	r3, r7, r3, r6
 80162e4:	f1a5 0208 	sub.w	r2, r5, #8
 80162e8:	b29d      	uxth	r5, r3
 80162ea:	3004      	adds	r0, #4
 80162ec:	6863      	ldr	r3, [r4, #4]
 80162ee:	fbb3 f3f7 	udiv	r3, r3, r7
 80162f2:	fb05 f303 	mul.w	r3, r5, r3
 80162f6:	6825      	ldr	r5, [r4, #0]
 80162f8:	4448      	add	r0, r9
 80162fa:	50e8      	str	r0, [r5, r3]
 80162fc:	9d04      	ldr	r5, [sp, #16]
 80162fe:	eba2 0208 	sub.w	r2, r2, r8
 8016302:	4628      	mov	r0, r5
 8016304:	f7f5 fb44 	bl	800b990 <ucdr_init_buffer>
 8016308:	4628      	mov	r0, r5
 801630a:	493c      	ldr	r1, [pc, #240]	@ (80163fc <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801630c:	4622      	mov	r2, r4
 801630e:	f7f5 fb13 	bl	800b938 <ucdr_set_on_full_buffer_callback>
 8016312:	2001      	movs	r0, #1
 8016314:	81e6      	strh	r6, [r4, #14]
 8016316:	b011      	add	sp, #68	@ 0x44
 8016318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801631c:	2101      	movs	r1, #1
 801631e:	89e0      	ldrh	r0, [r4, #14]
 8016320:	f000 f970 	bl	8016604 <uxr_seq_num_add>
 8016324:	8921      	ldrh	r1, [r4, #8]
 8016326:	4605      	mov	r5, r0
 8016328:	8a60      	ldrh	r0, [r4, #18]
 801632a:	f000 f96b 	bl	8016604 <uxr_seq_num_add>
 801632e:	4601      	mov	r1, r0
 8016330:	4628      	mov	r0, r5
 8016332:	f000 f96f 	bl	8016614 <uxr_seq_num_cmp>
 8016336:	2800      	cmp	r0, #0
 8016338:	dd42      	ble.n	80163c0 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801633a:	2000      	movs	r0, #0
 801633c:	b011      	add	sp, #68	@ 0x44
 801633e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016342:	8921      	ldrh	r1, [r4, #8]
 8016344:	8a60      	ldrh	r0, [r4, #18]
 8016346:	9205      	str	r2, [sp, #20]
 8016348:	f000 f95c 	bl	8016604 <uxr_seq_num_add>
 801634c:	4601      	mov	r1, r0
 801634e:	4630      	mov	r0, r6
 8016350:	f000 f960 	bl	8016614 <uxr_seq_num_cmp>
 8016354:	2800      	cmp	r0, #0
 8016356:	9a05      	ldr	r2, [sp, #20]
 8016358:	dcef      	bgt.n	801633a <uxr_prepare_reliable_buffer_to_write+0x216>
 801635a:	8927      	ldrh	r7, [r4, #8]
 801635c:	fbb6 f3f7 	udiv	r3, r6, r7
 8016360:	fb07 6313 	mls	r3, r7, r3, r6
 8016364:	b29d      	uxth	r5, r3
 8016366:	6863      	ldr	r3, [r4, #4]
 8016368:	6824      	ldr	r4, [r4, #0]
 801636a:	fbb3 f3f7 	udiv	r3, r3, r7
 801636e:	fb05 f303 	mul.w	r3, r5, r3
 8016372:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8016376:	50e2      	str	r2, [r4, r3]
 8016378:	2300      	movs	r3, #0
 801637a:	f8cd 8000 	str.w	r8, [sp]
 801637e:	f7f5 faf5 	bl	800b96c <ucdr_init_buffer_origin_offset>
 8016382:	2001      	movs	r0, #1
 8016384:	e7da      	b.n	801633c <uxr_prepare_reliable_buffer_to_write+0x218>
 8016386:	b293      	uxth	r3, r2
 8016388:	461a      	mov	r2, r3
 801638a:	e737      	b.n	80161fc <uxr_prepare_reliable_buffer_to_write+0xd8>
 801638c:	4630      	mov	r0, r6
 801638e:	2101      	movs	r1, #1
 8016390:	9207      	str	r2, [sp, #28]
 8016392:	f000 f937 	bl	8016604 <uxr_seq_num_add>
 8016396:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801639a:	fbb0 f1fc 	udiv	r1, r0, ip
 801639e:	fb0c 0111 	mls	r1, ip, r1, r0
 80163a2:	4606      	mov	r6, r0
 80163a4:	b288      	uxth	r0, r1
 80163a6:	6863      	ldr	r3, [r4, #4]
 80163a8:	fbb3 f1fc 	udiv	r1, r3, ip
 80163ac:	6823      	ldr	r3, [r4, #0]
 80163ae:	9a07      	ldr	r2, [sp, #28]
 80163b0:	fb00 f101 	mul.w	r1, r0, r1
 80163b4:	3104      	adds	r1, #4
 80163b6:	440b      	add	r3, r1
 80163b8:	9303      	str	r3, [sp, #12]
 80163ba:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80163be:	e70a      	b.n	80161d6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 80163c0:	8921      	ldrh	r1, [r4, #8]
 80163c2:	fbb5 f3f1 	udiv	r3, r5, r1
 80163c6:	fb01 5313 	mls	r3, r1, r3, r5
 80163ca:	b29a      	uxth	r2, r3
 80163cc:	6863      	ldr	r3, [r4, #4]
 80163ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80163d2:	6821      	ldr	r1, [r4, #0]
 80163d4:	9804      	ldr	r0, [sp, #16]
 80163d6:	fb02 f303 	mul.w	r3, r2, r3
 80163da:	3304      	adds	r3, #4
 80163dc:	7b22      	ldrb	r2, [r4, #12]
 80163de:	4419      	add	r1, r3
 80163e0:	445a      	add	r2, fp
 80163e2:	f841 2c04 	str.w	r2, [r1, #-4]
 80163e6:	7b23      	ldrb	r3, [r4, #12]
 80163e8:	9300      	str	r3, [sp, #0]
 80163ea:	2300      	movs	r3, #0
 80163ec:	f7f5 fabe 	bl	800b96c <ucdr_init_buffer_origin_offset>
 80163f0:	81e5      	strh	r5, [r4, #14]
 80163f2:	2001      	movs	r0, #1
 80163f4:	e7a2      	b.n	801633c <uxr_prepare_reliable_buffer_to_write+0x218>
 80163f6:	4682      	mov	sl, r0
 80163f8:	e6ca      	b.n	8016190 <uxr_prepare_reliable_buffer_to_write+0x6c>
 80163fa:	bf00      	nop
 80163fc:	08016005 	.word	0x08016005

08016400 <uxr_prepare_next_reliable_buffer_to_send>:
 8016400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016402:	4604      	mov	r4, r0
 8016404:	460f      	mov	r7, r1
 8016406:	8a00      	ldrh	r0, [r0, #16]
 8016408:	2101      	movs	r1, #1
 801640a:	4616      	mov	r6, r2
 801640c:	461d      	mov	r5, r3
 801640e:	f000 f8f9 	bl	8016604 <uxr_seq_num_add>
 8016412:	8028      	strh	r0, [r5, #0]
 8016414:	8922      	ldrh	r2, [r4, #8]
 8016416:	fbb0 f3f2 	udiv	r3, r0, r2
 801641a:	fb02 0c13 	mls	ip, r2, r3, r0
 801641e:	fa1f fc8c 	uxth.w	ip, ip
 8016422:	6863      	ldr	r3, [r4, #4]
 8016424:	fbb3 f3f2 	udiv	r3, r3, r2
 8016428:	fb0c fc03 	mul.w	ip, ip, r3
 801642c:	6823      	ldr	r3, [r4, #0]
 801642e:	89e1      	ldrh	r1, [r4, #14]
 8016430:	f10c 0c04 	add.w	ip, ip, #4
 8016434:	4463      	add	r3, ip
 8016436:	603b      	str	r3, [r7, #0]
 8016438:	6823      	ldr	r3, [r4, #0]
 801643a:	449c      	add	ip, r3
 801643c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8016440:	6033      	str	r3, [r6, #0]
 8016442:	f000 f8e7 	bl	8016614 <uxr_seq_num_cmp>
 8016446:	2800      	cmp	r0, #0
 8016448:	dd01      	ble.n	801644e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801644a:	2000      	movs	r0, #0
 801644c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801644e:	7b23      	ldrb	r3, [r4, #12]
 8016450:	6832      	ldr	r2, [r6, #0]
 8016452:	429a      	cmp	r2, r3
 8016454:	d9f9      	bls.n	801644a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016456:	8a61      	ldrh	r1, [r4, #18]
 8016458:	8a20      	ldrh	r0, [r4, #16]
 801645a:	f000 f8d7 	bl	801660c <uxr_seq_num_sub>
 801645e:	8923      	ldrh	r3, [r4, #8]
 8016460:	4283      	cmp	r3, r0
 8016462:	d0f2      	beq.n	801644a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016464:	8828      	ldrh	r0, [r5, #0]
 8016466:	89e3      	ldrh	r3, [r4, #14]
 8016468:	8220      	strh	r0, [r4, #16]
 801646a:	4298      	cmp	r0, r3
 801646c:	d001      	beq.n	8016472 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801646e:	2001      	movs	r0, #1
 8016470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016472:	2101      	movs	r1, #1
 8016474:	f000 f8c6 	bl	8016604 <uxr_seq_num_add>
 8016478:	81e0      	strh	r0, [r4, #14]
 801647a:	2001      	movs	r0, #1
 801647c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801647e:	bf00      	nop

08016480 <uxr_update_output_stream_heartbeat_timestamp>:
 8016480:	b570      	push	{r4, r5, r6, lr}
 8016482:	8a01      	ldrh	r1, [r0, #16]
 8016484:	4604      	mov	r4, r0
 8016486:	8a40      	ldrh	r0, [r0, #18]
 8016488:	4615      	mov	r5, r2
 801648a:	461e      	mov	r6, r3
 801648c:	f000 f8c2 	bl	8016614 <uxr_seq_num_cmp>
 8016490:	2800      	cmp	r0, #0
 8016492:	db07      	blt.n	80164a4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8016494:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016498:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801649c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80164a0:	2000      	movs	r0, #0
 80164a2:	bd70      	pop	{r4, r5, r6, pc}
 80164a4:	f894 0020 	ldrb.w	r0, [r4, #32]
 80164a8:	b940      	cbnz	r0, 80164bc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80164aa:	2301      	movs	r3, #1
 80164ac:	f884 3020 	strb.w	r3, [r4, #32]
 80164b0:	3564      	adds	r5, #100	@ 0x64
 80164b2:	f146 0600 	adc.w	r6, r6, #0
 80164b6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80164ba:	bd70      	pop	{r4, r5, r6, pc}
 80164bc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80164c0:	4295      	cmp	r5, r2
 80164c2:	eb76 0303 	sbcs.w	r3, r6, r3
 80164c6:	bfa5      	ittet	ge
 80164c8:	3001      	addge	r0, #1
 80164ca:	f884 0020 	strbge.w	r0, [r4, #32]
 80164ce:	2000      	movlt	r0, #0
 80164d0:	2001      	movge	r0, #1
 80164d2:	e7ed      	b.n	80164b0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

080164d4 <uxr_begin_output_nack_buffer_it>:
 80164d4:	8a40      	ldrh	r0, [r0, #18]
 80164d6:	4770      	bx	lr

080164d8 <uxr_next_reliable_nack_buffer_to_send>:
 80164d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164dc:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 80164e0:	b082      	sub	sp, #8
 80164e2:	f1b8 0f00 	cmp.w	r8, #0
 80164e6:	d011      	beq.n	801650c <uxr_next_reliable_nack_buffer_to_send+0x34>
 80164e8:	4604      	mov	r4, r0
 80164ea:	8818      	ldrh	r0, [r3, #0]
 80164ec:	460e      	mov	r6, r1
 80164ee:	4617      	mov	r7, r2
 80164f0:	461d      	mov	r5, r3
 80164f2:	2101      	movs	r1, #1
 80164f4:	f000 f886 	bl	8016604 <uxr_seq_num_add>
 80164f8:	8028      	strh	r0, [r5, #0]
 80164fa:	8a21      	ldrh	r1, [r4, #16]
 80164fc:	f000 f88a 	bl	8016614 <uxr_seq_num_cmp>
 8016500:	2800      	cmp	r0, #0
 8016502:	dd07      	ble.n	8016514 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8016504:	f04f 0800 	mov.w	r8, #0
 8016508:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 801650c:	4640      	mov	r0, r8
 801650e:	b002      	add	sp, #8
 8016510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016514:	8921      	ldrh	r1, [r4, #8]
 8016516:	8828      	ldrh	r0, [r5, #0]
 8016518:	6823      	ldr	r3, [r4, #0]
 801651a:	fbb0 f2f1 	udiv	r2, r0, r1
 801651e:	fb01 0c12 	mls	ip, r1, r2, r0
 8016522:	fa1f f28c 	uxth.w	r2, ip
 8016526:	9301      	str	r3, [sp, #4]
 8016528:	6863      	ldr	r3, [r4, #4]
 801652a:	fbb3 fcf1 	udiv	ip, r3, r1
 801652e:	9b01      	ldr	r3, [sp, #4]
 8016530:	fb02 fc0c 	mul.w	ip, r2, ip
 8016534:	f10c 0c04 	add.w	ip, ip, #4
 8016538:	4463      	add	r3, ip
 801653a:	6033      	str	r3, [r6, #0]
 801653c:	6823      	ldr	r3, [r4, #0]
 801653e:	4463      	add	r3, ip
 8016540:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016544:	603b      	str	r3, [r7, #0]
 8016546:	7b22      	ldrb	r2, [r4, #12]
 8016548:	429a      	cmp	r2, r3
 801654a:	d0d2      	beq.n	80164f2 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801654c:	4640      	mov	r0, r8
 801654e:	b002      	add	sp, #8
 8016550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016554 <uxr_process_acknack>:
 8016554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016556:	4604      	mov	r4, r0
 8016558:	460e      	mov	r6, r1
 801655a:	4610      	mov	r0, r2
 801655c:	2101      	movs	r1, #1
 801655e:	f000 f855 	bl	801660c <uxr_seq_num_sub>
 8016562:	8a61      	ldrh	r1, [r4, #18]
 8016564:	f000 f852 	bl	801660c <uxr_seq_num_sub>
 8016568:	b1c0      	cbz	r0, 801659c <uxr_process_acknack+0x48>
 801656a:	4605      	mov	r5, r0
 801656c:	2700      	movs	r7, #0
 801656e:	2101      	movs	r1, #1
 8016570:	8a60      	ldrh	r0, [r4, #18]
 8016572:	f000 f847 	bl	8016604 <uxr_seq_num_add>
 8016576:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801657a:	fbb0 f1fc 	udiv	r1, r0, ip
 801657e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016582:	fb0c 0111 	mls	r1, ip, r1, r0
 8016586:	b289      	uxth	r1, r1
 8016588:	3701      	adds	r7, #1
 801658a:	fbb3 f3fc 	udiv	r3, r3, ip
 801658e:	fb01 f303 	mul.w	r3, r1, r3
 8016592:	42bd      	cmp	r5, r7
 8016594:	7b21      	ldrb	r1, [r4, #12]
 8016596:	8260      	strh	r0, [r4, #18]
 8016598:	50d1      	str	r1, [r2, r3]
 801659a:	d1e8      	bne.n	801656e <uxr_process_acknack+0x1a>
 801659c:	3e00      	subs	r6, #0
 801659e:	f04f 0300 	mov.w	r3, #0
 80165a2:	bf18      	it	ne
 80165a4:	2601      	movne	r6, #1
 80165a6:	f884 3020 	strb.w	r3, [r4, #32]
 80165aa:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80165ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080165b0 <uxr_is_output_up_to_date>:
 80165b0:	8a01      	ldrh	r1, [r0, #16]
 80165b2:	8a40      	ldrh	r0, [r0, #18]
 80165b4:	b508      	push	{r3, lr}
 80165b6:	f000 f82d 	bl	8016614 <uxr_seq_num_cmp>
 80165ba:	fab0 f080 	clz	r0, r0
 80165be:	0940      	lsrs	r0, r0, #5
 80165c0:	bd08      	pop	{r3, pc}
 80165c2:	bf00      	nop

080165c4 <get_available_free_slots>:
 80165c4:	8902      	ldrh	r2, [r0, #8]
 80165c6:	b1da      	cbz	r2, 8016600 <get_available_free_slots+0x3c>
 80165c8:	b530      	push	{r4, r5, lr}
 80165ca:	2100      	movs	r1, #0
 80165cc:	6843      	ldr	r3, [r0, #4]
 80165ce:	6805      	ldr	r5, [r0, #0]
 80165d0:	7b04      	ldrb	r4, [r0, #12]
 80165d2:	fbb3 fef2 	udiv	lr, r3, r2
 80165d6:	4608      	mov	r0, r1
 80165d8:	460b      	mov	r3, r1
 80165da:	fbb3 fcf2 	udiv	ip, r3, r2
 80165de:	fb02 331c 	mls	r3, r2, ip, r3
 80165e2:	b29b      	uxth	r3, r3
 80165e4:	fb0e f303 	mul.w	r3, lr, r3
 80165e8:	3101      	adds	r1, #1
 80165ea:	f855 c003 	ldr.w	ip, [r5, r3]
 80165ee:	4564      	cmp	r4, ip
 80165f0:	bf08      	it	eq
 80165f2:	3001      	addeq	r0, #1
 80165f4:	b28b      	uxth	r3, r1
 80165f6:	bf08      	it	eq
 80165f8:	b280      	uxtheq	r0, r0
 80165fa:	4293      	cmp	r3, r2
 80165fc:	d3ed      	bcc.n	80165da <get_available_free_slots+0x16>
 80165fe:	bd30      	pop	{r4, r5, pc}
 8016600:	4610      	mov	r0, r2
 8016602:	4770      	bx	lr

08016604 <uxr_seq_num_add>:
 8016604:	4408      	add	r0, r1
 8016606:	b280      	uxth	r0, r0
 8016608:	4770      	bx	lr
 801660a:	bf00      	nop

0801660c <uxr_seq_num_sub>:
 801660c:	1a40      	subs	r0, r0, r1
 801660e:	b280      	uxth	r0, r0
 8016610:	4770      	bx	lr
 8016612:	bf00      	nop

08016614 <uxr_seq_num_cmp>:
 8016614:	4288      	cmp	r0, r1
 8016616:	d011      	beq.n	801663c <uxr_seq_num_cmp+0x28>
 8016618:	d309      	bcc.n	801662e <uxr_seq_num_cmp+0x1a>
 801661a:	4288      	cmp	r0, r1
 801661c:	d910      	bls.n	8016640 <uxr_seq_num_cmp+0x2c>
 801661e:	1a40      	subs	r0, r0, r1
 8016620:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8016624:	bfd4      	ite	le
 8016626:	2001      	movle	r0, #1
 8016628:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801662c:	4770      	bx	lr
 801662e:	1a0b      	subs	r3, r1, r0
 8016630:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016634:	daf1      	bge.n	801661a <uxr_seq_num_cmp+0x6>
 8016636:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801663a:	4770      	bx	lr
 801663c:	2000      	movs	r0, #0
 801663e:	4770      	bx	lr
 8016640:	2001      	movs	r0, #1
 8016642:	4770      	bx	lr

08016644 <rcl_get_default_domain_id>:
 8016644:	b530      	push	{r4, r5, lr}
 8016646:	b083      	sub	sp, #12
 8016648:	2300      	movs	r3, #0
 801664a:	9300      	str	r3, [sp, #0]
 801664c:	b1d0      	cbz	r0, 8016684 <rcl_get_default_domain_id+0x40>
 801664e:	4604      	mov	r4, r0
 8016650:	4669      	mov	r1, sp
 8016652:	4815      	ldr	r0, [pc, #84]	@ (80166a8 <rcl_get_default_domain_id+0x64>)
 8016654:	f7fd ff58 	bl	8014508 <rcutils_get_env>
 8016658:	4602      	mov	r2, r0
 801665a:	b110      	cbz	r0, 8016662 <rcl_get_default_domain_id+0x1e>
 801665c:	2001      	movs	r0, #1
 801665e:	b003      	add	sp, #12
 8016660:	bd30      	pop	{r4, r5, pc}
 8016662:	9b00      	ldr	r3, [sp, #0]
 8016664:	b18b      	cbz	r3, 801668a <rcl_get_default_domain_id+0x46>
 8016666:	7818      	ldrb	r0, [r3, #0]
 8016668:	2800      	cmp	r0, #0
 801666a:	d0f8      	beq.n	801665e <rcl_get_default_domain_id+0x1a>
 801666c:	a901      	add	r1, sp, #4
 801666e:	4618      	mov	r0, r3
 8016670:	9201      	str	r2, [sp, #4]
 8016672:	f000 fdc9 	bl	8017208 <strtoul>
 8016676:	4605      	mov	r5, r0
 8016678:	b150      	cbz	r0, 8016690 <rcl_get_default_domain_id+0x4c>
 801667a:	1c43      	adds	r3, r0, #1
 801667c:	d00d      	beq.n	801669a <rcl_get_default_domain_id+0x56>
 801667e:	6025      	str	r5, [r4, #0]
 8016680:	2000      	movs	r0, #0
 8016682:	e7ec      	b.n	801665e <rcl_get_default_domain_id+0x1a>
 8016684:	200b      	movs	r0, #11
 8016686:	b003      	add	sp, #12
 8016688:	bd30      	pop	{r4, r5, pc}
 801668a:	4618      	mov	r0, r3
 801668c:	b003      	add	sp, #12
 801668e:	bd30      	pop	{r4, r5, pc}
 8016690:	9b01      	ldr	r3, [sp, #4]
 8016692:	781b      	ldrb	r3, [r3, #0]
 8016694:	2b00      	cmp	r3, #0
 8016696:	d0f2      	beq.n	801667e <rcl_get_default_domain_id+0x3a>
 8016698:	e7e0      	b.n	801665c <rcl_get_default_domain_id+0x18>
 801669a:	f001 f801 	bl	80176a0 <__errno>
 801669e:	6803      	ldr	r3, [r0, #0]
 80166a0:	2b22      	cmp	r3, #34	@ 0x22
 80166a2:	d1ec      	bne.n	801667e <rcl_get_default_domain_id+0x3a>
 80166a4:	e7da      	b.n	801665c <rcl_get_default_domain_id+0x18>
 80166a6:	bf00      	nop
 80166a8:	0801906c 	.word	0x0801906c

080166ac <rcl_expand_topic_name>:
 80166ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166b0:	b08b      	sub	sp, #44	@ 0x2c
 80166b2:	9306      	str	r3, [sp, #24]
 80166b4:	2800      	cmp	r0, #0
 80166b6:	f000 80ad 	beq.w	8016814 <rcl_expand_topic_name+0x168>
 80166ba:	460e      	mov	r6, r1
 80166bc:	2900      	cmp	r1, #0
 80166be:	f000 80a9 	beq.w	8016814 <rcl_expand_topic_name+0x168>
 80166c2:	4617      	mov	r7, r2
 80166c4:	2a00      	cmp	r2, #0
 80166c6:	f000 80a5 	beq.w	8016814 <rcl_expand_topic_name+0x168>
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	f000 80a2 	beq.w	8016814 <rcl_expand_topic_name+0x168>
 80166d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	f000 809e 	beq.w	8016814 <rcl_expand_topic_name+0x168>
 80166d8:	2200      	movs	r2, #0
 80166da:	a909      	add	r1, sp, #36	@ 0x24
 80166dc:	4680      	mov	r8, r0
 80166de:	f000 fa57 	bl	8016b90 <rcl_validate_topic_name>
 80166e2:	4604      	mov	r4, r0
 80166e4:	2800      	cmp	r0, #0
 80166e6:	f040 8096 	bne.w	8016816 <rcl_expand_topic_name+0x16a>
 80166ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	f040 809a 	bne.w	8016826 <rcl_expand_topic_name+0x17a>
 80166f2:	4602      	mov	r2, r0
 80166f4:	a909      	add	r1, sp, #36	@ 0x24
 80166f6:	4630      	mov	r0, r6
 80166f8:	f7fe fb30 	bl	8014d5c <rmw_validate_node_name>
 80166fc:	2800      	cmp	r0, #0
 80166fe:	f040 808e 	bne.w	801681e <rcl_expand_topic_name+0x172>
 8016702:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016704:	2a00      	cmp	r2, #0
 8016706:	f040 8093 	bne.w	8016830 <rcl_expand_topic_name+0x184>
 801670a:	a909      	add	r1, sp, #36	@ 0x24
 801670c:	4638      	mov	r0, r7
 801670e:	f7fe fb07 	bl	8014d20 <rmw_validate_namespace>
 8016712:	2800      	cmp	r0, #0
 8016714:	f040 8083 	bne.w	801681e <rcl_expand_topic_name+0x172>
 8016718:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801671a:	2c00      	cmp	r4, #0
 801671c:	f040 80ed 	bne.w	80168fa <rcl_expand_topic_name+0x24e>
 8016720:	217b      	movs	r1, #123	@ 0x7b
 8016722:	4640      	mov	r0, r8
 8016724:	f000 ff30 	bl	8017588 <strchr>
 8016728:	f898 3000 	ldrb.w	r3, [r8]
 801672c:	2b2f      	cmp	r3, #47	@ 0x2f
 801672e:	4605      	mov	r5, r0
 8016730:	f000 809e 	beq.w	8016870 <rcl_expand_topic_name+0x1c4>
 8016734:	2b7e      	cmp	r3, #126	@ 0x7e
 8016736:	f040 80a2 	bne.w	801687e <rcl_expand_topic_name+0x1d2>
 801673a:	4638      	mov	r0, r7
 801673c:	f7e9 fd7a 	bl	8000234 <strlen>
 8016740:	4a82      	ldr	r2, [pc, #520]	@ (801694c <rcl_expand_topic_name+0x2a0>)
 8016742:	4b83      	ldr	r3, [pc, #524]	@ (8016950 <rcl_expand_topic_name+0x2a4>)
 8016744:	2801      	cmp	r0, #1
 8016746:	bf18      	it	ne
 8016748:	4613      	movne	r3, r2
 801674a:	9302      	str	r3, [sp, #8]
 801674c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801674e:	9300      	str	r3, [sp, #0]
 8016750:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8016754:	f108 0301 	add.w	r3, r8, #1
 8016758:	9305      	str	r3, [sp, #20]
 801675a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801675e:	9301      	str	r3, [sp, #4]
 8016760:	ab14      	add	r3, sp, #80	@ 0x50
 8016762:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016764:	f7fd fef8 	bl	8014558 <rcutils_format_string_limit>
 8016768:	4682      	mov	sl, r0
 801676a:	2800      	cmp	r0, #0
 801676c:	f000 80c7 	beq.w	80168fe <rcl_expand_topic_name+0x252>
 8016770:	2d00      	cmp	r5, #0
 8016772:	f000 80a2 	beq.w	80168ba <rcl_expand_topic_name+0x20e>
 8016776:	217b      	movs	r1, #123	@ 0x7b
 8016778:	f000 ff06 	bl	8017588 <strchr>
 801677c:	46d1      	mov	r9, sl
 801677e:	4605      	mov	r5, r0
 8016780:	9407      	str	r4, [sp, #28]
 8016782:	46d3      	mov	fp, sl
 8016784:	464c      	mov	r4, r9
 8016786:	2d00      	cmp	r5, #0
 8016788:	f000 80be 	beq.w	8016908 <rcl_expand_topic_name+0x25c>
 801678c:	217d      	movs	r1, #125	@ 0x7d
 801678e:	4620      	mov	r0, r4
 8016790:	f000 fefa 	bl	8017588 <strchr>
 8016794:	eba0 0905 	sub.w	r9, r0, r5
 8016798:	f109 0a01 	add.w	sl, r9, #1
 801679c:	486d      	ldr	r0, [pc, #436]	@ (8016954 <rcl_expand_topic_name+0x2a8>)
 801679e:	4652      	mov	r2, sl
 80167a0:	4629      	mov	r1, r5
 80167a2:	f000 fefe 	bl	80175a2 <strncmp>
 80167a6:	2800      	cmp	r0, #0
 80167a8:	d067      	beq.n	801687a <rcl_expand_topic_name+0x1ce>
 80167aa:	486b      	ldr	r0, [pc, #428]	@ (8016958 <rcl_expand_topic_name+0x2ac>)
 80167ac:	4652      	mov	r2, sl
 80167ae:	4629      	mov	r1, r5
 80167b0:	f000 fef7 	bl	80175a2 <strncmp>
 80167b4:	b130      	cbz	r0, 80167c4 <rcl_expand_topic_name+0x118>
 80167b6:	4869      	ldr	r0, [pc, #420]	@ (801695c <rcl_expand_topic_name+0x2b0>)
 80167b8:	4652      	mov	r2, sl
 80167ba:	4629      	mov	r1, r5
 80167bc:	f000 fef1 	bl	80175a2 <strncmp>
 80167c0:	2800      	cmp	r0, #0
 80167c2:	d137      	bne.n	8016834 <rcl_expand_topic_name+0x188>
 80167c4:	46b9      	mov	r9, r7
 80167c6:	ab16      	add	r3, sp, #88	@ 0x58
 80167c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80167cc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80167d0:	ab14      	add	r3, sp, #80	@ 0x50
 80167d2:	4628      	mov	r0, r5
 80167d4:	cb0c      	ldmia	r3, {r2, r3}
 80167d6:	4651      	mov	r1, sl
 80167d8:	f7fd fffa 	bl	80147d0 <rcutils_strndup>
 80167dc:	4605      	mov	r5, r0
 80167de:	2800      	cmp	r0, #0
 80167e0:	f000 809c 	beq.w	801691c <rcl_expand_topic_name+0x270>
 80167e4:	464a      	mov	r2, r9
 80167e6:	4620      	mov	r0, r4
 80167e8:	ab14      	add	r3, sp, #80	@ 0x50
 80167ea:	4629      	mov	r1, r5
 80167ec:	f7fd feee 	bl	80145cc <rcutils_repl_str>
 80167f0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80167f2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80167f4:	4604      	mov	r4, r0
 80167f6:	4628      	mov	r0, r5
 80167f8:	4798      	blx	r3
 80167fa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80167fc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80167fe:	4658      	mov	r0, fp
 8016800:	4798      	blx	r3
 8016802:	2c00      	cmp	r4, #0
 8016804:	d07b      	beq.n	80168fe <rcl_expand_topic_name+0x252>
 8016806:	217b      	movs	r1, #123	@ 0x7b
 8016808:	4620      	mov	r0, r4
 801680a:	f000 febd 	bl	8017588 <strchr>
 801680e:	46a3      	mov	fp, r4
 8016810:	4605      	mov	r5, r0
 8016812:	e7b8      	b.n	8016786 <rcl_expand_topic_name+0xda>
 8016814:	240b      	movs	r4, #11
 8016816:	4620      	mov	r0, r4
 8016818:	b00b      	add	sp, #44	@ 0x2c
 801681a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801681e:	f7fb f8a1 	bl	8011964 <rcl_convert_rmw_ret_to_rcl_ret>
 8016822:	4604      	mov	r4, r0
 8016824:	e7f7      	b.n	8016816 <rcl_expand_topic_name+0x16a>
 8016826:	2467      	movs	r4, #103	@ 0x67
 8016828:	4620      	mov	r0, r4
 801682a:	b00b      	add	sp, #44	@ 0x2c
 801682c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016830:	24c9      	movs	r4, #201	@ 0xc9
 8016832:	e7f0      	b.n	8016816 <rcl_expand_topic_name+0x16a>
 8016834:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8016838:	9806      	ldr	r0, [sp, #24]
 801683a:	1c69      	adds	r1, r5, #1
 801683c:	f7fe f8e2 	bl	8014a04 <rcutils_string_map_getn>
 8016840:	4681      	mov	r9, r0
 8016842:	2800      	cmp	r0, #0
 8016844:	d1bf      	bne.n	80167c6 <rcl_expand_topic_name+0x11a>
 8016846:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016848:	aa16      	add	r2, sp, #88	@ 0x58
 801684a:	6018      	str	r0, [r3, #0]
 801684c:	ca07      	ldmia	r2, {r0, r1, r2}
 801684e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016852:	ab14      	add	r3, sp, #80	@ 0x50
 8016854:	cb0c      	ldmia	r3, {r2, r3}
 8016856:	4651      	mov	r1, sl
 8016858:	4628      	mov	r0, r5
 801685a:	f7fd ffb9 	bl	80147d0 <rcutils_strndup>
 801685e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016860:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016862:	4798      	blx	r3
 8016864:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016866:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016868:	4658      	mov	r0, fp
 801686a:	2469      	movs	r4, #105	@ 0x69
 801686c:	4798      	blx	r3
 801686e:	e7d2      	b.n	8016816 <rcl_expand_topic_name+0x16a>
 8016870:	2800      	cmp	r0, #0
 8016872:	d05b      	beq.n	801692c <rcl_expand_topic_name+0x280>
 8016874:	46c1      	mov	r9, r8
 8016876:	46a2      	mov	sl, r4
 8016878:	e782      	b.n	8016780 <rcl_expand_topic_name+0xd4>
 801687a:	46b1      	mov	r9, r6
 801687c:	e7a3      	b.n	80167c6 <rcl_expand_topic_name+0x11a>
 801687e:	2800      	cmp	r0, #0
 8016880:	d1f8      	bne.n	8016874 <rcl_expand_topic_name+0x1c8>
 8016882:	4638      	mov	r0, r7
 8016884:	f7e9 fcd6 	bl	8000234 <strlen>
 8016888:	4a35      	ldr	r2, [pc, #212]	@ (8016960 <rcl_expand_topic_name+0x2b4>)
 801688a:	4b36      	ldr	r3, [pc, #216]	@ (8016964 <rcl_expand_topic_name+0x2b8>)
 801688c:	f8cd 8010 	str.w	r8, [sp, #16]
 8016890:	2801      	cmp	r0, #1
 8016892:	bf18      	it	ne
 8016894:	4613      	movne	r3, r2
 8016896:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801689a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801689e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80168a0:	9703      	str	r7, [sp, #12]
 80168a2:	9200      	str	r2, [sp, #0]
 80168a4:	ab14      	add	r3, sp, #80	@ 0x50
 80168a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80168a8:	f7fd fe56 	bl	8014558 <rcutils_format_string_limit>
 80168ac:	4682      	mov	sl, r0
 80168ae:	4653      	mov	r3, sl
 80168b0:	b32b      	cbz	r3, 80168fe <rcl_expand_topic_name+0x252>
 80168b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80168b4:	f8c3 a000 	str.w	sl, [r3]
 80168b8:	e7ad      	b.n	8016816 <rcl_expand_topic_name+0x16a>
 80168ba:	f89a 3000 	ldrb.w	r3, [sl]
 80168be:	2b2f      	cmp	r3, #47	@ 0x2f
 80168c0:	d0f7      	beq.n	80168b2 <rcl_expand_topic_name+0x206>
 80168c2:	4638      	mov	r0, r7
 80168c4:	f7e9 fcb6 	bl	8000234 <strlen>
 80168c8:	4a25      	ldr	r2, [pc, #148]	@ (8016960 <rcl_expand_topic_name+0x2b4>)
 80168ca:	4b26      	ldr	r3, [pc, #152]	@ (8016964 <rcl_expand_topic_name+0x2b8>)
 80168cc:	f8cd a010 	str.w	sl, [sp, #16]
 80168d0:	2801      	cmp	r0, #1
 80168d2:	bf18      	it	ne
 80168d4:	4613      	movne	r3, r2
 80168d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80168da:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80168de:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80168e0:	9703      	str	r7, [sp, #12]
 80168e2:	9200      	str	r2, [sp, #0]
 80168e4:	ab14      	add	r3, sp, #80	@ 0x50
 80168e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80168e8:	f7fd fe36 	bl	8014558 <rcutils_format_string_limit>
 80168ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80168ee:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80168f0:	4605      	mov	r5, r0
 80168f2:	4650      	mov	r0, sl
 80168f4:	4798      	blx	r3
 80168f6:	46aa      	mov	sl, r5
 80168f8:	e7d9      	b.n	80168ae <rcl_expand_topic_name+0x202>
 80168fa:	24ca      	movs	r4, #202	@ 0xca
 80168fc:	e78b      	b.n	8016816 <rcl_expand_topic_name+0x16a>
 80168fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016900:	2300      	movs	r3, #0
 8016902:	6013      	str	r3, [r2, #0]
 8016904:	240a      	movs	r4, #10
 8016906:	e786      	b.n	8016816 <rcl_expand_topic_name+0x16a>
 8016908:	465b      	mov	r3, fp
 801690a:	9c07      	ldr	r4, [sp, #28]
 801690c:	46da      	mov	sl, fp
 801690e:	2b00      	cmp	r3, #0
 8016910:	d1d3      	bne.n	80168ba <rcl_expand_topic_name+0x20e>
 8016912:	f898 3000 	ldrb.w	r3, [r8]
 8016916:	2b2f      	cmp	r3, #47	@ 0x2f
 8016918:	d0cb      	beq.n	80168b2 <rcl_expand_topic_name+0x206>
 801691a:	e7b2      	b.n	8016882 <rcl_expand_topic_name+0x1d6>
 801691c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8016920:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016922:	6015      	str	r5, [r2, #0]
 8016924:	4658      	mov	r0, fp
 8016926:	4798      	blx	r3
 8016928:	240a      	movs	r4, #10
 801692a:	e774      	b.n	8016816 <rcl_expand_topic_name+0x16a>
 801692c:	ab17      	add	r3, sp, #92	@ 0x5c
 801692e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016932:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016936:	ab14      	add	r3, sp, #80	@ 0x50
 8016938:	cb0e      	ldmia	r3, {r1, r2, r3}
 801693a:	4640      	mov	r0, r8
 801693c:	f7fd ff26 	bl	801478c <rcutils_strdup>
 8016940:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016942:	2800      	cmp	r0, #0
 8016944:	6018      	str	r0, [r3, #0]
 8016946:	bf08      	it	eq
 8016948:	240a      	moveq	r4, #10
 801694a:	e764      	b.n	8016816 <rcl_expand_topic_name+0x16a>
 801694c:	0801907c 	.word	0x0801907c
 8016950:	080188d8 	.word	0x080188d8
 8016954:	08019084 	.word	0x08019084
 8016958:	0801908c 	.word	0x0801908c
 801695c:	08019094 	.word	0x08019094
 8016960:	080188c4 	.word	0x080188c4
 8016964:	080188e8 	.word	0x080188e8

08016968 <rcl_get_default_topic_name_substitutions>:
 8016968:	2800      	cmp	r0, #0
 801696a:	bf0c      	ite	eq
 801696c:	200b      	moveq	r0, #11
 801696e:	2000      	movne	r0, #0
 8016970:	4770      	bx	lr
 8016972:	bf00      	nop

08016974 <rcl_get_zero_initialized_guard_condition>:
 8016974:	4a03      	ldr	r2, [pc, #12]	@ (8016984 <rcl_get_zero_initialized_guard_condition+0x10>)
 8016976:	4603      	mov	r3, r0
 8016978:	e892 0003 	ldmia.w	r2, {r0, r1}
 801697c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016980:	4618      	mov	r0, r3
 8016982:	4770      	bx	lr
 8016984:	080190a0 	.word	0x080190a0

08016988 <rcl_guard_condition_init>:
 8016988:	b082      	sub	sp, #8
 801698a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801698c:	b087      	sub	sp, #28
 801698e:	ac0c      	add	r4, sp, #48	@ 0x30
 8016990:	e884 000c 	stmia.w	r4, {r2, r3}
 8016994:	46a6      	mov	lr, r4
 8016996:	460d      	mov	r5, r1
 8016998:	4604      	mov	r4, r0
 801699a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801699e:	f10d 0c04 	add.w	ip, sp, #4
 80169a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169a6:	f8de 3000 	ldr.w	r3, [lr]
 80169aa:	f8cc 3000 	str.w	r3, [ip]
 80169ae:	a801      	add	r0, sp, #4
 80169b0:	f7f6 f9a4 	bl	800ccfc <rcutils_allocator_is_valid>
 80169b4:	b338      	cbz	r0, 8016a06 <rcl_guard_condition_init+0x7e>
 80169b6:	b334      	cbz	r4, 8016a06 <rcl_guard_condition_init+0x7e>
 80169b8:	6866      	ldr	r6, [r4, #4]
 80169ba:	b9ee      	cbnz	r6, 80169f8 <rcl_guard_condition_init+0x70>
 80169bc:	b31d      	cbz	r5, 8016a06 <rcl_guard_condition_init+0x7e>
 80169be:	4628      	mov	r0, r5
 80169c0:	f7fa ffee 	bl	80119a0 <rcl_context_is_valid>
 80169c4:	b308      	cbz	r0, 8016a0a <rcl_guard_condition_init+0x82>
 80169c6:	9b01      	ldr	r3, [sp, #4]
 80169c8:	9905      	ldr	r1, [sp, #20]
 80169ca:	201c      	movs	r0, #28
 80169cc:	4798      	blx	r3
 80169ce:	4607      	mov	r7, r0
 80169d0:	6060      	str	r0, [r4, #4]
 80169d2:	b310      	cbz	r0, 8016a1a <rcl_guard_condition_init+0x92>
 80169d4:	6828      	ldr	r0, [r5, #0]
 80169d6:	3028      	adds	r0, #40	@ 0x28
 80169d8:	f000 f9ac 	bl	8016d34 <rmw_create_guard_condition>
 80169dc:	6038      	str	r0, [r7, #0]
 80169de:	6860      	ldr	r0, [r4, #4]
 80169e0:	6805      	ldr	r5, [r0, #0]
 80169e2:	b1a5      	cbz	r5, 8016a0e <rcl_guard_condition_init+0x86>
 80169e4:	2301      	movs	r3, #1
 80169e6:	ac01      	add	r4, sp, #4
 80169e8:	7103      	strb	r3, [r0, #4]
 80169ea:	f100 0708 	add.w	r7, r0, #8
 80169ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80169f0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80169f2:	6823      	ldr	r3, [r4, #0]
 80169f4:	603b      	str	r3, [r7, #0]
 80169f6:	e000      	b.n	80169fa <rcl_guard_condition_init+0x72>
 80169f8:	2664      	movs	r6, #100	@ 0x64
 80169fa:	4630      	mov	r0, r6
 80169fc:	b007      	add	sp, #28
 80169fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016a02:	b002      	add	sp, #8
 8016a04:	4770      	bx	lr
 8016a06:	260b      	movs	r6, #11
 8016a08:	e7f7      	b.n	80169fa <rcl_guard_condition_init+0x72>
 8016a0a:	2665      	movs	r6, #101	@ 0x65
 8016a0c:	e7f5      	b.n	80169fa <rcl_guard_condition_init+0x72>
 8016a0e:	9b02      	ldr	r3, [sp, #8]
 8016a10:	9905      	ldr	r1, [sp, #20]
 8016a12:	4798      	blx	r3
 8016a14:	2601      	movs	r6, #1
 8016a16:	6065      	str	r5, [r4, #4]
 8016a18:	e7ef      	b.n	80169fa <rcl_guard_condition_init+0x72>
 8016a1a:	260a      	movs	r6, #10
 8016a1c:	e7ed      	b.n	80169fa <rcl_guard_condition_init+0x72>
 8016a1e:	bf00      	nop

08016a20 <rcl_guard_condition_init_from_rmw>:
 8016a20:	b082      	sub	sp, #8
 8016a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a26:	b086      	sub	sp, #24
 8016a28:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8016a2c:	4604      	mov	r4, r0
 8016a2e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8016a32:	460e      	mov	r6, r1
 8016a34:	4617      	mov	r7, r2
 8016a36:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016a3a:	f10d 0e04 	add.w	lr, sp, #4
 8016a3e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016a42:	f8dc 3000 	ldr.w	r3, [ip]
 8016a46:	f8ce 3000 	str.w	r3, [lr]
 8016a4a:	a801      	add	r0, sp, #4
 8016a4c:	f7f6 f956 	bl	800ccfc <rcutils_allocator_is_valid>
 8016a50:	b350      	cbz	r0, 8016aa8 <rcl_guard_condition_init_from_rmw+0x88>
 8016a52:	b34c      	cbz	r4, 8016aa8 <rcl_guard_condition_init_from_rmw+0x88>
 8016a54:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016a58:	f1b8 0f00 	cmp.w	r8, #0
 8016a5c:	d11e      	bne.n	8016a9c <rcl_guard_condition_init_from_rmw+0x7c>
 8016a5e:	b31f      	cbz	r7, 8016aa8 <rcl_guard_condition_init_from_rmw+0x88>
 8016a60:	4638      	mov	r0, r7
 8016a62:	f7fa ff9d 	bl	80119a0 <rcl_context_is_valid>
 8016a66:	b328      	cbz	r0, 8016ab4 <rcl_guard_condition_init_from_rmw+0x94>
 8016a68:	9b01      	ldr	r3, [sp, #4]
 8016a6a:	9905      	ldr	r1, [sp, #20]
 8016a6c:	201c      	movs	r0, #28
 8016a6e:	4798      	blx	r3
 8016a70:	4605      	mov	r5, r0
 8016a72:	6060      	str	r0, [r4, #4]
 8016a74:	b358      	cbz	r0, 8016ace <rcl_guard_condition_init_from_rmw+0xae>
 8016a76:	b1fe      	cbz	r6, 8016ab8 <rcl_guard_condition_init_from_rmw+0x98>
 8016a78:	6006      	str	r6, [r0, #0]
 8016a7a:	f880 8004 	strb.w	r8, [r0, #4]
 8016a7e:	ac01      	add	r4, sp, #4
 8016a80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a82:	f105 0c08 	add.w	ip, r5, #8
 8016a86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a8a:	6823      	ldr	r3, [r4, #0]
 8016a8c:	f8cc 3000 	str.w	r3, [ip]
 8016a90:	2000      	movs	r0, #0
 8016a92:	b006      	add	sp, #24
 8016a94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a98:	b002      	add	sp, #8
 8016a9a:	4770      	bx	lr
 8016a9c:	2064      	movs	r0, #100	@ 0x64
 8016a9e:	b006      	add	sp, #24
 8016aa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016aa4:	b002      	add	sp, #8
 8016aa6:	4770      	bx	lr
 8016aa8:	200b      	movs	r0, #11
 8016aaa:	b006      	add	sp, #24
 8016aac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ab0:	b002      	add	sp, #8
 8016ab2:	4770      	bx	lr
 8016ab4:	2065      	movs	r0, #101	@ 0x65
 8016ab6:	e7f2      	b.n	8016a9e <rcl_guard_condition_init_from_rmw+0x7e>
 8016ab8:	6838      	ldr	r0, [r7, #0]
 8016aba:	3028      	adds	r0, #40	@ 0x28
 8016abc:	f000 f93a 	bl	8016d34 <rmw_create_guard_condition>
 8016ac0:	6028      	str	r0, [r5, #0]
 8016ac2:	6865      	ldr	r5, [r4, #4]
 8016ac4:	682e      	ldr	r6, [r5, #0]
 8016ac6:	b126      	cbz	r6, 8016ad2 <rcl_guard_condition_init_from_rmw+0xb2>
 8016ac8:	2301      	movs	r3, #1
 8016aca:	712b      	strb	r3, [r5, #4]
 8016acc:	e7d7      	b.n	8016a7e <rcl_guard_condition_init_from_rmw+0x5e>
 8016ace:	200a      	movs	r0, #10
 8016ad0:	e7e5      	b.n	8016a9e <rcl_guard_condition_init_from_rmw+0x7e>
 8016ad2:	4628      	mov	r0, r5
 8016ad4:	9b02      	ldr	r3, [sp, #8]
 8016ad6:	9905      	ldr	r1, [sp, #20]
 8016ad8:	4798      	blx	r3
 8016ada:	6066      	str	r6, [r4, #4]
 8016adc:	2001      	movs	r0, #1
 8016ade:	e7de      	b.n	8016a9e <rcl_guard_condition_init_from_rmw+0x7e>

08016ae0 <rcl_guard_condition_fini>:
 8016ae0:	b570      	push	{r4, r5, r6, lr}
 8016ae2:	b082      	sub	sp, #8
 8016ae4:	b1f0      	cbz	r0, 8016b24 <rcl_guard_condition_fini+0x44>
 8016ae6:	6843      	ldr	r3, [r0, #4]
 8016ae8:	4604      	mov	r4, r0
 8016aea:	b163      	cbz	r3, 8016b06 <rcl_guard_condition_fini+0x26>
 8016aec:	6818      	ldr	r0, [r3, #0]
 8016aee:	68de      	ldr	r6, [r3, #12]
 8016af0:	6999      	ldr	r1, [r3, #24]
 8016af2:	b160      	cbz	r0, 8016b0e <rcl_guard_condition_fini+0x2e>
 8016af4:	791d      	ldrb	r5, [r3, #4]
 8016af6:	b965      	cbnz	r5, 8016b12 <rcl_guard_condition_fini+0x32>
 8016af8:	4618      	mov	r0, r3
 8016afa:	47b0      	blx	r6
 8016afc:	2300      	movs	r3, #0
 8016afe:	4628      	mov	r0, r5
 8016b00:	6063      	str	r3, [r4, #4]
 8016b02:	b002      	add	sp, #8
 8016b04:	bd70      	pop	{r4, r5, r6, pc}
 8016b06:	461d      	mov	r5, r3
 8016b08:	4628      	mov	r0, r5
 8016b0a:	b002      	add	sp, #8
 8016b0c:	bd70      	pop	{r4, r5, r6, pc}
 8016b0e:	4605      	mov	r5, r0
 8016b10:	e7f2      	b.n	8016af8 <rcl_guard_condition_fini+0x18>
 8016b12:	9101      	str	r1, [sp, #4]
 8016b14:	f000 f922 	bl	8016d5c <rmw_destroy_guard_condition>
 8016b18:	1e05      	subs	r5, r0, #0
 8016b1a:	6863      	ldr	r3, [r4, #4]
 8016b1c:	9901      	ldr	r1, [sp, #4]
 8016b1e:	bf18      	it	ne
 8016b20:	2501      	movne	r5, #1
 8016b22:	e7e9      	b.n	8016af8 <rcl_guard_condition_fini+0x18>
 8016b24:	250b      	movs	r5, #11
 8016b26:	4628      	mov	r0, r5
 8016b28:	b002      	add	sp, #8
 8016b2a:	bd70      	pop	{r4, r5, r6, pc}

08016b2c <rcl_guard_condition_get_default_options>:
 8016b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b2e:	b087      	sub	sp, #28
 8016b30:	4606      	mov	r6, r0
 8016b32:	4668      	mov	r0, sp
 8016b34:	f7f6 f8d4 	bl	800cce0 <rcutils_get_default_allocator>
 8016b38:	4b09      	ldr	r3, [pc, #36]	@ (8016b60 <rcl_guard_condition_get_default_options+0x34>)
 8016b3a:	46ee      	mov	lr, sp
 8016b3c:	469c      	mov	ip, r3
 8016b3e:	461d      	mov	r5, r3
 8016b40:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016b44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016b4a:	4634      	mov	r4, r6
 8016b4c:	f8de 7000 	ldr.w	r7, [lr]
 8016b50:	f8cc 7000 	str.w	r7, [ip]
 8016b54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016b56:	4630      	mov	r0, r6
 8016b58:	6027      	str	r7, [r4, #0]
 8016b5a:	b007      	add	sp, #28
 8016b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b5e:	bf00      	nop
 8016b60:	2000af30 	.word	0x2000af30

08016b64 <rcl_trigger_guard_condition>:
 8016b64:	b148      	cbz	r0, 8016b7a <rcl_trigger_guard_condition+0x16>
 8016b66:	b508      	push	{r3, lr}
 8016b68:	6843      	ldr	r3, [r0, #4]
 8016b6a:	b143      	cbz	r3, 8016b7e <rcl_trigger_guard_condition+0x1a>
 8016b6c:	6818      	ldr	r0, [r3, #0]
 8016b6e:	f000 f909 	bl	8016d84 <rmw_trigger_guard_condition>
 8016b72:	3800      	subs	r0, #0
 8016b74:	bf18      	it	ne
 8016b76:	2001      	movne	r0, #1
 8016b78:	bd08      	pop	{r3, pc}
 8016b7a:	200b      	movs	r0, #11
 8016b7c:	4770      	bx	lr
 8016b7e:	200b      	movs	r0, #11
 8016b80:	bd08      	pop	{r3, pc}
 8016b82:	bf00      	nop

08016b84 <rcl_guard_condition_get_rmw_handle>:
 8016b84:	b110      	cbz	r0, 8016b8c <rcl_guard_condition_get_rmw_handle+0x8>
 8016b86:	6840      	ldr	r0, [r0, #4]
 8016b88:	b100      	cbz	r0, 8016b8c <rcl_guard_condition_get_rmw_handle+0x8>
 8016b8a:	6800      	ldr	r0, [r0, #0]
 8016b8c:	4770      	bx	lr
 8016b8e:	bf00      	nop

08016b90 <rcl_validate_topic_name>:
 8016b90:	2800      	cmp	r0, #0
 8016b92:	d07a      	beq.n	8016c8a <rcl_validate_topic_name+0xfa>
 8016b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b98:	460e      	mov	r6, r1
 8016b9a:	2900      	cmp	r1, #0
 8016b9c:	d07c      	beq.n	8016c98 <rcl_validate_topic_name+0x108>
 8016b9e:	4617      	mov	r7, r2
 8016ba0:	4605      	mov	r5, r0
 8016ba2:	f7e9 fb47 	bl	8000234 <strlen>
 8016ba6:	b1b0      	cbz	r0, 8016bd6 <rcl_validate_topic_name+0x46>
 8016ba8:	f895 9000 	ldrb.w	r9, [r5]
 8016bac:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8016d30 <rcl_validate_topic_name+0x1a0>
 8016bb0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8016bb4:	f013 0304 	ands.w	r3, r3, #4
 8016bb8:	d169      	bne.n	8016c8e <rcl_validate_topic_name+0xfe>
 8016bba:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8016bbe:	f815 2008 	ldrb.w	r2, [r5, r8]
 8016bc2:	2a2f      	cmp	r2, #47	@ 0x2f
 8016bc4:	d10e      	bne.n	8016be4 <rcl_validate_topic_name+0x54>
 8016bc6:	2202      	movs	r2, #2
 8016bc8:	6032      	str	r2, [r6, #0]
 8016bca:	b36f      	cbz	r7, 8016c28 <rcl_validate_topic_name+0x98>
 8016bcc:	f8c7 8000 	str.w	r8, [r7]
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bd6:	2301      	movs	r3, #1
 8016bd8:	6033      	str	r3, [r6, #0]
 8016bda:	b32f      	cbz	r7, 8016c28 <rcl_validate_topic_name+0x98>
 8016bdc:	2000      	movs	r0, #0
 8016bde:	6038      	str	r0, [r7, #0]
 8016be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016be4:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8016be8:	461c      	mov	r4, r3
 8016bea:	4619      	mov	r1, r3
 8016bec:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8016bf0:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016bf4:	f1be 0f09 	cmp.w	lr, #9
 8016bf8:	d919      	bls.n	8016c2e <rcl_validate_topic_name+0x9e>
 8016bfa:	f022 0e20 	bic.w	lr, r2, #32
 8016bfe:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8016c02:	f1be 0f19 	cmp.w	lr, #25
 8016c06:	d912      	bls.n	8016c2e <rcl_validate_topic_name+0x9e>
 8016c08:	2a5f      	cmp	r2, #95	@ 0x5f
 8016c0a:	d019      	beq.n	8016c40 <rcl_validate_topic_name+0xb0>
 8016c0c:	2a2f      	cmp	r2, #47	@ 0x2f
 8016c0e:	d051      	beq.n	8016cb4 <rcl_validate_topic_name+0x124>
 8016c10:	2a7e      	cmp	r2, #126	@ 0x7e
 8016c12:	d048      	beq.n	8016ca6 <rcl_validate_topic_name+0x116>
 8016c14:	2a7b      	cmp	r2, #123	@ 0x7b
 8016c16:	d054      	beq.n	8016cc2 <rcl_validate_topic_name+0x132>
 8016c18:	2a7d      	cmp	r2, #125	@ 0x7d
 8016c1a:	d161      	bne.n	8016ce0 <rcl_validate_topic_name+0x150>
 8016c1c:	2c00      	cmp	r4, #0
 8016c1e:	d155      	bne.n	8016ccc <rcl_validate_topic_name+0x13c>
 8016c20:	2305      	movs	r3, #5
 8016c22:	6033      	str	r3, [r6, #0]
 8016c24:	b107      	cbz	r7, 8016c28 <rcl_validate_topic_name+0x98>
 8016c26:	6039      	str	r1, [r7, #0]
 8016c28:	2000      	movs	r0, #0
 8016c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c2e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016c32:	0752      	lsls	r2, r2, #29
 8016c34:	d504      	bpl.n	8016c40 <rcl_validate_topic_name+0xb0>
 8016c36:	b11c      	cbz	r4, 8016c40 <rcl_validate_topic_name+0xb0>
 8016c38:	b111      	cbz	r1, 8016c40 <rcl_validate_topic_name+0xb0>
 8016c3a:	1e4a      	subs	r2, r1, #1
 8016c3c:	429a      	cmp	r2, r3
 8016c3e:	d02d      	beq.n	8016c9c <rcl_validate_topic_name+0x10c>
 8016c40:	3101      	adds	r1, #1
 8016c42:	4288      	cmp	r0, r1
 8016c44:	d1d2      	bne.n	8016bec <rcl_validate_topic_name+0x5c>
 8016c46:	2c00      	cmp	r4, #0
 8016c48:	d145      	bne.n	8016cd6 <rcl_validate_topic_name+0x146>
 8016c4a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8016c4e:	d04f      	beq.n	8016cf0 <rcl_validate_topic_name+0x160>
 8016c50:	4620      	mov	r0, r4
 8016c52:	2301      	movs	r3, #1
 8016c54:	e006      	b.n	8016c64 <rcl_validate_topic_name+0xd4>
 8016c56:	428b      	cmp	r3, r1
 8016c58:	f105 0501 	add.w	r5, r5, #1
 8016c5c:	f103 0201 	add.w	r2, r3, #1
 8016c60:	d236      	bcs.n	8016cd0 <rcl_validate_topic_name+0x140>
 8016c62:	4613      	mov	r3, r2
 8016c64:	4580      	cmp	r8, r0
 8016c66:	f100 0001 	add.w	r0, r0, #1
 8016c6a:	d0f4      	beq.n	8016c56 <rcl_validate_topic_name+0xc6>
 8016c6c:	782a      	ldrb	r2, [r5, #0]
 8016c6e:	2a2f      	cmp	r2, #47	@ 0x2f
 8016c70:	d1f1      	bne.n	8016c56 <rcl_validate_topic_name+0xc6>
 8016c72:	786a      	ldrb	r2, [r5, #1]
 8016c74:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016c78:	0754      	lsls	r4, r2, #29
 8016c7a:	d5ec      	bpl.n	8016c56 <rcl_validate_topic_name+0xc6>
 8016c7c:	2204      	movs	r2, #4
 8016c7e:	6032      	str	r2, [r6, #0]
 8016c80:	2f00      	cmp	r7, #0
 8016c82:	d0d1      	beq.n	8016c28 <rcl_validate_topic_name+0x98>
 8016c84:	603b      	str	r3, [r7, #0]
 8016c86:	2000      	movs	r0, #0
 8016c88:	e7aa      	b.n	8016be0 <rcl_validate_topic_name+0x50>
 8016c8a:	200b      	movs	r0, #11
 8016c8c:	4770      	bx	lr
 8016c8e:	2304      	movs	r3, #4
 8016c90:	6033      	str	r3, [r6, #0]
 8016c92:	2f00      	cmp	r7, #0
 8016c94:	d1a2      	bne.n	8016bdc <rcl_validate_topic_name+0x4c>
 8016c96:	e7c7      	b.n	8016c28 <rcl_validate_topic_name+0x98>
 8016c98:	200b      	movs	r0, #11
 8016c9a:	e7a1      	b.n	8016be0 <rcl_validate_topic_name+0x50>
 8016c9c:	2309      	movs	r3, #9
 8016c9e:	6033      	str	r3, [r6, #0]
 8016ca0:	2f00      	cmp	r7, #0
 8016ca2:	d1c0      	bne.n	8016c26 <rcl_validate_topic_name+0x96>
 8016ca4:	e7c0      	b.n	8016c28 <rcl_validate_topic_name+0x98>
 8016ca6:	2900      	cmp	r1, #0
 8016ca8:	d0ca      	beq.n	8016c40 <rcl_validate_topic_name+0xb0>
 8016caa:	2306      	movs	r3, #6
 8016cac:	6033      	str	r3, [r6, #0]
 8016cae:	2f00      	cmp	r7, #0
 8016cb0:	d1b9      	bne.n	8016c26 <rcl_validate_topic_name+0x96>
 8016cb2:	e7b9      	b.n	8016c28 <rcl_validate_topic_name+0x98>
 8016cb4:	2c00      	cmp	r4, #0
 8016cb6:	d0c3      	beq.n	8016c40 <rcl_validate_topic_name+0xb0>
 8016cb8:	2308      	movs	r3, #8
 8016cba:	6033      	str	r3, [r6, #0]
 8016cbc:	2f00      	cmp	r7, #0
 8016cbe:	d1b2      	bne.n	8016c26 <rcl_validate_topic_name+0x96>
 8016cc0:	e7b2      	b.n	8016c28 <rcl_validate_topic_name+0x98>
 8016cc2:	2c00      	cmp	r4, #0
 8016cc4:	d1f8      	bne.n	8016cb8 <rcl_validate_topic_name+0x128>
 8016cc6:	460b      	mov	r3, r1
 8016cc8:	2401      	movs	r4, #1
 8016cca:	e7b9      	b.n	8016c40 <rcl_validate_topic_name+0xb0>
 8016ccc:	2400      	movs	r4, #0
 8016cce:	e7b7      	b.n	8016c40 <rcl_validate_topic_name+0xb0>
 8016cd0:	2000      	movs	r0, #0
 8016cd2:	6030      	str	r0, [r6, #0]
 8016cd4:	e784      	b.n	8016be0 <rcl_validate_topic_name+0x50>
 8016cd6:	2205      	movs	r2, #5
 8016cd8:	6032      	str	r2, [r6, #0]
 8016cda:	2f00      	cmp	r7, #0
 8016cdc:	d1d2      	bne.n	8016c84 <rcl_validate_topic_name+0xf4>
 8016cde:	e7a3      	b.n	8016c28 <rcl_validate_topic_name+0x98>
 8016ce0:	2c00      	cmp	r4, #0
 8016ce2:	bf14      	ite	ne
 8016ce4:	2308      	movne	r3, #8
 8016ce6:	2303      	moveq	r3, #3
 8016ce8:	6033      	str	r3, [r6, #0]
 8016cea:	2f00      	cmp	r7, #0
 8016cec:	d19b      	bne.n	8016c26 <rcl_validate_topic_name+0x96>
 8016cee:	e79b      	b.n	8016c28 <rcl_validate_topic_name+0x98>
 8016cf0:	2301      	movs	r3, #1
 8016cf2:	e00a      	b.n	8016d0a <rcl_validate_topic_name+0x17a>
 8016cf4:	2c01      	cmp	r4, #1
 8016cf6:	d013      	beq.n	8016d20 <rcl_validate_topic_name+0x190>
 8016cf8:	4299      	cmp	r1, r3
 8016cfa:	f104 0401 	add.w	r4, r4, #1
 8016cfe:	f105 0501 	add.w	r5, r5, #1
 8016d02:	f103 0201 	add.w	r2, r3, #1
 8016d06:	d9e3      	bls.n	8016cd0 <rcl_validate_topic_name+0x140>
 8016d08:	4613      	mov	r3, r2
 8016d0a:	45a0      	cmp	r8, r4
 8016d0c:	d0f4      	beq.n	8016cf8 <rcl_validate_topic_name+0x168>
 8016d0e:	782a      	ldrb	r2, [r5, #0]
 8016d10:	2a2f      	cmp	r2, #47	@ 0x2f
 8016d12:	d1ef      	bne.n	8016cf4 <rcl_validate_topic_name+0x164>
 8016d14:	786a      	ldrb	r2, [r5, #1]
 8016d16:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016d1a:	0752      	lsls	r2, r2, #29
 8016d1c:	d5ec      	bpl.n	8016cf8 <rcl_validate_topic_name+0x168>
 8016d1e:	e7ad      	b.n	8016c7c <rcl_validate_topic_name+0xec>
 8016d20:	2307      	movs	r3, #7
 8016d22:	6033      	str	r3, [r6, #0]
 8016d24:	2f00      	cmp	r7, #0
 8016d26:	f43f af7f 	beq.w	8016c28 <rcl_validate_topic_name+0x98>
 8016d2a:	603c      	str	r4, [r7, #0]
 8016d2c:	2000      	movs	r0, #0
 8016d2e:	e757      	b.n	8016be0 <rcl_validate_topic_name+0x50>
 8016d30:	08019118 	.word	0x08019118

08016d34 <rmw_create_guard_condition>:
 8016d34:	b538      	push	{r3, r4, r5, lr}
 8016d36:	4605      	mov	r5, r0
 8016d38:	4807      	ldr	r0, [pc, #28]	@ (8016d58 <rmw_create_guard_condition+0x24>)
 8016d3a:	f7fe f955 	bl	8014fe8 <get_memory>
 8016d3e:	b148      	cbz	r0, 8016d54 <rmw_create_guard_condition+0x20>
 8016d40:	6884      	ldr	r4, [r0, #8]
 8016d42:	2300      	movs	r3, #0
 8016d44:	7423      	strb	r3, [r4, #16]
 8016d46:	61e5      	str	r5, [r4, #28]
 8016d48:	f7fe f9b6 	bl	80150b8 <rmw_get_implementation_identifier>
 8016d4c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8016d50:	f104 0014 	add.w	r0, r4, #20
 8016d54:	bd38      	pop	{r3, r4, r5, pc}
 8016d56:	bf00      	nop
 8016d58:	2000adcc 	.word	0x2000adcc

08016d5c <rmw_destroy_guard_condition>:
 8016d5c:	b508      	push	{r3, lr}
 8016d5e:	4b08      	ldr	r3, [pc, #32]	@ (8016d80 <rmw_destroy_guard_condition+0x24>)
 8016d60:	6819      	ldr	r1, [r3, #0]
 8016d62:	b911      	cbnz	r1, 8016d6a <rmw_destroy_guard_condition+0xe>
 8016d64:	e00a      	b.n	8016d7c <rmw_destroy_guard_condition+0x20>
 8016d66:	6849      	ldr	r1, [r1, #4]
 8016d68:	b141      	cbz	r1, 8016d7c <rmw_destroy_guard_condition+0x20>
 8016d6a:	688b      	ldr	r3, [r1, #8]
 8016d6c:	3314      	adds	r3, #20
 8016d6e:	4298      	cmp	r0, r3
 8016d70:	d1f9      	bne.n	8016d66 <rmw_destroy_guard_condition+0xa>
 8016d72:	4803      	ldr	r0, [pc, #12]	@ (8016d80 <rmw_destroy_guard_condition+0x24>)
 8016d74:	f7fe f948 	bl	8015008 <put_memory>
 8016d78:	2000      	movs	r0, #0
 8016d7a:	bd08      	pop	{r3, pc}
 8016d7c:	2001      	movs	r0, #1
 8016d7e:	bd08      	pop	{r3, pc}
 8016d80:	2000adcc 	.word	0x2000adcc

08016d84 <rmw_trigger_guard_condition>:
 8016d84:	b160      	cbz	r0, 8016da0 <rmw_trigger_guard_condition+0x1c>
 8016d86:	b510      	push	{r4, lr}
 8016d88:	4604      	mov	r4, r0
 8016d8a:	6800      	ldr	r0, [r0, #0]
 8016d8c:	f7f7 f9a2 	bl	800e0d4 <is_uxrce_rmw_identifier_valid>
 8016d90:	b908      	cbnz	r0, 8016d96 <rmw_trigger_guard_condition+0x12>
 8016d92:	2001      	movs	r0, #1
 8016d94:	bd10      	pop	{r4, pc}
 8016d96:	6863      	ldr	r3, [r4, #4]
 8016d98:	2201      	movs	r2, #1
 8016d9a:	741a      	strb	r2, [r3, #16]
 8016d9c:	2000      	movs	r0, #0
 8016d9e:	bd10      	pop	{r4, pc}
 8016da0:	2001      	movs	r0, #1
 8016da2:	4770      	bx	lr

08016da4 <calloc>:
 8016da4:	4b02      	ldr	r3, [pc, #8]	@ (8016db0 <calloc+0xc>)
 8016da6:	460a      	mov	r2, r1
 8016da8:	4601      	mov	r1, r0
 8016daa:	6818      	ldr	r0, [r3, #0]
 8016dac:	f000 b802 	b.w	8016db4 <_calloc_r>
 8016db0:	200001e4 	.word	0x200001e4

08016db4 <_calloc_r>:
 8016db4:	b570      	push	{r4, r5, r6, lr}
 8016db6:	fba1 5402 	umull	r5, r4, r1, r2
 8016dba:	b93c      	cbnz	r4, 8016dcc <_calloc_r+0x18>
 8016dbc:	4629      	mov	r1, r5
 8016dbe:	f000 f887 	bl	8016ed0 <_malloc_r>
 8016dc2:	4606      	mov	r6, r0
 8016dc4:	b928      	cbnz	r0, 8016dd2 <_calloc_r+0x1e>
 8016dc6:	2600      	movs	r6, #0
 8016dc8:	4630      	mov	r0, r6
 8016dca:	bd70      	pop	{r4, r5, r6, pc}
 8016dcc:	220c      	movs	r2, #12
 8016dce:	6002      	str	r2, [r0, #0]
 8016dd0:	e7f9      	b.n	8016dc6 <_calloc_r+0x12>
 8016dd2:	462a      	mov	r2, r5
 8016dd4:	4621      	mov	r1, r4
 8016dd6:	f000 fbcf 	bl	8017578 <memset>
 8016dda:	e7f5      	b.n	8016dc8 <_calloc_r+0x14>

08016ddc <getenv>:
 8016ddc:	b507      	push	{r0, r1, r2, lr}
 8016dde:	4b04      	ldr	r3, [pc, #16]	@ (8016df0 <getenv+0x14>)
 8016de0:	4601      	mov	r1, r0
 8016de2:	aa01      	add	r2, sp, #4
 8016de4:	6818      	ldr	r0, [r3, #0]
 8016de6:	f000 f805 	bl	8016df4 <_findenv_r>
 8016dea:	b003      	add	sp, #12
 8016dec:	f85d fb04 	ldr.w	pc, [sp], #4
 8016df0:	200001e4 	.word	0x200001e4

08016df4 <_findenv_r>:
 8016df4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016df8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8016e68 <_findenv_r+0x74>
 8016dfc:	4606      	mov	r6, r0
 8016dfe:	4689      	mov	r9, r1
 8016e00:	4617      	mov	r7, r2
 8016e02:	f000 fcaf 	bl	8017764 <__env_lock>
 8016e06:	f8da 4000 	ldr.w	r4, [sl]
 8016e0a:	b134      	cbz	r4, 8016e1a <_findenv_r+0x26>
 8016e0c:	464b      	mov	r3, r9
 8016e0e:	4698      	mov	r8, r3
 8016e10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016e14:	b13a      	cbz	r2, 8016e26 <_findenv_r+0x32>
 8016e16:	2a3d      	cmp	r2, #61	@ 0x3d
 8016e18:	d1f9      	bne.n	8016e0e <_findenv_r+0x1a>
 8016e1a:	4630      	mov	r0, r6
 8016e1c:	f000 fca8 	bl	8017770 <__env_unlock>
 8016e20:	2000      	movs	r0, #0
 8016e22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e26:	eba8 0809 	sub.w	r8, r8, r9
 8016e2a:	46a3      	mov	fp, r4
 8016e2c:	f854 0b04 	ldr.w	r0, [r4], #4
 8016e30:	2800      	cmp	r0, #0
 8016e32:	d0f2      	beq.n	8016e1a <_findenv_r+0x26>
 8016e34:	4642      	mov	r2, r8
 8016e36:	4649      	mov	r1, r9
 8016e38:	f000 fbb3 	bl	80175a2 <strncmp>
 8016e3c:	2800      	cmp	r0, #0
 8016e3e:	d1f4      	bne.n	8016e2a <_findenv_r+0x36>
 8016e40:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016e44:	eb03 0508 	add.w	r5, r3, r8
 8016e48:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016e4c:	2b3d      	cmp	r3, #61	@ 0x3d
 8016e4e:	d1ec      	bne.n	8016e2a <_findenv_r+0x36>
 8016e50:	f8da 3000 	ldr.w	r3, [sl]
 8016e54:	ebab 0303 	sub.w	r3, fp, r3
 8016e58:	109b      	asrs	r3, r3, #2
 8016e5a:	4630      	mov	r0, r6
 8016e5c:	603b      	str	r3, [r7, #0]
 8016e5e:	f000 fc87 	bl	8017770 <__env_unlock>
 8016e62:	1c68      	adds	r0, r5, #1
 8016e64:	e7dd      	b.n	8016e22 <_findenv_r+0x2e>
 8016e66:	bf00      	nop
 8016e68:	20000000 	.word	0x20000000

08016e6c <malloc>:
 8016e6c:	4b02      	ldr	r3, [pc, #8]	@ (8016e78 <malloc+0xc>)
 8016e6e:	4601      	mov	r1, r0
 8016e70:	6818      	ldr	r0, [r3, #0]
 8016e72:	f000 b82d 	b.w	8016ed0 <_malloc_r>
 8016e76:	bf00      	nop
 8016e78:	200001e4 	.word	0x200001e4

08016e7c <free>:
 8016e7c:	4b02      	ldr	r3, [pc, #8]	@ (8016e88 <free+0xc>)
 8016e7e:	4601      	mov	r1, r0
 8016e80:	6818      	ldr	r0, [r3, #0]
 8016e82:	f000 bc7b 	b.w	801777c <_free_r>
 8016e86:	bf00      	nop
 8016e88:	200001e4 	.word	0x200001e4

08016e8c <sbrk_aligned>:
 8016e8c:	b570      	push	{r4, r5, r6, lr}
 8016e8e:	4e0f      	ldr	r6, [pc, #60]	@ (8016ecc <sbrk_aligned+0x40>)
 8016e90:	460c      	mov	r4, r1
 8016e92:	6831      	ldr	r1, [r6, #0]
 8016e94:	4605      	mov	r5, r0
 8016e96:	b911      	cbnz	r1, 8016e9e <sbrk_aligned+0x12>
 8016e98:	f000 fbe0 	bl	801765c <_sbrk_r>
 8016e9c:	6030      	str	r0, [r6, #0]
 8016e9e:	4621      	mov	r1, r4
 8016ea0:	4628      	mov	r0, r5
 8016ea2:	f000 fbdb 	bl	801765c <_sbrk_r>
 8016ea6:	1c43      	adds	r3, r0, #1
 8016ea8:	d103      	bne.n	8016eb2 <sbrk_aligned+0x26>
 8016eaa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8016eae:	4620      	mov	r0, r4
 8016eb0:	bd70      	pop	{r4, r5, r6, pc}
 8016eb2:	1cc4      	adds	r4, r0, #3
 8016eb4:	f024 0403 	bic.w	r4, r4, #3
 8016eb8:	42a0      	cmp	r0, r4
 8016eba:	d0f8      	beq.n	8016eae <sbrk_aligned+0x22>
 8016ebc:	1a21      	subs	r1, r4, r0
 8016ebe:	4628      	mov	r0, r5
 8016ec0:	f000 fbcc 	bl	801765c <_sbrk_r>
 8016ec4:	3001      	adds	r0, #1
 8016ec6:	d1f2      	bne.n	8016eae <sbrk_aligned+0x22>
 8016ec8:	e7ef      	b.n	8016eaa <sbrk_aligned+0x1e>
 8016eca:	bf00      	nop
 8016ecc:	2000af44 	.word	0x2000af44

08016ed0 <_malloc_r>:
 8016ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ed4:	1ccd      	adds	r5, r1, #3
 8016ed6:	f025 0503 	bic.w	r5, r5, #3
 8016eda:	3508      	adds	r5, #8
 8016edc:	2d0c      	cmp	r5, #12
 8016ede:	bf38      	it	cc
 8016ee0:	250c      	movcc	r5, #12
 8016ee2:	2d00      	cmp	r5, #0
 8016ee4:	4606      	mov	r6, r0
 8016ee6:	db01      	blt.n	8016eec <_malloc_r+0x1c>
 8016ee8:	42a9      	cmp	r1, r5
 8016eea:	d904      	bls.n	8016ef6 <_malloc_r+0x26>
 8016eec:	230c      	movs	r3, #12
 8016eee:	6033      	str	r3, [r6, #0]
 8016ef0:	2000      	movs	r0, #0
 8016ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ef6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016fcc <_malloc_r+0xfc>
 8016efa:	f000 f869 	bl	8016fd0 <__malloc_lock>
 8016efe:	f8d8 3000 	ldr.w	r3, [r8]
 8016f02:	461c      	mov	r4, r3
 8016f04:	bb44      	cbnz	r4, 8016f58 <_malloc_r+0x88>
 8016f06:	4629      	mov	r1, r5
 8016f08:	4630      	mov	r0, r6
 8016f0a:	f7ff ffbf 	bl	8016e8c <sbrk_aligned>
 8016f0e:	1c43      	adds	r3, r0, #1
 8016f10:	4604      	mov	r4, r0
 8016f12:	d158      	bne.n	8016fc6 <_malloc_r+0xf6>
 8016f14:	f8d8 4000 	ldr.w	r4, [r8]
 8016f18:	4627      	mov	r7, r4
 8016f1a:	2f00      	cmp	r7, #0
 8016f1c:	d143      	bne.n	8016fa6 <_malloc_r+0xd6>
 8016f1e:	2c00      	cmp	r4, #0
 8016f20:	d04b      	beq.n	8016fba <_malloc_r+0xea>
 8016f22:	6823      	ldr	r3, [r4, #0]
 8016f24:	4639      	mov	r1, r7
 8016f26:	4630      	mov	r0, r6
 8016f28:	eb04 0903 	add.w	r9, r4, r3
 8016f2c:	f000 fb96 	bl	801765c <_sbrk_r>
 8016f30:	4581      	cmp	r9, r0
 8016f32:	d142      	bne.n	8016fba <_malloc_r+0xea>
 8016f34:	6821      	ldr	r1, [r4, #0]
 8016f36:	1a6d      	subs	r5, r5, r1
 8016f38:	4629      	mov	r1, r5
 8016f3a:	4630      	mov	r0, r6
 8016f3c:	f7ff ffa6 	bl	8016e8c <sbrk_aligned>
 8016f40:	3001      	adds	r0, #1
 8016f42:	d03a      	beq.n	8016fba <_malloc_r+0xea>
 8016f44:	6823      	ldr	r3, [r4, #0]
 8016f46:	442b      	add	r3, r5
 8016f48:	6023      	str	r3, [r4, #0]
 8016f4a:	f8d8 3000 	ldr.w	r3, [r8]
 8016f4e:	685a      	ldr	r2, [r3, #4]
 8016f50:	bb62      	cbnz	r2, 8016fac <_malloc_r+0xdc>
 8016f52:	f8c8 7000 	str.w	r7, [r8]
 8016f56:	e00f      	b.n	8016f78 <_malloc_r+0xa8>
 8016f58:	6822      	ldr	r2, [r4, #0]
 8016f5a:	1b52      	subs	r2, r2, r5
 8016f5c:	d420      	bmi.n	8016fa0 <_malloc_r+0xd0>
 8016f5e:	2a0b      	cmp	r2, #11
 8016f60:	d917      	bls.n	8016f92 <_malloc_r+0xc2>
 8016f62:	1961      	adds	r1, r4, r5
 8016f64:	42a3      	cmp	r3, r4
 8016f66:	6025      	str	r5, [r4, #0]
 8016f68:	bf18      	it	ne
 8016f6a:	6059      	strne	r1, [r3, #4]
 8016f6c:	6863      	ldr	r3, [r4, #4]
 8016f6e:	bf08      	it	eq
 8016f70:	f8c8 1000 	streq.w	r1, [r8]
 8016f74:	5162      	str	r2, [r4, r5]
 8016f76:	604b      	str	r3, [r1, #4]
 8016f78:	4630      	mov	r0, r6
 8016f7a:	f000 f82f 	bl	8016fdc <__malloc_unlock>
 8016f7e:	f104 000b 	add.w	r0, r4, #11
 8016f82:	1d23      	adds	r3, r4, #4
 8016f84:	f020 0007 	bic.w	r0, r0, #7
 8016f88:	1ac2      	subs	r2, r0, r3
 8016f8a:	bf1c      	itt	ne
 8016f8c:	1a1b      	subne	r3, r3, r0
 8016f8e:	50a3      	strne	r3, [r4, r2]
 8016f90:	e7af      	b.n	8016ef2 <_malloc_r+0x22>
 8016f92:	6862      	ldr	r2, [r4, #4]
 8016f94:	42a3      	cmp	r3, r4
 8016f96:	bf0c      	ite	eq
 8016f98:	f8c8 2000 	streq.w	r2, [r8]
 8016f9c:	605a      	strne	r2, [r3, #4]
 8016f9e:	e7eb      	b.n	8016f78 <_malloc_r+0xa8>
 8016fa0:	4623      	mov	r3, r4
 8016fa2:	6864      	ldr	r4, [r4, #4]
 8016fa4:	e7ae      	b.n	8016f04 <_malloc_r+0x34>
 8016fa6:	463c      	mov	r4, r7
 8016fa8:	687f      	ldr	r7, [r7, #4]
 8016faa:	e7b6      	b.n	8016f1a <_malloc_r+0x4a>
 8016fac:	461a      	mov	r2, r3
 8016fae:	685b      	ldr	r3, [r3, #4]
 8016fb0:	42a3      	cmp	r3, r4
 8016fb2:	d1fb      	bne.n	8016fac <_malloc_r+0xdc>
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	6053      	str	r3, [r2, #4]
 8016fb8:	e7de      	b.n	8016f78 <_malloc_r+0xa8>
 8016fba:	230c      	movs	r3, #12
 8016fbc:	6033      	str	r3, [r6, #0]
 8016fbe:	4630      	mov	r0, r6
 8016fc0:	f000 f80c 	bl	8016fdc <__malloc_unlock>
 8016fc4:	e794      	b.n	8016ef0 <_malloc_r+0x20>
 8016fc6:	6005      	str	r5, [r0, #0]
 8016fc8:	e7d6      	b.n	8016f78 <_malloc_r+0xa8>
 8016fca:	bf00      	nop
 8016fcc:	2000af48 	.word	0x2000af48

08016fd0 <__malloc_lock>:
 8016fd0:	4801      	ldr	r0, [pc, #4]	@ (8016fd8 <__malloc_lock+0x8>)
 8016fd2:	f000 bb90 	b.w	80176f6 <__retarget_lock_acquire_recursive>
 8016fd6:	bf00      	nop
 8016fd8:	2000b08d 	.word	0x2000b08d

08016fdc <__malloc_unlock>:
 8016fdc:	4801      	ldr	r0, [pc, #4]	@ (8016fe4 <__malloc_unlock+0x8>)
 8016fde:	f000 bb8b 	b.w	80176f8 <__retarget_lock_release_recursive>
 8016fe2:	bf00      	nop
 8016fe4:	2000b08d 	.word	0x2000b08d

08016fe8 <srand>:
 8016fe8:	b538      	push	{r3, r4, r5, lr}
 8016fea:	4b10      	ldr	r3, [pc, #64]	@ (801702c <srand+0x44>)
 8016fec:	681d      	ldr	r5, [r3, #0]
 8016fee:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016ff0:	4604      	mov	r4, r0
 8016ff2:	b9b3      	cbnz	r3, 8017022 <srand+0x3a>
 8016ff4:	2018      	movs	r0, #24
 8016ff6:	f7ff ff39 	bl	8016e6c <malloc>
 8016ffa:	4602      	mov	r2, r0
 8016ffc:	6328      	str	r0, [r5, #48]	@ 0x30
 8016ffe:	b920      	cbnz	r0, 801700a <srand+0x22>
 8017000:	4b0b      	ldr	r3, [pc, #44]	@ (8017030 <srand+0x48>)
 8017002:	480c      	ldr	r0, [pc, #48]	@ (8017034 <srand+0x4c>)
 8017004:	2146      	movs	r1, #70	@ 0x46
 8017006:	f000 fb8f 	bl	8017728 <__assert_func>
 801700a:	490b      	ldr	r1, [pc, #44]	@ (8017038 <srand+0x50>)
 801700c:	4b0b      	ldr	r3, [pc, #44]	@ (801703c <srand+0x54>)
 801700e:	e9c0 1300 	strd	r1, r3, [r0]
 8017012:	4b0b      	ldr	r3, [pc, #44]	@ (8017040 <srand+0x58>)
 8017014:	6083      	str	r3, [r0, #8]
 8017016:	230b      	movs	r3, #11
 8017018:	8183      	strh	r3, [r0, #12]
 801701a:	2100      	movs	r1, #0
 801701c:	2001      	movs	r0, #1
 801701e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017022:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017024:	2200      	movs	r2, #0
 8017026:	611c      	str	r4, [r3, #16]
 8017028:	615a      	str	r2, [r3, #20]
 801702a:	bd38      	pop	{r3, r4, r5, pc}
 801702c:	200001e4 	.word	0x200001e4
 8017030:	080190a8 	.word	0x080190a8
 8017034:	080190bf 	.word	0x080190bf
 8017038:	abcd330e 	.word	0xabcd330e
 801703c:	e66d1234 	.word	0xe66d1234
 8017040:	0005deec 	.word	0x0005deec

08017044 <rand>:
 8017044:	4b16      	ldr	r3, [pc, #88]	@ (80170a0 <rand+0x5c>)
 8017046:	b510      	push	{r4, lr}
 8017048:	681c      	ldr	r4, [r3, #0]
 801704a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801704c:	b9b3      	cbnz	r3, 801707c <rand+0x38>
 801704e:	2018      	movs	r0, #24
 8017050:	f7ff ff0c 	bl	8016e6c <malloc>
 8017054:	4602      	mov	r2, r0
 8017056:	6320      	str	r0, [r4, #48]	@ 0x30
 8017058:	b920      	cbnz	r0, 8017064 <rand+0x20>
 801705a:	4b12      	ldr	r3, [pc, #72]	@ (80170a4 <rand+0x60>)
 801705c:	4812      	ldr	r0, [pc, #72]	@ (80170a8 <rand+0x64>)
 801705e:	2152      	movs	r1, #82	@ 0x52
 8017060:	f000 fb62 	bl	8017728 <__assert_func>
 8017064:	4911      	ldr	r1, [pc, #68]	@ (80170ac <rand+0x68>)
 8017066:	4b12      	ldr	r3, [pc, #72]	@ (80170b0 <rand+0x6c>)
 8017068:	e9c0 1300 	strd	r1, r3, [r0]
 801706c:	4b11      	ldr	r3, [pc, #68]	@ (80170b4 <rand+0x70>)
 801706e:	6083      	str	r3, [r0, #8]
 8017070:	230b      	movs	r3, #11
 8017072:	8183      	strh	r3, [r0, #12]
 8017074:	2100      	movs	r1, #0
 8017076:	2001      	movs	r0, #1
 8017078:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801707c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801707e:	480e      	ldr	r0, [pc, #56]	@ (80170b8 <rand+0x74>)
 8017080:	690b      	ldr	r3, [r1, #16]
 8017082:	694c      	ldr	r4, [r1, #20]
 8017084:	4a0d      	ldr	r2, [pc, #52]	@ (80170bc <rand+0x78>)
 8017086:	4358      	muls	r0, r3
 8017088:	fb02 0004 	mla	r0, r2, r4, r0
 801708c:	fba3 3202 	umull	r3, r2, r3, r2
 8017090:	3301      	adds	r3, #1
 8017092:	eb40 0002 	adc.w	r0, r0, r2
 8017096:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801709a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801709e:	bd10      	pop	{r4, pc}
 80170a0:	200001e4 	.word	0x200001e4
 80170a4:	080190a8 	.word	0x080190a8
 80170a8:	080190bf 	.word	0x080190bf
 80170ac:	abcd330e 	.word	0xabcd330e
 80170b0:	e66d1234 	.word	0xe66d1234
 80170b4:	0005deec 	.word	0x0005deec
 80170b8:	5851f42d 	.word	0x5851f42d
 80170bc:	4c957f2d 	.word	0x4c957f2d

080170c0 <realloc>:
 80170c0:	4b02      	ldr	r3, [pc, #8]	@ (80170cc <realloc+0xc>)
 80170c2:	460a      	mov	r2, r1
 80170c4:	4601      	mov	r1, r0
 80170c6:	6818      	ldr	r0, [r3, #0]
 80170c8:	f000 b802 	b.w	80170d0 <_realloc_r>
 80170cc:	200001e4 	.word	0x200001e4

080170d0 <_realloc_r>:
 80170d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170d4:	4680      	mov	r8, r0
 80170d6:	4615      	mov	r5, r2
 80170d8:	460c      	mov	r4, r1
 80170da:	b921      	cbnz	r1, 80170e6 <_realloc_r+0x16>
 80170dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80170e0:	4611      	mov	r1, r2
 80170e2:	f7ff bef5 	b.w	8016ed0 <_malloc_r>
 80170e6:	b92a      	cbnz	r2, 80170f4 <_realloc_r+0x24>
 80170e8:	f000 fb48 	bl	801777c <_free_r>
 80170ec:	2400      	movs	r4, #0
 80170ee:	4620      	mov	r0, r4
 80170f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170f4:	f000 fb8c 	bl	8017810 <_malloc_usable_size_r>
 80170f8:	4285      	cmp	r5, r0
 80170fa:	4606      	mov	r6, r0
 80170fc:	d802      	bhi.n	8017104 <_realloc_r+0x34>
 80170fe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017102:	d8f4      	bhi.n	80170ee <_realloc_r+0x1e>
 8017104:	4629      	mov	r1, r5
 8017106:	4640      	mov	r0, r8
 8017108:	f7ff fee2 	bl	8016ed0 <_malloc_r>
 801710c:	4607      	mov	r7, r0
 801710e:	2800      	cmp	r0, #0
 8017110:	d0ec      	beq.n	80170ec <_realloc_r+0x1c>
 8017112:	42b5      	cmp	r5, r6
 8017114:	462a      	mov	r2, r5
 8017116:	4621      	mov	r1, r4
 8017118:	bf28      	it	cs
 801711a:	4632      	movcs	r2, r6
 801711c:	f000 faf5 	bl	801770a <memcpy>
 8017120:	4621      	mov	r1, r4
 8017122:	4640      	mov	r0, r8
 8017124:	f000 fb2a 	bl	801777c <_free_r>
 8017128:	463c      	mov	r4, r7
 801712a:	e7e0      	b.n	80170ee <_realloc_r+0x1e>

0801712c <_strtoul_l.constprop.0>:
 801712c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017130:	4e34      	ldr	r6, [pc, #208]	@ (8017204 <_strtoul_l.constprop.0+0xd8>)
 8017132:	4686      	mov	lr, r0
 8017134:	460d      	mov	r5, r1
 8017136:	4628      	mov	r0, r5
 8017138:	f815 4b01 	ldrb.w	r4, [r5], #1
 801713c:	5d37      	ldrb	r7, [r6, r4]
 801713e:	f017 0708 	ands.w	r7, r7, #8
 8017142:	d1f8      	bne.n	8017136 <_strtoul_l.constprop.0+0xa>
 8017144:	2c2d      	cmp	r4, #45	@ 0x2d
 8017146:	d12f      	bne.n	80171a8 <_strtoul_l.constprop.0+0x7c>
 8017148:	782c      	ldrb	r4, [r5, #0]
 801714a:	2701      	movs	r7, #1
 801714c:	1c85      	adds	r5, r0, #2
 801714e:	f033 0010 	bics.w	r0, r3, #16
 8017152:	d109      	bne.n	8017168 <_strtoul_l.constprop.0+0x3c>
 8017154:	2c30      	cmp	r4, #48	@ 0x30
 8017156:	d12c      	bne.n	80171b2 <_strtoul_l.constprop.0+0x86>
 8017158:	7828      	ldrb	r0, [r5, #0]
 801715a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801715e:	2858      	cmp	r0, #88	@ 0x58
 8017160:	d127      	bne.n	80171b2 <_strtoul_l.constprop.0+0x86>
 8017162:	786c      	ldrb	r4, [r5, #1]
 8017164:	2310      	movs	r3, #16
 8017166:	3502      	adds	r5, #2
 8017168:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801716c:	2600      	movs	r6, #0
 801716e:	fbb8 f8f3 	udiv	r8, r8, r3
 8017172:	fb03 f908 	mul.w	r9, r3, r8
 8017176:	ea6f 0909 	mvn.w	r9, r9
 801717a:	4630      	mov	r0, r6
 801717c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8017180:	f1bc 0f09 	cmp.w	ip, #9
 8017184:	d81c      	bhi.n	80171c0 <_strtoul_l.constprop.0+0x94>
 8017186:	4664      	mov	r4, ip
 8017188:	42a3      	cmp	r3, r4
 801718a:	dd2a      	ble.n	80171e2 <_strtoul_l.constprop.0+0xb6>
 801718c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8017190:	d007      	beq.n	80171a2 <_strtoul_l.constprop.0+0x76>
 8017192:	4580      	cmp	r8, r0
 8017194:	d322      	bcc.n	80171dc <_strtoul_l.constprop.0+0xb0>
 8017196:	d101      	bne.n	801719c <_strtoul_l.constprop.0+0x70>
 8017198:	45a1      	cmp	r9, r4
 801719a:	db1f      	blt.n	80171dc <_strtoul_l.constprop.0+0xb0>
 801719c:	fb00 4003 	mla	r0, r0, r3, r4
 80171a0:	2601      	movs	r6, #1
 80171a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80171a6:	e7e9      	b.n	801717c <_strtoul_l.constprop.0+0x50>
 80171a8:	2c2b      	cmp	r4, #43	@ 0x2b
 80171aa:	bf04      	itt	eq
 80171ac:	782c      	ldrbeq	r4, [r5, #0]
 80171ae:	1c85      	addeq	r5, r0, #2
 80171b0:	e7cd      	b.n	801714e <_strtoul_l.constprop.0+0x22>
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d1d8      	bne.n	8017168 <_strtoul_l.constprop.0+0x3c>
 80171b6:	2c30      	cmp	r4, #48	@ 0x30
 80171b8:	bf0c      	ite	eq
 80171ba:	2308      	moveq	r3, #8
 80171bc:	230a      	movne	r3, #10
 80171be:	e7d3      	b.n	8017168 <_strtoul_l.constprop.0+0x3c>
 80171c0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80171c4:	f1bc 0f19 	cmp.w	ip, #25
 80171c8:	d801      	bhi.n	80171ce <_strtoul_l.constprop.0+0xa2>
 80171ca:	3c37      	subs	r4, #55	@ 0x37
 80171cc:	e7dc      	b.n	8017188 <_strtoul_l.constprop.0+0x5c>
 80171ce:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80171d2:	f1bc 0f19 	cmp.w	ip, #25
 80171d6:	d804      	bhi.n	80171e2 <_strtoul_l.constprop.0+0xb6>
 80171d8:	3c57      	subs	r4, #87	@ 0x57
 80171da:	e7d5      	b.n	8017188 <_strtoul_l.constprop.0+0x5c>
 80171dc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80171e0:	e7df      	b.n	80171a2 <_strtoul_l.constprop.0+0x76>
 80171e2:	1c73      	adds	r3, r6, #1
 80171e4:	d106      	bne.n	80171f4 <_strtoul_l.constprop.0+0xc8>
 80171e6:	2322      	movs	r3, #34	@ 0x22
 80171e8:	f8ce 3000 	str.w	r3, [lr]
 80171ec:	4630      	mov	r0, r6
 80171ee:	b932      	cbnz	r2, 80171fe <_strtoul_l.constprop.0+0xd2>
 80171f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80171f4:	b107      	cbz	r7, 80171f8 <_strtoul_l.constprop.0+0xcc>
 80171f6:	4240      	negs	r0, r0
 80171f8:	2a00      	cmp	r2, #0
 80171fa:	d0f9      	beq.n	80171f0 <_strtoul_l.constprop.0+0xc4>
 80171fc:	b106      	cbz	r6, 8017200 <_strtoul_l.constprop.0+0xd4>
 80171fe:	1e69      	subs	r1, r5, #1
 8017200:	6011      	str	r1, [r2, #0]
 8017202:	e7f5      	b.n	80171f0 <_strtoul_l.constprop.0+0xc4>
 8017204:	08019118 	.word	0x08019118

08017208 <strtoul>:
 8017208:	4613      	mov	r3, r2
 801720a:	460a      	mov	r2, r1
 801720c:	4601      	mov	r1, r0
 801720e:	4802      	ldr	r0, [pc, #8]	@ (8017218 <strtoul+0x10>)
 8017210:	6800      	ldr	r0, [r0, #0]
 8017212:	f7ff bf8b 	b.w	801712c <_strtoul_l.constprop.0>
 8017216:	bf00      	nop
 8017218:	200001e4 	.word	0x200001e4

0801721c <std>:
 801721c:	2300      	movs	r3, #0
 801721e:	b510      	push	{r4, lr}
 8017220:	4604      	mov	r4, r0
 8017222:	e9c0 3300 	strd	r3, r3, [r0]
 8017226:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801722a:	6083      	str	r3, [r0, #8]
 801722c:	8181      	strh	r1, [r0, #12]
 801722e:	6643      	str	r3, [r0, #100]	@ 0x64
 8017230:	81c2      	strh	r2, [r0, #14]
 8017232:	6183      	str	r3, [r0, #24]
 8017234:	4619      	mov	r1, r3
 8017236:	2208      	movs	r2, #8
 8017238:	305c      	adds	r0, #92	@ 0x5c
 801723a:	f000 f99d 	bl	8017578 <memset>
 801723e:	4b0d      	ldr	r3, [pc, #52]	@ (8017274 <std+0x58>)
 8017240:	6263      	str	r3, [r4, #36]	@ 0x24
 8017242:	4b0d      	ldr	r3, [pc, #52]	@ (8017278 <std+0x5c>)
 8017244:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017246:	4b0d      	ldr	r3, [pc, #52]	@ (801727c <std+0x60>)
 8017248:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801724a:	4b0d      	ldr	r3, [pc, #52]	@ (8017280 <std+0x64>)
 801724c:	6323      	str	r3, [r4, #48]	@ 0x30
 801724e:	4b0d      	ldr	r3, [pc, #52]	@ (8017284 <std+0x68>)
 8017250:	6224      	str	r4, [r4, #32]
 8017252:	429c      	cmp	r4, r3
 8017254:	d006      	beq.n	8017264 <std+0x48>
 8017256:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801725a:	4294      	cmp	r4, r2
 801725c:	d002      	beq.n	8017264 <std+0x48>
 801725e:	33d0      	adds	r3, #208	@ 0xd0
 8017260:	429c      	cmp	r4, r3
 8017262:	d105      	bne.n	8017270 <std+0x54>
 8017264:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801726c:	f000 ba42 	b.w	80176f4 <__retarget_lock_init_recursive>
 8017270:	bd10      	pop	{r4, pc}
 8017272:	bf00      	nop
 8017274:	0801742d 	.word	0x0801742d
 8017278:	0801744f 	.word	0x0801744f
 801727c:	08017487 	.word	0x08017487
 8017280:	080174ab 	.word	0x080174ab
 8017284:	2000af4c 	.word	0x2000af4c

08017288 <stdio_exit_handler>:
 8017288:	4a02      	ldr	r2, [pc, #8]	@ (8017294 <stdio_exit_handler+0xc>)
 801728a:	4903      	ldr	r1, [pc, #12]	@ (8017298 <stdio_exit_handler+0x10>)
 801728c:	4803      	ldr	r0, [pc, #12]	@ (801729c <stdio_exit_handler+0x14>)
 801728e:	f000 b869 	b.w	8017364 <_fwalk_sglue>
 8017292:	bf00      	nop
 8017294:	200001d8 	.word	0x200001d8
 8017298:	08018179 	.word	0x08018179
 801729c:	200001e8 	.word	0x200001e8

080172a0 <cleanup_stdio>:
 80172a0:	6841      	ldr	r1, [r0, #4]
 80172a2:	4b0c      	ldr	r3, [pc, #48]	@ (80172d4 <cleanup_stdio+0x34>)
 80172a4:	4299      	cmp	r1, r3
 80172a6:	b510      	push	{r4, lr}
 80172a8:	4604      	mov	r4, r0
 80172aa:	d001      	beq.n	80172b0 <cleanup_stdio+0x10>
 80172ac:	f000 ff64 	bl	8018178 <_fflush_r>
 80172b0:	68a1      	ldr	r1, [r4, #8]
 80172b2:	4b09      	ldr	r3, [pc, #36]	@ (80172d8 <cleanup_stdio+0x38>)
 80172b4:	4299      	cmp	r1, r3
 80172b6:	d002      	beq.n	80172be <cleanup_stdio+0x1e>
 80172b8:	4620      	mov	r0, r4
 80172ba:	f000 ff5d 	bl	8018178 <_fflush_r>
 80172be:	68e1      	ldr	r1, [r4, #12]
 80172c0:	4b06      	ldr	r3, [pc, #24]	@ (80172dc <cleanup_stdio+0x3c>)
 80172c2:	4299      	cmp	r1, r3
 80172c4:	d004      	beq.n	80172d0 <cleanup_stdio+0x30>
 80172c6:	4620      	mov	r0, r4
 80172c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80172cc:	f000 bf54 	b.w	8018178 <_fflush_r>
 80172d0:	bd10      	pop	{r4, pc}
 80172d2:	bf00      	nop
 80172d4:	2000af4c 	.word	0x2000af4c
 80172d8:	2000afb4 	.word	0x2000afb4
 80172dc:	2000b01c 	.word	0x2000b01c

080172e0 <global_stdio_init.part.0>:
 80172e0:	b510      	push	{r4, lr}
 80172e2:	4b0b      	ldr	r3, [pc, #44]	@ (8017310 <global_stdio_init.part.0+0x30>)
 80172e4:	4c0b      	ldr	r4, [pc, #44]	@ (8017314 <global_stdio_init.part.0+0x34>)
 80172e6:	4a0c      	ldr	r2, [pc, #48]	@ (8017318 <global_stdio_init.part.0+0x38>)
 80172e8:	601a      	str	r2, [r3, #0]
 80172ea:	4620      	mov	r0, r4
 80172ec:	2200      	movs	r2, #0
 80172ee:	2104      	movs	r1, #4
 80172f0:	f7ff ff94 	bl	801721c <std>
 80172f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80172f8:	2201      	movs	r2, #1
 80172fa:	2109      	movs	r1, #9
 80172fc:	f7ff ff8e 	bl	801721c <std>
 8017300:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017304:	2202      	movs	r2, #2
 8017306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801730a:	2112      	movs	r1, #18
 801730c:	f7ff bf86 	b.w	801721c <std>
 8017310:	2000b084 	.word	0x2000b084
 8017314:	2000af4c 	.word	0x2000af4c
 8017318:	08017289 	.word	0x08017289

0801731c <__sfp_lock_acquire>:
 801731c:	4801      	ldr	r0, [pc, #4]	@ (8017324 <__sfp_lock_acquire+0x8>)
 801731e:	f000 b9ea 	b.w	80176f6 <__retarget_lock_acquire_recursive>
 8017322:	bf00      	nop
 8017324:	2000b08e 	.word	0x2000b08e

08017328 <__sfp_lock_release>:
 8017328:	4801      	ldr	r0, [pc, #4]	@ (8017330 <__sfp_lock_release+0x8>)
 801732a:	f000 b9e5 	b.w	80176f8 <__retarget_lock_release_recursive>
 801732e:	bf00      	nop
 8017330:	2000b08e 	.word	0x2000b08e

08017334 <__sinit>:
 8017334:	b510      	push	{r4, lr}
 8017336:	4604      	mov	r4, r0
 8017338:	f7ff fff0 	bl	801731c <__sfp_lock_acquire>
 801733c:	6a23      	ldr	r3, [r4, #32]
 801733e:	b11b      	cbz	r3, 8017348 <__sinit+0x14>
 8017340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017344:	f7ff bff0 	b.w	8017328 <__sfp_lock_release>
 8017348:	4b04      	ldr	r3, [pc, #16]	@ (801735c <__sinit+0x28>)
 801734a:	6223      	str	r3, [r4, #32]
 801734c:	4b04      	ldr	r3, [pc, #16]	@ (8017360 <__sinit+0x2c>)
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	2b00      	cmp	r3, #0
 8017352:	d1f5      	bne.n	8017340 <__sinit+0xc>
 8017354:	f7ff ffc4 	bl	80172e0 <global_stdio_init.part.0>
 8017358:	e7f2      	b.n	8017340 <__sinit+0xc>
 801735a:	bf00      	nop
 801735c:	080172a1 	.word	0x080172a1
 8017360:	2000b084 	.word	0x2000b084

08017364 <_fwalk_sglue>:
 8017364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017368:	4607      	mov	r7, r0
 801736a:	4688      	mov	r8, r1
 801736c:	4614      	mov	r4, r2
 801736e:	2600      	movs	r6, #0
 8017370:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017374:	f1b9 0901 	subs.w	r9, r9, #1
 8017378:	d505      	bpl.n	8017386 <_fwalk_sglue+0x22>
 801737a:	6824      	ldr	r4, [r4, #0]
 801737c:	2c00      	cmp	r4, #0
 801737e:	d1f7      	bne.n	8017370 <_fwalk_sglue+0xc>
 8017380:	4630      	mov	r0, r6
 8017382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017386:	89ab      	ldrh	r3, [r5, #12]
 8017388:	2b01      	cmp	r3, #1
 801738a:	d907      	bls.n	801739c <_fwalk_sglue+0x38>
 801738c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017390:	3301      	adds	r3, #1
 8017392:	d003      	beq.n	801739c <_fwalk_sglue+0x38>
 8017394:	4629      	mov	r1, r5
 8017396:	4638      	mov	r0, r7
 8017398:	47c0      	blx	r8
 801739a:	4306      	orrs	r6, r0
 801739c:	3568      	adds	r5, #104	@ 0x68
 801739e:	e7e9      	b.n	8017374 <_fwalk_sglue+0x10>

080173a0 <iprintf>:
 80173a0:	b40f      	push	{r0, r1, r2, r3}
 80173a2:	b507      	push	{r0, r1, r2, lr}
 80173a4:	4906      	ldr	r1, [pc, #24]	@ (80173c0 <iprintf+0x20>)
 80173a6:	ab04      	add	r3, sp, #16
 80173a8:	6808      	ldr	r0, [r1, #0]
 80173aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80173ae:	6881      	ldr	r1, [r0, #8]
 80173b0:	9301      	str	r3, [sp, #4]
 80173b2:	f000 fbb7 	bl	8017b24 <_vfiprintf_r>
 80173b6:	b003      	add	sp, #12
 80173b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80173bc:	b004      	add	sp, #16
 80173be:	4770      	bx	lr
 80173c0:	200001e4 	.word	0x200001e4

080173c4 <sniprintf>:
 80173c4:	b40c      	push	{r2, r3}
 80173c6:	b530      	push	{r4, r5, lr}
 80173c8:	4b17      	ldr	r3, [pc, #92]	@ (8017428 <sniprintf+0x64>)
 80173ca:	1e0c      	subs	r4, r1, #0
 80173cc:	681d      	ldr	r5, [r3, #0]
 80173ce:	b09d      	sub	sp, #116	@ 0x74
 80173d0:	da08      	bge.n	80173e4 <sniprintf+0x20>
 80173d2:	238b      	movs	r3, #139	@ 0x8b
 80173d4:	602b      	str	r3, [r5, #0]
 80173d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80173da:	b01d      	add	sp, #116	@ 0x74
 80173dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80173e0:	b002      	add	sp, #8
 80173e2:	4770      	bx	lr
 80173e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80173e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80173ec:	bf14      	ite	ne
 80173ee:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80173f2:	4623      	moveq	r3, r4
 80173f4:	9304      	str	r3, [sp, #16]
 80173f6:	9307      	str	r3, [sp, #28]
 80173f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80173fc:	9002      	str	r0, [sp, #8]
 80173fe:	9006      	str	r0, [sp, #24]
 8017400:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017404:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017406:	ab21      	add	r3, sp, #132	@ 0x84
 8017408:	a902      	add	r1, sp, #8
 801740a:	4628      	mov	r0, r5
 801740c:	9301      	str	r3, [sp, #4]
 801740e:	f000 fa63 	bl	80178d8 <_svfiprintf_r>
 8017412:	1c43      	adds	r3, r0, #1
 8017414:	bfbc      	itt	lt
 8017416:	238b      	movlt	r3, #139	@ 0x8b
 8017418:	602b      	strlt	r3, [r5, #0]
 801741a:	2c00      	cmp	r4, #0
 801741c:	d0dd      	beq.n	80173da <sniprintf+0x16>
 801741e:	9b02      	ldr	r3, [sp, #8]
 8017420:	2200      	movs	r2, #0
 8017422:	701a      	strb	r2, [r3, #0]
 8017424:	e7d9      	b.n	80173da <sniprintf+0x16>
 8017426:	bf00      	nop
 8017428:	200001e4 	.word	0x200001e4

0801742c <__sread>:
 801742c:	b510      	push	{r4, lr}
 801742e:	460c      	mov	r4, r1
 8017430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017434:	f000 f900 	bl	8017638 <_read_r>
 8017438:	2800      	cmp	r0, #0
 801743a:	bfab      	itete	ge
 801743c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801743e:	89a3      	ldrhlt	r3, [r4, #12]
 8017440:	181b      	addge	r3, r3, r0
 8017442:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017446:	bfac      	ite	ge
 8017448:	6563      	strge	r3, [r4, #84]	@ 0x54
 801744a:	81a3      	strhlt	r3, [r4, #12]
 801744c:	bd10      	pop	{r4, pc}

0801744e <__swrite>:
 801744e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017452:	461f      	mov	r7, r3
 8017454:	898b      	ldrh	r3, [r1, #12]
 8017456:	05db      	lsls	r3, r3, #23
 8017458:	4605      	mov	r5, r0
 801745a:	460c      	mov	r4, r1
 801745c:	4616      	mov	r6, r2
 801745e:	d505      	bpl.n	801746c <__swrite+0x1e>
 8017460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017464:	2302      	movs	r3, #2
 8017466:	2200      	movs	r2, #0
 8017468:	f000 f8d4 	bl	8017614 <_lseek_r>
 801746c:	89a3      	ldrh	r3, [r4, #12]
 801746e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017472:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017476:	81a3      	strh	r3, [r4, #12]
 8017478:	4632      	mov	r2, r6
 801747a:	463b      	mov	r3, r7
 801747c:	4628      	mov	r0, r5
 801747e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017482:	f000 b8fb 	b.w	801767c <_write_r>

08017486 <__sseek>:
 8017486:	b510      	push	{r4, lr}
 8017488:	460c      	mov	r4, r1
 801748a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801748e:	f000 f8c1 	bl	8017614 <_lseek_r>
 8017492:	1c43      	adds	r3, r0, #1
 8017494:	89a3      	ldrh	r3, [r4, #12]
 8017496:	bf15      	itete	ne
 8017498:	6560      	strne	r0, [r4, #84]	@ 0x54
 801749a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801749e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80174a2:	81a3      	strheq	r3, [r4, #12]
 80174a4:	bf18      	it	ne
 80174a6:	81a3      	strhne	r3, [r4, #12]
 80174a8:	bd10      	pop	{r4, pc}

080174aa <__sclose>:
 80174aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174ae:	f000 b8a1 	b.w	80175f4 <_close_r>

080174b2 <_vsniprintf_r>:
 80174b2:	b530      	push	{r4, r5, lr}
 80174b4:	4614      	mov	r4, r2
 80174b6:	2c00      	cmp	r4, #0
 80174b8:	b09b      	sub	sp, #108	@ 0x6c
 80174ba:	4605      	mov	r5, r0
 80174bc:	461a      	mov	r2, r3
 80174be:	da05      	bge.n	80174cc <_vsniprintf_r+0x1a>
 80174c0:	238b      	movs	r3, #139	@ 0x8b
 80174c2:	6003      	str	r3, [r0, #0]
 80174c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80174c8:	b01b      	add	sp, #108	@ 0x6c
 80174ca:	bd30      	pop	{r4, r5, pc}
 80174cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80174d0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80174d4:	bf14      	ite	ne
 80174d6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80174da:	4623      	moveq	r3, r4
 80174dc:	9302      	str	r3, [sp, #8]
 80174de:	9305      	str	r3, [sp, #20]
 80174e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80174e4:	9100      	str	r1, [sp, #0]
 80174e6:	9104      	str	r1, [sp, #16]
 80174e8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80174ec:	4669      	mov	r1, sp
 80174ee:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80174f0:	f000 f9f2 	bl	80178d8 <_svfiprintf_r>
 80174f4:	1c43      	adds	r3, r0, #1
 80174f6:	bfbc      	itt	lt
 80174f8:	238b      	movlt	r3, #139	@ 0x8b
 80174fa:	602b      	strlt	r3, [r5, #0]
 80174fc:	2c00      	cmp	r4, #0
 80174fe:	d0e3      	beq.n	80174c8 <_vsniprintf_r+0x16>
 8017500:	9b00      	ldr	r3, [sp, #0]
 8017502:	2200      	movs	r2, #0
 8017504:	701a      	strb	r2, [r3, #0]
 8017506:	e7df      	b.n	80174c8 <_vsniprintf_r+0x16>

08017508 <vsniprintf>:
 8017508:	b507      	push	{r0, r1, r2, lr}
 801750a:	9300      	str	r3, [sp, #0]
 801750c:	4613      	mov	r3, r2
 801750e:	460a      	mov	r2, r1
 8017510:	4601      	mov	r1, r0
 8017512:	4803      	ldr	r0, [pc, #12]	@ (8017520 <vsniprintf+0x18>)
 8017514:	6800      	ldr	r0, [r0, #0]
 8017516:	f7ff ffcc 	bl	80174b2 <_vsniprintf_r>
 801751a:	b003      	add	sp, #12
 801751c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017520:	200001e4 	.word	0x200001e4

08017524 <memcmp>:
 8017524:	b510      	push	{r4, lr}
 8017526:	3901      	subs	r1, #1
 8017528:	4402      	add	r2, r0
 801752a:	4290      	cmp	r0, r2
 801752c:	d101      	bne.n	8017532 <memcmp+0xe>
 801752e:	2000      	movs	r0, #0
 8017530:	e005      	b.n	801753e <memcmp+0x1a>
 8017532:	7803      	ldrb	r3, [r0, #0]
 8017534:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017538:	42a3      	cmp	r3, r4
 801753a:	d001      	beq.n	8017540 <memcmp+0x1c>
 801753c:	1b18      	subs	r0, r3, r4
 801753e:	bd10      	pop	{r4, pc}
 8017540:	3001      	adds	r0, #1
 8017542:	e7f2      	b.n	801752a <memcmp+0x6>

08017544 <memmove>:
 8017544:	4288      	cmp	r0, r1
 8017546:	b510      	push	{r4, lr}
 8017548:	eb01 0402 	add.w	r4, r1, r2
 801754c:	d902      	bls.n	8017554 <memmove+0x10>
 801754e:	4284      	cmp	r4, r0
 8017550:	4623      	mov	r3, r4
 8017552:	d807      	bhi.n	8017564 <memmove+0x20>
 8017554:	1e43      	subs	r3, r0, #1
 8017556:	42a1      	cmp	r1, r4
 8017558:	d008      	beq.n	801756c <memmove+0x28>
 801755a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801755e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017562:	e7f8      	b.n	8017556 <memmove+0x12>
 8017564:	4402      	add	r2, r0
 8017566:	4601      	mov	r1, r0
 8017568:	428a      	cmp	r2, r1
 801756a:	d100      	bne.n	801756e <memmove+0x2a>
 801756c:	bd10      	pop	{r4, pc}
 801756e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017572:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017576:	e7f7      	b.n	8017568 <memmove+0x24>

08017578 <memset>:
 8017578:	4402      	add	r2, r0
 801757a:	4603      	mov	r3, r0
 801757c:	4293      	cmp	r3, r2
 801757e:	d100      	bne.n	8017582 <memset+0xa>
 8017580:	4770      	bx	lr
 8017582:	f803 1b01 	strb.w	r1, [r3], #1
 8017586:	e7f9      	b.n	801757c <memset+0x4>

08017588 <strchr>:
 8017588:	b2c9      	uxtb	r1, r1
 801758a:	4603      	mov	r3, r0
 801758c:	4618      	mov	r0, r3
 801758e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017592:	b112      	cbz	r2, 801759a <strchr+0x12>
 8017594:	428a      	cmp	r2, r1
 8017596:	d1f9      	bne.n	801758c <strchr+0x4>
 8017598:	4770      	bx	lr
 801759a:	2900      	cmp	r1, #0
 801759c:	bf18      	it	ne
 801759e:	2000      	movne	r0, #0
 80175a0:	4770      	bx	lr

080175a2 <strncmp>:
 80175a2:	b510      	push	{r4, lr}
 80175a4:	b16a      	cbz	r2, 80175c2 <strncmp+0x20>
 80175a6:	3901      	subs	r1, #1
 80175a8:	1884      	adds	r4, r0, r2
 80175aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80175ae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80175b2:	429a      	cmp	r2, r3
 80175b4:	d103      	bne.n	80175be <strncmp+0x1c>
 80175b6:	42a0      	cmp	r0, r4
 80175b8:	d001      	beq.n	80175be <strncmp+0x1c>
 80175ba:	2a00      	cmp	r2, #0
 80175bc:	d1f5      	bne.n	80175aa <strncmp+0x8>
 80175be:	1ad0      	subs	r0, r2, r3
 80175c0:	bd10      	pop	{r4, pc}
 80175c2:	4610      	mov	r0, r2
 80175c4:	e7fc      	b.n	80175c0 <strncmp+0x1e>

080175c6 <strstr>:
 80175c6:	780a      	ldrb	r2, [r1, #0]
 80175c8:	b570      	push	{r4, r5, r6, lr}
 80175ca:	b96a      	cbnz	r2, 80175e8 <strstr+0x22>
 80175cc:	bd70      	pop	{r4, r5, r6, pc}
 80175ce:	429a      	cmp	r2, r3
 80175d0:	d109      	bne.n	80175e6 <strstr+0x20>
 80175d2:	460c      	mov	r4, r1
 80175d4:	4605      	mov	r5, r0
 80175d6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d0f6      	beq.n	80175cc <strstr+0x6>
 80175de:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80175e2:	429e      	cmp	r6, r3
 80175e4:	d0f7      	beq.n	80175d6 <strstr+0x10>
 80175e6:	3001      	adds	r0, #1
 80175e8:	7803      	ldrb	r3, [r0, #0]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d1ef      	bne.n	80175ce <strstr+0x8>
 80175ee:	4618      	mov	r0, r3
 80175f0:	e7ec      	b.n	80175cc <strstr+0x6>
	...

080175f4 <_close_r>:
 80175f4:	b538      	push	{r3, r4, r5, lr}
 80175f6:	4d06      	ldr	r5, [pc, #24]	@ (8017610 <_close_r+0x1c>)
 80175f8:	2300      	movs	r3, #0
 80175fa:	4604      	mov	r4, r0
 80175fc:	4608      	mov	r0, r1
 80175fe:	602b      	str	r3, [r5, #0]
 8017600:	f7ea fbe8 	bl	8001dd4 <_close>
 8017604:	1c43      	adds	r3, r0, #1
 8017606:	d102      	bne.n	801760e <_close_r+0x1a>
 8017608:	682b      	ldr	r3, [r5, #0]
 801760a:	b103      	cbz	r3, 801760e <_close_r+0x1a>
 801760c:	6023      	str	r3, [r4, #0]
 801760e:	bd38      	pop	{r3, r4, r5, pc}
 8017610:	2000b088 	.word	0x2000b088

08017614 <_lseek_r>:
 8017614:	b538      	push	{r3, r4, r5, lr}
 8017616:	4d07      	ldr	r5, [pc, #28]	@ (8017634 <_lseek_r+0x20>)
 8017618:	4604      	mov	r4, r0
 801761a:	4608      	mov	r0, r1
 801761c:	4611      	mov	r1, r2
 801761e:	2200      	movs	r2, #0
 8017620:	602a      	str	r2, [r5, #0]
 8017622:	461a      	mov	r2, r3
 8017624:	f7ea fbfd 	bl	8001e22 <_lseek>
 8017628:	1c43      	adds	r3, r0, #1
 801762a:	d102      	bne.n	8017632 <_lseek_r+0x1e>
 801762c:	682b      	ldr	r3, [r5, #0]
 801762e:	b103      	cbz	r3, 8017632 <_lseek_r+0x1e>
 8017630:	6023      	str	r3, [r4, #0]
 8017632:	bd38      	pop	{r3, r4, r5, pc}
 8017634:	2000b088 	.word	0x2000b088

08017638 <_read_r>:
 8017638:	b538      	push	{r3, r4, r5, lr}
 801763a:	4d07      	ldr	r5, [pc, #28]	@ (8017658 <_read_r+0x20>)
 801763c:	4604      	mov	r4, r0
 801763e:	4608      	mov	r0, r1
 8017640:	4611      	mov	r1, r2
 8017642:	2200      	movs	r2, #0
 8017644:	602a      	str	r2, [r5, #0]
 8017646:	461a      	mov	r2, r3
 8017648:	f7ea fb8b 	bl	8001d62 <_read>
 801764c:	1c43      	adds	r3, r0, #1
 801764e:	d102      	bne.n	8017656 <_read_r+0x1e>
 8017650:	682b      	ldr	r3, [r5, #0]
 8017652:	b103      	cbz	r3, 8017656 <_read_r+0x1e>
 8017654:	6023      	str	r3, [r4, #0]
 8017656:	bd38      	pop	{r3, r4, r5, pc}
 8017658:	2000b088 	.word	0x2000b088

0801765c <_sbrk_r>:
 801765c:	b538      	push	{r3, r4, r5, lr}
 801765e:	4d06      	ldr	r5, [pc, #24]	@ (8017678 <_sbrk_r+0x1c>)
 8017660:	2300      	movs	r3, #0
 8017662:	4604      	mov	r4, r0
 8017664:	4608      	mov	r0, r1
 8017666:	602b      	str	r3, [r5, #0]
 8017668:	f7ea fbe8 	bl	8001e3c <_sbrk>
 801766c:	1c43      	adds	r3, r0, #1
 801766e:	d102      	bne.n	8017676 <_sbrk_r+0x1a>
 8017670:	682b      	ldr	r3, [r5, #0]
 8017672:	b103      	cbz	r3, 8017676 <_sbrk_r+0x1a>
 8017674:	6023      	str	r3, [r4, #0]
 8017676:	bd38      	pop	{r3, r4, r5, pc}
 8017678:	2000b088 	.word	0x2000b088

0801767c <_write_r>:
 801767c:	b538      	push	{r3, r4, r5, lr}
 801767e:	4d07      	ldr	r5, [pc, #28]	@ (801769c <_write_r+0x20>)
 8017680:	4604      	mov	r4, r0
 8017682:	4608      	mov	r0, r1
 8017684:	4611      	mov	r1, r2
 8017686:	2200      	movs	r2, #0
 8017688:	602a      	str	r2, [r5, #0]
 801768a:	461a      	mov	r2, r3
 801768c:	f7ea fb86 	bl	8001d9c <_write>
 8017690:	1c43      	adds	r3, r0, #1
 8017692:	d102      	bne.n	801769a <_write_r+0x1e>
 8017694:	682b      	ldr	r3, [r5, #0]
 8017696:	b103      	cbz	r3, 801769a <_write_r+0x1e>
 8017698:	6023      	str	r3, [r4, #0]
 801769a:	bd38      	pop	{r3, r4, r5, pc}
 801769c:	2000b088 	.word	0x2000b088

080176a0 <__errno>:
 80176a0:	4b01      	ldr	r3, [pc, #4]	@ (80176a8 <__errno+0x8>)
 80176a2:	6818      	ldr	r0, [r3, #0]
 80176a4:	4770      	bx	lr
 80176a6:	bf00      	nop
 80176a8:	200001e4 	.word	0x200001e4

080176ac <__libc_init_array>:
 80176ac:	b570      	push	{r4, r5, r6, lr}
 80176ae:	4d0d      	ldr	r5, [pc, #52]	@ (80176e4 <__libc_init_array+0x38>)
 80176b0:	4c0d      	ldr	r4, [pc, #52]	@ (80176e8 <__libc_init_array+0x3c>)
 80176b2:	1b64      	subs	r4, r4, r5
 80176b4:	10a4      	asrs	r4, r4, #2
 80176b6:	2600      	movs	r6, #0
 80176b8:	42a6      	cmp	r6, r4
 80176ba:	d109      	bne.n	80176d0 <__libc_init_array+0x24>
 80176bc:	4d0b      	ldr	r5, [pc, #44]	@ (80176ec <__libc_init_array+0x40>)
 80176be:	4c0c      	ldr	r4, [pc, #48]	@ (80176f0 <__libc_init_array+0x44>)
 80176c0:	f000 fef8 	bl	80184b4 <_init>
 80176c4:	1b64      	subs	r4, r4, r5
 80176c6:	10a4      	asrs	r4, r4, #2
 80176c8:	2600      	movs	r6, #0
 80176ca:	42a6      	cmp	r6, r4
 80176cc:	d105      	bne.n	80176da <__libc_init_array+0x2e>
 80176ce:	bd70      	pop	{r4, r5, r6, pc}
 80176d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80176d4:	4798      	blx	r3
 80176d6:	3601      	adds	r6, #1
 80176d8:	e7ee      	b.n	80176b8 <__libc_init_array+0xc>
 80176da:	f855 3b04 	ldr.w	r3, [r5], #4
 80176de:	4798      	blx	r3
 80176e0:	3601      	adds	r6, #1
 80176e2:	e7f2      	b.n	80176ca <__libc_init_array+0x1e>
 80176e4:	08019290 	.word	0x08019290
 80176e8:	08019290 	.word	0x08019290
 80176ec:	08019290 	.word	0x08019290
 80176f0:	08019298 	.word	0x08019298

080176f4 <__retarget_lock_init_recursive>:
 80176f4:	4770      	bx	lr

080176f6 <__retarget_lock_acquire_recursive>:
 80176f6:	4770      	bx	lr

080176f8 <__retarget_lock_release_recursive>:
 80176f8:	4770      	bx	lr

080176fa <strcpy>:
 80176fa:	4603      	mov	r3, r0
 80176fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017700:	f803 2b01 	strb.w	r2, [r3], #1
 8017704:	2a00      	cmp	r2, #0
 8017706:	d1f9      	bne.n	80176fc <strcpy+0x2>
 8017708:	4770      	bx	lr

0801770a <memcpy>:
 801770a:	440a      	add	r2, r1
 801770c:	4291      	cmp	r1, r2
 801770e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8017712:	d100      	bne.n	8017716 <memcpy+0xc>
 8017714:	4770      	bx	lr
 8017716:	b510      	push	{r4, lr}
 8017718:	f811 4b01 	ldrb.w	r4, [r1], #1
 801771c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017720:	4291      	cmp	r1, r2
 8017722:	d1f9      	bne.n	8017718 <memcpy+0xe>
 8017724:	bd10      	pop	{r4, pc}
	...

08017728 <__assert_func>:
 8017728:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801772a:	4614      	mov	r4, r2
 801772c:	461a      	mov	r2, r3
 801772e:	4b09      	ldr	r3, [pc, #36]	@ (8017754 <__assert_func+0x2c>)
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	4605      	mov	r5, r0
 8017734:	68d8      	ldr	r0, [r3, #12]
 8017736:	b954      	cbnz	r4, 801774e <__assert_func+0x26>
 8017738:	4b07      	ldr	r3, [pc, #28]	@ (8017758 <__assert_func+0x30>)
 801773a:	461c      	mov	r4, r3
 801773c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017740:	9100      	str	r1, [sp, #0]
 8017742:	462b      	mov	r3, r5
 8017744:	4905      	ldr	r1, [pc, #20]	@ (801775c <__assert_func+0x34>)
 8017746:	f000 fd3f 	bl	80181c8 <fiprintf>
 801774a:	f000 fde3 	bl	8018314 <abort>
 801774e:	4b04      	ldr	r3, [pc, #16]	@ (8017760 <__assert_func+0x38>)
 8017750:	e7f4      	b.n	801773c <__assert_func+0x14>
 8017752:	bf00      	nop
 8017754:	200001e4 	.word	0x200001e4
 8017758:	08019253 	.word	0x08019253
 801775c:	08019225 	.word	0x08019225
 8017760:	08019218 	.word	0x08019218

08017764 <__env_lock>:
 8017764:	4801      	ldr	r0, [pc, #4]	@ (801776c <__env_lock+0x8>)
 8017766:	f7ff bfc6 	b.w	80176f6 <__retarget_lock_acquire_recursive>
 801776a:	bf00      	nop
 801776c:	2000b08c 	.word	0x2000b08c

08017770 <__env_unlock>:
 8017770:	4801      	ldr	r0, [pc, #4]	@ (8017778 <__env_unlock+0x8>)
 8017772:	f7ff bfc1 	b.w	80176f8 <__retarget_lock_release_recursive>
 8017776:	bf00      	nop
 8017778:	2000b08c 	.word	0x2000b08c

0801777c <_free_r>:
 801777c:	b538      	push	{r3, r4, r5, lr}
 801777e:	4605      	mov	r5, r0
 8017780:	2900      	cmp	r1, #0
 8017782:	d041      	beq.n	8017808 <_free_r+0x8c>
 8017784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017788:	1f0c      	subs	r4, r1, #4
 801778a:	2b00      	cmp	r3, #0
 801778c:	bfb8      	it	lt
 801778e:	18e4      	addlt	r4, r4, r3
 8017790:	f7ff fc1e 	bl	8016fd0 <__malloc_lock>
 8017794:	4a1d      	ldr	r2, [pc, #116]	@ (801780c <_free_r+0x90>)
 8017796:	6813      	ldr	r3, [r2, #0]
 8017798:	b933      	cbnz	r3, 80177a8 <_free_r+0x2c>
 801779a:	6063      	str	r3, [r4, #4]
 801779c:	6014      	str	r4, [r2, #0]
 801779e:	4628      	mov	r0, r5
 80177a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80177a4:	f7ff bc1a 	b.w	8016fdc <__malloc_unlock>
 80177a8:	42a3      	cmp	r3, r4
 80177aa:	d908      	bls.n	80177be <_free_r+0x42>
 80177ac:	6820      	ldr	r0, [r4, #0]
 80177ae:	1821      	adds	r1, r4, r0
 80177b0:	428b      	cmp	r3, r1
 80177b2:	bf01      	itttt	eq
 80177b4:	6819      	ldreq	r1, [r3, #0]
 80177b6:	685b      	ldreq	r3, [r3, #4]
 80177b8:	1809      	addeq	r1, r1, r0
 80177ba:	6021      	streq	r1, [r4, #0]
 80177bc:	e7ed      	b.n	801779a <_free_r+0x1e>
 80177be:	461a      	mov	r2, r3
 80177c0:	685b      	ldr	r3, [r3, #4]
 80177c2:	b10b      	cbz	r3, 80177c8 <_free_r+0x4c>
 80177c4:	42a3      	cmp	r3, r4
 80177c6:	d9fa      	bls.n	80177be <_free_r+0x42>
 80177c8:	6811      	ldr	r1, [r2, #0]
 80177ca:	1850      	adds	r0, r2, r1
 80177cc:	42a0      	cmp	r0, r4
 80177ce:	d10b      	bne.n	80177e8 <_free_r+0x6c>
 80177d0:	6820      	ldr	r0, [r4, #0]
 80177d2:	4401      	add	r1, r0
 80177d4:	1850      	adds	r0, r2, r1
 80177d6:	4283      	cmp	r3, r0
 80177d8:	6011      	str	r1, [r2, #0]
 80177da:	d1e0      	bne.n	801779e <_free_r+0x22>
 80177dc:	6818      	ldr	r0, [r3, #0]
 80177de:	685b      	ldr	r3, [r3, #4]
 80177e0:	6053      	str	r3, [r2, #4]
 80177e2:	4408      	add	r0, r1
 80177e4:	6010      	str	r0, [r2, #0]
 80177e6:	e7da      	b.n	801779e <_free_r+0x22>
 80177e8:	d902      	bls.n	80177f0 <_free_r+0x74>
 80177ea:	230c      	movs	r3, #12
 80177ec:	602b      	str	r3, [r5, #0]
 80177ee:	e7d6      	b.n	801779e <_free_r+0x22>
 80177f0:	6820      	ldr	r0, [r4, #0]
 80177f2:	1821      	adds	r1, r4, r0
 80177f4:	428b      	cmp	r3, r1
 80177f6:	bf04      	itt	eq
 80177f8:	6819      	ldreq	r1, [r3, #0]
 80177fa:	685b      	ldreq	r3, [r3, #4]
 80177fc:	6063      	str	r3, [r4, #4]
 80177fe:	bf04      	itt	eq
 8017800:	1809      	addeq	r1, r1, r0
 8017802:	6021      	streq	r1, [r4, #0]
 8017804:	6054      	str	r4, [r2, #4]
 8017806:	e7ca      	b.n	801779e <_free_r+0x22>
 8017808:	bd38      	pop	{r3, r4, r5, pc}
 801780a:	bf00      	nop
 801780c:	2000af48 	.word	0x2000af48

08017810 <_malloc_usable_size_r>:
 8017810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017814:	1f18      	subs	r0, r3, #4
 8017816:	2b00      	cmp	r3, #0
 8017818:	bfbc      	itt	lt
 801781a:	580b      	ldrlt	r3, [r1, r0]
 801781c:	18c0      	addlt	r0, r0, r3
 801781e:	4770      	bx	lr

08017820 <__ssputs_r>:
 8017820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017824:	688e      	ldr	r6, [r1, #8]
 8017826:	461f      	mov	r7, r3
 8017828:	42be      	cmp	r6, r7
 801782a:	680b      	ldr	r3, [r1, #0]
 801782c:	4682      	mov	sl, r0
 801782e:	460c      	mov	r4, r1
 8017830:	4690      	mov	r8, r2
 8017832:	d82d      	bhi.n	8017890 <__ssputs_r+0x70>
 8017834:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017838:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801783c:	d026      	beq.n	801788c <__ssputs_r+0x6c>
 801783e:	6965      	ldr	r5, [r4, #20]
 8017840:	6909      	ldr	r1, [r1, #16]
 8017842:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017846:	eba3 0901 	sub.w	r9, r3, r1
 801784a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801784e:	1c7b      	adds	r3, r7, #1
 8017850:	444b      	add	r3, r9
 8017852:	106d      	asrs	r5, r5, #1
 8017854:	429d      	cmp	r5, r3
 8017856:	bf38      	it	cc
 8017858:	461d      	movcc	r5, r3
 801785a:	0553      	lsls	r3, r2, #21
 801785c:	d527      	bpl.n	80178ae <__ssputs_r+0x8e>
 801785e:	4629      	mov	r1, r5
 8017860:	f7ff fb36 	bl	8016ed0 <_malloc_r>
 8017864:	4606      	mov	r6, r0
 8017866:	b360      	cbz	r0, 80178c2 <__ssputs_r+0xa2>
 8017868:	6921      	ldr	r1, [r4, #16]
 801786a:	464a      	mov	r2, r9
 801786c:	f7ff ff4d 	bl	801770a <memcpy>
 8017870:	89a3      	ldrh	r3, [r4, #12]
 8017872:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801787a:	81a3      	strh	r3, [r4, #12]
 801787c:	6126      	str	r6, [r4, #16]
 801787e:	6165      	str	r5, [r4, #20]
 8017880:	444e      	add	r6, r9
 8017882:	eba5 0509 	sub.w	r5, r5, r9
 8017886:	6026      	str	r6, [r4, #0]
 8017888:	60a5      	str	r5, [r4, #8]
 801788a:	463e      	mov	r6, r7
 801788c:	42be      	cmp	r6, r7
 801788e:	d900      	bls.n	8017892 <__ssputs_r+0x72>
 8017890:	463e      	mov	r6, r7
 8017892:	6820      	ldr	r0, [r4, #0]
 8017894:	4632      	mov	r2, r6
 8017896:	4641      	mov	r1, r8
 8017898:	f7ff fe54 	bl	8017544 <memmove>
 801789c:	68a3      	ldr	r3, [r4, #8]
 801789e:	1b9b      	subs	r3, r3, r6
 80178a0:	60a3      	str	r3, [r4, #8]
 80178a2:	6823      	ldr	r3, [r4, #0]
 80178a4:	4433      	add	r3, r6
 80178a6:	6023      	str	r3, [r4, #0]
 80178a8:	2000      	movs	r0, #0
 80178aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178ae:	462a      	mov	r2, r5
 80178b0:	f7ff fc0e 	bl	80170d0 <_realloc_r>
 80178b4:	4606      	mov	r6, r0
 80178b6:	2800      	cmp	r0, #0
 80178b8:	d1e0      	bne.n	801787c <__ssputs_r+0x5c>
 80178ba:	6921      	ldr	r1, [r4, #16]
 80178bc:	4650      	mov	r0, sl
 80178be:	f7ff ff5d 	bl	801777c <_free_r>
 80178c2:	230c      	movs	r3, #12
 80178c4:	f8ca 3000 	str.w	r3, [sl]
 80178c8:	89a3      	ldrh	r3, [r4, #12]
 80178ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80178ce:	81a3      	strh	r3, [r4, #12]
 80178d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80178d4:	e7e9      	b.n	80178aa <__ssputs_r+0x8a>
	...

080178d8 <_svfiprintf_r>:
 80178d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178dc:	4698      	mov	r8, r3
 80178de:	898b      	ldrh	r3, [r1, #12]
 80178e0:	061b      	lsls	r3, r3, #24
 80178e2:	b09d      	sub	sp, #116	@ 0x74
 80178e4:	4607      	mov	r7, r0
 80178e6:	460d      	mov	r5, r1
 80178e8:	4614      	mov	r4, r2
 80178ea:	d510      	bpl.n	801790e <_svfiprintf_r+0x36>
 80178ec:	690b      	ldr	r3, [r1, #16]
 80178ee:	b973      	cbnz	r3, 801790e <_svfiprintf_r+0x36>
 80178f0:	2140      	movs	r1, #64	@ 0x40
 80178f2:	f7ff faed 	bl	8016ed0 <_malloc_r>
 80178f6:	6028      	str	r0, [r5, #0]
 80178f8:	6128      	str	r0, [r5, #16]
 80178fa:	b930      	cbnz	r0, 801790a <_svfiprintf_r+0x32>
 80178fc:	230c      	movs	r3, #12
 80178fe:	603b      	str	r3, [r7, #0]
 8017900:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017904:	b01d      	add	sp, #116	@ 0x74
 8017906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801790a:	2340      	movs	r3, #64	@ 0x40
 801790c:	616b      	str	r3, [r5, #20]
 801790e:	2300      	movs	r3, #0
 8017910:	9309      	str	r3, [sp, #36]	@ 0x24
 8017912:	2320      	movs	r3, #32
 8017914:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017918:	f8cd 800c 	str.w	r8, [sp, #12]
 801791c:	2330      	movs	r3, #48	@ 0x30
 801791e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017abc <_svfiprintf_r+0x1e4>
 8017922:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017926:	f04f 0901 	mov.w	r9, #1
 801792a:	4623      	mov	r3, r4
 801792c:	469a      	mov	sl, r3
 801792e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017932:	b10a      	cbz	r2, 8017938 <_svfiprintf_r+0x60>
 8017934:	2a25      	cmp	r2, #37	@ 0x25
 8017936:	d1f9      	bne.n	801792c <_svfiprintf_r+0x54>
 8017938:	ebba 0b04 	subs.w	fp, sl, r4
 801793c:	d00b      	beq.n	8017956 <_svfiprintf_r+0x7e>
 801793e:	465b      	mov	r3, fp
 8017940:	4622      	mov	r2, r4
 8017942:	4629      	mov	r1, r5
 8017944:	4638      	mov	r0, r7
 8017946:	f7ff ff6b 	bl	8017820 <__ssputs_r>
 801794a:	3001      	adds	r0, #1
 801794c:	f000 80a7 	beq.w	8017a9e <_svfiprintf_r+0x1c6>
 8017950:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017952:	445a      	add	r2, fp
 8017954:	9209      	str	r2, [sp, #36]	@ 0x24
 8017956:	f89a 3000 	ldrb.w	r3, [sl]
 801795a:	2b00      	cmp	r3, #0
 801795c:	f000 809f 	beq.w	8017a9e <_svfiprintf_r+0x1c6>
 8017960:	2300      	movs	r3, #0
 8017962:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017966:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801796a:	f10a 0a01 	add.w	sl, sl, #1
 801796e:	9304      	str	r3, [sp, #16]
 8017970:	9307      	str	r3, [sp, #28]
 8017972:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017976:	931a      	str	r3, [sp, #104]	@ 0x68
 8017978:	4654      	mov	r4, sl
 801797a:	2205      	movs	r2, #5
 801797c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017980:	484e      	ldr	r0, [pc, #312]	@ (8017abc <_svfiprintf_r+0x1e4>)
 8017982:	f7e8 fc65 	bl	8000250 <memchr>
 8017986:	9a04      	ldr	r2, [sp, #16]
 8017988:	b9d8      	cbnz	r0, 80179c2 <_svfiprintf_r+0xea>
 801798a:	06d0      	lsls	r0, r2, #27
 801798c:	bf44      	itt	mi
 801798e:	2320      	movmi	r3, #32
 8017990:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017994:	0711      	lsls	r1, r2, #28
 8017996:	bf44      	itt	mi
 8017998:	232b      	movmi	r3, #43	@ 0x2b
 801799a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801799e:	f89a 3000 	ldrb.w	r3, [sl]
 80179a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80179a4:	d015      	beq.n	80179d2 <_svfiprintf_r+0xfa>
 80179a6:	9a07      	ldr	r2, [sp, #28]
 80179a8:	4654      	mov	r4, sl
 80179aa:	2000      	movs	r0, #0
 80179ac:	f04f 0c0a 	mov.w	ip, #10
 80179b0:	4621      	mov	r1, r4
 80179b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80179b6:	3b30      	subs	r3, #48	@ 0x30
 80179b8:	2b09      	cmp	r3, #9
 80179ba:	d94b      	bls.n	8017a54 <_svfiprintf_r+0x17c>
 80179bc:	b1b0      	cbz	r0, 80179ec <_svfiprintf_r+0x114>
 80179be:	9207      	str	r2, [sp, #28]
 80179c0:	e014      	b.n	80179ec <_svfiprintf_r+0x114>
 80179c2:	eba0 0308 	sub.w	r3, r0, r8
 80179c6:	fa09 f303 	lsl.w	r3, r9, r3
 80179ca:	4313      	orrs	r3, r2
 80179cc:	9304      	str	r3, [sp, #16]
 80179ce:	46a2      	mov	sl, r4
 80179d0:	e7d2      	b.n	8017978 <_svfiprintf_r+0xa0>
 80179d2:	9b03      	ldr	r3, [sp, #12]
 80179d4:	1d19      	adds	r1, r3, #4
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	9103      	str	r1, [sp, #12]
 80179da:	2b00      	cmp	r3, #0
 80179dc:	bfbb      	ittet	lt
 80179de:	425b      	neglt	r3, r3
 80179e0:	f042 0202 	orrlt.w	r2, r2, #2
 80179e4:	9307      	strge	r3, [sp, #28]
 80179e6:	9307      	strlt	r3, [sp, #28]
 80179e8:	bfb8      	it	lt
 80179ea:	9204      	strlt	r2, [sp, #16]
 80179ec:	7823      	ldrb	r3, [r4, #0]
 80179ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80179f0:	d10a      	bne.n	8017a08 <_svfiprintf_r+0x130>
 80179f2:	7863      	ldrb	r3, [r4, #1]
 80179f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80179f6:	d132      	bne.n	8017a5e <_svfiprintf_r+0x186>
 80179f8:	9b03      	ldr	r3, [sp, #12]
 80179fa:	1d1a      	adds	r2, r3, #4
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	9203      	str	r2, [sp, #12]
 8017a00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017a04:	3402      	adds	r4, #2
 8017a06:	9305      	str	r3, [sp, #20]
 8017a08:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017acc <_svfiprintf_r+0x1f4>
 8017a0c:	7821      	ldrb	r1, [r4, #0]
 8017a0e:	2203      	movs	r2, #3
 8017a10:	4650      	mov	r0, sl
 8017a12:	f7e8 fc1d 	bl	8000250 <memchr>
 8017a16:	b138      	cbz	r0, 8017a28 <_svfiprintf_r+0x150>
 8017a18:	9b04      	ldr	r3, [sp, #16]
 8017a1a:	eba0 000a 	sub.w	r0, r0, sl
 8017a1e:	2240      	movs	r2, #64	@ 0x40
 8017a20:	4082      	lsls	r2, r0
 8017a22:	4313      	orrs	r3, r2
 8017a24:	3401      	adds	r4, #1
 8017a26:	9304      	str	r3, [sp, #16]
 8017a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a2c:	4824      	ldr	r0, [pc, #144]	@ (8017ac0 <_svfiprintf_r+0x1e8>)
 8017a2e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017a32:	2206      	movs	r2, #6
 8017a34:	f7e8 fc0c 	bl	8000250 <memchr>
 8017a38:	2800      	cmp	r0, #0
 8017a3a:	d036      	beq.n	8017aaa <_svfiprintf_r+0x1d2>
 8017a3c:	4b21      	ldr	r3, [pc, #132]	@ (8017ac4 <_svfiprintf_r+0x1ec>)
 8017a3e:	bb1b      	cbnz	r3, 8017a88 <_svfiprintf_r+0x1b0>
 8017a40:	9b03      	ldr	r3, [sp, #12]
 8017a42:	3307      	adds	r3, #7
 8017a44:	f023 0307 	bic.w	r3, r3, #7
 8017a48:	3308      	adds	r3, #8
 8017a4a:	9303      	str	r3, [sp, #12]
 8017a4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a4e:	4433      	add	r3, r6
 8017a50:	9309      	str	r3, [sp, #36]	@ 0x24
 8017a52:	e76a      	b.n	801792a <_svfiprintf_r+0x52>
 8017a54:	fb0c 3202 	mla	r2, ip, r2, r3
 8017a58:	460c      	mov	r4, r1
 8017a5a:	2001      	movs	r0, #1
 8017a5c:	e7a8      	b.n	80179b0 <_svfiprintf_r+0xd8>
 8017a5e:	2300      	movs	r3, #0
 8017a60:	3401      	adds	r4, #1
 8017a62:	9305      	str	r3, [sp, #20]
 8017a64:	4619      	mov	r1, r3
 8017a66:	f04f 0c0a 	mov.w	ip, #10
 8017a6a:	4620      	mov	r0, r4
 8017a6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017a70:	3a30      	subs	r2, #48	@ 0x30
 8017a72:	2a09      	cmp	r2, #9
 8017a74:	d903      	bls.n	8017a7e <_svfiprintf_r+0x1a6>
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d0c6      	beq.n	8017a08 <_svfiprintf_r+0x130>
 8017a7a:	9105      	str	r1, [sp, #20]
 8017a7c:	e7c4      	b.n	8017a08 <_svfiprintf_r+0x130>
 8017a7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017a82:	4604      	mov	r4, r0
 8017a84:	2301      	movs	r3, #1
 8017a86:	e7f0      	b.n	8017a6a <_svfiprintf_r+0x192>
 8017a88:	ab03      	add	r3, sp, #12
 8017a8a:	9300      	str	r3, [sp, #0]
 8017a8c:	462a      	mov	r2, r5
 8017a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8017ac8 <_svfiprintf_r+0x1f0>)
 8017a90:	a904      	add	r1, sp, #16
 8017a92:	4638      	mov	r0, r7
 8017a94:	f3af 8000 	nop.w
 8017a98:	1c42      	adds	r2, r0, #1
 8017a9a:	4606      	mov	r6, r0
 8017a9c:	d1d6      	bne.n	8017a4c <_svfiprintf_r+0x174>
 8017a9e:	89ab      	ldrh	r3, [r5, #12]
 8017aa0:	065b      	lsls	r3, r3, #25
 8017aa2:	f53f af2d 	bmi.w	8017900 <_svfiprintf_r+0x28>
 8017aa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017aa8:	e72c      	b.n	8017904 <_svfiprintf_r+0x2c>
 8017aaa:	ab03      	add	r3, sp, #12
 8017aac:	9300      	str	r3, [sp, #0]
 8017aae:	462a      	mov	r2, r5
 8017ab0:	4b05      	ldr	r3, [pc, #20]	@ (8017ac8 <_svfiprintf_r+0x1f0>)
 8017ab2:	a904      	add	r1, sp, #16
 8017ab4:	4638      	mov	r0, r7
 8017ab6:	f000 f9bb 	bl	8017e30 <_printf_i>
 8017aba:	e7ed      	b.n	8017a98 <_svfiprintf_r+0x1c0>
 8017abc:	08019254 	.word	0x08019254
 8017ac0:	0801925e 	.word	0x0801925e
 8017ac4:	00000000 	.word	0x00000000
 8017ac8:	08017821 	.word	0x08017821
 8017acc:	0801925a 	.word	0x0801925a

08017ad0 <__sfputc_r>:
 8017ad0:	6893      	ldr	r3, [r2, #8]
 8017ad2:	3b01      	subs	r3, #1
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	b410      	push	{r4}
 8017ad8:	6093      	str	r3, [r2, #8]
 8017ada:	da08      	bge.n	8017aee <__sfputc_r+0x1e>
 8017adc:	6994      	ldr	r4, [r2, #24]
 8017ade:	42a3      	cmp	r3, r4
 8017ae0:	db01      	blt.n	8017ae6 <__sfputc_r+0x16>
 8017ae2:	290a      	cmp	r1, #10
 8017ae4:	d103      	bne.n	8017aee <__sfputc_r+0x1e>
 8017ae6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017aea:	f000 bb7f 	b.w	80181ec <__swbuf_r>
 8017aee:	6813      	ldr	r3, [r2, #0]
 8017af0:	1c58      	adds	r0, r3, #1
 8017af2:	6010      	str	r0, [r2, #0]
 8017af4:	7019      	strb	r1, [r3, #0]
 8017af6:	4608      	mov	r0, r1
 8017af8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017afc:	4770      	bx	lr

08017afe <__sfputs_r>:
 8017afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b00:	4606      	mov	r6, r0
 8017b02:	460f      	mov	r7, r1
 8017b04:	4614      	mov	r4, r2
 8017b06:	18d5      	adds	r5, r2, r3
 8017b08:	42ac      	cmp	r4, r5
 8017b0a:	d101      	bne.n	8017b10 <__sfputs_r+0x12>
 8017b0c:	2000      	movs	r0, #0
 8017b0e:	e007      	b.n	8017b20 <__sfputs_r+0x22>
 8017b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b14:	463a      	mov	r2, r7
 8017b16:	4630      	mov	r0, r6
 8017b18:	f7ff ffda 	bl	8017ad0 <__sfputc_r>
 8017b1c:	1c43      	adds	r3, r0, #1
 8017b1e:	d1f3      	bne.n	8017b08 <__sfputs_r+0xa>
 8017b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017b24 <_vfiprintf_r>:
 8017b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b28:	460d      	mov	r5, r1
 8017b2a:	b09d      	sub	sp, #116	@ 0x74
 8017b2c:	4614      	mov	r4, r2
 8017b2e:	4698      	mov	r8, r3
 8017b30:	4606      	mov	r6, r0
 8017b32:	b118      	cbz	r0, 8017b3c <_vfiprintf_r+0x18>
 8017b34:	6a03      	ldr	r3, [r0, #32]
 8017b36:	b90b      	cbnz	r3, 8017b3c <_vfiprintf_r+0x18>
 8017b38:	f7ff fbfc 	bl	8017334 <__sinit>
 8017b3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017b3e:	07d9      	lsls	r1, r3, #31
 8017b40:	d405      	bmi.n	8017b4e <_vfiprintf_r+0x2a>
 8017b42:	89ab      	ldrh	r3, [r5, #12]
 8017b44:	059a      	lsls	r2, r3, #22
 8017b46:	d402      	bmi.n	8017b4e <_vfiprintf_r+0x2a>
 8017b48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017b4a:	f7ff fdd4 	bl	80176f6 <__retarget_lock_acquire_recursive>
 8017b4e:	89ab      	ldrh	r3, [r5, #12]
 8017b50:	071b      	lsls	r3, r3, #28
 8017b52:	d501      	bpl.n	8017b58 <_vfiprintf_r+0x34>
 8017b54:	692b      	ldr	r3, [r5, #16]
 8017b56:	b99b      	cbnz	r3, 8017b80 <_vfiprintf_r+0x5c>
 8017b58:	4629      	mov	r1, r5
 8017b5a:	4630      	mov	r0, r6
 8017b5c:	f000 fb84 	bl	8018268 <__swsetup_r>
 8017b60:	b170      	cbz	r0, 8017b80 <_vfiprintf_r+0x5c>
 8017b62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017b64:	07dc      	lsls	r4, r3, #31
 8017b66:	d504      	bpl.n	8017b72 <_vfiprintf_r+0x4e>
 8017b68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017b6c:	b01d      	add	sp, #116	@ 0x74
 8017b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b72:	89ab      	ldrh	r3, [r5, #12]
 8017b74:	0598      	lsls	r0, r3, #22
 8017b76:	d4f7      	bmi.n	8017b68 <_vfiprintf_r+0x44>
 8017b78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017b7a:	f7ff fdbd 	bl	80176f8 <__retarget_lock_release_recursive>
 8017b7e:	e7f3      	b.n	8017b68 <_vfiprintf_r+0x44>
 8017b80:	2300      	movs	r3, #0
 8017b82:	9309      	str	r3, [sp, #36]	@ 0x24
 8017b84:	2320      	movs	r3, #32
 8017b86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017b8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8017b8e:	2330      	movs	r3, #48	@ 0x30
 8017b90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017d40 <_vfiprintf_r+0x21c>
 8017b94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017b98:	f04f 0901 	mov.w	r9, #1
 8017b9c:	4623      	mov	r3, r4
 8017b9e:	469a      	mov	sl, r3
 8017ba0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ba4:	b10a      	cbz	r2, 8017baa <_vfiprintf_r+0x86>
 8017ba6:	2a25      	cmp	r2, #37	@ 0x25
 8017ba8:	d1f9      	bne.n	8017b9e <_vfiprintf_r+0x7a>
 8017baa:	ebba 0b04 	subs.w	fp, sl, r4
 8017bae:	d00b      	beq.n	8017bc8 <_vfiprintf_r+0xa4>
 8017bb0:	465b      	mov	r3, fp
 8017bb2:	4622      	mov	r2, r4
 8017bb4:	4629      	mov	r1, r5
 8017bb6:	4630      	mov	r0, r6
 8017bb8:	f7ff ffa1 	bl	8017afe <__sfputs_r>
 8017bbc:	3001      	adds	r0, #1
 8017bbe:	f000 80a7 	beq.w	8017d10 <_vfiprintf_r+0x1ec>
 8017bc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017bc4:	445a      	add	r2, fp
 8017bc6:	9209      	str	r2, [sp, #36]	@ 0x24
 8017bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	f000 809f 	beq.w	8017d10 <_vfiprintf_r+0x1ec>
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017bd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017bdc:	f10a 0a01 	add.w	sl, sl, #1
 8017be0:	9304      	str	r3, [sp, #16]
 8017be2:	9307      	str	r3, [sp, #28]
 8017be4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017be8:	931a      	str	r3, [sp, #104]	@ 0x68
 8017bea:	4654      	mov	r4, sl
 8017bec:	2205      	movs	r2, #5
 8017bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017bf2:	4853      	ldr	r0, [pc, #332]	@ (8017d40 <_vfiprintf_r+0x21c>)
 8017bf4:	f7e8 fb2c 	bl	8000250 <memchr>
 8017bf8:	9a04      	ldr	r2, [sp, #16]
 8017bfa:	b9d8      	cbnz	r0, 8017c34 <_vfiprintf_r+0x110>
 8017bfc:	06d1      	lsls	r1, r2, #27
 8017bfe:	bf44      	itt	mi
 8017c00:	2320      	movmi	r3, #32
 8017c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017c06:	0713      	lsls	r3, r2, #28
 8017c08:	bf44      	itt	mi
 8017c0a:	232b      	movmi	r3, #43	@ 0x2b
 8017c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017c10:	f89a 3000 	ldrb.w	r3, [sl]
 8017c14:	2b2a      	cmp	r3, #42	@ 0x2a
 8017c16:	d015      	beq.n	8017c44 <_vfiprintf_r+0x120>
 8017c18:	9a07      	ldr	r2, [sp, #28]
 8017c1a:	4654      	mov	r4, sl
 8017c1c:	2000      	movs	r0, #0
 8017c1e:	f04f 0c0a 	mov.w	ip, #10
 8017c22:	4621      	mov	r1, r4
 8017c24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017c28:	3b30      	subs	r3, #48	@ 0x30
 8017c2a:	2b09      	cmp	r3, #9
 8017c2c:	d94b      	bls.n	8017cc6 <_vfiprintf_r+0x1a2>
 8017c2e:	b1b0      	cbz	r0, 8017c5e <_vfiprintf_r+0x13a>
 8017c30:	9207      	str	r2, [sp, #28]
 8017c32:	e014      	b.n	8017c5e <_vfiprintf_r+0x13a>
 8017c34:	eba0 0308 	sub.w	r3, r0, r8
 8017c38:	fa09 f303 	lsl.w	r3, r9, r3
 8017c3c:	4313      	orrs	r3, r2
 8017c3e:	9304      	str	r3, [sp, #16]
 8017c40:	46a2      	mov	sl, r4
 8017c42:	e7d2      	b.n	8017bea <_vfiprintf_r+0xc6>
 8017c44:	9b03      	ldr	r3, [sp, #12]
 8017c46:	1d19      	adds	r1, r3, #4
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	9103      	str	r1, [sp, #12]
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	bfbb      	ittet	lt
 8017c50:	425b      	neglt	r3, r3
 8017c52:	f042 0202 	orrlt.w	r2, r2, #2
 8017c56:	9307      	strge	r3, [sp, #28]
 8017c58:	9307      	strlt	r3, [sp, #28]
 8017c5a:	bfb8      	it	lt
 8017c5c:	9204      	strlt	r2, [sp, #16]
 8017c5e:	7823      	ldrb	r3, [r4, #0]
 8017c60:	2b2e      	cmp	r3, #46	@ 0x2e
 8017c62:	d10a      	bne.n	8017c7a <_vfiprintf_r+0x156>
 8017c64:	7863      	ldrb	r3, [r4, #1]
 8017c66:	2b2a      	cmp	r3, #42	@ 0x2a
 8017c68:	d132      	bne.n	8017cd0 <_vfiprintf_r+0x1ac>
 8017c6a:	9b03      	ldr	r3, [sp, #12]
 8017c6c:	1d1a      	adds	r2, r3, #4
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	9203      	str	r2, [sp, #12]
 8017c72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017c76:	3402      	adds	r4, #2
 8017c78:	9305      	str	r3, [sp, #20]
 8017c7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017d50 <_vfiprintf_r+0x22c>
 8017c7e:	7821      	ldrb	r1, [r4, #0]
 8017c80:	2203      	movs	r2, #3
 8017c82:	4650      	mov	r0, sl
 8017c84:	f7e8 fae4 	bl	8000250 <memchr>
 8017c88:	b138      	cbz	r0, 8017c9a <_vfiprintf_r+0x176>
 8017c8a:	9b04      	ldr	r3, [sp, #16]
 8017c8c:	eba0 000a 	sub.w	r0, r0, sl
 8017c90:	2240      	movs	r2, #64	@ 0x40
 8017c92:	4082      	lsls	r2, r0
 8017c94:	4313      	orrs	r3, r2
 8017c96:	3401      	adds	r4, #1
 8017c98:	9304      	str	r3, [sp, #16]
 8017c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c9e:	4829      	ldr	r0, [pc, #164]	@ (8017d44 <_vfiprintf_r+0x220>)
 8017ca0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017ca4:	2206      	movs	r2, #6
 8017ca6:	f7e8 fad3 	bl	8000250 <memchr>
 8017caa:	2800      	cmp	r0, #0
 8017cac:	d03f      	beq.n	8017d2e <_vfiprintf_r+0x20a>
 8017cae:	4b26      	ldr	r3, [pc, #152]	@ (8017d48 <_vfiprintf_r+0x224>)
 8017cb0:	bb1b      	cbnz	r3, 8017cfa <_vfiprintf_r+0x1d6>
 8017cb2:	9b03      	ldr	r3, [sp, #12]
 8017cb4:	3307      	adds	r3, #7
 8017cb6:	f023 0307 	bic.w	r3, r3, #7
 8017cba:	3308      	adds	r3, #8
 8017cbc:	9303      	str	r3, [sp, #12]
 8017cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017cc0:	443b      	add	r3, r7
 8017cc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8017cc4:	e76a      	b.n	8017b9c <_vfiprintf_r+0x78>
 8017cc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8017cca:	460c      	mov	r4, r1
 8017ccc:	2001      	movs	r0, #1
 8017cce:	e7a8      	b.n	8017c22 <_vfiprintf_r+0xfe>
 8017cd0:	2300      	movs	r3, #0
 8017cd2:	3401      	adds	r4, #1
 8017cd4:	9305      	str	r3, [sp, #20]
 8017cd6:	4619      	mov	r1, r3
 8017cd8:	f04f 0c0a 	mov.w	ip, #10
 8017cdc:	4620      	mov	r0, r4
 8017cde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ce2:	3a30      	subs	r2, #48	@ 0x30
 8017ce4:	2a09      	cmp	r2, #9
 8017ce6:	d903      	bls.n	8017cf0 <_vfiprintf_r+0x1cc>
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d0c6      	beq.n	8017c7a <_vfiprintf_r+0x156>
 8017cec:	9105      	str	r1, [sp, #20]
 8017cee:	e7c4      	b.n	8017c7a <_vfiprintf_r+0x156>
 8017cf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8017cf4:	4604      	mov	r4, r0
 8017cf6:	2301      	movs	r3, #1
 8017cf8:	e7f0      	b.n	8017cdc <_vfiprintf_r+0x1b8>
 8017cfa:	ab03      	add	r3, sp, #12
 8017cfc:	9300      	str	r3, [sp, #0]
 8017cfe:	462a      	mov	r2, r5
 8017d00:	4b12      	ldr	r3, [pc, #72]	@ (8017d4c <_vfiprintf_r+0x228>)
 8017d02:	a904      	add	r1, sp, #16
 8017d04:	4630      	mov	r0, r6
 8017d06:	f3af 8000 	nop.w
 8017d0a:	4607      	mov	r7, r0
 8017d0c:	1c78      	adds	r0, r7, #1
 8017d0e:	d1d6      	bne.n	8017cbe <_vfiprintf_r+0x19a>
 8017d10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017d12:	07d9      	lsls	r1, r3, #31
 8017d14:	d405      	bmi.n	8017d22 <_vfiprintf_r+0x1fe>
 8017d16:	89ab      	ldrh	r3, [r5, #12]
 8017d18:	059a      	lsls	r2, r3, #22
 8017d1a:	d402      	bmi.n	8017d22 <_vfiprintf_r+0x1fe>
 8017d1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017d1e:	f7ff fceb 	bl	80176f8 <__retarget_lock_release_recursive>
 8017d22:	89ab      	ldrh	r3, [r5, #12]
 8017d24:	065b      	lsls	r3, r3, #25
 8017d26:	f53f af1f 	bmi.w	8017b68 <_vfiprintf_r+0x44>
 8017d2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017d2c:	e71e      	b.n	8017b6c <_vfiprintf_r+0x48>
 8017d2e:	ab03      	add	r3, sp, #12
 8017d30:	9300      	str	r3, [sp, #0]
 8017d32:	462a      	mov	r2, r5
 8017d34:	4b05      	ldr	r3, [pc, #20]	@ (8017d4c <_vfiprintf_r+0x228>)
 8017d36:	a904      	add	r1, sp, #16
 8017d38:	4630      	mov	r0, r6
 8017d3a:	f000 f879 	bl	8017e30 <_printf_i>
 8017d3e:	e7e4      	b.n	8017d0a <_vfiprintf_r+0x1e6>
 8017d40:	08019254 	.word	0x08019254
 8017d44:	0801925e 	.word	0x0801925e
 8017d48:	00000000 	.word	0x00000000
 8017d4c:	08017aff 	.word	0x08017aff
 8017d50:	0801925a 	.word	0x0801925a

08017d54 <_printf_common>:
 8017d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d58:	4616      	mov	r6, r2
 8017d5a:	4698      	mov	r8, r3
 8017d5c:	688a      	ldr	r2, [r1, #8]
 8017d5e:	690b      	ldr	r3, [r1, #16]
 8017d60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017d64:	4293      	cmp	r3, r2
 8017d66:	bfb8      	it	lt
 8017d68:	4613      	movlt	r3, r2
 8017d6a:	6033      	str	r3, [r6, #0]
 8017d6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017d70:	4607      	mov	r7, r0
 8017d72:	460c      	mov	r4, r1
 8017d74:	b10a      	cbz	r2, 8017d7a <_printf_common+0x26>
 8017d76:	3301      	adds	r3, #1
 8017d78:	6033      	str	r3, [r6, #0]
 8017d7a:	6823      	ldr	r3, [r4, #0]
 8017d7c:	0699      	lsls	r1, r3, #26
 8017d7e:	bf42      	ittt	mi
 8017d80:	6833      	ldrmi	r3, [r6, #0]
 8017d82:	3302      	addmi	r3, #2
 8017d84:	6033      	strmi	r3, [r6, #0]
 8017d86:	6825      	ldr	r5, [r4, #0]
 8017d88:	f015 0506 	ands.w	r5, r5, #6
 8017d8c:	d106      	bne.n	8017d9c <_printf_common+0x48>
 8017d8e:	f104 0a19 	add.w	sl, r4, #25
 8017d92:	68e3      	ldr	r3, [r4, #12]
 8017d94:	6832      	ldr	r2, [r6, #0]
 8017d96:	1a9b      	subs	r3, r3, r2
 8017d98:	42ab      	cmp	r3, r5
 8017d9a:	dc26      	bgt.n	8017dea <_printf_common+0x96>
 8017d9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017da0:	6822      	ldr	r2, [r4, #0]
 8017da2:	3b00      	subs	r3, #0
 8017da4:	bf18      	it	ne
 8017da6:	2301      	movne	r3, #1
 8017da8:	0692      	lsls	r2, r2, #26
 8017daa:	d42b      	bmi.n	8017e04 <_printf_common+0xb0>
 8017dac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017db0:	4641      	mov	r1, r8
 8017db2:	4638      	mov	r0, r7
 8017db4:	47c8      	blx	r9
 8017db6:	3001      	adds	r0, #1
 8017db8:	d01e      	beq.n	8017df8 <_printf_common+0xa4>
 8017dba:	6823      	ldr	r3, [r4, #0]
 8017dbc:	6922      	ldr	r2, [r4, #16]
 8017dbe:	f003 0306 	and.w	r3, r3, #6
 8017dc2:	2b04      	cmp	r3, #4
 8017dc4:	bf02      	ittt	eq
 8017dc6:	68e5      	ldreq	r5, [r4, #12]
 8017dc8:	6833      	ldreq	r3, [r6, #0]
 8017dca:	1aed      	subeq	r5, r5, r3
 8017dcc:	68a3      	ldr	r3, [r4, #8]
 8017dce:	bf0c      	ite	eq
 8017dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017dd4:	2500      	movne	r5, #0
 8017dd6:	4293      	cmp	r3, r2
 8017dd8:	bfc4      	itt	gt
 8017dda:	1a9b      	subgt	r3, r3, r2
 8017ddc:	18ed      	addgt	r5, r5, r3
 8017dde:	2600      	movs	r6, #0
 8017de0:	341a      	adds	r4, #26
 8017de2:	42b5      	cmp	r5, r6
 8017de4:	d11a      	bne.n	8017e1c <_printf_common+0xc8>
 8017de6:	2000      	movs	r0, #0
 8017de8:	e008      	b.n	8017dfc <_printf_common+0xa8>
 8017dea:	2301      	movs	r3, #1
 8017dec:	4652      	mov	r2, sl
 8017dee:	4641      	mov	r1, r8
 8017df0:	4638      	mov	r0, r7
 8017df2:	47c8      	blx	r9
 8017df4:	3001      	adds	r0, #1
 8017df6:	d103      	bne.n	8017e00 <_printf_common+0xac>
 8017df8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e00:	3501      	adds	r5, #1
 8017e02:	e7c6      	b.n	8017d92 <_printf_common+0x3e>
 8017e04:	18e1      	adds	r1, r4, r3
 8017e06:	1c5a      	adds	r2, r3, #1
 8017e08:	2030      	movs	r0, #48	@ 0x30
 8017e0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017e0e:	4422      	add	r2, r4
 8017e10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017e14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017e18:	3302      	adds	r3, #2
 8017e1a:	e7c7      	b.n	8017dac <_printf_common+0x58>
 8017e1c:	2301      	movs	r3, #1
 8017e1e:	4622      	mov	r2, r4
 8017e20:	4641      	mov	r1, r8
 8017e22:	4638      	mov	r0, r7
 8017e24:	47c8      	blx	r9
 8017e26:	3001      	adds	r0, #1
 8017e28:	d0e6      	beq.n	8017df8 <_printf_common+0xa4>
 8017e2a:	3601      	adds	r6, #1
 8017e2c:	e7d9      	b.n	8017de2 <_printf_common+0x8e>
	...

08017e30 <_printf_i>:
 8017e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017e34:	7e0f      	ldrb	r7, [r1, #24]
 8017e36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017e38:	2f78      	cmp	r7, #120	@ 0x78
 8017e3a:	4691      	mov	r9, r2
 8017e3c:	4680      	mov	r8, r0
 8017e3e:	460c      	mov	r4, r1
 8017e40:	469a      	mov	sl, r3
 8017e42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017e46:	d807      	bhi.n	8017e58 <_printf_i+0x28>
 8017e48:	2f62      	cmp	r7, #98	@ 0x62
 8017e4a:	d80a      	bhi.n	8017e62 <_printf_i+0x32>
 8017e4c:	2f00      	cmp	r7, #0
 8017e4e:	f000 80d2 	beq.w	8017ff6 <_printf_i+0x1c6>
 8017e52:	2f58      	cmp	r7, #88	@ 0x58
 8017e54:	f000 80b9 	beq.w	8017fca <_printf_i+0x19a>
 8017e58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017e5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017e60:	e03a      	b.n	8017ed8 <_printf_i+0xa8>
 8017e62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017e66:	2b15      	cmp	r3, #21
 8017e68:	d8f6      	bhi.n	8017e58 <_printf_i+0x28>
 8017e6a:	a101      	add	r1, pc, #4	@ (adr r1, 8017e70 <_printf_i+0x40>)
 8017e6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017e70:	08017ec9 	.word	0x08017ec9
 8017e74:	08017edd 	.word	0x08017edd
 8017e78:	08017e59 	.word	0x08017e59
 8017e7c:	08017e59 	.word	0x08017e59
 8017e80:	08017e59 	.word	0x08017e59
 8017e84:	08017e59 	.word	0x08017e59
 8017e88:	08017edd 	.word	0x08017edd
 8017e8c:	08017e59 	.word	0x08017e59
 8017e90:	08017e59 	.word	0x08017e59
 8017e94:	08017e59 	.word	0x08017e59
 8017e98:	08017e59 	.word	0x08017e59
 8017e9c:	08017fdd 	.word	0x08017fdd
 8017ea0:	08017f07 	.word	0x08017f07
 8017ea4:	08017f97 	.word	0x08017f97
 8017ea8:	08017e59 	.word	0x08017e59
 8017eac:	08017e59 	.word	0x08017e59
 8017eb0:	08017fff 	.word	0x08017fff
 8017eb4:	08017e59 	.word	0x08017e59
 8017eb8:	08017f07 	.word	0x08017f07
 8017ebc:	08017e59 	.word	0x08017e59
 8017ec0:	08017e59 	.word	0x08017e59
 8017ec4:	08017f9f 	.word	0x08017f9f
 8017ec8:	6833      	ldr	r3, [r6, #0]
 8017eca:	1d1a      	adds	r2, r3, #4
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	6032      	str	r2, [r6, #0]
 8017ed0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017ed4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017ed8:	2301      	movs	r3, #1
 8017eda:	e09d      	b.n	8018018 <_printf_i+0x1e8>
 8017edc:	6833      	ldr	r3, [r6, #0]
 8017ede:	6820      	ldr	r0, [r4, #0]
 8017ee0:	1d19      	adds	r1, r3, #4
 8017ee2:	6031      	str	r1, [r6, #0]
 8017ee4:	0606      	lsls	r6, r0, #24
 8017ee6:	d501      	bpl.n	8017eec <_printf_i+0xbc>
 8017ee8:	681d      	ldr	r5, [r3, #0]
 8017eea:	e003      	b.n	8017ef4 <_printf_i+0xc4>
 8017eec:	0645      	lsls	r5, r0, #25
 8017eee:	d5fb      	bpl.n	8017ee8 <_printf_i+0xb8>
 8017ef0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017ef4:	2d00      	cmp	r5, #0
 8017ef6:	da03      	bge.n	8017f00 <_printf_i+0xd0>
 8017ef8:	232d      	movs	r3, #45	@ 0x2d
 8017efa:	426d      	negs	r5, r5
 8017efc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017f00:	4859      	ldr	r0, [pc, #356]	@ (8018068 <_printf_i+0x238>)
 8017f02:	230a      	movs	r3, #10
 8017f04:	e011      	b.n	8017f2a <_printf_i+0xfa>
 8017f06:	6821      	ldr	r1, [r4, #0]
 8017f08:	6833      	ldr	r3, [r6, #0]
 8017f0a:	0608      	lsls	r0, r1, #24
 8017f0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8017f10:	d402      	bmi.n	8017f18 <_printf_i+0xe8>
 8017f12:	0649      	lsls	r1, r1, #25
 8017f14:	bf48      	it	mi
 8017f16:	b2ad      	uxthmi	r5, r5
 8017f18:	2f6f      	cmp	r7, #111	@ 0x6f
 8017f1a:	4853      	ldr	r0, [pc, #332]	@ (8018068 <_printf_i+0x238>)
 8017f1c:	6033      	str	r3, [r6, #0]
 8017f1e:	bf14      	ite	ne
 8017f20:	230a      	movne	r3, #10
 8017f22:	2308      	moveq	r3, #8
 8017f24:	2100      	movs	r1, #0
 8017f26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017f2a:	6866      	ldr	r6, [r4, #4]
 8017f2c:	60a6      	str	r6, [r4, #8]
 8017f2e:	2e00      	cmp	r6, #0
 8017f30:	bfa2      	ittt	ge
 8017f32:	6821      	ldrge	r1, [r4, #0]
 8017f34:	f021 0104 	bicge.w	r1, r1, #4
 8017f38:	6021      	strge	r1, [r4, #0]
 8017f3a:	b90d      	cbnz	r5, 8017f40 <_printf_i+0x110>
 8017f3c:	2e00      	cmp	r6, #0
 8017f3e:	d04b      	beq.n	8017fd8 <_printf_i+0x1a8>
 8017f40:	4616      	mov	r6, r2
 8017f42:	fbb5 f1f3 	udiv	r1, r5, r3
 8017f46:	fb03 5711 	mls	r7, r3, r1, r5
 8017f4a:	5dc7      	ldrb	r7, [r0, r7]
 8017f4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017f50:	462f      	mov	r7, r5
 8017f52:	42bb      	cmp	r3, r7
 8017f54:	460d      	mov	r5, r1
 8017f56:	d9f4      	bls.n	8017f42 <_printf_i+0x112>
 8017f58:	2b08      	cmp	r3, #8
 8017f5a:	d10b      	bne.n	8017f74 <_printf_i+0x144>
 8017f5c:	6823      	ldr	r3, [r4, #0]
 8017f5e:	07df      	lsls	r7, r3, #31
 8017f60:	d508      	bpl.n	8017f74 <_printf_i+0x144>
 8017f62:	6923      	ldr	r3, [r4, #16]
 8017f64:	6861      	ldr	r1, [r4, #4]
 8017f66:	4299      	cmp	r1, r3
 8017f68:	bfde      	ittt	le
 8017f6a:	2330      	movle	r3, #48	@ 0x30
 8017f6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017f70:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8017f74:	1b92      	subs	r2, r2, r6
 8017f76:	6122      	str	r2, [r4, #16]
 8017f78:	f8cd a000 	str.w	sl, [sp]
 8017f7c:	464b      	mov	r3, r9
 8017f7e:	aa03      	add	r2, sp, #12
 8017f80:	4621      	mov	r1, r4
 8017f82:	4640      	mov	r0, r8
 8017f84:	f7ff fee6 	bl	8017d54 <_printf_common>
 8017f88:	3001      	adds	r0, #1
 8017f8a:	d14a      	bne.n	8018022 <_printf_i+0x1f2>
 8017f8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017f90:	b004      	add	sp, #16
 8017f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f96:	6823      	ldr	r3, [r4, #0]
 8017f98:	f043 0320 	orr.w	r3, r3, #32
 8017f9c:	6023      	str	r3, [r4, #0]
 8017f9e:	4833      	ldr	r0, [pc, #204]	@ (801806c <_printf_i+0x23c>)
 8017fa0:	2778      	movs	r7, #120	@ 0x78
 8017fa2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017fa6:	6823      	ldr	r3, [r4, #0]
 8017fa8:	6831      	ldr	r1, [r6, #0]
 8017faa:	061f      	lsls	r7, r3, #24
 8017fac:	f851 5b04 	ldr.w	r5, [r1], #4
 8017fb0:	d402      	bmi.n	8017fb8 <_printf_i+0x188>
 8017fb2:	065f      	lsls	r7, r3, #25
 8017fb4:	bf48      	it	mi
 8017fb6:	b2ad      	uxthmi	r5, r5
 8017fb8:	6031      	str	r1, [r6, #0]
 8017fba:	07d9      	lsls	r1, r3, #31
 8017fbc:	bf44      	itt	mi
 8017fbe:	f043 0320 	orrmi.w	r3, r3, #32
 8017fc2:	6023      	strmi	r3, [r4, #0]
 8017fc4:	b11d      	cbz	r5, 8017fce <_printf_i+0x19e>
 8017fc6:	2310      	movs	r3, #16
 8017fc8:	e7ac      	b.n	8017f24 <_printf_i+0xf4>
 8017fca:	4827      	ldr	r0, [pc, #156]	@ (8018068 <_printf_i+0x238>)
 8017fcc:	e7e9      	b.n	8017fa2 <_printf_i+0x172>
 8017fce:	6823      	ldr	r3, [r4, #0]
 8017fd0:	f023 0320 	bic.w	r3, r3, #32
 8017fd4:	6023      	str	r3, [r4, #0]
 8017fd6:	e7f6      	b.n	8017fc6 <_printf_i+0x196>
 8017fd8:	4616      	mov	r6, r2
 8017fda:	e7bd      	b.n	8017f58 <_printf_i+0x128>
 8017fdc:	6833      	ldr	r3, [r6, #0]
 8017fde:	6825      	ldr	r5, [r4, #0]
 8017fe0:	6961      	ldr	r1, [r4, #20]
 8017fe2:	1d18      	adds	r0, r3, #4
 8017fe4:	6030      	str	r0, [r6, #0]
 8017fe6:	062e      	lsls	r6, r5, #24
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	d501      	bpl.n	8017ff0 <_printf_i+0x1c0>
 8017fec:	6019      	str	r1, [r3, #0]
 8017fee:	e002      	b.n	8017ff6 <_printf_i+0x1c6>
 8017ff0:	0668      	lsls	r0, r5, #25
 8017ff2:	d5fb      	bpl.n	8017fec <_printf_i+0x1bc>
 8017ff4:	8019      	strh	r1, [r3, #0]
 8017ff6:	2300      	movs	r3, #0
 8017ff8:	6123      	str	r3, [r4, #16]
 8017ffa:	4616      	mov	r6, r2
 8017ffc:	e7bc      	b.n	8017f78 <_printf_i+0x148>
 8017ffe:	6833      	ldr	r3, [r6, #0]
 8018000:	1d1a      	adds	r2, r3, #4
 8018002:	6032      	str	r2, [r6, #0]
 8018004:	681e      	ldr	r6, [r3, #0]
 8018006:	6862      	ldr	r2, [r4, #4]
 8018008:	2100      	movs	r1, #0
 801800a:	4630      	mov	r0, r6
 801800c:	f7e8 f920 	bl	8000250 <memchr>
 8018010:	b108      	cbz	r0, 8018016 <_printf_i+0x1e6>
 8018012:	1b80      	subs	r0, r0, r6
 8018014:	6060      	str	r0, [r4, #4]
 8018016:	6863      	ldr	r3, [r4, #4]
 8018018:	6123      	str	r3, [r4, #16]
 801801a:	2300      	movs	r3, #0
 801801c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018020:	e7aa      	b.n	8017f78 <_printf_i+0x148>
 8018022:	6923      	ldr	r3, [r4, #16]
 8018024:	4632      	mov	r2, r6
 8018026:	4649      	mov	r1, r9
 8018028:	4640      	mov	r0, r8
 801802a:	47d0      	blx	sl
 801802c:	3001      	adds	r0, #1
 801802e:	d0ad      	beq.n	8017f8c <_printf_i+0x15c>
 8018030:	6823      	ldr	r3, [r4, #0]
 8018032:	079b      	lsls	r3, r3, #30
 8018034:	d413      	bmi.n	801805e <_printf_i+0x22e>
 8018036:	68e0      	ldr	r0, [r4, #12]
 8018038:	9b03      	ldr	r3, [sp, #12]
 801803a:	4298      	cmp	r0, r3
 801803c:	bfb8      	it	lt
 801803e:	4618      	movlt	r0, r3
 8018040:	e7a6      	b.n	8017f90 <_printf_i+0x160>
 8018042:	2301      	movs	r3, #1
 8018044:	4632      	mov	r2, r6
 8018046:	4649      	mov	r1, r9
 8018048:	4640      	mov	r0, r8
 801804a:	47d0      	blx	sl
 801804c:	3001      	adds	r0, #1
 801804e:	d09d      	beq.n	8017f8c <_printf_i+0x15c>
 8018050:	3501      	adds	r5, #1
 8018052:	68e3      	ldr	r3, [r4, #12]
 8018054:	9903      	ldr	r1, [sp, #12]
 8018056:	1a5b      	subs	r3, r3, r1
 8018058:	42ab      	cmp	r3, r5
 801805a:	dcf2      	bgt.n	8018042 <_printf_i+0x212>
 801805c:	e7eb      	b.n	8018036 <_printf_i+0x206>
 801805e:	2500      	movs	r5, #0
 8018060:	f104 0619 	add.w	r6, r4, #25
 8018064:	e7f5      	b.n	8018052 <_printf_i+0x222>
 8018066:	bf00      	nop
 8018068:	08019265 	.word	0x08019265
 801806c:	08019276 	.word	0x08019276

08018070 <__sflush_r>:
 8018070:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018078:	0716      	lsls	r6, r2, #28
 801807a:	4605      	mov	r5, r0
 801807c:	460c      	mov	r4, r1
 801807e:	d454      	bmi.n	801812a <__sflush_r+0xba>
 8018080:	684b      	ldr	r3, [r1, #4]
 8018082:	2b00      	cmp	r3, #0
 8018084:	dc02      	bgt.n	801808c <__sflush_r+0x1c>
 8018086:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018088:	2b00      	cmp	r3, #0
 801808a:	dd48      	ble.n	801811e <__sflush_r+0xae>
 801808c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801808e:	2e00      	cmp	r6, #0
 8018090:	d045      	beq.n	801811e <__sflush_r+0xae>
 8018092:	2300      	movs	r3, #0
 8018094:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018098:	682f      	ldr	r7, [r5, #0]
 801809a:	6a21      	ldr	r1, [r4, #32]
 801809c:	602b      	str	r3, [r5, #0]
 801809e:	d030      	beq.n	8018102 <__sflush_r+0x92>
 80180a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80180a2:	89a3      	ldrh	r3, [r4, #12]
 80180a4:	0759      	lsls	r1, r3, #29
 80180a6:	d505      	bpl.n	80180b4 <__sflush_r+0x44>
 80180a8:	6863      	ldr	r3, [r4, #4]
 80180aa:	1ad2      	subs	r2, r2, r3
 80180ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80180ae:	b10b      	cbz	r3, 80180b4 <__sflush_r+0x44>
 80180b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80180b2:	1ad2      	subs	r2, r2, r3
 80180b4:	2300      	movs	r3, #0
 80180b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80180b8:	6a21      	ldr	r1, [r4, #32]
 80180ba:	4628      	mov	r0, r5
 80180bc:	47b0      	blx	r6
 80180be:	1c43      	adds	r3, r0, #1
 80180c0:	89a3      	ldrh	r3, [r4, #12]
 80180c2:	d106      	bne.n	80180d2 <__sflush_r+0x62>
 80180c4:	6829      	ldr	r1, [r5, #0]
 80180c6:	291d      	cmp	r1, #29
 80180c8:	d82b      	bhi.n	8018122 <__sflush_r+0xb2>
 80180ca:	4a2a      	ldr	r2, [pc, #168]	@ (8018174 <__sflush_r+0x104>)
 80180cc:	410a      	asrs	r2, r1
 80180ce:	07d6      	lsls	r6, r2, #31
 80180d0:	d427      	bmi.n	8018122 <__sflush_r+0xb2>
 80180d2:	2200      	movs	r2, #0
 80180d4:	6062      	str	r2, [r4, #4]
 80180d6:	04d9      	lsls	r1, r3, #19
 80180d8:	6922      	ldr	r2, [r4, #16]
 80180da:	6022      	str	r2, [r4, #0]
 80180dc:	d504      	bpl.n	80180e8 <__sflush_r+0x78>
 80180de:	1c42      	adds	r2, r0, #1
 80180e0:	d101      	bne.n	80180e6 <__sflush_r+0x76>
 80180e2:	682b      	ldr	r3, [r5, #0]
 80180e4:	b903      	cbnz	r3, 80180e8 <__sflush_r+0x78>
 80180e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80180e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80180ea:	602f      	str	r7, [r5, #0]
 80180ec:	b1b9      	cbz	r1, 801811e <__sflush_r+0xae>
 80180ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80180f2:	4299      	cmp	r1, r3
 80180f4:	d002      	beq.n	80180fc <__sflush_r+0x8c>
 80180f6:	4628      	mov	r0, r5
 80180f8:	f7ff fb40 	bl	801777c <_free_r>
 80180fc:	2300      	movs	r3, #0
 80180fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8018100:	e00d      	b.n	801811e <__sflush_r+0xae>
 8018102:	2301      	movs	r3, #1
 8018104:	4628      	mov	r0, r5
 8018106:	47b0      	blx	r6
 8018108:	4602      	mov	r2, r0
 801810a:	1c50      	adds	r0, r2, #1
 801810c:	d1c9      	bne.n	80180a2 <__sflush_r+0x32>
 801810e:	682b      	ldr	r3, [r5, #0]
 8018110:	2b00      	cmp	r3, #0
 8018112:	d0c6      	beq.n	80180a2 <__sflush_r+0x32>
 8018114:	2b1d      	cmp	r3, #29
 8018116:	d001      	beq.n	801811c <__sflush_r+0xac>
 8018118:	2b16      	cmp	r3, #22
 801811a:	d11e      	bne.n	801815a <__sflush_r+0xea>
 801811c:	602f      	str	r7, [r5, #0]
 801811e:	2000      	movs	r0, #0
 8018120:	e022      	b.n	8018168 <__sflush_r+0xf8>
 8018122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018126:	b21b      	sxth	r3, r3
 8018128:	e01b      	b.n	8018162 <__sflush_r+0xf2>
 801812a:	690f      	ldr	r7, [r1, #16]
 801812c:	2f00      	cmp	r7, #0
 801812e:	d0f6      	beq.n	801811e <__sflush_r+0xae>
 8018130:	0793      	lsls	r3, r2, #30
 8018132:	680e      	ldr	r6, [r1, #0]
 8018134:	bf08      	it	eq
 8018136:	694b      	ldreq	r3, [r1, #20]
 8018138:	600f      	str	r7, [r1, #0]
 801813a:	bf18      	it	ne
 801813c:	2300      	movne	r3, #0
 801813e:	eba6 0807 	sub.w	r8, r6, r7
 8018142:	608b      	str	r3, [r1, #8]
 8018144:	f1b8 0f00 	cmp.w	r8, #0
 8018148:	dde9      	ble.n	801811e <__sflush_r+0xae>
 801814a:	6a21      	ldr	r1, [r4, #32]
 801814c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801814e:	4643      	mov	r3, r8
 8018150:	463a      	mov	r2, r7
 8018152:	4628      	mov	r0, r5
 8018154:	47b0      	blx	r6
 8018156:	2800      	cmp	r0, #0
 8018158:	dc08      	bgt.n	801816c <__sflush_r+0xfc>
 801815a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801815e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018162:	81a3      	strh	r3, [r4, #12]
 8018164:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801816c:	4407      	add	r7, r0
 801816e:	eba8 0800 	sub.w	r8, r8, r0
 8018172:	e7e7      	b.n	8018144 <__sflush_r+0xd4>
 8018174:	dfbffffe 	.word	0xdfbffffe

08018178 <_fflush_r>:
 8018178:	b538      	push	{r3, r4, r5, lr}
 801817a:	690b      	ldr	r3, [r1, #16]
 801817c:	4605      	mov	r5, r0
 801817e:	460c      	mov	r4, r1
 8018180:	b913      	cbnz	r3, 8018188 <_fflush_r+0x10>
 8018182:	2500      	movs	r5, #0
 8018184:	4628      	mov	r0, r5
 8018186:	bd38      	pop	{r3, r4, r5, pc}
 8018188:	b118      	cbz	r0, 8018192 <_fflush_r+0x1a>
 801818a:	6a03      	ldr	r3, [r0, #32]
 801818c:	b90b      	cbnz	r3, 8018192 <_fflush_r+0x1a>
 801818e:	f7ff f8d1 	bl	8017334 <__sinit>
 8018192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018196:	2b00      	cmp	r3, #0
 8018198:	d0f3      	beq.n	8018182 <_fflush_r+0xa>
 801819a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801819c:	07d0      	lsls	r0, r2, #31
 801819e:	d404      	bmi.n	80181aa <_fflush_r+0x32>
 80181a0:	0599      	lsls	r1, r3, #22
 80181a2:	d402      	bmi.n	80181aa <_fflush_r+0x32>
 80181a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80181a6:	f7ff faa6 	bl	80176f6 <__retarget_lock_acquire_recursive>
 80181aa:	4628      	mov	r0, r5
 80181ac:	4621      	mov	r1, r4
 80181ae:	f7ff ff5f 	bl	8018070 <__sflush_r>
 80181b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80181b4:	07da      	lsls	r2, r3, #31
 80181b6:	4605      	mov	r5, r0
 80181b8:	d4e4      	bmi.n	8018184 <_fflush_r+0xc>
 80181ba:	89a3      	ldrh	r3, [r4, #12]
 80181bc:	059b      	lsls	r3, r3, #22
 80181be:	d4e1      	bmi.n	8018184 <_fflush_r+0xc>
 80181c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80181c2:	f7ff fa99 	bl	80176f8 <__retarget_lock_release_recursive>
 80181c6:	e7dd      	b.n	8018184 <_fflush_r+0xc>

080181c8 <fiprintf>:
 80181c8:	b40e      	push	{r1, r2, r3}
 80181ca:	b503      	push	{r0, r1, lr}
 80181cc:	4601      	mov	r1, r0
 80181ce:	ab03      	add	r3, sp, #12
 80181d0:	4805      	ldr	r0, [pc, #20]	@ (80181e8 <fiprintf+0x20>)
 80181d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80181d6:	6800      	ldr	r0, [r0, #0]
 80181d8:	9301      	str	r3, [sp, #4]
 80181da:	f7ff fca3 	bl	8017b24 <_vfiprintf_r>
 80181de:	b002      	add	sp, #8
 80181e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80181e4:	b003      	add	sp, #12
 80181e6:	4770      	bx	lr
 80181e8:	200001e4 	.word	0x200001e4

080181ec <__swbuf_r>:
 80181ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181ee:	460e      	mov	r6, r1
 80181f0:	4614      	mov	r4, r2
 80181f2:	4605      	mov	r5, r0
 80181f4:	b118      	cbz	r0, 80181fe <__swbuf_r+0x12>
 80181f6:	6a03      	ldr	r3, [r0, #32]
 80181f8:	b90b      	cbnz	r3, 80181fe <__swbuf_r+0x12>
 80181fa:	f7ff f89b 	bl	8017334 <__sinit>
 80181fe:	69a3      	ldr	r3, [r4, #24]
 8018200:	60a3      	str	r3, [r4, #8]
 8018202:	89a3      	ldrh	r3, [r4, #12]
 8018204:	071a      	lsls	r2, r3, #28
 8018206:	d501      	bpl.n	801820c <__swbuf_r+0x20>
 8018208:	6923      	ldr	r3, [r4, #16]
 801820a:	b943      	cbnz	r3, 801821e <__swbuf_r+0x32>
 801820c:	4621      	mov	r1, r4
 801820e:	4628      	mov	r0, r5
 8018210:	f000 f82a 	bl	8018268 <__swsetup_r>
 8018214:	b118      	cbz	r0, 801821e <__swbuf_r+0x32>
 8018216:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801821a:	4638      	mov	r0, r7
 801821c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801821e:	6823      	ldr	r3, [r4, #0]
 8018220:	6922      	ldr	r2, [r4, #16]
 8018222:	1a98      	subs	r0, r3, r2
 8018224:	6963      	ldr	r3, [r4, #20]
 8018226:	b2f6      	uxtb	r6, r6
 8018228:	4283      	cmp	r3, r0
 801822a:	4637      	mov	r7, r6
 801822c:	dc05      	bgt.n	801823a <__swbuf_r+0x4e>
 801822e:	4621      	mov	r1, r4
 8018230:	4628      	mov	r0, r5
 8018232:	f7ff ffa1 	bl	8018178 <_fflush_r>
 8018236:	2800      	cmp	r0, #0
 8018238:	d1ed      	bne.n	8018216 <__swbuf_r+0x2a>
 801823a:	68a3      	ldr	r3, [r4, #8]
 801823c:	3b01      	subs	r3, #1
 801823e:	60a3      	str	r3, [r4, #8]
 8018240:	6823      	ldr	r3, [r4, #0]
 8018242:	1c5a      	adds	r2, r3, #1
 8018244:	6022      	str	r2, [r4, #0]
 8018246:	701e      	strb	r6, [r3, #0]
 8018248:	6962      	ldr	r2, [r4, #20]
 801824a:	1c43      	adds	r3, r0, #1
 801824c:	429a      	cmp	r2, r3
 801824e:	d004      	beq.n	801825a <__swbuf_r+0x6e>
 8018250:	89a3      	ldrh	r3, [r4, #12]
 8018252:	07db      	lsls	r3, r3, #31
 8018254:	d5e1      	bpl.n	801821a <__swbuf_r+0x2e>
 8018256:	2e0a      	cmp	r6, #10
 8018258:	d1df      	bne.n	801821a <__swbuf_r+0x2e>
 801825a:	4621      	mov	r1, r4
 801825c:	4628      	mov	r0, r5
 801825e:	f7ff ff8b 	bl	8018178 <_fflush_r>
 8018262:	2800      	cmp	r0, #0
 8018264:	d0d9      	beq.n	801821a <__swbuf_r+0x2e>
 8018266:	e7d6      	b.n	8018216 <__swbuf_r+0x2a>

08018268 <__swsetup_r>:
 8018268:	b538      	push	{r3, r4, r5, lr}
 801826a:	4b29      	ldr	r3, [pc, #164]	@ (8018310 <__swsetup_r+0xa8>)
 801826c:	4605      	mov	r5, r0
 801826e:	6818      	ldr	r0, [r3, #0]
 8018270:	460c      	mov	r4, r1
 8018272:	b118      	cbz	r0, 801827c <__swsetup_r+0x14>
 8018274:	6a03      	ldr	r3, [r0, #32]
 8018276:	b90b      	cbnz	r3, 801827c <__swsetup_r+0x14>
 8018278:	f7ff f85c 	bl	8017334 <__sinit>
 801827c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018280:	0719      	lsls	r1, r3, #28
 8018282:	d422      	bmi.n	80182ca <__swsetup_r+0x62>
 8018284:	06da      	lsls	r2, r3, #27
 8018286:	d407      	bmi.n	8018298 <__swsetup_r+0x30>
 8018288:	2209      	movs	r2, #9
 801828a:	602a      	str	r2, [r5, #0]
 801828c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018290:	81a3      	strh	r3, [r4, #12]
 8018292:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018296:	e033      	b.n	8018300 <__swsetup_r+0x98>
 8018298:	0758      	lsls	r0, r3, #29
 801829a:	d512      	bpl.n	80182c2 <__swsetup_r+0x5a>
 801829c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801829e:	b141      	cbz	r1, 80182b2 <__swsetup_r+0x4a>
 80182a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80182a4:	4299      	cmp	r1, r3
 80182a6:	d002      	beq.n	80182ae <__swsetup_r+0x46>
 80182a8:	4628      	mov	r0, r5
 80182aa:	f7ff fa67 	bl	801777c <_free_r>
 80182ae:	2300      	movs	r3, #0
 80182b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80182b2:	89a3      	ldrh	r3, [r4, #12]
 80182b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80182b8:	81a3      	strh	r3, [r4, #12]
 80182ba:	2300      	movs	r3, #0
 80182bc:	6063      	str	r3, [r4, #4]
 80182be:	6923      	ldr	r3, [r4, #16]
 80182c0:	6023      	str	r3, [r4, #0]
 80182c2:	89a3      	ldrh	r3, [r4, #12]
 80182c4:	f043 0308 	orr.w	r3, r3, #8
 80182c8:	81a3      	strh	r3, [r4, #12]
 80182ca:	6923      	ldr	r3, [r4, #16]
 80182cc:	b94b      	cbnz	r3, 80182e2 <__swsetup_r+0x7a>
 80182ce:	89a3      	ldrh	r3, [r4, #12]
 80182d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80182d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80182d8:	d003      	beq.n	80182e2 <__swsetup_r+0x7a>
 80182da:	4621      	mov	r1, r4
 80182dc:	4628      	mov	r0, r5
 80182de:	f000 f846 	bl	801836e <__smakebuf_r>
 80182e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182e6:	f013 0201 	ands.w	r2, r3, #1
 80182ea:	d00a      	beq.n	8018302 <__swsetup_r+0x9a>
 80182ec:	2200      	movs	r2, #0
 80182ee:	60a2      	str	r2, [r4, #8]
 80182f0:	6962      	ldr	r2, [r4, #20]
 80182f2:	4252      	negs	r2, r2
 80182f4:	61a2      	str	r2, [r4, #24]
 80182f6:	6922      	ldr	r2, [r4, #16]
 80182f8:	b942      	cbnz	r2, 801830c <__swsetup_r+0xa4>
 80182fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80182fe:	d1c5      	bne.n	801828c <__swsetup_r+0x24>
 8018300:	bd38      	pop	{r3, r4, r5, pc}
 8018302:	0799      	lsls	r1, r3, #30
 8018304:	bf58      	it	pl
 8018306:	6962      	ldrpl	r2, [r4, #20]
 8018308:	60a2      	str	r2, [r4, #8]
 801830a:	e7f4      	b.n	80182f6 <__swsetup_r+0x8e>
 801830c:	2000      	movs	r0, #0
 801830e:	e7f7      	b.n	8018300 <__swsetup_r+0x98>
 8018310:	200001e4 	.word	0x200001e4

08018314 <abort>:
 8018314:	b508      	push	{r3, lr}
 8018316:	2006      	movs	r0, #6
 8018318:	f000 f88e 	bl	8018438 <raise>
 801831c:	2001      	movs	r0, #1
 801831e:	f7e9 fd15 	bl	8001d4c <_exit>

08018322 <__swhatbuf_r>:
 8018322:	b570      	push	{r4, r5, r6, lr}
 8018324:	460c      	mov	r4, r1
 8018326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801832a:	2900      	cmp	r1, #0
 801832c:	b096      	sub	sp, #88	@ 0x58
 801832e:	4615      	mov	r5, r2
 8018330:	461e      	mov	r6, r3
 8018332:	da0d      	bge.n	8018350 <__swhatbuf_r+0x2e>
 8018334:	89a3      	ldrh	r3, [r4, #12]
 8018336:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801833a:	f04f 0100 	mov.w	r1, #0
 801833e:	bf14      	ite	ne
 8018340:	2340      	movne	r3, #64	@ 0x40
 8018342:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018346:	2000      	movs	r0, #0
 8018348:	6031      	str	r1, [r6, #0]
 801834a:	602b      	str	r3, [r5, #0]
 801834c:	b016      	add	sp, #88	@ 0x58
 801834e:	bd70      	pop	{r4, r5, r6, pc}
 8018350:	466a      	mov	r2, sp
 8018352:	f000 f879 	bl	8018448 <_fstat_r>
 8018356:	2800      	cmp	r0, #0
 8018358:	dbec      	blt.n	8018334 <__swhatbuf_r+0x12>
 801835a:	9901      	ldr	r1, [sp, #4]
 801835c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018360:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018364:	4259      	negs	r1, r3
 8018366:	4159      	adcs	r1, r3
 8018368:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801836c:	e7eb      	b.n	8018346 <__swhatbuf_r+0x24>

0801836e <__smakebuf_r>:
 801836e:	898b      	ldrh	r3, [r1, #12]
 8018370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018372:	079d      	lsls	r5, r3, #30
 8018374:	4606      	mov	r6, r0
 8018376:	460c      	mov	r4, r1
 8018378:	d507      	bpl.n	801838a <__smakebuf_r+0x1c>
 801837a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801837e:	6023      	str	r3, [r4, #0]
 8018380:	6123      	str	r3, [r4, #16]
 8018382:	2301      	movs	r3, #1
 8018384:	6163      	str	r3, [r4, #20]
 8018386:	b003      	add	sp, #12
 8018388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801838a:	ab01      	add	r3, sp, #4
 801838c:	466a      	mov	r2, sp
 801838e:	f7ff ffc8 	bl	8018322 <__swhatbuf_r>
 8018392:	9f00      	ldr	r7, [sp, #0]
 8018394:	4605      	mov	r5, r0
 8018396:	4639      	mov	r1, r7
 8018398:	4630      	mov	r0, r6
 801839a:	f7fe fd99 	bl	8016ed0 <_malloc_r>
 801839e:	b948      	cbnz	r0, 80183b4 <__smakebuf_r+0x46>
 80183a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183a4:	059a      	lsls	r2, r3, #22
 80183a6:	d4ee      	bmi.n	8018386 <__smakebuf_r+0x18>
 80183a8:	f023 0303 	bic.w	r3, r3, #3
 80183ac:	f043 0302 	orr.w	r3, r3, #2
 80183b0:	81a3      	strh	r3, [r4, #12]
 80183b2:	e7e2      	b.n	801837a <__smakebuf_r+0xc>
 80183b4:	89a3      	ldrh	r3, [r4, #12]
 80183b6:	6020      	str	r0, [r4, #0]
 80183b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80183bc:	81a3      	strh	r3, [r4, #12]
 80183be:	9b01      	ldr	r3, [sp, #4]
 80183c0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80183c4:	b15b      	cbz	r3, 80183de <__smakebuf_r+0x70>
 80183c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80183ca:	4630      	mov	r0, r6
 80183cc:	f000 f84e 	bl	801846c <_isatty_r>
 80183d0:	b128      	cbz	r0, 80183de <__smakebuf_r+0x70>
 80183d2:	89a3      	ldrh	r3, [r4, #12]
 80183d4:	f023 0303 	bic.w	r3, r3, #3
 80183d8:	f043 0301 	orr.w	r3, r3, #1
 80183dc:	81a3      	strh	r3, [r4, #12]
 80183de:	89a3      	ldrh	r3, [r4, #12]
 80183e0:	431d      	orrs	r5, r3
 80183e2:	81a5      	strh	r5, [r4, #12]
 80183e4:	e7cf      	b.n	8018386 <__smakebuf_r+0x18>

080183e6 <_raise_r>:
 80183e6:	291f      	cmp	r1, #31
 80183e8:	b538      	push	{r3, r4, r5, lr}
 80183ea:	4605      	mov	r5, r0
 80183ec:	460c      	mov	r4, r1
 80183ee:	d904      	bls.n	80183fa <_raise_r+0x14>
 80183f0:	2316      	movs	r3, #22
 80183f2:	6003      	str	r3, [r0, #0]
 80183f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80183f8:	bd38      	pop	{r3, r4, r5, pc}
 80183fa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80183fc:	b112      	cbz	r2, 8018404 <_raise_r+0x1e>
 80183fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018402:	b94b      	cbnz	r3, 8018418 <_raise_r+0x32>
 8018404:	4628      	mov	r0, r5
 8018406:	f000 f853 	bl	80184b0 <_getpid_r>
 801840a:	4622      	mov	r2, r4
 801840c:	4601      	mov	r1, r0
 801840e:	4628      	mov	r0, r5
 8018410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018414:	f000 b83a 	b.w	801848c <_kill_r>
 8018418:	2b01      	cmp	r3, #1
 801841a:	d00a      	beq.n	8018432 <_raise_r+0x4c>
 801841c:	1c59      	adds	r1, r3, #1
 801841e:	d103      	bne.n	8018428 <_raise_r+0x42>
 8018420:	2316      	movs	r3, #22
 8018422:	6003      	str	r3, [r0, #0]
 8018424:	2001      	movs	r0, #1
 8018426:	e7e7      	b.n	80183f8 <_raise_r+0x12>
 8018428:	2100      	movs	r1, #0
 801842a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801842e:	4620      	mov	r0, r4
 8018430:	4798      	blx	r3
 8018432:	2000      	movs	r0, #0
 8018434:	e7e0      	b.n	80183f8 <_raise_r+0x12>
	...

08018438 <raise>:
 8018438:	4b02      	ldr	r3, [pc, #8]	@ (8018444 <raise+0xc>)
 801843a:	4601      	mov	r1, r0
 801843c:	6818      	ldr	r0, [r3, #0]
 801843e:	f7ff bfd2 	b.w	80183e6 <_raise_r>
 8018442:	bf00      	nop
 8018444:	200001e4 	.word	0x200001e4

08018448 <_fstat_r>:
 8018448:	b538      	push	{r3, r4, r5, lr}
 801844a:	4d07      	ldr	r5, [pc, #28]	@ (8018468 <_fstat_r+0x20>)
 801844c:	2300      	movs	r3, #0
 801844e:	4604      	mov	r4, r0
 8018450:	4608      	mov	r0, r1
 8018452:	4611      	mov	r1, r2
 8018454:	602b      	str	r3, [r5, #0]
 8018456:	f7e9 fcc9 	bl	8001dec <_fstat>
 801845a:	1c43      	adds	r3, r0, #1
 801845c:	d102      	bne.n	8018464 <_fstat_r+0x1c>
 801845e:	682b      	ldr	r3, [r5, #0]
 8018460:	b103      	cbz	r3, 8018464 <_fstat_r+0x1c>
 8018462:	6023      	str	r3, [r4, #0]
 8018464:	bd38      	pop	{r3, r4, r5, pc}
 8018466:	bf00      	nop
 8018468:	2000b088 	.word	0x2000b088

0801846c <_isatty_r>:
 801846c:	b538      	push	{r3, r4, r5, lr}
 801846e:	4d06      	ldr	r5, [pc, #24]	@ (8018488 <_isatty_r+0x1c>)
 8018470:	2300      	movs	r3, #0
 8018472:	4604      	mov	r4, r0
 8018474:	4608      	mov	r0, r1
 8018476:	602b      	str	r3, [r5, #0]
 8018478:	f7e9 fcc8 	bl	8001e0c <_isatty>
 801847c:	1c43      	adds	r3, r0, #1
 801847e:	d102      	bne.n	8018486 <_isatty_r+0x1a>
 8018480:	682b      	ldr	r3, [r5, #0]
 8018482:	b103      	cbz	r3, 8018486 <_isatty_r+0x1a>
 8018484:	6023      	str	r3, [r4, #0]
 8018486:	bd38      	pop	{r3, r4, r5, pc}
 8018488:	2000b088 	.word	0x2000b088

0801848c <_kill_r>:
 801848c:	b538      	push	{r3, r4, r5, lr}
 801848e:	4d07      	ldr	r5, [pc, #28]	@ (80184ac <_kill_r+0x20>)
 8018490:	2300      	movs	r3, #0
 8018492:	4604      	mov	r4, r0
 8018494:	4608      	mov	r0, r1
 8018496:	4611      	mov	r1, r2
 8018498:	602b      	str	r3, [r5, #0]
 801849a:	f7e9 fc47 	bl	8001d2c <_kill>
 801849e:	1c43      	adds	r3, r0, #1
 80184a0:	d102      	bne.n	80184a8 <_kill_r+0x1c>
 80184a2:	682b      	ldr	r3, [r5, #0]
 80184a4:	b103      	cbz	r3, 80184a8 <_kill_r+0x1c>
 80184a6:	6023      	str	r3, [r4, #0]
 80184a8:	bd38      	pop	{r3, r4, r5, pc}
 80184aa:	bf00      	nop
 80184ac:	2000b088 	.word	0x2000b088

080184b0 <_getpid_r>:
 80184b0:	f7e9 bc34 	b.w	8001d1c <_getpid>

080184b4 <_init>:
 80184b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184b6:	bf00      	nop
 80184b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80184ba:	bc08      	pop	{r3}
 80184bc:	469e      	mov	lr, r3
 80184be:	4770      	bx	lr

080184c0 <_fini>:
 80184c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184c2:	bf00      	nop
 80184c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80184c6:	bc08      	pop	{r3}
 80184c8:	469e      	mov	lr, r3
 80184ca:	4770      	bx	lr
